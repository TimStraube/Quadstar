
NUCLEO-U083_motorcmd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f88  08004f88  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f88  08004f88  00005f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00005f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004f9c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004f9c  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001074c  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201e  00000000  00000000  00016780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000187a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb0  00000000  00000000  00019670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b278  00000000  00000000  0001a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a98  00000000  00000000  00035498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b31cb  00000000  00000000  00045f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f90fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000f9140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000fc74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e20 	.word	0x08004e20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004e20 	.word	0x08004e20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fc41 	bl	8000eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f89e 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fa32 	bl	8000a94 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000630:	f000 f8f6 	bl	8000820 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f9e0 	bl	80009f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000638:	4b43      	ldr	r3, [pc, #268]	@ (8000748 <main+0x128>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f002 feab 	bl	8003398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000642:	4b41      	ldr	r3, [pc, #260]	@ (8000748 <main+0x128>)
 8000644:	2104      	movs	r1, #4
 8000646:	0018      	movs	r0, r3
 8000648:	f002 fea6 	bl	8003398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800064c:	4b3e      	ldr	r3, [pc, #248]	@ (8000748 <main+0x128>)
 800064e:	2108      	movs	r1, #8
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fea1 	bl	8003398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000656:	4b3c      	ldr	r3, [pc, #240]	@ (8000748 <main+0x128>)
 8000658:	210c      	movs	r1, #12
 800065a:	0018      	movs	r0, r3
 800065c:	f002 fe9c 	bl	8003398 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		__HAL_TIM_SET_AUTORELOAD(&htim1, 20410 - 1); // ARR = 2041
 8000660:	4b39      	ldr	r3, [pc, #228]	@ (8000748 <main+0x128>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a39      	ldr	r2, [pc, #228]	@ (800074c <main+0x12c>)
 8000666:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000668:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <main+0x128>)
 800066a:	4a38      	ldr	r2, [pc, #224]	@ (800074c <main+0x12c>)
 800066c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 10600); // Arm the ESC
 800066e:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <main+0x128>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a37      	ldr	r2, [pc, #220]	@ (8000750 <main+0x130>)
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 10600); // Arm the ESC
 8000676:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <main+0x128>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a35      	ldr	r2, [pc, #212]	@ (8000750 <main+0x130>)
 800067c:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10600); // Arm the ESC
 800067e:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <main+0x128>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a33      	ldr	r2, [pc, #204]	@ (8000750 <main+0x130>)
 8000684:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 10600); // Arm the ESC
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <main+0x128>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a31      	ldr	r2, [pc, #196]	@ (8000750 <main+0x130>)
 800068c:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(1000);
 800068e:	23fa      	movs	r3, #250	@ 0xfa
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fc84 	bl	8000fa0 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 12000); // Set pulse width to 1200us
 8000698:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <main+0x128>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <main+0x134>)
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 12000); // Set pulse width to 1200us
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <main+0x128>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <main+0x134>)
 80006a6:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 12000); // Set pulse width to 1200us
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <main+0x128>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <main+0x134>)
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 12000); // Set pulse width to 1200us
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <main+0x128>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <main+0x134>)
 80006b6:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(1000); // Wait for 1 second
 80006b8:	23fa      	movs	r3, #250	@ 0xfa
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fc6f 	bl	8000fa0 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 14000); // Set pulse width to 1400us
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <main+0x128>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a24      	ldr	r2, [pc, #144]	@ (8000758 <main+0x138>)
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 14000); // Set pulse width to 1400us
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <main+0x128>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a22      	ldr	r2, [pc, #136]	@ (8000758 <main+0x138>)
 80006d0:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 14000); // Set pulse width to 1400us
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <main+0x128>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <main+0x138>)
 80006d8:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 14000); // Set pulse width to 1400us
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <main+0x128>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <main+0x138>)
 80006e0:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(10000); // Wait for 10 seconds
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <main+0x13c>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fc5b 	bl	8000fa0 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 18000); // Set pulse width back to 1200us
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <main+0x128>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <main+0x140>)
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 18000); // Set pulse width back to 1200us
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <main+0x128>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000760 <main+0x140>)
 80006f8:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 18000); // Set pulse width back to 1200us
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <main+0x128>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <main+0x140>)
 8000700:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 18000); // Set pulse width back to 1200us
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <main+0x128>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a16      	ldr	r2, [pc, #88]	@ (8000760 <main+0x140>)
 8000708:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(3000); // Wait for 3 seconds
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <main+0x144>)
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fc47 	bl	8000fa0 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 8000); // Disarm the ESC
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <main+0x128>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	22fa      	movs	r2, #250	@ 0xfa
 8000718:	0152      	lsls	r2, r2, #5
 800071a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 8000); // Disarm the ESC
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <main+0x128>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	22fa      	movs	r2, #250	@ 0xfa
 8000722:	0152      	lsls	r2, r2, #5
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 8000); // Disarm the ESC
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <main+0x128>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	22fa      	movs	r2, #250	@ 0xfa
 800072c:	0152      	lsls	r2, r2, #5
 800072e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 8000); // Disarm the ESC
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <main+0x128>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	22fa      	movs	r2, #250	@ 0xfa
 8000736:	0152      	lsls	r2, r2, #5
 8000738:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(1000);
 800073a:	23fa      	movs	r3, #250	@ 0xfa
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fc2e 	bl	8000fa0 <HAL_Delay>
		__HAL_TIM_SET_AUTORELOAD(&htim1, 20410 - 1); // ARR = 2041
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	e78b      	b.n	8000660 <main+0x40>
 8000748:	20000028 	.word	0x20000028
 800074c:	00004fb9 	.word	0x00004fb9
 8000750:	00002968 	.word	0x00002968
 8000754:	00002ee0 	.word	0x00002ee0
 8000758:	000036b0 	.word	0x000036b0
 800075c:	00002710 	.word	0x00002710
 8000760:	00004650 	.word	0x00004650
 8000764:	00000bb8 	.word	0x00000bb8

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b099      	sub	sp, #100	@ 0x64
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	2414      	movs	r4, #20
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	234c      	movs	r3, #76	@ 0x4c
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f004 fb25 	bl	8004dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	2310      	movs	r3, #16
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f004 fb1e 	bl	8004dc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fe6d 	bl	8001470 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2202      	movs	r2, #2
 800079a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	0052      	lsls	r2, r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2240      	movs	r2, #64	@ 0x40
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2202      	movs	r2, #2
 80007b6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2210      	movs	r2, #16
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 15;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	220f      	movs	r2, #15
 80007c2:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	0292      	lsls	r2, r2, #10
 80007ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	0492      	lsls	r2, r2, #18
 80007d2:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	05d2      	lsls	r2, r2, #23
 80007da:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 feb2 	bl	8001548 <HAL_RCC_OscConfig>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007e8:	f000 f9f0 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2207      	movs	r2, #7
 80007f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2203      	movs	r2, #3
 80007f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	22c0      	movs	r2, #192	@ 0xc0
 8000802:	01d2      	lsls	r2, r2, #7
 8000804:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2101      	movs	r1, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f001 fac6 	bl	8001d9c <HAL_RCC_ClockConfig>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000814:	f000 f9da 	bl	8000bcc <Error_Handler>
  }
}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b019      	add	sp, #100	@ 0x64
 800081e:	bd90      	pop	{r4, r7, pc}

08000820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	@ 0x70
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	2360      	movs	r3, #96	@ 0x60
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	2310      	movs	r3, #16
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 fac9 	bl	8004dc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	2354      	movs	r3, #84	@ 0x54
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	230c      	movs	r3, #12
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 fac1 	bl	8004dc8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000846:	2338      	movs	r3, #56	@ 0x38
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	231c      	movs	r3, #28
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 fab9 	bl	8004dc8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	0018      	movs	r0, r3
 800085a:	2334      	movs	r3, #52	@ 0x34
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f004 fab2 	bl	8004dc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000866:	4a62      	ldr	r2, [pc, #392]	@ (80009f0 <MX_TIM1_Init+0x1d0>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800086a:	4b60      	ldr	r3, [pc, #384]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b5e      	ldr	r3, [pc, #376]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000876:	4b5d      	ldr	r3, [pc, #372]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000878:	4a5e      	ldr	r2, [pc, #376]	@ (80009f4 <MX_TIM1_Init+0x1d4>)
 800087a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b5b      	ldr	r3, [pc, #364]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b58      	ldr	r3, [pc, #352]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088e:	4b57      	ldr	r3, [pc, #348]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fcc9 	bl	8003228 <HAL_TIM_Base_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800089a:	f000 f997 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089e:	2160      	movs	r1, #96	@ 0x60
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	0152      	lsls	r2, r2, #5
 80008a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	4b50      	ldr	r3, [pc, #320]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 ff54 	bl	800375c <HAL_TIM_ConfigClockSource>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008b8:	f000 f988 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008bc:	4b4b      	ldr	r3, [pc, #300]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 fd0a 	bl	80032d8 <HAL_TIM_PWM_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008c8:	f000 f980 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2154      	movs	r1, #84	@ 0x54
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e0:	187a      	adds	r2, r7, r1
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f003 fbee 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80008f0:	f000 f96c 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2138      	movs	r1, #56	@ 0x38
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2260      	movs	r2, #96	@ 0x60
 80008fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000920:	1879      	adds	r1, r7, r1
 8000922:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000924:	2200      	movs	r2, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fe18 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000930:	f000 f94c 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000934:	2338      	movs	r3, #56	@ 0x38
 8000936:	18f9      	adds	r1, r7, r3
 8000938:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 800093a:	2204      	movs	r2, #4
 800093c:	0018      	movs	r0, r3
 800093e:	f002 fe0d 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000946:	f000 f941 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094a:	2338      	movs	r3, #56	@ 0x38
 800094c:	18f9      	adds	r1, r7, r3
 800094e:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000950:	2208      	movs	r2, #8
 8000952:	0018      	movs	r0, r3
 8000954:	f002 fe02 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800095c:	f000 f936 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000960:	2338      	movs	r3, #56	@ 0x38
 8000962:	18f9      	adds	r1, r7, r3
 8000964:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 8000966:	220c      	movs	r2, #12
 8000968:	0018      	movs	r0, r3
 800096a:	f002 fdf7 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000972:	f000 f92b 	bl	8000bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	0192      	lsls	r2, r2, #6
 800099a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	0492      	lsls	r2, r2, #18
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009c8:	1d3a      	adds	r2, r7, #4
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f003 fbe8 	bl	80041a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 80009d8:	f000 f8f8 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <MX_TIM1_Init+0x1cc>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f954 	bl	8000c8c <HAL_TIM_MspPostInit>

}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b01c      	add	sp, #112	@ 0x70
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000028 	.word	0x20000028
 80009f0:	40012c00 	.word	0x40012c00
 80009f4:	0000ffff 	.word	0x0000ffff

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 80009fe:	4a24      	ldr	r2, [pc, #144]	@ (8000a90 <MX_USART1_UART_Init+0x98>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a02:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a04:	22e1      	movs	r2, #225	@ 0xe1
 8000a06:	0252      	lsls	r2, r2, #9
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f003 fc4a 	bl	80042dc <HAL_UART_Init>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f8be 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f004 f8d7 	bl	8004c08 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 f8b5 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a64:	2100      	movs	r1, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f004 f90e 	bl	8004c88 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 f8ac 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f004 f88c 	bl	8004b94 <HAL_UARTEx_DisableFifoMode>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 f8a4 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000074 	.word	0x20000074
 8000a90:	40013800 	.word	0x40013800

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	2414      	movs	r4, #20
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2314      	movs	r3, #20
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f004 f98f 	bl	8004dc8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000aac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aae:	4b44      	ldr	r3, [pc, #272]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ab6:	4b42      	ldr	r3, [pc, #264]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	2204      	movs	r2, #4
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ac8:	2120      	movs	r1, #32
 8000aca:	430a      	orrs	r2, r1
 8000acc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ace:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b39      	ldr	r3, [pc, #228]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000adc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ade:	4b38      	ldr	r3, [pc, #224]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ae6:	4b36      	ldr	r3, [pc, #216]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	2201      	movs	r2, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b33      	ldr	r3, [pc, #204]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000af4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000af6:	4b32      	ldr	r3, [pc, #200]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000af8:	2102      	movs	r1, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000afe:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <MX_GPIO_Init+0x12c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8000b0a:	23a0      	movs	r3, #160	@ 0xa0
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fc8e 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_button_Pin */
  GPIO_InitStruct.Pin = User_button_Pin;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2280      	movs	r2, #128	@ 0x80
 8000b1c:	0192      	lsls	r2, r2, #6
 8000b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_button_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	4a25      	ldr	r2, [pc, #148]	@ (8000bc4 <MX_GPIO_Init+0x130>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	0010      	movs	r0, r2
 8000b34:	f000 fb0a 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2202      	movs	r2, #2
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2207      	movs	r2, #7
 8000b54:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	193a      	adds	r2, r7, r4
 8000b58:	23a0      	movs	r3, #160	@ 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 faf4 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2220      	movs	r2, #32
 8000b68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	193a      	adds	r2, r7, r4
 8000b7e:	23a0      	movs	r3, #160	@ 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fae1 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	22c0      	movs	r2, #192	@ 0xc0
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2212      	movs	r2, #18
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2204      	movs	r2, #4
 8000baa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <MX_GPIO_Init+0x134>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	f000 faca 	bl	800114c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b00b      	add	sp, #44	@ 0x2c
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	50000800 	.word	0x50000800
 8000bc8:	50000400 	.word	0x50000400

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_MspInit+0x44>)
 8000be4:	2180      	movs	r1, #128	@ 0x80
 8000be6:	0549      	lsls	r1, r1, #21
 8000be8:	430a      	orrs	r2, r1
 8000bea:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_MspInit+0x44>)
 8000bee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	055b      	lsls	r3, r3, #21
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_MspInit+0x44>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b095      	sub	sp, #84	@ 0x54
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	240c      	movs	r4, #12
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2344      	movs	r3, #68	@ 0x44
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f004 f8c8 	bl	8004dc8 <memset>
  if(htim_base->Instance==TIM1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_TIM_Base_MspInit+0x64>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11c      	bne.n	8000c7c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	00d2      	lsls	r2, r2, #3
 8000c48:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 fab8 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000c5c:	f7ff ffb6 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_TIM_Base_MspInit+0x68>)
 8000c62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_TIM_Base_MspInit+0x68>)
 8000c66:	2180      	movs	r1, #128	@ 0x80
 8000c68:	0109      	lsls	r1, r1, #4
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_TIM_Base_MspInit+0x68>)
 8000c70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c72:	2380      	movs	r3, #128	@ 0x80
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4013      	ands	r3, r2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b015      	add	sp, #84	@ 0x54
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	240c      	movs	r4, #12
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f004 f892 	bl	8004dc8 <memset>
  if(htim->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <HAL_TIM_MspPostInit+0x74>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d123      	bne.n	8000cf6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_TIM_MspPostInit+0x78>)
 8000cb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_TIM_MspPostInit+0x78>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_TIM_MspPostInit+0x78>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	22f0      	movs	r2, #240	@ 0xf0
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	0021      	movs	r1, r4
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	187a      	adds	r2, r7, r1
 8000cea:	23a0      	movs	r3, #160	@ 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fa2b 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b009      	add	sp, #36	@ 0x24
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	40012c00 	.word	0x40012c00
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b09b      	sub	sp, #108	@ 0x6c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	2354      	movs	r3, #84	@ 0x54
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	2314      	movs	r3, #20
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f004 f854 	bl	8004dc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	2410      	movs	r4, #16
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	2344      	movs	r3, #68	@ 0x44
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f004 f84c 	bl	8004dc8 <memset>
  if(huart->Instance==USART1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a22      	ldr	r2, [pc, #136]	@ (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d13d      	bne.n	8000db6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fa3d 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d52:	f7ff ff3b 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d5c:	2180      	movs	r1, #128	@ 0x80
 8000d5e:	01c9      	lsls	r1, r1, #7
 8000d60:	430a      	orrs	r2, r1
 8000d62:	661a      	str	r2, [r3, #96]	@ 0x60
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	01db      	lsls	r3, r3, #7
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d78:	2102      	movs	r1, #2
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	2202      	movs	r2, #2
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8a:	2154      	movs	r1, #84	@ 0x54
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	22c0      	movs	r2, #192	@ 0xc0
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2207      	movs	r2, #7
 8000da8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000dae:	0019      	movs	r1, r3
 8000db0:	0010      	movs	r0, r2
 8000db2:	f000 f9cb 	bl	800114c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b01b      	add	sp, #108	@ 0x6c
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	50000400 	.word	0x50000400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8ba 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0x50>)
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	0512      	lsls	r2, r2, #20
 8000e0c:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8000e0e:	4a11      	ldr	r2, [pc, #68]	@ (8000e54 <SystemInit+0x54>)
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	58d3      	ldr	r3, [r2, r3]
 8000e14:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <SystemInit+0x54>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	4013      	ands	r3, r2
 8000e24:	d010      	beq.n	8000e48 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	22ff      	movs	r2, #255	@ 0xff
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2bcc      	cmp	r3, #204	@ 0xcc
 8000e2e:	d00b      	beq.n	8000e48 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	4013      	ands	r3, r2
 8000e36:	2baa      	cmp	r3, #170	@ 0xaa
 8000e38:	d006      	beq.n	8000e48 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x54>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <SystemInit+0x54>)
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	02c9      	lsls	r1, r1, #11
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	40022000 	.word	0x40022000

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff ffd0 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f003 ffa7 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fbc9 	bl	8000620 <main>

08000e8e <LoopForever>:

LoopForever:
  b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e9c:	08004f90 	.word	0x08004f90
  ldr r2, =_sbss
 8000ea0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea4:	2000010c 	.word	0x2000010c

08000ea8 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_COMP1_2_IRQHandler>

08000eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f80e 	bl	8000ed8 <HAL_InitTick>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e001      	b.n	8000ecc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec8:	f7ff fe86 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <HAL_InitTick+0x88>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d02b      	beq.n	8000f48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <HAL_InitTick+0x8c>)
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_InitTick+0x88>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0019      	movs	r1, r3
 8000efa:	23fa      	movs	r3, #250	@ 0xfa
 8000efc:	0098      	lsls	r0, r3, #2
 8000efe:	f7ff f903 	bl	8000108 <__udivsi3>
 8000f02:	0003      	movs	r3, r0
 8000f04:	0019      	movs	r1, r3
 8000f06:	0020      	movs	r0, r4
 8000f08:	f7ff f8fe 	bl	8000108 <__udivsi3>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 f90f 	bl	8001132 <HAL_SYSTICK_Config>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d112      	bne.n	8000f3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d80a      	bhi.n	8000f34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f8ee 	bl	8001108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_InitTick+0x90>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e00d      	b.n	8000f50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e008      	b.n	8000f50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e003      	b.n	8000f50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b005      	add	sp, #20
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <HAL_IncTick+0x18>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_IncTick+0x1c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	18d2      	adds	r2, r2, r3
 8000f7a:	4b02      	ldr	r3, [pc, #8]	@ (8000f84 <HAL_IncTick+0x18>)
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000108 	.word	0x20000108
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	@ (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	20000108 	.word	0x20000108

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff0 	bl	8000f8c <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	d004      	beq.n	8000fc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <HAL_Delay+0x40>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	f7ff ffe1 	bl	8000f8c <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d8f7      	bhi.n	8000fc6 <HAL_Delay+0x26>
  {
  }
}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff8:	d828      	bhi.n	800104c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <__NVIC_SetPriority+0xd4>)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	33c0      	adds	r3, #192	@ 0xc0
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	589b      	ldr	r3, [r3, r2]
 800100a:	1dfa      	adds	r2, r7, #7
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	0011      	movs	r1, r2
 8001010:	2203      	movs	r2, #3
 8001012:	400a      	ands	r2, r1
 8001014:	00d2      	lsls	r2, r2, #3
 8001016:	21ff      	movs	r1, #255	@ 0xff
 8001018:	4091      	lsls	r1, r2
 800101a:	000a      	movs	r2, r1
 800101c:	43d2      	mvns	r2, r2
 800101e:	401a      	ands	r2, r3
 8001020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	22ff      	movs	r2, #255	@ 0xff
 8001028:	401a      	ands	r2, r3
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0018      	movs	r0, r3
 8001030:	2303      	movs	r3, #3
 8001032:	4003      	ands	r3, r0
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	481f      	ldr	r0, [pc, #124]	@ (80010b8 <__NVIC_SetPriority+0xd4>)
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	430a      	orrs	r2, r1
 8001044:	33c0      	adds	r3, #192	@ 0xc0
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104a:	e031      	b.n	80010b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <__NVIC_SetPriority+0xd8>)
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0019      	movs	r1, r3
 8001054:	230f      	movs	r3, #15
 8001056:	400b      	ands	r3, r1
 8001058:	3b08      	subs	r3, #8
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3306      	adds	r3, #6
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	3304      	adds	r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1dfa      	adds	r2, r7, #7
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	0011      	movs	r1, r2
 800106c:	2203      	movs	r2, #3
 800106e:	400a      	ands	r2, r1
 8001070:	00d2      	lsls	r2, r2, #3
 8001072:	21ff      	movs	r1, #255	@ 0xff
 8001074:	4091      	lsls	r1, r2
 8001076:	000a      	movs	r2, r1
 8001078:	43d2      	mvns	r2, r2
 800107a:	401a      	ands	r2, r3
 800107c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	22ff      	movs	r2, #255	@ 0xff
 8001084:	401a      	ands	r2, r3
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	0018      	movs	r0, r3
 800108c:	2303      	movs	r3, #3
 800108e:	4003      	ands	r3, r0
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001094:	4809      	ldr	r0, [pc, #36]	@ (80010bc <__NVIC_SetPriority+0xd8>)
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	001c      	movs	r4, r3
 800109c:	230f      	movs	r3, #15
 800109e:	4023      	ands	r3, r4
 80010a0:	3b08      	subs	r3, #8
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	430a      	orrs	r2, r1
 80010a6:	3306      	adds	r3, #6
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	18c3      	adds	r3, r0, r3
 80010ac:	3304      	adds	r3, #4
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b003      	add	sp, #12
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	045b      	lsls	r3, r3, #17
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d301      	bcc.n	80010d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d4:	2301      	movs	r3, #1
 80010d6:	e010      	b.n	80010fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <SysTick_Config+0x44>)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	3a01      	subs	r2, #1
 80010de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e0:	2301      	movs	r3, #1
 80010e2:	425b      	negs	r3, r3
 80010e4:	2103      	movs	r1, #3
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff ff7c 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x44>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x44>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	210f      	movs	r1, #15
 8001114:	187b      	adds	r3, r7, r1
 8001116:	1c02      	adds	r2, r0, #0
 8001118:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff ffbf 	bl	80010c0 <SysTick_Config>
 8001142:	0003      	movs	r3, r0
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e153      	b.n	8001404 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4091      	lsls	r1, r2
 8001166:	000a      	movs	r2, r1
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <HAL_GPIO_Init+0x28>
 8001172:	e144      	b.n	80013fe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	4013      	ands	r3, r2
 800117c:	2b01      	cmp	r3, #1
 800117e:	d005      	beq.n	800118c <HAL_GPIO_Init+0x40>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	4013      	ands	r3, r2
 8001188:	2b02      	cmp	r3, #2
 800118a:	d130      	bne.n	80011ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	43da      	mvns	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	2201      	movs	r2, #1
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d017      	beq.n	800122a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	43da      	mvns	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2203      	movs	r2, #3
 8001230:	4013      	ands	r3, r2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	58d3      	ldr	r3, [r2, r3]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2207      	movs	r2, #7
 8001248:	4013      	ands	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2107      	movs	r1, #7
 8001262:	400b      	ands	r3, r1
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	6939      	ldr	r1, [r7, #16]
 800127c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	401a      	ands	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	23c0      	movs	r3, #192	@ 0xc0
 80012b8:	029b      	lsls	r3, r3, #10
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_GPIO_Init+0x174>
 80012be:	e09e      	b.n	80013fe <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012c0:	4a56      	ldr	r2, [pc, #344]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3318      	adds	r3, #24
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	589b      	ldr	r3, [r3, r2]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4013      	ands	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	220f      	movs	r2, #15
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	23a0      	movs	r3, #160	@ 0xa0
 80012e8:	05db      	lsls	r3, r3, #23
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x1e2>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001420 <HAL_GPIO_Init+0x2d4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x1de>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <HAL_GPIO_Init+0x2d8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x1da>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	@ (8001428 <HAL_GPIO_Init+0x2dc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x1d6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	@ (800142c <HAL_GPIO_Init+0x2e0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x1d2>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a47      	ldr	r2, [pc, #284]	@ (8001430 <HAL_GPIO_Init+0x2e4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x1ce>
 8001316:	2305      	movs	r3, #5
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x1e4>
 800131a:	2306      	movs	r3, #6
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x1e4>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x1e4>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x1e4>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x1e4>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x1e4>
 800132e:	2300      	movs	r3, #0
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	2103      	movs	r1, #3
 8001334:	400a      	ands	r2, r1
 8001336:	00d2      	lsls	r2, r2, #3
 8001338:	4093      	lsls	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001340:	4936      	ldr	r1, [pc, #216]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3318      	adds	r3, #24
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134e:	4b33      	ldr	r3, [pc, #204]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	035b      	lsls	r3, r3, #13
 8001366:	4013      	ands	r3, r2
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	4013      	ands	r3, r2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013a4:	2384      	movs	r3, #132	@ 0x84
 80013a6:	58d3      	ldr	r3, [r2, r3]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c8:	4914      	ldr	r1, [pc, #80]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013ca:	2284      	movs	r2, #132	@ 0x84
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	4013      	ands	r3, r2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f6:	4909      	ldr	r1, [pc, #36]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	40da      	lsrs	r2, r3
 800140c:	1e13      	subs	r3, r2, #0
 800140e:	d000      	beq.n	8001412 <HAL_GPIO_Init+0x2c6>
 8001410:	e6a4      	b.n	800115c <HAL_GPIO_Init+0x10>
  }
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b006      	add	sp, #24
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021800 	.word	0x40021800
 8001420:	50000400 	.word	0x50000400
 8001424:	50000800 	.word	0x50000800
 8001428:	50000c00 	.word	0x50000c00
 800142c:	50001000 	.word	0x50001000
 8001430:	50001400 	.word	0x50001400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	0008      	movs	r0, r1
 800143e:	0011      	movs	r1, r2
 8001440:	1cbb      	adds	r3, r7, #2
 8001442:	1c02      	adds	r2, r0, #0
 8001444:	801a      	strh	r2, [r3, #0]
 8001446:	1c7b      	adds	r3, r7, #1
 8001448:	1c0a      	adds	r2, r1, #0
 800144a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	1c7b      	adds	r3, r7, #1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001454:	1cbb      	adds	r3, r7, #2
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145e:	1cbb      	adds	r3, r7, #2
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	429a      	cmp	r2, r3
 8001480:	d137      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	23c0      	movs	r3, #192	@ 0xc0
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	401a      	ands	r2, r3
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d040      	beq.n	8001516 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800149a:	401a      	ands	r2, r3
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800149e:	2180      	movs	r1, #128	@ 0x80
 80014a0:	0089      	lsls	r1, r1, #2
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2232      	movs	r2, #50	@ 0x32
 80014ac:	4353      	muls	r3, r2
 80014ae:	491f      	ldr	r1, [pc, #124]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7fe fe29 	bl	8000108 <__udivsi3>
 80014b6:	0003      	movs	r3, r0
 80014b8:	3301      	adds	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014bc:	e002      	b.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	401a      	ands	r2, r3
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d102      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x6c>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	401a      	ands	r2, r3
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d113      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e012      	b.n	8001518 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	23c0      	movs	r3, #192	@ 0xc0
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	401a      	ands	r2, r3
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	429a      	cmp	r2, r3
 8001502:	d008      	beq.n	8001516 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800150a:	401a      	ands	r2, r3
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800150e:	2180      	movs	r1, #128	@ 0x80
 8001510:	00c9      	lsls	r1, r1, #3
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40007000 	.word	0x40007000
 8001524:	fffff9ff 	.word	0xfffff9ff
 8001528:	20000000 	.word	0x20000000
 800152c:	000f4240 	.word	0x000f4240

08001530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <HAL_PWREx_GetVoltageRange+0x14>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	23c0      	movs	r3, #192	@ 0xc0
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4013      	ands	r3, r2
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40007000 	.word	0x40007000

08001548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001550:	4bc9      	ldr	r3, [pc, #804]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2238      	movs	r2, #56	@ 0x38
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155a:	4bc7      	ldr	r3, [pc, #796]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2203      	movs	r2, #3
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2210      	movs	r2, #16
 800156a:	4013      	ands	r3, r2
 800156c:	d100      	bne.n	8001570 <HAL_RCC_OscConfig+0x28>
 800156e:	e0ef      	b.n	8001750 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_RCC_OscConfig+0x3e>
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b18      	cmp	r3, #24
 800157a:	d000      	beq.n	800157e <HAL_RCC_OscConfig+0x36>
 800157c:	e093      	b.n	80016a6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d000      	beq.n	8001586 <HAL_RCC_OscConfig+0x3e>
 8001584:	e08f      	b.n	80016a6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001586:	4bbc      	ldr	r3, [pc, #752]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d006      	beq.n	800159e <HAL_RCC_OscConfig+0x56>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	f000 fbf2 	bl	8001d82 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a2:	4bb5      	ldr	r3, [pc, #724]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2108      	movs	r1, #8
 80015a8:	400b      	ands	r3, r1
 80015aa:	d004      	beq.n	80015b6 <HAL_RCC_OscConfig+0x6e>
 80015ac:	4bb2      	ldr	r3, [pc, #712]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	21f0      	movs	r1, #240	@ 0xf0
 80015b2:	400b      	ands	r3, r1
 80015b4:	e005      	b.n	80015c2 <HAL_RCC_OscConfig+0x7a>
 80015b6:	49b0      	ldr	r1, [pc, #704]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015b8:	2394      	movs	r3, #148	@ 0x94
 80015ba:	58cb      	ldr	r3, [r1, r3]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	21f0      	movs	r1, #240	@ 0xf0
 80015c0:	400b      	ands	r3, r1
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d225      	bcs.n	8001612 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 fd90 	bl	80020f0 <RCC_SetFlashLatencyFromMSIRange>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d002      	beq.n	80015da <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	f000 fbd4 	bl	8001d82 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015da:	4ba7      	ldr	r3, [pc, #668]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4ba6      	ldr	r3, [pc, #664]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015e0:	2108      	movs	r1, #8
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	22f0      	movs	r2, #240	@ 0xf0
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fa:	4b9f      	ldr	r3, [pc, #636]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a9f      	ldr	r2, [pc, #636]	@ (800187c <HAL_RCC_OscConfig+0x334>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	021a      	lsls	r2, r3, #8
 800160a:	4b9b      	ldr	r3, [pc, #620]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	e027      	b.n	8001662 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001612:	4b99      	ldr	r3, [pc, #612]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b98      	ldr	r3, [pc, #608]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001618:	2108      	movs	r1, #8
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b96      	ldr	r3, [pc, #600]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	22f0      	movs	r2, #240	@ 0xf0
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800162c:	4b92      	ldr	r3, [pc, #584]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001632:	4b91      	ldr	r3, [pc, #580]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a91      	ldr	r2, [pc, #580]	@ (800187c <HAL_RCC_OscConfig+0x334>)
 8001638:	4013      	ands	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	4b8d      	ldr	r3, [pc, #564]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	0018      	movs	r0, r3
 8001654:	f000 fd4c 	bl	80020f0 <RCC_SetFlashLatencyFromMSIRange>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d002      	beq.n	8001662 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f000 fb90 	bl	8001d82 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001662:	f000 fc87 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001666:	0001      	movs	r1, r0
 8001668:	4b83      	ldr	r3, [pc, #524]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 800166a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	220f      	movs	r2, #15
 8001670:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001672:	4a83      	ldr	r2, [pc, #524]	@ (8001880 <HAL_RCC_OscConfig+0x338>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001676:	001a      	movs	r2, r3
 8001678:	231f      	movs	r3, #31
 800167a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800167c:	000a      	movs	r2, r1
 800167e:	40da      	lsrs	r2, r3
 8001680:	4b80      	ldr	r3, [pc, #512]	@ (8001884 <HAL_RCC_OscConfig+0x33c>)
 8001682:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001684:	4b80      	ldr	r3, [pc, #512]	@ (8001888 <HAL_RCC_OscConfig+0x340>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	250f      	movs	r5, #15
 800168a:	197c      	adds	r4, r7, r5
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fc23 	bl	8000ed8 <HAL_InitTick>
 8001692:	0003      	movs	r3, r0
 8001694:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8001696:	197b      	adds	r3, r7, r5
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d057      	beq.n	800174e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800169e:	197b      	adds	r3, r7, r5
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f000 fb6e 	bl	8001d82 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d035      	beq.n	800171a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ae:	4b72      	ldr	r3, [pc, #456]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b71      	ldr	r3, [pc, #452]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fc67 	bl	8000f8c <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c2:	e009      	b.n	80016d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc62 	bl	8000f8c <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d902      	bls.n	80016d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f000 fb55 	bl	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d8:	4b67      	ldr	r3, [pc, #412]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b64      	ldr	r3, [pc, #400]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016e8:	2108      	movs	r1, #8
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	4b62      	ldr	r3, [pc, #392]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	22f0      	movs	r2, #240	@ 0xf0
 80016f4:	4393      	bics	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001702:	4b5d      	ldr	r3, [pc, #372]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a5d      	ldr	r2, [pc, #372]	@ (800187c <HAL_RCC_OscConfig+0x334>)
 8001708:	4013      	ands	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	021a      	lsls	r2, r3, #8
 8001712:	4b59      	ldr	r3, [pc, #356]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	e01a      	b.n	8001750 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800171a:	4b57      	ldr	r3, [pc, #348]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b56      	ldr	r3, [pc, #344]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001720:	2101      	movs	r1, #1
 8001722:	438a      	bics	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001726:	f7ff fc31 	bl	8000f8c <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001730:	f7ff fc2c 	bl	8000f8c <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e31f      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001742:	4b4d      	ldr	r3, [pc, #308]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d1f1      	bne.n	8001730 <HAL_RCC_OscConfig+0x1e8>
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	d100      	bne.n	800175c <HAL_RCC_OscConfig+0x214>
 800175a:	e065      	b.n	8001828 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x226>
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b18      	cmp	r3, #24
 8001766:	d10e      	bne.n	8001786 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d10b      	bne.n	8001786 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176e:	4b42      	ldr	r3, [pc, #264]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	029b      	lsls	r3, r3, #10
 8001776:	4013      	ands	r3, r2
 8001778:	d055      	beq.n	8001826 <HAL_RCC_OscConfig+0x2de>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d151      	bne.n	8001826 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e2fd      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_OscConfig+0x25a>
 8001792:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b38      	ldr	r3, [pc, #224]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001798:	2180      	movs	r1, #128	@ 0x80
 800179a:	0249      	lsls	r1, r1, #9
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e013      	b.n	80017ca <HAL_RCC_OscConfig+0x282>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	23a0      	movs	r3, #160	@ 0xa0
 80017a8:	02db      	lsls	r3, r3, #11
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_OscConfig+0x276>
 80017ae:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80017b4:	21a0      	movs	r1, #160	@ 0xa0
 80017b6:	02c9      	lsls	r1, r1, #11
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e005      	b.n	80017ca <HAL_RCC_OscConfig+0x282>
 80017be:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80017c4:	4931      	ldr	r1, [pc, #196]	@ (800188c <HAL_RCC_OscConfig+0x344>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d014      	beq.n	80017fc <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fbdb 	bl	8000f8c <HAL_GetTick>
 80017d6:	0003      	movs	r3, r0
 80017d8:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fbd6 	bl	8000f8c <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e2c9      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	4013      	ands	r3, r2
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x294>
 80017fa:	e015      	b.n	8001828 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fbc6 	bl	8000f8c <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001806:	f7ff fbc1 	bl	8000f8c <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	@ 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e2b4      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001818:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x2be>
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001826:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x2ec>
 8001832:	e074      	b.n	800191e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b08      	cmp	r3, #8
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x2fe>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b18      	cmp	r3, #24
 800183e:	d129      	bne.n	8001894 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d126      	bne.n	8001894 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4013      	ands	r3, r2
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x316>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e291      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_RCC_OscConfig+0x348>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061a      	lsls	r2, r3, #24
 800186e:	4b02      	ldr	r3, [pc, #8]	@ (8001878 <HAL_RCC_OscConfig+0x330>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	e053      	b.n	800191e <HAL_RCC_OscConfig+0x3d6>
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	40021000 	.word	0x40021000
 800187c:	ffff00ff 	.word	0xffff00ff
 8001880:	08004e38 	.word	0x08004e38
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004
 800188c:	fffaffff 	.word	0xfffaffff
 8001890:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d026      	beq.n	80018ea <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4bc7      	ldr	r3, [pc, #796]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4bc6      	ldr	r3, [pc, #792]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80018a2:	2180      	movs	r1, #128	@ 0x80
 80018a4:	0049      	lsls	r1, r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb6f 	bl	8000f8c <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fb6a 	bl	8000f8c <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e25d      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c6:	4bbd      	ldr	r3, [pc, #756]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4013      	ands	r3, r2
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4bba      	ldr	r3, [pc, #744]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4aba      	ldr	r2, [pc, #744]	@ (8001bc0 <HAL_RCC_OscConfig+0x678>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	061a      	lsls	r2, r3, #24
 80018e2:	4bb6      	ldr	r3, [pc, #728]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	e019      	b.n	800191e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4bb4      	ldr	r3, [pc, #720]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4bb3      	ldr	r3, [pc, #716]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80018f0:	49b4      	ldr	r1, [pc, #720]	@ (8001bc4 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fb49 	bl	8000f8c <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001900:	f7ff fb44 	bl	8000f8c <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e237      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001912:	4baa      	ldr	r3, [pc, #680]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4013      	ands	r3, r2
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2208      	movs	r2, #8
 8001924:	4013      	ands	r3, r2
 8001926:	d051      	beq.n	80019cc <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d031      	beq.n	8001994 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d108      	bne.n	800194a <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001938:	4aa0      	ldr	r2, [pc, #640]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 800193a:	2394      	movs	r3, #148	@ 0x94
 800193c:	58d3      	ldr	r3, [r2, r3]
 800193e:	499f      	ldr	r1, [pc, #636]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001940:	2204      	movs	r2, #4
 8001942:	4393      	bics	r3, r2
 8001944:	2294      	movs	r2, #148	@ 0x94
 8001946:	508b      	str	r3, [r1, r2]
 8001948:	e007      	b.n	800195a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800194a:	4a9c      	ldr	r2, [pc, #624]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 800194c:	2394      	movs	r3, #148	@ 0x94
 800194e:	58d3      	ldr	r3, [r2, r3]
 8001950:	499a      	ldr	r1, [pc, #616]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001952:	2204      	movs	r2, #4
 8001954:	4313      	orrs	r3, r2
 8001956:	2294      	movs	r2, #148	@ 0x94
 8001958:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4a98      	ldr	r2, [pc, #608]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 800195c:	2394      	movs	r3, #148	@ 0x94
 800195e:	58d3      	ldr	r3, [r2, r3]
 8001960:	4996      	ldr	r1, [pc, #600]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001962:	2201      	movs	r2, #1
 8001964:	4313      	orrs	r3, r2
 8001966:	2294      	movs	r2, #148	@ 0x94
 8001968:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fb0f 	bl	8000f8c <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fb0a 	bl	8000f8c <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b11      	cmp	r3, #17
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1fd      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001986:	4a8d      	ldr	r2, [pc, #564]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001988:	2394      	movs	r3, #148	@ 0x94
 800198a:	58d3      	ldr	r3, [r2, r3]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x42c>
 8001992:	e01b      	b.n	80019cc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001994:	4a89      	ldr	r2, [pc, #548]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001996:	2394      	movs	r3, #148	@ 0x94
 8001998:	58d3      	ldr	r3, [r2, r3]
 800199a:	4988      	ldr	r1, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 800199c:	2201      	movs	r2, #1
 800199e:	4393      	bics	r3, r2
 80019a0:	2294      	movs	r2, #148	@ 0x94
 80019a2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff faf2 	bl	8000f8c <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff faed 	bl	8000f8c <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1e0      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c0:	4a7e      	ldr	r2, [pc, #504]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80019c2:	2394      	movs	r3, #148	@ 0x94
 80019c4:	58d3      	ldr	r3, [r2, r3]
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2204      	movs	r2, #4
 80019d2:	4013      	ands	r3, r2
 80019d4:	d100      	bne.n	80019d8 <HAL_RCC_OscConfig+0x490>
 80019d6:	e10d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d8:	201f      	movs	r0, #31
 80019da:	183b      	adds	r3, r7, r0
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80019e0:	4b76      	ldr	r3, [pc, #472]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80019e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	055b      	lsls	r3, r3, #21
 80019e8:	4013      	ands	r3, r2
 80019ea:	d110      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	4b73      	ldr	r3, [pc, #460]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80019ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019f0:	4b72      	ldr	r3, [pc, #456]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	0549      	lsls	r1, r1, #21
 80019f6:	430a      	orrs	r2, r1
 80019f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80019fa:	4b70      	ldr	r3, [pc, #448]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 80019fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	055b      	lsls	r3, r3, #21
 8001a02:	4013      	ands	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a08:	183b      	adds	r3, r7, r0
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001bc8 <HAL_RCC_OscConfig+0x680>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d11a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <HAL_RCC_OscConfig+0x680>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0x680>)
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	0049      	lsls	r1, r1, #1
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fab0 	bl	8000f8c <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff faab 	bl	8000f8c <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e19e      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <HAL_RCC_OscConfig+0x680>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d01e      	beq.n	8001a98 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a64:	4a55      	ldr	r2, [pc, #340]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a66:	2390      	movs	r3, #144	@ 0x90
 8001a68:	58d3      	ldr	r3, [r2, r3]
 8001a6a:	4954      	ldr	r1, [pc, #336]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	2290      	movs	r2, #144	@ 0x90
 8001a72:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a74:	4a51      	ldr	r2, [pc, #324]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a76:	2390      	movs	r3, #144	@ 0x90
 8001a78:	58d3      	ldr	r3, [r2, r3]
 8001a7a:	4950      	ldr	r1, [pc, #320]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	2290      	movs	r2, #144	@ 0x90
 8001a82:	508b      	str	r3, [r1, r2]
 8001a84:	e018      	b.n	8001ab8 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a86:	4a4d      	ldr	r2, [pc, #308]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a88:	2390      	movs	r3, #144	@ 0x90
 8001a8a:	58d3      	ldr	r3, [r2, r3]
 8001a8c:	494b      	ldr	r1, [pc, #300]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4313      	orrs	r3, r2
 8001a92:	2290      	movs	r2, #144	@ 0x90
 8001a94:	508b      	str	r3, [r1, r2]
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a98:	4a48      	ldr	r2, [pc, #288]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001a9a:	2390      	movs	r3, #144	@ 0x90
 8001a9c:	58d3      	ldr	r3, [r2, r3]
 8001a9e:	4947      	ldr	r1, [pc, #284]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	2290      	movs	r2, #144	@ 0x90
 8001aa6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001aa8:	4a44      	ldr	r2, [pc, #272]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001aaa:	2390      	movs	r3, #144	@ 0x90
 8001aac:	58d3      	ldr	r3, [r2, r3]
 8001aae:	4943      	ldr	r1, [pc, #268]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	2290      	movs	r2, #144	@ 0x90
 8001ab6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d04f      	beq.n	8001b60 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fa64 	bl	8000f8c <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fa5f 	bl	8000f8c <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8001bcc <HAL_RCC_OscConfig+0x684>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e151      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	4a37      	ldr	r2, [pc, #220]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001ae0:	2390      	movs	r3, #144	@ 0x90
 8001ae2:	58d3      	ldr	r3, [r2, r3]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0ef      	beq.n	8001aca <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2280      	movs	r2, #128	@ 0x80
 8001af0:	4013      	ands	r3, r2
 8001af2:	d01a      	beq.n	8001b2a <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001af4:	4a31      	ldr	r2, [pc, #196]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001af6:	2390      	movs	r3, #144	@ 0x90
 8001af8:	58d3      	ldr	r3, [r2, r3]
 8001afa:	4930      	ldr	r1, [pc, #192]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	4313      	orrs	r3, r2
 8001b00:	2290      	movs	r2, #144	@ 0x90
 8001b02:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fa41 	bl	8000f8c <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <HAL_RCC_OscConfig+0x684>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e133      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b1a:	4a28      	ldr	r2, [pc, #160]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b1c:	2390      	movs	r3, #144	@ 0x90
 8001b1e:	58d2      	ldr	r2, [r2, r3]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4013      	ands	r3, r2
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCC_OscConfig+0x5be>
 8001b28:	e059      	b.n	8001bde <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b2a:	4a24      	ldr	r2, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b2c:	2390      	movs	r3, #144	@ 0x90
 8001b2e:	58d3      	ldr	r3, [r2, r3]
 8001b30:	4922      	ldr	r1, [pc, #136]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	4393      	bics	r3, r2
 8001b36:	2290      	movs	r2, #144	@ 0x90
 8001b38:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fa26 	bl	8000f8c <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x684>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e118      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b50:	4a1a      	ldr	r2, [pc, #104]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b52:	2390      	movs	r3, #144	@ 0x90
 8001b54:	58d2      	ldr	r2, [r2, r3]
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5f4>
 8001b5e:	e03e      	b.n	8001bde <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fa14 	bl	8000f8c <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fa0f 	bl	8000f8c <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <HAL_RCC_OscConfig+0x684>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e101      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b80:	2390      	movs	r3, #144	@ 0x90
 8001b82:	58d3      	ldr	r3, [r2, r3]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b8c:	2390      	movs	r3, #144	@ 0x90
 8001b8e:	58d3      	ldr	r3, [r2, r3]
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	4013      	ands	r3, r2
 8001b94:	d023      	beq.n	8001bde <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b98:	2390      	movs	r3, #144	@ 0x90
 8001b9a:	58d3      	ldr	r3, [r2, r3]
 8001b9c:	4907      	ldr	r1, [pc, #28]	@ (8001bbc <HAL_RCC_OscConfig+0x674>)
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	2290      	movs	r2, #144	@ 0x90
 8001ba4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff f9f0 	bl	8000f8c <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x684>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d90b      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0e2      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	80ffffff 	.word	0x80ffffff
 8001bc4:	fffffeff 	.word	0xfffffeff
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001bd2:	2390      	movs	r3, #144	@ 0x90
 8001bd4:	58d2      	ldr	r2, [r2, r3]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1e4      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bde:	231f      	movs	r3, #31
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b68      	ldr	r3, [pc, #416]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001bea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bec:	4b67      	ldr	r3, [pc, #412]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001bee:	4968      	ldr	r1, [pc, #416]	@ (8001d90 <HAL_RCC_OscConfig+0x848>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d03c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c06:	4a61      	ldr	r2, [pc, #388]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c08:	2398      	movs	r3, #152	@ 0x98
 8001c0a:	58d3      	ldr	r3, [r2, r3]
 8001c0c:	495f      	ldr	r1, [pc, #380]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4313      	orrs	r3, r2
 8001c12:	2298      	movs	r2, #152	@ 0x98
 8001c14:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff f9b9 	bl	8000f8c <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c20:	f7ff f9b4 	bl	8000f8c <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0a7      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c32:	4a56      	ldr	r2, [pc, #344]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c34:	2398      	movs	r3, #152	@ 0x98
 8001c36:	58d3      	ldr	r3, [r2, r3]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x6d8>
 8001c3e:	e01b      	b.n	8001c78 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c40:	4a52      	ldr	r2, [pc, #328]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c42:	2398      	movs	r3, #152	@ 0x98
 8001c44:	58d3      	ldr	r3, [r2, r3]
 8001c46:	4951      	ldr	r1, [pc, #324]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	2298      	movs	r2, #152	@ 0x98
 8001c4e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f99c 	bl	8000f8c <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5a:	f7ff f997 	bl	8000f8c <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e08a      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8001c6c:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c6e:	2398      	movs	r3, #152	@ 0x98
 8001c70:	58d3      	ldr	r3, [r2, r3]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d100      	bne.n	8001c82 <HAL_RCC_OscConfig+0x73a>
 8001c80:	e07e      	b.n	8001d80 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c82:	4b42      	ldr	r3, [pc, #264]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	d100      	bne.n	8001c90 <HAL_RCC_OscConfig+0x748>
 8001c8e:	e075      	b.n	8001d7c <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d156      	bne.n	8001d46 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b3c      	ldr	r3, [pc, #240]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001c9e:	493d      	ldr	r1, [pc, #244]	@ (8001d94 <HAL_RCC_OscConfig+0x84c>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f972 	bl	8000f8c <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff f96d 	bl	8000f8c <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e060      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc0:	4b32      	ldr	r3, [pc, #200]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	049b      	lsls	r3, r3, #18
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a31      	ldr	r2, [pc, #196]	@ (8001d98 <HAL_RCC_OscConfig+0x850>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	0549      	lsls	r1, r1, #21
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d14:	2180      	movs	r1, #128	@ 0x80
 8001d16:	0449      	lsls	r1, r1, #17
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f936 	bl	8000f8c <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7ff f931 	bl	8000f8c <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e024      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	049b      	lsls	r3, r3, #18
 8001d40:	4013      	ands	r3, r2
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x7de>
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d4c:	4911      	ldr	r1, [pc, #68]	@ (8001d94 <HAL_RCC_OscConfig+0x84c>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff f91b 	bl	8000f8c <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f916 	bl	8000f8c <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <HAL_RCC_OscConfig+0x844>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	049b      	lsls	r3, r3, #18
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x814>
 8001d7a:	e001      	b.n	8001d80 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b008      	add	sp, #32
 8001d88:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	efffffff 	.word	0xefffffff
 8001d94:	feffffff 	.word	0xfeffffff
 8001d98:	11c1808c 	.word	0x11c1808c

08001d9c <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2207      	movs	r2, #7
 8001dac:	4013      	ands	r3, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d911      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db4:	4b68      	ldr	r3, [pc, #416]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2207      	movs	r2, #7
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	4b66      	ldr	r3, [pc, #408]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b64      	ldr	r3, [pc, #400]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2207      	movs	r2, #7
 8001dcc:	4013      	ands	r3, r2
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0bb      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d100      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x48>
 8001de2:	e064      	b.n	8001eae <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	4b5b      	ldr	r3, [pc, #364]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	049b      	lsls	r3, r3, #18
 8001df4:	4013      	ands	r3, r2
 8001df6:	d138      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0a9      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e04:	4b55      	ldr	r3, [pc, #340]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d12c      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e09d      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d121      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e092      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e32:	4b4a      	ldr	r3, [pc, #296]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e086      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4a:	4a44      	ldr	r2, [pc, #272]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	2394      	movs	r3, #148	@ 0x94
 8001e4e:	58d3      	ldr	r3, [r2, r3]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07a      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	4a40      	ldr	r2, [pc, #256]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	2390      	movs	r3, #144	@ 0x90
 8001e5e:	58d3      	ldr	r3, [r2, r3]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e072      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2207      	movs	r2, #7
 8001e70:	4393      	bics	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4b38      	ldr	r3, [pc, #224]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7e:	f7ff f885 	bl	8000f8c <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e009      	b.n	8001e9c <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff f880 	bl	8000f8c <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	4a33      	ldr	r2, [pc, #204]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e059      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	@ 0x38
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d1ec      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b28      	ldr	r3, [pc, #160]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a29      	ldr	r2, [pc, #164]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d211      	bcs.n	8001efe <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4393      	bics	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e028      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <HAL_RCC_ClockConfig+0x1cc>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001f1c:	f000 f82a 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f20:	0001      	movs	r1, r0
 8001f22:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	220f      	movs	r2, #15
 8001f2a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <HAL_RCC_ClockConfig+0x1d0>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f30:	001a      	movs	r2, r3
 8001f32:	231f      	movs	r3, #31
 8001f34:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001f36:	000a      	movs	r2, r1
 8001f38:	40da      	lsrs	r2, r3
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_RCC_ClockConfig+0x1d4>)
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8001f3e:	250b      	movs	r5, #11
 8001f40:	197c      	adds	r4, r7, r5
 8001f42:	2003      	movs	r0, #3
 8001f44:	f7fe ffc8 	bl	8000ed8 <HAL_InitTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8001f4c:	197b      	adds	r3, r7, r5
 8001f4e:	781b      	ldrb	r3, [r3, #0]
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b004      	add	sp, #16
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	00001388 	.word	0x00001388
 8001f64:	fffff0ff 	.word	0xfffff0ff
 8001f68:	ffff8fff 	.word	0xffff8fff
 8001f6c:	08004e38 	.word	0x08004e38
 8001f70:	20000000 	.word	0x20000000

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f82:	4b46      	ldr	r3, [pc, #280]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2238      	movs	r2, #56	@ 0x38
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8c:	4b43      	ldr	r3, [pc, #268]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2203      	movs	r2, #3
 8001f92:	4013      	ands	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b18      	cmp	r3, #24
 8001fa0:	d125      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d122      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2208      	movs	r2, #8
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8001fb4:	2394      	movs	r3, #148	@ 0x94
 8001fb6:	58d3      	ldr	r3, [r2, r3]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	220f      	movs	r2, #15
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc0:	e005      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc2:	4b36      	ldr	r3, [pc, #216]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	220f      	movs	r2, #15
 8001fca:	4013      	ands	r3, r2
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	2b0b      	cmp	r3, #11
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8001fd8:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	58d3      	ldr	r3, [r2, r3]
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11b      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fec:	e018      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x130>)
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	e012      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	e00c      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b20      	cmp	r3, #32
 800200a:	d103      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800200c:	23fa      	movs	r3, #250	@ 0xfa
 800200e:	01db      	lsls	r3, r3, #7
 8002010:	623b      	str	r3, [r7, #32]
 8002012:	e005      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b28      	cmp	r3, #40	@ 0x28
 8002018:	d102      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b18      	cmp	r3, #24
 8002024:	d135      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2203      	movs	r2, #3
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002030:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	2207      	movs	r2, #7
 8002038:	4013      	ands	r3, r2
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d003      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xd8>
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0xde>
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x130>)
 800204e:	61fb      	str	r3, [r7, #28]
        break;
 8002050:	e005      	b.n	800205e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002054:	61fb      	str	r3, [r7, #28]
        break;
 8002056:	e002      	b.n	800205e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	61fb      	str	r3, [r7, #28]
        break;
 800205c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	227f      	movs	r2, #127	@ 0x7f
 8002066:	4013      	ands	r3, r2
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	4353      	muls	r3, r2
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	0018      	movs	r0, r3
 8002070:	f7fe f84a 	bl	8000108 <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_RCC_GetSysClockFreq+0x128>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0f5b      	lsrs	r3, r3, #29
 800207e:	2207      	movs	r2, #7
 8002080:	4013      	ands	r3, r2
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f7fe f83d 	bl	8000108 <__udivsi3>
 800208e:	0003      	movs	r3, r0
 8002090:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002092:	6a3b      	ldr	r3, [r7, #32]
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b00a      	add	sp, #40	@ 0x28
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08004e50 	.word	0x08004e50
 80020a4:	00f42400 	.word	0x00f42400
 80020a8:	003d0900 	.word	0x003d0900

080020ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <HAL_RCC_GetHCLKFreq+0x10>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	20000000 	.word	0x20000000

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80020c4:	f7ff fff2 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020c8:	0001      	movs	r1, r0
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b1b      	lsrs	r3, r3, #12
 80020d0:	2207      	movs	r2, #7
 80020d2:	4013      	ands	r3, r2
 80020d4:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <HAL_RCC_GetPCLK1Freq+0x2c>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	001a      	movs	r2, r3
 80020da:	231f      	movs	r3, #31
 80020dc:	4013      	ands	r3, r2
 80020de:	40d9      	lsrs	r1, r3
 80020e0:	000b      	movs	r3, r1
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08004e48 	.word	0x08004e48

080020f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80020fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	055b      	lsls	r3, r3, #21
 8002104:	4013      	ands	r3, r2
 8002106:	d004      	beq.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002108:	f7ff fa12 	bl	8001530 <HAL_PWREx_GetVoltageRange>
 800210c:	0003      	movs	r3, r0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e017      	b.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002114:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002116:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	0549      	lsls	r1, r1, #21
 800211c:	430a      	orrs	r2, r1
 800211e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002120:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002122:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800212e:	f7ff f9ff 	bl	8001530 <HAL_PWREx_GetVoltageRange>
 8002132:	0003      	movs	r3, r0
 8002134:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002138:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800213a:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800213c:	4920      	ldr	r1, [pc, #128]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800213e:	400a      	ands	r2, r1
 8002140:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d111      	bne.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b80      	cmp	r3, #128	@ 0x80
 8002150:	d91c      	bls.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2bb0      	cmp	r3, #176	@ 0xb0
 8002156:	d902      	bls.n	800215e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002158:	2302      	movs	r3, #2
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e016      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b90      	cmp	r3, #144	@ 0x90
 8002162:	d902      	bls.n	800216a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002164:	2301      	movs	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e010      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	e00d      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b7f      	cmp	r3, #127	@ 0x7f
 8002174:	d902      	bls.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8002176:	2302      	movs	r3, #2
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e007      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b70      	cmp	r3, #112	@ 0x70
 8002180:	d102      	bne.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002182:	2301      	movs	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e001      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2207      	movs	r2, #7
 8002192:	4393      	bics	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2207      	movs	r2, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b006      	add	sp, #24
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	efffffff 	.word	0xefffffff
 80021c4:	40022000 	.word	0x40022000

080021c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021d0:	2313      	movs	r3, #19
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d8:	2312      	movs	r3, #18
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	4013      	ands	r3, r2
 80021ea:	d100      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021ec:	e0b7      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2011      	movs	r0, #17
 80021f0:	183b      	adds	r3, r7, r0
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	055b      	lsls	r3, r3, #21
 80021fe:	4013      	ands	r3, r2
 8002200:	d110      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b49      	ldr	r3, [pc, #292]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002204:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002206:	4b48      	ldr	r3, [pc, #288]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	0549      	lsls	r1, r1, #21
 800220c:	430a      	orrs	r2, r1
 800220e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002210:	4b45      	ldr	r3, [pc, #276]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	055b      	lsls	r3, r3, #21
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	183b      	adds	r3, r7, r0
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b41      	ldr	r3, [pc, #260]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b40      	ldr	r3, [pc, #256]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	0049      	lsls	r1, r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002232:	f7fe feab 	bl	8000f8c <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800223a:	e00b      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223c:	f7fe fea6 	bl	8000f8c <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d904      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800224a:	2313      	movs	r3, #19
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
        break;
 8002252:	e005      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d0ed      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002260:	2313      	movs	r3, #19
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800226a:	4a2f      	ldr	r2, [pc, #188]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226c:	2390      	movs	r3, #144	@ 0x90
 800226e:	58d2      	ldr	r2, [r2, r3]
 8002270:	23c0      	movs	r3, #192	@ 0xc0
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01f      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	d01a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002288:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	2390      	movs	r3, #144	@ 0x90
 800228c:	58d3      	ldr	r3, [r2, r3]
 800228e:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002290:	4013      	ands	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002294:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002296:	2390      	movs	r3, #144	@ 0x90
 8002298:	58d3      	ldr	r3, [r2, r3]
 800229a:	4923      	ldr	r1, [pc, #140]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229c:	2280      	movs	r2, #128	@ 0x80
 800229e:	0252      	lsls	r2, r2, #9
 80022a0:	4313      	orrs	r3, r2
 80022a2:	2290      	movs	r2, #144	@ 0x90
 80022a4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a6:	4a20      	ldr	r2, [pc, #128]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	2390      	movs	r3, #144	@ 0x90
 80022aa:	58d3      	ldr	r3, [r2, r3]
 80022ac:	491e      	ldr	r1, [pc, #120]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	4a21      	ldr	r2, [pc, #132]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	2290      	movs	r2, #144	@ 0x90
 80022b4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b6:	491c      	ldr	r1, [pc, #112]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	2290      	movs	r2, #144	@ 0x90
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	d017      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe61 	bl	8000f8c <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ce:	e00c      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe fe5c 	bl	8000f8c <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d904      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80022e0:	2313      	movs	r3, #19
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2203      	movs	r2, #3
 80022e6:	701a      	strb	r2, [r3, #0]
            break;
 80022e8:	e005      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ec:	2390      	movs	r3, #144	@ 0x90
 80022ee:	58d3      	ldr	r3, [r2, r3]
 80022f0:	2202      	movs	r2, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d0ec      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80022f6:	2313      	movs	r3, #19
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002300:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	2390      	movs	r3, #144	@ 0x90
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	4906      	ldr	r1, [pc, #24]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002310:	4313      	orrs	r3, r2
 8002312:	2290      	movs	r2, #144	@ 0x90
 8002314:	508b      	str	r3, [r1, r2]
 8002316:	e017      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002318:	2312      	movs	r3, #18
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	2213      	movs	r2, #19
 800231e:	18ba      	adds	r2, r7, r2
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e010      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
 8002330:	fffffcff 	.word	0xfffffcff
 8002334:	fffeffff 	.word	0xfffeffff
 8002338:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800233c:	2312      	movs	r3, #18
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	2213      	movs	r2, #19
 8002342:	18ba      	adds	r2, r7, r2
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002348:	2311      	movs	r3, #17
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d105      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002352:	4ba4      	ldr	r3, [pc, #656]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002354:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002356:	4ba3      	ldr	r3, [pc, #652]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002358:	49a3      	ldr	r1, [pc, #652]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800235a:	400a      	ands	r2, r1
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d00b      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002368:	4a9e      	ldr	r2, [pc, #632]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800236a:	2388      	movs	r3, #136	@ 0x88
 800236c:	58d3      	ldr	r3, [r2, r3]
 800236e:	2203      	movs	r2, #3
 8002370:	4393      	bics	r3, r2
 8002372:	001a      	movs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	499a      	ldr	r1, [pc, #616]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	2288      	movs	r2, #136	@ 0x88
 800237e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d00b      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800238a:	4a96      	ldr	r2, [pc, #600]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800238c:	2388      	movs	r3, #136	@ 0x88
 800238e:	58d3      	ldr	r3, [r2, r3]
 8002390:	220c      	movs	r2, #12
 8002392:	4393      	bics	r3, r2
 8002394:	001a      	movs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4992      	ldr	r1, [pc, #584]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	2288      	movs	r2, #136	@ 0x88
 80023a0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2210      	movs	r2, #16
 80023a8:	4013      	ands	r3, r2
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ac:	4a8d      	ldr	r2, [pc, #564]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80023ae:	2388      	movs	r3, #136	@ 0x88
 80023b0:	58d3      	ldr	r3, [r2, r3]
 80023b2:	4a8e      	ldr	r2, [pc, #568]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80023b4:	401a      	ands	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	498a      	ldr	r1, [pc, #552]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	2288      	movs	r2, #136	@ 0x88
 80023c0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2208      	movs	r2, #8
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80023cc:	4a85      	ldr	r2, [pc, #532]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80023ce:	2388      	movs	r3, #136	@ 0x88
 80023d0:	58d3      	ldr	r3, [r2, r3]
 80023d2:	4a87      	ldr	r2, [pc, #540]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80023d4:	401a      	ands	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	4982      	ldr	r1, [pc, #520]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	2288      	movs	r2, #136	@ 0x88
 80023e0:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	d00b      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 80023ec:	4a7d      	ldr	r2, [pc, #500]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80023ee:	2388      	movs	r3, #136	@ 0x88
 80023f0:	58d3      	ldr	r3, [r2, r3]
 80023f2:	22c0      	movs	r2, #192	@ 0xc0
 80023f4:	4393      	bics	r3, r2
 80023f6:	001a      	movs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4979      	ldr	r1, [pc, #484]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	2288      	movs	r2, #136	@ 0x88
 8002402:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2220      	movs	r2, #32
 800240a:	4013      	ands	r3, r2
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800240e:	4a75      	ldr	r2, [pc, #468]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002410:	2388      	movs	r3, #136	@ 0x88
 8002412:	58d3      	ldr	r3, [r2, r3]
 8002414:	4a77      	ldr	r2, [pc, #476]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4971      	ldr	r1, [pc, #452]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	2288      	movs	r2, #136	@ 0x88
 8002422:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2240      	movs	r2, #64	@ 0x40
 800242a:	4013      	ands	r3, r2
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242e:	4a6d      	ldr	r2, [pc, #436]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002430:	2388      	movs	r3, #136	@ 0x88
 8002432:	58d3      	ldr	r3, [r2, r3]
 8002434:	4a70      	ldr	r2, [pc, #448]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8002436:	401a      	ands	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4969      	ldr	r1, [pc, #420]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800243e:	4313      	orrs	r3, r2
 8002440:	2288      	movs	r2, #136	@ 0x88
 8002442:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2280      	movs	r2, #128	@ 0x80
 800244a:	4013      	ands	r3, r2
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800244e:	4a65      	ldr	r2, [pc, #404]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002450:	2388      	movs	r3, #136	@ 0x88
 8002452:	58d3      	ldr	r3, [r2, r3]
 8002454:	4a69      	ldr	r2, [pc, #420]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4961      	ldr	r1, [pc, #388]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	2288      	movs	r2, #136	@ 0x88
 8002462:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002470:	4a5c      	ldr	r2, [pc, #368]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002472:	2388      	movs	r3, #136	@ 0x88
 8002474:	58d3      	ldr	r3, [r2, r3]
 8002476:	4a62      	ldr	r2, [pc, #392]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002478:	401a      	ands	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	4959      	ldr	r1, [pc, #356]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	2288      	movs	r2, #136	@ 0x88
 8002484:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4013      	ands	r3, r2
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002492:	4a54      	ldr	r2, [pc, #336]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002494:	2388      	movs	r3, #136	@ 0x88
 8002496:	58d3      	ldr	r3, [r2, r3]
 8002498:	4a5a      	ldr	r2, [pc, #360]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800249a:	401a      	ands	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	4950      	ldr	r1, [pc, #320]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	2288      	movs	r2, #136	@ 0x88
 80024a6:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	01db      	lsls	r3, r3, #7
 80024b0:	4013      	ands	r3, r2
 80024b2:	d017      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	055b      	lsls	r3, r3, #21
 80024bc:	429a      	cmp	r2, r3
 80024be:	d106      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80024c0:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	0249      	lsls	r1, r1, #9
 80024ca:	430a      	orrs	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024ce:	4a45      	ldr	r2, [pc, #276]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024d0:	2388      	movs	r3, #136	@ 0x88
 80024d2:	58d3      	ldr	r3, [r2, r3]
 80024d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	4941      	ldr	r1, [pc, #260]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	2288      	movs	r2, #136	@ 0x88
 80024e2:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	@ 0x80
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	4013      	ands	r3, r2
 80024ee:	d017      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	051b      	lsls	r3, r3, #20
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d106      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80024fc:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	0449      	lsls	r1, r1, #17
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800250a:	4a36      	ldr	r2, [pc, #216]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800250c:	2388      	movs	r3, #136	@ 0x88
 800250e:	58d3      	ldr	r3, [r2, r3]
 8002510:	4a3e      	ldr	r2, [pc, #248]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002518:	4932      	ldr	r1, [pc, #200]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	2288      	movs	r2, #136	@ 0x88
 800251e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	4013      	ands	r3, r2
 800252a:	d017      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	051b      	lsls	r3, r3, #20
 8002534:	429a      	cmp	r2, r3
 8002536:	d106      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002538:	4b2a      	ldr	r3, [pc, #168]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800253e:	2180      	movs	r1, #128	@ 0x80
 8002540:	0449      	lsls	r1, r1, #17
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002546:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002548:	2388      	movs	r3, #136	@ 0x88
 800254a:	58d3      	ldr	r3, [r2, r3]
 800254c:	4a2f      	ldr	r2, [pc, #188]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	4923      	ldr	r1, [pc, #140]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	2288      	movs	r2, #136	@ 0x88
 800255a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4013      	ands	r3, r2
 8002566:	d017      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	045b      	lsls	r3, r3, #17
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800257a:	2180      	movs	r1, #128	@ 0x80
 800257c:	0449      	lsls	r1, r1, #17
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002582:	4a18      	ldr	r2, [pc, #96]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002584:	2388      	movs	r3, #136	@ 0x88
 8002586:	58d3      	ldr	r3, [r2, r3]
 8002588:	4a21      	ldr	r2, [pc, #132]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	4914      	ldr	r1, [pc, #80]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	2288      	movs	r2, #136	@ 0x88
 8002596:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4013      	ands	r3, r2
 80025a2:	d017      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	049b      	lsls	r3, r3, #18
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d106      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025b6:	2180      	movs	r1, #128	@ 0x80
 80025b8:	0449      	lsls	r1, r1, #17
 80025ba:	430a      	orrs	r2, r1
 80025bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025c0:	2388      	movs	r3, #136	@ 0x88
 80025c2:	58d3      	ldr	r3, [r2, r3]
 80025c4:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	4905      	ldr	r1, [pc, #20]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	2288      	movs	r2, #136	@ 0x88
 80025d2:	508b      	str	r3, [r1, r2]

  }

  return status;
 80025d4:	2312      	movs	r3, #18
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b006      	add	sp, #24
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	40021000 	.word	0x40021000
 80025e8:	efffffff 	.word	0xefffffff
 80025ec:	fffff3ff 	.word	0xfffff3ff
 80025f0:	fffffcff 	.word	0xfffffcff
 80025f4:	ffffcfff 	.word	0xffffcfff
 80025f8:	fffcffff 	.word	0xfffcffff
 80025fc:	fff3ffff 	.word	0xfff3ffff
 8002600:	ffcfffff 	.word	0xffcfffff
 8002604:	ff3fffff 	.word	0xff3fffff
 8002608:	cfffffff 	.word	0xcfffffff
 800260c:	f3ffffff 	.word	0xf3ffffff
 8002610:	feffffff 	.word	0xfeffffff

08002614 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	429a      	cmp	r2, r3
 8002628:	d154      	bne.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800262a:	4ad5      	ldr	r2, [pc, #852]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800262c:	2390      	movs	r3, #144	@ 0x90
 800262e:	58d2      	ldr	r2, [r2, r3]
 8002630:	23c0      	movs	r3, #192	@ 0xc0
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	23c0      	movs	r3, #192	@ 0xc0
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	429a      	cmp	r2, r3
 8002640:	d039      	beq.n	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	23c0      	movs	r3, #192	@ 0xc0
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d901      	bls.n	8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800264c:	f000 fd1a 	bl	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	429a      	cmp	r2, r3
 8002658:	d006      	beq.n	8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d00f      	beq.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8002664:	f000 fd0e 	bl	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002668:	4ac5      	ldr	r2, [pc, #788]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800266a:	2390      	movs	r3, #144	@ 0x90
 800266c:	58d3      	ldr	r3, [r2, r3]
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d001      	beq.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8002676:	f000 fd07 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	61fb      	str	r3, [r7, #28]
        break;
 8002680:	f000 fd02 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002684:	4abe      	ldr	r2, [pc, #760]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002686:	2394      	movs	r3, #148	@ 0x94
 8002688:	58d3      	ldr	r3, [r2, r3]
 800268a:	2202      	movs	r2, #2
 800268c:	4013      	ands	r3, r2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d001      	beq.n	8002696 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8002692:	f000 fcfb 	bl	800308c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002696:	4aba      	ldr	r2, [pc, #744]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002698:	2394      	movs	r3, #148	@ 0x94
 800269a:	58d3      	ldr	r3, [r2, r3]
 800269c:	2204      	movs	r2, #4
 800269e:	4013      	ands	r3, r2
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d103      	bne.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 80026a4:	23fa      	movs	r3, #250	@ 0xfa
 80026a6:	61fb      	str	r3, [r7, #28]
        break;
 80026a8:	f000 fcf0 	bl	800308c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 80026ac:	23fa      	movs	r3, #250	@ 0xfa
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	61fb      	str	r3, [r7, #28]
        break;
 80026b2:	f000 fceb 	bl	800308c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026b6:	4bb2      	ldr	r3, [pc, #712]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	029b      	lsls	r3, r3, #10
 80026be:	401a      	ands	r2, r3
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80026c8:	f000 fce2 	bl	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 80026cc:	4bad      	ldr	r3, [pc, #692]	@ (8002984 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80026ce:	61fb      	str	r3, [r7, #28]
        break;
 80026d0:	f000 fcde 	bl	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	029b      	lsls	r3, r3, #10
 80026da:	429a      	cmp	r2, r3
 80026dc:	d100      	bne.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80026de:	e11a      	b.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d901      	bls.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80026ea:	f000 fcd3 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	025b      	lsls	r3, r3, #9
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d100      	bne.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80026f8:	e10d      	b.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	025b      	lsls	r3, r3, #9
 8002700:	429a      	cmp	r2, r3
 8002702:	d901      	bls.n	8002708 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002704:	f000 fcc6 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	01db      	lsls	r3, r3, #7
 800270e:	429a      	cmp	r2, r3
 8002710:	d100      	bne.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002712:	e1eb      	b.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	01db      	lsls	r3, r3, #7
 800271a:	429a      	cmp	r2, r3
 800271c:	d901      	bls.n	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800271e:	f000 fcb9 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	429a      	cmp	r2, r3
 800272a:	d101      	bne.n	8002730 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800272c:	f000 fc50 	bl	8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	429a      	cmp	r2, r3
 8002738:	d901      	bls.n	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800273a:	f000 fcab 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	429a      	cmp	r2, r3
 8002746:	d101      	bne.n	800274c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8002748:	f000 fbe2 	bl	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	429a      	cmp	r2, r3
 8002754:	d901      	bls.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002756:	f000 fc9d 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	429a      	cmp	r2, r3
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002764:	f000 fba9 	bl	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	429a      	cmp	r2, r3
 8002770:	d901      	bls.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002772:	f000 fc8f 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	429a      	cmp	r2, r3
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8002780:	f000 fb70 	bl	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	429a      	cmp	r2, r3
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800278e:	f000 fc81 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d100      	bne.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800279c:	e305      	b.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d901      	bls.n	80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80027a8:	f000 fc74 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d100      	bne.n	80027b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80027b6:	e29b      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	429a      	cmp	r2, r3
 80027c0:	d901      	bls.n	80027c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80027c2:	f000 fc67 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b80      	cmp	r3, #128	@ 0x80
 80027ca:	d100      	bne.n	80027ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80027cc:	e22f      	b.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b80      	cmp	r3, #128	@ 0x80
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80027d4:	f000 fc5e 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d80f      	bhi.n	80027fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80027e4:	f000 fc56 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d901      	bls.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 80027ee:	f000 fc51 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	4b64      	ldr	r3, [pc, #400]	@ (8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80027f8:	18d3      	adds	r3, r2, r3
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	469f      	mov	pc, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b40      	cmp	r3, #64	@ 0x40
 8002802:	d100      	bne.n	8002806 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8002804:	e1df      	b.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8002806:	f000 fc45 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800280a:	4a5d      	ldr	r2, [pc, #372]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800280c:	2388      	movs	r3, #136	@ 0x88
 800280e:	58d3      	ldr	r3, [r2, r3]
 8002810:	2203      	movs	r2, #3
 8002812:	4013      	ands	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d025      	beq.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d82d      	bhi.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d013      	beq.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d827      	bhi.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800283a:	e020      	b.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800283c:	f7ff fc40 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002840:	0003      	movs	r3, r0
 8002842:	61fb      	str	r3, [r7, #28]
            break;
 8002844:	e022      	b.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8002846:	f7ff fb95 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 800284a:	0003      	movs	r3, r0
 800284c:	61fb      	str	r3, [r7, #28]
            break;
 800284e:	e01d      	b.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002850:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	@ 0x80
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	401a      	ands	r2, r3
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	429a      	cmp	r2, r3
 8002860:	d110      	bne.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8002862:	4b4a      	ldr	r3, [pc, #296]	@ (800298c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8002864:	61fb      	str	r3, [r7, #28]
            break;
 8002866:	e00d      	b.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002868:	4a45      	ldr	r2, [pc, #276]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800286a:	2390      	movs	r3, #144	@ 0x90
 800286c:	58d3      	ldr	r3, [r2, r3]
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d109      	bne.n	800288a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	61fb      	str	r3, [r7, #28]
            break;
 800287c:	e005      	b.n	800288a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	f000 fc09 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	f000 fc06 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800288a:	46c0      	nop			@ (mov r8, r8)
        break;
 800288c:	f000 fc03 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002890:	4a3b      	ldr	r2, [pc, #236]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002892:	2388      	movs	r3, #136	@ 0x88
 8002894:	58d3      	ldr	r3, [r2, r3]
 8002896:	220c      	movs	r2, #12
 8002898:	4013      	ands	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d025      	beq.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d82d      	bhi.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d013      	beq.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d827      	bhi.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d005      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80028c0:	e020      	b.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80028c2:	f7ff fbfd 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 80028c6:	0003      	movs	r3, r0
 80028c8:	61fb      	str	r3, [r7, #28]
            break;
 80028ca:	e022      	b.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80028cc:	f7ff fb52 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80028d0:	0003      	movs	r3, r0
 80028d2:	61fb      	str	r3, [r7, #28]
            break;
 80028d4:	e01d      	b.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	401a      	ands	r2, r3
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d110      	bne.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 80028e8:	4b28      	ldr	r3, [pc, #160]	@ (800298c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80028ea:	61fb      	str	r3, [r7, #28]
            break;
 80028ec:	e00d      	b.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80028ee:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80028f0:	2390      	movs	r3, #144	@ 0x90
 80028f2:	58d3      	ldr	r3, [r2, r3]
 80028f4:	2202      	movs	r2, #2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d109      	bne.n	8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	61fb      	str	r3, [r7, #28]
            break;
 8002902:	e005      	b.n	8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	f000 fbc6 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	f000 fbc3 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002910:	46c0      	nop			@ (mov r8, r8)
        break;
 8002912:	f000 fbc0 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002916:	f7ff fbd3 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 800291a:	0003      	movs	r3, r0
 800291c:	61fb      	str	r3, [r7, #28]
        break;
 800291e:	f000 fbba 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002922:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002924:	2388      	movs	r3, #136	@ 0x88
 8002926:	58d2      	ldr	r2, [r2, r3]
 8002928:	23c0      	movs	r3, #192	@ 0xc0
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	23c0      	movs	r3, #192	@ 0xc0
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	429a      	cmp	r2, r3
 8002938:	d036      	beq.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	23c0      	movs	r3, #192	@ 0xc0
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	429a      	cmp	r2, r3
 8002942:	d83c      	bhi.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	429a      	cmp	r2, r3
 800294c:	d020      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	429a      	cmp	r2, r3
 8002956:	d832      	bhi.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	429a      	cmp	r2, r3
 8002966:	d005      	beq.n	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8002968:	e029      	b.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800296a:	f7ff fba9 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 800296e:	0003      	movs	r3, r0
 8002970:	61fb      	str	r3, [r7, #28]
            break;
 8002972:	e02b      	b.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8002974:	f7ff fafe 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002978:	0003      	movs	r3, r0
 800297a:	61fb      	str	r3, [r7, #28]
            break;
 800297c:	e026      	b.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40021000 	.word	0x40021000
 8002984:	0001e848 	.word	0x0001e848
 8002988:	08004e80 	.word	0x08004e80
 800298c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4bbb      	ldr	r3, [pc, #748]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	401a      	ands	r2, r3
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	429a      	cmp	r2, r3
 80029a0:	d110      	bne.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80029a2:	4bb8      	ldr	r3, [pc, #736]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80029a4:	61fb      	str	r3, [r7, #28]
            break;
 80029a6:	e00d      	b.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029a8:	4ab5      	ldr	r2, [pc, #724]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80029aa:	2390      	movs	r3, #144	@ 0x90
 80029ac:	58d3      	ldr	r3, [r2, r3]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d109      	bne.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	61fb      	str	r3, [r7, #28]
            break;
 80029bc:	e005      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	f000 fb69 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80029c4:	46c0      	nop			@ (mov r8, r8)
 80029c6:	f000 fb66 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80029ca:	46c0      	nop			@ (mov r8, r8)
        break;
 80029cc:	f000 fb63 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80029d0:	4aab      	ldr	r2, [pc, #684]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80029d2:	2388      	movs	r3, #136	@ 0x88
 80029d4:	58d2      	ldr	r2, [r2, r3]
 80029d6:	23c0      	movs	r3, #192	@ 0xc0
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	23c0      	movs	r3, #192	@ 0xc0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d02d      	beq.n	8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	23c0      	movs	r3, #192	@ 0xc0
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d833      	bhi.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d017      	beq.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d829      	bhi.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d005      	beq.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8002a16:	e020      	b.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002a18:	f7ff fb52 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	61fb      	str	r3, [r7, #28]
            break;
 8002a20:	e022      	b.n	8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8002a22:	f7ff faa7 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002a26:	0003      	movs	r3, r0
 8002a28:	61fb      	str	r3, [r7, #28]
            break;
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a2c:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	401a      	ands	r2, r3
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d110      	bne.n	8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8002a3e:	4b91      	ldr	r3, [pc, #580]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002a40:	61fb      	str	r3, [r7, #28]
            break;
 8002a42:	e00d      	b.n	8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a44:	4a8e      	ldr	r2, [pc, #568]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002a46:	2390      	movs	r3, #144	@ 0x90
 8002a48:	58d3      	ldr	r3, [r2, r3]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d109      	bne.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	61fb      	str	r3, [r7, #28]
            break;
 8002a58:	e005      	b.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	f000 fb1b 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	f000 fb18 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002a66:	46c0      	nop			@ (mov r8, r8)
        break;
 8002a68:	f000 fb15 	bl	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8002a6c:	4a84      	ldr	r2, [pc, #528]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002a6e:	2388      	movs	r3, #136	@ 0x88
 8002a70:	58d3      	ldr	r3, [r2, r3]
 8002a72:	22c0      	movs	r2, #192	@ 0xc0
 8002a74:	4013      	ands	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a7c:	d025      	beq.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a82:	d82d      	bhi.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b80      	cmp	r3, #128	@ 0x80
 8002a88:	d013      	beq.n	8002ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b80      	cmp	r3, #128	@ 0x80
 8002a8e:	d827      	bhi.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b40      	cmp	r3, #64	@ 0x40
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8002a9c:	e020      	b.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002a9e:	f7ff fb0f 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	61fb      	str	r3, [r7, #28]
            break;
 8002aa6:	e020      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8002aa8:	f7ff fa64 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002aac:	0003      	movs	r3, r0
 8002aae:	61fb      	str	r3, [r7, #28]
            break;
 8002ab0:	e01b      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ab2:	4b73      	ldr	r3, [pc, #460]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	401a      	ands	r2, r3
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002ac6:	61fb      	str	r3, [r7, #28]
            break;
 8002ac8:	e00c      	b.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002aca:	4a6d      	ldr	r2, [pc, #436]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002acc:	2390      	movs	r3, #144	@ 0x90
 8002ace:	58d3      	ldr	r3, [r2, r3]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	61fb      	str	r3, [r7, #28]
            break;
 8002ade:	e003      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	e2d8      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	e2d6      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002ae8:	46c0      	nop			@ (mov r8, r8)
        break;
 8002aea:	e2d4      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002aec:	4a64      	ldr	r2, [pc, #400]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002aee:	2388      	movs	r3, #136	@ 0x88
 8002af0:	58d2      	ldr	r2, [r2, r3]
 8002af2:	23c0      	movs	r3, #192	@ 0xc0
 8002af4:	059b      	lsls	r3, r3, #22
 8002af6:	4013      	ands	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	059b      	lsls	r3, r3, #22
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d012      	beq.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	059b      	lsls	r3, r3, #22
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d825      	bhi.n	8002b5a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	055b      	lsls	r3, r3, #21
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d014      	beq.n	8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8002b1e:	e01c      	b.n	8002b5a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8002b20:	f7ff fa28 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002b24:	0003      	movs	r3, r0
 8002b26:	61fb      	str	r3, [r7, #28]
            break;
 8002b28:	e018      	b.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b2a:	4b55      	ldr	r3, [pc, #340]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	401a      	ands	r2, r3
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8002b3c:	4b51      	ldr	r3, [pc, #324]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002b3e:	61fb      	str	r3, [r7, #28]
            break;
 8002b40:	e00c      	b.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
            break;
 8002b46:	e009      	b.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002b48:	2408      	movs	r4, #8
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 faad 	bl	80030ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61fb      	str	r3, [r7, #28]
            break;
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8002b5a:	46c0      	nop			@ (mov r8, r8)
        break;
 8002b5c:	e29b      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002b5e:	4a48      	ldr	r2, [pc, #288]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002b60:	2388      	movs	r3, #136	@ 0x88
 8002b62:	58d2      	ldr	r2, [r2, r3]
 8002b64:	23c0      	movs	r3, #192	@ 0xc0
 8002b66:	019b      	lsls	r3, r3, #6
 8002b68:	4013      	ands	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d017      	beq.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	019b      	lsls	r3, r3, #6
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	015b      	lsls	r3, r3, #5
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8002b90:	e015      	b.n	8002bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002b92:	f7ff fa95 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002b96:	0003      	movs	r3, r0
 8002b98:	61fb      	str	r3, [r7, #28]
            break;
 8002b9a:	e013      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8002b9c:	f7ff f9ea 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	61fb      	str	r3, [r7, #28]
            break;
 8002ba4:	e00e      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d104      	bne.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8002bb8:	4b32      	ldr	r3, [pc, #200]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002bba:	61fb      	str	r3, [r7, #28]
            break;
 8002bbc:	e001      	b.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	e269      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002bc2:	46c0      	nop			@ (mov r8, r8)
        break;
 8002bc4:	e267      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002bc8:	2388      	movs	r3, #136	@ 0x88
 8002bca:	58d2      	ldr	r2, [r2, r3]
 8002bcc:	23c0      	movs	r3, #192	@ 0xc0
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d017      	beq.n	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	029b      	lsls	r3, r3, #10
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d81e      	bhi.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8002bf8:	e015      	b.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f7ff fa61 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61fb      	str	r3, [r7, #28]
            break;
 8002c02:	e013      	b.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8002c04:	f7ff f9b6 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	61fb      	str	r3, [r7, #28]
            break;
 8002c0c:	e00e      	b.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	401a      	ands	r2, r3
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d104      	bne.n	8002c2a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8002c20:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8002c22:	61fb      	str	r3, [r7, #28]
            break;
 8002c24:	e001      	b.n	8002c2a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	e235      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002c2a:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c2c:	e233      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002c2e:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8002c30:	2388      	movs	r3, #136	@ 0x88
 8002c32:	58d2      	ldr	r2, [r2, r3]
 8002c34:	23c0      	movs	r3, #192	@ 0xc0
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	4013      	ands	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	23c0      	movs	r3, #192	@ 0xc0
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d041      	beq.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	23c0      	movs	r3, #192	@ 0xc0
 8002c4a:	031b      	lsls	r3, r3, #12
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d847      	bhi.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	031b      	lsls	r3, r3, #12
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d02b      	beq.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d83d      	bhi.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	02db      	lsls	r3, r3, #11
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d009      	beq.n	8002c88 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8002c74:	e034      	b.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002c76:	f7ff fa23 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61fb      	str	r3, [r7, #28]
            break;
 8002c7e:	e036      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002c88:	4abd      	ldr	r2, [pc, #756]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002c8a:	2394      	movs	r3, #148	@ 0x94
 8002c8c:	58d3      	ldr	r3, [r2, r3]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d126      	bne.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002c96:	4aba      	ldr	r2, [pc, #744]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002c98:	2394      	movs	r3, #148	@ 0x94
 8002c9a:	58d3      	ldr	r3, [r2, r3]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d102      	bne.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8002ca4:	23fa      	movs	r3, #250	@ 0xfa
 8002ca6:	61fb      	str	r3, [r7, #28]
            break;
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8002caa:	23fa      	movs	r3, #250	@ 0xfa
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
            break;
 8002cb0:	e018      	b.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002cb2:	4bb3      	ldr	r3, [pc, #716]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8002cc4:	4baf      	ldr	r3, [pc, #700]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8002cc6:	61fb      	str	r3, [r7, #28]
            break;
 8002cc8:	e00e      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002cca:	4aad      	ldr	r2, [pc, #692]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002ccc:	2390      	movs	r3, #144	@ 0x90
 8002cce:	58d3      	ldr	r3, [r2, r3]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d109      	bne.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	61fb      	str	r3, [r7, #28]
            break;
 8002cde:	e005      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	e1d8      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	e1d6      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	e1d4      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002cec:	46c0      	nop			@ (mov r8, r8)
        break;
 8002cee:	e1d2      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002cf0:	4aa3      	ldr	r2, [pc, #652]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002cf2:	2388      	movs	r3, #136	@ 0x88
 8002cf4:	58d2      	ldr	r2, [r2, r3]
 8002cf6:	23c0      	movs	r3, #192	@ 0xc0
 8002cf8:	039b      	lsls	r3, r3, #14
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	23c0      	movs	r3, #192	@ 0xc0
 8002d02:	039b      	lsls	r3, r3, #14
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d03d      	beq.n	8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	23c0      	movs	r3, #192	@ 0xc0
 8002d0c:	039b      	lsls	r3, r3, #14
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d843      	bhi.n	8002d9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	039b      	lsls	r3, r3, #14
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d027      	beq.n	8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	039b      	lsls	r3, r3, #14
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d839      	bhi.n	8002d9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	035b      	lsls	r3, r3, #13
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d005      	beq.n	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8002d36:	e030      	b.n	8002d9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002d38:	f7ff f9c2 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61fb      	str	r3, [r7, #28]
            break;
 8002d40:	e032      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002d42:	4a8f      	ldr	r2, [pc, #572]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d44:	2394      	movs	r3, #148	@ 0x94
 8002d46:	58d3      	ldr	r3, [r2, r3]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d126      	bne.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002d50:	4a8b      	ldr	r2, [pc, #556]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d52:	2394      	movs	r3, #148	@ 0x94
 8002d54:	58d3      	ldr	r3, [r2, r3]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8002d5e:	23fa      	movs	r3, #250	@ 0xfa
 8002d60:	61fb      	str	r3, [r7, #28]
            break;
 8002d62:	e01c      	b.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8002d64:	23fa      	movs	r3, #250	@ 0xfa
 8002d66:	01db      	lsls	r3, r3, #7
 8002d68:	61fb      	str	r3, [r7, #28]
            break;
 8002d6a:	e018      	b.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d6c:	4b84      	ldr	r3, [pc, #528]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	401a      	ands	r2, r3
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d111      	bne.n	8002da2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8002d7e:	4b81      	ldr	r3, [pc, #516]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8002d80:	61fb      	str	r3, [r7, #28]
            break;
 8002d82:	e00e      	b.n	8002da2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d84:	4a7e      	ldr	r2, [pc, #504]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002d86:	2390      	movs	r3, #144	@ 0x90
 8002d88:	58d3      	ldr	r3, [r2, r3]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d109      	bne.n	8002da6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	61fb      	str	r3, [r7, #28]
            break;
 8002d98:	e005      	b.n	8002da6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	e17b      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	e179      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	e177      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002da6:	46c0      	nop			@ (mov r8, r8)
        break;
 8002da8:	e175      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8002daa:	4a75      	ldr	r2, [pc, #468]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002dac:	2388      	movs	r3, #136	@ 0x88
 8002dae:	58d2      	ldr	r2, [r2, r3]
 8002db0:	23c0      	movs	r3, #192	@ 0xc0
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	4013      	ands	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	23c0      	movs	r3, #192	@ 0xc0
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d03d      	beq.n	8002e3e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	23c0      	movs	r3, #192	@ 0xc0
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d843      	bhi.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d027      	beq.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d839      	bhi.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	03db      	lsls	r3, r3, #15
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d005      	beq.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8002df0:	e030      	b.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002df2:	f7ff f965 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002df6:	0003      	movs	r3, r0
 8002df8:	61fb      	str	r3, [r7, #28]
            break;
 8002dfa:	e032      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002dfc:	4a60      	ldr	r2, [pc, #384]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002dfe:	2394      	movs	r3, #148	@ 0x94
 8002e00:	58d3      	ldr	r3, [r2, r3]
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d126      	bne.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e0c:	2394      	movs	r3, #148	@ 0x94
 8002e0e:	58d3      	ldr	r3, [r2, r3]
 8002e10:	2204      	movs	r2, #4
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d102      	bne.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8002e18:	23fa      	movs	r3, #250	@ 0xfa
 8002e1a:	61fb      	str	r3, [r7, #28]
            break;
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8002e1e:	23fa      	movs	r3, #250	@ 0xfa
 8002e20:	01db      	lsls	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
            break;
 8002e24:	e018      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e26:	4b56      	ldr	r3, [pc, #344]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d111      	bne.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8002e38:	4b52      	ldr	r3, [pc, #328]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8002e3a:	61fb      	str	r3, [r7, #28]
            break;
 8002e3c:	e00e      	b.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e3e:	4a50      	ldr	r2, [pc, #320]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e40:	2390      	movs	r3, #144	@ 0x90
 8002e42:	58d3      	ldr	r3, [r2, r3]
 8002e44:	2202      	movs	r2, #2
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d109      	bne.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	61fb      	str	r3, [r7, #28]
            break;
 8002e52:	e005      	b.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	e11e      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002e58:	46c0      	nop			@ (mov r8, r8)
 8002e5a:	e11c      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002e5c:	46c0      	nop			@ (mov r8, r8)
 8002e5e:	e11a      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002e60:	46c0      	nop			@ (mov r8, r8)
        break;
 8002e62:	e118      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8002e64:	4a46      	ldr	r2, [pc, #280]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e66:	2388      	movs	r3, #136	@ 0x88
 8002e68:	58d2      	ldr	r2, [r2, r3]
 8002e6a:	2380      	movs	r3, #128	@ 0x80
 8002e6c:	045b      	lsls	r3, r3, #17
 8002e6e:	4013      	ands	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	045b      	lsls	r3, r3, #17
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d011      	beq.n	8002ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8002e82:	e019      	b.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002e84:	4b3e      	ldr	r3, [pc, #248]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	23e0      	movs	r3, #224	@ 0xe0
 8002e8a:	01db      	lsls	r3, r3, #7
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d104      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002e90:	f7ff f916 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002e94:	0003      	movs	r3, r0
 8002e96:	61fb      	str	r3, [r7, #28]
            break;
 8002e98:	e00e      	b.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002e9a:	f7ff f911 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
            break;
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002ea6:	2408      	movs	r4, #8
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 f8fe 	bl	80030ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	61fb      	str	r3, [r7, #28]
            break;
 8002eb6:	46c0      	nop			@ (mov r8, r8)
        break;
 8002eb8:	e0ed      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8002eba:	4a31      	ldr	r2, [pc, #196]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002ebc:	2388      	movs	r3, #136	@ 0x88
 8002ebe:	58d2      	ldr	r2, [r2, r3]
 8002ec0:	2380      	movs	r3, #128	@ 0x80
 8002ec2:	049b      	lsls	r3, r3, #18
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	049b      	lsls	r3, r3, #18
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d011      	beq.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8002ed8:	e019      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002eda:	4b29      	ldr	r3, [pc, #164]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	23e0      	movs	r3, #224	@ 0xe0
 8002ee0:	01db      	lsls	r3, r3, #7
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d104      	bne.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002ee6:	f7ff f8eb 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002eea:	0003      	movs	r3, r0
 8002eec:	61fb      	str	r3, [r7, #28]
            break;
 8002eee:	e00e      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002ef0:	f7ff f8e6 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
            break;
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002efc:	2408      	movs	r4, #8
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f8d3 	bl	80030ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61fb      	str	r3, [r7, #28]
            break;
 8002f0c:	46c0      	nop			@ (mov r8, r8)
        break;
 8002f0e:	e0c2      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f12:	2388      	movs	r3, #136	@ 0x88
 8002f14:	58d2      	ldr	r2, [r2, r3]
 8002f16:	23c0      	movs	r3, #192	@ 0xc0
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	23c0      	movs	r3, #192	@ 0xc0
 8002f22:	051b      	lsls	r3, r3, #20
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d017      	beq.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	23c0      	movs	r3, #192	@ 0xc0
 8002f2c:	051b      	lsls	r3, r3, #20
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d84a      	bhi.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	051b      	lsls	r3, r3, #20
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d039      	beq.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	051b      	lsls	r3, r3, #20
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d840      	bhi.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03a      	beq.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	04db      	lsls	r3, r3, #19
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d003      	beq.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8002f56:	e037      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8002f5a:	61fb      	str	r3, [r7, #28]
            break;
 8002f5c:	e037      	b.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d130      	bne.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2208      	movs	r2, #8
 8002f70:	4013      	ands	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8002f74:	4b02      	ldr	r3, [pc, #8]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	02dc6c00 	.word	0x02dc6c00
 8002f8c:	4a44      	ldr	r2, [pc, #272]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8002f8e:	2394      	movs	r3, #148	@ 0x94
 8002f90:	58d3      	ldr	r3, [r2, r3]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	220f      	movs	r2, #15
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b0b      	cmp	r3, #11
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8002fa0:	230b      	movs	r3, #11
 8002fa2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	58d3      	ldr	r3, [r2, r3]
 8002fac:	61fb      	str	r3, [r7, #28]
            break;
 8002fae:	e00d      	b.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002fb0:	2408      	movs	r4, #8
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 f879 	bl	80030ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61fb      	str	r3, [r7, #28]
            break;
 8002fc0:	e005      	b.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
            break;
 8002fc6:	e002      	b.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8002fc8:	46c0      	nop			@ (mov r8, r8)
 8002fca:	e064      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8002fcc:	46c0      	nop			@ (mov r8, r8)
        break;
 8002fce:	e062      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8002fd0:	4a33      	ldr	r2, [pc, #204]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8002fd2:	2388      	movs	r3, #136	@ 0x88
 8002fd4:	58d2      	ldr	r2, [r2, r3]
 8002fd6:	23c0      	movs	r3, #192	@ 0xc0
 8002fd8:	051b      	lsls	r3, r3, #20
 8002fda:	4013      	ands	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	23c0      	movs	r3, #192	@ 0xc0
 8002fe2:	051b      	lsls	r3, r3, #20
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d017      	beq.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	23c0      	movs	r3, #192	@ 0xc0
 8002fec:	051b      	lsls	r3, r3, #20
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d844      	bhi.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	2380      	movs	r3, #128	@ 0x80
 8002ff6:	051b      	lsls	r3, r3, #20
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d033      	beq.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	429a      	cmp	r2, r3
 8003004:	d83a      	bhi.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d034      	beq.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	04db      	lsls	r3, r3, #19
 8003012:	429a      	cmp	r2, r3
 8003014:	d003      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8003016:	e031      	b.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8003018:	4b23      	ldr	r3, [pc, #140]	@ (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800301a:	61fb      	str	r3, [r7, #28]
            break;
 800301c:	e031      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d12a      	bne.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2208      	movs	r2, #8
 8003030:	4013      	ands	r3, r2
 8003032:	d005      	beq.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8003034:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	220f      	movs	r2, #15
 800303c:	4013      	ands	r3, r2
 800303e:	e005      	b.n	800304c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003040:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8003042:	2394      	movs	r3, #148	@ 0x94
 8003044:	58d3      	ldr	r3, [r2, r3]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	220f      	movs	r2, #15
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b0b      	cmp	r3, #11
 8003052:	d901      	bls.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8003054:	230b      	movs	r3, #11
 8003056:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8003058:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	58d3      	ldr	r3, [r2, r3]
 8003060:	61fb      	str	r3, [r7, #28]
            break;
 8003062:	e00d      	b.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003064:	2408      	movs	r4, #8
 8003066:	193b      	adds	r3, r7, r4
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f81f 	bl	80030ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800306e:	193b      	adds	r3, r7, r4
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61fb      	str	r3, [r7, #28]
            break;
 8003074:	e005      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
            break;
 800307a:	e002      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	e00a      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8003080:	46c0      	nop			@ (mov r8, r8)
        break;
 8003082:	e008      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	e006      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003088:	46c0      	nop			@ (mov r8, r8)
 800308a:	e004      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	e002      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003090:	46c0      	nop			@ (mov r8, r8)
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8003094:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8003096:	69fb      	ldr	r3, [r7, #28]
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b009      	add	sp, #36	@ 0x24
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08004e50 	.word	0x08004e50
 80030a8:	02dc6c00 	.word	0x02dc6c00

080030ac <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030b4:	4b58      	ldr	r3, [pc, #352]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	227f      	movs	r2, #127	@ 0x7f
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030c0:	4b55      	ldr	r3, [pc, #340]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80030ca:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	2207      	movs	r2, #7
 80030d2:	4013      	ands	r3, r2
 80030d4:	3301      	adds	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80030d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2208      	movs	r2, #8
 80030de:	4013      	ands	r3, r2
 80030e0:	d005      	beq.n	80030ee <HAL_RCCEx_GetPLLClockFreq+0x42>
 80030e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	220f      	movs	r2, #15
 80030ea:	4013      	ands	r3, r2
 80030ec:	e005      	b.n	80030fa <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80030ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80030f0:	2394      	movs	r3, #148	@ 0x94
 80030f2:	58d3      	ldr	r3, [r2, r3]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	220f      	movs	r2, #15
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b0b      	cmp	r3, #11
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8003102:	230b      	movs	r3, #11
 8003104:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d020      	beq.n	800314e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d827      	bhi.n	8003162 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d00c      	beq.n	8003132 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d121      	bne.n	8003162 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	483e      	ldr	r0, [pc, #248]	@ (800321c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8003122:	f7fc fff1 	bl	8000108 <__udivsi3>
 8003126:	0003      	movs	r3, r0
 8003128:	001a      	movs	r2, r3
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4353      	muls	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
      break;
 8003130:	e025      	b.n	800317e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	58d3      	ldr	r3, [r2, r3]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	0018      	movs	r0, r3
 800313e:	f7fc ffe3 	bl	8000108 <__udivsi3>
 8003142:	0003      	movs	r3, r0
 8003144:	001a      	movs	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	4353      	muls	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
      break;
 800314c:	e017      	b.n	800317e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	4834      	ldr	r0, [pc, #208]	@ (8003224 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8003152:	f7fc ffd9 	bl	8000108 <__udivsi3>
 8003156:	0003      	movs	r3, r0
 8003158:	001a      	movs	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4353      	muls	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]
      break;
 8003160:	e00d      	b.n	800317e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003162:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	58d3      	ldr	r3, [r2, r3]
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	0018      	movs	r0, r3
 800316e:	f7fc ffcb 	bl	8000108 <__udivsi3>
 8003172:	0003      	movs	r3, r0
 8003174:	001a      	movs	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4353      	muls	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]
      break;
 800317c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 800317e:	4b26      	ldr	r3, [pc, #152]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	025b      	lsls	r3, r3, #9
 8003186:	4013      	ands	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800318a:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800318c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 800318e:	0c5b      	lsrs	r3, r3, #17
 8003190:	221f      	movs	r2, #31
 8003192:	4013      	ands	r3, r2
 8003194:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003196:	0019      	movs	r1, r3
 8003198:	69f8      	ldr	r0, [r7, #28]
 800319a:	f7fc ffb5 	bl	8000108 <__udivsi3>
 800319e:	0003      	movs	r3, r0
 80031a0:	001a      	movs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e002      	b.n	80031ae <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80031ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	2380      	movs	r3, #128	@ 0x80
 80031b4:	045b      	lsls	r3, r3, #17
 80031b6:	4013      	ands	r3, r2
 80031b8:	d00e      	beq.n	80031d8 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80031ba:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80031bc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80031be:	0e5b      	lsrs	r3, r3, #25
 80031c0:	2207      	movs	r2, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80031c6:	0019      	movs	r1, r3
 80031c8:	69f8      	ldr	r0, [r7, #28]
 80031ca:	f7fc ff9d 	bl	8000108 <__udivsi3>
 80031ce:	0003      	movs	r3, r0
 80031d0:	001a      	movs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	e002      	b.n	80031de <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	055b      	lsls	r3, r3, #21
 80031e6:	4013      	ands	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80031ec:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80031ee:	0f5b      	lsrs	r3, r3, #29
 80031f0:	2207      	movs	r2, #7
 80031f2:	4013      	ands	r3, r2
 80031f4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80031f6:	0019      	movs	r1, r3
 80031f8:	69f8      	ldr	r0, [r7, #28]
 80031fa:	f7fc ff85 	bl	8000108 <__udivsi3>
 80031fe:	0003      	movs	r3, r0
 8003200:	001a      	movs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8003206:	e002      	b.n	800320e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b008      	add	sp, #32
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	40021000 	.word	0x40021000
 800321c:	00f42400 	.word	0x00f42400
 8003220:	08004e50 	.word	0x08004e50
 8003224:	003d0900 	.word	0x003d0900

08003228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e04a      	b.n	80032d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	223d      	movs	r2, #61	@ 0x3d
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223c      	movs	r2, #60	@ 0x3c
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd fce5 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	223d      	movs	r2, #61	@ 0x3d
 800325a:	2102      	movs	r1, #2
 800325c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	0019      	movs	r1, r3
 8003268:	0010      	movs	r0, r2
 800326a:	f000 fb53 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2248      	movs	r2, #72	@ 0x48
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223e      	movs	r2, #62	@ 0x3e
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	223f      	movs	r2, #63	@ 0x3f
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2240      	movs	r2, #64	@ 0x40
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2241      	movs	r2, #65	@ 0x41
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2242      	movs	r2, #66	@ 0x42
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2243      	movs	r2, #67	@ 0x43
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2244      	movs	r2, #68	@ 0x44
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2245      	movs	r2, #69	@ 0x45
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2246      	movs	r2, #70	@ 0x46
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2247      	movs	r2, #71	@ 0x47
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223d      	movs	r2, #61	@ 0x3d
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e04a      	b.n	8003380 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	223d      	movs	r2, #61	@ 0x3d
 80032ee:	5c9b      	ldrb	r3, [r3, r2]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223c      	movs	r2, #60	@ 0x3c
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 f841 	bl	8003388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223d      	movs	r2, #61	@ 0x3d
 800330a:	2102      	movs	r1, #2
 800330c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	0019      	movs	r1, r3
 8003318:	0010      	movs	r0, r2
 800331a:	f000 fafb 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2248      	movs	r2, #72	@ 0x48
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	223e      	movs	r2, #62	@ 0x3e
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223f      	movs	r2, #63	@ 0x3f
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2240      	movs	r2, #64	@ 0x40
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2241      	movs	r2, #65	@ 0x41
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2242      	movs	r2, #66	@ 0x42
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2243      	movs	r2, #67	@ 0x43
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2244      	movs	r2, #68	@ 0x44
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2245      	movs	r2, #69	@ 0x45
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2246      	movs	r2, #70	@ 0x46
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2247      	movs	r2, #71	@ 0x47
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	223d      	movs	r2, #61	@ 0x3d
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d108      	bne.n	80033ba <HAL_TIM_PWM_Start+0x22>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	223e      	movs	r2, #62	@ 0x3e
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	4193      	sbcs	r3, r2
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e037      	b.n	800342a <HAL_TIM_PWM_Start+0x92>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d108      	bne.n	80033d2 <HAL_TIM_PWM_Start+0x3a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223f      	movs	r2, #63	@ 0x3f
 80033c4:	5c9b      	ldrb	r3, [r3, r2]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	4193      	sbcs	r3, r2
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	e02b      	b.n	800342a <HAL_TIM_PWM_Start+0x92>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d108      	bne.n	80033ea <HAL_TIM_PWM_Start+0x52>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	@ 0x40
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	1e5a      	subs	r2, r3, #1
 80033e4:	4193      	sbcs	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e01f      	b.n	800342a <HAL_TIM_PWM_Start+0x92>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d108      	bne.n	8003402 <HAL_TIM_PWM_Start+0x6a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2241      	movs	r2, #65	@ 0x41
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	4193      	sbcs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e013      	b.n	800342a <HAL_TIM_PWM_Start+0x92>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d108      	bne.n	800341a <HAL_TIM_PWM_Start+0x82>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2242      	movs	r2, #66	@ 0x42
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	4193      	sbcs	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e007      	b.n	800342a <HAL_TIM_PWM_Start+0x92>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2243      	movs	r2, #67	@ 0x43
 800341e:	5c9b      	ldrb	r3, [r3, r2]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	4193      	sbcs	r3, r2
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e086      	b.n	8003540 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0xaa>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	223e      	movs	r2, #62	@ 0x3e
 800343c:	2102      	movs	r1, #2
 800343e:	5499      	strb	r1, [r3, r2]
 8003440:	e023      	b.n	800348a <HAL_TIM_PWM_Start+0xf2>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start+0xba>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	223f      	movs	r2, #63	@ 0x3f
 800344c:	2102      	movs	r1, #2
 800344e:	5499      	strb	r1, [r3, r2]
 8003450:	e01b      	b.n	800348a <HAL_TIM_PWM_Start+0xf2>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start+0xca>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2240      	movs	r2, #64	@ 0x40
 800345c:	2102      	movs	r1, #2
 800345e:	5499      	strb	r1, [r3, r2]
 8003460:	e013      	b.n	800348a <HAL_TIM_PWM_Start+0xf2>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0xda>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2241      	movs	r2, #65	@ 0x41
 800346c:	2102      	movs	r1, #2
 800346e:	5499      	strb	r1, [r3, r2]
 8003470:	e00b      	b.n	800348a <HAL_TIM_PWM_Start+0xf2>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b10      	cmp	r3, #16
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0xea>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2242      	movs	r2, #66	@ 0x42
 800347c:	2102      	movs	r1, #2
 800347e:	5499      	strb	r1, [r3, r2]
 8003480:	e003      	b.n	800348a <HAL_TIM_PWM_Start+0xf2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2243      	movs	r2, #67	@ 0x43
 8003486:	2102      	movs	r1, #2
 8003488:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fdf4 	bl	8004080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2a      	ldr	r2, [pc, #168]	@ (8003548 <HAL_TIM_PWM_Start+0x1b0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x11e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a29      	ldr	r2, [pc, #164]	@ (800354c <HAL_TIM_PWM_Start+0x1b4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x11e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a27      	ldr	r2, [pc, #156]	@ (8003550 <HAL_TIM_PWM_Start+0x1b8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_PWM_Start+0x122>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_TIM_PWM_Start+0x124>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2180      	movs	r1, #128	@ 0x80
 80034cc:	0209      	lsls	r1, r1, #8
 80034ce:	430a      	orrs	r2, r1
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_TIM_PWM_Start+0x1b0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00f      	beq.n	80034fc <HAL_TIM_PWM_Start+0x164>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	05db      	lsls	r3, r3, #23
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d009      	beq.n	80034fc <HAL_TIM_PWM_Start+0x164>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <HAL_TIM_PWM_Start+0x1bc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_TIM_PWM_Start+0x164>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a15      	ldr	r2, [pc, #84]	@ (800354c <HAL_TIM_PWM_Start+0x1b4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d116      	bne.n	800352a <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <HAL_TIM_PWM_Start+0x1c0>)
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d016      	beq.n	800353c <HAL_TIM_PWM_Start+0x1a4>
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	025b      	lsls	r3, r3, #9
 8003514:	429a      	cmp	r2, r3
 8003516:	d011      	beq.n	800353c <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2101      	movs	r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003528:	e008      	b.n	800353c <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e000      	b.n	800353e <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40000400 	.word	0x40000400
 8003558:	00010007 	.word	0x00010007

0800355c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2317      	movs	r3, #23
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	223c      	movs	r2, #60	@ 0x3c
 8003574:	5c9b      	ldrb	r3, [r3, r2]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_ConfigChannel+0x22>
 800357a:	2302      	movs	r3, #2
 800357c:	e0e5      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	223c      	movs	r2, #60	@ 0x3c
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b14      	cmp	r3, #20
 800358a:	d900      	bls.n	800358e <HAL_TIM_PWM_ConfigChannel+0x32>
 800358c:	e0d1      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	4b70      	ldr	r3, [pc, #448]	@ (8003754 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 fa34 	bl	8003a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2108      	movs	r1, #8
 80035b4:	430a      	orrs	r2, r1
 80035b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2104      	movs	r1, #4
 80035c4:	438a      	bics	r2, r1
 80035c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6999      	ldr	r1, [r3, #24]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
      break;
 80035da:	e0af      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	0011      	movs	r1, r2
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 fa93 	bl	8003b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2180      	movs	r1, #128	@ 0x80
 80035f6:	0109      	lsls	r1, r1, #4
 80035f8:	430a      	orrs	r2, r1
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4954      	ldr	r1, [pc, #336]	@ (8003758 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003608:	400a      	ands	r2, r1
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      break;
 8003620:	e08c      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f000 faee 	bl	8003c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2108      	movs	r1, #8
 800363c:	430a      	orrs	r2, r1
 800363e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2104      	movs	r1, #4
 800364c:	438a      	bics	r2, r1
 800364e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69d9      	ldr	r1, [r3, #28]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	61da      	str	r2, [r3, #28]
      break;
 8003662:	e06b      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f000 fb4f 	bl	8003d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2180      	movs	r1, #128	@ 0x80
 800367e:	0109      	lsls	r1, r1, #4
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4932      	ldr	r1, [pc, #200]	@ (8003758 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003690:	400a      	ands	r2, r1
 8003692:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69d9      	ldr	r1, [r3, #28]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      break;
 80036a8:	e048      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	0011      	movs	r1, r2
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 fb90 	bl	8003dd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2108      	movs	r1, #8
 80036c4:	430a      	orrs	r2, r1
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2104      	movs	r1, #4
 80036d4:	438a      	bics	r2, r1
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036ea:	e027      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	0011      	movs	r1, r2
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 fbc9 	bl	8003e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2180      	movs	r1, #128	@ 0x80
 8003706:	0109      	lsls	r1, r1, #4
 8003708:	430a      	orrs	r2, r1
 800370a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4910      	ldr	r1, [pc, #64]	@ (8003758 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003718:	400a      	ands	r2, r1
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003730:	e004      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003732:	2317      	movs	r3, #23
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	223c      	movs	r2, #60	@ 0x3c
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]

  return status;
 8003744:	2317      	movs	r3, #23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b006      	add	sp, #24
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	08004f04 	.word	0x08004f04
 8003758:	fffffbff 	.word	0xfffffbff

0800375c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	230f      	movs	r3, #15
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	223c      	movs	r2, #60	@ 0x3c
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIM_ConfigClockSource+0x20>
 8003778:	2302      	movs	r3, #2
 800377a:	e0c0      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x1a2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	223c      	movs	r2, #60	@ 0x3c
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223d      	movs	r2, #61	@ 0x3d
 8003788:	2102      	movs	r1, #2
 800378a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a5c      	ldr	r2, [pc, #368]	@ (8003908 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a5b      	ldr	r2, [pc, #364]	@ (800390c <HAL_TIM_ConfigClockSource+0x1b0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a57      	ldr	r2, [pc, #348]	@ (8003910 <HAL_TIM_ConfigClockSource+0x1b4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d100      	bne.n	80037b8 <HAL_TIM_ConfigClockSource+0x5c>
 80037b6:	e088      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
 80037b8:	4a55      	ldr	r2, [pc, #340]	@ (8003910 <HAL_TIM_ConfigClockSource+0x1b4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d900      	bls.n	80037c0 <HAL_TIM_ConfigClockSource+0x64>
 80037be:	e08d      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 80037c0:	2280      	movs	r2, #128	@ 0x80
 80037c2:	0192      	lsls	r2, r2, #6
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03c      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xe6>
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	0192      	lsls	r2, r2, #6
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d900      	bls.n	80037d2 <HAL_TIM_ConfigClockSource+0x76>
 80037d0:	e084      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 80037d2:	2280      	movs	r2, #128	@ 0x80
 80037d4:	0152      	lsls	r2, r2, #5
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d100      	bne.n	80037dc <HAL_TIM_ConfigClockSource+0x80>
 80037da:	e084      	b.n	80038e6 <HAL_TIM_ConfigClockSource+0x18a>
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0152      	lsls	r2, r2, #5
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d900      	bls.n	80037e6 <HAL_TIM_ConfigClockSource+0x8a>
 80037e4:	e07a      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 80037e6:	2b70      	cmp	r3, #112	@ 0x70
 80037e8:	d014      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0xb8>
 80037ea:	d900      	bls.n	80037ee <HAL_TIM_ConfigClockSource+0x92>
 80037ec:	e076      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 80037ee:	2b60      	cmp	r3, #96	@ 0x60
 80037f0:	d04b      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x12e>
 80037f2:	d900      	bls.n	80037f6 <HAL_TIM_ConfigClockSource+0x9a>
 80037f4:	e072      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 80037f6:	2b50      	cmp	r3, #80	@ 0x50
 80037f8:	d037      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x10e>
 80037fa:	d900      	bls.n	80037fe <HAL_TIM_ConfigClockSource+0xa2>
 80037fc:	e06e      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d053      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x14e>
 8003802:	d86b      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d060      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
 8003808:	d868      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05d      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
 800380e:	2b10      	cmp	r3, #16
 8003810:	d05b      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
 8003812:	e063      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	f000 fc0c 	bl	8004040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2277      	movs	r2, #119	@ 0x77
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
      break;
 8003840:	e052      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	f000 fbf5 	bl	8004040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2180      	movs	r1, #128	@ 0x80
 8003862:	01c9      	lsls	r1, r1, #7
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
      break;
 8003868:	e03e      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	001a      	movs	r2, r3
 8003878:	f000 fb66 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2150      	movs	r1, #80	@ 0x50
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fbc0 	bl	8004008 <TIM_ITRx_SetConfig>
      break;
 8003888:	e02e      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003896:	001a      	movs	r2, r3
 8003898:	f000 fb84 	bl	8003fa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2160      	movs	r1, #96	@ 0x60
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 fbb0 	bl	8004008 <TIM_ITRx_SetConfig>
      break;
 80038a8:	e01e      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	001a      	movs	r2, r3
 80038b8:	f000 fb46 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2140      	movs	r1, #64	@ 0x40
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 fba0 	bl	8004008 <TIM_ITRx_SetConfig>
      break;
 80038c8:	e00e      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0019      	movs	r1, r3
 80038d4:	0010      	movs	r0, r2
 80038d6:	f000 fb97 	bl	8004008 <TIM_ITRx_SetConfig>
      break;
 80038da:	e005      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 80038dc:	230f      	movs	r3, #15
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
      break;
 80038e4:	e000      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80038e6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	223d      	movs	r2, #61	@ 0x3d
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	223c      	movs	r2, #60	@ 0x3c
 80038f4:	2100      	movs	r1, #0
 80038f6:	5499      	strb	r1, [r3, r2]

  return status;
 80038f8:	230f      	movs	r3, #15
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	ffceff88 	.word	0xffceff88
 800390c:	ffff00ff 	.word	0xffff00ff
 8003910:	00100030 	.word	0x00100030

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a35      	ldr	r2, [pc, #212]	@ (80039fc <TIM_Base_SetConfig+0xe8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d008      	beq.n	800393e <TIM_Base_SetConfig+0x2a>
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	05db      	lsls	r3, r3, #23
 8003932:	429a      	cmp	r2, r3
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0x2a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a31      	ldr	r2, [pc, #196]	@ (8003a00 <TIM_Base_SetConfig+0xec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d108      	bne.n	8003950 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2270      	movs	r2, #112	@ 0x70
 8003942:	4393      	bics	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <TIM_Base_SetConfig+0xe8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d010      	beq.n	800397a <TIM_Base_SetConfig+0x66>
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	429a      	cmp	r2, r3
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x66>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a26      	ldr	r2, [pc, #152]	@ (8003a00 <TIM_Base_SetConfig+0xec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x66>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a25      	ldr	r2, [pc, #148]	@ (8003a04 <TIM_Base_SetConfig+0xf0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x66>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a24      	ldr	r2, [pc, #144]	@ (8003a08 <TIM_Base_SetConfig+0xf4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <TIM_Base_SetConfig+0xf8>)
 800397e:	4013      	ands	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2280      	movs	r2, #128	@ 0x80
 8003990:	4393      	bics	r3, r2
 8003992:	001a      	movs	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <TIM_Base_SetConfig+0xe8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0xb6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <TIM_Base_SetConfig+0xf0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0xb6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a10      	ldr	r2, [pc, #64]	@ (8003a08 <TIM_Base_SetConfig+0xf4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d103      	bne.n	80039d2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4393      	bics	r3, r2
 80039ec:	001a      	movs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
  }
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	fffffcff 	.word	0xfffffcff

08003a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	2201      	movs	r2, #1
 8003a26:	4393      	bics	r3, r2
 8003a28:	001a      	movs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003af8 <TIM_OC1_SetConfig+0xe8>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2203      	movs	r2, #3
 8003a46:	4393      	bics	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2202      	movs	r2, #2
 8003a58:	4393      	bics	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <TIM_OC1_SetConfig+0xec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_OC1_SetConfig+0x6e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a23      	ldr	r2, [pc, #140]	@ (8003b00 <TIM_OC1_SetConfig+0xf0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC1_SetConfig+0x6e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a22      	ldr	r2, [pc, #136]	@ (8003b04 <TIM_OC1_SetConfig+0xf4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10c      	bne.n	8003a98 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2208      	movs	r2, #8
 8003a82:	4393      	bics	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4393      	bics	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <TIM_OC1_SetConfig+0xec>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_OC1_SetConfig+0xa0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	@ (8003b00 <TIM_OC1_SetConfig+0xf0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_OC1_SetConfig+0xa0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a16      	ldr	r2, [pc, #88]	@ (8003b04 <TIM_OC1_SetConfig+0xf4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	@ (8003b08 <TIM_OC1_SetConfig+0xf8>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4a14      	ldr	r2, [pc, #80]	@ (8003b0c <TIM_OC1_SetConfig+0xfc>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b006      	add	sp, #24
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	fffeff8f 	.word	0xfffeff8f
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	fffffeff 	.word	0xfffffeff
 8003b0c:	fffffdff 	.word	0xfffffdff

08003b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	2210      	movs	r2, #16
 8003b26:	4393      	bics	r3, r2
 8003b28:	001a      	movs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf0 <TIM_OC2_SetConfig+0xe0>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf4 <TIM_OC2_SetConfig+0xe4>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a22      	ldr	r2, [pc, #136]	@ (8003bf8 <TIM_OC2_SetConfig+0xe8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10d      	bne.n	8003b8e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2280      	movs	r2, #128	@ 0x80
 8003b76:	4393      	bics	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2240      	movs	r2, #64	@ 0x40
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <TIM_OC2_SetConfig+0xe8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_OC2_SetConfig+0x96>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <TIM_OC2_SetConfig+0xec>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_OC2_SetConfig+0x96>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a17      	ldr	r2, [pc, #92]	@ (8003c00 <TIM_OC2_SetConfig+0xf0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d113      	bne.n	8003bce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <TIM_OC2_SetConfig+0xf4>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <TIM_OC2_SetConfig+0xf8>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	621a      	str	r2, [r3, #32]
}
 8003be8:	46c0      	nop			@ (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b006      	add	sp, #24
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	feff8fff 	.word	0xfeff8fff
 8003bf4:	fffffcff 	.word	0xfffffcff
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	fffffbff 	.word	0xfffffbff
 8003c08:	fffff7ff 	.word	0xfffff7ff

08003c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a31      	ldr	r2, [pc, #196]	@ (8003ce8 <TIM_OC3_SetConfig+0xdc>)
 8003c22:	401a      	ands	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a2d      	ldr	r2, [pc, #180]	@ (8003cec <TIM_OC3_SetConfig+0xe0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	4393      	bics	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <TIM_OC3_SetConfig+0xe4>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <TIM_OC3_SetConfig+0xe8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <TIM_OC3_SetConfig+0xec>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <TIM_OC3_SetConfig+0xf0>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf4 <TIM_OC3_SetConfig+0xe8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_OC3_SetConfig+0x92>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	@ (8003d00 <TIM_OC3_SetConfig+0xf4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_OC3_SetConfig+0x92>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <TIM_OC3_SetConfig+0xf8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d113      	bne.n	8003cc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <TIM_OC3_SetConfig+0xfc>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <TIM_OC3_SetConfig+0x100>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b006      	add	sp, #24
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	fffffeff 	.word	0xfffffeff
 8003cec:	fffeff8f 	.word	0xfffeff8f
 8003cf0:	fffffdff 	.word	0xfffffdff
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	fffff7ff 	.word	0xfffff7ff
 8003cfc:	fffffbff 	.word	0xfffffbff
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	ffffefff 	.word	0xffffefff
 8003d0c:	ffffdfff 	.word	0xffffdfff

08003d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4a24      	ldr	r2, [pc, #144]	@ (8003db8 <TIM_OC4_SetConfig+0xa8>)
 8003d26:	401a      	ands	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <TIM_OC4_SetConfig+0xac>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <TIM_OC4_SetConfig+0xb0>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <TIM_OC4_SetConfig+0xb4>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	031b      	lsls	r3, r3, #12
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <TIM_OC4_SetConfig+0xb8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_OC4_SetConfig+0x70>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a16      	ldr	r2, [pc, #88]	@ (8003dcc <TIM_OC4_SetConfig+0xbc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC4_SetConfig+0x70>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	@ (8003dd0 <TIM_OC4_SetConfig+0xc0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <TIM_OC4_SetConfig+0xc4>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	ffffefff 	.word	0xffffefff
 8003dbc:	feff8fff 	.word	0xfeff8fff
 8003dc0:	fffffcff 	.word	0xfffffcff
 8003dc4:	ffffdfff 	.word	0xffffdfff
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	ffffbfff 	.word	0xffffbfff

08003dd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <TIM_OC5_SetConfig+0x9c>)
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <TIM_OC5_SetConfig+0xa0>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <TIM_OC5_SetConfig+0xa4>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a15      	ldr	r2, [pc, #84]	@ (8003e80 <TIM_OC5_SetConfig+0xa8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_OC5_SetConfig+0x66>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a14      	ldr	r2, [pc, #80]	@ (8003e84 <TIM_OC5_SetConfig+0xac>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_OC5_SetConfig+0x66>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <TIM_OC5_SetConfig+0xb0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d109      	bne.n	8003e52 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4a0c      	ldr	r2, [pc, #48]	@ (8003e74 <TIM_OC5_SetConfig+0x9c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b006      	add	sp, #24
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fffeffff 	.word	0xfffeffff
 8003e78:	fffeff8f 	.word	0xfffeff8f
 8003e7c:	fffdffff 	.word	0xfffdffff
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400

08003e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <TIM_OC6_SetConfig+0xa0>)
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <TIM_OC6_SetConfig+0xa4>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4a1a      	ldr	r2, [pc, #104]	@ (8003f34 <TIM_OC6_SetConfig+0xa8>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	051b      	lsls	r3, r3, #20
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <TIM_OC6_SetConfig+0xac>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d007      	beq.n	8003ef4 <TIM_OC6_SetConfig+0x68>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	@ (8003f3c <TIM_OC6_SetConfig+0xb0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_OC6_SetConfig+0x68>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <TIM_OC6_SetConfig+0xb4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4a13      	ldr	r2, [pc, #76]	@ (8003f44 <TIM_OC6_SetConfig+0xb8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b006      	add	sp, #24
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	ffefffff 	.word	0xffefffff
 8003f30:	feff8fff 	.word	0xfeff8fff
 8003f34:	ffdfffff 	.word	0xffdfffff
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	fffbffff 	.word	0xfffbffff

08003f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4393      	bics	r3, r2
 8003f62:	001a      	movs	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	22f0      	movs	r2, #240	@ 0xf0
 8003f72:	4393      	bics	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	220a      	movs	r2, #10
 8003f84:	4393      	bics	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b006      	add	sp, #24
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004004 <TIM_TI2_ConfigInputStage+0x60>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	22a0      	movs	r2, #160	@ 0xa0
 8003fe0:	4393      	bics	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b006      	add	sp, #24
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	ffff0fff 	.word	0xffff0fff

08004008 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a08      	ldr	r2, [pc, #32]	@ (800403c <TIM_ITRx_SetConfig+0x34>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	2207      	movs	r2, #7
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	ffcfff8f 	.word	0xffcfff8f

08004040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <TIM_ETR_SetConfig+0x3c>)
 8004058:	4013      	ands	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	431a      	orrs	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b006      	add	sp, #24
 800407a:	bd80      	pop	{r7, pc}
 800407c:	ffff00ff 	.word	0xffff00ff

08004080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	221f      	movs	r2, #31
 8004090:	4013      	ands	r3, r2
 8004092:	2201      	movs	r2, #1
 8004094:	409a      	lsls	r2, r3
 8004096:	0013      	movs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	43d2      	mvns	r2, r2
 80040a2:	401a      	ands	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	211f      	movs	r1, #31
 80040b0:	400b      	ands	r3, r1
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4099      	lsls	r1, r3
 80040b6:	000b      	movs	r3, r1
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b006      	add	sp, #24
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	223c      	movs	r2, #60	@ 0x3c
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e055      	b.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	223c      	movs	r2, #60	@ 0x3c
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	223d      	movs	r2, #61	@ 0x3d
 80040ec:	2102      	movs	r1, #2
 80040ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a22      	ldr	r2, [pc, #136]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800410e:	4013      	ands	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2270      	movs	r2, #112	@ 0x70
 8004120:	4393      	bics	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	@ 0x80
 8004146:	05db      	lsls	r3, r3, #23
 8004148:	429a      	cmp	r2, r3
 800414a:	d009      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a12      	ldr	r2, [pc, #72]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2280      	movs	r2, #128	@ 0x80
 8004164:	4393      	bics	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	223d      	movs	r2, #61	@ 0x3d
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223c      	movs	r2, #60	@ 0x3c
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40012c00 	.word	0x40012c00
 8004198:	ff0fffff 	.word	0xff0fffff
 800419c:	40000400 	.word	0x40000400
 80041a0:	40014000 	.word	0x40014000

080041a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	223c      	movs	r2, #60	@ 0x3c
 80041b6:	5c9b      	ldrb	r3, [r3, r2]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041bc:	2302      	movs	r3, #2
 80041be:	e06f      	b.n	80042a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	223c      	movs	r2, #60	@ 0x3c
 80041c4:	2101      	movs	r1, #1
 80041c6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	@ 0xff
 80041cc:	4393      	bics	r3, r2
 80041ce:	001a      	movs	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a33      	ldr	r2, [pc, #204]	@ (80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80041dc:	401a      	ands	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a30      	ldr	r2, [pc, #192]	@ (80042ac <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80041ea:	401a      	ands	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a2e      	ldr	r2, [pc, #184]	@ (80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80041f8:	401a      	ands	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a2b      	ldr	r2, [pc, #172]	@ (80042b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004206:	401a      	ands	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a29      	ldr	r2, [pc, #164]	@ (80042b8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004214:	401a      	ands	r2, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a26      	ldr	r2, [pc, #152]	@ (80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004222:	401a      	ands	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a24      	ldr	r2, [pc, #144]	@ (80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004230:	401a      	ands	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a21      	ldr	r2, [pc, #132]	@ (80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004240:	401a      	ands	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1e      	ldr	r2, [pc, #120]	@ (80042c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d11c      	bne.n	800428e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004258:	401a      	ands	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	051b      	lsls	r3, r3, #20
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a1a      	ldr	r2, [pc, #104]	@ (80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004268:	401a      	ands	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004276:	401a      	ands	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a15      	ldr	r2, [pc, #84]	@ (80042d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004284:	401a      	ands	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	223c      	movs	r2, #60	@ 0x3c
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	fffffcff 	.word	0xfffffcff
 80042ac:	fffffbff 	.word	0xfffffbff
 80042b0:	fffff7ff 	.word	0xfffff7ff
 80042b4:	ffffefff 	.word	0xffffefff
 80042b8:	ffffdfff 	.word	0xffffdfff
 80042bc:	ffffbfff 	.word	0xffffbfff
 80042c0:	fff0ffff 	.word	0xfff0ffff
 80042c4:	efffffff 	.word	0xefffffff
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	ff0fffff 	.word	0xff0fffff
 80042d0:	feffffff 	.word	0xfeffffff
 80042d4:	fdffffff 	.word	0xfdffffff
 80042d8:	dfffffff 	.word	0xdfffffff

080042dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e046      	b.n	800437c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2288      	movs	r2, #136	@ 0x88
 80042f2:	589b      	ldr	r3, [r3, r2]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2284      	movs	r2, #132	@ 0x84
 80042fc:	2100      	movs	r1, #0
 80042fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	0018      	movs	r0, r3
 8004304:	f7fc fd00 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2288      	movs	r2, #136	@ 0x88
 800430c:	2124      	movs	r1, #36	@ 0x24
 800430e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2101      	movs	r1, #1
 800431c:	438a      	bics	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f9fe 	bl	800472c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 f828 	bl	8004388 <UART_SetConfig>
 8004338:	0003      	movs	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e01c      	b.n	800437c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	490d      	ldr	r1, [pc, #52]	@ (8004384 <HAL_UART_Init+0xa8>)
 800434e:	400a      	ands	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	212a      	movs	r1, #42	@ 0x2a
 800435e:	438a      	bics	r2, r1
 8004360:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2101      	movs	r1, #1
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 fa8d 	bl	8004894 <UART_CheckIdleState>
 800437a:	0003      	movs	r3, r0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}
 8004384:	ffffb7ff 	.word	0xffffb7ff

08004388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	b092      	sub	sp, #72	@ 0x48
 800438c:	af00      	add	r7, sp, #0
 800438e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004390:	231f      	movs	r3, #31
 8004392:	2220      	movs	r2, #32
 8004394:	189b      	adds	r3, r3, r2
 8004396:	19db      	adds	r3, r3, r7
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4ac8      	ldr	r2, [pc, #800]	@ (80046c4 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4ac1      	ldr	r2, [pc, #772]	@ (80046c8 <UART_SetConfig+0x340>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4abd      	ldr	r2, [pc, #756]	@ (80046cc <UART_SetConfig+0x344>)
 80043d8:	4013      	ands	r3, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	68d9      	ldr	r1, [r3, #12]
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	0003      	movs	r3, r0
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4ab3      	ldr	r2, [pc, #716]	@ (80046c4 <UART_SetConfig+0x33c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <UART_SetConfig+0x90>
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4ab4      	ldr	r2, [pc, #720]	@ (80046d0 <UART_SetConfig+0x348>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <UART_SetConfig+0x90>
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4ab2      	ldr	r2, [pc, #712]	@ (80046d4 <UART_SetConfig+0x34c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004414:	4313      	orrs	r3, r2
 8004416:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4aae      	ldr	r2, [pc, #696]	@ (80046d8 <UART_SetConfig+0x350>)
 8004420:	4013      	ands	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442a:	430b      	orrs	r3, r1
 800442c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	220f      	movs	r2, #15
 8004436:	4393      	bics	r3, r2
 8004438:	0018      	movs	r0, r3
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	0003      	movs	r3, r0
 8004444:	430b      	orrs	r3, r1
 8004446:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4aa3      	ldr	r2, [pc, #652]	@ (80046dc <UART_SetConfig+0x354>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d102      	bne.n	8004458 <UART_SetConfig+0xd0>
 8004452:	2301      	movs	r3, #1
 8004454:	643b      	str	r3, [r7, #64]	@ 0x40
 8004456:	e033      	b.n	80044c0 <UART_SetConfig+0x138>
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4aa0      	ldr	r2, [pc, #640]	@ (80046e0 <UART_SetConfig+0x358>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d102      	bne.n	8004468 <UART_SetConfig+0xe0>
 8004462:	2302      	movs	r3, #2
 8004464:	643b      	str	r3, [r7, #64]	@ 0x40
 8004466:	e02b      	b.n	80044c0 <UART_SetConfig+0x138>
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a9d      	ldr	r2, [pc, #628]	@ (80046e4 <UART_SetConfig+0x35c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d103      	bne.n	800447a <UART_SetConfig+0xf2>
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	025b      	lsls	r3, r3, #9
 8004476:	643b      	str	r3, [r7, #64]	@ 0x40
 8004478:	e022      	b.n	80044c0 <UART_SetConfig+0x138>
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a9a      	ldr	r2, [pc, #616]	@ (80046e8 <UART_SetConfig+0x360>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <UART_SetConfig+0x104>
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	029b      	lsls	r3, r3, #10
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
 800448a:	e019      	b.n	80044c0 <UART_SetConfig+0x138>
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a8c      	ldr	r2, [pc, #560]	@ (80046c4 <UART_SetConfig+0x33c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d102      	bne.n	800449c <UART_SetConfig+0x114>
 8004496:	2310      	movs	r3, #16
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40
 800449a:	e011      	b.n	80044c0 <UART_SetConfig+0x138>
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a8b      	ldr	r2, [pc, #556]	@ (80046d0 <UART_SetConfig+0x348>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d102      	bne.n	80044ac <UART_SetConfig+0x124>
 80044a6:	2308      	movs	r3, #8
 80044a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044aa:	e009      	b.n	80044c0 <UART_SetConfig+0x138>
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a88      	ldr	r2, [pc, #544]	@ (80046d4 <UART_SetConfig+0x34c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d102      	bne.n	80044bc <UART_SetConfig+0x134>
 80044b6:	2304      	movs	r3, #4
 80044b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ba:	e001      	b.n	80044c0 <UART_SetConfig+0x138>
 80044bc:	2300      	movs	r3, #0
 80044be:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a7f      	ldr	r2, [pc, #508]	@ (80046c4 <UART_SetConfig+0x33c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00a      	beq.n	80044e0 <UART_SetConfig+0x158>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a80      	ldr	r2, [pc, #512]	@ (80046d0 <UART_SetConfig+0x348>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d005      	beq.n	80044e0 <UART_SetConfig+0x158>
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7e      	ldr	r2, [pc, #504]	@ (80046d4 <UART_SetConfig+0x34c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d000      	beq.n	80044e0 <UART_SetConfig+0x158>
 80044de:	e06f      	b.n	80045c0 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80044e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7fe f896 	bl	8002614 <HAL_RCCEx_GetPeriphCLKFreq>
 80044e8:	0003      	movs	r3, r0
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d100      	bne.n	80044f4 <UART_SetConfig+0x16c>
 80044f2:	e103      	b.n	80046fc <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f8:	4b7c      	ldr	r3, [pc, #496]	@ (80046ec <UART_SetConfig+0x364>)
 80044fa:	0052      	lsls	r2, r2, #1
 80044fc:	5ad3      	ldrh	r3, [r2, r3]
 80044fe:	0019      	movs	r1, r3
 8004500:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004502:	f7fb fe01 	bl	8000108 <__udivsi3>
 8004506:	0003      	movs	r3, r0
 8004508:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	0013      	movs	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	189b      	adds	r3, r3, r2
 8004514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004516:	429a      	cmp	r2, r3
 8004518:	d305      	bcc.n	8004526 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004522:	429a      	cmp	r2, r3
 8004524:	d906      	bls.n	8004534 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8004526:	231f      	movs	r3, #31
 8004528:	2220      	movs	r2, #32
 800452a:	189b      	adds	r3, r3, r2
 800452c:	19db      	adds	r3, r3, r7
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e044      	b.n	80045be <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004540:	4b6a      	ldr	r3, [pc, #424]	@ (80046ec <UART_SetConfig+0x364>)
 8004542:	0052      	lsls	r2, r2, #1
 8004544:	5ad3      	ldrh	r3, [r2, r3]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	69b8      	ldr	r0, [r7, #24]
 8004552:	69f9      	ldr	r1, [r7, #28]
 8004554:	f7fb ff4e 	bl	80003f4 <__aeabi_uldivmod>
 8004558:	0002      	movs	r2, r0
 800455a:	000b      	movs	r3, r1
 800455c:	0e11      	lsrs	r1, r2, #24
 800455e:	021d      	lsls	r5, r3, #8
 8004560:	430d      	orrs	r5, r1
 8004562:	0214      	lsls	r4, r2, #8
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68b8      	ldr	r0, [r7, #8]
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	1900      	adds	r0, r0, r4
 8004576:	4169      	adcs	r1, r5
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f7fb ff35 	bl	80003f4 <__aeabi_uldivmod>
 800458a:	0002      	movs	r2, r0
 800458c:	000b      	movs	r3, r1
 800458e:	0013      	movs	r3, r2
 8004590:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004594:	23c0      	movs	r3, #192	@ 0xc0
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	429a      	cmp	r2, r3
 800459a:	d309      	bcc.n	80045b0 <UART_SetConfig+0x228>
 800459c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	035b      	lsls	r3, r3, #13
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d204      	bcs.n	80045b0 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e006      	b.n	80045be <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 80045b0:	231f      	movs	r3, #31
 80045b2:	2220      	movs	r2, #32
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	19db      	adds	r3, r3, r7
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80045bc:	e09e      	b.n	80046fc <UART_SetConfig+0x374>
 80045be:	e09d      	b.n	80046fc <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d14c      	bne.n	8004666 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80045cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7fe f820 	bl	8002614 <HAL_RCCEx_GetPeriphCLKFreq>
 80045d4:	0003      	movs	r3, r0
 80045d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d100      	bne.n	80045e0 <UART_SetConfig+0x258>
 80045de:	e08d      	b.n	80046fc <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045e4:	4b41      	ldr	r3, [pc, #260]	@ (80046ec <UART_SetConfig+0x364>)
 80045e6:	0052      	lsls	r2, r2, #1
 80045e8:	5ad3      	ldrh	r3, [r2, r3]
 80045ea:	0019      	movs	r1, r3
 80045ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045ee:	f7fb fd8b 	bl	8000108 <__udivsi3>
 80045f2:	0003      	movs	r3, r0
 80045f4:	005a      	lsls	r2, r3, #1
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	18d2      	adds	r2, r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0019      	movs	r1, r3
 8004604:	0010      	movs	r0, r2
 8004606:	f7fb fd7f 	bl	8000108 <__udivsi3>
 800460a:	0003      	movs	r3, r0
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d921      	bls.n	8004658 <UART_SetConfig+0x2d0>
 8004614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004616:	2380      	movs	r3, #128	@ 0x80
 8004618:	025b      	lsls	r3, r3, #9
 800461a:	429a      	cmp	r2, r3
 800461c:	d21c      	bcs.n	8004658 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	b29a      	uxth	r2, r3
 8004622:	2012      	movs	r0, #18
 8004624:	2420      	movs	r4, #32
 8004626:	1903      	adds	r3, r0, r4
 8004628:	19db      	adds	r3, r3, r7
 800462a:	210f      	movs	r1, #15
 800462c:	438a      	bics	r2, r1
 800462e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	b29b      	uxth	r3, r3
 8004636:	2207      	movs	r2, #7
 8004638:	4013      	ands	r3, r2
 800463a:	b299      	uxth	r1, r3
 800463c:	1903      	adds	r3, r0, r4
 800463e:	19db      	adds	r3, r3, r7
 8004640:	1902      	adds	r2, r0, r4
 8004642:	19d2      	adds	r2, r2, r7
 8004644:	8812      	ldrh	r2, [r2, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	1902      	adds	r2, r0, r4
 8004650:	19d2      	adds	r2, r2, r7
 8004652:	8812      	ldrh	r2, [r2, #0]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e051      	b.n	80046fc <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8004658:	231f      	movs	r3, #31
 800465a:	2220      	movs	r2, #32
 800465c:	189b      	adds	r3, r3, r2
 800465e:	19db      	adds	r3, r3, r7
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e04a      	b.n	80046fc <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004668:	0018      	movs	r0, r3
 800466a:	f7fd ffd3 	bl	8002614 <HAL_RCCEx_GetPeriphCLKFreq>
 800466e:	0003      	movs	r3, r0
 8004670:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d041      	beq.n	80046fc <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <UART_SetConfig+0x364>)
 800467e:	0052      	lsls	r2, r2, #1
 8004680:	5ad3      	ldrh	r3, [r2, r3]
 8004682:	0019      	movs	r1, r3
 8004684:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004686:	f7fb fd3f 	bl	8000108 <__udivsi3>
 800468a:	0003      	movs	r3, r0
 800468c:	001a      	movs	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	18d2      	adds	r2, r2, r3
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f7fb fd33 	bl	8000108 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	2b0f      	cmp	r3, #15
 80046aa:	d921      	bls.n	80046f0 <UART_SetConfig+0x368>
 80046ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046ae:	2380      	movs	r3, #128	@ 0x80
 80046b0:	025b      	lsls	r3, r3, #9
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d21c      	bcs.n	80046f0 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	e01c      	b.n	80046fc <UART_SetConfig+0x374>
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	40008000 	.word	0x40008000
 80046c8:	cfff69f3 	.word	0xcfff69f3
 80046cc:	ffffcfff 	.word	0xffffcfff
 80046d0:	40008400 	.word	0x40008400
 80046d4:	40008c00 	.word	0x40008c00
 80046d8:	11fff4ff 	.word	0x11fff4ff
 80046dc:	40013800 	.word	0x40013800
 80046e0:	40004400 	.word	0x40004400
 80046e4:	40004800 	.word	0x40004800
 80046e8:	40004c00 	.word	0x40004c00
 80046ec:	08004f58 	.word	0x08004f58
      }
      else
      {
        ret = HAL_ERROR;
 80046f0:	231f      	movs	r3, #31
 80046f2:	2220      	movs	r2, #32
 80046f4:	189b      	adds	r3, r3, r2
 80046f6:	19db      	adds	r3, r3, r7
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	226a      	movs	r2, #106	@ 0x6a
 8004700:	2101      	movs	r1, #1
 8004702:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	2268      	movs	r2, #104	@ 0x68
 8004708:	2101      	movs	r1, #1
 800470a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	2200      	movs	r2, #0
 8004710:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	2200      	movs	r2, #0
 8004716:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004718:	231f      	movs	r3, #31
 800471a:	2220      	movs	r2, #32
 800471c:	189b      	adds	r3, r3, r2
 800471e:	19db      	adds	r3, r3, r7
 8004720:	781b      	ldrb	r3, [r3, #0]
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b012      	add	sp, #72	@ 0x48
 8004728:	bdb0      	pop	{r4, r5, r7, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)

0800472c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	2208      	movs	r2, #8
 800473a:	4013      	ands	r3, r2
 800473c:	d00b      	beq.n	8004756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a4a      	ldr	r2, [pc, #296]	@ (8004870 <UART_AdvFeatureConfig+0x144>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	2201      	movs	r2, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d00b      	beq.n	8004778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a43      	ldr	r2, [pc, #268]	@ (8004874 <UART_AdvFeatureConfig+0x148>)
 8004768:	4013      	ands	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	2202      	movs	r2, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d00b      	beq.n	800479a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a3b      	ldr	r2, [pc, #236]	@ (8004878 <UART_AdvFeatureConfig+0x14c>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	2204      	movs	r2, #4
 80047a0:	4013      	ands	r3, r2
 80047a2:	d00b      	beq.n	80047bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a34      	ldr	r2, [pc, #208]	@ (800487c <UART_AdvFeatureConfig+0x150>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	2210      	movs	r2, #16
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00b      	beq.n	80047de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <UART_AdvFeatureConfig+0x154>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	2220      	movs	r2, #32
 80047e4:	4013      	ands	r3, r2
 80047e6:	d00b      	beq.n	8004800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4a25      	ldr	r2, [pc, #148]	@ (8004884 <UART_AdvFeatureConfig+0x158>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	2240      	movs	r2, #64	@ 0x40
 8004806:	4013      	ands	r3, r2
 8004808:	d01d      	beq.n	8004846 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a1d      	ldr	r2, [pc, #116]	@ (8004888 <UART_AdvFeatureConfig+0x15c>)
 8004812:	4013      	ands	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	035b      	lsls	r3, r3, #13
 800482a:	429a      	cmp	r2, r3
 800482c:	d10b      	bne.n	8004846 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a15      	ldr	r2, [pc, #84]	@ (800488c <UART_AdvFeatureConfig+0x160>)
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	4013      	ands	r3, r2
 800484e:	d00b      	beq.n	8004868 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a0e      	ldr	r2, [pc, #56]	@ (8004890 <UART_AdvFeatureConfig+0x164>)
 8004858:	4013      	ands	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }
}
 8004868:	46c0      	nop			@ (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}
 8004870:	ffff7fff 	.word	0xffff7fff
 8004874:	fffdffff 	.word	0xfffdffff
 8004878:	fffeffff 	.word	0xfffeffff
 800487c:	fffbffff 	.word	0xfffbffff
 8004880:	ffffefff 	.word	0xffffefff
 8004884:	ffffdfff 	.word	0xffffdfff
 8004888:	ffefffff 	.word	0xffefffff
 800488c:	ff9fffff 	.word	0xff9fffff
 8004890:	fff7ffff 	.word	0xfff7ffff

08004894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b092      	sub	sp, #72	@ 0x48
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2290      	movs	r2, #144	@ 0x90
 80048a0:	2100      	movs	r1, #0
 80048a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a4:	f7fc fb72 	bl	8000f8c <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2208      	movs	r2, #8
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d12d      	bne.n	8004916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048bc:	2280      	movs	r2, #128	@ 0x80
 80048be:	0391      	lsls	r1, r2, #14
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4a47      	ldr	r2, [pc, #284]	@ (80049e0 <UART_CheckIdleState+0x14c>)
 80048c4:	9200      	str	r2, [sp, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f000 f88e 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 80048cc:	1e03      	subs	r3, r0, #0
 80048ce:	d022      	beq.n	8004916 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048d0:	f3ef 8310 	mrs	r3, PRIMASK
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048da:	2301      	movs	r3, #1
 80048dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2180      	movs	r1, #128	@ 0x80
 80048f2:	438a      	bics	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2288      	movs	r2, #136	@ 0x88
 8004906:	2120      	movs	r1, #32
 8004908:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2284      	movs	r2, #132	@ 0x84
 800490e:	2100      	movs	r1, #0
 8004910:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e060      	b.n	80049d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2204      	movs	r2, #4
 800491e:	4013      	ands	r3, r2
 8004920:	2b04      	cmp	r3, #4
 8004922:	d146      	bne.n	80049b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004926:	2280      	movs	r2, #128	@ 0x80
 8004928:	03d1      	lsls	r1, r2, #15
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <UART_CheckIdleState+0x14c>)
 800492e:	9200      	str	r2, [sp, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	f000 f859 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 8004936:	1e03      	subs	r3, r0, #0
 8004938:	d03b      	beq.n	80049b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800493a:	f3ef 8310 	mrs	r3, PRIMASK
 800493e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004940:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
 8004944:	2301      	movs	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4922      	ldr	r1, [pc, #136]	@ (80049e4 <UART_CheckIdleState+0x150>)
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004962:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f383 8810 	msr	PRIMASK, r3
}
 800496a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800496c:	f3ef 8310 	mrs	r3, PRIMASK
 8004970:	61bb      	str	r3, [r7, #24]
  return(result);
 8004972:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
 8004976:	2301      	movs	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			@ (mov r8, r8)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2101      	movs	r1, #1
 800498e:	438a      	bics	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	228c      	movs	r2, #140	@ 0x8c
 80049a2:	2120      	movs	r1, #32
 80049a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2284      	movs	r2, #132	@ 0x84
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e012      	b.n	80049d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2288      	movs	r2, #136	@ 0x88
 80049b6:	2120      	movs	r1, #32
 80049b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	228c      	movs	r2, #140	@ 0x8c
 80049be:	2120      	movs	r1, #32
 80049c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2284      	movs	r2, #132	@ 0x84
 80049d2:	2100      	movs	r1, #0
 80049d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b010      	add	sp, #64	@ 0x40
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	01ffffff 	.word	0x01ffffff
 80049e4:	fffffedf 	.word	0xfffffedf

080049e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	1dfb      	adds	r3, r7, #7
 80049f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	e051      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	3301      	adds	r3, #1
 80049fe:	d04e      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a00:	f7fc fac4 	bl	8000f8c <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e051      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2204      	movs	r2, #4
 8004a22:	4013      	ands	r3, r2
 8004a24:	d03b      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b80      	cmp	r3, #128	@ 0x80
 8004a2a:	d038      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d035      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d111      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2208      	movs	r2, #8
 8004a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 f83c 	bl	8004ac8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2290      	movs	r2, #144	@ 0x90
 8004a54:	2108      	movs	r1, #8
 8004a56:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2284      	movs	r2, #132	@ 0x84
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e02c      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	401a      	ands	r2, r3
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d112      	bne.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2280      	movs	r2, #128	@ 0x80
 8004a7e:	0112      	lsls	r2, r2, #4
 8004a80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 f81f 	bl	8004ac8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2290      	movs	r2, #144	@ 0x90
 8004a8e:	2120      	movs	r1, #32
 8004a90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2284      	movs	r2, #132	@ 0x84
 8004a96:	2100      	movs	r1, #0
 8004a98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e00f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	425a      	negs	r2, r3
 8004aae:	4153      	adcs	r3, r2
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	001a      	movs	r2, r3
 8004ab4:	1dfb      	adds	r3, r7, #7
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d09e      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b004      	add	sp, #16
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	@ 0x38
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ad6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ada:	2301      	movs	r3, #1
 8004adc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f383 8810 	msr	PRIMASK, r3
}
 8004ae4:	46c0      	nop			@ (mov r8, r8)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4926      	ldr	r1, [pc, #152]	@ (8004b8c <UART_EndRxTransfer+0xc4>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f383 8810 	msr	PRIMASK, r3
}
 8004b00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b02:	f3ef 8310 	mrs	r3, PRIMASK
 8004b06:	623b      	str	r3, [r7, #32]
  return(result);
 8004b08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	f383 8810 	msr	PRIMASK, r3
}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	491b      	ldr	r1, [pc, #108]	@ (8004b90 <UART_EndRxTransfer+0xc8>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	f383 8810 	msr	PRIMASK, r3
}
 8004b32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d118      	bne.n	8004b6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b46:	2301      	movs	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f383 8810 	msr	PRIMASK, r3
}
 8004b50:	46c0      	nop			@ (mov r8, r8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2110      	movs	r1, #16
 8004b5e:	438a      	bics	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	228c      	movs	r2, #140	@ 0x8c
 8004b72:	2120      	movs	r1, #32
 8004b74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b00e      	add	sp, #56	@ 0x38
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	fffffedf 	.word	0xfffffedf
 8004b90:	effffffe 	.word	0xeffffffe

08004b94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2284      	movs	r2, #132	@ 0x84
 8004ba0:	5c9b      	ldrb	r3, [r3, r2]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_UARTEx_DisableFifoMode+0x16>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e027      	b.n	8004bfa <HAL_UARTEx_DisableFifoMode+0x66>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2284      	movs	r2, #132	@ 0x84
 8004bae:	2101      	movs	r1, #1
 8004bb0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2288      	movs	r2, #136	@ 0x88
 8004bb6:	2124      	movs	r1, #36	@ 0x24
 8004bb8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	438a      	bics	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c04 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2288      	movs	r2, #136	@ 0x88
 8004bec:	2120      	movs	r1, #32
 8004bee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2284      	movs	r2, #132	@ 0x84
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	dfffffff 	.word	0xdfffffff

08004c08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2284      	movs	r2, #132	@ 0x84
 8004c16:	5c9b      	ldrb	r3, [r3, r2]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e02e      	b.n	8004c7e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2284      	movs	r2, #132	@ 0x84
 8004c24:	2101      	movs	r1, #1
 8004c26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2288      	movs	r2, #136	@ 0x88
 8004c2c:	2124      	movs	r1, #36	@ 0x24
 8004c2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	438a      	bics	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	08d9      	lsrs	r1, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 f854 	bl	8004d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2288      	movs	r2, #136	@ 0x88
 8004c70:	2120      	movs	r1, #32
 8004c72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2284      	movs	r2, #132	@ 0x84
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b004      	add	sp, #16
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2284      	movs	r2, #132	@ 0x84
 8004c96:	5c9b      	ldrb	r3, [r3, r2]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e02f      	b.n	8004d00 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2284      	movs	r2, #132	@ 0x84
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2288      	movs	r2, #136	@ 0x88
 8004cac:	2124      	movs	r1, #36	@ 0x24
 8004cae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f813 	bl	8004d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2288      	movs	r2, #136	@ 0x88
 8004cf2:	2120      	movs	r1, #32
 8004cf4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2284      	movs	r2, #132	@ 0x84
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b004      	add	sp, #16
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	f1ffffff 	.word	0xf1ffffff

08004d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	226a      	movs	r2, #106	@ 0x6a
 8004d20:	2101      	movs	r1, #1
 8004d22:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2268      	movs	r2, #104	@ 0x68
 8004d28:	2101      	movs	r1, #1
 8004d2a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d2c:	e043      	b.n	8004db6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d2e:	260f      	movs	r6, #15
 8004d30:	19bb      	adds	r3, r7, r6
 8004d32:	2208      	movs	r2, #8
 8004d34:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d36:	200e      	movs	r0, #14
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	0e5b      	lsrs	r3, r3, #25
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	240d      	movs	r4, #13
 8004d4a:	193b      	adds	r3, r7, r4
 8004d4c:	2107      	movs	r1, #7
 8004d4e:	400a      	ands	r2, r1
 8004d50:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	0f5b      	lsrs	r3, r3, #29
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	250c      	movs	r5, #12
 8004d5e:	197b      	adds	r3, r7, r5
 8004d60:	2107      	movs	r1, #7
 8004d62:	400a      	ands	r2, r1
 8004d64:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d66:	183b      	adds	r3, r7, r0
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	197a      	adds	r2, r7, r5
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	4914      	ldr	r1, [pc, #80]	@ (8004dc0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d70:	5c8a      	ldrb	r2, [r1, r2]
 8004d72:	435a      	muls	r2, r3
 8004d74:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d76:	197b      	adds	r3, r7, r5
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d7e:	0019      	movs	r1, r3
 8004d80:	f7fb fa4c 	bl	800021c <__divsi3>
 8004d84:	0003      	movs	r3, r0
 8004d86:	b299      	uxth	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	226a      	movs	r2, #106	@ 0x6a
 8004d8c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d8e:	19bb      	adds	r3, r7, r6
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	193a      	adds	r2, r7, r4
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	490a      	ldr	r1, [pc, #40]	@ (8004dc0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d98:	5c8a      	ldrb	r2, [r1, r2]
 8004d9a:	435a      	muls	r2, r3
 8004d9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004da6:	0019      	movs	r1, r3
 8004da8:	f7fb fa38 	bl	800021c <__divsi3>
 8004dac:	0003      	movs	r3, r0
 8004dae:	b299      	uxth	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2268      	movs	r2, #104	@ 0x68
 8004db4:	5299      	strh	r1, [r3, r2]
}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b005      	add	sp, #20
 8004dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	08004f70 	.word	0x08004f70
 8004dc4:	08004f78 	.word	0x08004f78

08004dc8 <memset>:
 8004dc8:	0003      	movs	r3, r0
 8004dca:	1882      	adds	r2, r0, r2
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <memset+0xa>
 8004dd0:	4770      	bx	lr
 8004dd2:	7019      	strb	r1, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	e7f9      	b.n	8004dcc <memset+0x4>

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	2600      	movs	r6, #0
 8004ddc:	4c0c      	ldr	r4, [pc, #48]	@ (8004e10 <__libc_init_array+0x38>)
 8004dde:	4d0d      	ldr	r5, [pc, #52]	@ (8004e14 <__libc_init_array+0x3c>)
 8004de0:	1b64      	subs	r4, r4, r5
 8004de2:	10a4      	asrs	r4, r4, #2
 8004de4:	42a6      	cmp	r6, r4
 8004de6:	d109      	bne.n	8004dfc <__libc_init_array+0x24>
 8004de8:	2600      	movs	r6, #0
 8004dea:	f000 f819 	bl	8004e20 <_init>
 8004dee:	4c0a      	ldr	r4, [pc, #40]	@ (8004e18 <__libc_init_array+0x40>)
 8004df0:	4d0a      	ldr	r5, [pc, #40]	@ (8004e1c <__libc_init_array+0x44>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	42a6      	cmp	r6, r4
 8004df8:	d105      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	00b3      	lsls	r3, r6, #2
 8004dfe:	58eb      	ldr	r3, [r5, r3]
 8004e00:	4798      	blx	r3
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7ee      	b.n	8004de4 <__libc_init_array+0xc>
 8004e06:	00b3      	lsls	r3, r6, #2
 8004e08:	58eb      	ldr	r3, [r5, r3]
 8004e0a:	4798      	blx	r3
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	e7f2      	b.n	8004df6 <__libc_init_array+0x1e>
 8004e10:	08004f88 	.word	0x08004f88
 8004e14:	08004f88 	.word	0x08004f88
 8004e18:	08004f8c 	.word	0x08004f8c
 8004e1c:	08004f88 	.word	0x08004f88

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
