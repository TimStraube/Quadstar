
Flightcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002520  08002520  00003520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002530  08002530  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002530  08002530  00003530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002538  08002538  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002538  08002538  00003538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800253c  0800253c  0000353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002540  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800254c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800254c  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008269  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fd  00000000  00000000  0000c2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073b  00000000  00000000  0000e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150d7  00000000  00000000  0000e843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098bc  00000000  00000000  0002391a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d77  00000000  00000000  0002d1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4f4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002714  00000000  00000000  000b4f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b76a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002508 	.word	0x08002508

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002508 	.word	0x08002508

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa76 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f836 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f962 	bl	800079c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004d8:	f000 f89c 	bl	8000614 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	4817      	ldr	r0, [pc, #92]	@ (800053c <main+0x74>)
 80004e0:	f001 fa14 	bl	800190c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004e4:	2104      	movs	r1, #4
 80004e6:	4815      	ldr	r0, [pc, #84]	@ (800053c <main+0x74>)
 80004e8:	f001 fa10 	bl	800190c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004ec:	2108      	movs	r1, #8
 80004ee:	4813      	ldr	r0, [pc, #76]	@ (800053c <main+0x74>)
 80004f0:	f001 fa0c 	bl	800190c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80004f4:	210c      	movs	r1, #12
 80004f6:	4811      	ldr	r0, [pc, #68]	@ (800053c <main+0x74>)
 80004f8:	f001 fa08 	bl	800190c <HAL_TIM_PWM_Start>


	__HAL_TIM_SET_AUTORELOAD(&htim1, 2041 - 1); // ARR = 2041
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <main+0x74>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
 8000504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000506:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <main+0x74>)
 8000508:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
 800050c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1060); // Arm the ESC
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <main+0x74>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f240 4224 	movw	r2, #1060	@ 0x424
 8000516:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1060); // Arm the ESC
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <main+0x74>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f240 4224 	movw	r2, #1060	@ 0x424
 8000520:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1060); // Arm the ESC
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <main+0x74>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f240 4224 	movw	r2, #1060	@ 0x424
 800052a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1060); // Arm the ESC
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <main+0x74>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f240 4224 	movw	r2, #1060	@ 0x424
 8000534:	641a      	str	r2, [r3, #64]	@ 0x40
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80); // Disarm the ESC
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x6e>
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 ffae 	bl	80024b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005b4:	2340      	movs	r3, #64	@ 0x40
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fcd5 	bl	8000f74 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d0:	f000 f8fe 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ff36 	bl	8001464 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fe:	f000 f8e7 	bl	80007d0 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	@ 0x58
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2220      	movs	r2, #32
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 ff2f 	bl	80024b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000652:	4b50      	ldr	r3, [pc, #320]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000654:	4a50      	ldr	r2, [pc, #320]	@ (8000798 <MX_TIM1_Init+0x184>)
 8000656:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000658:	4b4e      	ldr	r3, [pc, #312]	@ (8000794 <MX_TIM1_Init+0x180>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b4d      	ldr	r3, [pc, #308]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000664:	4b4b      	ldr	r3, [pc, #300]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800066a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b49      	ldr	r3, [pc, #292]	@ (8000794 <MX_TIM1_Init+0x180>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000672:	4b48      	ldr	r3, [pc, #288]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <MX_TIM1_Init+0x180>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800067e:	4845      	ldr	r0, [pc, #276]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000680:	f001 f89c 	bl	80017bc <HAL_TIM_Base_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800068a:	f000 f8a1 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000694:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000698:	4619      	mov	r1, r3
 800069a:	483e      	ldr	r0, [pc, #248]	@ (8000794 <MX_TIM1_Init+0x180>)
 800069c:	f001 faa8 	bl	8001bf0 <HAL_TIM_ConfigClockSource>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006a6:	f000 f893 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006aa:	483a      	ldr	r0, [pc, #232]	@ (8000794 <MX_TIM1_Init+0x180>)
 80006ac:	f001 f8d5 	bl	800185a <HAL_TIM_PWM_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006b6:	f000 f88b 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006c6:	4619      	mov	r1, r3
 80006c8:	4832      	ldr	r0, [pc, #200]	@ (8000794 <MX_TIM1_Init+0x180>)
 80006ca:	f001 fe31 	bl	8002330 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006d4:	f000 f87c 	bl	80007d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f8:	2200      	movs	r2, #0
 80006fa:	4619      	mov	r1, r3
 80006fc:	4825      	ldr	r0, [pc, #148]	@ (8000794 <MX_TIM1_Init+0x180>)
 80006fe:	f001 f9b5 	bl	8001a6c <HAL_TIM_PWM_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000708:	f000 f862 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	2204      	movs	r2, #4
 8000712:	4619      	mov	r1, r3
 8000714:	481f      	ldr	r0, [pc, #124]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000716:	f001 f9a9 	bl	8001a6c <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000720:	f000 f856 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	2208      	movs	r2, #8
 800072a:	4619      	mov	r1, r3
 800072c:	4819      	ldr	r0, [pc, #100]	@ (8000794 <MX_TIM1_Init+0x180>)
 800072e:	f001 f99d 	bl	8001a6c <HAL_TIM_PWM_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000738:	f000 f84a 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	220c      	movs	r2, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4813      	ldr	r0, [pc, #76]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000746:	f001 f991 	bl	8001a6c <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000750:	f000 f83e 	bl	80007d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4807      	ldr	r0, [pc, #28]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000778:	f001 fe48 	bl	800240c <HAL_TIMEx_ConfigBreakDeadTime>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000782:	f000 f825 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000786:	4803      	ldr	r0, [pc, #12]	@ (8000794 <MX_TIM1_Init+0x180>)
 8000788:	f000 f872 	bl	8000870 <HAL_TIM_MspPostInit>

}
 800078c:	bf00      	nop
 800078e:	3758      	adds	r7, #88	@ 0x58
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000028 	.word	0x20000028
 8000798:	40010000 	.word	0x40010000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_GPIO_Init+0x30>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <MX_GPIO_Init+0x30>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_GPIO_Init+0x30>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	@ 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <HAL_TIM_Base_MspInit+0x3c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10d      	bne.n	800085a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <HAL_TIM_Base_MspInit+0x40>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a09      	ldr	r2, [pc, #36]	@ (800086c <HAL_TIM_Base_MspInit+0x40>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <HAL_TIM_Base_MspInit+0x40>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40010000 	.word	0x40010000
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <HAL_TIM_MspPostInit+0x68>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d11e      	bne.n	80008d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_TIM_MspPostInit+0x6c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_TIM_MspPostInit+0x6c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_TIM_MspPostInit+0x6c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008ae:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <HAL_TIM_MspPostInit+0x70>)
 80008cc:	f000 f9ce 	bl	8000c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40010000 	.word	0x40010000
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f891 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096c:	f7ff ffea 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 fd93 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fd95 	bl	80004c8 <main>
  bx  lr    
 800099e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ac:	08002540 	.word	0x08002540
  ldr r2, =_sbss
 80009b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b4:	20000074 	.word	0x20000074

080009b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <HAL_Init+0x40>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_Init+0x40>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <HAL_Init+0x40>)
 80009de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f90d 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fef4 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f917 	bl	8000c52 <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a3c:	f000 f8ed 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000070 	.word	0x20000070

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000070 	.word	0x20000070

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff47 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff5c 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffb0 	bl	8000bc0 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	e159      	b.n	8000f3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f040 8148 	bne.w	8000f36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d005      	beq.n	8000cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d130      	bne.n	8000d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	f003 0201 	and.w	r2, r3, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d017      	beq.n	8000d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d123      	bne.n	8000db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	69b9      	ldr	r1, [r7, #24]
 8000dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0203 	and.w	r2, r3, #3
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a2 	beq.w	8000f36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b57      	ldr	r3, [pc, #348]	@ (8000f54 <HAL_GPIO_Init+0x2e8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	4a56      	ldr	r2, [pc, #344]	@ (8000f54 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e02:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <HAL_GPIO_Init+0x2e8>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0e:	4a52      	ldr	r2, [pc, #328]	@ (8000f58 <HAL_GPIO_Init+0x2ec>)
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3302      	adds	r3, #2
 8000e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a49      	ldr	r2, [pc, #292]	@ (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x202>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a48      	ldr	r2, [pc, #288]	@ (8000f60 <HAL_GPIO_Init+0x2f4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x1fe>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a47      	ldr	r2, [pc, #284]	@ (8000f64 <HAL_GPIO_Init+0x2f8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x1fa>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a46      	ldr	r2, [pc, #280]	@ (8000f68 <HAL_GPIO_Init+0x2fc>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x1f6>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a45      	ldr	r2, [pc, #276]	@ (8000f6c <HAL_GPIO_Init+0x300>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x1f2>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e008      	b.n	8000e70 <HAL_GPIO_Init+0x204>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x204>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x204>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x204>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x204>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	f002 0203 	and.w	r2, r2, #3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e80:	4935      	ldr	r1, [pc, #212]	@ (8000f58 <HAL_GPIO_Init+0x2ec>)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000edc:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee2:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f06:	4a1a      	ldr	r2, [pc, #104]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f30:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_GPIO_Init+0x304>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	f67f aea2 	bls.w	8000c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e267      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d075      	beq.n	800107e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f92:	4b88      	ldr	r3, [pc, #544]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d00c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9e:	4b85      	ldr	r3, [pc, #532]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d112      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000faa:	4b82      	ldr	r3, [pc, #520]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d05b      	beq.n	800107c <HAL_RCC_OscConfig+0x108>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d157      	bne.n	800107c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e242      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd8:	d106      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x74>
 8000fda:	4b76      	ldr	r3, [pc, #472]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a75      	ldr	r2, [pc, #468]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e01d      	b.n	8001024 <HAL_RCC_OscConfig+0xb0>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x98>
 8000ff2:	4b70      	ldr	r3, [pc, #448]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6f      	ldr	r2, [pc, #444]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6c      	ldr	r2, [pc, #432]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xb0>
 800100c:	4b69      	ldr	r3, [pc, #420]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a68      	ldr	r2, [pc, #416]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b66      	ldr	r3, [pc, #408]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a65      	ldr	r2, [pc, #404]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fd2c 	bl	8000a88 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fd28 	bl	8000a88 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	@ 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e207      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xc0>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fd18 	bl	8000a88 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fd14 	bl	8000a88 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	@ 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1f3      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0xe8>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d063      	beq.n	8001152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800108a:	4b4a      	ldr	r3, [pc, #296]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001096:	4b47      	ldr	r3, [pc, #284]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d11c      	bne.n	80010dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a2:	4b44      	ldr	r3, [pc, #272]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d116      	bne.n	80010dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	4b41      	ldr	r3, [pc, #260]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x152>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e1c7      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b3b      	ldr	r3, [pc, #236]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4937      	ldr	r1, [pc, #220]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	e03a      	b.n	8001152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e4:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <HAL_RCC_OscConfig+0x244>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff fccd 	bl	8000a88 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fcc9 	bl	8000a88 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e1a8      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4925      	ldr	r1, [pc, #148]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_RCC_OscConfig+0x244>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fcac 	bl	8000a88 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff fca8 	bl	8000a88 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e187      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d036      	beq.n	80011cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_RCC_OscConfig+0x248>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fc8c 	bl	8000a88 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fc88 	bl	8000a88 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e167      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x200>
 8001192:	e01b      	b.n	80011cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_RCC_OscConfig+0x248>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fc75 	bl	8000a88 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	e00e      	b.n	80011c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fc71 	bl	8000a88 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d907      	bls.n	80011c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e150      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
 80011b4:	40023800 	.word	0x40023800
 80011b8:	42470000 	.word	0x42470000
 80011bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	4b88      	ldr	r3, [pc, #544]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ea      	bne.n	80011a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 8097 	beq.w	8001308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011de:	4b81      	ldr	r3, [pc, #516]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b7d      	ldr	r3, [pc, #500]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a7c      	ldr	r2, [pc, #496]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b7a      	ldr	r3, [pc, #488]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b77      	ldr	r3, [pc, #476]	@ (80013e8 <HAL_RCC_OscConfig+0x474>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001216:	4b74      	ldr	r3, [pc, #464]	@ (80013e8 <HAL_RCC_OscConfig+0x474>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a73      	ldr	r2, [pc, #460]	@ (80013e8 <HAL_RCC_OscConfig+0x474>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001222:	f7ff fc31 	bl	8000a88 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff fc2d 	bl	8000a88 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e10c      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	4b6a      	ldr	r3, [pc, #424]	@ (80013e8 <HAL_RCC_OscConfig+0x474>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x2ea>
 8001250:	4b64      	ldr	r3, [pc, #400]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001254:	4a63      	ldr	r2, [pc, #396]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6713      	str	r3, [r2, #112]	@ 0x70
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x324>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b05      	cmp	r3, #5
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x30c>
 8001266:	4b5f      	ldr	r3, [pc, #380]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126a:	4a5e      	ldr	r2, [pc, #376]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6713      	str	r3, [r2, #112]	@ 0x70
 8001272:	4b5c      	ldr	r3, [pc, #368]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001276:	4a5b      	ldr	r2, [pc, #364]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6713      	str	r3, [r2, #112]	@ 0x70
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0x324>
 8001280:	4b58      	ldr	r3, [pc, #352]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001284:	4a57      	ldr	r2, [pc, #348]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	6713      	str	r3, [r2, #112]	@ 0x70
 800128c:	4b55      	ldr	r3, [pc, #340]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 800128e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001290:	4a54      	ldr	r2, [pc, #336]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001292:	f023 0304 	bic.w	r3, r3, #4
 8001296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d015      	beq.n	80012cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbf2 	bl	8000a88 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	e00a      	b.n	80012be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a8:	f7ff fbee 	bl	8000a88 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0cb      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012be:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0ee      	beq.n	80012a8 <HAL_RCC_OscConfig+0x334>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fbdc 	bl	8000a88 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fbd8 	bl	8000a88 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0b5      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ea:	4b3e      	ldr	r3, [pc, #248]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ee      	bne.n	80012d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fc:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	4a38      	ldr	r2, [pc, #224]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a1 	beq.w	8001454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d05c      	beq.n	80013d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d141      	bne.n	80013aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <HAL_RCC_OscConfig+0x478>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fbac 	bl	8000a88 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fba8 	bl	8000a88 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e087      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	019b      	lsls	r3, r3, #6
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	3b01      	subs	r3, #1
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	491b      	ldr	r1, [pc, #108]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_RCC_OscConfig+0x478>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fb81 	bl	8000a88 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff fb7d 	bl	8000a88 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e05c      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x416>
 80013a8:	e054      	b.n	8001454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_RCC_OscConfig+0x478>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb6a 	bl	8000a88 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fb66 	bl	8000a88 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e045      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x444>
 80013d6:	e03d      	b.n	8001454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e038      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000
 80013ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_RCC_OscConfig+0x4ec>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d028      	beq.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d121      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d11a      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001420:	4013      	ands	r3, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001428:	4293      	cmp	r3, r2
 800142a:	d111      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	3b01      	subs	r3, #1
 800143a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0cc      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b68      	ldr	r3, [pc, #416]	@ (800161c <HAL_RCC_ClockConfig+0x1b8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d90c      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b65      	ldr	r3, [pc, #404]	@ (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b63      	ldr	r3, [pc, #396]	@ (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0b8      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b8:	4b59      	ldr	r3, [pc, #356]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a58      	ldr	r2, [pc, #352]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d0:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a52      	ldr	r2, [pc, #328]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b50      	ldr	r3, [pc, #320]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	494d      	ldr	r1, [pc, #308]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d044      	beq.n	8001584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d119      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d003      	beq.n	8001522 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151e:	2b03      	cmp	r3, #3
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001522:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e067      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4934      	ldr	r1, [pc, #208]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff fa98 	bl	8000a88 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff fa94 	bl	8000a88 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e04f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 020c 	and.w	r2, r3, #12
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d1eb      	bne.n	800155c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d20c      	bcs.n	80015ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e032      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4916      	ldr	r1, [pc, #88]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	490e      	ldr	r1, [pc, #56]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ea:	f000 f821 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	490a      	ldr	r1, [pc, #40]	@ (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a09      	ldr	r2, [pc, #36]	@ (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_RCC_ClockConfig+0x1c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f9f8 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00
 8001620:	40023800 	.word	0x40023800
 8001624:	08002520 	.word	0x08002520
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001634:	b090      	sub	sp, #64	@ 0x40
 8001636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001648:	4b59      	ldr	r3, [pc, #356]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d00d      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x40>
 8001654:	2b08      	cmp	r3, #8
 8001656:	f200 80a1 	bhi.w	800179c <HAL_RCC_GetSysClockFreq+0x16c>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x34>
 800165e:	2b04      	cmp	r3, #4
 8001660:	d003      	beq.n	800166a <HAL_RCC_GetSysClockFreq+0x3a>
 8001662:	e09b      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b53      	ldr	r3, [pc, #332]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001668:	e09b      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800166a:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800166e:	e098      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001670:	4b4f      	ldr	r3, [pc, #316]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800167a:	4b4d      	ldr	r3, [pc, #308]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d028      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	2200      	movs	r2, #0
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	627a      	str	r2, [r7, #36]	@ 0x24
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001698:	2100      	movs	r1, #0
 800169a:	4b47      	ldr	r3, [pc, #284]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800169c:	fb03 f201 	mul.w	r2, r3, r1
 80016a0:	2300      	movs	r3, #0
 80016a2:	fb00 f303 	mul.w	r3, r0, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	4a43      	ldr	r2, [pc, #268]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016aa:	fba0 1202 	umull	r1, r2, r0, r2
 80016ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016b0:	460a      	mov	r2, r1
 80016b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b6:	4413      	add	r3, r2
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016bc:	2200      	movs	r2, #0
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	61fa      	str	r2, [r7, #28]
 80016c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016ca:	f7fe fd85 	bl	80001d8 <__aeabi_uldivmod>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4613      	mov	r3, r2
 80016d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016d6:	e053      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	2200      	movs	r2, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	617a      	str	r2, [r7, #20]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016ea:	f04f 0b00 	mov.w	fp, #0
 80016ee:	4652      	mov	r2, sl
 80016f0:	465b      	mov	r3, fp
 80016f2:	f04f 0000 	mov.w	r0, #0
 80016f6:	f04f 0100 	mov.w	r1, #0
 80016fa:	0159      	lsls	r1, r3, #5
 80016fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001700:	0150      	lsls	r0, r2, #5
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ebb2 080a 	subs.w	r8, r2, sl
 800170a:	eb63 090b 	sbc.w	r9, r3, fp
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800171a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800171e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001722:	ebb2 0408 	subs.w	r4, r2, r8
 8001726:	eb63 0509 	sbc.w	r5, r3, r9
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	00eb      	lsls	r3, r5, #3
 8001734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001738:	00e2      	lsls	r2, r4, #3
 800173a:	4614      	mov	r4, r2
 800173c:	461d      	mov	r5, r3
 800173e:	eb14 030a 	adds.w	r3, r4, sl
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	eb45 030b 	adc.w	r3, r5, fp
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001756:	4629      	mov	r1, r5
 8001758:	028b      	lsls	r3, r1, #10
 800175a:	4621      	mov	r1, r4
 800175c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001760:	4621      	mov	r1, r4
 8001762:	028a      	lsls	r2, r1, #10
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800176a:	2200      	movs	r2, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	60fa      	str	r2, [r7, #12]
 8001770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001774:	f7fe fd30 	bl	80001d8 <__aeabi_uldivmod>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4613      	mov	r3, r2
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	3301      	adds	r3, #1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800179a:	e002      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800179e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3740      	adds	r7, #64	@ 0x40
 80017a8:	46bd      	mov	sp, r7
 80017aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	00f42400 	.word	0x00f42400
 80017b8:	017d7840 	.word	0x017d7840

080017bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e041      	b.n	8001852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff f822 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 fac0 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e041      	b.n	80018f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d106      	bne.n	8001886 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f839 	bl	80018f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4610      	mov	r0, r2
 800189a:	f000 fa71 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_TIM_PWM_Start+0x24>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e022      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b04      	cmp	r3, #4
 8001934:	d109      	bne.n	800194a <HAL_TIM_PWM_Start+0x3e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	e015      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d109      	bne.n	8001964 <HAL_TIM_PWM_Start+0x58>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e008      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e068      	b.n	8001a50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d104      	bne.n	800198e <HAL_TIM_PWM_Start+0x82>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800198c:	e013      	b.n	80019b6 <HAL_TIM_PWM_Start+0xaa>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d104      	bne.n	800199e <HAL_TIM_PWM_Start+0x92>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800199c:	e00b      	b.n	80019b6 <HAL_TIM_PWM_Start+0xaa>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d104      	bne.n	80019ae <HAL_TIM_PWM_Start+0xa2>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019ac:	e003      	b.n	80019b6 <HAL_TIM_PWM_Start+0xaa>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fc90 	bl	80022e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <HAL_TIM_PWM_Start+0x14c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d107      	bne.n	80019de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <HAL_TIM_PWM_Start+0x14c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d018      	beq.n	8001a1a <HAL_TIM_PWM_Start+0x10e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f0:	d013      	beq.n	8001a1a <HAL_TIM_PWM_Start+0x10e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <HAL_TIM_PWM_Start+0x150>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00e      	beq.n	8001a1a <HAL_TIM_PWM_Start+0x10e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a17      	ldr	r2, [pc, #92]	@ (8001a60 <HAL_TIM_PWM_Start+0x154>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_TIM_PWM_Start+0x10e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_TIM_PWM_Start+0x158>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_TIM_PWM_Start+0x10e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <HAL_TIM_PWM_Start+0x15c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d111      	bne.n	8001a3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d010      	beq.n	8001a4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3c:	e007      	b.n	8001a4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40000800 	.word	0x40000800
 8001a64:	40000c00 	.word	0x40000c00
 8001a68:	40014000 	.word	0x40014000

08001a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0ae      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f200 809f 	bhi.w	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ad5 	.word	0x08001ad5
 8001aa4:	08001bd9 	.word	0x08001bd9
 8001aa8:	08001bd9 	.word	0x08001bd9
 8001aac:	08001bd9 	.word	0x08001bd9
 8001ab0:	08001b15 	.word	0x08001b15
 8001ab4:	08001bd9 	.word	0x08001bd9
 8001ab8:	08001bd9 	.word	0x08001bd9
 8001abc:	08001bd9 	.word	0x08001bd9
 8001ac0:	08001b57 	.word	0x08001b57
 8001ac4:	08001bd9 	.word	0x08001bd9
 8001ac8:	08001bd9 	.word	0x08001bd9
 8001acc:	08001bd9 	.word	0x08001bd9
 8001ad0:	08001b97 	.word	0x08001b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9dc 	bl	8001e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	619a      	str	r2, [r3, #24]
      break;
 8001b12:	e064      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fa22 	bl	8001f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6999      	ldr	r1, [r3, #24]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	619a      	str	r2, [r3, #24]
      break;
 8001b54:	e043      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa6d 	bl	800203c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0208 	orr.w	r2, r2, #8
 8001b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0204 	bic.w	r2, r2, #4
 8001b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	61da      	str	r2, [r3, #28]
      break;
 8001b94:	e023      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fab7 	bl	8002110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69d9      	ldr	r1, [r3, #28]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	021a      	lsls	r2, r3, #8
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
      break;
 8001bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_ConfigClockSource+0x1c>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0b4      	b.n	8001d76 <HAL_TIM_ConfigClockSource+0x186>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c44:	d03e      	beq.n	8001cc4 <HAL_TIM_ConfigClockSource+0xd4>
 8001c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c4a:	f200 8087 	bhi.w	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c52:	f000 8086 	beq.w	8001d62 <HAL_TIM_ConfigClockSource+0x172>
 8001c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c5a:	d87f      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c5c:	2b70      	cmp	r3, #112	@ 0x70
 8001c5e:	d01a      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0xa6>
 8001c60:	2b70      	cmp	r3, #112	@ 0x70
 8001c62:	d87b      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c64:	2b60      	cmp	r3, #96	@ 0x60
 8001c66:	d050      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0x11a>
 8001c68:	2b60      	cmp	r3, #96	@ 0x60
 8001c6a:	d877      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c6c:	2b50      	cmp	r3, #80	@ 0x50
 8001c6e:	d03c      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0xfa>
 8001c70:	2b50      	cmp	r3, #80	@ 0x50
 8001c72:	d873      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d058      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0x13a>
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d86f      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c7c:	2b30      	cmp	r3, #48	@ 0x30
 8001c7e:	d064      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c80:	2b30      	cmp	r3, #48	@ 0x30
 8001c82:	d86b      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d060      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d867      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05c      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d05a      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c94:	e062      	b.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ca6:	f000 fafd 	bl	80022a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	609a      	str	r2, [r3, #8]
      break;
 8001cc2:	e04f      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cd4:	f000 fae6 	bl	80022a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ce6:	609a      	str	r2, [r3, #8]
      break;
 8001ce8:	e03c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f000 fa5a 	bl	80021b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2150      	movs	r1, #80	@ 0x50
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fab3 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 8001d08:	e02c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d16:	461a      	mov	r2, r3
 8001d18:	f000 fa79 	bl	800220e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2160      	movs	r1, #96	@ 0x60
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 faa3 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 8001d28:	e01c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d36:	461a      	mov	r2, r3
 8001d38:	f000 fa3a 	bl	80021b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2140      	movs	r1, #64	@ 0x40
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fa93 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 8001d48:	e00c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f000 fa8a 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 8001d5a:	e003      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d60:	e000      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3a      	ldr	r2, [pc, #232]	@ (8001e7c <TIM_Base_SetConfig+0xfc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00f      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9e:	d00b      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a37      	ldr	r2, [pc, #220]	@ (8001e80 <TIM_Base_SetConfig+0x100>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a36      	ldr	r2, [pc, #216]	@ (8001e84 <TIM_Base_SetConfig+0x104>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a35      	ldr	r2, [pc, #212]	@ (8001e88 <TIM_Base_SetConfig+0x108>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <TIM_Base_SetConfig+0xfc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01b      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd8:	d017      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a28      	ldr	r2, [pc, #160]	@ (8001e80 <TIM_Base_SetConfig+0x100>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a27      	ldr	r2, [pc, #156]	@ (8001e84 <TIM_Base_SetConfig+0x104>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00f      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <TIM_Base_SetConfig+0x108>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00b      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a25      	ldr	r2, [pc, #148]	@ (8001e8c <TIM_Base_SetConfig+0x10c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <TIM_Base_SetConfig+0x110>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <TIM_Base_SetConfig+0x114>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d108      	bne.n	8001e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0e      	ldr	r2, [pc, #56]	@ (8001e7c <TIM_Base_SetConfig+0xfc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d103      	bne.n	8001e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f023 0201 	bic.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40000c00 	.word	0x40000c00
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800

08001e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f023 0201 	bic.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	@ (8001f60 <TIM_OC1_SetConfig+0xc8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d10c      	bne.n	8001f0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 0308 	bic.w	r3, r3, #8
 8001efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <TIM_OC1_SetConfig+0xc8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d111      	bne.n	8001f3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	621a      	str	r2, [r3, #32]
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40010000 	.word	0x40010000

08001f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f023 0210 	bic.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f023 0320 	bic.w	r3, r3, #32
 8001fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <TIM_OC2_SetConfig+0xd4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d10d      	bne.n	8001fe0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a15      	ldr	r2, [pc, #84]	@ (8002038 <TIM_OC2_SetConfig+0xd4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d113      	bne.n	8002010 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	621a      	str	r2, [r3, #32]
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000

0800203c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <TIM_OC3_SetConfig+0xd0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10d      	bne.n	80020b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <TIM_OC3_SetConfig+0xd0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d113      	bne.n	80020e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	621a      	str	r2, [r3, #32]
}
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40010000 	.word	0x40010000

08002110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800213e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800215a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	031b      	lsls	r3, r3, #12
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <TIM_OC4_SetConfig+0x9c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d109      	bne.n	8002184 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	621a      	str	r2, [r3, #32]
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000

080021b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f023 0201 	bic.w	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f023 030a 	bic.w	r3, r3, #10
 80021ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	621a      	str	r2, [r3, #32]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800220e:	b480      	push	{r7}
 8002210:	b087      	sub	sp, #28
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 0210 	bic.w	r2, r3, #16
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	031b      	lsls	r3, r3, #12
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800224a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	621a      	str	r2, [r3, #32]
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	f043 0307 	orr.w	r3, r3, #7
 8002290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2201      	movs	r2, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002344:	2302      	movs	r3, #2
 8002346:	e050      	b.n	80023ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d018      	beq.n	80023be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002394:	d013      	beq.n	80023be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a18      	ldr	r2, [pc, #96]	@ (80023fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00e      	beq.n	80023be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a13      	ldr	r2, [pc, #76]	@ (8002408 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10c      	bne.n	80023d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40014000 	.word	0x40014000

0800240c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e03d      	b.n	80024a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <memset>:
 80024b0:	4402      	add	r2, r0
 80024b2:	4603      	mov	r3, r0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d100      	bne.n	80024ba <memset+0xa>
 80024b8:	4770      	bx	lr
 80024ba:	f803 1b01 	strb.w	r1, [r3], #1
 80024be:	e7f9      	b.n	80024b4 <memset+0x4>

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	4d0d      	ldr	r5, [pc, #52]	@ (80024f8 <__libc_init_array+0x38>)
 80024c4:	4c0d      	ldr	r4, [pc, #52]	@ (80024fc <__libc_init_array+0x3c>)
 80024c6:	1b64      	subs	r4, r4, r5
 80024c8:	10a4      	asrs	r4, r4, #2
 80024ca:	2600      	movs	r6, #0
 80024cc:	42a6      	cmp	r6, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002500 <__libc_init_array+0x40>)
 80024d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002504 <__libc_init_array+0x44>)
 80024d4:	f000 f818 	bl	8002508 <_init>
 80024d8:	1b64      	subs	r4, r4, r5
 80024da:	10a4      	asrs	r4, r4, #2
 80024dc:	2600      	movs	r6, #0
 80024de:	42a6      	cmp	r6, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e8:	4798      	blx	r3
 80024ea:	3601      	adds	r6, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f2:	4798      	blx	r3
 80024f4:	3601      	adds	r6, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	08002538 	.word	0x08002538
 80024fc:	08002538 	.word	0x08002538
 8002500:	08002538 	.word	0x08002538
 8002504:	0800253c 	.word	0x0800253c

08002508 <_init>:
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	bf00      	nop
 800250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250e:	bc08      	pop	{r3}
 8002510:	469e      	mov	lr, r3
 8002512:	4770      	bx	lr

08002514 <_fini>:
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	bf00      	nop
 8002518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251a:	bc08      	pop	{r3}
 800251c:	469e      	mov	lr, r3
 800251e:	4770      	bx	lr
