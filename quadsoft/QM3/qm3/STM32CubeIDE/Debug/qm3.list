
qm3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0ec  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800a2c4  0800a2c4  0000b2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a708  0800a708  0000c50c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a710  0800a710  0000c50c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a710  0800a710  0000b710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a714  0800a714  0000b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000050c  20000000  0800a718  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001698  2000050c  0800ac24  0000c50c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ba4  0800ac24  0000cba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c50c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004acde  00000000  00000000  0000c53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000073  00000000  00000000  0005721a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004c6d2  00000000  00000000  0005728d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000090f3  00000000  00000000  000a395f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021e0  00000000  00000000  000aca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001095d8  00000000  00000000  000aec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003855  00000000  00000000  001b8210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001dcf9  00000000  00000000  001bba65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002d8c7  00000000  00000000  001d975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00207025  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005928  00000000  00000000  00207068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000050c 	.word	0x2000050c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a2ac 	.word	0x0800a2ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000510 	.word	0x20000510
 8000214:	0800a2ac 	.word	0x0800a2ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490e      	ldr	r1, [pc, #56]	@ (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0b      	ldr	r4, [pc, #44]	@ (8000554 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000532:	f004 f905 	bl	8004740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f009 fe87 	bl	800a248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053a:	f000 fba7 	bl	8000c8c <main>

0800053e <LoopForever>:

LoopForever:
    b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	2000050c 	.word	0x2000050c
  ldr r2, =_sidata
 800054c:	0800a718 	.word	0x0800a718
  ldr r2, =_sbss
 8000550:	2000050c 	.word	0x2000050c
  ldr r4, =_ebss
 8000554:	20001ba4 	.word	0x20001ba4

08000558 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <BusFault_Handler>
	...

0800055c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000560:	6940      	ldr	r0, [r0, #20]
 8000562:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000564:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000566:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000568:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800056a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800056e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000572:	6960      	ldr	r0, [r4, #20]
 8000574:	f104 011c 	add.w	r1, r4, #28
 8000578:	462b      	mov	r3, r5
 800057a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800057c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000580:	4718      	bx	r3
 8000582:	bf00      	nop

08000584 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000584:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000586:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000588:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800058a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800058e:	4c1e      	ldr	r4, [pc, #120]	@ (8000608 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000590:	01db      	lsls	r3, r3, #7
 8000592:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000596:	784a      	ldrb	r2, [r1, #1]
 8000598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800059c:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800059e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005ac:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005b0:	5ca2      	ldrb	r2, [r4, r2]
 80005b2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005b6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005b8:	5ca2      	ldrb	r2, [r4, r2]
 80005ba:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005be:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005c0:	5ca2      	ldrb	r2, [r4, r2]
 80005c2:	4c12      	ldr	r4, [pc, #72]	@ (800060c <ASPEP_sendBeacon+0x88>)
 80005c4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005c8:	5ca2      	ldrb	r2, [r4, r2]
 80005ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005ce:	f043 0305 	orr.w	r3, r3, #5
 80005d2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005d6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80005d8:	b14b      	cbz	r3, 80005ee <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005dc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80005e0:	b913      	cbnz	r3, 80005e8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80005e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ec:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ee:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005f2:	2303      	movs	r3, #3
 80005f4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005f8:	6481      	str	r1, [r0, #72]	@ 0x48
 80005fa:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005fc:	2204      	movs	r2, #4
 80005fe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000600:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000604:	6940      	ldr	r0, [r0, #20]
 8000606:	4718      	bx	r3
 8000608:	0800a2d4 	.word	0x0800a2d4
 800060c:	0800a2c4 	.word	0x0800a2c4

08000610 <ASPEP_sendPing>:
{
 8000610:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000612:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000614:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000618:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800061c:	4d1d      	ldr	r5, [pc, #116]	@ (8000694 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 800061e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000622:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000626:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800062a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800062e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000632:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000636:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4c16      	ldr	r4, [pc, #88]	@ (8000698 <ASPEP_sendPing+0x88>)
 800063e:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000642:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000646:	5ca2      	ldrb	r2, [r4, r2]
 8000648:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800064c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800064e:	5ca2      	ldrb	r2, [r4, r2]
 8000650:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000654:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000656:	5ca2      	ldrb	r2, [r4, r2]
 8000658:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800065c:	5ceb      	ldrb	r3, [r5, r3]
 800065e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000662:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000666:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000668:	b143      	cbz	r3, 800067c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800066a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800066c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000670:	b913      	cbnz	r3, 8000678 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000672:	2302      	movs	r3, #2
 8000674:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000678:	bc30      	pop	{r4, r5}
 800067a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800067c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000680:	2303      	movs	r3, #3
 8000682:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000686:	6481      	str	r1, [r0, #72]	@ 0x48
 8000688:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800068a:	2204      	movs	r2, #4
 800068c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800068e:	6940      	ldr	r0, [r0, #20]
}
 8000690:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000692:	4718      	bx	r3
 8000694:	0800a2c4 	.word	0x0800a2c4
 8000698:	0800a2d4 	.word	0x0800a2d4

0800069c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 800069c:	2a0a      	cmp	r2, #10
 800069e:	d009      	beq.n	80006b4 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006a0:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d91d      	bls.n	80006e4 <ASPEP_getBuffer+0x48>
 80006a8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d90d      	bls.n	80006cc <ASPEP_getBuffer+0x30>
        result = false;
 80006b0:	2000      	movs	r0, #0
}
 80006b2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006b4:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d8f9      	bhi.n	80006b0 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 80006be:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c0:	3304      	adds	r3, #4
 80006c2:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006c4:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 80006c8:	2001      	movs	r0, #1
 80006ca:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006ce:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006d2:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006d6:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 80006d8:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006dc:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006de:	600b      	str	r3, [r1, #0]
  bool result = true;
 80006e0:	2001      	movs	r0, #1
 80006e2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006e6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006ea:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006ee:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 80006f0:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006f4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006f6:	600b      	str	r3, [r1, #0]
 80006f8:	e7f2      	b.n	80006e0 <ASPEP_getBuffer+0x44>
 80006fa:	bf00      	nop

080006fc <ASPEP_sendPacket>:
{
 80006fc:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006fe:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000702:	2802      	cmp	r0, #2
 8000704:	d001      	beq.n	800070a <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000706:	2002      	movs	r0, #2
 8000708:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800070a:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 800070e:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000712:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000716:	2801      	cmp	r0, #1
 8000718:	d104      	bne.n	8000724 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800071a:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 800071e:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000720:	3202      	adds	r2, #2
 8000722:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000724:	2b0a      	cmp	r3, #10
 8000726:	d105      	bne.n	8000734 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000728:	f89c 0010 	ldrb.w	r0, [ip, #16]
 800072c:	b348      	cbz	r0, 8000782 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800072e:	2000      	movs	r0, #0
 8000730:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000734:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000738:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800073a:	4d34      	ldr	r5, [pc, #208]	@ (800080c <ASPEP_sendPacket+0x110>)
 800073c:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800073e:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000740:	5d2e      	ldrb	r6, [r5, r4]
 8000742:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000746:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000748:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800074c:	5d2e      	ldrb	r6, [r5, r4]
 800074e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000752:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000754:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000756:	5d2c      	ldrb	r4, [r5, r4]
 8000758:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800075c:	406c      	eors	r4, r5
 800075e:	4d2c      	ldr	r5, [pc, #176]	@ (8000810 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000760:	5d2c      	ldrb	r4, [r5, r4]
 8000762:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000766:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800076a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800076c:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000770:	b1b9      	cbz	r1, 80007a2 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000772:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000774:	2b09      	cmp	r3, #9
 8000776:	d006      	beq.n	8000786 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000778:	2b0a      	cmp	r3, #10
 800077a:	d02a      	beq.n	80007d2 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 800077c:	b37b      	cbz	r3, 80007de <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 800077e:	2000      	movs	r0, #0
}
 8000780:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000782:	2001      	movs	r0, #1
}
 8000784:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000786:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800078a:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 800078c:	458e      	cmp	lr, r1
 800078e:	bf14      	ite	ne
 8000790:	2003      	movne	r0, #3
 8000792:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000794:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000798:	b3a1      	cbz	r1, 8000804 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800079a:	2102      	movs	r1, #2
 800079c:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800079e:	809a      	strh	r2, [r3, #4]
}
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	d029      	beq.n	80007fa <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 80007a6:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007a8:	f04f 0303 	mov.w	r3, #3
 80007ac:	bf0b      	itete	eq
 80007ae:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007b2:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007b6:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007ba:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007be:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 80007c2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007c4:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 80007c8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007cc:	4671      	mov	r1, lr
 80007ce:	4798      	blx	r3
 80007d0:	e7d5      	b.n	800077e <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 80007d2:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d009      	beq.n	80007ee <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 80007da:	2003      	movs	r0, #3
}
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 80007de:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f9      	bne.n	80007da <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 80007ec:	e7c7      	b.n	800077e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007f4:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 80007f8:	e7c1      	b.n	800077e <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007fa:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80007fe:	2103      	movs	r1, #3
 8000800:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000802:	e7dc      	b.n	80007be <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000804:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000808:	e7c7      	b.n	800079a <ASPEP_sendPacket+0x9e>
 800080a:	bf00      	nop
 800080c:	0800a2d4 	.word	0x0800a2d4
 8000810:	0800a2c4 	.word	0x0800a2c4

08000814 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000814:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000816:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800081a:	2b03      	cmp	r3, #3
{
 800081c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800081e:	d013      	beq.n	8000848 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000820:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000822:	2100      	movs	r1, #0
 8000824:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000826:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 800082a:	2a02      	cmp	r2, #2
 800082c:	d013      	beq.n	8000856 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800082e:	2b02      	cmp	r3, #2
 8000830:	d11d      	bne.n	800086e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000832:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000836:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000838:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800083a:	2204      	movs	r2, #4
 800083c:	6940      	ldr	r0, [r0, #20]
 800083e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000840:	2303      	movs	r3, #3
 8000842:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000846:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000848:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 800084c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800084e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000850:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000854:	d10b      	bne.n	800086e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000856:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800085a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800085c:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800085e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000860:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000862:	6960      	ldr	r0, [r4, #20]
 8000864:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000866:	2303      	movs	r3, #3
 8000868:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 800086c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800086e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000870:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000872:	b1cb      	cbz	r3, 80008a8 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000874:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000876:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000878:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	889a      	ldrh	r2, [r3, #4]
 800087e:	6960      	ldr	r0, [r4, #20]
 8000880:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000882:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000884:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000888:	2b02      	cmp	r3, #2
 800088a:	d007      	beq.n	800089c <ASPEP_HWDataTransmittedIT+0x88>
 800088c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000890:	2b02      	cmp	r3, #2
 8000892:	d003      	beq.n	800089c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000894:	2300      	movs	r3, #0
 8000896:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000898:	b662      	cpsie	i
}
 800089a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 800089c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800089e:	0063      	lsls	r3, r4, #1
 80008a0:	3368      	adds	r3, #104	@ 0x68
 80008a2:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008a4:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 80008a6:	e7f7      	b.n	8000898 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008a8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80008aa:	e7f5      	b.n	8000898 <ASPEP_HWDataTransmittedIT+0x84>

080008ac <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008ac:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008b0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008b2:	f04f 0c00 	mov.w	ip, #0
{
 80008b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008ba:	4604      	mov	r4, r0
    *packetLength = 0;
 80008bc:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 80008c0:	b1cb      	cbz	r3, 80008f6 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008c2:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008c6:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d055      	beq.n	800097a <ASPEP_RXframeProcess+0xce>
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d018      	beq.n	8000904 <ASPEP_RXframeProcess+0x58>
 80008d2:	b933      	cbnz	r3, 80008e2 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 80008d4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80008d6:	2905      	cmp	r1, #5
 80008d8:	f000 80e3 	beq.w	8000aa2 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80008dc:	2906      	cmp	r1, #6
 80008de:	f000 8129 	beq.w	8000b34 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008e2:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008e4:	6960      	ldr	r0, [r4, #20]
 80008e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80008e8:	2204      	movs	r2, #4
 80008ea:	f104 011c 	add.w	r1, r4, #28
 80008ee:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008f0:	4628      	mov	r0, r5
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008f6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80008fa:	b9bb      	cbnz	r3, 800092c <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008fc:	2500      	movs	r5, #0
}
 80008fe:	4628      	mov	r0, r5
 8000900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000904:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000906:	2b05      	cmp	r3, #5
 8000908:	d045      	beq.n	8000996 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 800090a:	2b06      	cmp	r3, #6
 800090c:	f000 8118 	beq.w	8000b40 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000910:	2b09      	cmp	r3, #9
 8000912:	d1e6      	bne.n	80008e2 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000914:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000918:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 800091c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800091e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000920:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000922:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000926:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000928:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800092a:	e7db      	b.n	80008e4 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800092c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000930:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000932:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000936:	488b      	ldr	r0, [pc, #556]	@ (8000b64 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000938:	4d8b      	ldr	r5, [pc, #556]	@ (8000b68 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800093a:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800093e:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000942:	5c82      	ldrb	r2, [r0, r2]
 8000944:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000948:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800094a:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800094c:	5ceb      	ldrb	r3, [r5, r3]
 800094e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000952:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000956:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 80f6 	beq.w	8000b4a <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 800095e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000960:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000964:	b913      	cbnz	r3, 800096c <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000966:	2302      	movs	r3, #2
 8000968:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800096c:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800096e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000970:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000972:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000976:	4798      	blx	r3
 8000978:	e7c0      	b.n	80008fc <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 800097a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800097c:	2905      	cmp	r1, #5
 800097e:	d04f      	beq.n	8000a20 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000980:	2906      	cmp	r1, #6
 8000982:	d1ae      	bne.n	80008e2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000984:	4619      	mov	r1, r3
 8000986:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800098a:	f7ff fe41 	bl	8000610 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800098e:	2302      	movs	r3, #2
 8000990:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000994:	e7a5      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000996:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800099a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800099e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a0:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009a4:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009a8:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009ac:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009b0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009b2:	4575      	cmp	r5, lr
 80009b4:	bf28      	it	cs
 80009b6:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009b8:	42b0      	cmp	r0, r6
 80009ba:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009bc:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c0:	bf28      	it	cs
 80009c2:	4631      	movcs	r1, r6
 80009c4:	4663      	mov	r3, ip
 80009c6:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80009ca:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009ce:	45b8      	cmp	r8, r7
 80009d0:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d2:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d6:	bf28      	it	cs
 80009d8:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009da:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009e0:	4651      	mov	r1, sl
 80009e2:	bf28      	it	cs
 80009e4:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e6:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009ea:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009ee:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80009f2:	d80f      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009f4:	45ae      	cmp	lr, r5
 80009f6:	d80d      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009f8:	45b8      	cmp	r8, r7
 80009fa:	d80b      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80009fc:	45ca      	cmp	sl, r9
 80009fe:	d809      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a00:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8000a04:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a08:	ebac 0c02 	sub.w	ip, ip, r2
 8000a0c:	fabc fc8c 	clz	ip, ip
 8000a10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000a14:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff fdb3 	bl	8000584 <ASPEP_sendBeacon>
 8000a1e:	e760      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a20:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a22:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a26:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a28:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a2c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a30:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a34:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a38:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	42a8      	cmp	r0, r5
 8000a3c:	bf28      	it	cs
 8000a3e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a40:	42b1      	cmp	r1, r6
 8000a42:	4663      	mov	r3, ip
 8000a44:	468c      	mov	ip, r1
 8000a46:	bf28      	it	cs
 8000a48:	46b4      	movcs	ip, r6
 8000a4a:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a4e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a52:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a56:	45bc      	cmp	ip, r7
 8000a58:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a5e:	bf28      	it	cs
 8000a60:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a62:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a64:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a68:	46c1      	mov	r9, r8
 8000a6a:	bf28      	it	cs
 8000a6c:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6e:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a72:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a74:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a76:	d80b      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a78:	4285      	cmp	r5, r0
 8000a7a:	d809      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a7c:	45bc      	cmp	ip, r7
 8000a7e:	d807      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a80:	45f0      	cmp	r8, lr
 8000a82:	d805      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a84:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000a88:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d002      	beq.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a96:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fd72 	bl	8000584 <ASPEP_sendBeacon>
 8000aa0:	e71f      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aa2:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aa6:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000aaa:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aac:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ab0:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ab4:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000ab8:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000abc:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000abe:	4561      	cmp	r1, ip
 8000ac0:	bf28      	it	cs
 8000ac2:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac4:	42b5      	cmp	r5, r6
 8000ac6:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ac8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000acc:	bf28      	it	cs
 8000ace:	4630      	movcs	r0, r6
 8000ad0:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000ad4:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad8:	45b8      	cmp	r8, r7
 8000ada:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000adc:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ae0:	bf28      	it	cs
 8000ae2:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ae4:	45ca      	cmp	sl, r9
 8000ae6:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae8:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aec:	bf28      	it	cs
 8000aee:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000af0:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000af4:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000af6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000af8:	d8cd      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000afa:	458c      	cmp	ip, r1
 8000afc:	d8cb      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d8c9      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b02:	45ca      	cmp	sl, r9
 8000b04:	d8c7      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b06:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000b0a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d1c1      	bne.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b12:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b14:	1c42      	adds	r2, r0, #1
 8000b16:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b18:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b1a:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b1c:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b20:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b22:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b24:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b26:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b2a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b2e:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000b32:	e7b0      	b.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b34:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f7ff fd69 	bl	8000610 <ASPEP_sendPing>
 8000b3e:	e6d0      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b40:	7f42      	ldrb	r2, [r0, #29]
 8000b42:	2101      	movs	r1, #1
 8000b44:	f7ff fd64 	bl	8000610 <ASPEP_sendPing>
 8000b48:	e6cb      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000b4a:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b54:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000b56:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000b58:	2204      	movs	r2, #4
 8000b5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b5c:	6960      	ldr	r0, [r4, #20]
 8000b5e:	4798      	blx	r3
 8000b60:	e704      	b.n	800096c <ASPEP_RXframeProcess+0xc0>
 8000b62:	bf00      	nop
 8000b64:	0800a2d4 	.word	0x0800a2d4
 8000b68:	0800a2c4 	.word	0x0800a2c4

08000b6c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b6c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b6e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000b72:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b74:	b13b      	cbz	r3, 8000b86 <ASPEP_HWDataReceivedIT+0x1a>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b80:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b84:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b86:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b88:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <ASPEP_HWDataReceivedIT+0x98>)
 8000b8a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b92:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b9a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	b95b      	cbnz	r3, 8000bbe <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000ba6:	7f03      	ldrb	r3, [r0, #28]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000bb0:	d809      	bhi.n	8000bc6 <ASPEP_HWDataReceivedIT+0x5a>
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d81e      	bhi.n	8000bf4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000bbc:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bc4:	bd10      	pop	{r4, pc}
 8000bc6:	2b09      	cmp	r3, #9
 8000bc8:	d1f5      	bne.n	8000bb6 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bca:	8b83      	ldrh	r3, [r0, #28]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bd2:	b17b      	cbz	r3, 8000bf4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bd4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d30f      	bcc.n	8000bfc <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bdc:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000be0:	6981      	ldr	r1, [r0, #24]
 8000be2:	6940      	ldr	r0, [r0, #20]
 8000be4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000be8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bea:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000bf2:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000bfa:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000c02:	bd10      	pop	{r4, pc}
 8000c04:	0800a2d4 	.word	0x0800a2d4

08000c08 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c08:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c10:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c12:	6940      	ldr	r0, [r0, #20]
 8000c14:	2204      	movs	r2, #4
 8000c16:	311c      	adds	r1, #28
 8000c18:	4718      	bx	r3
 8000c1a:	bf00      	nop

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b510      	push	{r4, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c20:	2238      	movs	r2, #56	@ 0x38
 8000c22:	2100      	movs	r1, #0
 8000c24:	a806      	add	r0, sp, #24
 8000c26:	f009 fb07 	bl	800a238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000c30:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000c34:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c36:	f005 f8cf 	bl	8005dd8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3c:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c3e:	2255      	movs	r2, #85	@ 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c48:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4c:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c4e:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c56:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f005 f936 	bl	8005ecc <HAL_RCC_OscConfig>
 8000c60:	b108      	cbz	r0, 8000c66 <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c62:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c66:	2104      	movs	r1, #4
 8000c68:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6c:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c74:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7a:	f005 fba1 	bl	80063c0 <HAL_RCC_ClockConfig>
 8000c7e:	b108      	cbz	r0, 8000c84 <SystemClock_Config+0x68>
 8000c80:	b672      	cpsid	i
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <SystemClock_Config+0x66>
  HAL_RCC_EnableCSS();
 8000c84:	f005 fcca 	bl	800661c <HAL_RCC_EnableCSS>
}
 8000c88:	b014      	add	sp, #80	@ 0x50
 8000c8a:	bd10      	pop	{r4, pc}

08000c8c <main>:
{
 8000c8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	2400      	movs	r4, #0
{
 8000c92:	b0ab      	sub	sp, #172	@ 0xac
  HAL_Init();
 8000c94:	f003 fd84 	bl	80047a0 <HAL_Init>
  SystemClock_Config();
 8000c98:	f7ff ffc0 	bl	8000c1c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4daa      	ldr	r5, [pc, #680]	@ (8000f4c <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	941f      	str	r4, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	48aa      	ldr	r0, [pc, #680]	@ (8000f50 <main+0x2c4>)
  hadc1.Instance = ADC1;
 8000ca8:	f8df b2e4 	ldr.w	fp, [pc, #740]	@ 8000f90 <main+0x304>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000cb2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	9304      	str	r3, [sp, #16]
 8000cba:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000cc4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	9305      	str	r3, [sp, #20]
 8000ccc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000cd6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	9306      	str	r3, [sp, #24]
 8000cde:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000ce8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000cf6:	931b      	str	r3, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	9a07      	ldr	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfe:	931c      	str	r3, [sp, #112]	@ 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f004 feea 	bl	8005ad8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d04:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000d0c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d16:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000d1e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000d20:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d26:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d28:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d2a:	223c      	movs	r2, #60	@ 0x3c
 8000d2c:	a81b      	add	r0, sp, #108	@ 0x6c
  ADC_MultiModeTypeDef multimode = {0};
 8000d2e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d32:	9b03      	ldr	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d34:	f009 fa80 	bl	800a238 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d38:	2220      	movs	r2, #32
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	a813      	add	r0, sp, #76	@ 0x4c
 8000d3e:	f009 fa7b 	bl	800a238 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d42:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d46:	e9cb 4401 	strd	r4, r4, [fp, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	e9cb 440b 	strd	r4, r4, [fp, #44]	@ 0x2c
  hadc1.Init.GainCompensation = 0;
 8000d4e:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d52:	f8ab 401c 	strh.w	r4, [fp, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	f88b 4024 	strb.w	r4, [fp, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	f88b 4038 	strb.w	r4, [fp, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d5e:	f8cb 403c 	str.w	r4, [fp, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d62:	f88b 4040 	strb.w	r4, [fp, #64]	@ 0x40
  hadc1.Instance = ADC1;
 8000d66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8000d6e:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4658      	mov	r0, fp
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d72:	e9cb 5405 	strd	r5, r4, [fp, #20]
  hadc1.Instance = ADC1;
 8000d76:	f8cb 2000 	str.w	r2, [fp]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d7a:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d7e:	f8cb 6020 	str.w	r6, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d82:	f003 fd49 	bl	8004818 <HAL_ADC_Init>
 8000d86:	b108      	cbz	r0, 8000d8c <main+0x100>
 8000d88:	b672      	cpsid	i
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <main+0xfe>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d8c:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8e:	a90e      	add	r1, sp, #56	@ 0x38
 8000d90:	4658      	mov	r0, fp
 8000d92:	f004 fb6b 	bl	800546c <HAL_ADCEx_MultiModeConfigChannel>
 8000d96:	b108      	cbz	r0, 8000d9c <main+0x110>
 8000d98:	b672      	cpsid	i
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <main+0x10e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f54 <main+0x2c8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d9e:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000da2:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedOffset = 0;
 8000da6:	e9cd 401f 	strd	r4, r0, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000daa:	e9cd 3a1b 	strd	r3, sl, [sp, #108]	@ 0x6c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000dae:	f88d 0092 	strb.w	r0, [sp, #146]	@ 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000db2:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000db6:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dba:	f04f 0984 	mov.w	r9, #132	@ 0x84
 8000dbe:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dc0:	a91b      	add	r1, sp, #108	@ 0x6c
 8000dc2:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dc4:	e9cd 9325 	strd	r9, r3, [sp, #148]	@ 0x94
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000dc8:	951d      	str	r5, [sp, #116]	@ 0x74
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000dca:	9623      	str	r6, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000dcc:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd0:	f004 f872 	bl	8004eb8 <HAL_ADCEx_InjectedConfigChannel>
 8000dd4:	b108      	cbz	r0, 8000dda <main+0x14e>
 8000dd6:	b672      	cpsid	i
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x14c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dda:	4a5f      	ldr	r2, [pc, #380]	@ (8000f58 <main+0x2cc>)
 8000ddc:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de0:	a91b      	add	r1, sp, #108	@ 0x6c
 8000de2:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000de4:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de8:	f004 f866 	bl	8004eb8 <HAL_ADCEx_InjectedConfigChannel>
 8000dec:	b108      	cbz	r0, 8000df2 <main+0x166>
 8000dee:	b672      	cpsid	i
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <main+0x164>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f5c <main+0x2d0>)
  sConfig.Offset = 0;
 8000df4:	9018      	str	r0, [sp, #96]	@ 0x60
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df6:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	a913      	add	r1, sp, #76	@ 0x4c
 8000dfa:	4658      	mov	r0, fp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfc:	e9cd 4815 	strd	r4, r8, [sp, #84]	@ 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	e9cd 3213 	strd	r3, r2, [sp, #76]	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e04:	9417      	str	r4, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	f003 fe07 	bl	8004a18 <HAL_ADC_ConfigChannel>
 8000e0a:	b108      	cbz	r0, 8000e10 <main+0x184>
 8000e0c:	b672      	cpsid	i
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <main+0x182>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e10:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8000f94 <main+0x308>
 8000e14:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	a913      	add	r1, sp, #76	@ 0x4c
 8000e18:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e1a:	e9cd e313 	strd	lr, r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	f003 fdfb 	bl	8004a18 <HAL_ADC_ConfigChannel>
 8000e22:	4601      	mov	r1, r0
 8000e24:	b108      	cbz	r0, 8000e2a <main+0x19e>
 8000e26:	b672      	cpsid	i
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <main+0x19c>
  hadc2.Instance = ADC2;
 8000e2a:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8000f98 <main+0x30c>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e2e:	9001      	str	r0, [sp, #4]
 8000e30:	223c      	movs	r2, #60	@ 0x3c
 8000e32:	a81b      	add	r0, sp, #108	@ 0x6c
 8000e34:	f009 fa00 	bl	800a238 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e38:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000e3a:	4a49      	ldr	r2, [pc, #292]	@ (8000f60 <main+0x2d4>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e3c:	f8cb 700c 	str.w	r7, [fp, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e40:	4658      	mov	r0, fp
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e42:	e9cb 1101 	strd	r1, r1, [fp, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e46:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4a:	f8cb 4018 	str.w	r4, [fp, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e4e:	f8ab 101c 	strh.w	r1, [fp, #28]
  hadc2.Init.NbrOfConversion = 1;
 8000e52:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	f88b 1024 	strb.w	r1, [fp, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e5a:	f88b 1038 	strb.w	r1, [fp, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e62:	f88b 1040 	strb.w	r1, [fp, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8000e66:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e6a:	f003 fcd5 	bl	8004818 <HAL_ADC_Init>
 8000e6e:	b108      	cbz	r0, 8000e74 <main+0x1e8>
 8000e70:	b672      	cpsid	i
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <main+0x1e6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e74:	4b37      	ldr	r3, [pc, #220]	@ (8000f54 <main+0x2c8>)
  sConfigInjected.InjectedOffset = 0;
 8000e76:	9020      	str	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e78:	e9cd 3a1b 	strd	r3, sl, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e7c:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e80:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e82:	f88d 0092 	strb.w	r0, [sp, #146]	@ 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e86:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e8a:	a91b      	add	r1, sp, #108	@ 0x6c
 8000e8c:	4658      	mov	r0, fp
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e8e:	e9cd 581d 	strd	r5, r8, [sp, #116]	@ 0x74
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e92:	941f      	str	r4, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e94:	9623      	str	r6, [sp, #140]	@ 0x8c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000e96:	f8cd 9094 	str.w	r9, [sp, #148]	@ 0x94
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e9a:	9326      	str	r3, [sp, #152]	@ 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e9c:	f004 f80c 	bl	8004eb8 <HAL_ADCEx_InjectedConfigChannel>
 8000ea0:	b108      	cbz	r0, 8000ea6 <main+0x21a>
 8000ea2:	b672      	cpsid	i
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x218>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ea6:	f240 130f 	movw	r3, #271	@ 0x10f
 8000eaa:	931c      	str	r3, [sp, #112]	@ 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000eac:	a91b      	add	r1, sp, #108	@ 0x6c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000eae:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <main+0x2d8>)
 8000eb0:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000eb2:	4658      	mov	r0, fp
 8000eb4:	f004 f800 	bl	8004eb8 <HAL_ADCEx_InjectedConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b108      	cbz	r0, 8000ec0 <main+0x234>
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <main+0x232>
  hcomp1.Instance = COMP1;
 8000ec0:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <main+0x2dc>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ec2:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ec6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000eca:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <main+0x2e0>)
 8000ece:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000ed0:	2340      	movs	r3, #64	@ 0x40
 8000ed2:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ed4:	f004 fb30 	bl	8005538 <HAL_COMP_Init>
 8000ed8:	b108      	cbz	r0, 8000ede <main+0x252>
 8000eda:	b672      	cpsid	i
  while (1)
 8000edc:	e7fe      	b.n	8000edc <main+0x250>
  hcomp2.Instance = COMP2;
 8000ede:	4824      	ldr	r0, [pc, #144]	@ (8000f70 <main+0x2e4>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ee0:	4f24      	ldr	r7, [pc, #144]	@ (8000f74 <main+0x2e8>)
 8000ee2:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000ee4:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ee6:	e9c0 7300 	strd	r7, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000eea:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000eee:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000ef2:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000ef4:	f004 fb20 	bl	8005538 <HAL_COMP_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b108      	cbz	r0, 8000f00 <main+0x274>
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <main+0x272>
  hcomp4.Instance = COMP4;
 8000f00:	481d      	ldr	r0, [pc, #116]	@ (8000f78 <main+0x2ec>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000f02:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f06:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f0a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <main+0x2f0>)
 8000f10:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000f12:	f004 fb11 	bl	8005538 <HAL_COMP_Init>
 8000f16:	b108      	cbz	r0, 8000f1c <main+0x290>
 8000f18:	b672      	cpsid	i
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <main+0x28e>
  hcordic.Instance = CORDIC;
 8000f1c:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <main+0x2f4>)
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <main+0x2f8>)
 8000f20:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f22:	f004 fba9 	bl	8005678 <HAL_CORDIC_Init>
 8000f26:	4601      	mov	r1, r0
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x2a2>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x2a0>
  hdac3.Instance = DAC3;
 8000f2e:	4d16      	ldr	r5, [pc, #88]	@ (8000f88 <main+0x2fc>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f30:	2230      	movs	r2, #48	@ 0x30
 8000f32:	a81b      	add	r0, sp, #108	@ 0x6c
 8000f34:	f009 f980 	bl	800a238 <memset>
  hdac3.Instance = DAC3;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <main+0x300>)
 8000f3a:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f004 fc31 	bl	80057a4 <HAL_DAC_Init>
 8000f42:	4602      	mov	r2, r0
 8000f44:	b350      	cbz	r0, 8000f9c <main+0x310>
 8000f46:	b672      	cpsid	i
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <main+0x2bc>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000800 	.word	0x48000800
 8000f54:	0c900008 	.word	0x0c900008
 8000f58:	32601000 	.word	0x32601000
 8000f5c:	04300002 	.word	0x04300002
 8000f60:	50000100 	.word	0x50000100
 8000f64:	cb8c0000 	.word	0xcb8c0000
 8000f68:	20000848 	.word	0x20000848
 8000f6c:	40010200 	.word	0x40010200
 8000f70:	20000824 	.word	0x20000824
 8000f74:	40010204 	.word	0x40010204
 8000f78:	20000800 	.word	0x20000800
 8000f7c:	4001020c 	.word	0x4001020c
 8000f80:	200007d8 	.word	0x200007d8
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	200007c4 	.word	0x200007c4
 8000f8c:	50001000 	.word	0x50001000
 8000f90:	200008d8 	.word	0x200008d8
 8000f94:	14f00020 	.word	0x14f00020
 8000f98:	2000086c 	.word	0x2000086c
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f9c:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f9e:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fa2:	f8ad 0070 	strh.w	r0, [sp, #112]	@ 0x70
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000fa6:	901f      	str	r0, [sp, #124]	@ 0x7c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fa8:	9022      	str	r0, [sp, #136]	@ 0x88
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000faa:	a91b      	add	r1, sp, #108	@ 0x6c
 8000fac:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000fae:	e9cd 3320 	strd	r3, r3, [sp, #128]	@ 0x80
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fb2:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fb4:	f004 fc0c 	bl	80057d0 <HAL_DAC_ConfigChannel>
 8000fb8:	b108      	cbz	r0, 8000fbe <main+0x332>
 8000fba:	b672      	cpsid	i
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <main+0x330>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	a91b      	add	r1, sp, #108	@ 0x6c
 8000fc4:	f004 fc04 	bl	80057d0 <HAL_DAC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b108      	cbz	r0, 8000fd0 <main+0x344>
 8000fcc:	b672      	cpsid	i
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0x342>
  hopamp1.Instance = OPAMP1;
 8000fd0:	48a1      	ldr	r0, [pc, #644]	@ (8001258 <main+0x5cc>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fd2:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000fd6:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000fda:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000fdc:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fde:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fe0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fe2:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8000fe6:	4b9d      	ldr	r3, [pc, #628]	@ (800125c <main+0x5d0>)
 8000fe8:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fea:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000fee:	f004 fe7b 	bl	8005ce8 <HAL_OPAMP_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b108      	cbz	r0, 8000ffa <main+0x36e>
 8000ff6:	b672      	cpsid	i
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x36c>
  hopamp2.Instance = OPAMP2;
 8000ffa:	4899      	ldr	r0, [pc, #612]	@ (8001260 <main+0x5d4>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000ffc:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001000:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001002:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001004:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001006:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8001008:	4b96      	ldr	r3, [pc, #600]	@ (8001264 <main+0x5d8>)
 800100a:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800100c:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001010:	f004 fe6a 	bl	8005ce8 <HAL_OPAMP_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	b108      	cbz	r0, 800101c <main+0x390>
 8001018:	b672      	cpsid	i
  while (1)
 800101a:	e7fe      	b.n	800101a <main+0x38e>
  hopamp3.Instance = OPAMP3;
 800101c:	4892      	ldr	r0, [pc, #584]	@ (8001268 <main+0x5dc>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800101e:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001022:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001024:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001026:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001028:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 800102a:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 800102c:	4b8f      	ldr	r3, [pc, #572]	@ (800126c <main+0x5e0>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800102e:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 8001030:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8001032:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001034:	f004 fe58 	bl	8005ce8 <HAL_OPAMP_Init>
 8001038:	4604      	mov	r4, r0
 800103a:	b108      	cbz	r0, 8001040 <main+0x3b4>
 800103c:	b672      	cpsid	i
  while (1)
 800103e:	e7fe      	b.n	800103e <main+0x3b2>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001040:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8001044:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
 800104c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
 8001050:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001058:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800105c:	9012      	str	r0, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105e:	9008      	str	r0, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001060:	900b      	str	r0, [sp, #44]	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	9019      	str	r0, [sp, #100]	@ 0x64
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001064:	4601      	mov	r1, r0
 8001066:	2234      	movs	r2, #52	@ 0x34
 8001068:	a81b      	add	r0, sp, #108	@ 0x6c
 800106a:	f009 f8e5 	bl	800a238 <memset>
  htim1.Instance = TIM1;
 800106e:	4880      	ldr	r0, [pc, #512]	@ (8001270 <main+0x5e4>)
 8001070:	4b80      	ldr	r3, [pc, #512]	@ (8001274 <main+0x5e8>)
 8001072:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001074:	2620      	movs	r6, #32
 8001076:	f640 3311 	movw	r3, #2833	@ 0xb11
 800107a:	e9c0 6302 	strd	r6, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800107e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001082:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001084:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001088:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800108a:	f005 fcdd 	bl	8006a48 <HAL_TIM_Base_Init>
 800108e:	b108      	cbz	r0, 8001094 <main+0x408>
 8001090:	b672      	cpsid	i
  while (1)
 8001092:	e7fe      	b.n	8001092 <main+0x406>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001094:	4876      	ldr	r0, [pc, #472]	@ (8001270 <main+0x5e4>)
 8001096:	f005 fd4f 	bl	8006b38 <HAL_TIM_PWM_Init>
 800109a:	b108      	cbz	r0, 80010a0 <main+0x414>
 800109c:	b672      	cpsid	i
  while (1)
 800109e:	e7fe      	b.n	800109e <main+0x412>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010a0:	2306      	movs	r3, #6
 80010a2:	2710      	movs	r7, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010a4:	4872      	ldr	r0, [pc, #456]	@ (8001270 <main+0x5e4>)
 80010a6:	a90e      	add	r1, sp, #56	@ 0x38
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010a8:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010ac:	f005 fefe 	bl	8006eac <HAL_TIM_SlaveConfigSynchro>
 80010b0:	b108      	cbz	r0, 80010b6 <main+0x42a>
 80010b2:	b672      	cpsid	i
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x428>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010ba:	2570      	movs	r5, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010bc:	486c      	ldr	r0, [pc, #432]	@ (8001270 <main+0x5e4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010be:	9508      	str	r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c0:	a908      	add	r1, sp, #32
 80010c2:	f006 f8b7 	bl	8007234 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	b108      	cbz	r0, 80010cc <main+0x440>
 80010c8:	b672      	cpsid	i
  while (1)
 80010ca:	e7fe      	b.n	80010ca <main+0x43e>
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80010cc:	2401      	movs	r4, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80010ce:	900d      	str	r0, [sp, #52]	@ 0x34
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80010d0:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010d2:	4867      	ldr	r0, [pc, #412]	@ (8001270 <main+0x5e4>)
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80010d4:	940c      	str	r4, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80010d8:	4621      	mov	r1, r4
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80010da:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010dc:	f006 f94a 	bl	8007374 <HAL_TIMEx_ConfigBreakInput>
 80010e0:	b108      	cbz	r0, 80010e6 <main+0x45a>
 80010e2:	b672      	cpsid	i
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x458>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80010e6:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010e8:	4861      	ldr	r0, [pc, #388]	@ (8001270 <main+0x5e4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80010ea:	960b      	str	r6, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010ec:	aa0b      	add	r2, sp, #44	@ 0x2c
 80010ee:	4621      	mov	r1, r4
 80010f0:	f006 f940 	bl	8007374 <HAL_TIMEx_ConfigBreakInput>
 80010f4:	b108      	cbz	r0, 80010fa <main+0x46e>
 80010f6:	b672      	cpsid	i
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0x46c>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80010fc:	485c      	ldr	r0, [pc, #368]	@ (8001270 <main+0x5e4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80010fe:	970b      	str	r7, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001100:	4621      	mov	r1, r4
 8001102:	f006 f937 	bl	8007374 <HAL_TIMEx_ConfigBreakInput>
 8001106:	4602      	mov	r2, r0
 8001108:	b108      	cbz	r0, 800110e <main+0x482>
 800110a:	b672      	cpsid	i
  while (1)
 800110c:	e7fe      	b.n	800110c <main+0x480>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110e:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001112:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001116:	9019      	str	r0, [sp, #100]	@ 0x64
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001118:	2460      	movs	r4, #96	@ 0x60
 800111a:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	4854      	ldr	r0, [pc, #336]	@ (8001270 <main+0x5e4>)
 8001120:	a913      	add	r1, sp, #76	@ 0x4c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001122:	e9cd 4313 	strd	r4, r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001126:	f005 ff9f 	bl	8007068 <HAL_TIM_PWM_ConfigChannel>
 800112a:	b108      	cbz	r0, 8001130 <main+0x4a4>
 800112c:	b672      	cpsid	i
  while (1)
 800112e:	e7fe      	b.n	800112e <main+0x4a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001130:	484f      	ldr	r0, [pc, #316]	@ (8001270 <main+0x5e4>)
 8001132:	4632      	mov	r2, r6
 8001134:	a913      	add	r1, sp, #76	@ 0x4c
 8001136:	f005 ff97 	bl	8007068 <HAL_TIM_PWM_ConfigChannel>
 800113a:	b108      	cbz	r0, 8001140 <main+0x4b4>
 800113c:	b672      	cpsid	i
  while (1)
 800113e:	e7fe      	b.n	800113e <main+0x4b2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001140:	484b      	ldr	r0, [pc, #300]	@ (8001270 <main+0x5e4>)
 8001142:	2208      	movs	r2, #8
 8001144:	a913      	add	r1, sp, #76	@ 0x4c
 8001146:	f005 ff8f 	bl	8007068 <HAL_TIM_PWM_ConfigChannel>
 800114a:	b108      	cbz	r0, 8001150 <main+0x4c4>
 800114c:	b672      	cpsid	i
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x4c2>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001150:	f44f 6331 	mov.w	r3, #2832	@ 0xb10
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001154:	4846      	ldr	r0, [pc, #280]	@ (8001270 <main+0x5e4>)
 8001156:	220c      	movs	r2, #12
 8001158:	a913      	add	r1, sp, #76	@ 0x4c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800115a:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800115e:	f005 ff83 	bl	8007068 <HAL_TIM_PWM_ConfigChannel>
 8001162:	b108      	cbz	r0, 8001168 <main+0x4dc>
 8001164:	b672      	cpsid	i
  while (1)
 8001166:	e7fe      	b.n	8001166 <main+0x4da>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001168:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800116c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001170:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001172:	e9cd 121b 	strd	r1, r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001176:	223f      	movs	r2, #63	@ 0x3f
 8001178:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001184:	e9cd 021f 	strd	r0, r2, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001188:	e9cd 3322 	strd	r3, r3, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.BreakFilter = 3;
 800118c:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118e:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001192:	4837      	ldr	r0, [pc, #220]	@ (8001270 <main+0x5e4>)
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001194:	9221      	str	r2, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800119a:	a91b      	add	r1, sp, #108	@ 0x6c
  sBreakDeadTimeConfig.Break2Filter = 3;
 800119c:	9225      	str	r2, [sp, #148]	@ 0x94
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119e:	9324      	str	r3, [sp, #144]	@ 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a0:	f006 f89a 	bl	80072d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a4:	4604      	mov	r4, r0
 80011a6:	b108      	cbz	r0, 80011ac <main+0x520>
 80011a8:	b672      	cpsid	i
  while (1)
 80011aa:	e7fe      	b.n	80011aa <main+0x51e>
  htim2.Instance = TIM2;
 80011ac:	4d32      	ldr	r5, [pc, #200]	@ (8001278 <main+0x5ec>)
  HAL_TIM_MspPostInit(&htim1);
 80011ae:	4830      	ldr	r0, [pc, #192]	@ (8001270 <main+0x5e4>)
 80011b0:	f003 f86e 	bl	8004290 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80011b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011b8:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ba:	4628      	mov	r0, r5
  htim2.Init.Period = 4.294967295E9;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011c0:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
 80011c4:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011cc:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
 80011d0:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011d8:	941f      	str	r4, [sp, #124]	@ 0x7c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	9410      	str	r4, [sp, #64]	@ 0x40
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = 4.294967295E9;
 80011e0:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e2:	f005 fc31 	bl	8006a48 <HAL_TIM_Base_Init>
 80011e6:	b108      	cbz	r0, 80011ec <main+0x560>
 80011e8:	b672      	cpsid	i
  while (1)
 80011ea:	e7fe      	b.n	80011ea <main+0x55e>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011ec:	4628      	mov	r0, r5
 80011ee:	f005 fd1b 	bl	8006c28 <HAL_TIM_IC_Init>
 80011f2:	b108      	cbz	r0, 80011f8 <main+0x56c>
 80011f4:	b672      	cpsid	i
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <main+0x56a>
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011f8:	901d      	str	r0, [sp, #116]	@ 0x74
  sSlaveConfig.TriggerFilter = 0;
 80011fa:	901f      	str	r0, [sp, #124]	@ 0x7c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011fc:	2404      	movs	r4, #4
 80011fe:	2350      	movs	r3, #80	@ 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001200:	a91b      	add	r1, sp, #108	@ 0x6c
 8001202:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001204:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001208:	f005 fe50 	bl	8006eac <HAL_TIM_SlaveConfigSynchro>
 800120c:	b108      	cbz	r0, 8001212 <main+0x586>
 800120e:	b672      	cpsid	i
  while (1)
 8001210:	e7fe      	b.n	8001210 <main+0x584>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	900e      	str	r0, [sp, #56]	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001216:	a90e      	add	r1, sp, #56	@ 0x38
 8001218:	4628      	mov	r0, r5
 800121a:	f006 f80b 	bl	8007234 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4602      	mov	r2, r0
 8001220:	b108      	cbz	r0, 8001226 <main+0x59a>
 8001222:	b672      	cpsid	i
  while (1)
 8001224:	e7fe      	b.n	8001224 <main+0x598>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001226:	2301      	movs	r3, #1
 8001228:	e9cd 0313 	strd	r0, r3, [sp, #76]	@ 0x4c
  sConfigIC.ICFilter = 0;
 800122c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001230:	a913      	add	r1, sp, #76	@ 0x4c
 8001232:	4628      	mov	r0, r5
 8001234:	f005 fd6e 	bl	8006d14 <HAL_TIM_IC_ConfigChannel>
 8001238:	b108      	cbz	r0, 800123e <main+0x5b2>
 800123a:	b672      	cpsid	i
  while (1)
 800123c:	e7fe      	b.n	800123c <main+0x5b0>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800123e:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001240:	4622      	mov	r2, r4
 8001242:	a913      	add	r1, sp, #76	@ 0x4c
 8001244:	4628      	mov	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001246:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800124a:	f005 fd63 	bl	8006d14 <HAL_TIM_IC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	b1a0      	cbz	r0, 800127c <main+0x5f0>
 8001252:	b672      	cpsid	i
  while (1)
 8001254:	e7fe      	b.n	8001254 <main+0x5c8>
 8001256:	bf00      	nop
 8001258:	20000788 	.word	0x20000788
 800125c:	40010300 	.word	0x40010300
 8001260:	2000074c 	.word	0x2000074c
 8001264:	40010304 	.word	0x40010304
 8001268:	20000710 	.word	0x20000710
 800126c:	40010308 	.word	0x40010308
 8001270:	200006c4 	.word	0x200006c4
 8001274:	40012c00 	.word	0x40012c00
 8001278:	20000678 	.word	0x20000678
  huart2.Instance = USART2;
 800127c:	4c33      	ldr	r4, [pc, #204]	@ (800134c <main+0x6c0>)
 800127e:	4834      	ldr	r0, [pc, #208]	@ (8001350 <main+0x6c4>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 8001282:	f44f 11e1 	mov.w	r1, #1843200	@ 0x1c2000
 8001286:	e9c4 0100 	strd	r0, r1, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128a:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128c:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001292:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001296:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	f006 fad9 	bl	8007854 <HAL_UART_Init>
 80012a2:	4601      	mov	r1, r0
 80012a4:	b108      	cbz	r0, 80012aa <main+0x61e>
 80012a6:	b672      	cpsid	i
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <main+0x61c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012aa:	4620      	mov	r0, r4
 80012ac:	f006 fb5c 	bl	8007968 <HAL_UARTEx_SetTxFifoThreshold>
 80012b0:	4601      	mov	r1, r0
 80012b2:	b108      	cbz	r0, 80012b8 <main+0x62c>
 80012b4:	b672      	cpsid	i
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <main+0x62a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	4620      	mov	r0, r4
 80012ba:	f006 fb97 	bl	80079ec <HAL_UARTEx_SetRxFifoThreshold>
 80012be:	b108      	cbz	r0, 80012c4 <main+0x638>
 80012c0:	b672      	cpsid	i
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <main+0x636>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012c4:	4821      	ldr	r0, [pc, #132]	@ (800134c <main+0x6c0>)
 80012c6:	f006 fb31 	bl	800792c <HAL_UARTEx_DisableFifoMode>
 80012ca:	4604      	mov	r4, r0
 80012cc:	b108      	cbz	r0, 80012d2 <main+0x646>
 80012ce:	b672      	cpsid	i
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <main+0x644>
  MX_MotorControl_Init();
 80012d2:	f001 f913 	bl	80024fc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80012d6:	2103      	movs	r1, #3
 80012d8:	2201      	movs	r2, #1
 80012da:	2026      	movs	r0, #38	@ 0x26
 80012dc:	f004 f9f8 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012e0:	2026      	movs	r0, #38	@ 0x26
 80012e2:	f004 fa31 	bl	8005748 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80012e6:	4622      	mov	r2, r4
 80012e8:	2103      	movs	r1, #3
 80012ea:	200b      	movs	r0, #11
 80012ec:	f004 f9f0 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f0:	200b      	movs	r0, #11
 80012f2:	f004 fa29 	bl	8005748 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80012f6:	4622      	mov	r2, r4
 80012f8:	2103      	movs	r1, #3
 80012fa:	201c      	movs	r0, #28
 80012fc:	f004 f9e8 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001300:	201c      	movs	r0, #28
 8001302:	f004 fa21 	bl	8005748 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001306:	2201      	movs	r2, #1
 8001308:	2104      	movs	r1, #4
 800130a:	2018      	movs	r0, #24
 800130c:	f004 f9e0 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001310:	2018      	movs	r0, #24
 8001312:	f004 fa19 	bl	8005748 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001316:	4622      	mov	r2, r4
 8001318:	4621      	mov	r1, r4
 800131a:	2019      	movs	r0, #25
 800131c:	f004 f9d8 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001320:	2019      	movs	r0, #25
 8001322:	f004 fa11 	bl	8005748 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001326:	4622      	mov	r2, r4
 8001328:	2102      	movs	r1, #2
 800132a:	2012      	movs	r0, #18
 800132c:	f004 f9d0 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001330:	2012      	movs	r0, #18
 8001332:	f004 fa09 	bl	8005748 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001336:	4622      	mov	r2, r4
 8001338:	2103      	movs	r1, #3
 800133a:	2028      	movs	r0, #40	@ 0x28
 800133c:	f004 f9c8 	bl	80056d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001340:	2028      	movs	r0, #40	@ 0x28
 8001342:	f004 fa01 	bl	8005748 <HAL_NVIC_EnableIRQ>
  (void)MC_StartMotor1();
 8001346:	f000 f807 	bl	8001358 <MC_StartMotor1>
  while (1)
 800134a:	e7fe      	b.n	800134a <main+0x6be>
 800134c:	200005e8 	.word	0x200005e8
 8001350:	40004400 	.word	0x40004400

08001354 <Error_Handler>:
 8001354:	b672      	cpsid	i
  while (1)
 8001356:	e7fe      	b.n	8001356 <Error_Handler+0x2>

08001358 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001358:	4b01      	ldr	r3, [pc, #4]	@ (8001360 <MC_StartMotor1+0x8>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	f000 b8a4 	b.w	80014a8 <MCI_StartMotor>
 8001360:	20001b3c 	.word	0x20001b3c

08001364 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001364:	4b01      	ldr	r3, [pc, #4]	@ (800136c <MC_StopMotor1+0x8>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	f000 b8ce 	b.w	8001508 <MCI_StopMotor>
 800136c:	20001b3c 	.word	0x20001b3c

08001370 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8001370:	4b01      	ldr	r3, [pc, #4]	@ (8001378 <MC_AcknowledgeFaultMotor1+0x8>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	f000 b8e4 	b.w	8001540 <MCI_FaultAcknowledged>
 8001378:	20001b3c 	.word	0x20001b3c

0800137c <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 800137c:	4b01      	ldr	r3, [pc, #4]	@ (8001384 <MC_GetOccurredFaultsMotor1+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f000 b88e 	b.w	80014a0 <MCI_GetOccurredFaults>
 8001384:	20001b3c 	.word	0x20001b3c

08001388 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001388:	4b01      	ldr	r3, [pc, #4]	@ (8001390 <MC_GetSTMStateMotor1+0x8>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f000 b886 	b.w	800149c <MCI_GetSTMState>
 8001390:	20001b3c 	.word	0x20001b3c

08001394 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001394:	2002      	movs	r0, #2
 8001396:	4770      	bx	lr

08001398 <MC_APP_BootHook>:
 *
 *
 */
__weak void MC_APP_BootHook(void)
{
  esc_boot(&ESC_M1);
 8001398:	4801      	ldr	r0, [pc, #4]	@ (80013a0 <MC_APP_BootHook+0x8>)
 800139a:	f006 bb9f 	b.w	8007adc <esc_boot>
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <MC_APP_PostMediumFrequencyHook_M1>:
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
{
  esc_pwm_control(&ESC_M1);
 80013a4:	4801      	ldr	r0, [pc, #4]	@ (80013ac <MC_APP_PostMediumFrequencyHook_M1+0x8>)
 80013a6:	f006 bbb3 	b.w	8007b10 <esc_pwm_control>
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 80013b0:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80013b2:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80013b4:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80013b8:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80013ba:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80013be:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    pHandle->pFOCVars = pFOCVars;
 80013c2:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80013c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 80013ca:	6083      	str	r3, [r0, #8]
}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80013d0:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013d4:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80013d8:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80013dc:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80013de:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013e0:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80013e2:	4770      	bx	lr

080013e4 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80013e4:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013e8:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80013ec:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80013f0:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80013f2:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013f4:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80013f6:	4770      	bx	lr

080013f8 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80013f8:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80013fa:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013fc:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001400:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001402:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001406:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001408:	b002      	add	sp, #8
 800140a:	4770      	bx	lr

0800140c <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800140c:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800140e:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001412:	430b      	orrs	r3, r1
 8001414:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001418:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800141c:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800141e:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001424:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001428:	2b01      	cmp	r3, #1
 800142a:	d000      	beq.n	800142e <MCI_ExecBufferedCommands+0xa>
 800142c:	4770      	bx	lr
{
 800142e:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001430:	7b02      	ldrb	r2, [r0, #12]
 8001432:	2a02      	cmp	r2, #2
 8001434:	4604      	mov	r4, r0
 8001436:	d007      	beq.n	8001448 <MCI_ExecBufferedCommands+0x24>
 8001438:	2a03      	cmp	r2, #3
 800143a:	d028      	beq.n	800148e <MCI_ExecBufferedCommands+0x6a>
 800143c:	2a01      	cmp	r2, #1
 800143e:	d017      	beq.n	8001470 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001440:	2303      	movs	r3, #3
 8001442:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001446:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001448:	6843      	ldr	r3, [r0, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001450:	6800      	ldr	r0, [r0, #0]
 8001452:	2104      	movs	r1, #4
 8001454:	f008 fa76 	bl	8009944 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001458:	8ba2      	ldrh	r2, [r4, #28]
 800145a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800145e:	6820      	ldr	r0, [r4, #0]
 8001460:	f008 fa74 	bl	800994c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001464:	2800      	cmp	r0, #0
 8001466:	d0eb      	beq.n	8001440 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001468:	2302      	movs	r3, #2
 800146a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800146e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001470:	6843      	ldr	r3, [r0, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001478:	6800      	ldr	r0, [r0, #0]
 800147a:	2103      	movs	r1, #3
 800147c:	f008 fa62 	bl	8009944 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001480:	8ba2      	ldrh	r2, [r4, #28]
 8001482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001486:	6820      	ldr	r0, [r4, #0]
 8001488:	f008 fa60 	bl	800994c <STC_ExecRamp>
          break;
 800148c:	e7ea      	b.n	8001464 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800148e:	6842      	ldr	r2, [r0, #4]
 8001490:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001494:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001498:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 800149a:	e7e5      	b.n	8001468 <MCI_ExecBufferedCommands+0x44>

0800149c <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 800149c:	7fc0      	ldrb	r0, [r0, #31]
 800149e:	4770      	bx	lr

080014a0 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80014a0:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80014a2:	4770      	bx	lr

080014a4 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80014a4:	8c00      	ldrh	r0, [r0, #32]
 80014a6:	4770      	bx	lr

080014a8 <MCI_StartMotor>:
{
 80014a8:	b510      	push	{r4, lr}
 80014aa:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014ac:	f7ff fff6 	bl	800149c <MCI_GetSTMState>
 80014b0:	b108      	cbz	r0, 80014b6 <MCI_StartMotor+0xe>
  bool retVal = false;
 80014b2:	2000      	movs	r0, #0
}
 80014b4:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fff2 	bl	80014a0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014bc:	2800      	cmp	r0, #0
 80014be:	d1f8      	bne.n	80014b2 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ffef 	bl	80014a4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d1f3      	bne.n	80014b2 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80014ca:	2001      	movs	r0, #1
 80014cc:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014ce:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80014d2:	bd10      	pop	{r4, pc}

080014d4 <MCI_StartWithPolarizationMotor>:
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014d8:	f7ff ffe0 	bl	800149c <MCI_GetSTMState>
 80014dc:	b108      	cbz	r0, 80014e2 <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 80014de:	2001      	movs	r0, #1
}
 80014e0:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ffdc 	bl	80014a0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1f8      	bne.n	80014de <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ffd9 	bl	80014a4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d1f3      	bne.n	80014de <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80014f6:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 80014f8:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 80014fa:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014fc:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 8001500:	f881 0081 	strb.w	r0, [r1, #129]	@ 0x81
}
 8001504:	bd10      	pop	{r4, pc}
 8001506:	bf00      	nop

08001508 <MCI_StopMotor>:
{
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 800150c:	f7ff ffc6 	bl	800149c <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001510:	4604      	mov	r4, r0
 8001512:	b118      	cbz	r0, 800151c <MCI_StopMotor+0x14>
 8001514:	f1b0 040c 	subs.w	r4, r0, #12
 8001518:	bf18      	it	ne
 800151a:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800151c:	4628      	mov	r0, r5
 800151e:	f7ff ffbf 	bl	80014a0 <MCI_GetOccurredFaults>
 8001522:	b110      	cbz	r0, 800152a <MCI_StopMotor+0x22>
  bool retVal = false;
 8001524:	2400      	movs	r4, #0
}
 8001526:	4620      	mov	r0, r4
 8001528:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800152a:	4628      	mov	r0, r5
 800152c:	f7ff ffba 	bl	80014a4 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001530:	2800      	cmp	r0, #0
 8001532:	d1f7      	bne.n	8001524 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001534:	2c00      	cmp	r4, #0
 8001536:	d0f5      	beq.n	8001524 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001538:	2305      	movs	r3, #5
 800153a:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 800153c:	e7f3      	b.n	8001526 <MCI_StopMotor+0x1e>
 800153e:	bf00      	nop

08001540 <MCI_FaultAcknowledged>:
{
 8001540:	b510      	push	{r4, lr}
 8001542:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001544:	f7ff ffaa 	bl	800149c <MCI_GetSTMState>
 8001548:	280b      	cmp	r0, #11
 800154a:	d001      	beq.n	8001550 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 800154c:	2000      	movs	r0, #0
}
 800154e:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ffa7 	bl	80014a4 <MCI_GetCurrentFaults>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1f8      	bne.n	800154c <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800155a:	2302      	movs	r3, #2
 800155c:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 800155e:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8001560:	2001      	movs	r0, #1
}
 8001562:	bd10      	pop	{r4, pc}

08001564 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001564:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001566:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001568:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001570:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop

08001578 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001578:	7b03      	ldrb	r3, [r0, #12]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d005      	beq.n	800158a <MCI_GetImposedMotorDirection+0x12>
 800157e:	2b03      	cmp	r3, #3
 8001580:	d013      	beq.n	80015aa <MCI_GetImposedMotorDirection+0x32>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d009      	beq.n	800159a <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8001586:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8001588:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 800158a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 800158e:	2b00      	cmp	r3, #0
 8001590:	bfac      	ite	ge
 8001592:	2001      	movge	r0, #1
 8001594:	f04f 30ff 	movlt.w	r0, #4294967295
 8001598:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 800159a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bfac      	ite	ge
 80015a2:	2001      	movge	r0, #1
 80015a4:	f04f 30ff 	movlt.w	r0, #4294967295
 80015a8:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 80015aa:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bfac      	ite	ge
 80015b2:	2001      	movge	r0, #1
 80015b4:	f04f 30ff 	movlt.w	r0, #4294967295
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80015bc:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80015c4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80015cc:	8b80      	ldrh	r0, [r0, #28]
 80015ce:	4770      	bx	lr

080015d0 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80015d0:	6800      	ldr	r0, [r0, #0]
 80015d2:	f008 b9fb 	b.w	80099cc <STC_StopRamp>
 80015d6:	bf00      	nop

080015d8 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80015d8:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80015da:	6800      	ldr	r0, [r0, #0]
 80015dc:	f008 f9a0 	bl	8009920 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 80015e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80015e4:	f008 b93c 	b.w	8009860 <SPD_GetAvrgMecSpeedUnit>

080015e8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80015e8:	6800      	ldr	r0, [r0, #0]
 80015ea:	f008 b9a3 	b.w	8009934 <STC_GetMecSpeedRefUnit>
 80015ee:	bf00      	nop

080015f0 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80015f0:	6842      	ldr	r2, [r0, #4]
 80015f2:	6810      	ldr	r0, [r2, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	b282      	uxth	r2, r0
 80015f8:	f362 030f 	bfi	r3, r2, #0, #16
 80015fc:	0c00      	lsrs	r0, r0, #16
 80015fe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001602:	b082      	sub	sp, #8
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	b002      	add	sp, #8
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 800160c:	6842      	ldr	r2, [r0, #4]
 800160e:	6850      	ldr	r0, [r2, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	b282      	uxth	r2, r0
 8001614:	f362 030f 	bfi	r3, r2, #0, #16
 8001618:	0c00      	lsrs	r0, r0, #16
 800161a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800161e:	b082      	sub	sp, #8
#endif
}
 8001620:	4618      	mov	r0, r3
 8001622:	b002      	add	sp, #8
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001628:	6842      	ldr	r2, [r0, #4]
 800162a:	68d0      	ldr	r0, [r2, #12]
 800162c:	2300      	movs	r3, #0
 800162e:	b282      	uxth	r2, r0
 8001630:	f362 030f 	bfi	r3, r2, #0, #16
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	f360 431f 	bfi	r3, r0, #16, #16
{
 800163a:	b082      	sub	sp, #8
#endif
}
 800163c:	4618      	mov	r0, r3
 800163e:	b002      	add	sp, #8
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001644:	6842      	ldr	r2, [r0, #4]
 8001646:	6910      	ldr	r0, [r2, #16]
 8001648:	2300      	movs	r3, #0
 800164a:	b282      	uxth	r2, r0
 800164c:	f362 030f 	bfi	r3, r2, #0, #16
 8001650:	0c00      	lsrs	r0, r0, #16
 8001652:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001656:	b082      	sub	sp, #8
#endif
}
 8001658:	4618      	mov	r0, r3
 800165a:	b002      	add	sp, #8
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001660:	6842      	ldr	r2, [r0, #4]
 8001662:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001666:	2300      	movs	r3, #0
 8001668:	b282      	uxth	r2, r0
 800166a:	f362 030f 	bfi	r3, r2, #0, #16
 800166e:	0c00      	lsrs	r0, r0, #16
 8001670:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001674:	b082      	sub	sp, #8
#endif
}
 8001676:	4618      	mov	r0, r3
 8001678:	b002      	add	sp, #8
 800167a:	4770      	bx	lr

0800167c <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800167c:	6842      	ldr	r2, [r0, #4]
 800167e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001682:	2300      	movs	r3, #0
 8001684:	b282      	uxth	r2, r0
 8001686:	f362 030f 	bfi	r3, r2, #0, #16
 800168a:	0c00      	lsrs	r0, r0, #16
 800168c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001690:	b082      	sub	sp, #8
#endif
}
 8001692:	4618      	mov	r0, r3
 8001694:	b002      	add	sp, #8
 8001696:	4770      	bx	lr

08001698 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001698:	6843      	ldr	r3, [r0, #4]
#endif
}
 800169a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800169e:	4770      	bx	lr

080016a0 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80016a0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80016a2:	e9d0 0400 	ldrd	r0, r4, [r0]
 80016a6:	f008 f9cf 	bl	8009a48 <STC_GetDefaultIqdref>
 80016aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80016ae:	8220      	strh	r0, [r4, #16]
 80016b0:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80016b2:	bd10      	pop	{r4, pc}

080016b4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80016b4:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016b8:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80016bc:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016c0:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80016c4:	fb10 f202 	smulbb	r2, r0, r2
 80016c8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80016cc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80016d0:	b084      	sub	sp, #16
 80016d2:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80016d4:	da05      	bge.n	80016e2 <MCM_Clarke+0x2e>
 80016d6:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80016d8:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 80016dc:	da0c      	bge.n	80016f8 <MCM_Clarke+0x44>
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <MCM_Clarke+0x50>)
 80016e0:	e001      	b.n	80016e6 <MCM_Clarke+0x32>
 80016e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2000      	movs	r0, #0
 80016ea:	f363 000f 	bfi	r0, r3, #0, #16
 80016ee:	b293      	uxth	r3, r2
 80016f0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80016f4:	b004      	add	sp, #16
 80016f6:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <MCM_Clarke+0x50>)
 80016fa:	b20a      	sxth	r2, r1
 80016fc:	4282      	cmp	r2, r0
 80016fe:	bfb8      	it	lt
 8001700:	4602      	movlt	r2, r0
 8001702:	e7f0      	b.n	80016e6 <MCM_Clarke+0x32>
 8001704:	ffff8001 	.word	0xffff8001

08001708 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800170a:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800170e:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001712:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001716:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001718:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800171a:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 800171c:	2000      	movs	r0, #0
 800171e:	b29a      	uxth	r2, r3
 8001720:	f362 000f 	bfi	r0, r2, #0, #16
 8001724:	0c1b      	lsrs	r3, r3, #16
{
 8001726:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001728:	f363 401f 	bfi	r0, r3, #16, #16
}
 800172c:	b002      	add	sp, #8
 800172e:	4770      	bx	lr
 8001730:	40020c00 	.word	0x40020c00

08001734 <MCM_Park>:
{
 8001734:	b530      	push	{r4, r5, lr}
 8001736:	4605      	mov	r5, r0
 8001738:	4604      	mov	r4, r0
 800173a:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800173c:	4608      	mov	r0, r1
 800173e:	f7ff ffe3 	bl	8001708 <MCM_Trig_Functions>
 8001742:	b22d      	sxth	r5, r5
 8001744:	b201      	sxth	r1, r0
 8001746:	1424      	asrs	r4, r4, #16
 8001748:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800174a:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800174e:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001756:	da05      	bge.n	8001764 <MCM_Park+0x30>
 8001758:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 800175a:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 800175e:	da22      	bge.n	80017a6 <MCM_Park+0x72>
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <MCM_Park+0x80>)
 8001762:	e001      	b.n	8001768 <MCM_Park+0x34>
 8001764:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001768:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800176c:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001770:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001774:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001778:	da04      	bge.n	8001784 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 800177a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800177e:	da0c      	bge.n	800179a <MCM_Park+0x66>
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MCM_Park+0x80>)
 8001782:	e001      	b.n	8001788 <MCM_Park+0x54>
 8001784:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8001788:	b292      	uxth	r2, r2
 800178a:	2000      	movs	r0, #0
 800178c:	f362 000f 	bfi	r0, r2, #0, #16
 8001790:	b29b      	uxth	r3, r3
 8001792:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001796:	b005      	add	sp, #20
 8001798:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800179a:	4906      	ldr	r1, [pc, #24]	@ (80017b4 <MCM_Park+0x80>)
 800179c:	b21b      	sxth	r3, r3
 800179e:	428b      	cmp	r3, r1
 80017a0:	bfb8      	it	lt
 80017a2:	460b      	movlt	r3, r1
 80017a4:	e7f0      	b.n	8001788 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80017a6:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <MCM_Park+0x80>)
 80017a8:	b212      	sxth	r2, r2
 80017aa:	429a      	cmp	r2, r3
 80017ac:	bfb8      	it	lt
 80017ae:	461a      	movlt	r2, r3
 80017b0:	e7da      	b.n	8001768 <MCM_Park+0x34>
 80017b2:	bf00      	nop
 80017b4:	ffff8001 	.word	0xffff8001

080017b8 <MCM_Rev_Park>:
{
 80017b8:	b530      	push	{r4, r5, lr}
 80017ba:	4605      	mov	r5, r0
 80017bc:	b085      	sub	sp, #20
 80017be:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80017c0:	4608      	mov	r0, r1
 80017c2:	f7ff ffa1 	bl	8001708 <MCM_Trig_Functions>
 80017c6:	1424      	asrs	r4, r4, #16
 80017c8:	1402      	asrs	r2, r0, #16
 80017ca:	b22d      	sxth	r5, r5
 80017cc:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80017ce:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80017d2:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80017d6:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80017da:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80017de:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80017e2:	2000      	movs	r0, #0
 80017e4:	f363 000f 	bfi	r0, r3, #0, #16
 80017e8:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80017ec:	f364 401f 	bfi	r0, r4, #16, #16
}
 80017f0:	b005      	add	sp, #20
 80017f2:	bd30      	pop	{r4, r5, pc}

080017f4 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80017f4:	2800      	cmp	r0, #0
 80017f6:	dd09      	ble.n	800180c <MCM_Sqrt+0x18>
 80017f8:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <MCM_Sqrt+0x1c>)
 80017fc:	f240 1269 	movw	r2, #361	@ 0x169
 8001800:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001802:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001804:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001806:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001808:	b662      	cpsie	i
}
 800180a:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 800180c:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 800180e:	4770      	bx	lr
 8001810:	40020c00 	.word	0x40020c00

08001814 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	2326      	movs	r3, #38	@ 0x26
 8001818:	4916      	ldr	r1, [pc, #88]	@ (8001874 <FOC_Clear+0x60>)
 800181a:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800181e:	2400      	movs	r4, #0
 8001820:	50cc      	str	r4, [r1, r3]
{
 8001822:	4605      	mov	r5, r0
 8001824:	f103 0208 	add.w	r2, r3, #8
 8001828:	1858      	adds	r0, r3, r1
 800182a:	3310      	adds	r3, #16
 800182c:	440a      	add	r2, r1
 800182e:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001830:	4911      	ldr	r1, [pc, #68]	@ (8001878 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001832:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001834:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001838:	6054      	str	r4, [r2, #4]
 800183a:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800183c:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 800183e:	f8c3 4006 	str.w	r4, [r3, #6]
 8001842:	f8c3 400a 	str.w	r4, [r3, #10]
 8001846:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800184a:	f006 fdc9 	bl	80083e0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <FOC_Clear+0x68>)
 8001850:	4621      	mov	r1, r4
 8001852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001856:	f006 fdc3 	bl	80083e0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <FOC_Clear+0x6c>)
 800185c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001860:	f008 f860 	bl	8009924 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <FOC_Clear+0x70>)
 8001866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800186a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800186e:	f000 bfdf 	b.w	8002830 <PWMC_SwitchOffPWM>
 8001872:	bf00      	nop
 8001874:	20000988 	.word	0x20000988
 8001878:	20000044 	.word	0x20000044
 800187c:	20000040 	.word	0x20000040
 8001880:	20000048 	.word	0x20000048
 8001884:	20000984 	.word	0x20000984

08001888 <MCboot>:
  if (MC_NULL == pMCIList)
 8001888:	2800      	cmp	r0, #0
 800188a:	d075      	beq.n	8001978 <MCboot+0xf0>
{
 800188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001890:	f8df b138 	ldr.w	fp, [pc, #312]	@ 80019cc <MCboot+0x144>
    bMCBootCompleted = (uint8_t )0;
 8001894:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80019d0 <MCboot+0x148>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001898:	4d38      	ldr	r5, [pc, #224]	@ (800197c <MCboot+0xf4>)
    RVBS_Init(&BusVoltageSensor_M1);
 800189a:	4e39      	ldr	r6, [pc, #228]	@ (8001980 <MCboot+0xf8>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800189c:	4f39      	ldr	r7, [pc, #228]	@ (8001984 <MCboot+0xfc>)
{
 800189e:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 80018a0:	f04f 0800 	mov.w	r8, #0
 80018a4:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80018a6:	4838      	ldr	r0, [pc, #224]	@ (8001988 <MCboot+0x100>)
 80018a8:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 80018ac:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 80018b0:	f007 f9d0 	bl	8008c54 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 80018b4:	4835      	ldr	r0, [pc, #212]	@ (800198c <MCboot+0x104>)
 80018b6:	f7fe fe51 	bl	800055c <ASPEP_start>
    startTimers();
 80018ba:	f006 fe3f 	bl	800853c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80018be:	4834      	ldr	r0, [pc, #208]	@ (8001990 <MCboot+0x108>)
 80018c0:	f006 fd7a 	bl	80083b8 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80018c4:	4833      	ldr	r0, [pc, #204]	@ (8001994 <MCboot+0x10c>)
 80018c6:	f008 fabb 	bl	8009e40 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80018ca:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <MCboot+0x10c>)
 80018cc:	4930      	ldr	r1, [pc, #192]	@ (8001990 <MCboot+0x108>)
 80018ce:	6828      	ldr	r0, [r5, #0]
 80018d0:	f008 f80e 	bl	80098f0 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80018d4:	4830      	ldr	r0, [pc, #192]	@ (8001998 <MCboot+0x110>)
 80018d6:	f008 fbb1 	bl	800a03c <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80018da:	f8db 3000 	ldr.w	r3, [fp]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	6829      	ldr	r1, [r5, #0]
 80018e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001998 <MCboot+0x110>)
 80018e4:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <MCboot+0x114>)
 80018e6:	482e      	ldr	r0, [pc, #184]	@ (80019a0 <MCboot+0x118>)
 80018e8:	f007 fed2 	bl	8009690 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80018ec:	482d      	ldr	r0, [pc, #180]	@ (80019a4 <MCboot+0x11c>)
 80018ee:	f006 fd63 	bl	80083b8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80018f2:	482d      	ldr	r0, [pc, #180]	@ (80019a8 <MCboot+0x120>)
 80018f4:	f006 fd60 	bl	80083b8 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80018f8:	482c      	ldr	r0, [pc, #176]	@ (80019ac <MCboot+0x124>)
 80018fa:	f002 f83f 	bl	800397c <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80018fe:	4630      	mov	r0, r6
 8001900:	f007 fdda 	bl	80094b8 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <MCboot+0x128>)
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8001906:	482b      	ldr	r0, [pc, #172]	@ (80019b4 <MCboot+0x12c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800190c:	4e2a      	ldr	r6, [pc, #168]	@ (80019b8 <MCboot+0x130>)
 800190e:	609e      	str	r6, [r3, #8]
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8001910:	f002 f834 	bl	800397c <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8001914:	4829      	ldr	r0, [pc, #164]	@ (80019bc <MCboot+0x134>)
 8001916:	f006 fd19 	bl	800834c <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800191a:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <MCboot+0x138>)
 800191c:	4829      	ldr	r0, [pc, #164]	@ (80019c4 <MCboot+0x13c>)
 800191e:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001920:	f007 fe24 	bl	800956c <REMNG_Init>
    FOC_Clear(M1);
 8001924:	4640      	mov	r0, r8
 8001926:	f7ff ff75 	bl	8001814 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800192a:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800192e:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001930:	f886 a024 	strb.w	sl, [r6, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001934:	f008 f888 	bl	8009a48 <STC_GetDefaultIqdref>
 8001938:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800193a:	6828      	ldr	r0, [r5, #0]
 800193c:	f008 f884 	bl	8009a48 <STC_GetDefaultIqdref>
 8001940:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001944:	6829      	ldr	r1, [r5, #0]
 8001946:	f8db 3000 	ldr.w	r3, [fp]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800194a:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800194c:	4632      	mov	r2, r6
 800194e:	4638      	mov	r0, r7
 8001950:	f7ff fd2e 	bl	80013b0 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001954:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <MCboot+0x140>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8001956:	6828      	ldr	r0, [r5, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8001958:	61bb      	str	r3, [r7, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 800195a:	f008 f871 	bl	8009a40 <STC_GetMecSpeedRefUnitDefault>
 800195e:	4642      	mov	r2, r8
 8001960:	4601      	mov	r1, r0
 8001962:	4638      	mov	r0, r7
 8001964:	f7ff fd34 	bl	80013d0 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001968:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 800196a:	f7ff fd15 	bl	8001398 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 800196e:	f889 a000 	strb.w	sl, [r9]
}
 8001972:	b005      	add	sp, #20
 8001974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000048 	.word	0x20000048
 8001980:	20000068 	.word	0x20000068
 8001984:	20000944 	.word	0x20000944
 8001988:	20000234 	.word	0x20000234
 800198c:	20000474 	.word	0x20000474
 8001990:	200003dc 	.word	0x200003dc
 8001994:	200000d4 	.word	0x200000d4
 8001998:	200001fc 	.word	0x200001fc
 800199c:	200000c0 	.word	0x200000c0
 80019a0:	200002d8 	.word	0x200002d8
 80019a4:	200003b0 	.word	0x200003b0
 80019a8:	20000384 	.word	0x20000384
 80019ac:	20000084 	.word	0x20000084
 80019b0:	2000003c 	.word	0x2000003c
 80019b4:	200000b0 	.word	0x200000b0
 80019b8:	20000988 	.word	0x20000988
 80019bc:	20000094 	.word	0x20000094
 80019c0:	20000980 	.word	0x20000980
 80019c4:	20000050 	.word	0x20000050
 80019c8:	20000428 	.word	0x20000428
 80019cc:	20000984 	.word	0x20000984
 80019d0:	20000978 	.word	0x20000978

080019d4 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80019d8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80019da:	4c08      	ldr	r4, [pc, #32]	@ (80019fc <FOC_CalcCurrRef+0x24>)
 80019dc:	2326      	movs	r3, #38	@ 0x26
 80019de:	fb03 4400 	mla	r4, r3, r0, r4
 80019e2:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80019e6:	b103      	cbz	r3, 80019ea <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80019e8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <FOC_CalcCurrRef+0x28>)
 80019ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80019f0:	f007 fff0 	bl	80099d4 <STC_CalcTorqueReference>
 80019f4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80019f6:	8220      	strh	r0, [r4, #16]
}
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	bf00      	nop
 80019fc:	20000988 	.word	0x20000988
 8001a00:	20000048 	.word	0x20000048

08001a04 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001a04:	4b01      	ldr	r3, [pc, #4]	@ (8001a0c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001a06:	8018      	strh	r0, [r3, #0]
}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2000097c 	.word	0x2000097c

08001a10 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001a12:	8818      	ldrh	r0, [r3, #0]
 8001a14:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a16:	fab0 f080 	clz	r0, r0
 8001a1a:	0940      	lsrs	r0, r0, #5
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000097c 	.word	0x2000097c

08001a24 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a24:	4b01      	ldr	r3, [pc, #4]	@ (8001a2c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a26:	8018      	strh	r0, [r3, #0]
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000097a 	.word	0x2000097a

08001a30 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001a32:	8818      	ldrh	r0, [r3, #0]
 8001a34:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a36:	fab0 f080 	clz	r0, r0
 8001a3a:	0940      	lsrs	r0, r0, #5
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000097a 	.word	0x2000097a

08001a44 <TSK_MediumFrequencyTaskM1>:
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001a48:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001a4a:	4669      	mov	r1, sp
 8001a4c:	48ba      	ldr	r0, [pc, #744]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2f4>)
  int16_t wAux = 0;
 8001a4e:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001a52:	f008 f901 	bl	8009c58 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001a56:	4eb9      	ldr	r6, [pc, #740]	@ (8001d3c <TSK_MediumFrequencyTaskM1+0x2f8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a58:	4cb9      	ldr	r4, [pc, #740]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001a5a:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001a5c:	6830      	ldr	r0, [r6, #0]
 8001a5e:	f006 fd33 	bl	80084c8 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff fd1e 	bl	80014a4 <MCI_GetCurrentFaults>
 8001a68:	b118      	cbz	r0, 8001a72 <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	77e3      	strb	r3, [r4, #31]
}
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fd14 	bl	80014a0 <MCI_GetOccurredFaults>
 8001a78:	bb70      	cbnz	r0, 8001ad8 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 8001a7a:	7fe3      	ldrb	r3, [r4, #31]
 8001a7c:	2b13      	cmp	r3, #19
 8001a7e:	d8f6      	bhi.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
 8001a80:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <TSK_MediumFrequencyTaskM1+0x44>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001c59 	.word	0x08001c59
 8001a8c:	08001a6f 	.word	0x08001a6f
 8001a90:	08001a6f 	.word	0x08001a6f
 8001a94:	08001a6f 	.word	0x08001a6f
 8001a98:	08001bc7 	.word	0x08001bc7
 8001a9c:	08001a6f 	.word	0x08001a6f
 8001aa0:	08001ba3 	.word	0x08001ba3
 8001aa4:	08001a6f 	.word	0x08001a6f
 8001aa8:	08001b83 	.word	0x08001b83
 8001aac:	08001a6f 	.word	0x08001a6f
 8001ab0:	08001ad9 	.word	0x08001ad9
 8001ab4:	08001b75 	.word	0x08001b75
 8001ab8:	08001a6f 	.word	0x08001a6f
 8001abc:	08001a6f 	.word	0x08001a6f
 8001ac0:	08001a6f 	.word	0x08001a6f
 8001ac4:	08001a6f 	.word	0x08001a6f
 8001ac8:	08001b33 	.word	0x08001b33
 8001acc:	08001b01 	.word	0x08001b01
 8001ad0:	08001a6f 	.word	0x08001a6f
 8001ad4:	08001ae1 	.word	0x08001ae1
      Mci[M1].State = FAULT_OVER;
 8001ad8:	230b      	movs	r3, #11
 8001ada:	77e3      	strb	r3, [r4, #31]
}
 8001adc:	b002      	add	sp, #8
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ae0:	7fa3      	ldrb	r3, [r4, #30]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	f000 80d0 	beq.w	8001c88 <TSK_MediumFrequencyTaskM1+0x244>
            if (! RUC_Exec(&RevUpControlM1))
 8001ae8:	4896      	ldr	r0, [pc, #600]	@ (8001d44 <TSK_MediumFrequencyTaskM1+0x300>)
 8001aea:	f007 fe53 	bl	8009794 <RUC_Exec>
 8001aee:	4602      	mov	r2, r0
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f040 80e4 	bne.w	8001cbe <TSK_MediumFrequencyTaskM1+0x27a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001af6:	4892      	ldr	r0, [pc, #584]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001af8:	2110      	movs	r1, #16
 8001afa:	f7ff fc87 	bl	800140c <MCI_FaultProcessing>
 8001afe:	e7b6      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b00:	7fa3      	ldrb	r3, [r4, #30]
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001b02:	4d91      	ldr	r5, [pc, #580]	@ (8001d48 <TSK_MediumFrequencyTaskM1+0x304>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b04:	2b05      	cmp	r3, #5
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001b06:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b08:	f000 80c0 	beq.w	8001c8c <TSK_MediumFrequencyTaskM1+0x248>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	f000 fe93 	bl	8002838 <PWMC_CurrentReadingCalibr>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d0ab      	beq.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001b16:	7fa3      	ldrb	r3, [r4, #30]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	f000 8103 	beq.w	8001d24 <TSK_MediumFrequencyTaskM1+0x2e0>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001b1e:	6828      	ldr	r0, [r5, #0]
 8001b20:	2100      	movs	r1, #0
 8001b22:	f006 fff9 	bl	8008b18 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001b26:	2014      	movs	r0, #20
 8001b28:	f7ff ff6c 	bl	8001a04 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	77e3      	strb	r3, [r4, #31]
 8001b30:	e79d      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b32:	7fa3      	ldrb	r3, [r4, #30]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	f000 80a7 	beq.w	8001c88 <TSK_MediumFrequencyTaskM1+0x244>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001b3a:	f7ff ff69 	bl	8001a10 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d095      	beq.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001b42:	4d81      	ldr	r5, [pc, #516]	@ (8001d48 <TSK_MediumFrequencyTaskM1+0x304>)
 8001b44:	6828      	ldr	r0, [r5, #0]
 8001b46:	f006 ff29 	bl	800899c <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b4a:	4a80      	ldr	r2, [pc, #512]	@ (8001d4c <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001b4c:	4b80      	ldr	r3, [pc, #512]	@ (8001d50 <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b4e:	4981      	ldr	r1, [pc, #516]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001b50:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b58:	f007 fee0 	bl	800991c <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001b5c:	4876      	ldr	r0, [pc, #472]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001b5e:	f008 f949 	bl	8009df4 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fe56 	bl	8001814 <FOC_Clear>
                Mci[M1].State = START;
 8001b68:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b6a:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001b6c:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b6e:	f000 fe61 	bl	8002834 <PWMC_SwitchOnPWM>
 8001b72:	e77c      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001b74:	7fa3      	ldrb	r3, [r4, #30]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	f47f af79 	bne.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	83e3      	strh	r3, [r4, #30]
 8001b80:	e775      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001b82:	f7ff ff55 	bl	8001a30 <TSK_StopPermanencyTimeHasElapsedM1>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	f43f af71 	beq.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d4c <TSK_MediumFrequencyTaskM1+0x308>)
 8001b8e:	4971      	ldr	r1, [pc, #452]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	f007 fec3 	bl	800991c <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001b96:	486f      	ldr	r0, [pc, #444]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001b98:	f008 fa42 	bl	800a020 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	83e3      	strh	r3, [r4, #30]
 8001ba0:	e765      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ba2:	7fa3      	ldrb	r3, [r4, #30]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d06f      	beq.n	8001c88 <TSK_MediumFrequencyTaskM1+0x244>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001ba8:	4865      	ldr	r0, [pc, #404]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001baa:	f7ff fc3b 	bl	8001424 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff ff12 	bl	80019d8 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001bb4:	2d00      	cmp	r5, #0
 8001bb6:	f47f af5a 	bne.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001bba:	4861      	ldr	r0, [pc, #388]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001bbc:	462a      	mov	r2, r5
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	f7ff fc24 	bl	800140c <MCI_FaultProcessing>
 8001bc4:	e753      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001bc6:	7fa3      	ldrb	r3, [r4, #30]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d05d      	beq.n	8001c88 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8001bcc:	485d      	ldr	r0, [pc, #372]	@ (8001d44 <TSK_MediumFrequencyTaskM1+0x300>)
 8001bce:	f007 fde1 	bl	8009794 <RUC_Exec>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d168      	bne.n	8001caa <TSK_MediumFrequencyTaskM1+0x266>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001bd8:	4859      	ldr	r0, [pc, #356]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001bda:	2110      	movs	r1, #16
 8001bdc:	f7ff fc16 	bl	800140c <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001be0:	485c      	ldr	r0, [pc, #368]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001be2:	f10d 0102 	add.w	r1, sp, #2
 8001be6:	f008 fa7f 	bl	800a0e8 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001bea:	4856      	ldr	r0, [pc, #344]	@ (8001d44 <TSK_MediumFrequencyTaskM1+0x300>)
 8001bec:	f007 fe08 	bl	8009800 <RUC_FirstAccelerationStageReached>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	f43f af3c 	beq.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001bf6:	f10d 0102 	add.w	r1, sp, #2
 8001bfa:	484f      	ldr	r0, [pc, #316]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001bfc:	f008 f95a 	bl	8009eb4 <STO_PLL_IsObserverConverged>
 8001c00:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c02:	484f      	ldr	r0, [pc, #316]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001c04:	f7ff fcb8 	bl	8001578 <MCI_GetImposedMotorDirection>
 8001c08:	b241      	sxtb	r1, r0
 8001c0a:	484b      	ldr	r0, [pc, #300]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001c0c:	f008 fa04 	bl	800a018 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001c10:	4850      	ldr	r0, [pc, #320]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001c12:	4629      	mov	r1, r5
 8001c14:	f008 fafe 	bl	800a214 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001c18:	2d00      	cmp	r5, #0
 8001c1a:	f43f af28 	beq.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001c1e:	4846      	ldr	r0, [pc, #280]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001c20:	4e4b      	ldr	r6, [pc, #300]	@ (8001d50 <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 8001c22:	4d4d      	ldr	r5, [pc, #308]	@ (8001d58 <TSK_MediumFrequencyTaskM1+0x314>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001c24:	f007 fe18 	bl	8009858 <SPD_GetElAngle>
 8001c28:	4601      	mov	r1, r0
 8001c2a:	6870      	ldr	r0, [r6, #4]
 8001c2c:	f7ff fd82 	bl	8001734 <MCM_Park>
 8001c30:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001c32:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001c34:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001c36:	f007 fc99 	bl	800956c <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001c3a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001c3e:	6828      	ldr	r0, [r5, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f007 fcdf 	bl	8009604 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001c46:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001c4a:	6828      	ldr	r0, [r5, #0]
 8001c4c:	2219      	movs	r2, #25
 8001c4e:	f007 fcd9 	bl	8009604 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001c52:	2313      	movs	r3, #19
 8001c54:	77e3      	strb	r3, [r4, #31]
 8001c56:	e70a      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001c58:	7fa5      	ldrb	r5, [r4, #30]
 8001c5a:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8001c5e:	2d01      	cmp	r5, #1
 8001c60:	f47f af05 	bne.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c64:	4836      	ldr	r0, [pc, #216]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001c66:	4e38      	ldr	r6, [pc, #224]	@ (8001d48 <TSK_MediumFrequencyTaskM1+0x304>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c68:	f7ff fc86 	bl	8001578 <MCI_GetImposedMotorDirection>
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	4835      	ldr	r0, [pc, #212]	@ (8001d44 <TSK_MediumFrequencyTaskM1+0x300>)
 8001c70:	f007 fd4c 	bl	800970c <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001c74:	6830      	ldr	r0, [r6, #0]
 8001c76:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d14b      	bne.n	8001d16 <TSK_MediumFrequencyTaskM1+0x2d2>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001c7e:	f000 fddb 	bl	8002838 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001c82:	2311      	movs	r3, #17
 8001c84:	77e3      	strb	r3, [r4, #31]
 8001c86:	e6f2      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <TSK_MediumFrequencyTaskM1+0x304>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	f006 fe86 	bl	800899c <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fdbf 	bl	8001814 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001c96:	6830      	ldr	r0, [r6, #0]
 8001c98:	f006 fc32 	bl	8008500 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001c9c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ca0:	f7ff fec0 	bl	8001a24 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	77e3      	strb	r3, [r4, #31]
}
 8001ca8:	e6e1      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001caa:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <TSK_MediumFrequencyTaskM1+0x308>)
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	f007 fe91 	bl	80099d4 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001cb2:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001cb4:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8001cb8:	8218      	strh	r0, [r3, #16]
 8001cba:	825a      	strh	r2, [r3, #18]
 8001cbc:	e790      	b.n	8001be0 <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001cbe:	4825      	ldr	r0, [pc, #148]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001cc0:	a901      	add	r1, sp, #4
 8001cc2:	f008 fa11 	bl	800a0e8 <VSS_CalcAvrgMecSpeedUnit>
 8001cc6:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001cc8:	4822      	ldr	r0, [pc, #136]	@ (8001d54 <TSK_MediumFrequencyTaskM1+0x310>)
 8001cca:	f008 fab1 	bl	800a230 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001cce:	b915      	cbnz	r5, 8001cd6 <TSK_MediumFrequencyTaskM1+0x292>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	f43f aecc 	beq.w	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001cd8:	4820      	ldr	r0, [pc, #128]	@ (8001d5c <TSK_MediumFrequencyTaskM1+0x318>)
 8001cda:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001cde:	4d1b      	ldr	r5, [pc, #108]	@ (8001d4c <TSK_MediumFrequencyTaskM1+0x308>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001ce0:	f006 fb88 	bl	80083f4 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001ce4:	b201      	sxth	r1, r0
 8001ce6:	fb06 f101 	mul.w	r1, r6, r1
 8001cea:	481c      	ldr	r0, [pc, #112]	@ (8001d5c <TSK_MediumFrequencyTaskM1+0x318>)
 8001cec:	f006 fb78 	bl	80083e0 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001cf0:	4911      	ldr	r1, [pc, #68]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001cf2:	6828      	ldr	r0, [r5, #0]
 8001cf4:	f007 fe12 	bl	800991c <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fe6b 	bl	80019d4 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fe6a 	bl	80019d8 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001d04:	6828      	ldr	r0, [r5, #0]
 8001d06:	f007 fead 	bl	8009a64 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001d0a:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001d0c:	f7ff fb8a 	bl	8001424 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001d10:	2306      	movs	r3, #6
 8001d12:	77e3      	strb	r3, [r4, #31]
 8001d14:	e6ab      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001d16:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001d18:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001d1c:	f000 fd8c 	bl	8002838 <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001d20:	6830      	ldr	r0, [r6, #0]
 8001d22:	e6fd      	b.n	8001b20 <TSK_MediumFrequencyTaskM1+0xdc>
                FOC_Clear(M1);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fd75 	bl	8001814 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001d2a:	6830      	ldr	r0, [r6, #0]
 8001d2c:	f006 fbe8 	bl	8008500 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001d30:	2300      	movs	r3, #0
 8001d32:	83e3      	strh	r3, [r4, #30]
 8001d34:	e69b      	b.n	8001a6e <TSK_MediumFrequencyTaskM1+0x2a>
 8001d36:	bf00      	nop
 8001d38:	200000d4 	.word	0x200000d4
 8001d3c:	2000003c 	.word	0x2000003c
 8001d40:	20000944 	.word	0x20000944
 8001d44:	200002d8 	.word	0x200002d8
 8001d48:	20000984 	.word	0x20000984
 8001d4c:	20000048 	.word	0x20000048
 8001d50:	20000988 	.word	0x20000988
 8001d54:	200001fc 	.word	0x200001fc
 8001d58:	20000980 	.word	0x20000980
 8001d5c:	200003dc 	.word	0x200003dc

08001d60 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <MC_Scheduler+0x78>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d000      	beq.n	8001d6a <MC_Scheduler+0xa>
 8001d68:	4770      	bx	lr
{
 8001d6a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001d6c:	4c1b      	ldr	r4, [pc, #108]	@ (8001ddc <MC_Scheduler+0x7c>)
 8001d6e:	8823      	ldrh	r3, [r4, #0]
 8001d70:	b19b      	cbz	r3, 8001d9a <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001d76:	4a1a      	ldr	r2, [pc, #104]	@ (8001de0 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001d78:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001d7a:	8813      	ldrh	r3, [r2, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b11b      	cbz	r3, 8001d88 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001d80:	8813      	ldrh	r3, [r2, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001d88:	4a16      	ldr	r2, [pc, #88]	@ (8001de4 <MC_Scheduler+0x84>)
 8001d8a:	8813      	ldrh	r3, [r2, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b11b      	cbz	r3, 8001d98 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001d90:	8813      	ldrh	r3, [r2, #0]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8013      	strh	r3, [r2, #0]
}
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d9a:	4d13      	ldr	r5, [pc, #76]	@ (8001de8 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001d9c:	f7ff fe52 	bl	8001a44 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001da0:	f7ff fb00 	bl	80013a4 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001da4:	4629      	mov	r1, r5
 8001da6:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001daa:	6883      	ldr	r3, [r0, #8]
 8001dac:	4798      	blx	r3
 8001dae:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001db0:	b130      	cbz	r0, 8001dc0 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001db2:	4629      	mov	r1, r5
 8001db4:	220a      	movs	r2, #10
 8001db6:	f851 0b08 	ldr.w	r0, [r1], #8
 8001dba:	6803      	ldr	r3, [r0, #0]
 8001dbc:	4798      	blx	r3
 8001dbe:	b908      	cbnz	r0, 8001dc4 <MC_Scheduler+0x64>
{
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e7d8      	b.n	8001d76 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	f000 fadb 	bl	8002380 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001dca:	6828      	ldr	r0, [r5, #0]
 8001dcc:	89ea      	ldrh	r2, [r5, #14]
 8001dce:	6846      	ldr	r6, [r0, #4]
 8001dd0:	68a9      	ldr	r1, [r5, #8]
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	47b0      	blx	r6
 8001dd6:	e7f3      	b.n	8001dc0 <MC_Scheduler+0x60>
 8001dd8:	20000978 	.word	0x20000978
 8001ddc:	2000097e 	.word	0x2000097e
 8001de0:	2000097c 	.word	0x2000097c
 8001de4:	2000097a 	.word	0x2000097a
 8001de8:	20000464 	.word	0x20000464

08001dec <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8001df0:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001f80 <TSK_HighFrequencyTask+0x194>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001df4:	4c57      	ldr	r4, [pc, #348]	@ (8001f54 <TSK_HighFrequencyTask+0x168>)
  if (SWITCH_OVER == Mci[M1].State)
 8001df6:	f898 301f 	ldrb.w	r3, [r8, #31]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001dfa:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001dfe:	b089      	sub	sp, #36	@ 0x24
  if (SWITCH_OVER == Mci[M1].State)
 8001e00:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001e02:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8001e04:	f000 809a 	beq.w	8001f3c <TSK_HighFrequencyTask+0x150>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <TSK_HighFrequencyTask+0x16c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001e0a:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8001f88 <TSK_HighFrequencyTask+0x19c>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	f007 fd86 	bl	8009920 <STC_GetSpeedSensor>
 8001e14:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001e16:	f007 fd1f 	bl	8009858 <SPD_GetElAngle>
 8001e1a:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001e1c:	4638      	mov	r0, r7
 8001e1e:	f007 fd23 	bl	8009868 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001e22:	a902      	add	r1, sp, #8
 8001e24:	f8d9 0000 	ldr.w	r0, [r9]
 8001e28:	f000 fb86 	bl	8002538 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001e2c:	f001 ffe0 	bl	8003df0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001e30:	f001 ff9a 	bl	8003d68 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001e34:	9802      	ldr	r0, [sp, #8]
 8001e36:	f7ff fc3d 	bl	80016b4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e3a:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001e3c:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e3e:	f7ff fc79 	bl	8001734 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e42:	4b46      	ldr	r3, [pc, #280]	@ (8001f5c <TSK_HighFrequencyTask+0x170>)
 8001e44:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e48:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e4a:	b200      	sxth	r0, r0
 8001e4c:	1a09      	subs	r1, r1, r0
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f006 fafa 	bl	8008448 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e54:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001e58:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001e5c:	1ac9      	subs	r1, r1, r3
 8001e5e:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <TSK_HighFrequencyTask+0x174>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e60:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	f006 faf0 	bl	8008448 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e68:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001e6c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001e70:	9901      	ldr	r1, [sp, #4]
 8001e72:	483c      	ldr	r0, [pc, #240]	@ (8001f64 <TSK_HighFrequencyTask+0x178>)
 8001e74:	f005 fe04 	bl	8007a80 <Circle_Limitation>
 8001e78:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001e7a:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e7c:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001e7e:	f007 fcf3 	bl	8009868 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e82:	4629      	mov	r1, r5
 8001e84:	9801      	ldr	r0, [sp, #4]
 8001e86:	f7ff fc97 	bl	80017b8 <MCM_Rev_Park>
 8001e8a:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e8c:	f8d9 0000 	ldr.w	r0, [r9]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e90:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e92:	f000 fb53 	bl	800253c <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001e96:	9b02      	ldr	r3, [sp, #8]
 8001e98:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e9a:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e9c:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001e9e:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001ea0:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 8001ea2:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 8001ea4:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 8001ea6:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8001eaa:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001eac:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001eb0:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001eb2:	d038      	beq.n	8001f26 <TSK_HighFrequencyTask+0x13a>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001eb4:	482c      	ldr	r0, [pc, #176]	@ (8001f68 <TSK_HighFrequencyTask+0x17c>)
 8001eb6:	f007 fca3 	bl	8009800 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001ebe:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ec0:	482a      	ldr	r0, [pc, #168]	@ (8001f6c <TSK_HighFrequencyTask+0x180>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001ec2:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ec4:	f005 fdd4 	bl	8007a70 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ec8:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001eca:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ecc:	4828      	ldr	r0, [pc, #160]	@ (8001f70 <TSK_HighFrequencyTask+0x184>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ece:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ed2:	f007 fdcf 	bl	8009a74 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8001ed6:	4826      	ldr	r0, [pc, #152]	@ (8001f70 <TSK_HighFrequencyTask+0x184>)
 8001ed8:	f007 ff60 	bl	8009d9c <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8001edc:	b18c      	cbz	r4, 8001f02 <TSK_HighFrequencyTask+0x116>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001ede:	f898 301f 	ldrb.w	r3, [r8, #31]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d014      	beq.n	8001f10 <TSK_HighFrequencyTask+0x124>
 8001ee6:	2b13      	cmp	r3, #19
 8001ee8:	d012      	beq.n	8001f10 <TSK_HighFrequencyTask+0x124>
  GLOBAL_TIMESTAMP++;
 8001eea:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <TSK_HighFrequencyTask+0x188>)
  if (0U == MCPA_UART_A.Mark)
 8001eec:	4822      	ldr	r0, [pc, #136]	@ (8001f78 <TSK_HighFrequencyTask+0x18c>)
  GLOBAL_TIMESTAMP++;
 8001eee:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001ef0:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001ef8:	b9d1      	cbnz	r1, 8001f30 <TSK_HighFrequencyTask+0x144>
}
 8001efa:	2000      	movs	r0, #0
 8001efc:	b009      	add	sp, #36	@ 0x24
 8001efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001f02:	481b      	ldr	r0, [pc, #108]	@ (8001f70 <TSK_HighFrequencyTask+0x184>)
 8001f04:	f008 f86c 	bl	8009fe0 <STO_ResetPLL>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001f08:	f898 301f 	ldrb.w	r3, [r8, #31]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d1ea      	bne.n	8001ee6 <TSK_HighFrequencyTask+0xfa>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f10:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <TSK_HighFrequencyTask+0x184>)
 8001f12:	f007 fca1 	bl	8009858 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f16:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f18:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f1a:	4818      	ldr	r0, [pc, #96]	@ (8001f7c <TSK_HighFrequencyTask+0x190>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f1c:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f20:	f008 f890 	bl	800a044 <VSS_CalcElAngle>
 8001f24:	e7e1      	b.n	8001eea <TSK_HighFrequencyTask+0xfe>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001f26:	4816      	ldr	r0, [pc, #88]	@ (8001f80 <TSK_HighFrequencyTask+0x194>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f7ff fa6f 	bl	800140c <MCI_FaultProcessing>
 8001f2e:	e7dc      	b.n	8001eea <TSK_HighFrequencyTask+0xfe>
    MCPA_dataLog (&MCPA_UART_A);
 8001f30:	f006 f892 	bl	8008058 <MCPA_dataLog>
}
 8001f34:	2000      	movs	r0, #0
 8001f36:	b009      	add	sp, #36	@ 0x24
 8001f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001f3c:	4d11      	ldr	r5, [pc, #68]	@ (8001f84 <TSK_HighFrequencyTask+0x198>)
 8001f3e:	6828      	ldr	r0, [r5, #0]
 8001f40:	f007 fb3e 	bl	80095c0 <REMNG_RampCompleted>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	f47f af5f 	bne.w	8001e08 <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001f4a:	6828      	ldr	r0, [r5, #0]
 8001f4c:	f007 fb16 	bl	800957c <REMNG_Calc>
 8001f50:	8220      	strh	r0, [r4, #16]
 8001f52:	e759      	b.n	8001e08 <TSK_HighFrequencyTask+0x1c>
 8001f54:	20000988 	.word	0x20000988
 8001f58:	20000048 	.word	0x20000048
 8001f5c:	20000044 	.word	0x20000044
 8001f60:	20000040 	.word	0x20000040
 8001f64:	2000004c 	.word	0x2000004c
 8001f68:	200002d8 	.word	0x200002d8
 8001f6c:	20000068 	.word	0x20000068
 8001f70:	200000d4 	.word	0x200000d4
 8001f74:	20001ba0 	.word	0x20001ba0
 8001f78:	20000438 	.word	0x20000438
 8001f7c:	200001fc 	.word	0x200001fc
 8001f80:	20000944 	.word	0x20000944
 8001f84:	20000980 	.word	0x20000980
 8001f88:	20000984 	.word	0x20000984

08001f8c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001f8e:	4604      	mov	r4, r0
 8001f90:	b1a0      	cbz	r0, 8001fbc <TSK_SafetyTask_PWMOFF+0x30>
  }
  else
  {
    /* Nothing to do */
  }
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f92:	4e23      	ldr	r6, [pc, #140]	@ (8002020 <TSK_SafetyTask_PWMOFF+0x94>)
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f94:	4d23      	ldr	r5, [pc, #140]	@ (8002024 <TSK_SafetyTask_PWMOFF+0x98>)
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f96:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001f9a:	f000 fc95 	bl	80028c8 <PWMC_IsFaultOccurred>
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f9e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001fa2:	4601      	mov	r1, r0
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001fa4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001fa8:	43ca      	mvns	r2, r1
 8001faa:	4628      	mov	r0, r5
 8001fac:	b292      	uxth	r2, r2
 8001fae:	f7ff fa2d 	bl	800140c <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f7ff fad6 	bl	8001564 <MCI_GetFaultState>
 8001fb8:	b9e0      	cbnz	r0, 8001ff4 <TSK_SafetyTask_PWMOFF+0x68>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001fbc:	481a      	ldr	r0, [pc, #104]	@ (8002028 <TSK_SafetyTask_PWMOFF+0x9c>)
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001fbe:	4e18      	ldr	r6, [pc, #96]	@ (8002020 <TSK_SafetyTask_PWMOFF+0x94>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001fc0:	f001 fdd8 	bl	8003b74 <RCM_ExecRegularConv>
 8001fc4:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001fc6:	4819      	ldr	r0, [pc, #100]	@ (800202c <TSK_SafetyTask_PWMOFF+0xa0>)
 8001fc8:	f006 f9cc 	bl	8008364 <NTC_CalcAvTemp>
 8001fcc:	4607      	mov	r7, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001fce:	6830      	ldr	r0, [r6, #0]
 8001fd0:	f000 fc7a 	bl	80028c8 <PWMC_IsFaultOccurred>
 8001fd4:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001fd6:	4816      	ldr	r0, [pc, #88]	@ (8002030 <TSK_SafetyTask_PWMOFF+0xa4>)
 8001fd8:	f001 fdcc 	bl	8003b74 <RCM_ExecRegularConv>
 8001fdc:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001fde:	4815      	ldr	r0, [pc, #84]	@ (8002034 <TSK_SafetyTask_PWMOFF+0xa8>)
 8001fe0:	f007 fa96 	bl	8009510 <RVBS_CalcAvVbus>
 8001fe4:	4307      	orrs	r7, r0
 8001fe6:	f007 070e 	and.w	r7, r7, #14
 8001fea:	ea45 0107 	orr.w	r1, r5, r7
 8001fee:	b289      	uxth	r1, r1
 8001ff0:	4d0c      	ldr	r5, [pc, #48]	@ (8002024 <TSK_SafetyTask_PWMOFF+0x98>)
 8001ff2:	e7d9      	b.n	8001fa8 <TSK_SafetyTask_PWMOFF+0x1c>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ff4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ff8:	f000 fc1a 	bl	8002830 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001ffc:	480e      	ldr	r0, [pc, #56]	@ (8002038 <TSK_SafetyTask_PWMOFF+0xac>)
 8001ffe:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002002:	b94b      	cbnz	r3, 8002018 <TSK_SafetyTask_PWMOFF+0x8c>
    FOC_Clear(bMotor);
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff fc05 	bl	8001814 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800200a:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <TSK_SafetyTask_PWMOFF+0xb0>)
 800200c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002014:	f006 ba74 	b.w	8008500 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002018:	f006 f8de 	bl	80081d8 <MCPA_flushDataLog>
 800201c:	e7f2      	b.n	8002004 <TSK_SafetyTask_PWMOFF+0x78>
 800201e:	bf00      	nop
 8002020:	20000984 	.word	0x20000984
 8002024:	20000944 	.word	0x20000944
 8002028:	200000b0 	.word	0x200000b0
 800202c:	20000094 	.word	0x20000094
 8002030:	20000084 	.word	0x20000084
 8002034:	20000068 	.word	0x20000068
 8002038:	20000438 	.word	0x20000438
 800203c:	2000003c 	.word	0x2000003c

08002040 <TSK_SafetyTask>:
{
 8002040:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <TSK_SafetyTask+0x1c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d000      	beq.n	800204c <TSK_SafetyTask+0xc>
}
 800204a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff ff9d 	bl	8001f8c <TSK_SafetyTask_PWMOFF>
}
 8002052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002056:	f001 be53 	b.w	8003d00 <RCM_ExecUserConv>
 800205a:	bf00      	nop
 800205c:	20000978 	.word	0x20000978

08002060 <MC_RunMotorControlTasks>:
{
 8002060:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <MC_RunMotorControlTasks+0x14>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b903      	cbnz	r3, 800206a <MC_RunMotorControlTasks+0xa>
}
 8002068:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800206a:	f7ff fe79 	bl	8001d60 <MC_Scheduler>
    TSK_SafetyTask();
 800206e:	f7ff ffe7 	bl	8002040 <TSK_SafetyTask>
}
 8002072:	bd08      	pop	{r3, pc}
 8002074:	20000978 	.word	0x20000978

08002078 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002078:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800207a:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <TSK_HardwareFaultTask+0x18>)
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	f006 fc8d 	bl	800899c <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002086:	4803      	ldr	r0, [pc, #12]	@ (8002094 <TSK_HardwareFaultTask+0x1c>)
 8002088:	2200      	movs	r2, #0
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	f7ff b9be 	b.w	800140c <MCI_FaultProcessing>
 8002090:	20000984 	.word	0x20000984
 8002094:	20000944 	.word	0x20000944

08002098 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002098:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800209a:	f7ff f975 	bl	8001388 <MC_GetSTMStateMotor1>
 800209e:	b918      	cbnz	r0, 80020a8 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80020a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80020a4:	f7ff b958 	b.w	8001358 <MC_StartMotor1>
}
 80020a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80020ac:	f7ff b95a 	b.w	8001364 <MC_StopMotor1>

080020b0 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80020b0:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b2:	4a50      	ldr	r2, [pc, #320]	@ (80021f4 <mc_lock_pins+0x144>)
 80020b4:	4950      	ldr	r1, [pc, #320]	@ (80021f8 <mc_lock_pins+0x148>)
 80020b6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b8:	2504      	movs	r5, #4
 80020ba:	b092      	sub	sp, #72	@ 0x48
 80020bc:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020be:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80020c0:	69d3      	ldr	r3, [r2, #28]
 80020c2:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c4:	484d      	ldr	r0, [pc, #308]	@ (80021fc <mc_lock_pins+0x14c>)
  (void) temp;
 80020c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ca:	2602      	movs	r6, #2
 80020cc:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ce:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020d0:	69d3      	ldr	r3, [r2, #28]
 80020d2:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 80020d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020d6:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020da:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 80020de:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020e0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020e4:	69d4      	ldr	r4, [r2, #28]
 80020e6:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 80020ec:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ee:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f0:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 80020f4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f6:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f8:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020fa:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80020fe:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 8002102:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002106:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002108:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210a:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800210c:	69d4      	ldr	r4, [r2, #28]
 800210e:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8002110:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002112:	4c3b      	ldr	r4, [pc, #236]	@ (8002200 <mc_lock_pins+0x150>)
 8002114:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002116:	2780      	movs	r7, #128	@ 0x80
 8002118:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800211a:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800211c:	69dc      	ldr	r4, [r3, #28]
 800211e:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8002120:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002122:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002124:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002126:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002128:	69d8      	ldr	r0, [r3, #28]
 800212a:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 800212c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212e:	4835      	ldr	r0, [pc, #212]	@ (8002204 <mc_lock_pins+0x154>)
 8002130:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002132:	2408      	movs	r4, #8
 8002134:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002136:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002138:	69d8      	ldr	r0, [r3, #28]
 800213a:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 800213c:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800213e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002140:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002142:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002144:	69d9      	ldr	r1, [r3, #28]
 8002146:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002148:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800214a:	492f      	ldr	r1, [pc, #188]	@ (8002208 <mc_lock_pins+0x158>)
  (void) temp;
 800214c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800214e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002150:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002152:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002154:	69d9      	ldr	r1, [r3, #28]
 8002156:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002158:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800215a:	492c      	ldr	r1, [pc, #176]	@ (800220c <mc_lock_pins+0x15c>)
  (void) temp;
 800215c:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800215e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002160:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002162:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002164:	69dc      	ldr	r4, [r3, #28]
 8002166:	9407      	str	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002168:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800216c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  (void) temp;
 8002170:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002172:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002174:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002176:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002178:	69dc      	ldr	r4, [r3, #28]
 800217a:	9406      	str	r4, [sp, #24]
  (void) temp;
 800217c:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800217e:	4c24      	ldr	r4, [pc, #144]	@ (8002210 <mc_lock_pins+0x160>)
 8002180:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002182:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8002186:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002188:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800218a:	69dc      	ldr	r4, [r3, #28]
 800218c:	9405      	str	r4, [sp, #20]
  (void) temp;
 800218e:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002190:	f44f 3481 	mov.w	r4, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002194:	f44f 7500 	mov.w	r5, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002198:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800219a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800219c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800219e:	69dc      	ldr	r4, [r3, #28]
 80021a0:	9404      	str	r4, [sp, #16]
  (void) temp;
 80021a2:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021a4:	f44f 3482 	mov.w	r4, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021a8:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021ac:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021ae:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021b0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021b2:	69dc      	ldr	r4, [r3, #28]
 80021b4:	9403      	str	r4, [sp, #12]
  (void) temp;
 80021b6:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021b8:	f44f 3488 	mov.w	r4, #69632	@ 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021bc:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021c0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021c2:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021c4:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	9302      	str	r3, [sp, #8]
  (void) temp;
 80021ca:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021cc:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021ce:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021d0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021d2:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <mc_lock_pins+0x164>)
  temp = READ_REG(GPIOx->LCKR);
 80021d6:	9201      	str	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021dc:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 80021e0:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021e2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021e4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021e6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	9300      	str	r3, [sp, #0]
  (void) temp;
 80021ec:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80021ee:	b012      	add	sp, #72	@ 0x48
 80021f0:	bcf0      	pop	{r4, r5, r6, r7}
 80021f2:	4770      	bx	lr
 80021f4:	48000400 	.word	0x48000400
 80021f8:	00010004 	.word	0x00010004
 80021fc:	00010002 	.word	0x00010002
 8002200:	00010080 	.word	0x00010080
 8002204:	00010008 	.word	0x00010008
 8002208:	00010040 	.word	0x00010040
 800220c:	00010020 	.word	0x00010020
 8002210:	00010100 	.word	0x00010100
 8002214:	48000800 	.word	0x48000800

08002218 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 800221c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002220:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <RI_SetRegCommandParser+0xd0>)
{
 8002222:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8002224:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002228:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 800222a:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 800222e:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8002232:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8002236:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002238:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 800223a:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 800223e:	dd47      	ble.n	80022d0 <RI_SetRegCommandParser+0xb8>
 8002240:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8002244:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002248:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800224c:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8002250:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002254:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002258:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800225a:	f001 0b07 	and.w	fp, r1, #7
 800225e:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 8002262:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002266:	fa0f fe84 	sxth.w	lr, r4
 800226a:	f10d 0316 	add.w	r3, sp, #22
 800226e:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002270:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8002272:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002276:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 800227a:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 800227e:	d11b      	bne.n	80022b8 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002280:	f8cd e000 	str.w	lr, [sp]
 8002284:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8002288:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 800228a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 800228e:	eb06 030a 	add.w	r3, r6, sl
 8002292:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8002294:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8002296:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8002298:	b224      	sxth	r4, r4
        rxData = rxData+size;
 800229a:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 800229e:	d013      	beq.n	80022c8 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 80022a0:	4546      	cmp	r6, r8
 80022a2:	d00d      	beq.n	80022c0 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 80022a4:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 80022a8:	89fb      	ldrh	r3, [r7, #14]
 80022aa:	3301      	adds	r3, #1
 80022ac:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80022ae:	b1a0      	cbz	r0, 80022da <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80022b0:	2807      	cmp	r0, #7
 80022b2:	d001      	beq.n	80022b8 <RI_SetRegCommandParser+0xa0>
 80022b4:	280a      	cmp	r0, #10
 80022b6:	d10e      	bne.n	80022d6 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 80022b8:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80022ba:	b009      	add	sp, #36	@ 0x24
 80022bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80022c0:	2008      	movs	r0, #8
}
 80022c2:	b009      	add	sp, #36	@ 0x24
 80022c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d1e9      	bne.n	80022a0 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d1f4      	bne.n	80022ba <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 80022d0:	2000      	movs	r0, #0
 80022d2:	81f8      	strh	r0, [r7, #14]
 80022d4:	e7f1      	b.n	80022ba <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80022d6:	2301      	movs	r3, #1
 80022d8:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 80022da:	2c00      	cmp	r4, #0
 80022dc:	dcb6      	bgt.n	800224c <RI_SetRegCommandParser+0x34>
 80022de:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d0f5      	beq.n	80022d0 <RI_SetRegCommandParser+0xb8>
 80022e4:	e7e9      	b.n	80022ba <RI_SetRegCommandParser+0xa2>
 80022e6:	bf00      	nop
 80022e8:	08002901 	.word	0x08002901
 80022ec:	08002a05 	.word	0x08002a05

080022f0 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80022f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022f4:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 80022fc:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 80022fe:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <RI_GetRegCommandParser+0x88>)
 8002304:	9304      	str	r3, [sp, #16]
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002308:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 800230c:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800230e:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8002310:	f1b8 0f00 	cmp.w	r8, #0
 8002314:	d016      	beq.n	8002344 <RI_GetRegCommandParser+0x54>
 8002316:	4607      	mov	r7, r0
 8002318:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 800231a:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 800231c:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002320:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002324:	f001 0e07 	and.w	lr, r1, #7
 8002328:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 800232c:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002330:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8002332:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002336:	f10d 030e 	add.w	r3, sp, #14
 800233a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800233e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8002342:	d003      	beq.n	800234c <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8002344:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002346:	b006      	add	sp, #24
 8002348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800234c:	9500      	str	r5, [sp, #0]
 800234e:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8002352:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8002354:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8002358:	fa19 f383 	uxtah	r3, r9, r3
 800235c:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 800235e:	2800      	cmp	r0, #0
 8002360:	d1f1      	bne.n	8002346 <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 8002362:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8002366:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002368:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 800236a:	440a      	add	r2, r1
          txData = txData+size;
 800236c:	440e      	add	r6, r1
          pHandle->txLength += size;
 800236e:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002370:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1d2      	bne.n	800231c <RI_GetRegCommandParser+0x2c>
 8002376:	e7e6      	b.n	8002346 <RI_GetRegCommandParser+0x56>
 8002378:	08002f8d 	.word	0x08002f8d
 800237c:	080030c1 	.word	0x080030c1

08002380 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002384:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002386:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002388:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800238c:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800238e:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002390:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002394:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002396:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002398:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800239c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023a0:	b291      	uxth	r1, r2
{
 80023a2:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023a4:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80023a6:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023aa:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80023ac:	d045      	beq.n	800243a <MCP_ReceivedPacket+0xba>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80023ae:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023b0:	4f50      	ldr	r7, [pc, #320]	@ (80024f4 <MCP_ReceivedPacket+0x174>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023b2:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 80023bc:	2500      	movs	r5, #0

    switch (command)
 80023be:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80023c2:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023c4:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 80023c8:	81e5      	strh	r5, [r4, #14]
    switch (command)
 80023ca:	d82a      	bhi.n	8002422 <MCP_ReceivedPacket+0xa2>
 80023cc:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 80023d0:	d81e      	bhi.n	8002410 <MCP_ReceivedPacket+0x90>
 80023d2:	e8df f00c 	tbb	[pc, ip]
 80023d6:	1d55      	.short	0x1d55
 80023d8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023dc:	1d5d1d1d 	.word	0x1d5d1d1d
 80023e0:	1d1d1d1d 	.word	0x1d1d1d1d
 80023e4:	1d621d1d 	.word	0x1d621d1d
 80023e8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023ec:	1d671d1d 	.word	0x1d671d1d
 80023f0:	1d1d1d1d 	.word	0x1d1d1d1d
 80023f4:	1d411d1d 	.word	0x1d411d1d
 80023f8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023fc:	1d471d1d 	.word	0x1d471d1d
 8002400:	1d1d1d1d 	.word	0x1d1d1d1d
 8002404:	1d3d1d1d 	.word	0x1d3d1d1d
 8002408:	1d1d1d1d 	.word	0x1d1d1d1d
 800240c:	1d1d      	.short	0x1d1d
 800240e:	4f          	.byte	0x4f
 800240f:	00          	.byte	0x00
 8002410:	2300      	movs	r3, #0
 8002412:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002414:	68a2      	ldr	r2, [r4, #8]
 8002416:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002418:	89e3      	ldrh	r3, [r4, #14]
 800241a:	3301      	adds	r3, #1
 800241c:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800241e:	b003      	add	sp, #12
 8002420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8002422:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8002426:	d042      	beq.n	80024ae <MCP_ReceivedPacket+0x12e>
 8002428:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 800242c:	d1f0      	bne.n	8002410 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 800242e:	4638      	mov	r0, r7
 8002430:	f7ff f936 	bl	80016a0 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002434:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002436:	4628      	mov	r0, r5
        break;
 8002438:	e7ec      	b.n	8002414 <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 800243a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 800243e:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002440:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002444:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002446:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8002448:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800244a:	d941      	bls.n	80024d0 <MCP_ReceivedPacket+0x150>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800244c:	200d      	movs	r0, #13
 800244e:	e7e1      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002450:	4638      	mov	r0, r7
 8002452:	f7ff f823 	bl	800149c <MCI_GetSTMState>
 8002456:	b398      	cbz	r0, 80024c0 <MCP_ReceivedPacket+0x140>
          (void)MCI_StopMotor(pMCI);
 8002458:	4638      	mov	r0, r7
 800245a:	f7ff f855 	bl	8001508 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800245e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002460:	2000      	movs	r0, #0
 8002462:	e7d7      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8002464:	4638      	mov	r0, r7
 8002466:	f7ff f819 	bl	800149c <MCI_GetSTMState>
 800246a:	2806      	cmp	r0, #6
 800246c:	d03c      	beq.n	80024e8 <MCP_ReceivedPacket+0x168>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800246e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002470:	2000      	movs	r0, #0
 8002472:	e7cf      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8002474:	4638      	mov	r0, r7
 8002476:	f7ff f863 	bl	8001540 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800247a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800247c:	2000      	movs	r0, #0
        break;
 800247e:	e7c9      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8002480:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002482:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002484:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002486:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002488:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800248a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800248c:	2000      	movs	r0, #0
        break;
 800248e:	e7c1      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff fec1 	bl	8002218 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002496:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002498:	e7bc      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff ff28 	bl	80022f0 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024a0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80024a2:	e7b7      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 80024a4:	4638      	mov	r0, r7
 80024a6:	f7ff f815 	bl	80014d4 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024aa:	89e3      	ldrh	r3, [r4, #14]
 80024ac:	e7b2      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 80024ae:	68a3      	ldr	r3, [r4, #8]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4631      	mov	r1, r6
 80024b4:	f104 030e 	add.w	r3, r4, #14
 80024b8:	f7fe ff6c 	bl	8001394 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024bc:	89e3      	ldrh	r3, [r4, #14]
        break;
 80024be:	e7a9      	b.n	8002414 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80024c0:	4638      	mov	r0, r7
 80024c2:	f7ff f807 	bl	80014d4 <MCI_StartWithPolarizationMotor>
 80024c6:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024ca:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7a1      	b.n	8002414 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <MCP_ReceivedPacket+0x178>)
 80024d2:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80024d6:	b15d      	cbz	r5, 80024f0 <MCP_ReceivedPacket+0x170>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80024d8:	68a3      	ldr	r3, [r4, #8]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4631      	mov	r1, r6
 80024de:	f104 030e 	add.w	r3, r4, #14
 80024e2:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024e4:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80024e6:	e795      	b.n	8002414 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 80024e8:	4638      	mov	r0, r7
 80024ea:	f7ff f871 	bl	80015d0 <MCI_StopRamp>
 80024ee:	e7be      	b.n	800246e <MCP_ReceivedPacket+0xee>
 80024f0:	462b      	mov	r3, r5
 80024f2:	e7ab      	b.n	800244c <MCP_ReceivedPacket+0xcc>
 80024f4:	20000944 	.word	0x20000944
 80024f8:	200009b0 	.word	0x200009b0

080024fc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80024fc:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80024fe:	f004 f863 	bl	80065c8 <HAL_RCC_GetHCLKFreq>
 8002502:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <MX_MotorControl_Init+0x30>)
 8002504:	fba3 3000 	umull	r3, r0, r3, r0
 8002508:	09c0      	lsrs	r0, r0, #7
 800250a:	f003 f92b 	bl	8005764 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <MX_MotorControl_Init+0x34>)
 8002510:	2200      	movs	r2, #0
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f003 f8da 	bl	80056d0 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800251c:	4805      	ldr	r0, [pc, #20]	@ (8002534 <MX_MotorControl_Init+0x38>)
 800251e:	f7ff f9b3 	bl	8001888 <MCboot>
  mc_lock_pins();
}
 8002522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002526:	f7ff bdc3 	b.w	80020b0 <mc_lock_pins>
 800252a:	bf00      	nop
 800252c:	10624dd3 	.word	0x10624dd3
 8002530:	20000508 	.word	0x20000508
 8002534:	20001b3c 	.word	0x20001b3c

08002538 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002538:	6803      	ldr	r3, [r0, #0]
 800253a:	4718      	bx	r3

0800253c <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 800253c:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800253e:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002542:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002546:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800254a:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800254c:	fb04 fc0c 	mul.w	ip, r4, ip
 8002550:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002554:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002558:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 800255c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002560:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002564:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002568:	1c55      	adds	r5, r2, #1
{
 800256a:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800256c:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002570:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002574:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002578:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 800257c:	f2c0 8094 	blt.w	80026a8 <PWMC_SetPhaseVoltage+0x16c>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002580:	1c5d      	adds	r5, r3, #1
 8002582:	db64      	blt.n	800264e <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002584:	ebb1 010e 	subs.w	r1, r1, lr
 8002588:	bf44      	itt	mi
 800258a:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800258e:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002592:	2b00      	cmp	r3, #0
 8002594:	bfbc      	itt	lt
 8002596:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800259a:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800259e:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80025a0:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80025a4:	bfb8      	it	lt
 80025a6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 80025aa:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
        pHandle->Sector = SECTOR_2;
 80025ae:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 80025b2:	bfb8      	it	lt
 80025b4:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 80025b8:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80025bc:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80025c0:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80025c4:	2c00      	cmp	r4, #0
 80025c6:	f040 8097 	bne.w	80026f8 <PWMC_SetPhaseVoltage+0x1bc>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80025ca:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 80025ce:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 80025d2:	b294      	uxth	r4, r2
            pHandle->highDuty = 2U;
 80025d4:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80025d8:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
            pHandle->lowDuty = 0U;
 80025dc:	f8a0 e058 	strh.w	lr, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80025ec:	b289      	uxth	r1, r1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 80025f2:	2c01      	cmp	r4, #1
            pHandle->midDuty = 1U;
 80025f4:	f8a0 c05a 	strh.w	ip, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025f8:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025fc:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002600:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (1U == pHandle->DTTest)
 8002604:	d11e      	bne.n	8002644 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8002606:	f9b0 5062 	ldrsh.w	r5, [r0, #98]	@ 0x62
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 800260a:	f8b0 4074 	ldrh.w	r4, [r0, #116]	@ 0x74
      if (pHandle->Ia > 0)
 800260e:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002610:	bfcc      	ite	gt
 8002612:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002614:	1b09      	suble	r1, r1, r4
 8002616:	b289      	uxth	r1, r1
 8002618:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
      }

      if (pHandle->Ib > 0)
 800261c:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 8002620:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002622:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	@ 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002626:	bfcc      	ite	gt
 8002628:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800262a:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 800262c:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800262e:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002630:	bfcc      	ite	gt
 8002632:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002634:	1b12      	suble	r2, r2, r4
 8002636:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 800263a:	bfcc      	ite	gt
 800263c:	f8a0 4054 	strhgt.w	r4, [r0, #84]	@ 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002640:	f8a0 2054 	strhle.w	r2, [r0, #84]	@ 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002644:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002646:	b003      	add	sp, #12
 8002648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800264c:	4718      	bx	r3
        if ( wX <= 0 )
 800264e:	f1bc 0f00 	cmp.w	ip, #0
 8002652:	dd7f      	ble.n	8002754 <PWMC_SetPhaseVoltage+0x218>
          wTimePhB = wTimePhA + (wZ / 131072);
 8002654:	2b00      	cmp	r3, #0
 8002656:	bfb8      	it	lt
 8002658:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800265c:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 8002660:	bfb8      	it	lt
 8002662:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002666:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800266a:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800266e:	bfb8      	it	lt
 8002670:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002674:	f890 407f 	ldrb.w	r4, [r0, #127]	@ 0x7f
          pHandle->Sector = SECTOR_1;
 8002678:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 800267c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002680:	bfb8      	it	lt
 8002682:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 8002686:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 800268a:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800268e:	2c00      	cmp	r4, #0
 8002690:	f040 80b5 	bne.w	80027fe <PWMC_SetPhaseVoltage+0x2c2>
 8002694:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
 8002698:	2d00      	cmp	r5, #0
 800269a:	f000 80c2 	beq.w	8002822 <PWMC_SetPhaseVoltage+0x2e6>
 800269e:	f04f 0e02 	mov.w	lr, #2
 80026a2:	f04f 0c01 	mov.w	ip, #1
 80026a6:	e795      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 80026ac:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
      if (wZ < 0)
 80026b0:	db74      	blt.n	800279c <PWMC_SetPhaseVoltage+0x260>
        if (wX <= 0)
 80026b2:	f1bc 0f00 	cmp.w	ip, #0
 80026b6:	dd25      	ble.n	8002704 <PWMC_SetPhaseVoltage+0x1c8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80026b8:	ebb1 010c 	subs.w	r1, r1, ip
 80026bc:	bf44      	itt	mi
 80026be:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80026c2:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	bfb8      	it	lt
 80026ca:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80026ce:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80026d2:	bfb8      	it	lt
 80026d4:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 80026d8:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80026da:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 80026de:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80026e2:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 80026e6:	2d00      	cmp	r5, #0
 80026e8:	f040 8083 	bne.w	80027f2 <PWMC_SetPhaseVoltage+0x2b6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80026ec:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80026f0:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80026f4:	b28c      	uxth	r4, r1
 80026f6:	e76d      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
 80026f8:	f04f 0e02 	mov.w	lr, #2
 80026fc:	f04f 0c00 	mov.w	ip, #0
 8002700:	2401      	movs	r4, #1
 8002702:	e767      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002704:	ebbc 0e0e 	subs.w	lr, ip, lr
 8002708:	bf44      	itt	mi
 800270a:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 800270e:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002712:	2b00      	cmp	r3, #0
 8002714:	bfb8      	it	lt
 8002716:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 800271a:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 800271e:	bfb8      	it	lt
 8002720:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8002724:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8002728:	f1bc 0200 	subs.w	r2, ip, #0
 800272c:	bfb8      	it	lt
 800272e:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002732:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8002736:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800273a:	bfb8      	it	lt
 800273c:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002740:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002744:	2d00      	cmp	r5, #0
 8002746:	d066      	beq.n	8002816 <PWMC_SetPhaseVoltage+0x2da>
 8002748:	f04f 0e00 	mov.w	lr, #0
 800274c:	f04f 0c01 	mov.w	ip, #1
 8002750:	2402      	movs	r4, #2
 8002752:	e73f      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
          wTimePhC = wTimePhA - (wY / 131072);
 8002754:	2a00      	cmp	r2, #0
 8002756:	bfb8      	it	lt
 8002758:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 800275c:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002760:	bfb8      	it	lt
 8002762:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002766:	eba1 010c 	sub.w	r1, r1, ip
          pHandle->Sector = SECTOR_6;
 800276a:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 800276e:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002772:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002776:	bfb8      	it	lt
 8002778:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 800277c:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8002780:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002784:	bfb8      	it	lt
 8002786:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800278a:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 800278e:	b3e4      	cbz	r4, 800280a <PWMC_SetPhaseVoltage+0x2ce>
 8002790:	f04f 0e01 	mov.w	lr, #1
 8002794:	f04f 0c02 	mov.w	ip, #2
 8002798:	2400      	movs	r4, #0
 800279a:	e71b      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800279c:	ebb1 010e 	subs.w	r1, r1, lr
 80027a0:	bf44      	itt	mi
 80027a2:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80027a6:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bfbc      	itt	lt
 80027ae:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80027b2:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	bfb8      	it	lt
 80027ba:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80027be:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        pHandle->Sector = SECTOR_5;
 80027c2:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027c6:	bfb8      	it	lt
 80027c8:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 80027cc:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80027d0:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027d4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80027d8:	b92d      	cbnz	r5, 80027e6 <PWMC_SetPhaseVoltage+0x2aa>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80027da:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 80027de:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 80027e2:	b29c      	uxth	r4, r3
 80027e4:	e6f6      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
 80027e6:	f04f 0e01 	mov.w	lr, #1
 80027ea:	f04f 0c00 	mov.w	ip, #0
 80027ee:	2402      	movs	r4, #2
 80027f0:	e6f0      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
 80027f2:	f04f 0e00 	mov.w	lr, #0
 80027f6:	f04f 0c02 	mov.w	ip, #2
 80027fa:	2401      	movs	r4, #1
 80027fc:	e6ea      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
 80027fe:	f04f 0e02 	mov.w	lr, #2
 8002802:	f04f 0c01 	mov.w	ip, #1
 8002806:	2400      	movs	r4, #0
 8002808:	e6e4      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800280a:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 800280e:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002812:	b29c      	uxth	r4, r3
 8002814:	e6de      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002816:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800281a:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800281e:	b28c      	uxth	r4, r1
 8002820:	e6d8      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002822:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002826:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 800282a:	b294      	uxth	r4, r2
 800282c:	e6d2      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x98>
 800282e:	bf00      	nop

08002830 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002830:	6843      	ldr	r3, [r0, #4]
 8002832:	4718      	bx	r3

08002834 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002834:	6883      	ldr	r3, [r0, #8]
 8002836:	4718      	bx	r3

08002838 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002838:	b510      	push	{r4, lr}
 800283a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800283c:	b179      	cbz	r1, 800285e <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800283e:	2901      	cmp	r1, #1
 8002840:	d001      	beq.n	8002846 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002842:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002844:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002846:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800284a:	b16b      	cbz	r3, 8002868 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 800284c:	3b01      	subs	r3, #1
 800284e:	b29b      	uxth	r3, r3
 8002850:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f4      	bne.n	8002842 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002858:	68c3      	ldr	r3, [r0, #12]
 800285a:	4798      	blx	r3
          retVal = true;
 800285c:	e004      	b.n	8002868 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 800285e:	f7ff ffe7 	bl	8002830 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002862:	68e3      	ldr	r3, [r4, #12]
 8002864:	4620      	mov	r0, r4
 8002866:	4798      	blx	r3
      retVal = true;
 8002868:	2001      	movs	r0, #1
}
 800286a:	bd10      	pop	{r4, pc}

0800286c <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 800286c:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8002870:	b91b      	cbnz	r3, 800287a <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002872:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8002876:	2b02      	cmp	r3, #2
 8002878:	d004      	beq.n	8002884 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 800287a:	2301      	movs	r3, #1
 800287c:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002880:	307a      	adds	r0, #122	@ 0x7a
 8002882:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002884:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8002888:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 800288a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 800288c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002890:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002892:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002896:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800289a:	628c      	str	r4, [r1, #40]	@ 0x28
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 800289e:	2301      	movs	r3, #1
 80028a0:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
}
 80028a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028a8:	307a      	adds	r0, #122	@ 0x7a
 80028aa:	4770      	bx	lr

080028ac <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80028ac:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80028ae:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 80028b0:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80028b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028b8:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80028ba:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverVoltageFlag = true;
 80028bc:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
    pHandle->BrakeActionLock = true;
 80028c0:	f883 c085 	strb.w	ip, [r3, #133]	@ 0x85
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80028c8:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80028ca:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 80028ce:	b1a8      	cbz	r0, 80028fc <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 80028d6:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80028d8:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80028da:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 80028de:	b11a      	cbz	r2, 80028e8 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_OVER_CURR;
 80028e6:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80028e8:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 80028ec:	b12a      	cbz	r2, 80028fa <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80028ee:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 80028f2:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80028f4:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80028f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80028fa:	4770      	bx	lr
 80028fc:	2140      	movs	r1, #64	@ 0x40
 80028fe:	e7ec      	b.n	80028da <PWMC_IsFaultOccurred+0x12>

08002900 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002900:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8002902:	3908      	subs	r1, #8
{
 8002904:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8002908:	2920      	cmp	r1, #32
 800290a:	d812      	bhi.n	8002932 <RI_SetRegisterGlobal+0x32>
 800290c:	e8df f001 	tbb	[pc, r1]
 8002910:	11111117 	.word	0x11111117
 8002914:	11111111 	.word	0x11111111
 8002918:	11111121 	.word	0x11111121
 800291c:	11111111 	.word	0x11111111
 8002920:	11111133 	.word	0x11111133
 8002924:	11111111 	.word	0x11111111
 8002928:	1111113d 	.word	0x1111113d
 800292c:	11111111 	.word	0x11111111
 8002930:	51          	.byte	0x51
 8002931:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002936:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8002938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800293c:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800293e:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8002940:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8002944:	bf14      	ite	ne
 8002946:	2005      	movne	r0, #5
 8002948:	2004      	moveq	r0, #4
}
 800294a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 800294e:	801a      	strh	r2, [r3, #0]
}
 8002950:	4770      	bx	lr
      switch (regID)
 8002952:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002956:	d04e      	beq.n	80029f6 <RI_SetRegisterGlobal+0xf6>
 8002958:	d93e      	bls.n	80029d8 <RI_SetRegisterGlobal+0xd8>
 800295a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800295e:	d04a      	beq.n	80029f6 <RI_SetRegisterGlobal+0xf6>
 8002960:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002964:	4290      	cmp	r0, r2
 8002966:	bf0c      	ite	eq
 8002968:	2004      	moveq	r0, #4
 800296a:	2005      	movne	r0, #5
      *size = 2;
 800296c:	2202      	movs	r2, #2
}
 800296e:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8002972:	801a      	strh	r2, [r3, #0]
}
 8002974:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8002976:	2818      	cmp	r0, #24
      *size = 4;
 8002978:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 800297c:	bf14      	ite	ne
 800297e:	2005      	movne	r0, #5
 8002980:	4610      	moveq	r0, r2
}
 8002982:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8002986:	801a      	strh	r2, [r3, #0]
}
 8002988:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 800298a:	2101      	movs	r1, #1
 800298c:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800298e:	f992 0000 	ldrsb.w	r0, [r2]
 8002992:	b348      	cbz	r0, 80029e8 <RI_SetRegisterGlobal+0xe8>
 8002994:	fa1f f08c 	uxth.w	r0, ip
 8002998:	e003      	b.n	80029a2 <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 800299a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800299c:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80029a0:	b314      	cbz	r4, 80029e8 <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80029a2:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029a6:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80029a8:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029ac:	d3f5      	bcc.n	800299a <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 80029ae:	2004      	movs	r0, #4
 80029b0:	e7c2      	b.n	8002938 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80029b2:	8812      	ldrh	r2, [r2, #0]
 80029b4:	3202      	adds	r2, #2
 80029b6:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80029b8:	fa1f fc8c 	uxth.w	ip, ip
 80029bc:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80029be:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80029c0:	d81b      	bhi.n	80029fa <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 80029c2:	28a8      	cmp	r0, #168	@ 0xa8
 80029c4:	d0f3      	beq.n	80029ae <RI_SetRegisterGlobal+0xae>
 80029c6:	d813      	bhi.n	80029f0 <RI_SetRegisterGlobal+0xf0>
 80029c8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80029cc:	2828      	cmp	r0, #40	@ 0x28
 80029ce:	d0ee      	beq.n	80029ae <RI_SetRegisterGlobal+0xae>
 80029d0:	2005      	movs	r0, #5
}
 80029d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 80029dc:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80029e0:	bf0c      	ite	eq
 80029e2:	2004      	moveq	r0, #4
 80029e4:	2005      	movne	r0, #5
 80029e6:	e7c1      	b.n	800296c <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80029ec:	2004      	movs	r0, #4
 80029ee:	e7a3      	b.n	8002938 <RI_SetRegisterGlobal+0x38>
 80029f0:	28e8      	cmp	r0, #232	@ 0xe8
 80029f2:	d1ed      	bne.n	80029d0 <RI_SetRegisterGlobal+0xd0>
 80029f4:	e7db      	b.n	80029ae <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 80029f6:	2000      	movs	r0, #0
 80029f8:	e7b8      	b.n	800296c <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 80029fa:	2200      	movs	r2, #0
 80029fc:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80029fe:	200a      	movs	r0, #10
 8002a00:	e79a      	b.n	8002938 <RI_SetRegisterGlobal+0x38>
 8002a02:	bf00      	nop

08002a04 <RI_SetRegisterMotor1>:
{
 8002a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a08:	b084      	sub	sp, #16
  switch(typeID)
 8002a0a:	3908      	subs	r1, #8
{
 8002a0c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8002a10:	4615      	mov	r5, r2
 8002a12:	461c      	mov	r4, r3
  switch(typeID)
 8002a14:	2920      	cmp	r1, #32
 8002a16:	d812      	bhi.n	8002a3e <RI_SetRegisterMotor1+0x3a>
 8002a18:	e8df f001 	tbb	[pc, r1]
 8002a1c:	11111117 	.word	0x11111117
 8002a20:	11111111 	.word	0x11111111
 8002a24:	11111125 	.word	0x11111125
 8002a28:	11111111 	.word	0x11111111
 8002a2c:	11111186 	.word	0x11111186
 8002a30:	11111111 	.word	0x11111111
 8002a34:	1111114e 	.word	0x1111114e
 8002a38:	11111111 	.word	0x11111111
 8002a3c:	65          	.byte	0x65
 8002a3d:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002a3e:	2300      	movs	r3, #0
 8002a40:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002a42:	2007      	movs	r0, #7
}
 8002a44:	b004      	add	sp, #16
 8002a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 8002a4a:	2888      	cmp	r0, #136	@ 0x88
 8002a4c:	f000 81d2 	beq.w	8002df4 <RI_SetRegisterMotor1+0x3f0>
 8002a50:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8002a54:	2848      	cmp	r0, #72	@ 0x48
 8002a56:	bf0c      	ite	eq
 8002a58:	2004      	moveq	r0, #4
 8002a5a:	2005      	movne	r0, #5
      *size = 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	8023      	strh	r3, [r4, #0]
}
 8002a60:	b004      	add	sp, #16
 8002a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002a66:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002a6a:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 8002a6c:	f000 8232 	beq.w	8002ed4 <RI_SetRegisterMotor1+0x4d0>
 8002a70:	f200 80b7 	bhi.w	8002be2 <RI_SetRegisterMotor1+0x1de>
 8002a74:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002a78:	f000 8253 	beq.w	8002f22 <RI_SetRegisterMotor1+0x51e>
 8002a7c:	f240 8096 	bls.w	8002bac <RI_SetRegisterMotor1+0x1a8>
 8002a80:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8002a84:	f000 8240 	beq.w	8002f08 <RI_SetRegisterMotor1+0x504>
 8002a88:	d969      	bls.n	8002b5e <RI_SetRegisterMotor1+0x15a>
 8002a8a:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8002a8e:	f000 8217 	beq.w	8002ec0 <RI_SetRegisterMotor1+0x4bc>
 8002a92:	d95a      	bls.n	8002b4a <RI_SetRegisterMotor1+0x146>
 8002a94:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8002a98:	d055      	beq.n	8002b46 <RI_SetRegisterMotor1+0x142>
 8002a9a:	d97d      	bls.n	8002b98 <RI_SetRegisterMotor1+0x194>
 8002a9c:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8002aa0:	d051      	beq.n	8002b46 <RI_SetRegisterMotor1+0x142>
 8002aa2:	d970      	bls.n	8002b86 <RI_SetRegisterMotor1+0x182>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002aa4:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2004      	moveq	r0, #4
 8002aac:	2005      	movne	r0, #5
      *size = 2;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	8023      	strh	r3, [r4, #0]
}
 8002ab2:	b004      	add	sp, #16
 8002ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 8002ab8:	2001      	movs	r0, #1
 8002aba:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002abc:	f992 3000 	ldrsb.w	r3, [r2]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8190 	beq.w	8002de6 <RI_SetRegisterMotor1+0x3e2>
 8002ac6:	fa1f f38c 	uxth.w	r3, ip
 8002aca:	e005      	b.n	8002ad8 <RI_SetRegisterMotor1+0xd4>
    *size = *size + 1U;
 8002acc:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ace:	f915 1f01 	ldrsb.w	r1, [r5, #1]!
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	f000 8187 	beq.w	8002de6 <RI_SetRegisterMotor1+0x3e2>
    *size = *size + 1U;
 8002ad8:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002adc:	4283      	cmp	r3, r0
    *size = *size + 1U;
 8002ade:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ae2:	d8f3      	bhi.n	8002acc <RI_SetRegisterMotor1+0xc8>
 8002ae4:	e164      	b.n	8002db0 <RI_SetRegisterMotor1+0x3ac>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002ae6:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8002ae8:	1c8a      	adds	r2, r1, #2
 8002aea:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002aec:	fa1f f38c 	uxth.w	r3, ip
 8002af0:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8002af2:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8002af4:	f200 817a 	bhi.w	8002dec <RI_SetRegisterMotor1+0x3e8>
        switch (regID)
 8002af8:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002afc:	f000 81ae 	beq.w	8002e5c <RI_SetRegisterMotor1+0x458>
 8002b00:	f200 8164 	bhi.w	8002dcc <RI_SetRegisterMotor1+0x3c8>
 8002b04:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002b08:	f000 819b 	beq.w	8002e42 <RI_SetRegisterMotor1+0x43e>
 8002b0c:	f240 814b 	bls.w	8002da6 <RI_SetRegisterMotor1+0x3a2>
 8002b10:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002b14:	f040 8143 	bne.w	8002d9e <RI_SetRegisterMotor1+0x39a>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002b18:	88ea      	ldrh	r2, [r5, #6]
 8002b1a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8002b1e:	48a5      	ldr	r0, [pc, #660]	@ (8002db4 <RI_SetRegisterMotor1+0x3b0>)
 8002b20:	f7fe fc60 	bl	80013e4 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002b24:	2000      	movs	r0, #0
 8002b26:	e78d      	b.n	8002a44 <RI_SetRegisterMotor1+0x40>
      switch (regID)
 8002b28:	2898      	cmp	r0, #152	@ 0x98
 8002b2a:	f000 816a 	beq.w	8002e02 <RI_SetRegisterMotor1+0x3fe>
 8002b2e:	d84f      	bhi.n	8002bd0 <RI_SetRegisterMotor1+0x1cc>
 8002b30:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002b34:	2818      	cmp	r0, #24
 8002b36:	bf0c      	ite	eq
 8002b38:	2004      	moveq	r0, #4
 8002b3a:	2005      	movne	r0, #5
      *size = 4;
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	8023      	strh	r3, [r4, #0]
}
 8002b40:	b004      	add	sp, #16
 8002b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b46:	2004      	movs	r0, #4
 8002b48:	e7b1      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002b4a:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8002b4e:	f040 80e3 	bne.w	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002b52:	4899      	ldr	r0, [pc, #612]	@ (8002db8 <RI_SetRegisterMotor1+0x3b4>)
 8002b54:	b229      	sxth	r1, r5
 8002b56:	f005 fc39 	bl	80083cc <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	e7a7      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002b5e:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002b62:	f000 81f7 	beq.w	8002f54 <RI_SetRegisterMotor1+0x550>
 8002b66:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8002b6a:	d162      	bne.n	8002c32 <RI_SetRegisterMotor1+0x22e>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002b6c:	aa01      	add	r2, sp, #4
 8002b6e:	f10d 0102 	add.w	r1, sp, #2
 8002b72:	4892      	ldr	r0, [pc, #584]	@ (8002dbc <RI_SetRegisterMotor1+0x3b8>)
 8002b74:	f007 fa22 	bl	8009fbc <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8002b78:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002b7c:	488f      	ldr	r0, [pc, #572]	@ (8002dbc <RI_SetRegisterMotor1+0x3b8>)
 8002b7e:	b229      	sxth	r1, r5
 8002b80:	f007 fa24 	bl	8009fcc <STO_PLL_SetObserverGains>
          break;
 8002b84:	e7e9      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002b86:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002b8a:	d0dc      	beq.n	8002b46 <RI_SetRegisterMotor1+0x142>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002b8c:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8002b90:	bf0c      	ite	eq
 8002b92:	2004      	moveq	r0, #4
 8002b94:	2005      	movne	r0, #5
 8002b96:	e78a      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002b98:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 8002b9c:	d0d3      	beq.n	8002b46 <RI_SetRegisterMotor1+0x142>
 8002b9e:	d940      	bls.n	8002c22 <RI_SetRegisterMotor1+0x21e>
 8002ba0:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2004      	moveq	r0, #4
 8002ba8:	2005      	movne	r0, #5
 8002baa:	e780      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002bac:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002bb0:	f000 818b 	beq.w	8002eca <RI_SetRegisterMotor1+0x4c6>
 8002bb4:	d945      	bls.n	8002c42 <RI_SetRegisterMotor1+0x23e>
 8002bb6:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002bba:	f000 81c6 	beq.w	8002f4a <RI_SetRegisterMotor1+0x546>
 8002bbe:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002bc2:	f040 80a9 	bne.w	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002bc6:	487e      	ldr	r0, [pc, #504]	@ (8002dc0 <RI_SetRegisterMotor1+0x3bc>)
 8002bc8:	b229      	sxth	r1, r5
 8002bca:	f005 fc2f 	bl	800842c <PID_SetKD>
          break;
 8002bce:	e7c4      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002bd0:	28d8      	cmp	r0, #216	@ 0xd8
 8002bd2:	f000 812d 	beq.w	8002e30 <RI_SetRegisterMotor1+0x42c>
 8002bd6:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8002bda:	bf0c      	ite	eq
 8002bdc:	2004      	moveq	r0, #4
 8002bde:	2005      	movne	r0, #5
 8002be0:	e7ac      	b.n	8002b3c <RI_SetRegisterMotor1+0x138>
 8002be2:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002be6:	4298      	cmp	r0, r3
 8002be8:	f000 8189 	beq.w	8002efe <RI_SetRegisterMotor1+0x4fa>
 8002bec:	d959      	bls.n	8002ca2 <RI_SetRegisterMotor1+0x29e>
 8002bee:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	f000 817e 	beq.w	8002ef4 <RI_SetRegisterMotor1+0x4f0>
 8002bf8:	d945      	bls.n	8002c86 <RI_SetRegisterMotor1+0x282>
 8002bfa:	f641 1310 	movw	r3, #6416	@ 0x1910
 8002bfe:	4298      	cmp	r0, r3
 8002c00:	f000 81ad 	beq.w	8002f5e <RI_SetRegisterMotor1+0x55a>
 8002c04:	d936      	bls.n	8002c74 <RI_SetRegisterMotor1+0x270>
 8002c06:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002c0a:	4298      	cmp	r0, r3
 8002c0c:	d09b      	beq.n	8002b46 <RI_SetRegisterMotor1+0x142>
 8002c0e:	d923      	bls.n	8002c58 <RI_SetRegisterMotor1+0x254>
 8002c10:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002c14:	f641 3390 	movw	r3, #7056	@ 0x1b90
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2004      	moveq	r0, #4
 8002c1e:	2005      	movne	r0, #5
 8002c20:	e745      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002c22:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002c26:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2004      	moveq	r0, #4
 8002c2e:	2005      	movne	r0, #5
 8002c30:	e73d      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002c32:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002c36:	d16f      	bne.n	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8002c38:	4862      	ldr	r0, [pc, #392]	@ (8002dc4 <RI_SetRegisterMotor1+0x3c0>)
 8002c3a:	b229      	sxth	r1, r5
 8002c3c:	f005 fbc6 	bl	80083cc <PID_SetKI>
          break;
 8002c40:	e78b      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002c42:	28d0      	cmp	r0, #208	@ 0xd0
 8002c44:	f000 817c 	beq.w	8002f40 <RI_SetRegisterMotor1+0x53c>
 8002c48:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002c4c:	d146      	bne.n	8002cdc <RI_SetRegisterMotor1+0x2d8>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002c4e:	485e      	ldr	r0, [pc, #376]	@ (8002dc8 <RI_SetRegisterMotor1+0x3c4>)
 8002c50:	b229      	sxth	r1, r5
 8002c52:	f005 fbeb 	bl	800842c <PID_SetKD>
          break;
 8002c56:	e780      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002c58:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002c5c:	f641 3210 	movw	r2, #6928	@ 0x1b10
 8002c60:	4293      	cmp	r3, r2
 8002c62:	f43f af70 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
 8002c66:	f641 2390 	movw	r3, #6800	@ 0x1a90
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2004      	moveq	r0, #4
 8002c70:	2005      	movne	r0, #5
 8002c72:	e71c      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002c74:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	d14d      	bne.n	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002c7c:	484e      	ldr	r0, [pc, #312]	@ (8002db8 <RI_SetRegisterMotor1+0x3b4>)
 8002c7e:	4629      	mov	r1, r5
 8002c80:	f005 fbc0 	bl	8008404 <PID_SetKIDivisorPOW2>
          break;
 8002c84:	e769      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002c86:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	f000 8153 	beq.w	8002f36 <RI_SetRegisterMotor1+0x532>
 8002c90:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002c94:	4298      	cmp	r0, r3
 8002c96:	d118      	bne.n	8002cca <RI_SetRegisterMotor1+0x2c6>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002c98:	4849      	ldr	r0, [pc, #292]	@ (8002dc0 <RI_SetRegisterMotor1+0x3bc>)
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f005 fbb2 	bl	8008404 <PID_SetKIDivisorPOW2>
          break;
 8002ca0:	e75b      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002ca2:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	f000 811f 	beq.w	8002eea <RI_SetRegisterMotor1+0x4e6>
 8002cac:	d926      	bls.n	8002cfc <RI_SetRegisterMotor1+0x2f8>
 8002cae:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002cb2:	4298      	cmp	r0, r3
 8002cb4:	f000 813a 	beq.w	8002f2c <RI_SetRegisterMotor1+0x528>
 8002cb8:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d114      	bne.n	8002cea <RI_SetRegisterMotor1+0x2e6>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002cc0:	4840      	ldr	r0, [pc, #256]	@ (8002dc4 <RI_SetRegisterMotor1+0x3c0>)
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f005 fb90 	bl	80083e8 <PID_SetKPDivisorPOW2>
          break;
 8002cc8:	e747      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002cca:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002cce:	4298      	cmp	r0, r3
 8002cd0:	d122      	bne.n	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002cd2:	483c      	ldr	r0, [pc, #240]	@ (8002dc4 <RI_SetRegisterMotor1+0x3c0>)
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f005 fbb1 	bl	800843c <PID_SetKDDivisorPOW2>
          break;
 8002cda:	e73e      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002cdc:	2890      	cmp	r0, #144	@ 0x90
 8002cde:	d11b      	bne.n	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002ce0:	4839      	ldr	r0, [pc, #228]	@ (8002dc8 <RI_SetRegisterMotor1+0x3c4>)
 8002ce2:	b229      	sxth	r1, r5
 8002ce4:	f005 fb70 	bl	80083c8 <PID_SetKP>
          break;
 8002ce8:	e737      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002cea:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002cee:	4298      	cmp	r0, r3
 8002cf0:	d112      	bne.n	8002d18 <RI_SetRegisterMotor1+0x314>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002cf2:	4835      	ldr	r0, [pc, #212]	@ (8002dc8 <RI_SetRegisterMotor1+0x3c4>)
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f005 fb85 	bl	8008404 <PID_SetKIDivisorPOW2>
          break;
 8002cfa:	e72e      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002cfc:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8002d00:	f43f af21 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
 8002d04:	d915      	bls.n	8002d32 <RI_SetRegisterMotor1+0x32e>
 8002d06:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002d0a:	f43f af26 	beq.w	8002b5a <RI_SetRegisterMotor1+0x156>
 8002d0e:	d905      	bls.n	8002d1c <RI_SetRegisterMotor1+0x318>
 8002d10:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002d14:	f43f af21 	beq.w	8002b5a <RI_SetRegisterMotor1+0x156>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002d18:	2005      	movs	r0, #5
 8002d1a:	e6c8      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002d1c:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002d20:	f43f af11 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
 8002d24:	d913      	bls.n	8002d4e <RI_SetRegisterMotor1+0x34a>
 8002d26:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2004      	moveq	r0, #4
 8002d2e:	2005      	movne	r0, #5
 8002d30:	e6bd      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002d32:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002d36:	d114      	bne.n	8002d62 <RI_SetRegisterMotor1+0x35e>
          currComp = MCI_GetIqdref(pMCIN);
 8002d38:	481e      	ldr	r0, [pc, #120]	@ (8002db4 <RI_SetRegisterMotor1+0x3b0>)
 8002d3a:	f7fe fc83 	bl	8001644 <MCI_GetIqdref>
 8002d3e:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8002d40:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002d44:	9901      	ldr	r1, [sp, #4]
 8002d46:	481b      	ldr	r0, [pc, #108]	@ (8002db4 <RI_SetRegisterMotor1+0x3b0>)
 8002d48:	f7fe fb56 	bl	80013f8 <MCI_SetCurrentReferences>
          break;
 8002d4c:	e705      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002d4e:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8002d52:	f43f aef8 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002d56:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2004      	moveq	r0, #4
 8002d5e:	2005      	movne	r0, #5
 8002d60:	e6a5      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002d62:	d3d9      	bcc.n	8002d18 <RI_SetRegisterMotor1+0x314>
 8002d64:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002d68:	f43f aeed 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
 8002d6c:	d909      	bls.n	8002d82 <RI_SetRegisterMotor1+0x37e>
 8002d6e:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002d72:	f43f aee8 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
 8002d76:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2004      	moveq	r0, #4
 8002d7e:	2005      	movne	r0, #5
 8002d80:	e695      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002d82:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8002d86:	f43f aede 	beq.w	8002b46 <RI_SetRegisterMotor1+0x142>
 8002d8a:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8002d8e:	bf0c      	ite	eq
 8002d90:	2004      	moveq	r0, #4
 8002d92:	2005      	movne	r0, #5
 8002d94:	e68b      	b.n	8002aae <RI_SetRegisterMotor1+0xaa>
 8002d96:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002d9a:	2828      	cmp	r0, #40	@ 0x28
 8002d9c:	d008      	beq.n	8002db0 <RI_SetRegisterMotor1+0x3ac>
 8002d9e:	2005      	movs	r0, #5
}
 8002da0:	b004      	add	sp, #16
 8002da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da6:	28a8      	cmp	r0, #168	@ 0xa8
 8002da8:	d002      	beq.n	8002db0 <RI_SetRegisterMotor1+0x3ac>
 8002daa:	d9f4      	bls.n	8002d96 <RI_SetRegisterMotor1+0x392>
 8002dac:	28e8      	cmp	r0, #232	@ 0xe8
 8002dae:	d1f6      	bne.n	8002d9e <RI_SetRegisterMotor1+0x39a>
      retVal = MCP_ERROR_RO_REG;
 8002db0:	2004      	movs	r0, #4
 8002db2:	e647      	b.n	8002a44 <RI_SetRegisterMotor1+0x40>
 8002db4:	20000944 	.word	0x20000944
 8002db8:	20000108 	.word	0x20000108
 8002dbc:	200000d4 	.word	0x200000d4
 8002dc0:	200003b0 	.word	0x200003b0
 8002dc4:	20000384 	.word	0x20000384
 8002dc8:	200003dc 	.word	0x200003dc
 8002dcc:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002dd0:	d030      	beq.n	8002e34 <RI_SetRegisterMotor1+0x430>
 8002dd2:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8002dd6:	d1e2      	bne.n	8002d9e <RI_SetRegisterMotor1+0x39a>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002dd8:	4863      	ldr	r0, [pc, #396]	@ (8002f68 <RI_SetRegisterMotor1+0x564>)
 8002dda:	1ca9      	adds	r1, r5, #2
}
 8002ddc:	b004      	add	sp, #16
 8002dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002de2:	f005 ba27 	b.w	8008234 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	702b      	strb	r3, [r5, #0]
 8002dea:	e7e1      	b.n	8002db0 <RI_SetRegisterMotor1+0x3ac>
        *size = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002df0:	200a      	movs	r0, #10
 8002df2:	e627      	b.n	8002a44 <RI_SetRegisterMotor1+0x40>
          uint8_t regdata8 = *data;
 8002df4:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d011      	beq.n	8002e1e <RI_SetRegisterMotor1+0x41a>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d057      	beq.n	8002eae <RI_SetRegisterMotor1+0x4aa>
  uint8_t retVal = MCP_CMD_OK;
 8002dfe:	2000      	movs	r0, #0
 8002e00:	e62c      	b.n	8002a5c <RI_SetRegisterMotor1+0x58>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002e02:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002e06:	4959      	ldr	r1, [pc, #356]	@ (8002f6c <RI_SetRegisterMotor1+0x568>)
 8002e08:	4859      	ldr	r0, [pc, #356]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002e0a:	fb81 2103 	smull	r2, r1, r1, r3
 8002e0e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002e12:	2200      	movs	r2, #0
 8002e14:	b209      	sxth	r1, r1
 8002e16:	f7fe fadb 	bl	80013d0 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002e1a:	2000      	movs	r0, #0
          break;
 8002e1c:	e68e      	b.n	8002b3c <RI_SetRegisterMotor1+0x138>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002e1e:	4854      	ldr	r0, [pc, #336]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002e20:	f7fe fc3a 	bl	8001698 <MCI_GetTeref>
 8002e24:	2200      	movs	r2, #0
 8002e26:	4601      	mov	r1, r0
 8002e28:	4851      	ldr	r0, [pc, #324]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002e2a:	f7fe fadb 	bl	80013e4 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002e2e:	e7e6      	b.n	8002dfe <RI_SetRegisterMotor1+0x3fa>
          retVal = MCP_ERROR_RO_REG;
 8002e30:	2004      	movs	r0, #4
 8002e32:	e683      	b.n	8002b3c <RI_SetRegisterMotor1+0x138>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002e34:	f8d5 1002 	ldr.w	r1, [r5, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002e38:	484d      	ldr	r0, [pc, #308]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002e3a:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002e3c:	f7fe fadc 	bl	80013f8 <MCI_SetCurrentReferences>
            break;
 8002e40:	e670      	b.n	8002b24 <RI_SetRegisterMotor1+0x120>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002e42:	f8d5 1002 	ldr.w	r1, [r5, #2]
 8002e46:	4b49      	ldr	r3, [pc, #292]	@ (8002f6c <RI_SetRegisterMotor1+0x568>)
 8002e48:	88ea      	ldrh	r2, [r5, #6]
 8002e4a:	fb83 0301 	smull	r0, r3, r3, r1
 8002e4e:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002e52:	4847      	ldr	r0, [pc, #284]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002e54:	b209      	sxth	r1, r1
 8002e56:	f7fe fabb 	bl	80013d0 <MCI_ExecSpeedRamp>
            break;
 8002e5a:	e663      	b.n	8002b24 <RI_SetRegisterMotor1+0x120>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002e5c:	f011 0607 	ands.w	r6, r1, #7
 8002e60:	d123      	bne.n	8002eaa <RI_SetRegisterMotor1+0x4a6>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002e62:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002e64:	292f      	cmp	r1, #47	@ 0x2f
 8002e66:	d820      	bhi.n	8002eaa <RI_SetRegisterMotor1+0x4a6>
              for (i = 0; i <nbrOfPhase; i++)
 8002e68:	08c9      	lsrs	r1, r1, #3
 8002e6a:	f43f ae5b 	beq.w	8002b24 <RI_SetRegisterMotor1+0x120>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e6e:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8002f6c <RI_SetRegisterMotor1+0x568>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002e72:	4f40      	ldr	r7, [pc, #256]	@ (8002f74 <RI_SetRegisterMotor1+0x570>)
 8002e74:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e78:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e7c:	88eb      	ldrh	r3, [r5, #6]
 8002e7e:	f8ad 3008 	strh.w	r3, [sp, #8]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e82:	f835 3f08 	ldrh.w	r3, [r5, #8]!
 8002e86:	f8ad 3004 	strh.w	r3, [sp, #4]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e8a:	fb88 1302 	smull	r1, r3, r8, r2
 8002e8e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002e92:	b2f1      	uxtb	r1, r6
 8002e94:	aa01      	add	r2, sp, #4
 8002e96:	4638      	mov	r0, r7
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e98:	f8ad 3006 	strh.w	r3, [sp, #6]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002e9c:	f006 fcba 	bl	8009814 <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 8002ea0:	42a5      	cmp	r5, r4
 8002ea2:	f106 0601 	add.w	r6, r6, #1
 8002ea6:	d1e7      	bne.n	8002e78 <RI_SetRegisterMotor1+0x474>
 8002ea8:	e63c      	b.n	8002b24 <RI_SetRegisterMotor1+0x120>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002eaa:	200a      	movs	r0, #10
            break;
 8002eac:	e5ca      	b.n	8002a44 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002eae:	4830      	ldr	r0, [pc, #192]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002eb0:	f7fe fb9a 	bl	80015e8 <MCI_GetMecSpeedRefUnit>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	482d      	ldr	r0, [pc, #180]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002eba:	f7fe fa89 	bl	80013d0 <MCI_ExecSpeedRamp>
 8002ebe:	e79e      	b.n	8002dfe <RI_SetRegisterMotor1+0x3fa>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002ec0:	482d      	ldr	r0, [pc, #180]	@ (8002f78 <RI_SetRegisterMotor1+0x574>)
 8002ec2:	b229      	sxth	r1, r5
 8002ec4:	f005 fa80 	bl	80083c8 <PID_SetKP>
          break;
 8002ec8:	e647      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002eca:	482c      	ldr	r0, [pc, #176]	@ (8002f7c <RI_SetRegisterMotor1+0x578>)
 8002ecc:	b229      	sxth	r1, r5
 8002ece:	f005 fa7b 	bl	80083c8 <PID_SetKP>
          break;
 8002ed2:	e642      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          currComp = MCI_GetIqdref(pMCIN);
 8002ed4:	4826      	ldr	r0, [pc, #152]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002ed6:	f7fe fbb5 	bl	8001644 <MCI_GetIqdref>
 8002eda:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8002edc:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002ee0:	9901      	ldr	r1, [sp, #4]
 8002ee2:	4823      	ldr	r0, [pc, #140]	@ (8002f70 <RI_SetRegisterMotor1+0x56c>)
 8002ee4:	f7fe fa88 	bl	80013f8 <MCI_SetCurrentReferences>
          break;
 8002ee8:	e637      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002eea:	4825      	ldr	r0, [pc, #148]	@ (8002f80 <RI_SetRegisterMotor1+0x57c>)
 8002eec:	4629      	mov	r1, r5
 8002eee:	f005 fa7b 	bl	80083e8 <PID_SetKPDivisorPOW2>
          break;
 8002ef2:	e632      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002ef4:	4821      	ldr	r0, [pc, #132]	@ (8002f7c <RI_SetRegisterMotor1+0x578>)
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f005 faa0 	bl	800843c <PID_SetKDDivisorPOW2>
          break;
 8002efc:	e62d      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002efe:	4821      	ldr	r0, [pc, #132]	@ (8002f84 <RI_SetRegisterMotor1+0x580>)
 8002f00:	4629      	mov	r1, r5
 8002f02:	f005 fa7f 	bl	8008404 <PID_SetKIDivisorPOW2>
          break;
 8002f06:	e628      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002f08:	aa01      	add	r2, sp, #4
 8002f0a:	f10d 0102 	add.w	r1, sp, #2
 8002f0e:	481e      	ldr	r0, [pc, #120]	@ (8002f88 <RI_SetRegisterMotor1+0x584>)
 8002f10:	f007 f854 	bl	8009fbc <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8002f14:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002f18:	481b      	ldr	r0, [pc, #108]	@ (8002f88 <RI_SetRegisterMotor1+0x584>)
 8002f1a:	b22a      	sxth	r2, r5
 8002f1c:	f007 f856 	bl	8009fcc <STO_PLL_SetObserverGains>
          break;
 8002f20:	e61b      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002f22:	4818      	ldr	r0, [pc, #96]	@ (8002f84 <RI_SetRegisterMotor1+0x580>)
 8002f24:	b229      	sxth	r1, r5
 8002f26:	f005 fa4f 	bl	80083c8 <PID_SetKP>
          break;
 8002f2a:	e616      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002f2c:	4814      	ldr	r0, [pc, #80]	@ (8002f80 <RI_SetRegisterMotor1+0x57c>)
 8002f2e:	4629      	mov	r1, r5
 8002f30:	f005 fa84 	bl	800843c <PID_SetKDDivisorPOW2>
          break;
 8002f34:	e611      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002f36:	4811      	ldr	r0, [pc, #68]	@ (8002f7c <RI_SetRegisterMotor1+0x578>)
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f005 fa55 	bl	80083e8 <PID_SetKPDivisorPOW2>
          break;
 8002f3e:	e60c      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002f40:	480f      	ldr	r0, [pc, #60]	@ (8002f80 <RI_SetRegisterMotor1+0x57c>)
 8002f42:	b229      	sxth	r1, r5
 8002f44:	f005 fa42 	bl	80083cc <PID_SetKI>
          break;
 8002f48:	e607      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8002f4a:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <RI_SetRegisterMotor1+0x578>)
 8002f4c:	b229      	sxth	r1, r5
 8002f4e:	f005 fa3d 	bl	80083cc <PID_SetKI>
          break;
 8002f52:	e602      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002f54:	480b      	ldr	r0, [pc, #44]	@ (8002f84 <RI_SetRegisterMotor1+0x580>)
 8002f56:	b229      	sxth	r1, r5
 8002f58:	f005 fa68 	bl	800842c <PID_SetKD>
          break;
 8002f5c:	e5fd      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002f5e:	4806      	ldr	r0, [pc, #24]	@ (8002f78 <RI_SetRegisterMotor1+0x574>)
 8002f60:	4629      	mov	r1, r5
 8002f62:	f005 fa41 	bl	80083e8 <PID_SetKPDivisorPOW2>
          break;
 8002f66:	e5f8      	b.n	8002b5a <RI_SetRegisterMotor1+0x156>
 8002f68:	20000438 	.word	0x20000438
 8002f6c:	2aaaaaab 	.word	0x2aaaaaab
 8002f70:	20000944 	.word	0x20000944
 8002f74:	200002d8 	.word	0x200002d8
 8002f78:	20000108 	.word	0x20000108
 8002f7c:	200003b0 	.word	0x200003b0
 8002f80:	200003dc 	.word	0x200003dc
 8002f84:	20000384 	.word	0x20000384
 8002f88:	200000d4 	.word	0x200000d4

08002f8c <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002f8c:	b510      	push	{r4, lr}
    switch (typeID)
 8002f8e:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002f92:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002f96:	f1bc 0f20 	cmp.w	ip, #32
 8002f9a:	d812      	bhi.n	8002fc2 <RI_GetRegisterGlobal+0x36>
 8002f9c:	e8df f00c 	tbb	[pc, ip]
 8002fa0:	1111111b 	.word	0x1111111b
 8002fa4:	11111111 	.word	0x11111111
 8002fa8:	11111127 	.word	0x11111127
 8002fac:	11111111 	.word	0x11111111
 8002fb0:	11111122 	.word	0x11111122
 8002fb4:	11111111 	.word	0x11111111
 8002fb8:	11111135 	.word	0x11111135
 8002fbc:	11111111 	.word	0x11111111
 8002fc0:	13          	.byte	0x13
 8002fc1:	00          	.byte	0x00
 8002fc2:	2007      	movs	r0, #7
}
 8002fc4:	bd10      	pop	{r4, pc}
        switch (regID)
 8002fc6:	2828      	cmp	r0, #40	@ 0x28
 8002fc8:	d044      	beq.n	8003054 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 8002fca:	8812      	ldrh	r2, [r2, #0]
 8002fcc:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002fce:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	801a      	strh	r2, [r3, #0]
}
 8002fd4:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002fd6:	f1be 0f00 	cmp.w	lr, #0
 8002fda:	dd39      	ble.n	8003050 <RI_GetRegisterGlobal+0xc4>
 8002fdc:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8002fde:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002fe0:	2005      	movs	r0, #5
}
 8002fe2:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002fe4:	f1be 0f03 	cmp.w	lr, #3
 8002fe8:	dd2a      	ble.n	8003040 <RI_GetRegisterGlobal+0xb4>
 8002fea:	2204      	movs	r2, #4
 8002fec:	e7f7      	b.n	8002fde <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8002fee:	f1be 0f01 	cmp.w	lr, #1
 8002ff2:	dd25      	ble.n	8003040 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8002ff4:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002ff8:	d05a      	beq.n	80030b0 <RI_GetRegisterGlobal+0x124>
 8002ffa:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002ffe:	bf0c      	ite	eq
 8003000:	2000      	moveq	r0, #0
 8003002:	2005      	movne	r0, #5
          *size = 2;
 8003004:	2202      	movs	r2, #2
 8003006:	801a      	strh	r2, [r3, #0]
}
 8003008:	bd10      	pop	{r4, pc}
        switch (regID)
 800300a:	2820      	cmp	r0, #32
 800300c:	d02c      	beq.n	8003068 <RI_GetRegisterGlobal+0xdc>
 800300e:	2860      	cmp	r0, #96	@ 0x60
 8003010:	d118      	bne.n	8003044 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003012:	4c28      	ldr	r4, [pc, #160]	@ (80030b4 <RI_GetRegisterGlobal+0x128>)
 8003014:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003018:	2101      	movs	r1, #1
 800301a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800301c:	b1a0      	cbz	r0, 8003048 <RI_GetRegisterGlobal+0xbc>
 800301e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8003022:	46a4      	mov	ip, r4
 8003024:	e008      	b.n	8003038 <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 8003026:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800302a:	8819      	ldrh	r1, [r3, #0]
 800302c:	3101      	adds	r1, #1
 800302e:	b289      	uxth	r1, r1
 8003030:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003032:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8003036:	b138      	cbz	r0, 8003048 <RI_GetRegisterGlobal+0xbc>
 8003038:	4571      	cmp	r1, lr
 800303a:	d3f4      	bcc.n	8003026 <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 800303c:	2006      	movs	r0, #6
}
 800303e:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003040:	2008      	movs	r0, #8
}
 8003042:	bd10      	pop	{r4, pc}
 8003044:	2200      	movs	r2, #0
 8003046:	e7ca      	b.n	8002fde <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8003048:	2300      	movs	r3, #0
 800304a:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 800304c:	2000      	movs	r0, #0
}
 800304e:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003050:	4608      	mov	r0, r1
}
 8003052:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003054:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003058:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800305a:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800305e:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003060:	d81a      	bhi.n	8003098 <RI_GetRegisterGlobal+0x10c>
 8003062:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003064:	2008      	movs	r0, #8
 8003066:	e7b4      	b.n	8002fd2 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003068:	4c13      	ldr	r4, [pc, #76]	@ (80030b8 <RI_GetRegisterGlobal+0x12c>)
 800306a:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 800306e:	2101      	movs	r1, #1
 8003070:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003072:	2800      	cmp	r0, #0
 8003074:	d0e8      	beq.n	8003048 <RI_GetRegisterGlobal+0xbc>
 8003076:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800307a:	46a4      	mov	ip, r4
 800307c:	e009      	b.n	8003092 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 800307e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003082:	8819      	ldrh	r1, [r3, #0]
 8003084:	3101      	adds	r1, #1
 8003086:	b289      	uxth	r1, r1
 8003088:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800308a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800308e:	2800      	cmp	r0, #0
 8003090:	d0da      	beq.n	8003048 <RI_GetRegisterGlobal+0xbc>
 8003092:	458e      	cmp	lr, r1
 8003094:	d8f3      	bhi.n	800307e <RI_GetRegisterGlobal+0xf2>
 8003096:	e7d1      	b.n	800303c <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003098:	4908      	ldr	r1, [pc, #32]	@ (80030bc <RI_GetRegisterGlobal+0x130>)
 800309a:	6848      	ldr	r0, [r1, #4]
 800309c:	680c      	ldr	r4, [r1, #0]
 800309e:	8909      	ldrh	r1, [r1, #8]
 80030a0:	f8c2 0006 	str.w	r0, [r2, #6]
 80030a4:	f8c2 4002 	str.w	r4, [r2, #2]
 80030a8:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 80030aa:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80030ac:	220c      	movs	r2, #12
 80030ae:	e790      	b.n	8002fd2 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 80030b0:	2000      	movs	r0, #0
 80030b2:	e7a7      	b.n	8003004 <RI_GetRegisterGlobal+0x78>
 80030b4:	0800a460 	.word	0x0800a460
 80030b8:	0800a43c 	.word	0x0800a43c
 80030bc:	0800a430 	.word	0x0800a430

080030c0 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80030c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c4:	b096      	sub	sp, #88	@ 0x58
 80030c6:	461d      	mov	r5, r3
    switch (typeID)
 80030c8:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80030cc:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 80030d0:	4614      	mov	r4, r2
    switch (typeID)
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d812      	bhi.n	80030fc <RI_GetRegisterMotor1+0x3c>
 80030d6:	e8df f003 	tbb	[pc, r3]
 80030da:	1135      	.short	0x1135
 80030dc:	11111111 	.word	0x11111111
 80030e0:	116e1111 	.word	0x116e1111
 80030e4:	11111111 	.word	0x11111111
 80030e8:	11481111 	.word	0x11481111
 80030ec:	11111111 	.word	0x11111111
 80030f0:	11641111 	.word	0x11641111
 80030f4:	11111111 	.word	0x11111111
 80030f8:	1111      	.short	0x1111
 80030fa:	15          	.byte	0x15
 80030fb:	00          	.byte	0x00
 80030fc:	2007      	movs	r0, #7
  }
 80030fe:	b016      	add	sp, #88	@ 0x58
 8003100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 8003104:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003108:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 800310c:	f000 82c4 	beq.w	8003698 <RI_GetRegisterMotor1+0x5d8>
 8003110:	f200 8086 	bhi.w	8003220 <RI_GetRegisterMotor1+0x160>
 8003114:	28e8      	cmp	r0, #232	@ 0xe8
 8003116:	f000 82b5 	beq.w	8003684 <RI_GetRegisterMotor1+0x5c4>
 800311a:	d872      	bhi.n	8003202 <RI_GetRegisterMotor1+0x142>
 800311c:	2868      	cmp	r0, #104	@ 0x68
 800311e:	f000 82cc 	beq.w	80036ba <RI_GetRegisterMotor1+0x5fa>
 8003122:	28a8      	cmp	r0, #168	@ 0xa8
 8003124:	f040 82a9 	bne.w	800367a <RI_GetRegisterMotor1+0x5ba>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003128:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 800312c:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800312e:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003132:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003134:	f200 825c 	bhi.w	80035f0 <RI_GetRegisterMotor1+0x530>
 8003138:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800313a:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 800313c:	802b      	strh	r3, [r5, #0]
  }
 800313e:	b016      	add	sp, #88	@ 0x58
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 8003144:	f1bc 0f00 	cmp.w	ip, #0
 8003148:	f340 825f 	ble.w	800360a <RI_GetRegisterMotor1+0x54a>
          switch (regID)
 800314c:	2888      	cmp	r0, #136	@ 0x88
 800314e:	f000 8260 	beq.w	8003612 <RI_GetRegisterMotor1+0x552>
 8003152:	28c8      	cmp	r0, #200	@ 0xc8
 8003154:	f000 8267 	beq.w	8003626 <RI_GetRegisterMotor1+0x566>
 8003158:	2848      	cmp	r0, #72	@ 0x48
 800315a:	f000 8260 	beq.w	800361e <RI_GetRegisterMotor1+0x55e>
 800315e:	2005      	movs	r0, #5
          *size = 1;
 8003160:	2301      	movs	r3, #1
 8003162:	802b      	strh	r3, [r5, #0]
  }
 8003164:	b016      	add	sp, #88	@ 0x58
 8003166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 4)
 800316a:	f1bc 0f03 	cmp.w	ip, #3
 800316e:	f340 81fa 	ble.w	8003566 <RI_GetRegisterMotor1+0x4a6>
          switch (regID)
 8003172:	28d8      	cmp	r0, #216	@ 0xd8
 8003174:	f000 82b8 	beq.w	80036e8 <RI_GetRegisterMotor1+0x628>
 8003178:	f200 81dd 	bhi.w	8003536 <RI_GetRegisterMotor1+0x476>
 800317c:	2858      	cmp	r0, #88	@ 0x58
 800317e:	f000 82ab 	beq.w	80036d8 <RI_GetRegisterMotor1+0x618>
 8003182:	2898      	cmp	r0, #152	@ 0x98
 8003184:	f040 81e8 	bne.w	8003558 <RI_GetRegisterMotor1+0x498>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003188:	48aa      	ldr	r0, [pc, #680]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
 800318a:	f7fe fa2d 	bl	80015e8 <MCI_GetMecSpeedRefUnit>
 800318e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003192:	0040      	lsls	r0, r0, #1
 8003194:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003196:	2000      	movs	r0, #0
          *size = 4;
 8003198:	2304      	movs	r3, #4
 800319a:	802b      	strh	r3, [r5, #0]
  }
 800319c:	b016      	add	sp, #88	@ 0x58
 800319e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 80031a2:	28a0      	cmp	r0, #160	@ 0xa0
 80031a4:	f000 8200 	beq.w	80035a8 <RI_GetRegisterMotor1+0x4e8>
 80031a8:	28e0      	cmp	r0, #224	@ 0xe0
 80031aa:	f000 81e0 	beq.w	800356e <RI_GetRegisterMotor1+0x4ae>
            *size= 0 ; /* */
 80031ae:	2300      	movs	r3, #0
 80031b0:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80031b2:	2005      	movs	r0, #5
            break;
 80031b4:	e7a3      	b.n	80030fe <RI_GetRegisterMotor1+0x3e>
        if (freeSpace >= 2)
 80031b6:	f1bc 0f01 	cmp.w	ip, #1
 80031ba:	f340 81d4 	ble.w	8003566 <RI_GetRegisterMotor1+0x4a6>
          switch (regID)
 80031be:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 80031c2:	f000 8300 	beq.w	80037c6 <RI_GetRegisterMotor1+0x706>
 80031c6:	f200 80a8 	bhi.w	800331a <RI_GetRegisterMotor1+0x25a>
 80031ca:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80031ce:	f000 8306 	beq.w	80037de <RI_GetRegisterMotor1+0x71e>
 80031d2:	f200 808d 	bhi.w	80032f0 <RI_GetRegisterMotor1+0x230>
 80031d6:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 80031da:	f000 82fb 	beq.w	80037d4 <RI_GetRegisterMotor1+0x714>
 80031de:	d961      	bls.n	80032a4 <RI_GetRegisterMotor1+0x1e4>
 80031e0:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80031e4:	f000 82ea 	beq.w	80037bc <RI_GetRegisterMotor1+0x6fc>
 80031e8:	d954      	bls.n	8003294 <RI_GetRegisterMotor1+0x1d4>
 80031ea:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80031ee:	d144      	bne.n	800327a <RI_GetRegisterMotor1+0x1ba>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80031f0:	4891      	ldr	r0, [pc, #580]	@ (8003438 <RI_GetRegisterMotor1+0x378>)
 80031f2:	aa13      	add	r2, sp, #76	@ 0x4c
 80031f4:	a912      	add	r1, sp, #72	@ 0x48
 80031f6:	f006 fee1 	bl	8009fbc <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80031fa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80031fe:	8023      	strh	r3, [r4, #0]
              break;
 8003200:	e0af      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003202:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8003206:	f040 8238 	bne.w	800367a <RI_GetRegisterMotor1+0x5ba>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800320a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 800320e:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003210:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8003214:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003216:	f200 81df 	bhi.w	80035d8 <RI_GetRegisterMotor1+0x518>
 800321a:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800321c:	2008      	movs	r0, #8
 800321e:	e78d      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
 8003220:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003224:	f000 8203 	beq.w	800362e <RI_GetRegisterMotor1+0x56e>
 8003228:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 800322c:	d112      	bne.n	8003254 <RI_GetRegisterMotor1+0x194>
            *rawSize = 4;
 800322e:	2304      	movs	r3, #4
 8003230:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003232:	4880      	ldr	r0, [pc, #512]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
 8003234:	f7fe fa06 	bl	8001644 <MCI_GetIqdref>
 8003238:	4603      	mov	r3, r0
 800323a:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800323c:	487d      	ldr	r0, [pc, #500]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 800323e:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003240:	f7fe fa00 	bl	8001644 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8003244:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003246:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 800324a:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800324c:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 800324e:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8003250:	2000      	movs	r0, #0
            break;
 8003252:	e773      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
 8003254:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003258:	f040 820f 	bne.w	800367a <RI_GetRegisterMotor1+0x5ba>
            *rawSize = 4;
 800325c:	2304      	movs	r3, #4
 800325e:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003260:	4874      	ldr	r0, [pc, #464]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
 8003262:	f7fe f9af 	bl	80015c4 <MCI_GetLastRampFinalTorque>
 8003266:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003268:	4872      	ldr	r0, [pc, #456]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
 800326a:	f7fe f9af 	bl	80015cc <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 800326e:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003270:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8003272:	3302      	adds	r3, #2
 8003274:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8003276:	2000      	movs	r0, #0
            break;
 8003278:	e760      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
 800327a:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 800327e:	f040 823b 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003282:	486d      	ldr	r0, [pc, #436]	@ (8003438 <RI_GetRegisterMotor1+0x378>)
 8003284:	aa13      	add	r2, sp, #76	@ 0x4c
 8003286:	a912      	add	r1, sp, #72	@ 0x48
 8003288:	f006 fe98 	bl	8009fbc <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800328c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8003290:	8023      	strh	r3, [r4, #0]
              break;
 8003292:	e066      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003294:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003298:	d111      	bne.n	80032be <RI_GetRegisterMotor1+0x1fe>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 800329a:	4868      	ldr	r0, [pc, #416]	@ (800343c <RI_GetRegisterMotor1+0x37c>)
 800329c:	f005 f898 	bl	80083d0 <PID_GetKP>
 80032a0:	8020      	strh	r0, [r4, #0]
              break;
 80032a2:	e05e      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80032a4:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80032a8:	f000 82af 	beq.w	800380a <RI_GetRegisterMotor1+0x74a>
 80032ac:	d919      	bls.n	80032e2 <RI_GetRegisterMotor1+0x222>
 80032ae:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80032b2:	d10d      	bne.n	80032d0 <RI_GetRegisterMotor1+0x210>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 80032b4:	4862      	ldr	r0, [pc, #392]	@ (8003440 <RI_GetRegisterMotor1+0x380>)
 80032b6:	f005 f88b 	bl	80083d0 <PID_GetKP>
 80032ba:	8020      	strh	r0, [r4, #0]
              break;
 80032bc:	e051      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80032be:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 80032c2:	f040 8219 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 80032c6:	485d      	ldr	r0, [pc, #372]	@ (800343c <RI_GetRegisterMotor1+0x37c>)
 80032c8:	f005 f886 	bl	80083d8 <PID_GetKI>
 80032cc:	8020      	strh	r0, [r4, #0]
              break;
 80032ce:	e048      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80032d0:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80032d4:	f040 8210 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 80032d8:	4859      	ldr	r0, [pc, #356]	@ (8003440 <RI_GetRegisterMotor1+0x380>)
 80032da:	f005 f87d 	bl	80083d8 <PID_GetKI>
 80032de:	8020      	strh	r0, [r4, #0]
              break;
 80032e0:	e03f      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80032e2:	2890      	cmp	r0, #144	@ 0x90
 80032e4:	d131      	bne.n	800334a <RI_GetRegisterMotor1+0x28a>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 80032e6:	4857      	ldr	r0, [pc, #348]	@ (8003444 <RI_GetRegisterMotor1+0x384>)
 80032e8:	f005 f872 	bl	80083d0 <PID_GetKP>
 80032ec:	8020      	strh	r0, [r4, #0]
              break;
 80032ee:	e038      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80032f0:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80032f4:	f000 8284 	beq.w	8003800 <RI_GetRegisterMotor1+0x740>
 80032f8:	f240 80eb 	bls.w	80034d2 <RI_GetRegisterMotor1+0x412>
 80032fc:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8003300:	f000 8277 	beq.w	80037f2 <RI_GetRegisterMotor1+0x732>
 8003304:	f240 80db 	bls.w	80034be <RI_GetRegisterMotor1+0x3fe>
 8003308:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 800330c:	f040 81f4 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003310:	4848      	ldr	r0, [pc, #288]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
 8003312:	f7fe f997 	bl	8001644 <MCI_GetIqdref>
 8003316:	8020      	strh	r0, [r4, #0]
              break;
 8003318:	e023      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 800331a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800331e:	d020      	beq.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003320:	d83c      	bhi.n	800339c <RI_GetRegisterMotor1+0x2dc>
 8003322:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8003326:	f000 825f 	beq.w	80037e8 <RI_GetRegisterMotor1+0x728>
 800332a:	d928      	bls.n	800337e <RI_GetRegisterMotor1+0x2be>
 800332c:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8003330:	f000 8230 	beq.w	8003794 <RI_GetRegisterMotor1+0x6d4>
 8003334:	d91b      	bls.n	800336e <RI_GetRegisterMotor1+0x2ae>
 8003336:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 800333a:	d10e      	bne.n	800335a <RI_GetRegisterMotor1+0x29a>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 800333c:	483e      	ldr	r0, [pc, #248]	@ (8003438 <RI_GetRegisterMotor1+0x378>)
 800333e:	f006 fe1f 	bl	8009f80 <STO_PLL_GetEstimatedBemf>
 8003342:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003346:	8023      	strh	r3, [r4, #0]
              break;
 8003348:	e00b      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 800334a:	28d0      	cmp	r0, #208	@ 0xd0
 800334c:	f040 81d4 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003350:	483c      	ldr	r0, [pc, #240]	@ (8003444 <RI_GetRegisterMotor1+0x384>)
 8003352:	f005 f841 	bl	80083d8 <PID_GetKI>
 8003356:	8020      	strh	r0, [r4, #0]
              break;
 8003358:	e003      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 800335a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800335e:	f040 81cb 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
    uint8_t retVal = MCP_CMD_OK;
 8003362:	2000      	movs	r0, #0
          *size = 2;
 8003364:	2302      	movs	r3, #2
 8003366:	802b      	strh	r3, [r5, #0]
  }
 8003368:	b016      	add	sp, #88	@ 0x58
 800336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800336e:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003372:	d128      	bne.n	80033c6 <RI_GetRegisterMotor1+0x306>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8003374:	4830      	ldr	r0, [pc, #192]	@ (8003438 <RI_GetRegisterMotor1+0x378>)
 8003376:	f006 fe0f 	bl	8009f98 <STO_PLL_GetEstimatedCurrent>
 800337a:	8020      	strh	r0, [r4, #0]
              break;
 800337c:	e7f1      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 800337e:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003382:	f000 8202 	beq.w	800378a <RI_GetRegisterMotor1+0x6ca>
 8003386:	d97d      	bls.n	8003484 <RI_GetRegisterMotor1+0x3c4>
 8003388:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800338c:	d171      	bne.n	8003472 <RI_GetRegisterMotor1+0x3b2>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800338e:	4829      	ldr	r0, [pc, #164]	@ (8003434 <RI_GetRegisterMotor1+0x374>)
 8003390:	f7fe f974 	bl	800167c <MCI_GetValphabeta>
 8003394:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003398:	8023      	strh	r3, [r4, #0]
              break;
 800339a:	e7e2      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 800339c:	f241 5390 	movw	r3, #5520	@ 0x1590
 80033a0:	4298      	cmp	r0, r3
 80033a2:	f000 81ed 	beq.w	8003780 <RI_GetRegisterMotor1+0x6c0>
 80033a6:	d92c      	bls.n	8003402 <RI_GetRegisterMotor1+0x342>
 80033a8:	f241 6350 	movw	r3, #5712	@ 0x1650
 80033ac:	4298      	cmp	r0, r3
 80033ae:	f000 8200 	beq.w	80037b2 <RI_GetRegisterMotor1+0x6f2>
 80033b2:	d91d      	bls.n	80033f0 <RI_GetRegisterMotor1+0x330>
 80033b4:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 80033b8:	4298      	cmp	r0, r3
 80033ba:	d10f      	bne.n	80033dc <RI_GetRegisterMotor1+0x31c>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80033bc:	4822      	ldr	r0, [pc, #136]	@ (8003448 <RI_GetRegisterMotor1+0x388>)
 80033be:	f005 f81b 	bl	80083f8 <PID_GetKIDivisorPOW2>
 80033c2:	8020      	strh	r0, [r4, #0]
              break;
 80033c4:	e7cd      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80033c6:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 80033ca:	f040 8195 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 80033ce:	481a      	ldr	r0, [pc, #104]	@ (8003438 <RI_GetRegisterMotor1+0x378>)
 80033d0:	f006 fde2 	bl	8009f98 <STO_PLL_GetEstimatedCurrent>
 80033d4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80033d8:	8023      	strh	r3, [r4, #0]
              break;
 80033da:	e7c2      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80033dc:	f641 1310 	movw	r3, #6416	@ 0x1910
 80033e0:	4298      	cmp	r0, r3
 80033e2:	f040 8189 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80033e6:	4818      	ldr	r0, [pc, #96]	@ (8003448 <RI_GetRegisterMotor1+0x388>)
 80033e8:	f004 fffc 	bl	80083e4 <PID_GetKPDivisorPOW2>
 80033ec:	8020      	strh	r0, [r4, #0]
              break;
 80033ee:	e7b8      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80033f0:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 80033f4:	4298      	cmp	r0, r3
 80033f6:	d113      	bne.n	8003420 <RI_GetRegisterMotor1+0x360>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 80033f8:	4811      	ldr	r0, [pc, #68]	@ (8003440 <RI_GetRegisterMotor1+0x380>)
 80033fa:	f004 fff3 	bl	80083e4 <PID_GetKPDivisorPOW2>
 80033fe:	8020      	strh	r0, [r4, #0]
              break;
 8003400:	e7af      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003402:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003406:	4298      	cmp	r0, r3
 8003408:	f000 81ce 	beq.w	80037a8 <RI_GetRegisterMotor1+0x6e8>
 800340c:	d928      	bls.n	8003460 <RI_GetRegisterMotor1+0x3a0>
 800340e:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003412:	4298      	cmp	r0, r3
 8003414:	d11a      	bne.n	800344c <RI_GetRegisterMotor1+0x38c>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8003416:	4809      	ldr	r0, [pc, #36]	@ (800343c <RI_GetRegisterMotor1+0x37c>)
 8003418:	f004 ffe4 	bl	80083e4 <PID_GetKPDivisorPOW2>
 800341c:	8020      	strh	r0, [r4, #0]
              break;
 800341e:	e7a0      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003420:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003424:	4298      	cmp	r0, r3
 8003426:	f040 8167 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 800342a:	4805      	ldr	r0, [pc, #20]	@ (8003440 <RI_GetRegisterMotor1+0x380>)
 800342c:	f004 ffe4 	bl	80083f8 <PID_GetKIDivisorPOW2>
 8003430:	8020      	strh	r0, [r4, #0]
              break;
 8003432:	e796      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003434:	20000944 	.word	0x20000944
 8003438:	200000d4 	.word	0x200000d4
 800343c:	20000384 	.word	0x20000384
 8003440:	200003b0 	.word	0x200003b0
 8003444:	200003dc 	.word	0x200003dc
 8003448:	20000108 	.word	0x20000108
 800344c:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003450:	4298      	cmp	r0, r3
 8003452:	f040 8151 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8003456:	48b0      	ldr	r0, [pc, #704]	@ (8003718 <RI_GetRegisterMotor1+0x658>)
 8003458:	f004 ffce 	bl	80083f8 <PID_GetKIDivisorPOW2>
 800345c:	8020      	strh	r0, [r4, #0]
              break;
 800345e:	e780      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003460:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003464:	4298      	cmp	r0, r3
 8003466:	d115      	bne.n	8003494 <RI_GetRegisterMotor1+0x3d4>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8003468:	48ac      	ldr	r0, [pc, #688]	@ (800371c <RI_GetRegisterMotor1+0x65c>)
 800346a:	f004 ffbb 	bl	80083e4 <PID_GetKPDivisorPOW2>
 800346e:	8020      	strh	r0, [r4, #0]
              break;
 8003470:	e777      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003472:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8003476:	f040 813f 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 800347a:	48a9      	ldr	r0, [pc, #676]	@ (8003720 <RI_GetRegisterMotor1+0x660>)
 800347c:	f006 f9ec 	bl	8009858 <SPD_GetElAngle>
 8003480:	8020      	strh	r0, [r4, #0]
              break;
 8003482:	e76e      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003484:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003488:	d10e      	bne.n	80034a8 <RI_GetRegisterMotor1+0x3e8>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800348a:	48a6      	ldr	r0, [pc, #664]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 800348c:	f7fe f8e8 	bl	8001660 <MCI_GetVqd>
 8003490:	8020      	strh	r0, [r4, #0]
              break;
 8003492:	e766      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003494:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003498:	4298      	cmp	r0, r3
 800349a:	f040 812d 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 800349e:	489f      	ldr	r0, [pc, #636]	@ (800371c <RI_GetRegisterMotor1+0x65c>)
 80034a0:	f004 ffaa 	bl	80083f8 <PID_GetKIDivisorPOW2>
 80034a4:	8020      	strh	r0, [r4, #0]
              break;
 80034a6:	e75c      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80034a8:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80034ac:	f040 8124 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80034b0:	489c      	ldr	r0, [pc, #624]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 80034b2:	f7fe f8d5 	bl	8001660 <MCI_GetVqd>
 80034b6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80034ba:	8023      	strh	r3, [r4, #0]
              break;
 80034bc:	e751      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80034be:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80034c2:	d113      	bne.n	80034ec <RI_GetRegisterMotor1+0x42c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80034c4:	4897      	ldr	r0, [pc, #604]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 80034c6:	f7fe f8a1 	bl	800160c <MCI_GetIalphabeta>
 80034ca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80034ce:	8023      	strh	r3, [r4, #0]
              break;
 80034d0:	e747      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80034d2:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 80034d6:	f000 8162 	beq.w	800379e <RI_GetRegisterMotor1+0x6de>
 80034da:	d91b      	bls.n	8003514 <RI_GetRegisterMotor1+0x454>
 80034dc:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80034e0:	d10d      	bne.n	80034fe <RI_GetRegisterMotor1+0x43e>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80034e2:	4890      	ldr	r0, [pc, #576]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 80034e4:	f7fe f884 	bl	80015f0 <MCI_GetIab>
 80034e8:	8020      	strh	r0, [r4, #0]
              break;
 80034ea:	e73a      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80034ec:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80034f0:	f040 8102 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80034f4:	488b      	ldr	r0, [pc, #556]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 80034f6:	f7fe f897 	bl	8001628 <MCI_GetIqd>
 80034fa:	8020      	strh	r0, [r4, #0]
              break;
 80034fc:	e731      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 80034fe:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003502:	f040 80f9 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003506:	4887      	ldr	r0, [pc, #540]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 8003508:	f7fe f872 	bl	80015f0 <MCI_GetIab>
 800350c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003510:	8023      	strh	r3, [r4, #0]
              break;
 8003512:	e726      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003514:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003518:	d104      	bne.n	8003524 <RI_GetRegisterMotor1+0x464>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 800351a:	4883      	ldr	r0, [pc, #524]	@ (8003728 <RI_GetRegisterMotor1+0x668>)
 800351c:	f004 ff58 	bl	80083d0 <PID_GetKP>
 8003520:	8020      	strh	r0, [r4, #0]
              break;
 8003522:	e71e      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003524:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003528:	f040 80e6 	bne.w	80036f8 <RI_GetRegisterMotor1+0x638>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 800352c:	487f      	ldr	r0, [pc, #508]	@ (800372c <RI_GetRegisterMotor1+0x66c>)
 800352e:	f004 faa1 	bl	8007a74 <VBS_GetAvBusVoltage_V>
 8003532:	8020      	strh	r0, [r4, #0]
              break;
 8003534:	e715      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003536:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 800353a:	f000 80c8 	beq.w	80036ce <RI_GetRegisterMotor1+0x60e>
 800353e:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003542:	4298      	cmp	r0, r3
 8003544:	d163      	bne.n	800360e <RI_GetRegisterMotor1+0x54e>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003546:	4b7a      	ldr	r3, [pc, #488]	@ (8003730 <RI_GetRegisterMotor1+0x670>)
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f004 ffdd 	bl	8008508 <PQD_GetAvrgElMotorPowerW>
 800354e:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003552:	9b01      	ldr	r3, [sp, #4]
 8003554:	6023      	str	r3, [r4, #0]
              break;
 8003556:	e61e      	b.n	8003196 <RI_GetRegisterMotor1+0xd6>
 8003558:	2818      	cmp	r0, #24
 800355a:	d158      	bne.n	800360e <RI_GetRegisterMotor1+0x54e>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800355c:	4871      	ldr	r0, [pc, #452]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 800355e:	f7fe f801 	bl	8001564 <MCI_GetFaultState>
 8003562:	6020      	str	r0, [r4, #0]
              break;
 8003564:	e617      	b.n	8003196 <RI_GetRegisterMotor1+0xd6>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003566:	2008      	movs	r0, #8
  }
 8003568:	b016      	add	sp, #88	@ 0x58
 800356a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800356e:	4b71      	ldr	r3, [pc, #452]	@ (8003734 <RI_GetRegisterMotor1+0x674>)
 8003570:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8003572:	2301      	movs	r3, #1
 8003574:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003576:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800357a:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 800357e:	b17a      	cbz	r2, 80035a0 <RI_GetRegisterMotor1+0x4e0>
 8003580:	fa1f fc8c 	uxth.w	ip, ip
 8003584:	e008      	b.n	8003598 <RI_GetRegisterMotor1+0x4d8>
    *tempdestString = *tempsrcString;
 8003586:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 800358a:	882b      	ldrh	r3, [r5, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003592:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003596:	b11a      	cbz	r2, 80035a0 <RI_GetRegisterMotor1+0x4e0>
 8003598:	459c      	cmp	ip, r3
 800359a:	d8f4      	bhi.n	8003586 <RI_GetRegisterMotor1+0x4c6>
    retVal = MCP_ERROR_STRING_FORMAT;
 800359c:	2006      	movs	r0, #6
 800359e:	e5ae      	b.n	80030fe <RI_GetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80035a4:	2000      	movs	r0, #0
 80035a6:	e5aa      	b.n	80030fe <RI_GetRegisterMotor1+0x3e>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80035a8:	4a63      	ldr	r2, [pc, #396]	@ (8003738 <RI_GetRegisterMotor1+0x678>)
  *size= 1U ; /* /0 is the min String size */
 80035aa:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80035ac:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 80035ae:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80035b0:	f991 2000 	ldrsb.w	r2, [r1]
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	d0f3      	beq.n	80035a0 <RI_GetRegisterMotor1+0x4e0>
 80035b8:	fa1f fc8c 	uxth.w	ip, ip
 80035bc:	e009      	b.n	80035d2 <RI_GetRegisterMotor1+0x512>
    *tempdestString = *tempsrcString;
 80035be:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80035c2:	882b      	ldrh	r3, [r5, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80035ca:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80035ce:	2a00      	cmp	r2, #0
 80035d0:	d0e6      	beq.n	80035a0 <RI_GetRegisterMotor1+0x4e0>
 80035d2:	459c      	cmp	ip, r3
 80035d4:	d8f3      	bhi.n	80035be <RI_GetRegisterMotor1+0x4fe>
 80035d6:	e7e1      	b.n	800359c <RI_GetRegisterMotor1+0x4dc>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 80035d8:	4a58      	ldr	r2, [pc, #352]	@ (800373c <RI_GetRegisterMotor1+0x67c>)
 80035da:	6850      	ldr	r0, [r2, #4]
 80035dc:	6814      	ldr	r4, [r2, #0]
 80035de:	6891      	ldr	r1, [r2, #8]
 80035e0:	68d2      	ldr	r2, [r2, #12]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	6058      	str	r0, [r3, #4]
 80035e6:	601c      	str	r4, [r3, #0]
 80035e8:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 80035ea:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 80035ec:	230e      	movs	r3, #14
 80035ee:	e5a5      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 80035f0:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <RI_GetRegisterMotor1+0x680>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	6850      	ldr	r0, [r2, #4]
 80035f6:	6814      	ldr	r4, [r2, #0]
 80035f8:	6891      	ldr	r1, [r2, #8]
 80035fa:	68d2      	ldr	r2, [r2, #12]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	6058      	str	r0, [r3, #4]
 8003600:	601c      	str	r4, [r3, #0]
 8003602:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003604:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003606:	2312      	movs	r3, #18
 8003608:	e598      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800360a:	4608      	mov	r0, r1
 800360c:	e577      	b.n	80030fe <RI_GetRegisterMotor1+0x3e>
 800360e:	2005      	movs	r0, #5
 8003610:	e5c2      	b.n	8003198 <RI_GetRegisterMotor1+0xd8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003612:	4844      	ldr	r0, [pc, #272]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 8003614:	f7fd ffac 	bl	8001570 <MCI_GetControlMode>
 8003618:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800361a:	2000      	movs	r0, #0
 800361c:	e5a0      	b.n	8003160 <RI_GetRegisterMotor1+0xa0>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800361e:	4841      	ldr	r0, [pc, #260]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 8003620:	f7fd ff3c 	bl	800149c <MCI_GetSTMState>
              break;
 8003624:	e7f8      	b.n	8003618 <RI_GetRegisterMotor1+0x558>
              *data = (uint8_t)RUC_GetNumberOfPhases(&RevUpControlM1);
 8003626:	4847      	ldr	r0, [pc, #284]	@ (8003744 <RI_GetRegisterMotor1+0x684>)
 8003628:	f006 f902 	bl	8009830 <RUC_GetNumberOfPhases>
              break;
 800362c:	e7f4      	b.n	8003618 <RI_GetRegisterMotor1+0x558>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800362e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003632:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003634:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003638:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800363a:	d95a      	bls.n	80036f2 <RI_GetRegisterMotor1+0x632>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 800363c:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8003744 <RI_GetRegisterMotor1+0x684>
 8003640:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003642:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8003644:	b2f1      	uxtb	r1, r6
 8003646:	aa13      	add	r2, sp, #76	@ 0x4c
 8003648:	4640      	mov	r0, r8
 800364a:	f006 f8f5 	bl	8009838 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800364e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	@ 0x4e
 8003652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800365c:	3601      	adds	r6, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800365e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8003662:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003664:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 8003666:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800366a:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800366e:	d1e9      	bne.n	8003644 <RI_GetRegisterMotor1+0x584>
        *size = (*rawSize) + 2U;
 8003670:	8823      	ldrh	r3, [r4, #0]
 8003672:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8003674:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003676:	b29b      	uxth	r3, r3
 8003678:	e560      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
 800367a:	8823      	ldrh	r3, [r4, #0]
 800367c:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 800367e:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003680:	b29b      	uxth	r3, r3
 8003682:	e55b      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003684:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003688:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800368a:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800368e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003690:	d834      	bhi.n	80036fc <RI_GetRegisterMotor1+0x63c>
 8003692:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003694:	2008      	movs	r0, #8
 8003696:	e551      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003698:	4822      	ldr	r0, [pc, #136]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 800369a:	f7fd ff8f 	bl	80015bc <MCI_GetLastRampFinalSpeed>
 800369e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036a2:	0043      	lsls	r3, r0, #1
 80036a4:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80036a8:	481e      	ldr	r0, [pc, #120]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 80036aa:	f7fd ff8f 	bl	80015cc <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80036ae:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80036b0:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 80036b2:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80036b4:	2000      	movs	r0, #0
            break;
 80036b6:	2308      	movs	r3, #8
 80036b8:	e540      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80036ba:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80036be:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80036c0:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80036c4:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80036c6:	d841      	bhi.n	800374c <RI_GetRegisterMotor1+0x68c>
 80036c8:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80036ca:	2008      	movs	r0, #8
 80036cc:	e536      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 80036ce:	4814      	ldr	r0, [pc, #80]	@ (8003720 <RI_GetRegisterMotor1+0x660>)
 80036d0:	f006 fc8e 	bl	8009ff0 <STO_PLL_GetObservedBemfLevel>
 80036d4:	6020      	str	r0, [r4, #0]
              break;
 80036d6:	e55e      	b.n	8003196 <RI_GetRegisterMotor1+0xd6>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80036d8:	4812      	ldr	r0, [pc, #72]	@ (8003724 <RI_GetRegisterMotor1+0x664>)
 80036da:	f7fd ff7d 	bl	80015d8 <MCI_GetAvrgMecSpeedUnit>
 80036de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036e2:	0040      	lsls	r0, r0, #1
 80036e4:	6020      	str	r0, [r4, #0]
              break;
 80036e6:	e556      	b.n	8003196 <RI_GetRegisterMotor1+0xd6>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 80036e8:	480d      	ldr	r0, [pc, #52]	@ (8003720 <RI_GetRegisterMotor1+0x660>)
 80036ea:	f006 fc7d 	bl	8009fe8 <STO_PLL_GetEstimatedBemfLevel>
 80036ee:	6020      	str	r0, [r4, #0]
              break;
 80036f0:	e551      	b.n	8003196 <RI_GetRegisterMotor1+0xd6>
 80036f2:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80036f4:	2008      	movs	r0, #8
            break;
 80036f6:	e521      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
 80036f8:	2005      	movs	r0, #5
 80036fa:	e633      	b.n	8003364 <RI_GetRegisterMotor1+0x2a4>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80036fc:	4a12      	ldr	r2, [pc, #72]	@ (8003748 <RI_GetRegisterMotor1+0x688>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	6810      	ldr	r0, [r2, #0]
 8003702:	6851      	ldr	r1, [r2, #4]
 8003704:	6894      	ldr	r4, [r2, #8]
 8003706:	609c      	str	r4, [r3, #8]
 8003708:	6018      	str	r0, [r3, #0]
 800370a:	6059      	str	r1, [r3, #4]
 800370c:	8992      	ldrh	r2, [r2, #12]
 800370e:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8003710:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003712:	2310      	movs	r3, #16
 8003714:	e512      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
 8003716:	bf00      	nop
 8003718:	20000384 	.word	0x20000384
 800371c:	200003dc 	.word	0x200003dc
 8003720:	200000d4 	.word	0x200000d4
 8003724:	20000944 	.word	0x20000944
 8003728:	20000108 	.word	0x20000108
 800372c:	20000068 	.word	0x20000068
 8003730:	2000003c 	.word	0x2000003c
 8003734:	2000041c 	.word	0x2000041c
 8003738:	20000424 	.word	0x20000424
 800373c:	20000428 	.word	0x20000428
 8003740:	20000418 	.word	0x20000418
 8003744:	200002d8 	.word	0x200002d8
 8003748:	20000420 	.word	0x20000420
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800374c:	4a31      	ldr	r2, [pc, #196]	@ (8003814 <RI_GetRegisterMotor1+0x754>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f102 0730 	add.w	r7, r2, #48	@ 0x30
 8003754:	6814      	ldr	r4, [r2, #0]
 8003756:	6850      	ldr	r0, [r2, #4]
 8003758:	6891      	ldr	r1, [r2, #8]
 800375a:	68d6      	ldr	r6, [r2, #12]
 800375c:	60de      	str	r6, [r3, #12]
 800375e:	3210      	adds	r2, #16
 8003760:	42ba      	cmp	r2, r7
 8003762:	601c      	str	r4, [r3, #0]
 8003764:	6058      	str	r0, [r3, #4]
 8003766:	6099      	str	r1, [r3, #8]
 8003768:	f103 0310 	add.w	r3, r3, #16
 800376c:	d1f2      	bne.n	8003754 <RI_GetRegisterMotor1+0x694>
 800376e:	6810      	ldr	r0, [r2, #0]
 8003770:	6851      	ldr	r1, [r2, #4]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	6018      	str	r0, [r3, #0]
 8003778:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 800377a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800377c:	233e      	movs	r3, #62	@ 0x3e
 800377e:	e4dd      	b.n	800313c <RI_GetRegisterMotor1+0x7c>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8003780:	4825      	ldr	r0, [pc, #148]	@ (8003818 <RI_GetRegisterMotor1+0x758>)
 8003782:	f004 fe59 	bl	8008438 <PID_GetKDDivisorPOW2>
 8003786:	8020      	strh	r0, [r4, #0]
              break;
 8003788:	e5eb      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 800378a:	4824      	ldr	r0, [pc, #144]	@ (800381c <RI_GetRegisterMotor1+0x75c>)
 800378c:	f7fd ff76 	bl	800167c <MCI_GetValphabeta>
 8003790:	8020      	strh	r0, [r4, #0]
              break;
 8003792:	e5e6      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8003794:	4822      	ldr	r0, [pc, #136]	@ (8003820 <RI_GetRegisterMotor1+0x760>)
 8003796:	f006 fbf3 	bl	8009f80 <STO_PLL_GetEstimatedBemf>
 800379a:	8020      	strh	r0, [r4, #0]
              break;
 800379c:	e5e1      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 800379e:	4821      	ldr	r0, [pc, #132]	@ (8003824 <RI_GetRegisterMotor1+0x764>)
 80037a0:	f004 fdf8 	bl	8008394 <NTC_GetAvTemp_C>
 80037a4:	8020      	strh	r0, [r4, #0]
              break;
 80037a6:	e5dc      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 80037a8:	481f      	ldr	r0, [pc, #124]	@ (8003828 <RI_GetRegisterMotor1+0x768>)
 80037aa:	f004 fe45 	bl	8008438 <PID_GetKDDivisorPOW2>
 80037ae:	8020      	strh	r0, [r4, #0]
              break;
 80037b0:	e5d7      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80037b2:	481e      	ldr	r0, [pc, #120]	@ (800382c <RI_GetRegisterMotor1+0x76c>)
 80037b4:	f004 fe40 	bl	8008438 <PID_GetKDDivisorPOW2>
 80037b8:	8020      	strh	r0, [r4, #0]
              break;
 80037ba:	e5d2      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 80037bc:	4816      	ldr	r0, [pc, #88]	@ (8003818 <RI_GetRegisterMotor1+0x758>)
 80037be:	f004 fe37 	bl	8008430 <PID_GetKD>
 80037c2:	8020      	strh	r0, [r4, #0]
              break;
 80037c4:	e5cd      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80037c6:	4815      	ldr	r0, [pc, #84]	@ (800381c <RI_GetRegisterMotor1+0x75c>)
 80037c8:	f7fd ff3c 	bl	8001644 <MCI_GetIqdref>
 80037cc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80037d0:	8023      	strh	r3, [r4, #0]
              break;
 80037d2:	e5c6      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 80037d4:	4815      	ldr	r0, [pc, #84]	@ (800382c <RI_GetRegisterMotor1+0x76c>)
 80037d6:	f004 fe2b 	bl	8008430 <PID_GetKD>
 80037da:	8020      	strh	r0, [r4, #0]
              break;
 80037dc:	e5c1      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 80037de:	4814      	ldr	r0, [pc, #80]	@ (8003830 <RI_GetRegisterMotor1+0x770>)
 80037e0:	f004 fdfa 	bl	80083d8 <PID_GetKI>
 80037e4:	8020      	strh	r0, [r4, #0]
              break;
 80037e6:	e5bc      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80037e8:	480d      	ldr	r0, [pc, #52]	@ (8003820 <RI_GetRegisterMotor1+0x760>)
 80037ea:	f006 f877 	bl	80098dc <SPD_GetS16Speed>
 80037ee:	8020      	strh	r0, [r4, #0]
              break;
 80037f0:	e5b7      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80037f2:	480a      	ldr	r0, [pc, #40]	@ (800381c <RI_GetRegisterMotor1+0x75c>)
 80037f4:	f7fd ff18 	bl	8001628 <MCI_GetIqd>
 80037f8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80037fc:	8023      	strh	r3, [r4, #0]
              break;
 80037fe:	e5b0      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003800:	4806      	ldr	r0, [pc, #24]	@ (800381c <RI_GetRegisterMotor1+0x75c>)
 8003802:	f7fd ff03 	bl	800160c <MCI_GetIalphabeta>
 8003806:	8020      	strh	r0, [r4, #0]
              break;
 8003808:	e5ab      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 800380a:	4807      	ldr	r0, [pc, #28]	@ (8003828 <RI_GetRegisterMotor1+0x768>)
 800380c:	f004 fe10 	bl	8008430 <PID_GetKD>
 8003810:	8020      	strh	r0, [r4, #0]
              break;
 8003812:	e5a6      	b.n	8003362 <RI_GetRegisterMotor1+0x2a2>
 8003814:	2000041c 	.word	0x2000041c
 8003818:	20000384 	.word	0x20000384
 800381c:	20000944 	.word	0x20000944
 8003820:	200000d4 	.word	0x200000d4
 8003824:	20000094 	.word	0x20000094
 8003828:	200003dc 	.word	0x200003dc
 800382c:	200003b0 	.word	0x200003b0
 8003830:	20000108 	.word	0x20000108

08003834 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003834:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003838:	3808      	subs	r0, #8
 800383a:	b2c0      	uxtb	r0, r0
 800383c:	2810      	cmp	r0, #16
 800383e:	bf9a      	itte	ls
 8003840:	4b01      	ldrls	r3, [pc, #4]	@ (8003848 <RI_GetIDSize+0x14>)
 8003842:	5c18      	ldrbls	r0, [r3, r0]
 8003844:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003846:	4770      	bx	lr
 8003848:	0800a5ac 	.word	0x0800a5ac

0800384c <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 800384c:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003850:	2b10      	cmp	r3, #16
 8003852:	d003      	beq.n	800385c <RI_GetPtrReg+0x10>
 8003854:	4a43      	ldr	r2, [pc, #268]	@ (8003964 <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003856:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003858:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800385a:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 800385c:	f020 0007 	bic.w	r0, r0, #7
 8003860:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003864:	b283      	uxth	r3, r0
 8003866:	d073      	beq.n	8003950 <RI_GetPtrReg+0x104>
 8003868:	d80f      	bhi.n	800388a <RI_GetPtrReg+0x3e>
 800386a:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 800386e:	d074      	beq.n	800395a <RI_GetPtrReg+0x10e>
 8003870:	d824      	bhi.n	80038bc <RI_GetPtrReg+0x70>
 8003872:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 8003876:	d058      	beq.n	800392a <RI_GetPtrReg+0xde>
 8003878:	d915      	bls.n	80038a6 <RI_GetPtrReg+0x5a>
 800387a:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 800387e:	d1e9      	bne.n	8003854 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003880:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <RI_GetPtrReg+0x11c>)
 8003882:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003884:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003886:	3206      	adds	r2, #6
            break;
 8003888:	e7e6      	b.n	8003858 <RI_GetPtrReg+0xc>
 800388a:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 800388e:	d049      	beq.n	8003924 <RI_GetPtrReg+0xd8>
 8003890:	d929      	bls.n	80038e6 <RI_GetPtrReg+0x9a>
 8003892:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8003896:	d041      	beq.n	800391c <RI_GetPtrReg+0xd0>
 8003898:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 800389c:	d119      	bne.n	80038d2 <RI_GetPtrReg+0x86>
 800389e:	4a33      	ldr	r2, [pc, #204]	@ (800396c <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80038a0:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80038a2:	2000      	movs	r0, #0
}
 80038a4:	4770      	bx	lr
 80038a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80038aa:	d04d      	beq.n	8003948 <RI_GetPtrReg+0xfc>
 80038ac:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80038b0:	d1d0      	bne.n	8003854 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80038b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003968 <RI_GetPtrReg+0x11c>)
 80038b4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038b6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80038b8:	3202      	adds	r2, #2
            break;
 80038ba:	e7cd      	b.n	8003858 <RI_GetPtrReg+0xc>
 80038bc:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 80038c0:	d038      	beq.n	8003934 <RI_GetPtrReg+0xe8>
 80038c2:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 80038c6:	d119      	bne.n	80038fc <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80038c8:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <RI_GetPtrReg+0x11c>)
 80038ca:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038cc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80038ce:	3212      	adds	r2, #18
            break;
 80038d0:	e7c2      	b.n	8003858 <RI_GetPtrReg+0xc>
 80038d2:	4824      	ldr	r0, [pc, #144]	@ (8003964 <RI_GetPtrReg+0x118>)
 80038d4:	4a26      	ldr	r2, [pc, #152]	@ (8003970 <RI_GetPtrReg+0x124>)
 80038d6:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 80038da:	bf16      	itet	ne
 80038dc:	4602      	movne	r2, r0
 80038de:	2000      	moveq	r0, #0
 80038e0:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80038e2:	600a      	str	r2, [r1, #0]
}
 80038e4:	4770      	bx	lr
 80038e6:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80038ea:	d028      	beq.n	800393e <RI_GetPtrReg+0xf2>
 80038ec:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 80038f0:	d10c      	bne.n	800390c <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80038f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003968 <RI_GetPtrReg+0x11c>)
 80038f4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038f6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80038f8:	321c      	adds	r2, #28
            break;
 80038fa:	e7ad      	b.n	8003858 <RI_GetPtrReg+0xc>
 80038fc:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003900:	d1a8      	bne.n	8003854 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003902:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <RI_GetPtrReg+0x11c>)
 8003904:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003906:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003908:	320e      	adds	r2, #14
            break;
 800390a:	e7a5      	b.n	8003858 <RI_GetPtrReg+0xc>
 800390c:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003910:	d1a0      	bne.n	8003854 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <RI_GetPtrReg+0x11c>)
 8003914:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003916:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003918:	3218      	adds	r2, #24
            break;
 800391a:	e79d      	b.n	8003858 <RI_GetPtrReg+0xc>
 800391c:	4a15      	ldr	r2, [pc, #84]	@ (8003974 <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800391e:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003920:	2000      	movs	r0, #0
}
 8003922:	4770      	bx	lr
 8003924:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 8003926:	2000      	movs	r0, #0
 8003928:	e796      	b.n	8003858 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800392a:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <RI_GetPtrReg+0x11c>)
 800392c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800392e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003930:	3204      	adds	r2, #4
            break;
 8003932:	e791      	b.n	8003858 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003934:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <RI_GetPtrReg+0x11c>)
 8003936:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003938:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800393a:	3210      	adds	r2, #16
            break;
 800393c:	e78c      	b.n	8003858 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <RI_GetPtrReg+0x11c>)
 8003940:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003942:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003944:	321a      	adds	r2, #26
            break;
 8003946:	e787      	b.n	8003858 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003948:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 800394a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800394c:	685a      	ldr	r2, [r3, #4]
             break;
 800394e:	e783      	b.n	8003858 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <RI_GetPtrReg+0x11c>)
 8003952:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003954:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003956:	3216      	adds	r2, #22
            break;
 8003958:	e77e      	b.n	8003858 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 800395a:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <RI_GetPtrReg+0x11c>)
 800395c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800395e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003960:	320c      	adds	r2, #12
            break;
 8003962:	e779      	b.n	8003858 <RI_GetPtrReg+0xc>
 8003964:	20001b40 	.word	0x20001b40
 8003968:	20000944 	.word	0x20000944
 800396c:	20000146 	.word	0x20000146
 8003970:	200000e0 	.word	0x200000e0
 8003974:	20000144 	.word	0x20000144
 8003978:	200000d8 	.word	0x200000d8

0800397c <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 800397c:	b470      	push	{r4, r5, r6}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800397e:	4e79      	ldr	r6, [pc, #484]	@ (8003b64 <RCM_RegisterRegConv+0x1e8>)
 8003980:	6832      	ldr	r2, [r6, #0]
 8003982:	2a00      	cmp	r2, #0
 8003984:	d035      	beq.n	80039f2 <RCM_RegisterRegConv+0x76>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003986:	7901      	ldrb	r1, [r0, #4]
 8003988:	7913      	ldrb	r3, [r2, #4]
 800398a:	4299      	cmp	r1, r3
 800398c:	d01f      	beq.n	80039ce <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800398e:	6874      	ldr	r4, [r6, #4]
 8003990:	2c00      	cmp	r4, #0
 8003992:	f000 80c5 	beq.w	8003b20 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003996:	7923      	ldrb	r3, [r4, #4]
 8003998:	428b      	cmp	r3, r1
  uint8_t handle = 255U;
 800399a:	f04f 02ff 	mov.w	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800399e:	d030      	beq.n	8003a02 <RCM_RegisterRegConv+0x86>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039a0:	68b5      	ldr	r5, [r6, #8]
 80039a2:	2d00      	cmp	r5, #0
 80039a4:	f000 80a2 	beq.w	8003aec <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039a8:	792b      	ldrb	r3, [r5, #4]
 80039aa:	428b      	cmp	r3, r1
 80039ac:	d02f      	beq.n	8003a0e <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039ae:	68f4      	ldr	r4, [r6, #12]
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	f000 80a7 	beq.w	8003b04 <RCM_RegisterRegConv+0x188>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039b6:	7923      	ldrb	r3, [r4, #4]
 80039b8:	428b      	cmp	r3, r1
 80039ba:	f000 80aa 	beq.w	8003b12 <RCM_RegisterRegConv+0x196>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80039be:	2a03      	cmp	r2, #3
 80039c0:	bf88      	it	hi
 80039c2:	22ff      	movhi	r2, #255	@ 0xff
 80039c4:	f240 80b6 	bls.w	8003b34 <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
}
 80039c8:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 80039ca:	7302      	strb	r2, [r0, #12]
}
 80039cc:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d021      	beq.n	8003a1a <RCM_RegisterRegConv+0x9e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039d6:	6874      	ldr	r4, [r6, #4]
 80039d8:	2c00      	cmp	r4, #0
 80039da:	d1dc      	bne.n	8003996 <RCM_RegisterRegConv+0x1a>
 80039dc:	68b5      	ldr	r5, [r6, #8]
      i++;
 80039de:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	d1e1      	bne.n	80039a8 <RCM_RegisterRegConv+0x2c>
 80039e4:	68f4      	ldr	r4, [r6, #12]
 80039e6:	b1dc      	cbz	r4, 8003a20 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039e8:	7925      	ldrb	r5, [r4, #4]
 80039ea:	7901      	ldrb	r1, [r0, #4]
 80039ec:	428d      	cmp	r5, r1
 80039ee:	d115      	bne.n	8003a1c <RCM_RegisterRegConv+0xa0>
 80039f0:	e090      	b.n	8003b14 <RCM_RegisterRegConv+0x198>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039f2:	6874      	ldr	r4, [r6, #4]
 80039f4:	2c00      	cmp	r4, #0
 80039f6:	f000 80a5 	beq.w	8003b44 <RCM_RegisterRegConv+0x1c8>
 80039fa:	7901      	ldrb	r1, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039fc:	7923      	ldrb	r3, [r4, #4]
 80039fe:	428b      	cmp	r3, r1
 8003a00:	d1ce      	bne.n	80039a0 <RCM_RegisterRegConv+0x24>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003a02:	6824      	ldr	r4, [r4, #0]
 8003a04:	6803      	ldr	r3, [r0, #0]
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	d1ca      	bne.n	80039a0 <RCM_RegisterRegConv+0x24>
      i++;
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	e006      	b.n	8003a1c <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003a0e:	682c      	ldr	r4, [r5, #0]
 8003a10:	6803      	ldr	r3, [r0, #0]
 8003a12:	429c      	cmp	r4, r3
 8003a14:	d1cb      	bne.n	80039ae <RCM_RegisterRegConv+0x32>
      i++;
 8003a16:	2202      	movs	r2, #2
 8003a18:	e000      	b.n	8003a1c <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 8003a1a:	2200      	movs	r2, #0
    while (i < RCM_MAX_CONV)
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	f362 0407 	bfi	r4, r2, #0, #8
 8003a24:	f362 240f 	bfi	r4, r2, #8, #8
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003a28:	4d4f      	ldr	r5, [pc, #316]	@ (8003b68 <RCM_RegisterRegConv+0x1ec>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a2a:	6899      	ldr	r1, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8003a2c:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003a30:	2600      	movs	r6, #0
 8003a32:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
 8003a36:	07ce      	lsls	r6, r1, #31
 8003a38:	d422      	bmi.n	8003a80 <RCM_RegisterRegConv+0x104>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	f021 0104 	bic.w	r1, r1, #4
 8003a40:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003a42:	2104      	movs	r1, #4
 8003a44:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	f021 0120 	bic.w	r1, r1, #32
 8003a4c:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003a4e:	2120      	movs	r1, #32
 8003a50:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8003a58:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003a5c:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8003a60:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	2900      	cmp	r1, #0
 8003a66:	dbfc      	blt.n	8003a62 <RCM_RegisterRegConv+0xe6>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	07cd      	lsls	r5, r1, #31
 8003a6c:	d408      	bmi.n	8003a80 <RCM_RegisterRegConv+0x104>
  MODIFY_REG(ADCx->CR,
 8003a6e:	4d3f      	ldr	r5, [pc, #252]	@ (8003b6c <RCM_RegisterRegConv+0x1f0>)
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	4029      	ands	r1, r5
 8003a74:	f041 0101 	orr.w	r1, r1, #1
 8003a78:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	07c9      	lsls	r1, r1, #31
 8003a7e:	d5f7      	bpl.n	8003a70 <RCM_RegisterRegConv+0xf4>
      RCM_NoInj_array[handle].enable = false;
 8003a80:	4d3b      	ldr	r5, [pc, #236]	@ (8003b70 <RCM_RegisterRegConv+0x1f4>)
 8003a82:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003a86:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8003a88:	1d2e      	adds	r6, r5, #4
 8003a8a:	5274      	strh	r4, [r6, r1]
      RCM_NoInj_array[handle].enable = false;
 8003a8c:	2400      	movs	r4, #0
 8003a8e:	546c      	strb	r4, [r5, r1]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003a90:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003a92:	f024 040f 	bic.w	r4, r4, #15
 8003a96:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003a98:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f10c 	lsl.w	r1, r1, ip
 8003aa2:	f1bc 0f09 	cmp.w	ip, #9
 8003aa6:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8003aaa:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003aae:	d817      	bhi.n	8003ae0 <RCM_RegisterRegConv+0x164>
 8003ab0:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ab4:	0dcc      	lsrs	r4, r1, #23
 8003ab6:	f004 0404 	and.w	r4, r4, #4
 8003aba:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8003abe:	6885      	ldr	r5, [r0, #8]
 8003ac0:	f85c 3004 	ldr.w	r3, [ip, r4]
 8003ac4:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8003ac8:	2607      	movs	r6, #7
 8003aca:	408d      	lsls	r5, r1
 8003acc:	fa06 f101 	lsl.w	r1, r6, r1
 8003ad0:	ea23 0101 	bic.w	r1, r3, r1
 8003ad4:	4329      	orrs	r1, r5
 8003ad6:	f84c 1004 	str.w	r1, [ip, r4]
}
 8003ada:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 8003adc:	7302      	strb	r2, [r0, #12]
}
 8003ade:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003ae0:	3c1e      	subs	r4, #30
 8003ae2:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003ae6:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8003aea:	e7e3      	b.n	8003ab4 <RCM_RegisterRegConv+0x138>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003aec:	2a04      	cmp	r2, #4
 8003aee:	d92e      	bls.n	8003b4e <RCM_RegisterRegConv+0x1d2>
 8003af0:	68f2      	ldr	r2, [r6, #12]
 8003af2:	b372      	cbz	r2, 8003b52 <RCM_RegisterRegConv+0x1d6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003af4:	7913      	ldrb	r3, [r2, #4]
 8003af6:	4299      	cmp	r1, r3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003af8:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003afa:	d02f      	beq.n	8003b5c <RCM_RegisterRegConv+0x1e0>
      i++;
 8003afc:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003afe:	f240 2402 	movw	r4, #514	@ 0x202
 8003b02:	e791      	b.n	8003a28 <RCM_RegisterRegConv+0xac>
 8003b04:	2a04      	cmp	r2, #4
 8003b06:	d917      	bls.n	8003b38 <RCM_RegisterRegConv+0x1bc>
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	f240 3403 	movw	r4, #771	@ 0x303
 8003b10:	e78a      	b.n	8003a28 <RCM_RegisterRegConv+0xac>
 8003b12:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003b14:	6821      	ldr	r1, [r4, #0]
 8003b16:	4299      	cmp	r1, r3
 8003b18:	f47f af51 	bne.w	80039be <RCM_RegisterRegConv+0x42>
      i++;
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	e77d      	b.n	8003a1c <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b20:	68b5      	ldr	r5, [r6, #8]
      i++;
 8003b22:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	f47f af3f 	bne.w	80039a8 <RCM_RegisterRegConv+0x2c>
 8003b2a:	68f4      	ldr	r4, [r6, #12]
 8003b2c:	b124      	cbz	r4, 8003b38 <RCM_RegisterRegConv+0x1bc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003b2e:	7923      	ldrb	r3, [r4, #4]
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d0ee      	beq.n	8003b12 <RCM_RegisterRegConv+0x196>
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	f362 0407 	bfi	r4, r2, #0, #8
 8003b3c:	6803      	ldr	r3, [r0, #0]
 8003b3e:	f362 240f 	bfi	r4, r2, #8, #8
 8003b42:	e771      	b.n	8003a28 <RCM_RegisterRegConv+0xac>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b44:	68b5      	ldr	r5, [r6, #8]
 8003b46:	b135      	cbz	r5, 8003b56 <RCM_RegisterRegConv+0x1da>
 8003b48:	7901      	ldrb	r1, [r0, #4]
    uint8_t i = 0;
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	e72c      	b.n	80039a8 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b4e:	462a      	mov	r2, r5
 8003b50:	e7eb      	b.n	8003b2a <RCM_RegisterRegConv+0x1ae>
 8003b52:	6803      	ldr	r3, [r0, #0]
 8003b54:	e7d2      	b.n	8003afc <RCM_RegisterRegConv+0x180>
 8003b56:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 8003b58:	462a      	mov	r2, r5
 8003b5a:	e743      	b.n	80039e4 <RCM_RegisterRegConv+0x68>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d0dc      	beq.n	8003b1c <RCM_RegisterRegConv+0x1a0>
 8003b62:	e7cb      	b.n	8003afc <RCM_RegisterRegConv+0x180>
 8003b64:	20001b88 	.word	0x20001b88
 8003b68:	20001b68 	.word	0x20001b68
 8003b6c:	7fffffc0 	.word	0x7fffffc0
 8003b70:	20001b50 	.word	0x20001b50

08003b74 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003b74:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8003b76:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003b78:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf0 <RCM_ExecRegularConv+0x17c>)
 8003b7a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003b7e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003b82:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d139      	bne.n	8003bfe <RCM_ExecRegularConv+0x8a>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003b8a:	7811      	ldrb	r1, [r2, #0]
 8003b8c:	b991      	cbnz	r1, 8003bb4 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003b8e:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8003b90:	7991      	ldrb	r1, [r2, #6]
 8003b92:	2900      	cmp	r1, #0
 8003b94:	d173      	bne.n	8003c7e <RCM_ExecRegularConv+0x10a>
 8003b96:	7b11      	ldrb	r1, [r2, #12]
 8003b98:	2900      	cmp	r1, #0
 8003b9a:	d175      	bne.n	8003c88 <RCM_ExecRegularConv+0x114>
 8003b9c:	7c91      	ldrb	r1, [r2, #18]
 8003b9e:	2900      	cmp	r1, #0
 8003ba0:	f000 8098 	beq.w	8003cd4 <RCM_ExecRegularConv+0x160>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003ba4:	7dd1      	ldrb	r1, [r2, #23]
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	f240 809e 	bls.w	8003ce8 <RCM_ExecRegularConv+0x174>
 8003bac:	f04f 0e03 	mov.w	lr, #3
      if (true == RCM_NoInj_array [i].enable)
 8003bb0:	4670      	mov	r0, lr
 8003bb2:	e003      	b.n	8003bbc <RCM_ExecRegularConv+0x48>
        if (RCM_NoInj_array[i].next > handle)
 8003bb4:	7951      	ldrb	r1, [r2, #5]
 8003bb6:	428b      	cmp	r3, r1
 8003bb8:	d2ea      	bcs.n	8003b90 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8003bba:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8003bbc:	eb0c 0403 	add.w	r4, ip, r3
 8003bc0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8003bc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003bc8:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003bca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8003bce:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8003bd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bd6:	4c47      	ldr	r4, [pc, #284]	@ (8003cf4 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 8003bd8:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8003bda:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bde:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8003be0:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8003be2:	eb0c 0003 	add.w	r0, ip, r3
 8003be6:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8003bee:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bf2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003bf6:	7849      	ldrb	r1, [r1, #1]
 8003bf8:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003bfa:	bf18      	it	ne
 8003bfc:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003bfe:	493e      	ldr	r1, [pc, #248]	@ (8003cf8 <RCM_ExecRegularConv+0x184>)
 8003c00:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d135      	bne.n	8003c74 <RCM_ExecRegularConv+0x100>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003c08:	493c      	ldr	r1, [pc, #240]	@ (8003cfc <RCM_ExecRegularConv+0x188>)
 8003c0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003c0e:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003c10:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003c12:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003c14:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003c16:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003c1a:	fa01 f104 	lsl.w	r1, r1, r4
 8003c1e:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8003c22:	bf84      	itt	hi
 8003c24:	f1ae 0e1e 	subhi.w	lr, lr, #30
 8003c28:	ea41 510e 	orrhi.w	r1, r1, lr, lsl #20
  MODIFY_REG(*preg,
 8003c2c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003c2e:	bf94      	ite	ls
 8003c30:	ea41 510e 	orrls.w	r1, r1, lr, lsl #20
 8003c34:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8003c38:	0d09      	lsrs	r1, r1, #20
 8003c3a:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8003c3e:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8003c42:	4321      	orrs	r1, r4
 8003c44:	6301      	str	r1, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003c46:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003c48:	6881      	ldr	r1, [r0, #8]
 8003c4a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003c4e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003c52:	f041 0104 	orr.w	r1, r1, #4
 8003c56:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003c58:	6801      	ldr	r1, [r0, #0]
 8003c5a:	0749      	lsls	r1, r1, #29
 8003c5c:	d5fc      	bpl.n	8003c58 <RCM_ExecRegularConv+0xe4>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003c5e:	eb0c 0103 	add.w	r1, ip, r3
 8003c62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003c66:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003c68:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003c6a:	4822      	ldr	r0, [pc, #136]	@ (8003cf4 <RCM_ExecRegularConv+0x180>)
 8003c6c:	794c      	ldrb	r4, [r1, #5]
 8003c6e:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 8003c70:	2002      	movs	r0, #2
 8003c72:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003c74:	449c      	add	ip, r3
 8003c76:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8003c7a:	8850      	ldrh	r0, [r2, #2]
 8003c7c:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array[i].next > handle)
 8003c7e:	7ad1      	ldrb	r1, [r2, #11]
 8003c80:	428b      	cmp	r3, r1
 8003c82:	d31d      	bcc.n	8003cc0 <RCM_ExecRegularConv+0x14c>
      if (true == RCM_NoInj_array [i].enable)
 8003c84:	7b11      	ldrb	r1, [r2, #12]
 8003c86:	b1f9      	cbz	r1, 8003cc8 <RCM_ExecRegularConv+0x154>
        if (RCM_NoInj_array[i].next > handle)
 8003c88:	7c51      	ldrb	r1, [r2, #17]
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d828      	bhi.n	8003ce0 <RCM_ExecRegularConv+0x16c>
      if (true == RCM_NoInj_array [i].enable)
 8003c8e:	7c91      	ldrb	r1, [r2, #18]
 8003c90:	2900      	cmp	r1, #0
 8003c92:	d187      	bne.n	8003ba4 <RCM_ExecRegularConv+0x30>
 8003c94:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003c96:	4608      	mov	r0, r1
 8003c98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003c9c:	eb0c 0403 	add.w	r4, ip, r3
 8003ca0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003ca4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003ca8:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003caa:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003cac:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003cae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003cb2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003cb6:	4c0f      	ldr	r4, [pc, #60]	@ (8003cf4 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003cb8:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003cba:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003cbc:	7821      	ldrb	r1, [r4, #0]
 8003cbe:	e790      	b.n	8003be2 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8003cc0:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8003cc4:	4670      	mov	r0, lr
 8003cc6:	e779      	b.n	8003bbc <RCM_ExecRegularConv+0x48>
 8003cc8:	7c91      	ldrb	r1, [r2, #18]
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	f47f af6a 	bne.w	8003ba4 <RCM_ExecRegularConv+0x30>
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	e7e0      	b.n	8003c96 <RCM_ExecRegularConv+0x122>
       if (LastEnable != RCM_MAX_CONV )
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d0de      	beq.n	8003c96 <RCM_ExecRegularConv+0x122>
         RCM_currentHandle = handle;
 8003cd8:	4c06      	ldr	r4, [pc, #24]	@ (8003cf4 <RCM_ExecRegularConv+0x180>)
 8003cda:	4619      	mov	r1, r3
 8003cdc:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003cde:	e780      	b.n	8003be2 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8003ce0:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8003ce4:	4670      	mov	r0, lr
 8003ce6:	e769      	b.n	8003bbc <RCM_ExecRegularConv+0x48>
 8003ce8:	2003      	movs	r0, #3
 8003cea:	4601      	mov	r1, r0
 8003cec:	e7d4      	b.n	8003c98 <RCM_ExecRegularConv+0x124>
 8003cee:	bf00      	nop
 8003cf0:	20001b50 	.word	0x20001b50
 8003cf4:	20001b4c 	.word	0x20001b4c
 8003cf8:	20000234 	.word	0x20000234
 8003cfc:	20001b88 	.word	0x20001b88

08003d00 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003d00:	4b14      	ldr	r3, [pc, #80]	@ (8003d54 <RCM_ExecUserConv+0x54>)
{
 8003d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003d06:	681c      	ldr	r4, [r3, #0]
 8003d08:	b124      	cbz	r4, 8003d14 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003d0a:	4d13      	ldr	r5, [pc, #76]	@ (8003d58 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8003d0c:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003d0e:	782b      	ldrb	r3, [r5, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d001      	beq.n	8003d18 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f7ff ff2b 	bl	8003b74 <RCM_ExecRegularConv>
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d5c <RCM_ExecUserConv+0x5c>)
 8003d20:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8003d22:	4b0f      	ldr	r3, [pc, #60]	@ (8003d60 <RCM_ExecUserConv+0x60>)
 8003d24:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003d28:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003d2c:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	b10b      	cbz	r3, 8003d36 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8003d32:	2302      	movs	r3, #2
 8003d34:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <RCM_ExecUserConv+0x64>)
 8003d38:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8003d3c:	2f00      	cmp	r7, #0
 8003d3e:	d0e9      	beq.n	8003d14 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003d40:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d44:	4620      	mov	r0, r4
 8003d46:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003d4c:	463b      	mov	r3, r7
}
 8003d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003d52:	4718      	bx	r3
 8003d54:	20001b44 	.word	0x20001b44
 8003d58:	20001b48 	.word	0x20001b48
 8003d5c:	20001b4a 	.word	0x20001b4a
 8003d60:	20001b50 	.word	0x20001b50
 8003d64:	20001b68 	.word	0x20001b68

08003d68 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003d68:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <RCM_ExecNextConv+0x7c>)
 8003d6a:	491f      	ldr	r1, [pc, #124]	@ (8003de8 <RCM_ExecNextConv+0x80>)
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003d72:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003d76:	b3a3      	cbz	r3, 8003de2 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003d78:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <RCM_ExecNextConv+0x84>)
{
 8003d7a:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003d82:	2404      	movs	r4, #4
 8003d84:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003d86:	f893 c004 	ldrb.w	ip, [r3, #4]
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003d90:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003d94:	fa03 f30c 	lsl.w	r3, r3, ip
 8003d98:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8003d9c:	bf84      	itt	hi
 8003d9e:	3c1e      	subhi	r4, #30
 8003da0:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8003da4:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003da8:	bf98      	it	ls
 8003daa:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003dae:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003db0:	bf88      	it	hi
 8003db2:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8003db6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003db8:	0d1b      	lsrs	r3, r3, #20
 8003dba:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003dbe:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	6303      	str	r3, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003dc6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003dc8:	6883      	ldr	r3, [r0, #8]
 8003dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003dce:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8003dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dd6:	2401      	movs	r4, #1
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	6083      	str	r3, [r0, #8]
 8003dde:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	4770      	bx	lr
 8003de4:	20001b4c 	.word	0x20001b4c
 8003de8:	20001b50 	.word	0x20001b50
 8003dec:	20001b88 	.word	0x20001b88

08003df0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003df0:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003df2:	4811      	ldr	r0, [pc, #68]	@ (8003e38 <RCM_ReadOngoingConv+0x48>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003df4:	4a11      	ldr	r2, [pc, #68]	@ (8003e3c <RCM_ReadOngoingConv+0x4c>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003df6:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003df8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003dfc:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003e04:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8003e08:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <RCM_ReadOngoingConv+0x50>)
 8003e0a:	d00e      	beq.n	8003e2a <RCM_ReadOngoingConv+0x3a>
 8003e0c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8003e10:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003e14:	f89c e001 	ldrb.w	lr, [ip, #1]
 8003e18:	f01e 0ffd 	tst.w	lr, #253	@ 0xfd
 8003e1c:	d005      	beq.n	8003e2a <RCM_ReadOngoingConv+0x3a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003e1e:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8003e20:	f8ac 4002 	strh.w	r4, [ip, #2]
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003e24:	2402      	movs	r4, #2
 8003e26:	f88c 4001 	strb.w	r4, [ip, #1]
    /* Restore back DMA configuration */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003e2a:	440b      	add	r3, r1
 8003e2c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003e30:	7953      	ldrb	r3, [r2, #5]
 8003e32:	7003      	strb	r3, [r0, #0]
}
 8003e34:	bd10      	pop	{r4, pc}
 8003e36:	bf00      	nop
 8003e38:	20001b4c 	.word	0x20001b4c
 8003e3c:	20001b88 	.word	0x20001b88
 8003e40:	20001b50 	.word	0x20001b50

08003e44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e44:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_MspInit+0x3c>)
{
 8003e46:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8003e52:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e54:	f002 0201 	and.w	r2, r2, #1
 8003e58:	9200      	str	r2, [sp, #0]
 8003e5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e5e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e62:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003e6c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003e70:	f001 fc1c 	bl	80056ac <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e74:	b003      	add	sp, #12
 8003e76:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e7a:	f002 b81f 	b.w	8005ebc <HAL_PWREx_DisableUCPDDeadBattery>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	00000000 	.word	0x00000000

08003e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e90:	2244      	movs	r2, #68	@ 0x44
 8003e92:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e94:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003e98:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003e9c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e9e:	f006 f9cb 	bl	800a238 <memset>
  if(hadc->Instance==ADC1)
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ea8:	d004      	beq.n	8003eb4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003eaa:	4a43      	ldr	r2, [pc, #268]	@ (8003fb8 <HAL_ADC_MspInit+0x130>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d046      	beq.n	8003f3e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003eb0:	b01c      	add	sp, #112	@ 0x70
 8003eb2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003eb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003eb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ebc:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ebe:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003ec0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec2:	f002 fbb3 	bl	800662c <HAL_RCCEx_PeriphCLKConfig>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d16a      	bne.n	8003fa0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003eca:	4a3c      	ldr	r2, [pc, #240]	@ (8003fbc <HAL_ADC_MspInit+0x134>)
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ed0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003ed2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ed4:	d109      	bne.n	8003eea <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fc0 <HAL_ADC_MspInit+0x138>)
 8003ed8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ede:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eea:	4b35      	ldr	r3, [pc, #212]	@ (8003fc0 <HAL_ADC_MspInit+0x138>)
 8003eec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003ef4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ef6:	f002 0201 	and.w	r2, r2, #1
 8003efa:	9202      	str	r2, [sp, #8]
 8003efc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f00:	f042 0202 	orr.w	r2, r2, #2
 8003f04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f10:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003f12:	2205      	movs	r2, #5
 8003f14:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f20:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f22:	f001 fdd9 	bl	8005ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003f26:	f244 0202 	movw	r2, #16386	@ 0x4002
 8003f2a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2c:	4825      	ldr	r0, [pc, #148]	@ (8003fc4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003f32:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f36:	f001 fdcf 	bl	8005ad8 <HAL_GPIO_Init>
}
 8003f3a:	b01c      	add	sp, #112	@ 0x70
 8003f3c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003f42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f46:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f48:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003f4a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f4c:	f002 fb6e 	bl	800662c <HAL_RCCEx_PeriphCLKConfig>
 8003f50:	bb48      	cbnz	r0, 8003fa6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <HAL_ADC_MspInit+0x134>)
 8003f54:	6813      	ldr	r3, [r2, #0]
 8003f56:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f58:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f5c:	d109      	bne.n	8003f72 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003f5e:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <HAL_ADC_MspInit+0x138>)
 8003f60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f66:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <HAL_ADC_MspInit+0x138>)
 8003f74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003f7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8003fb0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003f88:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003f90:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f94:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003f98:	f001 fd9e 	bl	8005ad8 <HAL_GPIO_Init>
}
 8003f9c:	b01c      	add	sp, #112	@ 0x70
 8003f9e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003fa0:	f7fd f9d8 	bl	8001354 <Error_Handler>
 8003fa4:	e791      	b.n	8003eca <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003fa6:	f7fd f9d5 	bl	8001354 <Error_Handler>
 8003faa:	e7d2      	b.n	8003f52 <HAL_ADC_MspInit+0xca>
 8003fac:	f3af 8000 	nop.w
 8003fb0:	00000040 	.word	0x00000040
 8003fb4:	00000003 	.word	0x00000003
 8003fb8:	50000100 	.word	0x50000100
 8003fbc:	20001b98 	.word	0x20001b98
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	48000400 	.word	0x48000400

08003fc8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003fc8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8003fca:	6802      	ldr	r2, [r0, #0]
 8003fcc:	4934      	ldr	r1, [pc, #208]	@ (80040a0 <HAL_COMP_MspInit+0xd8>)
{
 8003fce:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8003fd2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003fd8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003fdc:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8003fde:	d008      	beq.n	8003ff2 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8003fe0:	4b30      	ldr	r3, [pc, #192]	@ (80040a4 <HAL_COMP_MspInit+0xdc>)
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d01e      	beq.n	8004024 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8003fe6:	4b30      	ldr	r3, [pc, #192]	@ (80040a8 <HAL_COMP_MspInit+0xe0>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d034      	beq.n	8004056 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8003fec:	b00b      	add	sp, #44	@ 0x2c
 8003fee:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ff6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003ffa:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8004088 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800400e:	a904      	add	r1, sp, #16
 8004010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004014:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800401a:	f001 fd5d 	bl	8005ad8 <HAL_GPIO_Init>
}
 800401e:	b00b      	add	sp, #44	@ 0x2c
 8004020:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004024:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004028:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800402c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004036:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004090 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004040:	a904      	add	r1, sp, #16
 8004042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004046:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800404c:	f001 fd44 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004050:	b00b      	add	sp, #44	@ 0x2c
 8004052:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800405a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800405e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004060:	4812      	ldr	r0, [pc, #72]	@ (80040ac <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004062:	f042 0202 	orr.w	r2, r2, #2
 8004066:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800406a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8004098 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004074:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004076:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800407c:	f001 fd2c 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004080:	b00b      	add	sp, #44	@ 0x2c
 8004082:	f85d fb04 	ldr.w	pc, [sp], #4
 8004086:	bf00      	nop
 8004088:	00000002 	.word	0x00000002
 800408c:	00000003 	.word	0x00000003
 8004090:	00000080 	.word	0x00000080
 8004094:	00000003 	.word	0x00000003
 8004098:	00000001 	.word	0x00000001
 800409c:	00000003 	.word	0x00000003
 80040a0:	40010200 	.word	0x40010200
 80040a4:	40010204 	.word	0x40010204
 80040a8:	4001020c 	.word	0x4001020c
 80040ac:	48000400 	.word	0x48000400

080040b0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80040b0:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <HAL_CORDIC_MspInit+0x2c>)
 80040b2:	6802      	ldr	r2, [r0, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d000      	beq.n	80040ba <HAL_CORDIC_MspInit+0xa>
 80040b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80040ba:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 80040c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
{
 80040ca:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80040cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80040d6:	b002      	add	sp, #8
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40020c00 	.word	0x40020c00

080040e0 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 80040e0:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <HAL_DAC_MspInit+0x2c>)
 80040e2:	6802      	ldr	r2, [r0, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d000      	beq.n	80040ea <HAL_DAC_MspInit+0xa>
 80040e8:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80040ea:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 80040ee:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 80040f2:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 80040f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040f6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80040fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8004106:	b002      	add	sp, #8
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	50001000 	.word	0x50001000

08004110 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004110:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8004112:	6802      	ldr	r2, [r0, #0]
 8004114:	4934      	ldr	r1, [pc, #208]	@ (80041e8 <HAL_OPAMP_MspInit+0xd8>)
{
 8004116:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800411a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004120:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004124:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8004126:	d008      	beq.n	800413a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8004128:	4b30      	ldr	r3, [pc, #192]	@ (80041ec <HAL_OPAMP_MspInit+0xdc>)
 800412a:	429a      	cmp	r2, r3
 800412c:	d01e      	beq.n	800416c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800412e:	4b30      	ldr	r3, [pc, #192]	@ (80041f0 <HAL_OPAMP_MspInit+0xe0>)
 8004130:	429a      	cmp	r2, r3
 8004132:	d033      	beq.n	800419c <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004134:	b00b      	add	sp, #44	@ 0x2c
 8004136:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800413e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8004142:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80041d0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800414e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004156:	a904      	add	r1, sp, #16
 8004158:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800415c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f001 fcb9 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004166:	b00b      	add	sp, #44	@ 0x2c
 8004168:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004170:	33fc      	adds	r3, #252	@ 0xfc
 8004172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	64da      	str	r2, [r3, #76]	@ 0x4c
 800417a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800417c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80041d8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004186:	a904      	add	r1, sp, #16
 8004188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800418c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004190:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004192:	f001 fca1 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004196:	b00b      	add	sp, #44	@ 0x2c
 8004198:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80041a0:	33f8      	adds	r3, #248	@ 0xf8
 80041a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a4:	4813      	ldr	r0, [pc, #76]	@ (80041f4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	f042 0202 	orr.w	r2, r2, #2
 80041aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80041ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80041e0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80041ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041be:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c0:	f001 fc8a 	bl	8005ad8 <HAL_GPIO_Init>
}
 80041c4:	b00b      	add	sp, #44	@ 0x2c
 80041c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ca:	bf00      	nop
 80041cc:	f3af 8000 	nop.w
 80041d0:	0000000e 	.word	0x0000000e
 80041d4:	00000003 	.word	0x00000003
 80041d8:	000000e0 	.word	0x000000e0
 80041dc:	00000003 	.word	0x00000003
 80041e0:	00000007 	.word	0x00000007
 80041e4:	00000003 	.word	0x00000003
 80041e8:	40010300 	.word	0x40010300
 80041ec:	40010304 	.word	0x40010304
 80041f0:	40010308 	.word	0x40010308
 80041f4:	48000400 	.word	0x48000400

080041f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041f8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80041fa:	6802      	ldr	r2, [r0, #0]
 80041fc:	4922      	ldr	r1, [pc, #136]	@ (8004288 <HAL_TIM_Base_MspInit+0x90>)
{
 80041fe:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8004202:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004208:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800420c:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 800420e:	d004      	beq.n	800421a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004210:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004214:	d010      	beq.n	8004238 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004216:	b00a      	add	sp, #40	@ 0x28
 8004218:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800421a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800421e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004222:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004228:	661a      	str	r2, [r3, #96]	@ 0x60
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	9b01      	ldr	r3, [sp, #4]
}
 8004234:	b00a      	add	sp, #40	@ 0x28
 8004236:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004238:	4b14      	ldr	r3, [pc, #80]	@ (800428c <HAL_TIM_Base_MspInit+0x94>)
 800423a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	659a      	str	r2, [r3, #88]	@ 0x58
 8004242:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004244:	f002 0201 	and.w	r2, r2, #1
 8004248:	9202      	str	r2, [sp, #8]
 800424a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 8004256:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8004280 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004260:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004262:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8004264:	a904      	add	r1, sp, #16
 8004266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 800426a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004270:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004272:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8004274:	f001 fc30 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004278:	b00a      	add	sp, #40	@ 0x28
 800427a:	bd10      	pop	{r4, pc}
 800427c:	f3af 8000 	nop.w
 8004280:	00008000 	.word	0x00008000
 8004284:	00000002 	.word	0x00000002
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40021000 	.word	0x40021000

08004290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004290:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004292:	4a2a      	ldr	r2, [pc, #168]	@ (800433c <HAL_TIM_MspPostInit+0xac>)
 8004294:	6801      	ldr	r1, [r0, #0]
{
 8004296:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800429a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80042a0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80042a4:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80042a6:	d001      	beq.n	80042ac <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80042a8:	b00a      	add	sp, #40	@ 0x28
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042b0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80042b4:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80042b8:	4821      	ldr	r0, [pc, #132]	@ (8004340 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ba:	4332      	orrs	r2, r6
 80042bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042c0:	4032      	ands	r2, r6
 80042c2:	9201      	str	r2, [sp, #4]
 80042c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042c8:	f042 0202 	orr.w	r2, r2, #2
 80042cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042d0:	f002 0202 	and.w	r2, r2, #2
 80042d4:	9202      	str	r2, [sp, #8]
 80042d6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80042e2:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80042ea:	2402      	movs	r4, #2
 80042ec:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80042ee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80042f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042f4:	2302      	movs	r3, #2
 80042f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004300:	f001 fbea 	bl	8005ad8 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004304:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004306:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800430a:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800430c:	480d      	ldr	r0, [pc, #52]	@ (8004344 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800430e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004314:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004318:	f001 fbde 	bl	8005ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 800431c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004320:	2302      	movs	r3, #2
 8004322:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004326:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004328:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 800432e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004332:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004334:	f001 fbd0 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004338:	b00a      	add	sp, #40	@ 0x28
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	40012c00 	.word	0x40012c00
 8004340:	48000800 	.word	0x48000800
 8004344:	48000400 	.word	0x48000400

08004348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004350:	2244      	movs	r2, #68	@ 0x44
 8004352:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004358:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800435c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800435e:	f005 ff6b 	bl	800a238 <memset>
  if(huart->Instance==USART2)
 8004362:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_UART_MspInit+0xe0>)
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d001      	beq.n	800436e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800436a:	b018      	add	sp, #96	@ 0x60
 800436c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800436e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004370:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004372:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004374:	f002 f95a 	bl	800662c <HAL_RCCEx_PeriphCLKConfig>
 8004378:	2800      	cmp	r0, #0
 800437a:	d14b      	bne.n	8004414 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	482c      	ldr	r0, [pc, #176]	@ (8004430 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004380:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004382:	4e2c      	ldr	r6, [pc, #176]	@ (8004434 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004384:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004388:	659a      	str	r2, [r3, #88]	@ 0x58
 800438a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800438c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004394:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004396:	f042 0202 	orr.w	r2, r2, #2
 800439a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80043a4:	2218      	movs	r2, #24
 80043a6:	2302      	movs	r3, #2
 80043a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043ac:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043b8:	2307      	movs	r3, #7
 80043ba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043bc:	f001 fb8c 	bl	8005ad8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80043c0:	491d      	ldr	r1, [pc, #116]	@ (8004438 <HAL_UART_MspInit+0xf0>)
 80043c2:	221a      	movs	r2, #26
 80043c4:	2300      	movs	r3, #0
 80043c6:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043ca:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80043cc:	2280      	movs	r2, #128	@ 0x80
 80043ce:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80043d2:	e9c6 2304 	strd	r2, r3, [r6, #16]
 80043d6:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80043da:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043dc:	f001 faea 	bl	80059b4 <HAL_DMA_Init>
 80043e0:	b9f0      	cbnz	r0, 8004420 <HAL_UART_MspInit+0xd8>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80043e2:	4d16      	ldr	r5, [pc, #88]	@ (800443c <HAL_UART_MspInit+0xf4>)
 80043e4:	4916      	ldr	r1, [pc, #88]	@ (8004440 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80043e6:	67e6      	str	r6, [r4, #124]	@ 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80043e8:	221b      	movs	r2, #27
 80043ea:	2300      	movs	r3, #0
 80043ec:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80043f0:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80043f2:	2110      	movs	r1, #16
 80043f4:	2280      	movs	r2, #128	@ 0x80
 80043f6:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80043fa:	e9c5 3305 	strd	r3, r3, [r5, #20]
 80043fe:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004402:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004404:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004406:	f001 fad5 	bl	80059b4 <HAL_DMA_Init>
 800440a:	b930      	cbnz	r0, 800441a <HAL_UART_MspInit+0xd2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800440c:	67a5      	str	r5, [r4, #120]	@ 0x78
 800440e:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8004410:	b018      	add	sp, #96	@ 0x60
 8004412:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004414:	f7fc ff9e 	bl	8001354 <Error_Handler>
 8004418:	e7b0      	b.n	800437c <HAL_UART_MspInit+0x34>
      Error_Handler();
 800441a:	f7fc ff9b 	bl	8001354 <Error_Handler>
 800441e:	e7f5      	b.n	800440c <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8004420:	f7fc ff98 	bl	8001354 <Error_Handler>
 8004424:	e7dd      	b.n	80043e2 <HAL_UART_MspInit+0x9a>
 8004426:	bf00      	nop
 8004428:	40004400 	.word	0x40004400
 800442c:	40021000 	.word	0x40021000
 8004430:	48000400 	.word	0x48000400
 8004434:	20000588 	.word	0x20000588
 8004438:	40020008 	.word	0x40020008
 800443c:	20000528 	.word	0x20000528
 8004440:	4002001c 	.word	0x4002001c

08004444 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004444:	4b02      	ldr	r3, [pc, #8]	@ (8004450 <ADC1_2_IRQHandler+0xc>)
 8004446:	2240      	movs	r2, #64	@ 0x40
 8004448:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  (void)TSK_HighFrequencyTask();
 800444a:	f7fd bccf 	b.w	8001dec <TSK_HighFrequencyTask>
 800444e:	bf00      	nop
 8004450:	50000100 	.word	0x50000100

08004454 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004454:	4b03      	ldr	r3, [pc, #12]	@ (8004464 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004456:	4804      	ldr	r0, [pc, #16]	@ (8004468 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004458:	f06f 0201 	mvn.w	r2, #1
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	f004 be49 	b.w	80090f4 <R3_2_TIMx_UP_IRQHandler>
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	20000234 	.word	0x20000234

0800446c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 800446c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800446e:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	0612      	lsls	r2, r2, #24
 8004474:	d505      	bpl.n	8004482 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004476:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 800447a:	480a      	ldr	r0, [pc, #40]	@ (80044a4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800447c:	611a      	str	r2, [r3, #16]
 800447e:	f7fe f9f5 	bl	800286c <PWMC_OCP_Handler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004482:	4907      	ldr	r1, [pc, #28]	@ (80044a0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004484:	690b      	ldr	r3, [r1, #16]
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	d505      	bpl.n	8004496 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800448a:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 800448e:	4805      	ldr	r0, [pc, #20]	@ (80044a4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004490:	610b      	str	r3, [r1, #16]
 8004492:	f7fe fa0b 	bl	80028ac <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800449a:	f7fd bc61 	b.w	8001d60 <MC_Scheduler>
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	20000234 	.word	0x20000234

080044a8 <DMA1_Channel1_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <DMA1_Channel1_IRQHandler+0x14>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	0792      	lsls	r2, r2, #30
 80044ae:	d400      	bmi.n	80044b2 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 80044b0:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80044b2:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80044b4:	4802      	ldr	r0, [pc, #8]	@ (80044c0 <DMA1_Channel1_IRQHandler+0x18>)
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	f7fc bb58 	b.w	8000b6c <ASPEP_HWDataReceivedIT>
 80044bc:	40020000 	.word	0x40020000
 80044c0:	20000474 	.word	0x20000474

080044c4 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80044c4:	4b41      	ldr	r3, [pc, #260]	@ (80045cc <USART2_IRQHandler+0x108>)
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 80044ca:	b510      	push	{r4, lr}
 80044cc:	d509      	bpl.n	80044e2 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80044ce:	4940      	ldr	r1, [pc, #256]	@ (80045d0 <USART2_IRQHandler+0x10c>)
    /* Disable the DMA channel to prepare the next chunck of data */
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART */
    /* Need to free the buffer, and to check pending transfer */
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80044d0:	4840      	ldr	r0, [pc, #256]	@ (80045d4 <USART2_IRQHandler+0x110>)
 80044d2:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80044d4:	2440      	movs	r4, #64	@ 0x40
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	61ca      	str	r2, [r1, #28]
 80044dc:	621c      	str	r4, [r3, #32]
 80044de:	f7fc f999 	bl	8000814 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80044e2:	4b3a      	ldr	r3, [pc, #232]	@ (80045cc <USART2_IRQHandler+0x108>)
 80044e4:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80044e6:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80044e8:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80044ea:	689c      	ldr	r4, [r3, #8]
 80044ec:	07e4      	lsls	r4, r4, #31
 80044ee:	d526      	bpl.n	800453e <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80044f0:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80044f4:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 80044f8:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80044fa:	f001 0104 	and.w	r1, r1, #4
 80044fe:	430a      	orrs	r2, r1
 8004500:	d01d      	beq.n	800453e <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error */
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004502:	220e      	movs	r2, #14
 8004504:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800450a:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800450e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004512:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 800451a:	e840 3100 	strex	r1, r3, [r0]
 800451e:	2900      	cmp	r1, #0
 8004520:	d1f3      	bne.n	800450a <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004526:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 800452a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800452e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004536:	e840 3100 	strex	r1, r3, [r0]
 800453a:	2900      	cmp	r1, #0
 800453c:	d1f3      	bne.n	8004526 <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800453e:	4b23      	ldr	r3, [pc, #140]	@ (80045cc <USART2_IRQHandler+0x108>)
 8004540:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004542:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004544:	06d2      	lsls	r2, r2, #27
 8004546:	d540      	bpl.n	80045ca <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004548:	06db      	lsls	r3, r3, #27
 800454a:	d53e      	bpl.n	80045ca <USART2_IRQHandler+0x106>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004550:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004554:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004558:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004560:	e840 3100 	strex	r1, r3, [r0]
 8004564:	2900      	cmp	r1, #0
 8004566:	d1f3      	bne.n	8004550 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800456c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004570:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004574:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 800457c:	e840 3100 	strex	r1, r3, [r0]
 8004580:	2900      	cmp	r1, #0
 8004582:	d1f3      	bne.n	800456c <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004588:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800458c:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004598:	e840 3100 	strex	r1, r3, [r0]
 800459c:	2900      	cmp	r1, #0
 800459e:	d1f3      	bne.n	8004588 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80045a0:	4b0a      	ldr	r3, [pc, #40]	@ (80045cc <USART2_IRQHandler+0x108>)
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80045a8:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80045ac:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80045b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80045b8:	e840 3100 	strex	r1, r3, [r0]
 80045bc:	2900      	cmp	r1, #0
 80045be:	d1f3      	bne.n	80045a8 <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80045c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80045c4:	4803      	ldr	r0, [pc, #12]	@ (80045d4 <USART2_IRQHandler+0x110>)
 80045c6:	f7fc bb1f 	b.w	8000c08 <ASPEP_HWDMAReset>
}
 80045ca:	bd10      	pop	{r4, pc}
 80045cc:	40004400 	.word	0x40004400
 80045d0:	40020000 	.word	0x40020000
 80045d4:	20000474 	.word	0x20000474

080045d8 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80045d8:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80045da:	f7fd fd4d 	bl	8002078 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 80045de:	e7fe      	b.n	80045de <HardFault_Handler+0x6>

080045e0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80045e0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80045e2:	4c0a      	ldr	r4, [pc, #40]	@ (800460c <SysTick_Handler+0x2c>)
 80045e4:	7823      	ldrb	r3, [r4, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d006      	beq.n	80045f8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80045ea:	3301      	adds	r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80045f4:	f7fd bd34 	b.w	8002060 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80045f8:	f000 f8ea 	bl	80047d0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80045fc:	f001 f8ce 	bl	800579c <HAL_SYSTICK_IRQHandler>
 8004600:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004602:	7023      	strb	r3, [r4, #0]
}
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004608:	f7fd bd2a 	b.w	8002060 <MC_RunMotorControlTasks>
 800460c:	200004fc 	.word	0x200004fc

08004610 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <EXTI15_10_IRQHandler+0x14>)
 8004612:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8004614:	0552      	lsls	r2, r2, #21
 8004616:	d400      	bmi.n	800461a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    (void)UI_HandleStartStopButton_cb ();
  }

}
 8004618:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800461a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800461e:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb ();
 8004620:	f7fd bd3a 	b.w	8002098 <UI_HandleStartStopButton_cb>
 8004624:	40010400 	.word	0x40010400

08004628 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004628:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800462a:	2340      	movs	r3, #64	@ 0x40
{
 800462c:	b470      	push	{r4, r5, r6}
 800462e:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	e842 3100 	strex	r1, r3, [r2]
 800463c:	2900      	cmp	r1, #0
 800463e:	d1f7      	bne.n	8004630 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004640:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	e851 3f00 	ldrex	r3, [r1]
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	e841 3400 	strex	r4, r3, [r1]
 8004650:	2c00      	cmp	r4, #0
 8004652:	d1f7      	bne.n	8004644 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004654:	6901      	ldr	r1, [r0, #16]
 8004656:	4e17      	ldr	r6, [pc, #92]	@ (80046b4 <UASPEP_INIT+0x8c>)
 8004658:	6883      	ldr	r3, [r0, #8]
 800465a:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800465c:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800465e:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004660:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 8004664:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004666:	68c3      	ldr	r3, [r0, #12]
 8004668:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800466a:	2340      	movs	r3, #64	@ 0x40
 800466c:	6213      	str	r3, [r2, #32]
 800466e:	586b      	ldr	r3, [r5, r1]
 8004670:	f043 0302 	orr.w	r3, r3, #2
 8004674:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004676:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	e851 3f00 	ldrex	r3, [r1]
 800467e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	e841 3400 	strex	r4, r3, [r1]
 8004686:	2c00      	cmp	r4, #0
 8004688:	d1f7      	bne.n	800467a <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800468a:	68c3      	ldr	r3, [r0, #12]
 800468c:	5cf0      	ldrb	r0, [r6, r3]
 800468e:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004690:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004694:	2340      	movs	r3, #64	@ 0x40
 8004696:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004698:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800469c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80046a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	e841 3200 	strex	r2, r3, [r1]
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	d1f7      	bne.n	800469e <UASPEP_INIT+0x76>
}
 80046ae:	bc70      	pop	{r4, r5, r6}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	0800a5c0 	.word	0x0800a5c0

080046b8 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80046b8:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80046ba:	6903      	ldr	r3, [r0, #16]
 80046bc:	4d0b      	ldr	r5, [pc, #44]	@ (80046ec <UASPEP_SEND_PACKET+0x34>)
 80046be:	6884      	ldr	r4, [r0, #8]
 80046c0:	5ceb      	ldrb	r3, [r5, r3]
 80046c2:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80046c4:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80046c6:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80046ca:	d40b      	bmi.n	80046e4 <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80046cc:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80046ce:	6841      	ldr	r1, [r0, #4]
 80046d0:	0c09      	lsrs	r1, r1, #16
 80046d2:	0409      	lsls	r1, r1, #16
 80046d4:	430a      	orrs	r2, r1
 80046d6:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80046d8:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80046da:	2001      	movs	r0, #1
 80046dc:	4302      	orrs	r2, r0
 80046de:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return (result);
}
 80046e0:	bc30      	pop	{r4, r5}
 80046e2:	4770      	bx	lr
    result = false;
 80046e4:	2000      	movs	r0, #0
}
 80046e6:	bc30      	pop	{r4, r5}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	0800a5c0 	.word	0x0800a5c0

080046f0 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80046f0:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80046f2:	68c3      	ldr	r3, [r0, #12]
 80046f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004724 <UASPEP_RECEIVE_BUFFER+0x34>)
 80046f6:	6844      	ldr	r4, [r0, #4]
 80046f8:	5ce8      	ldrb	r0, [r5, r3]
 80046fa:	5823      	ldr	r3, [r4, r0]
 80046fc:	eb04 0c00 	add.w	ip, r4, r0
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004706:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800470a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	4313      	orrs	r3, r2
 8004714:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004718:	5823      	ldr	r3, [r4, r0]
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004720:	bc30      	pop	{r4, r5}
 8004722:	4770      	bx	lr
 8004724:	0800a5c0 	.word	0x0800a5c0

08004728 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004728:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800472a:	2310      	movs	r3, #16
 800472c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004732:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	e842 3100 	strex	r1, r3, [r2]
 800473a:	2900      	cmp	r1, #0
 800473c:	d1f7      	bne.n	800472e <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800473e:	4770      	bx	lr

08004740 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004740:	4a03      	ldr	r2, [pc, #12]	@ (8004750 <SystemInit+0x10>)
 8004742:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004746:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800474a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800474e:	4770      	bx	lr
 8004750:	e000ed00 	.word	0xe000ed00

08004754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004754:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004756:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_InitTick+0x40>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b90b      	cbnz	r3, 8004760 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800475c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800475e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004760:	490d      	ldr	r1, [pc, #52]	@ (8004798 <HAL_InitTick+0x44>)
 8004762:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004766:	4605      	mov	r5, r0
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	6808      	ldr	r0, [r1, #0]
 800476e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004772:	f000 fff7 	bl	8005764 <HAL_SYSTICK_Config>
 8004776:	4604      	mov	r4, r0
 8004778:	2800      	cmp	r0, #0
 800477a:	d1ef      	bne.n	800475c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800477c:	2d0f      	cmp	r5, #15
 800477e:	d8ed      	bhi.n	800475c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004780:	4602      	mov	r2, r0
 8004782:	4629      	mov	r1, r5
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	f000 ffa2 	bl	80056d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_InitTick+0x48>)
 800478e:	4620      	mov	r0, r4
 8004790:	601d      	str	r5, [r3, #0]
}
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	20000504 	.word	0x20000504
 8004798:	20000500 	.word	0x20000500
 800479c:	20000508 	.word	0x20000508

080047a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a0:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <HAL_Init+0x2c>)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 80047a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ae:	f000 ff7d 	bl	80056ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b2:	2004      	movs	r0, #4
 80047b4:	f7ff ffce 	bl	8004754 <HAL_InitTick>
 80047b8:	b110      	cbz	r0, 80047c0 <HAL_Init+0x20>
    status = HAL_ERROR;
 80047ba:	2401      	movs	r4, #1
}
 80047bc:	4620      	mov	r0, r4
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	4604      	mov	r4, r0
    HAL_MspInit();
 80047c2:	f7ff fb3f 	bl	8003e44 <HAL_MspInit>
}
 80047c6:	4620      	mov	r0, r4
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	bf00      	nop
 80047cc:	40022000 	.word	0x40022000

080047d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80047d0:	4a03      	ldr	r2, [pc, #12]	@ (80047e0 <HAL_IncTick+0x10>)
 80047d2:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <HAL_IncTick+0x14>)
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	6809      	ldr	r1, [r1, #0]
 80047d8:	440b      	add	r3, r1
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20001b9c 	.word	0x20001b9c
 80047e4:	20000504 	.word	0x20000504

080047e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80047e8:	4b01      	ldr	r3, [pc, #4]	@ (80047f0 <HAL_GetTick+0x8>)
 80047ea:	6818      	ldr	r0, [r3, #0]
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20001b9c 	.word	0x20001b9c

080047f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80047f8:	f7ff fff6 	bl	80047e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047fc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80047fe:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004800:	d002      	beq.n	8004808 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004802:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <HAL_Delay+0x20>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004808:	f7ff ffee 	bl	80047e8 <HAL_GetTick>
 800480c:	1b40      	subs	r0, r0, r5
 800480e:	42a0      	cmp	r0, r4
 8004810:	d3fa      	bcc.n	8004808 <HAL_Delay+0x14>
  {
  }
}
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	20000504 	.word	0x20000504

08004818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004818:	b530      	push	{r4, r5, lr}
 800481a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800481c:	2300      	movs	r3, #0
 800481e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004820:	2800      	cmp	r0, #0
 8004822:	f000 808c 	beq.w	800493e <HAL_ADC_Init+0x126>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004826:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8004828:	4604      	mov	r4, r0
 800482a:	2d00      	cmp	r5, #0
 800482c:	f000 808c 	beq.w	8004948 <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004830:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004832:	6893      	ldr	r3, [r2, #8]
 8004834:	0098      	lsls	r0, r3, #2
 8004836:	d505      	bpl.n	8004844 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004838:	6893      	ldr	r3, [r2, #8]
 800483a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800483e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004842:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004844:	6893      	ldr	r3, [r2, #8]
 8004846:	00d9      	lsls	r1, r3, #3
 8004848:	d419      	bmi.n	800487e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800484a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a04 <HAL_ADC_Init+0x1ec>)
 800484c:	486e      	ldr	r0, [pc, #440]	@ (8004a08 <HAL_ADC_Init+0x1f0>)
 800484e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004850:	6891      	ldr	r1, [r2, #8]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	fba0 0303 	umull	r0, r3, r0, r3
 8004858:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004862:	3301      	adds	r3, #1
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800486a:	6091      	str	r1, [r2, #8]
 800486c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800486e:	9b01      	ldr	r3, [sp, #4]
 8004870:	b12b      	cbz	r3, 800487e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	3b01      	subs	r3, #1
 8004876:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004878:	9b01      	ldr	r3, [sp, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f9      	bne.n	8004872 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800487e:	6893      	ldr	r3, [r2, #8]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	d45f      	bmi.n	8004944 <HAL_ADC_Init+0x12c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004884:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004886:	f043 0310 	orr.w	r3, r3, #16
 800488a:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488c:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800488e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004890:	4303      	orrs	r3, r0
 8004892:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004894:	6893      	ldr	r3, [r2, #8]
 8004896:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800489a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800489c:	d14b      	bne.n	8004936 <HAL_ADC_Init+0x11e>
 800489e:	06dd      	lsls	r5, r3, #27
 80048a0:	d449      	bmi.n	8004936 <HAL_ADC_Init+0x11e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80048a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048ae:	6893      	ldr	r3, [r2, #8]
 80048b0:	07d9      	lsls	r1, r3, #31
 80048b2:	d409      	bmi.n	80048c8 <HAL_ADC_Init+0xb0>
 80048b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f013 0f01 	tst.w	r3, #1
 80048be:	4b53      	ldr	r3, [pc, #332]	@ (8004a0c <HAL_ADC_Init+0x1f4>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	d101      	bne.n	80048c8 <HAL_ADC_Init+0xb0>
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d576      	bpl.n	80049b6 <HAL_ADC_Init+0x19e>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80048c8:	68e5      	ldr	r5, [r4, #12]
 80048ca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048cc:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                hadc->Init.DataAlign                                                   |
 80048d0:	432b      	orrs	r3, r5
 80048d2:	68a5      	ldr	r5, [r4, #8]
 80048d4:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048d6:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048d8:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80048da:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048e2:	d05b      	beq.n	800499c <HAL_ADC_Init+0x184>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80048e6:	b121      	cbz	r1, 80048f2 <HAL_ADC_Init+0xda>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80048e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048ea:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80048ee:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048f0:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048f2:	68d5      	ldr	r5, [r2, #12]
 80048f4:	4946      	ldr	r1, [pc, #280]	@ (8004a10 <HAL_ADC_Init+0x1f8>)
 80048f6:	4029      	ands	r1, r5
 80048f8:	4319      	orrs	r1, r3
 80048fa:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80048fc:	6913      	ldr	r3, [r2, #16]
 80048fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004900:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004904:	430b      	orrs	r3, r1
 8004906:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004908:	6891      	ldr	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800490a:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800490c:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	430b      	orrs	r3, r1
 8004916:	d01d      	beq.n	8004954 <HAL_ADC_Init+0x13c>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d043      	beq.n	80049a6 <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800491e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004920:	f023 030f 	bic.w	r3, r3, #15
 8004924:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004926:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004928:	f023 0303 	bic.w	r3, r3, #3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004932:	b003      	add	sp, #12
 8004934:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004936:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004938:	f043 0310 	orr.w	r3, r3, #16
 800493c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800493e:	2001      	movs	r0, #1
}
 8004940:	b003      	add	sp, #12
 8004942:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004944:	2000      	movs	r0, #0
 8004946:	e7a5      	b.n	8004894 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8004948:	f7ff fa9e 	bl	8003e88 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800494c:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 800494e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8004952:	e76d      	b.n	8004830 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004954:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004956:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800495a:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800495c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004960:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004962:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004966:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800496a:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 800496c:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800496e:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004970:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004972:	bb41      	cbnz	r1, 80049c6 <HAL_ADC_Init+0x1ae>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004978:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800497a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800497e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004982:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004986:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800498a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800498e:	2b01      	cmp	r3, #1
 8004990:	d026      	beq.n	80049e0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004992:	6913      	ldr	r3, [r2, #16]
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6113      	str	r3, [r2, #16]
 800499a:	e7bd      	b.n	8004918 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800499c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800499e:	3901      	subs	r1, #1
 80049a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80049a4:	e79e      	b.n	80048e4 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80049a6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80049a8:	6a23      	ldr	r3, [r4, #32]
 80049aa:	f021 010f 	bic.w	r1, r1, #15
 80049ae:	3b01      	subs	r3, #1
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049b4:	e7b7      	b.n	8004926 <HAL_ADC_Init+0x10e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049b6:	4917      	ldr	r1, [pc, #92]	@ (8004a14 <HAL_ADC_Init+0x1fc>)
 80049b8:	6865      	ldr	r5, [r4, #4]
 80049ba:	688b      	ldr	r3, [r1, #8]
 80049bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80049c0:	432b      	orrs	r3, r5
 80049c2:	608b      	str	r3, [r1, #8]
}
 80049c4:	e780      	b.n	80048c8 <HAL_ADC_Init+0xb0>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ca:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80049cc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80049d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80049d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049d8:	430b      	orrs	r3, r1
 80049da:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80049de:	e7d4      	b.n	800498a <HAL_ADC_Init+0x172>
        MODIFY_REG(hadc->Instance->CFGR2,
 80049e0:	6911      	ldr	r1, [r2, #16]
 80049e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80049e4:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80049e6:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 80049ea:	f021 0104 	bic.w	r1, r1, #4
 80049ee:	432b      	orrs	r3, r5
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80049f8:	430b      	orrs	r3, r1
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6113      	str	r3, [r2, #16]
 8004a00:	e78a      	b.n	8004918 <HAL_ADC_Init+0x100>
 8004a02:	bf00      	nop
 8004a04:	20000500 	.word	0x20000500
 8004a08:	053e2d63 	.word	0x053e2d63
 8004a0c:	50000100 	.word	0x50000100
 8004a10:	fff04007 	.word	0xfff04007
 8004a14:	50000300 	.word	0x50000300

08004a18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a1c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8004a20:	b082      	sub	sp, #8
 8004a22:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004a24:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004a2c:	f000 812b 	beq.w	8004c86 <HAL_ADC_ConfigChannel+0x26e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a30:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a38:	6894      	ldr	r4, [r2, #8]
 8004a3a:	0764      	lsls	r4, r4, #29
 8004a3c:	d44f      	bmi.n	8004ade <HAL_ADC_ConfigChannel+0xc6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a3e:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004a40:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8004a44:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004a48:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8004a4c:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004a4e:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8004a52:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004a56:	f854 500e 	ldr.w	r5, [r4, lr]
 8004a5a:	261f      	movs	r6, #31
 8004a5c:	fa00 f00c 	lsl.w	r0, r0, ip
 8004a60:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004a64:	ea25 0c0c 	bic.w	ip, r5, ip
 8004a68:	ea40 000c 	orr.w	r0, r0, ip
 8004a6c:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a70:	6890      	ldr	r0, [r2, #8]
 8004a72:	0747      	lsls	r7, r0, #29
 8004a74:	d53d      	bpl.n	8004af2 <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a76:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a78:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a7a:	6894      	ldr	r4, [r2, #8]
 8004a7c:	07e5      	lsls	r5, r4, #31
 8004a7e:	d40c      	bmi.n	8004a9a <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004a80:	4dc0      	ldr	r5, [pc, #768]	@ (8004d84 <HAL_ADC_ConfigChannel+0x36c>)
 8004a82:	68ce      	ldr	r6, [r1, #12]
 8004a84:	42ae      	cmp	r6, r5
    SET_BIT(ADCx->DIFSEL,
 8004a86:	f3c0 0412 	ubfx	r4, r0, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004a8a:	f000 80a7 	beq.w	8004bdc <HAL_ADC_ConfigChannel+0x1c4>
    CLEAR_BIT(ADCx->DIFSEL,
 8004a8e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8004a92:	ea21 0104 	bic.w	r1, r1, r4
 8004a96:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a9a:	49bb      	ldr	r1, [pc, #748]	@ (8004d88 <HAL_ADC_ConfigChannel+0x370>)
 8004a9c:	4208      	tst	r0, r1
 8004a9e:	d01c      	beq.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004aa0:	4cba      	ldr	r4, [pc, #744]	@ (8004d8c <HAL_ADC_ConfigChannel+0x374>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004aa2:	4dbb      	ldr	r5, [pc, #748]	@ (8004d90 <HAL_ADC_ConfigChannel+0x378>)
 8004aa4:	68a1      	ldr	r1, [r4, #8]
 8004aa6:	42a8      	cmp	r0, r5
 8004aa8:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8004aac:	d073      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x17e>
 8004aae:	4db9      	ldr	r5, [pc, #740]	@ (8004d94 <HAL_ADC_ConfigChannel+0x37c>)
 8004ab0:	42a8      	cmp	r0, r5
 8004ab2:	d070      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x17e>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ab4:	4db8      	ldr	r5, [pc, #736]	@ (8004d98 <HAL_ADC_ConfigChannel+0x380>)
 8004ab6:	42a8      	cmp	r0, r5
 8004ab8:	f000 80e9 	beq.w	8004c8e <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004abc:	4db7      	ldr	r5, [pc, #732]	@ (8004d9c <HAL_ADC_ConfigChannel+0x384>)
 8004abe:	42a8      	cmp	r0, r5
 8004ac0:	d10b      	bne.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ac2:	0249      	lsls	r1, r1, #9
 8004ac4:	d409      	bmi.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ac6:	49b6      	ldr	r1, [pc, #728]	@ (8004da0 <HAL_ADC_ConfigChannel+0x388>)
 8004ac8:	428a      	cmp	r2, r1
 8004aca:	d006      	beq.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004acc:	68a2      	ldr	r2, [r4, #8]
 8004ace:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004ad2:	4332      	orrs	r2, r6
 8004ad4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004ad8:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ada:	2000      	movs	r0, #0
 8004adc:	e003      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ade:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004aec:	b002      	add	sp, #8
 8004aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004af2:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004af4:	6808      	ldr	r0, [r1, #0]
 8004af6:	0726      	lsls	r6, r4, #28
 8004af8:	d4bf      	bmi.n	8004a7a <HAL_ADC_ConfigChannel+0x62>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004afa:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8004afc:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8004b00:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b02:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8004b04:	40b4      	lsls	r4, r6
 8004b06:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b0a:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8004b0e:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b12:	f102 0714 	add.w	r7, r2, #20
 8004b16:	f000 8105 	beq.w	8004d24 <HAL_ADC_ConfigChannel+0x30c>
  MODIFY_REG(*preg,
 8004b1a:	40b5      	lsls	r5, r6
 8004b1c:	583e      	ldr	r6, [r7, r0]
 8004b1e:	4034      	ands	r4, r6
 8004b20:	432c      	orrs	r4, r5
 8004b22:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b24:	6950      	ldr	r0, [r2, #20]
 8004b26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004b2a:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b2c:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b30:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b32:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b34:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b36:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b3a:	4684      	mov	ip, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b3c:	f000 80ca 	beq.w	8004cd4 <HAL_ADC_ConfigChannel+0x2bc>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b40:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004b44:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8004b46:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8004b4a:	40b5      	lsls	r5, r6
 8004b4c:	4e95      	ldr	r6, [pc, #596]	@ (8004da4 <HAL_ADC_ConfigChannel+0x38c>)
 8004b4e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8004b52:	ea0c 0606 	and.w	r6, ip, r6
 8004b56:	4306      	orrs	r6, r0
 8004b58:	4335      	orrs	r5, r6
 8004b5a:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8004b5e:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b62:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8004b64:	698e      	ldr	r6, [r1, #24]
 8004b66:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8004b6a:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8004b6e:	4330      	orrs	r0, r6
 8004b70:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b74:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004b76:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004b78:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004b7c:	f1a5 0501 	sub.w	r5, r5, #1
 8004b80:	fab5 f585 	clz	r5, r5
 8004b84:	096d      	lsrs	r5, r5, #5
 8004b86:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004b8a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004b8e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b92:	6808      	ldr	r0, [r1, #0]
}
 8004b94:	e771      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b96:	020c      	lsls	r4, r1, #8
 8004b98:	d49f      	bmi.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b9a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004b9e:	d19c      	bne.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ba0:	497a      	ldr	r1, [pc, #488]	@ (8004d8c <HAL_ADC_ConfigChannel+0x374>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba2:	4881      	ldr	r0, [pc, #516]	@ (8004da8 <HAL_ADC_ConfigChannel+0x390>)
 8004ba4:	688a      	ldr	r2, [r1, #8]
 8004ba6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004baa:	4332      	orrs	r2, r6
 8004bac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004bb0:	608a      	str	r2, [r1, #8]
 8004bb2:	6802      	ldr	r2, [r0, #0]
 8004bb4:	497d      	ldr	r1, [pc, #500]	@ (8004dac <HAL_ADC_ConfigChannel+0x394>)
 8004bb6:	0992      	lsrs	r2, r2, #6
 8004bb8:	fba1 1202 	umull	r1, r2, r1, r2
 8004bbc:	0992      	lsrs	r2, r2, #6
 8004bbe:	3201      	adds	r2, #1
 8004bc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004bc4:	0092      	lsls	r2, r2, #2
 8004bc6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004bc8:	9a01      	ldr	r2, [sp, #4]
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	d085      	beq.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 8004bce:	9a01      	ldr	r2, [sp, #4]
 8004bd0:	3a01      	subs	r2, #1
 8004bd2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004bd4:	9a01      	ldr	r2, [sp, #4]
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	d1f9      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x1b6>
 8004bda:	e77e      	b.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
    SET_BIT(ADCx->DIFSEL,
 8004bdc:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8004be0:	4325      	orrs	r5, r4
 8004be2:	f8c2 50b0 	str.w	r5, [r2, #176]	@ 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	d060      	beq.n	8004cac <HAL_ADC_ConfigChannel+0x294>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	f000 80a0 	beq.w	8004d34 <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 8004bf4:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf8:	3401      	adds	r4, #1
 8004bfa:	f004 041f 	and.w	r4, r4, #31
 8004bfe:	2c09      	cmp	r4, #9
 8004c00:	f240 8098 	bls.w	8004d34 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	f000 8147 	beq.w	8004e9c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8004c0e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c12:	3401      	adds	r4, #1
 8004c14:	06a4      	lsls	r4, r4, #26
 8004c16:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	f000 8141 	beq.w	8004ea6 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004c24:	fab5 f585 	clz	r5, r5
 8004c28:	3501      	adds	r5, #1
 8004c2a:	f005 051f 	and.w	r5, r5, #31
 8004c2e:	2601      	movs	r6, #1
 8004c30:	fa06 f505 	lsl.w	r5, r6, r5
 8004c34:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	f000 8131 	beq.w	8004ea2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004c40:	fab0 f080 	clz	r0, r0
 8004c44:	1c45      	adds	r5, r0, #1
 8004c46:	f005 051f 	and.w	r5, r5, #31
 8004c4a:	2003      	movs	r0, #3
 8004c4c:	f06f 061d 	mvn.w	r6, #29
 8004c50:	fb10 6005 	smlabb	r0, r0, r5, r6
 8004c54:	0500      	lsls	r0, r0, #20
 8004c56:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5a:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c5c:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8004c5e:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c60:	f005 0504 	and.w	r5, r5, #4
 8004c64:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004c68:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004c6c:	fa04 f700 	lsl.w	r7, r4, r0
 8004c70:	f04f 0c07 	mov.w	ip, #7
 8004c74:	5974      	ldr	r4, [r6, r5]
 8004c76:	fa0c f000 	lsl.w	r0, ip, r0
 8004c7a:	ea24 0000 	bic.w	r0, r4, r0
 8004c7e:	4338      	orrs	r0, r7
 8004c80:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c82:	6808      	ldr	r0, [r1, #0]
}
 8004c84:	e709      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x82>
  __HAL_LOCK(hadc);
 8004c86:	2002      	movs	r0, #2
}
 8004c88:	b002      	add	sp, #8
 8004c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c8e:	01c8      	lsls	r0, r1, #7
 8004c90:	f53f af23 	bmi.w	8004ada <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c94:	4942      	ldr	r1, [pc, #264]	@ (8004da0 <HAL_ADC_ConfigChannel+0x388>)
 8004c96:	428a      	cmp	r2, r1
 8004c98:	f43f af1f 	beq.w	8004ada <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c9c:	68a2      	ldr	r2, [r4, #8]
 8004c9e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004ca2:	4332      	orrs	r2, r6
 8004ca4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004ca8:	60a2      	str	r2, [r4, #8]
}
 8004caa:	e716      	b.n	8004ada <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cac:	0e80      	lsrs	r0, r0, #26
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f000 061f 	and.w	r6, r0, #31
 8004cb4:	0680      	lsls	r0, r0, #26
 8004cb6:	f000 45f8 	and.w	r5, r0, #2080374784	@ 0x7c000000
 8004cba:	2001      	movs	r0, #1
 8004cbc:	40b0      	lsls	r0, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbe:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cc0:	ea45 0400 	orr.w	r4, r5, r0
 8004cc4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cc8:	d959      	bls.n	8004d7e <HAL_ADC_ConfigChannel+0x366>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cca:	381e      	subs	r0, #30
 8004ccc:	0500      	lsls	r0, r0, #20
 8004cce:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004cd2:	e7c2      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x242>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cd4:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8004cd6:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cd8:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cdc:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	d165      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x398>
 8004ce4:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ce8:	4285      	cmp	r5, r0
 8004cea:	f000 80a7 	beq.w	8004e3c <HAL_ADC_ConfigChannel+0x424>
 8004cee:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004cf0:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cf2:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004cf6:	4285      	cmp	r5, r0
 8004cf8:	f000 808b 	beq.w	8004e12 <HAL_ADC_ConfigChannel+0x3fa>
 8004cfc:	68a5      	ldr	r5, [r4, #8]
 8004cfe:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d00:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d04:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004d08:	4285      	cmp	r5, r0
 8004d0a:	f000 80a9 	beq.w	8004e60 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d0e:	68e5      	ldr	r5, [r4, #12]
 8004d10:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d12:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d16:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8004d1a:	42a0      	cmp	r0, r4
 8004d1c:	f000 80b5 	beq.w	8004e8a <HAL_ADC_ConfigChannel+0x472>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d20:	4660      	mov	r0, ip
 8004d22:	e6aa      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x62>
  MODIFY_REG(*preg,
 8004d24:	583d      	ldr	r5, [r7, r0]
 8004d26:	402c      	ands	r4, r5
 8004d28:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d2a:	6950      	ldr	r0, [r2, #20]
 8004d2c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004d30:	6150      	str	r0, [r2, #20]
}
 8004d32:	e6fb      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004d38:	2c00      	cmp	r4, #0
 8004d3a:	f000 80b8 	beq.w	8004eae <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8004d3e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d42:	3401      	adds	r4, #1
 8004d44:	06a4      	lsls	r4, r4, #26
 8004d46:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	f000 80ab 	beq.w	8004eaa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004d54:	fab5 f585 	clz	r5, r5
 8004d58:	3501      	adds	r5, #1
 8004d5a:	f005 051f 	and.w	r5, r5, #31
 8004d5e:	2601      	movs	r6, #1
 8004d60:	fa06 f505 	lsl.w	r5, r6, r5
 8004d64:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f000 8093 	beq.w	8004e96 <HAL_ADC_ConfigChannel+0x47e>
  return __builtin_clz(value);
 8004d70:	fab0 f080 	clz	r0, r0
 8004d74:	3001      	adds	r0, #1
 8004d76:	f000 001f 	and.w	r0, r0, #31
 8004d7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004d7e:	0500      	lsls	r0, r0, #20
 8004d80:	e76b      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x242>
 8004d82:	bf00      	nop
 8004d84:	407f0000 	.word	0x407f0000
 8004d88:	80080000 	.word	0x80080000
 8004d8c:	50000300 	.word	0x50000300
 8004d90:	c3210000 	.word	0xc3210000
 8004d94:	90c00010 	.word	0x90c00010
 8004d98:	c7520000 	.word	0xc7520000
 8004d9c:	cb840000 	.word	0xcb840000
 8004da0:	50000100 	.word	0x50000100
 8004da4:	03fff000 	.word	0x03fff000
 8004da8:	20000500 	.word	0x20000500
 8004dac:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8004db4:	b11e      	cbz	r6, 8004dbe <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8004db6:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dba:	42b5      	cmp	r5, r6
 8004dbc:	d03e      	beq.n	8004e3c <HAL_ADC_ConfigChannel+0x424>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dbe:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004dc0:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dc2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dca:	f104 0708 	add.w	r7, r4, #8
 8004dce:	46be      	mov	lr, r7
  if (value == 0U)
 8004dd0:	b11e      	cbz	r6, 8004dda <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004dd2:	fab6 f686 	clz	r6, r6
 8004dd6:	42ae      	cmp	r6, r5
 8004dd8:	d01d      	beq.n	8004e16 <HAL_ADC_ConfigChannel+0x3fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dda:	68a5      	ldr	r5, [r4, #8]
 8004ddc:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dde:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004de6:	f104 060c 	add.w	r6, r4, #12
 8004dea:	46b0      	mov	r8, r6
  if (value == 0U)
 8004dec:	f1be 0f00 	cmp.w	lr, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004df2:	fabe fe8e 	clz	lr, lr
 8004df6:	45ae      	cmp	lr, r5
 8004df8:	d034      	beq.n	8004e64 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dfa:	68e5      	ldr	r5, [r4, #12]
 8004dfc:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dfe:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	f43f ae37 	beq.w	8004a7a <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8004e0c:	fab5 f085 	clz	r0, r5
 8004e10:	e783      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x302>
 8004e12:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8004e16:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004e18:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e1c:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e1e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e22:	68a0      	ldr	r0, [r4, #8]
 8004e24:	68a5      	ldr	r5, [r4, #8]
 8004e26:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e2a:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e2c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e30:	4660      	mov	r0, ip
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	d1d5      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x3ca>
 8004e36:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004e3a:	e765      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x2f0>
  MODIFY_REG(*preg,
 8004e3c:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004e3e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e42:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e44:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e48:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004e4a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004e4c:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e50:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e54:	4660      	mov	r0, ip
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	d1b5      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x3ae>
 8004e5a:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004e5e:	e74a      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x2de>
 8004e60:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8004e64:	6838      	ldr	r0, [r7, #0]
 8004e66:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e6a:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e6c:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e70:	68e0      	ldr	r0, [r4, #12]
 8004e72:	68e4      	ldr	r4, [r4, #12]
 8004e74:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e78:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e7a:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e7e:	4660      	mov	r0, ip
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	d1be      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x3ea>
 8004e84:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004e88:	e747      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8004e8a:	6830      	ldr	r0, [r6, #0]
 8004e8c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e90:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e92:	6808      	ldr	r0, [r1, #0]
}
 8004e94:	e5f1      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x62>
 8004e96:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004e9a:	e6de      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x242>
 8004e9c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004ea0:	e6bb      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x202>
 8004ea2:	4804      	ldr	r0, [pc, #16]	@ (8004eb4 <HAL_ADC_ConfigChannel+0x49c>)
 8004ea4:	e6d9      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x242>
 8004ea6:	2502      	movs	r5, #2
 8004ea8:	e6c4      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x21c>
 8004eaa:	2502      	movs	r5, #2
 8004eac:	e75a      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x34c>
 8004eae:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004eb2:	e74a      	b.n	8004d4a <HAL_ADC_ConfigChannel+0x332>
 8004eb4:	fe500000 	.word	0xfe500000

08004eb8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ebc:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004ec4:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004ec6:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ec8:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 8004eca:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004ecc:	f000 8170 	beq.w	80051b0 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004ed6:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004eda:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004edc:	2d00      	cmp	r5, #0
 8004ede:	d06a      	beq.n	8004fb6 <HAL_ADCEx_InjectedConfigChannel+0xfe>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004ee0:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004ee2:	2d01      	cmp	r5, #1
 8004ee4:	d067      	beq.n	8004fb6 <HAL_ADCEx_InjectedConfigChannel+0xfe>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004ee6:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004ee8:	f000 001f 	and.w	r0, r0, #31
 8004eec:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004ef0:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004ef2:	2f00      	cmp	r7, #0
 8004ef4:	f040 8112 	bne.w	800511c <HAL_ADCEx_InjectedConfigChannel+0x264>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004ef8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004efa:	3d01      	subs	r5, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004efc:	2800      	cmp	r0, #0
 8004efe:	f000 8211 	beq.w	8005324 <HAL_ADCEx_InjectedConfigChannel+0x46c>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004f02:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004f04:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8004f08:	4328      	orrs	r0, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004f0a:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004f0c:	4330      	orrs	r0, r6
 8004f0e:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f12:	6898      	ldr	r0, [r3, #8]
 8004f14:	0700      	lsls	r0, r0, #28
 8004f16:	d410      	bmi.n	8004f3a <HAL_ADCEx_InjectedConfigChannel+0x82>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f18:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004f1c:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8004f20:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	f040 80ef 	bne.w	8005106 <HAL_ADCEx_InjectedConfigChannel+0x24e>
      MODIFY_REG(hadc->Instance->CFGR,
 8004f28:	68dd      	ldr	r5, [r3, #12]
 8004f2a:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004f2e:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004f32:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004f36:	4328      	orrs	r0, r5
 8004f38:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f3a:	6898      	ldr	r0, [r3, #8]
 8004f3c:	f010 0004 	ands.w	r0, r0, #4
 8004f40:	d04f      	beq.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x12a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f42:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f44:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f46:	689d      	ldr	r5, [r3, #8]
 8004f48:	07ee      	lsls	r6, r5, #31
 8004f4a:	d40c      	bmi.n	8004f66 <HAL_ADCEx_InjectedConfigChannel+0xae>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004f4c:	4ea2      	ldr	r6, [pc, #648]	@ (80051d8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8004f4e:	68cf      	ldr	r7, [r1, #12]
 8004f50:	42b7      	cmp	r7, r6
    SET_BIT(ADCx->DIFSEL,
 8004f52:	f3c4 0512 	ubfx	r5, r4, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004f56:	f000 80fc 	beq.w	8005152 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    CLEAR_BIT(ADCx->DIFSEL,
 8004f5a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004f5e:	ea21 0105 	bic.w	r1, r1, r5
 8004f62:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004f66:	499d      	ldr	r1, [pc, #628]	@ (80051dc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004f68:	420c      	tst	r4, r1
 8004f6a:	d01e      	beq.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004f6c:	4e9c      	ldr	r6, [pc, #624]	@ (80051e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004f6e:	4d9d      	ldr	r5, [pc, #628]	@ (80051e4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004f70:	68b1      	ldr	r1, [r6, #8]
 8004f72:	42ac      	cmp	r4, r5
 8004f74:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8004f78:	f000 809f 	beq.w	80050ba <HAL_ADCEx_InjectedConfigChannel+0x202>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f7c:	4d9a      	ldr	r5, [pc, #616]	@ (80051e8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004f7e:	42ac      	cmp	r4, r5
 8004f80:	f000 809b 	beq.w	80050ba <HAL_ADCEx_InjectedConfigChannel+0x202>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004f84:	4d99      	ldr	r5, [pc, #612]	@ (80051ec <HAL_ADCEx_InjectedConfigChannel+0x334>)
 8004f86:	42ac      	cmp	r4, r5
 8004f88:	f000 8116 	beq.w	80051b8 <HAL_ADCEx_InjectedConfigChannel+0x300>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004f8c:	4d98      	ldr	r5, [pc, #608]	@ (80051f0 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8004f8e:	42ac      	cmp	r4, r5
 8004f90:	d10b      	bne.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f92:	0249      	lsls	r1, r1, #9
 8004f94:	d409      	bmi.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004f96:	4997      	ldr	r1, [pc, #604]	@ (80051f4 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8004f98:	428b      	cmp	r3, r1
 8004f9a:	d006      	beq.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f9c:	68b3      	ldr	r3, [r6, #8]
 8004f9e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8004fa2:	433b      	orrs	r3, r7
 8004fa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fa8:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004faa:	2300      	movs	r3, #0
 8004fac:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004fb0:	b003      	add	sp, #12
 8004fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004fb6:	2809      	cmp	r0, #9
 8004fb8:	d1ab      	bne.n	8004f12 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004fba:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004fbc:	0c65      	lsrs	r5, r4, #17
 8004fbe:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004fc2:	b120      	cbz	r0, 8004fce <HAL_ADCEx_InjectedConfigChannel+0x116>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004fc4:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004fc6:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004fca:	4330      	orrs	r0, r6
 8004fcc:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004fce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004fd0:	4e89      	ldr	r6, [pc, #548]	@ (80051f8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8004fd2:	4030      	ands	r0, r6
 8004fd4:	4328      	orrs	r0, r5
 8004fd6:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fd8:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004fda:	6655      	str	r5, [r2, #100]	@ 0x64
 8004fdc:	0700      	lsls	r0, r0, #28
 8004fde:	d4ac      	bmi.n	8004f3a <HAL_ADCEx_InjectedConfigChannel+0x82>
 8004fe0:	e79a      	b.n	8004f18 <HAL_ADCEx_InjectedConfigChannel+0x60>
 8004fe2:	689d      	ldr	r5, [r3, #8]
 8004fe4:	072f      	lsls	r7, r5, #28
 8004fe6:	d4ae      	bmi.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004fe8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004fea:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	f040 80a6 	bne.w	8005140 <HAL_ADCEx_InjectedConfigChannel+0x288>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004ff4:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ff6:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004ff8:	f000 8196 	beq.w	8005328 <HAL_ADCEx_InjectedConfigChannel+0x470>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ffc:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8005000:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005002:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005004:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8005008:	2d01      	cmp	r5, #1
 800500a:	f000 8180 	beq.w	800530e <HAL_ADCEx_InjectedConfigChannel+0x456>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800500e:	691d      	ldr	r5, [r3, #16]
 8005010:	f025 0502 	bic.w	r5, r5, #2
 8005014:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005016:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8005018:	f3c4 5704 	ubfx	r7, r4, #20, #5
 800501c:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800501e:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8005020:	40bd      	lsls	r5, r7
 8005022:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005026:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 800502a:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800502e:	f103 0c14 	add.w	ip, r3, #20
 8005032:	f000 8162 	beq.w	80052fa <HAL_ADCEx_InjectedConfigChannel+0x442>
  MODIFY_REG(*preg,
 8005036:	40be      	lsls	r6, r7
 8005038:	f85c 7004 	ldr.w	r7, [ip, r4]
 800503c:	403d      	ands	r5, r7
 800503e:	4335      	orrs	r5, r6
 8005040:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005044:	695c      	ldr	r4, [r3, #20]
 8005046:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800504a:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800504c:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005050:	680c      	ldr	r4, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005052:	694e      	ldr	r6, [r1, #20]
 8005054:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005056:	f1bc 0f04 	cmp.w	ip, #4
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800505a:	46a6      	mov	lr, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800505c:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005060:	f000 810b 	beq.w	800527a <HAL_ADCEx_InjectedConfigChannel+0x3c2>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005064:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8005068:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 800506a:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 800506e:	40be      	lsls	r6, r7
 8005070:	4f62      	ldr	r7, [pc, #392]	@ (80051fc <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8005072:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005076:	ea0e 0707 	and.w	r7, lr, r7
 800507a:	4327      	orrs	r7, r4
 800507c:	433e      	orrs	r6, r7
 800507e:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 8005082:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005086:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005088:	698e      	ldr	r6, [r1, #24]
 800508a:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800508e:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8005092:	4334      	orrs	r4, r6
 8005094:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005098:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800509a:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 800509c:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80050a0:	f1a6 0601 	sub.w	r6, r6, #1
 80050a4:	fab6 f686 	clz	r6, r6
 80050a8:	0976      	lsrs	r6, r6, #5
 80050aa:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 80050ae:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 80050b2:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80050b6:	680c      	ldr	r4, [r1, #0]
}
 80050b8:	e745      	b.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050ba:	020d      	lsls	r5, r1, #8
 80050bc:	f53f af75 	bmi.w	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050c4:	f47f af71 	bne.w	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80050c8:	4945      	ldr	r1, [pc, #276]	@ (80051e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80050ca:	4c4d      	ldr	r4, [pc, #308]	@ (8005200 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80050cc:	688b      	ldr	r3, [r1, #8]
 80050ce:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80050d2:	433b      	orrs	r3, r7
 80050d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050d8:	608b      	str	r3, [r1, #8]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	4949      	ldr	r1, [pc, #292]	@ (8005204 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	fba1 1303 	umull	r1, r3, r1, r3
 80050e4:	099b      	lsrs	r3, r3, #6
 80050e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	3318      	adds	r3, #24
 80050ee:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f43f af59 	beq.w	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 80050f8:	9b01      	ldr	r3, [sp, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f9      	bne.n	80050f8 <HAL_ADCEx_InjectedConfigChannel+0x240>
 8005104:	e751      	b.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->CFGR,
 8005106:	68dd      	ldr	r5, [r3, #12]
 8005108:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 800510c:	4328      	orrs	r0, r5
 800510e:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005110:	6898      	ldr	r0, [r3, #8]
 8005112:	f010 0004 	ands.w	r0, r0, #4
 8005116:	f43f af64 	beq.w	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x12a>
 800511a:	e712      	b.n	8004f42 <HAL_ADCEx_InjectedConfigChannel+0x8a>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800511c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 800511e:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005120:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8005122:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005124:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005126:	2f00      	cmp	r7, #0
 8005128:	f47f aef3 	bne.w	8004f12 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800512c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800512e:	4e32      	ldr	r6, [pc, #200]	@ (80051f8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8005130:	4030      	ands	r0, r6
 8005132:	4328      	orrs	r0, r5
 8005134:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005136:	6898      	ldr	r0, [r3, #8]
 8005138:	0700      	lsls	r0, r0, #28
 800513a:	f53f aefe 	bmi.w	8004f3a <HAL_ADCEx_InjectedConfigChannel+0x82>
 800513e:	e6eb      	b.n	8004f18 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005140:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8005142:	2d00      	cmp	r5, #0
 8005144:	f43f af56 	beq.w	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005148:	2801      	cmp	r0, #1
 800514a:	f000 810f 	beq.w	800536c <HAL_ADCEx_InjectedConfigChannel+0x4b4>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800514e:	68d8      	ldr	r0, [r3, #12]
 8005150:	e754      	b.n	8004ffc <HAL_ADCEx_InjectedConfigChannel+0x144>
    SET_BIT(ADCx->DIFSEL,
 8005152:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8005156:	432e      	orrs	r6, r5
 8005158:	f8c3 60b0 	str.w	r6, [r3, #176]	@ 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800515c:	2d00      	cmp	r5, #0
 800515e:	d153      	bne.n	8005208 <HAL_ADCEx_InjectedConfigChannel+0x350>
 8005160:	0ea4      	lsrs	r4, r4, #26
 8005162:	3401      	adds	r4, #1
 8005164:	f004 061f 	and.w	r6, r4, #31
 8005168:	2501      	movs	r5, #1
 800516a:	06a4      	lsls	r4, r4, #26
 800516c:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005170:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005172:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005174:	ea45 0504 	orr.w	r5, r5, r4
 8005178:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800517c:	f200 80f1 	bhi.w	8005362 <HAL_ADCEx_InjectedConfigChannel+0x4aa>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005180:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005182:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005184:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8005186:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005188:	f006 0604 	and.w	r6, r6, #4
 800518c:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005190:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8005194:	fa05 fc04 	lsl.w	ip, r5, r4
 8005198:	f04f 0e07 	mov.w	lr, #7
 800519c:	59bd      	ldr	r5, [r7, r6]
 800519e:	fa0e f404 	lsl.w	r4, lr, r4
 80051a2:	ea25 0404 	bic.w	r4, r5, r4
 80051a6:	ea44 040c 	orr.w	r4, r4, ip
 80051aa:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80051ac:	680c      	ldr	r4, [r1, #0]
}
 80051ae:	e6da      	b.n	8004f66 <HAL_ADCEx_InjectedConfigChannel+0xae>
  __HAL_LOCK(hadc);
 80051b0:	2002      	movs	r0, #2
}
 80051b2:	b003      	add	sp, #12
 80051b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051b8:	01cc      	lsls	r4, r1, #7
 80051ba:	f53f aef6 	bmi.w	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051be:	490d      	ldr	r1, [pc, #52]	@ (80051f4 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 80051c0:	428b      	cmp	r3, r1
 80051c2:	f43f aef2 	beq.w	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051c6:	68b3      	ldr	r3, [r6, #8]
 80051c8:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80051cc:	433b      	orrs	r3, r7
 80051ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051d2:	60b3      	str	r3, [r6, #8]
}
 80051d4:	e6e9      	b.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0xf2>
 80051d6:	bf00      	nop
 80051d8:	407f0000 	.word	0x407f0000
 80051dc:	80080000 	.word	0x80080000
 80051e0:	50000300 	.word	0x50000300
 80051e4:	c3210000 	.word	0xc3210000
 80051e8:	90c00010 	.word	0x90c00010
 80051ec:	c7520000 	.word	0xc7520000
 80051f0:	cb840000 	.word	0xcb840000
 80051f4:	50000100 	.word	0x50000100
 80051f8:	04104000 	.word	0x04104000
 80051fc:	03fff000 	.word	0x03fff000
 8005200:	20000500 	.word	0x20000500
 8005204:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800520c:	2d00      	cmp	r5, #0
 800520e:	f000 80b2 	beq.w	8005376 <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8005212:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005216:	3501      	adds	r5, #1
 8005218:	f005 051f 	and.w	r5, r5, #31
 800521c:	2d09      	cmp	r5, #9
 800521e:	f240 80aa 	bls.w	8005376 <HAL_ADCEx_InjectedConfigChannel+0x4be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005226:	2d00      	cmp	r5, #0
 8005228:	f000 8111 	beq.w	800544e <HAL_ADCEx_InjectedConfigChannel+0x596>
  return __builtin_clz(value);
 800522c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005230:	3501      	adds	r5, #1
 8005232:	06ad      	lsls	r5, r5, #26
 8005234:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800523c:	2e00      	cmp	r6, #0
 800523e:	f000 8104 	beq.w	800544a <HAL_ADCEx_InjectedConfigChannel+0x592>
  return __builtin_clz(value);
 8005242:	fab6 f686 	clz	r6, r6
 8005246:	3601      	adds	r6, #1
 8005248:	f006 061f 	and.w	r6, r6, #31
 800524c:	2701      	movs	r7, #1
 800524e:	fa07 f606 	lsl.w	r6, r7, r6
 8005252:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005258:	2c00      	cmp	r4, #0
 800525a:	f000 80fe 	beq.w	800545a <HAL_ADCEx_InjectedConfigChannel+0x5a2>
  return __builtin_clz(value);
 800525e:	fab4 f484 	clz	r4, r4
 8005262:	1c66      	adds	r6, r4, #1
 8005264:	f006 061f 	and.w	r6, r6, #31
 8005268:	2403      	movs	r4, #3
 800526a:	f06f 071d 	mvn.w	r7, #29
 800526e:	fb14 7406 	smlabb	r4, r4, r6, r7
 8005272:	0524      	lsls	r4, r4, #20
 8005274:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8005278:	e783      	b.n	8005182 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800527a:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 800527c:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800527e:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005282:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005286:	2f00      	cmp	r7, #0
 8005288:	d052      	beq.n	8005330 <HAL_ADCEx_InjectedConfigChannel+0x478>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 800528e:	b127      	cbz	r7, 800529a <HAL_ADCEx_InjectedConfigChannel+0x3e2>
  return __builtin_clz(value);
 8005290:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005294:	42be      	cmp	r6, r7
 8005296:	f000 80a7 	beq.w	80053e8 <HAL_ADCEx_InjectedConfigChannel+0x530>
 800529a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800529c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800529e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052a6:	f105 0c08 	add.w	ip, r5, #8
 80052aa:	46e0      	mov	r8, ip
  if (value == 0U)
 80052ac:	b127      	cbz	r7, 80052b8 <HAL_ADCEx_InjectedConfigChannel+0x400>
  return __builtin_clz(value);
 80052ae:	fab7 f787 	clz	r7, r7
 80052b2:	42b7      	cmp	r7, r6
 80052b4:	f000 8084 	beq.w	80053c0 <HAL_ADCEx_InjectedConfigChannel+0x508>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052b8:	68ae      	ldr	r6, [r5, #8]
 80052ba:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052bc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c0:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052c4:	f105 070c 	add.w	r7, r5, #12
 80052c8:	46b9      	mov	r9, r7
  if (value == 0U)
 80052ca:	f1b8 0f00 	cmp.w	r8, #0
 80052ce:	d004      	beq.n	80052da <HAL_ADCEx_InjectedConfigChannel+0x422>
  return __builtin_clz(value);
 80052d0:	fab8 f888 	clz	r8, r8
 80052d4:	45b0      	cmp	r8, r6
 80052d6:	f000 809c 	beq.w	8005412 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052da:	68ee      	ldr	r6, [r5, #12]
 80052dc:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052de:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	f43f ae2d 	beq.w	8004f46 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 80052ec:	fab6 f486 	clz	r4, r6
 80052f0:	42ac      	cmp	r4, r5
 80052f2:	f000 80a4 	beq.w	800543e <HAL_ADCEx_InjectedConfigChannel+0x586>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80052f6:	4674      	mov	r4, lr
 80052f8:	e625      	b.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80052fa:	f85c 6004 	ldr.w	r6, [ip, r4]
 80052fe:	4035      	ands	r5, r6
 8005300:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005304:	695c      	ldr	r4, [r3, #20]
 8005306:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800530a:	615c      	str	r4, [r3, #20]
}
 800530c:	e69e      	b.n	800504c <HAL_ADCEx_InjectedConfigChannel+0x194>
      MODIFY_REG(hadc->Instance->CFGR2,
 800530e:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8005312:	691e      	ldr	r6, [r3, #16]
 8005314:	433d      	orrs	r5, r7
 8005316:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 800531a:	4335      	orrs	r5, r6
 800531c:	f045 0502 	orr.w	r5, r5, #2
 8005320:	611d      	str	r5, [r3, #16]
 8005322:	e678      	b.n	8005016 <HAL_ADCEx_InjectedConfigChannel+0x15e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005324:	4628      	mov	r0, r5
 8005326:	e5f1      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005328:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 800532c:	60d8      	str	r0, [r3, #12]
 800532e:	e668      	b.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005330:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005334:	42a6      	cmp	r6, r4
 8005336:	d057      	beq.n	80053e8 <HAL_ADCEx_InjectedConfigChannel+0x530>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005338:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800533a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800533c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005340:	42a6      	cmp	r6, r4
 8005342:	d03b      	beq.n	80053bc <HAL_ADCEx_InjectedConfigChannel+0x504>
 8005344:	68ae      	ldr	r6, [r5, #8]
 8005346:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005348:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800534c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005350:	42a6      	cmp	r6, r4
 8005352:	d05c      	beq.n	800540e <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005354:	68ee      	ldr	r6, [r5, #12]
 8005356:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005358:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800535c:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8005360:	e7c6      	b.n	80052f0 <HAL_ADCEx_InjectedConfigChannel+0x438>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005362:	3c1e      	subs	r4, #30
 8005364:	0524      	lsls	r4, r4, #20
 8005366:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800536a:	e70a      	b.n	8005182 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536c:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 800536e:	f045 0520 	orr.w	r5, r5, #32
 8005372:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8005374:	e646      	b.n	8005004 <HAL_ADCEx_InjectedConfigChannel+0x14c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005376:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800537a:	2d00      	cmp	r5, #0
 800537c:	d071      	beq.n	8005462 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return __builtin_clz(value);
 800537e:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005382:	3501      	adds	r5, #1
 8005384:	06ad      	lsls	r5, r5, #26
 8005386:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800538e:	2e00      	cmp	r6, #0
 8005390:	d065      	beq.n	800545e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
  return __builtin_clz(value);
 8005392:	fab6 f686 	clz	r6, r6
 8005396:	3601      	adds	r6, #1
 8005398:	f006 061f 	and.w	r6, r6, #31
 800539c:	2701      	movs	r7, #1
 800539e:	fa07 f606 	lsl.w	r6, r7, r6
 80053a2:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d053      	beq.n	8005454 <HAL_ADCEx_InjectedConfigChannel+0x59c>
  return __builtin_clz(value);
 80053ac:	fab4 f484 	clz	r4, r4
 80053b0:	3401      	adds	r4, #1
 80053b2:	f004 041f 	and.w	r4, r4, #31
 80053b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80053ba:	e6e1      	b.n	8005180 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
 80053bc:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 80053c0:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80053c2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80053c6:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053c8:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053cc:	68ac      	ldr	r4, [r5, #8]
 80053ce:	68ae      	ldr	r6, [r5, #8]
 80053d0:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053d4:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053d6:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053da:	4674      	mov	r4, lr
 80053dc:	2f00      	cmp	r7, #0
 80053de:	f47f af6f 	bne.w	80052c0 <HAL_ADCEx_InjectedConfigChannel+0x408>
 80053e2:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80053e6:	e7b3      	b.n	8005350 <HAL_ADCEx_InjectedConfigChannel+0x498>
  MODIFY_REG(*preg,
 80053e8:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80053ea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80053ee:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053f0:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053f4:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80053f6:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80053f8:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053fc:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005400:	4674      	mov	r4, lr
 8005402:	2f00      	cmp	r7, #0
 8005404:	f47f af4d 	bne.w	80052a2 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8005408:	f3ce 6484 	ubfx	r4, lr, #26, #5
 800540c:	e798      	b.n	8005340 <HAL_ADCEx_InjectedConfigChannel+0x488>
 800540e:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8005412:	f8dc 4000 	ldr.w	r4, [ip]
 8005416:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800541a:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800541e:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005422:	68ec      	ldr	r4, [r5, #12]
 8005424:	68ed      	ldr	r5, [r5, #12]
 8005426:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800542a:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800542c:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005430:	4674      	mov	r4, lr
 8005432:	2e00      	cmp	r6, #0
 8005434:	f47f af55 	bne.w	80052e2 <HAL_ADCEx_InjectedConfigChannel+0x42a>
 8005438:	f3ce 6484 	ubfx	r4, lr, #26, #5
 800543c:	e758      	b.n	80052f0 <HAL_ADCEx_InjectedConfigChannel+0x438>
  MODIFY_REG(*preg,
 800543e:	683c      	ldr	r4, [r7, #0]
 8005440:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005444:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005446:	680c      	ldr	r4, [r1, #0]
}
 8005448:	e57d      	b.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 800544a:	2602      	movs	r6, #2
 800544c:	e701      	b.n	8005252 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 800544e:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8005452:	e6f1      	b.n	8005238 <HAL_ADCEx_InjectedConfigChannel+0x380>
 8005454:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8005458:	e693      	b.n	8005182 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 800545a:	4c03      	ldr	r4, [pc, #12]	@ (8005468 <HAL_ADCEx_InjectedConfigChannel+0x5b0>)
 800545c:	e691      	b.n	8005182 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 800545e:	2602      	movs	r6, #2
 8005460:	e79f      	b.n	80053a2 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8005462:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8005466:	e790      	b.n	800538a <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 8005468:	fe500000 	.word	0xfe500000

0800546c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800546c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800546e:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005472:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005474:	2a01      	cmp	r2, #1
{
 8005476:	b09c      	sub	sp, #112	@ 0x70
  __HAL_LOCK(hadc);
 8005478:	d042      	beq.n	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x94>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800547a:	6804      	ldr	r4, [r0, #0]
 800547c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800547e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005480:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005482:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005486:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8005488:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800548c:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800548e:	d008      	beq.n	80054a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005490:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005492:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005496:	f041 0120 	orr.w	r1, r1, #32
 800549a:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800549c:	b01c      	add	sp, #112	@ 0x70
 800549e:	bcf0      	pop	{r4, r5, r6, r7}
 80054a0:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054a2:	4a23      	ldr	r2, [pc, #140]	@ (8005530 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80054a4:	6890      	ldr	r0, [r2, #8]
 80054a6:	0740      	lsls	r0, r0, #29
 80054a8:	d50b      	bpl.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80054aa:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054ae:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80054b2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80054bc:	b01c      	add	sp, #112	@ 0x70
 80054be:	bcf0      	pop	{r4, r5, r6, r7}
 80054c0:	4770      	bx	lr
 80054c2:	68a0      	ldr	r0, [r4, #8]
 80054c4:	0746      	lsls	r6, r0, #29
 80054c6:	d4f1      	bmi.n	80054ac <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054c8:	b1f5      	cbz	r5, 8005508 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80054ca:	4e1a      	ldr	r6, [pc, #104]	@ (8005534 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80054cc:	684f      	ldr	r7, [r1, #4]
 80054ce:	68b0      	ldr	r0, [r6, #8]
 80054d0:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80054d4:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80054d8:	4338      	orrs	r0, r7
 80054da:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80054de:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054e0:	68a0      	ldr	r0, [r4, #8]
 80054e2:	6892      	ldr	r2, [r2, #8]
 80054e4:	07c0      	lsls	r0, r0, #31
 80054e6:	d420      	bmi.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80054e8:	07d7      	lsls	r7, r2, #31
 80054ea:	d41e      	bmi.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        MODIFY_REG(tmpADC_Common->CCR,
 80054ec:	68b0      	ldr	r0, [r6, #8]
 80054ee:	688a      	ldr	r2, [r1, #8]
 80054f0:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 80054f4:	432a      	orrs	r2, r5
 80054f6:	f021 010f 	bic.w	r1, r1, #15
 80054fa:	430a      	orrs	r2, r1
 80054fc:	60b2      	str	r2, [r6, #8]
 80054fe:	e014      	b.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 8005500:	2002      	movs	r0, #2
}
 8005502:	b01c      	add	sp, #112	@ 0x70
 8005504:	bcf0      	pop	{r4, r5, r6, r7}
 8005506:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005508:	480a      	ldr	r0, [pc, #40]	@ (8005534 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800550a:	6881      	ldr	r1, [r0, #8]
 800550c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005510:	6081      	str	r1, [r0, #8]
 8005512:	68a1      	ldr	r1, [r4, #8]
 8005514:	6892      	ldr	r2, [r2, #8]
 8005516:	07cd      	lsls	r5, r1, #31
 8005518:	d407      	bmi.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 800551a:	07d4      	lsls	r4, r2, #31
 800551c:	d405      	bmi.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800551e:	6882      	ldr	r2, [r0, #8]
 8005520:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8005524:	f022 020f 	bic.w	r2, r2, #15
 8005528:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800552a:	2000      	movs	r0, #0
 800552c:	e7c3      	b.n	80054b6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800552e:	bf00      	nop
 8005530:	50000100 	.word	0x50000100
 8005534:	50000300 	.word	0x50000300

08005538 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005538:	b530      	push	{r4, r5, lr}
 800553a:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800553c:	2300      	movs	r3, #0
 800553e:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005540:	2800      	cmp	r0, #0
 8005542:	d051      	beq.n	80055e8 <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005544:	6802      	ldr	r2, [r0, #0]
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	4604      	mov	r4, r0
 800554c:	db4c      	blt.n	80055e8 <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800554e:	7f43      	ldrb	r3, [r0, #29]
 8005550:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8005554:	2b00      	cmp	r3, #0
 8005556:	d073      	beq.n	8005640 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8005558:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 800555c:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800555e:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8005560:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8005562:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8005564:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005566:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8005568:	430b      	orrs	r3, r1
    tmp_csr = (  hcomp->Init.InputMinus
 800556a:	6921      	ldr	r1, [r4, #16]
 800556c:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 800556e:	493c      	ldr	r1, [pc, #240]	@ (8005660 <HAL_COMP_Init+0x128>)
 8005570:	4001      	ands	r1, r0
 8005572:	430b      	orrs	r3, r1
 8005574:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005576:	6813      	ldr	r3, [r2, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	d501      	bpl.n	8005580 <HAL_COMP_Init+0x48>
 800557c:	022d      	lsls	r5, r5, #8
 800557e:	d549      	bpl.n	8005614 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005580:	4b38      	ldr	r3, [pc, #224]	@ (8005664 <HAL_COMP_Init+0x12c>)
 8005582:	429a      	cmp	r2, r3
 8005584:	d062      	beq.n	800564c <HAL_COMP_Init+0x114>
 8005586:	4b38      	ldr	r3, [pc, #224]	@ (8005668 <HAL_COMP_Init+0x130>)
 8005588:	429a      	cmp	r2, r3
 800558a:	d064      	beq.n	8005656 <HAL_COMP_Init+0x11e>
 800558c:	3304      	adds	r3, #4
 800558e:	429a      	cmp	r2, r3
 8005590:	bf15      	itete	ne
 8005592:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 8005596:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 800559a:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 800559e:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80055a2:	69a3      	ldr	r3, [r4, #24]
 80055a4:	0798      	lsls	r0, r3, #30
 80055a6:	d022      	beq.n	80055ee <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80055a8:	4d30      	ldr	r5, [pc, #192]	@ (800566c <HAL_COMP_Init+0x134>)
 80055aa:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80055ac:	f013 0f10 	tst.w	r3, #16
 80055b0:	bf14      	ite	ne
 80055b2:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80055b4:	4010      	andeq	r0, r2
 80055b6:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80055b8:	4d2c      	ldr	r5, [pc, #176]	@ (800566c <HAL_COMP_Init+0x134>)
 80055ba:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80055bc:	f013 0f20 	tst.w	r3, #32
 80055c0:	bf14      	ite	ne
 80055c2:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80055c4:	4010      	andeq	r0, r2
 80055c6:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80055c8:	4828      	ldr	r0, [pc, #160]	@ (800566c <HAL_COMP_Init+0x134>)
 80055ca:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80055cc:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80055ce:	f013 0f02 	tst.w	r3, #2
 80055d2:	bf14      	ite	ne
 80055d4:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80055d6:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80055d8:	07db      	lsls	r3, r3, #31
 80055da:	6045      	str	r5, [r0, #4]
 80055dc:	d515      	bpl.n	800560a <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <HAL_COMP_Init+0x134>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4311      	orrs	r1, r2
 80055e4:	6019      	str	r1, [r3, #0]
}
 80055e6:	e009      	b.n	80055fc <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 80055e8:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 80055ea:	b003      	add	sp, #12
 80055ec:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80055ee:	4b1f      	ldr	r3, [pc, #124]	@ (800566c <HAL_COMP_Init+0x134>)
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	4011      	ands	r1, r2
 80055f4:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80055f6:	6819      	ldr	r1, [r3, #0]
 80055f8:	400a      	ands	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80055fc:	7f63      	ldrb	r3, [r4, #29]
 80055fe:	b90b      	cbnz	r3, 8005604 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 8005600:	2301      	movs	r3, #1
 8005602:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2000      	movs	r0, #0
}
 8005606:	b003      	add	sp, #12
 8005608:	bd30      	pop	{r4, r5, pc}
 800560a:	4918      	ldr	r1, [pc, #96]	@ (800566c <HAL_COMP_Init+0x134>)
 800560c:	680b      	ldr	r3, [r1, #0]
 800560e:	4013      	ands	r3, r2
 8005610:	600b      	str	r3, [r1, #0]
}
 8005612:	e7f3      	b.n	80055fc <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005614:	4b16      	ldr	r3, [pc, #88]	@ (8005670 <HAL_COMP_Init+0x138>)
 8005616:	4917      	ldr	r1, [pc, #92]	@ (8005674 <HAL_COMP_Init+0x13c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	fba1 1303 	umull	r1, r3, r1, r3
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	3301      	adds	r3, #1
 8005624:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0a6      	beq.n	8005580 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8005632:	9b01      	ldr	r3, [sp, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8005638:	9b01      	ldr	r3, [sp, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f9      	bne.n	8005632 <HAL_COMP_Init+0xfa>
 800563e:	e79f      	b.n	8005580 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8005640:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8005642:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8005644:	f7fe fcc0 	bl	8003fc8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	e785      	b.n	8005558 <HAL_COMP_Init+0x20>
 800564c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005650:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005654:	e7a5      	b.n	80055a2 <HAL_COMP_Init+0x6a>
 8005656:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800565a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800565e:	e7a0      	b.n	80055a2 <HAL_COMP_Init+0x6a>
 8005660:	ff007e0f 	.word	0xff007e0f
 8005664:	40010200 	.word	0x40010200
 8005668:	40010204 	.word	0x40010204
 800566c:	40010400 	.word	0x40010400
 8005670:	20000500 	.word	0x20000500
 8005674:	053e2d63 	.word	0x053e2d63

08005678 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005678:	b1b0      	cbz	r0, 80056a8 <HAL_CORDIC_Init+0x30>
{
 800567a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800567c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005680:	4604      	mov	r4, r0
 8005682:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005686:	b153      	cbz	r3, 800569e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005688:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800568a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800568c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800568e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8005692:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8005696:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800569a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800569c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800569e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80056a2:	f7fe fd05 	bl	80040b0 <HAL_CORDIC_MspInit>
 80056a6:	e7ef      	b.n	8005688 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
}
 80056aa:	4770      	bx	lr

080056ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056ac:	4907      	ldr	r1, [pc, #28]	@ (80056cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80056ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056b2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056bc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056be:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80056c6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <HAL_NVIC_SetPriority+0x70>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056da:	f1c3 0e07 	rsb	lr, r3, #7
 80056de:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056e2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056e6:	bf28      	it	cs
 80056e8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ec:	f1bc 0f06 	cmp.w	ip, #6
 80056f0:	d91c      	bls.n	800572c <HAL_NVIC_SetPriority+0x5c>
 80056f2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295
 80056fa:	fa03 f30c 	lsl.w	r3, r3, ip
 80056fe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	fa03 f30e 	lsl.w	r3, r3, lr
 800570a:	ea21 0303 	bic.w	r3, r1, r3
 800570e:	fa03 f30c 	lsl.w	r3, r3, ip
 8005712:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005714:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8005716:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005718:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800571a:	db0a      	blt.n	8005732 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800571c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005720:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005724:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005728:	f85d fb04 	ldr.w	pc, [sp], #4
 800572c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800572e:	4694      	mov	ip, r2
 8005730:	e7e7      	b.n	8005702 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005732:	4a04      	ldr	r2, [pc, #16]	@ (8005744 <HAL_NVIC_SetPriority+0x74>)
 8005734:	f000 000f 	and.w	r0, r0, #15
 8005738:	4402      	add	r2, r0
 800573a:	7613      	strb	r3, [r2, #24]
 800573c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005740:	e000ed00 	.word	0xe000ed00
 8005744:	e000ecfc 	.word	0xe000ecfc

08005748 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005748:	2800      	cmp	r0, #0
 800574a:	db07      	blt.n	800575c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574c:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <HAL_NVIC_EnableIRQ+0x18>)
 800574e:	0941      	lsrs	r1, r0, #5
 8005750:	2301      	movs	r3, #1
 8005752:	f000 001f 	and.w	r0, r0, #31
 8005756:	4083      	lsls	r3, r0
 8005758:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e100 	.word	0xe000e100

08005764 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005764:	3801      	subs	r0, #1
 8005766:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800576a:	d301      	bcc.n	8005770 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800576c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800576e:	4770      	bx	lr
{
 8005770:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005772:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005776:	4c07      	ldr	r4, [pc, #28]	@ (8005794 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005778:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800577a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800577e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005782:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005784:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005786:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005788:	619a      	str	r2, [r3, #24]
}
 800578a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800578e:	6119      	str	r1, [r3, #16]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <HAL_SYSTICK_IRQHandler>:
{
 800579c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800579e:	f7ff fffb 	bl	8005798 <HAL_SYSTICK_Callback>
}
 80057a2:	bd08      	pop	{r3, pc}

080057a4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80057a4:	b188      	cbz	r0, 80057ca <HAL_DAC_Init+0x26>
{
 80057a6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80057a8:	7903      	ldrb	r3, [r0, #4]
 80057aa:	4604      	mov	r4, r0
 80057ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057b0:	b13b      	cbz	r3, 80057c2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80057b2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80057b4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80057b6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80057b8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80057ba:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80057bc:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80057be:	4618      	mov	r0, r3
}
 80057c0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80057c2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80057c4:	f7fe fc8c 	bl	80040e0 <HAL_DAC_MspInit>
 80057c8:	e7f3      	b.n	80057b2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80057ca:	2001      	movs	r0, #1
}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80057d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057d4:	7943      	ldrb	r3, [r0, #5]
 80057d6:	2b01      	cmp	r3, #1
{
 80057d8:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80057da:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 80057dc:	f000 80d2 	beq.w	8005984 <HAL_DAC_ConfigChannel+0x1b4>
 80057e0:	2301      	movs	r3, #1
 80057e2:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057e4:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 80057e6:	f04f 0302 	mov.w	r3, #2
 80057ea:	4688      	mov	r8, r1
 80057ec:	4616      	mov	r6, r2
 80057ee:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057f0:	d07f      	beq.n	80058f2 <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80057f2:	682f      	ldr	r7, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80057f4:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80057f8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d109      	bne.n	8005814 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8005800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005802:	f8d8 3020 	ldr.w	r3, [r8, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005806:	211f      	movs	r1, #31
 8005808:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800580a:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800580c:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005810:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005812:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005814:	f8d8 2018 	ldr.w	r2, [r8, #24]
  tmpreg1 = hdac->Instance->MCR;
 8005818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800581a:	f8d8 e014 	ldr.w	lr, [r8, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800581e:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005820:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005822:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005826:	d060      	beq.n	80058ea <HAL_DAC_ConfigChannel+0x11a>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005828:	2a02      	cmp	r2, #2
 800582a:	d060      	beq.n	80058ee <HAL_DAC_ConfigChannel+0x11e>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800582c:	fabe f28e 	clz	r2, lr
 8005830:	0952      	lsrs	r2, r2, #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005832:	f898 4005 	ldrb.w	r4, [r8, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005836:	f898 c004 	ldrb.w	ip, [r8, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800583a:	f1a4 0401 	sub.w	r4, r4, #1
 800583e:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005842:	f1ac 0c01 	sub.w	ip, ip, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005846:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005848:	fabc fc8c 	clz	ip, ip
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800584c:	0264      	lsls	r4, r4, #9
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800584e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005852:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 8005856:	ea44 040e 	orr.w	r4, r4, lr
 800585a:	4304      	orrs	r4, r0
 800585c:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800585e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005862:	40b2      	lsls	r2, r6
 8005864:	430a      	orrs	r2, r1
 8005866:	ea23 0902 	bic.w	r9, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800586a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800586e:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005870:	ea29 0903 	bic.w	r9, r9, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005874:	f8d8 3000 	ldr.w	r3, [r8]
 8005878:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800587a:	f429 4940 	bic.w	r9, r9, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800587e:	d078      	beq.n	8005972 <HAL_DAC_ConfigChannel+0x1a2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005880:	ea49 0903 	orr.w	r9, r9, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005884:	40b4      	lsls	r4, r6
 8005886:	ea44 0409 	orr.w	r4, r4, r9
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800588a:	63fc      	str	r4, [r7, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005892:	40b2      	lsls	r2, r6
 8005894:	ea23 0302 	bic.w	r3, r3, r2
 8005898:	603b      	str	r3, [r7, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800589a:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
  tmpreg1 = hdac->Instance->CR;
 800589e:	6838      	ldr	r0, [r7, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058a0:	f640 71fe 	movw	r1, #4094	@ 0xffe
 80058a4:	40b1      	lsls	r1, r6
 80058a6:	ea20 0001 	bic.w	r0, r0, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058aa:	fa02 f106 	lsl.w	r1, r2, r6
 80058ae:	4301      	orrs	r1, r0
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80058b0:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 80058b2:	6039      	str	r1, [r7, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80058b4:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80058b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058bc:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80058be:	20c0      	movs	r0, #192	@ 0xc0
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	40b0      	lsls	r0, r6
 80058c4:	ea22 0200 	bic.w	r2, r2, r0
 80058c8:	603a      	str	r2, [r7, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80058ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058cc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80058d0:	40b1      	lsls	r1, r6
 80058d2:	ea22 0201 	bic.w	r2, r2, r1
 80058d6:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80058d8:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80058da:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 80058dc:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80058de:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Return function status */
  return HAL_OK;
 80058e0:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80058e2:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 80058e4:	7169      	strb	r1, [r5, #5]
}
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    connectOnChip = 0x00000000UL;
 80058ea:	2200      	movs	r2, #0
 80058ec:	e7a1      	b.n	8005832 <HAL_DAC_ConfigChannel+0x62>
    connectOnChip = DAC_MCR_MODE1_0;
 80058ee:	2201      	movs	r2, #1
 80058f0:	e79f      	b.n	8005832 <HAL_DAC_ConfigChannel+0x62>
    tickstart = HAL_GetTick();
 80058f2:	f7fe ff79 	bl	80047e8 <HAL_GetTick>
 80058f6:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 80058f8:	b12e      	cbz	r6, 8005906 <HAL_DAC_ConfigChannel+0x136>
 80058fa:	e015      	b.n	8005928 <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058fc:	f7fe ff74 	bl	80047e8 <HAL_GetTick>
 8005900:	1b00      	subs	r0, r0, r4
 8005902:	2801      	cmp	r0, #1
 8005904:	d841      	bhi.n	800598a <HAL_DAC_ConfigChannel+0x1ba>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	d4f6      	bmi.n	80058fc <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 800590e:	2001      	movs	r0, #1
 8005910:	f7fe ff70 	bl	80047f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005914:	682f      	ldr	r7, [r5, #0]
 8005916:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800591a:	643b      	str	r3, [r7, #64]	@ 0x40
 800591c:	e00f      	b.n	800593e <HAL_DAC_ConfigChannel+0x16e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800591e:	f7fe ff63 	bl	80047e8 <HAL_GetTick>
 8005922:	1b00      	subs	r0, r0, r4
 8005924:	2801      	cmp	r0, #1
 8005926:	d830      	bhi.n	800598a <HAL_DAC_ConfigChannel+0x1ba>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592c:	2b00      	cmp	r3, #0
 800592e:	dbf6      	blt.n	800591e <HAL_DAC_ConfigChannel+0x14e>
      HAL_Delay(1U);
 8005930:	2001      	movs	r0, #1
 8005932:	f7fe ff5f 	bl	80047f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005936:	682f      	ldr	r7, [r5, #0]
 8005938:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800593c:	647b      	str	r3, [r7, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800593e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005940:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005944:	f8d8 0008 	ldr.w	r0, [r8, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005948:	f006 0610 	and.w	r6, r6, #16
 800594c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005950:	40b1      	lsls	r1, r6
 8005952:	40b2      	lsls	r2, r6
 8005954:	ea23 0301 	bic.w	r3, r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	64bb      	str	r3, [r7, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800595c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595e:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8005962:	21ff      	movs	r1, #255	@ 0xff
 8005964:	40b1      	lsls	r1, r6
 8005966:	40b2      	lsls	r2, r6
 8005968:	ea23 0301 	bic.w	r3, r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005970:	e742      	b.n	80057f8 <HAL_DAC_ConfigChannel+0x28>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005972:	f000 fe29 	bl	80065c8 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <HAL_DAC_ConfigChannel+0x1dc>)
 8005978:	4298      	cmp	r0, r3
 800597a:	d90e      	bls.n	800599a <HAL_DAC_ConfigChannel+0x1ca>
  hdac->Instance->MCR = tmpreg1;
 800597c:	682f      	ldr	r7, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800597e:	f449 4900 	orr.w	r9, r9, #32768	@ 0x8000
 8005982:	e77f      	b.n	8005884 <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 8005984:	2002      	movs	r0, #2
}
 8005986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800598a:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800598c:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800598e:	f043 0308 	orr.w	r3, r3, #8
 8005992:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8005994:	2003      	movs	r0, #3
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005996:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 8005998:	e7a5      	b.n	80058e6 <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800599a:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_DAC_ConfigChannel+0x1e0>)
  hdac->Instance->MCR = tmpreg1;
 800599c:	682f      	ldr	r7, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800599e:	4298      	cmp	r0, r3
 80059a0:	f67f af70 	bls.w	8005884 <HAL_DAC_ConfigChannel+0xb4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80059a4:	f449 4980 	orr.w	r9, r9, #16384	@ 0x4000
 80059a8:	e76c      	b.n	8005884 <HAL_DAC_ConfigChannel+0xb4>
 80059aa:	bf00      	nop
 80059ac:	09896800 	.word	0x09896800
 80059b0:	04c4b400 	.word	0x04c4b400

080059b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d076      	beq.n	8005aa6 <HAL_DMA_Init+0xf2>
{
 80059b8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059ba:	4a3c      	ldr	r2, [pc, #240]	@ (8005aac <HAL_DMA_Init+0xf8>)
 80059bc:	6804      	ldr	r4, [r0, #0]
 80059be:	4294      	cmp	r4, r2
 80059c0:	4603      	mov	r3, r0
 80059c2:	d95c      	bls.n	8005a7e <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059c4:	493a      	ldr	r1, [pc, #232]	@ (8005ab0 <HAL_DMA_Init+0xfc>)
 80059c6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ab4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 80059c8:	483b      	ldr	r0, [pc, #236]	@ (8005ab8 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059ca:	4421      	add	r1, r4
 80059cc:	fba2 2101 	umull	r2, r1, r2, r1
 80059d0:	0909      	lsrs	r1, r1, #4
 80059d2:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059d4:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059d6:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80059d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80059dc:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059de:	4e35      	ldr	r6, [pc, #212]	@ (8005ab4 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059e0:	4f36      	ldr	r7, [pc, #216]	@ (8005abc <HAL_DMA_Init+0x108>)
 80059e2:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e6:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80059e8:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ea:	4302      	orrs	r2, r0
 80059ec:	6958      	ldr	r0, [r3, #20]
 80059ee:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f0:	6998      	ldr	r0, [r3, #24]
 80059f2:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 80059f4:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059f6:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fa:	69d8      	ldr	r0, [r3, #28]
 80059fc:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059fe:	b2e0      	uxtb	r0, r4
 8005a00:	3808      	subs	r0, #8
 8005a02:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a06:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a08:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a0c:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8005a0e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8005a12:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a14:	4e25      	ldr	r6, [pc, #148]	@ (8005aac <HAL_DMA_Init+0xf8>)
 8005a16:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac0 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a18:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a1c:	42b4      	cmp	r4, r6
 8005a1e:	bf98      	it	ls
 8005a20:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a22:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a26:	2401      	movs	r4, #1
 8005a28:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a2c:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a2e:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a32:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a36:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a38:	649e      	str	r6, [r3, #72]	@ 0x48
 8005a3a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a3e:	d027      	beq.n	8005a90 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a40:	685e      	ldr	r6, [r3, #4]
 8005a42:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a44:	3e01      	subs	r6, #1
 8005a46:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a48:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a4c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a50:	d824      	bhi.n	8005a9c <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a54:	481c      	ldr	r0, [pc, #112]	@ (8005ac8 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a56:	442a      	add	r2, r5
 8005a58:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a5a:	3d01      	subs	r5, #1
 8005a5c:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a5e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a60:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a64:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a66:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a68:	4a18      	ldr	r2, [pc, #96]	@ (8005acc <HAL_DMA_Init+0x118>)
 8005a6a:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005a6e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a70:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005a72:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005a76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005a7a:	bcf0      	pop	{r4, r5, r6, r7}
 8005a7c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a7e:	4914      	ldr	r1, [pc, #80]	@ (8005ad0 <HAL_DMA_Init+0x11c>)
 8005a80:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8005a82:	4814      	ldr	r0, [pc, #80]	@ (8005ad4 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a84:	4421      	add	r1, r4
 8005a86:	fba2 2101 	umull	r2, r1, r2, r1
 8005a8a:	0909      	lsrs	r1, r1, #4
 8005a8c:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005a8e:	e7a1      	b.n	80059d4 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a90:	2400      	movs	r4, #0
 8005a92:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a94:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a98:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aa4:	e7e2      	b.n	8005a6c <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8005aa6:	2001      	movs	r0, #1
}
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40020407 	.word	0x40020407
 8005ab0:	bffdfbf8 	.word	0xbffdfbf8
 8005ab4:	cccccccd 	.word	0xcccccccd
 8005ab8:	40020400 	.word	0x40020400
 8005abc:	40020800 	.word	0x40020800
 8005ac0:	40020820 	.word	0x40020820
 8005ac4:	1000823f 	.word	0x1000823f
 8005ac8:	40020940 	.word	0x40020940
 8005acc:	40020900 	.word	0x40020900
 8005ad0:	bffdfff8 	.word	0xbffdfff8
 8005ad4:	40020000 	.word	0x40020000

08005ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005adc:	680c      	ldr	r4, [r1, #0]
{
 8005ade:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ae0:	2c00      	cmp	r4, #0
 8005ae2:	f000 8089 	beq.w	8005bf8 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8005ae6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ae8:	f04f 0b01 	mov.w	fp, #1
 8005aec:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8005af0:	ea1e 0a04 	ands.w	sl, lr, r4
 8005af4:	d07b      	beq.n	8005bee <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005af6:	684d      	ldr	r5, [r1, #4]
 8005af8:	f005 0203 	and.w	r2, r5, #3
 8005afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b00:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b02:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b06:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b0a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b0e:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b12:	d974      	bls.n	8005bfe <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b14:	2a03      	cmp	r2, #3
 8005b16:	f040 80b0 	bne.w	8005c7a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b1a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8005b1e:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b22:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b26:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b28:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005b2c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b2e:	d05e      	beq.n	8005bee <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b30:	4f66      	ldr	r7, [pc, #408]	@ (8005ccc <HAL_GPIO_Init+0x1f4>)
 8005b32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	663a      	str	r2, [r7, #96]	@ 0x60
 8005b3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b3c:	f002 0201 	and.w	r2, r2, #1
 8005b40:	9203      	str	r2, [sp, #12]
 8005b42:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b44:	f023 0203 	bic.w	r2, r3, #3
 8005b48:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005b4c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b50:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005b54:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005b5a:	260f      	movs	r6, #15
 8005b5c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b60:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b64:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b68:	d01d      	beq.n	8005ba6 <HAL_GPIO_Init+0xce>
 8005b6a:	4e59      	ldr	r6, [pc, #356]	@ (8005cd0 <HAL_GPIO_Init+0x1f8>)
 8005b6c:	42b0      	cmp	r0, r6
 8005b6e:	f000 8097 	beq.w	8005ca0 <HAL_GPIO_Init+0x1c8>
 8005b72:	4e58      	ldr	r6, [pc, #352]	@ (8005cd4 <HAL_GPIO_Init+0x1fc>)
 8005b74:	42b0      	cmp	r0, r6
 8005b76:	f000 809a 	beq.w	8005cae <HAL_GPIO_Init+0x1d6>
 8005b7a:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8005cdc <HAL_GPIO_Init+0x204>
 8005b7e:	4570      	cmp	r0, lr
 8005b80:	f000 8087 	beq.w	8005c92 <HAL_GPIO_Init+0x1ba>
 8005b84:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8005ce0 <HAL_GPIO_Init+0x208>
 8005b88:	4570      	cmp	r0, lr
 8005b8a:	f000 8097 	beq.w	8005cbc <HAL_GPIO_Init+0x1e4>
 8005b8e:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8005ce4 <HAL_GPIO_Init+0x20c>
 8005b92:	4570      	cmp	r0, lr
 8005b94:	bf0c      	ite	eq
 8005b96:	f04f 0e05 	moveq.w	lr, #5
 8005b9a:	f04f 0e06 	movne.w	lr, #6
 8005b9e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005ba2:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ba6:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ba8:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd8 <HAL_GPIO_Init+0x200>)
 8005baa:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bac:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8005bae:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005bb2:	4e49      	ldr	r6, [pc, #292]	@ (8005cd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005bb4:	bf54      	ite	pl
 8005bb6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005bb8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8005bbc:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8005bbe:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bc0:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005bc2:	4e45      	ldr	r6, [pc, #276]	@ (8005cd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005bc4:	bf54      	ite	pl
 8005bc6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005bc8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8005bcc:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8005bce:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bd0:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005bd2:	4e41      	ldr	r6, [pc, #260]	@ (8005cd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005bd4:	bf54      	ite	pl
 8005bd6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005bd8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8005bdc:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bde:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005be0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005be2:	4d3d      	ldr	r5, [pc, #244]	@ (8005cd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8005be4:	bf54      	ite	pl
 8005be6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8005be8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8005bec:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8005bee:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bf0:	fa34 f203 	lsrs.w	r2, r4, r3
 8005bf4:	f47f af7a 	bne.w	8005aec <HAL_GPIO_Init+0x14>
  }
}
 8005bf8:	b005      	add	sp, #20
 8005bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005bfe:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c02:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c04:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c08:	fa06 f80c 	lsl.w	r8, r6, ip
 8005c0c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005c10:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c14:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c18:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c1a:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1e:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8005c22:	fa0e fe03 	lsl.w	lr, lr, r3
 8005c26:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005c2a:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005c2e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c32:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c36:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c3a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c3e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005c40:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c44:	f47f af69 	bne.w	8005b1a <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c48:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005c4a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c4e:	f003 0e07 	and.w	lr, r3, #7
 8005c52:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005c56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c5a:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8005c5e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c62:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c64:	260f      	movs	r6, #15
 8005c66:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c6a:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c6c:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c70:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005c74:	f8c8 e020 	str.w	lr, [r8, #32]
 8005c78:	e74f      	b.n	8005b1a <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8005c7a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c7e:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c80:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c84:	fa06 fe0c 	lsl.w	lr, r6, ip
 8005c88:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8005c8c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c90:	e743      	b.n	8005b1a <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c92:	f04f 0e03 	mov.w	lr, #3
 8005c96:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005c9a:	ea47 070c 	orr.w	r7, r7, ip
 8005c9e:	e782      	b.n	8005ba6 <HAL_GPIO_Init+0xce>
 8005ca0:	f04f 0e01 	mov.w	lr, #1
 8005ca4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005ca8:	ea47 070c 	orr.w	r7, r7, ip
 8005cac:	e77b      	b.n	8005ba6 <HAL_GPIO_Init+0xce>
 8005cae:	f04f 0e02 	mov.w	lr, #2
 8005cb2:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005cb6:	ea47 070c 	orr.w	r7, r7, ip
 8005cba:	e774      	b.n	8005ba6 <HAL_GPIO_Init+0xce>
 8005cbc:	f04f 0e04 	mov.w	lr, #4
 8005cc0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005cc4:	ea47 070c 	orr.w	r7, r7, ip
 8005cc8:	e76d      	b.n	8005ba6 <HAL_GPIO_Init+0xce>
 8005cca:	bf00      	nop
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	48000400 	.word	0x48000400
 8005cd4:	48000800 	.word	0x48000800
 8005cd8:	40010400 	.word	0x40010400
 8005cdc:	48000c00 	.word	0x48000c00
 8005ce0:	48001000 	.word	0x48001000
 8005ce4:	48001400 	.word	0x48001400

08005ce8 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d06f      	beq.n	8005dcc <HAL_OPAMP_Init+0xe4>
{
 8005cec:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005cee:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8005cf2:	2b05      	cmp	r3, #5
{
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005cf8:	d056      	beq.n	8005da8 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005cfa:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d052      	beq.n	8005da8 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d02:	4b33      	ldr	r3, [pc, #204]	@ (8005dd0 <HAL_OPAMP_Init+0xe8>)
 8005d04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	661a      	str	r2, [r3, #96]	@ 0x60
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005d16:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8005d1a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005d1e:	b90b      	cbnz	r3, 8005d24 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005d20:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7fe f9f3 	bl	8004110 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005d2a:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005d2c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005d2e:	f023 0220 	bic.w	r2, r3, #32
 8005d32:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005d38:	d039      	beq.n	8005dae <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005d3a:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005d3c:	f021 0110 	bic.w	r1, r1, #16
 8005d40:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005d42:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8005d44:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005d46:	432b      	orrs	r3, r5
 8005d48:	4303      	orrs	r3, r0
 8005d4a:	6920      	ldr	r0, [r4, #16]
 8005d4c:	6811      	ldr	r1, [r2, #0]
 8005d4e:	4303      	orrs	r3, r0
 8005d50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005d52:	4303      	orrs	r3, r0
 8005d54:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005d56:	4303      	orrs	r3, r0
 8005d58:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005d5a:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8005d5e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005d60:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005d64:	481b      	ldr	r0, [pc, #108]	@ (8005dd4 <HAL_OPAMP_Init+0xec>)
 8005d66:	4008      	ands	r0, r1
 8005d68:	7d21      	ldrb	r1, [r4, #20]
 8005d6a:	f1a1 0101 	sub.w	r1, r1, #1
 8005d6e:	fab1 f181 	clz	r1, r1
 8005d72:	4303      	orrs	r3, r0
 8005d74:	0949      	lsrs	r1, r1, #5
 8005d76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d7a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005d7c:	6993      	ldr	r3, [r2, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	db09      	blt.n	8005d96 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005d82:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8005d86:	6991      	ldr	r1, [r2, #24]
 8005d88:	4303      	orrs	r3, r0
 8005d8a:	6a20      	ldr	r0, [r4, #32]
 8005d8c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005d90:	4303      	orrs	r3, r0
 8005d92:	430b      	orrs	r3, r1
 8005d94:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005d96:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8005d9a:	b913      	cbnz	r3, 8005da2 <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005da2:	2000      	movs	r0, #0
  }
}
 8005da4:	b003      	add	sp, #12
 8005da6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005da8:	2001      	movs	r0, #1
}
 8005daa:	b003      	add	sp, #12
 8005dac:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005dae:	f021 0110 	bic.w	r1, r1, #16
 8005db2:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005db4:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005db6:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005db8:	4303      	orrs	r3, r0
 8005dba:	6920      	ldr	r0, [r4, #16]
 8005dbc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005dbe:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005dc0:	4303      	orrs	r3, r0
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005dc6:	6811      	ldr	r1, [r2, #0]
 8005dc8:	432b      	orrs	r3, r5
 8005dca:	e7c6      	b.n	8005d5a <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8005dcc:	2001      	movs	r0, #1
}
 8005dce:	4770      	bx	lr
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	e0003e11 	.word	0xe0003e11

08005dd8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dd8:	4a35      	ldr	r2, [pc, #212]	@ (8005eb0 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005dda:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ddc:	b960      	cbnz	r0, 8005df8 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dea:	d01b      	beq.n	8005e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005df4:	2000      	movs	r0, #0
}
 8005df6:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005df8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005dfc:	d006      	beq.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e06:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005e08:	2000      	movs	r0, #0
}
 8005e0a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e14:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e18:	d029      	beq.n	8005e6e <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e1e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e22:	e7f1      	b.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e2c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e2e:	4821      	ldr	r0, [pc, #132]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005e30:	4921      	ldr	r1, [pc, #132]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e3a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e3c:	6803      	ldr	r3, [r0, #0]
 8005e3e:	2032      	movs	r0, #50	@ 0x32
 8005e40:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e44:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e46:	fba1 1303 	umull	r1, r3, r1, r3
 8005e4a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e4c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e4e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e52:	d506      	bpl.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005e54:	e000      	b.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x80>
 8005e56:	b123      	cbz	r3, 8005e62 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005e58:	6951      	ldr	r1, [r2, #20]
 8005e5a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005e5c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e60:	d4f9      	bmi.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e62:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	055b      	lsls	r3, r3, #21
 8005e68:	d5ce      	bpl.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8005e6a:	2003      	movs	r0, #3
 8005e6c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e72:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e76:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e78:	480e      	ldr	r0, [pc, #56]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005e7a:	490f      	ldr	r1, [pc, #60]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e84:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e86:	6803      	ldr	r3, [r0, #0]
 8005e88:	2032      	movs	r0, #50	@ 0x32
 8005e8a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e8e:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e90:	fba1 1303 	umull	r1, r3, r1, r3
 8005e94:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e96:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e98:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e9c:	d5e1      	bpl.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005e9e:	e001      	b.n	8005ea4 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0de      	beq.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005ea4:	6951      	ldr	r1, [r2, #20]
 8005ea6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005ea8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eac:	d5d9      	bpl.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005eae:	e7f7      	b.n	8005ea0 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	20000500 	.word	0x20000500
 8005eb8:	431bde83 	.word	0x431bde83

08005ebc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ebc:	4a02      	ldr	r2, [pc, #8]	@ (8005ec8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005ebe:	6893      	ldr	r3, [r2, #8]
 8005ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ec4:	6093      	str	r3, [r2, #8]
}
 8005ec6:	4770      	bx	lr
 8005ec8:	40007000 	.word	0x40007000

08005ecc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	f000 8239 	beq.w	8006344 <HAL_RCC_OscConfig+0x478>
{
 8005ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed6:	6803      	ldr	r3, [r0, #0]
 8005ed8:	07d9      	lsls	r1, r3, #31
{
 8005eda:	b082      	sub	sp, #8
 8005edc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ede:	d512      	bpl.n	8005f06 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee0:	49a3      	ldr	r1, [pc, #652]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005ee2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ee4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005eea:	2a0c      	cmp	r2, #12
 8005eec:	f000 80d6 	beq.w	800609c <HAL_RCC_OscConfig+0x1d0>
 8005ef0:	2a08      	cmp	r2, #8
 8005ef2:	f040 80d8 	bne.w	80060a6 <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef6:	4a9e      	ldr	r2, [pc, #632]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	0392      	lsls	r2, r2, #14
 8005efc:	d503      	bpl.n	8005f06 <HAL_RCC_OscConfig+0x3a>
 8005efe:	6862      	ldr	r2, [r4, #4]
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	f000 81a4 	beq.w	800624e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f06:	079a      	lsls	r2, r3, #30
 8005f08:	d522      	bpl.n	8005f50 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f0a:	4a99      	ldr	r2, [pc, #612]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f0c:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f0e:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f10:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	f000 80fe 	beq.w	8006116 <HAL_RCC_OscConfig+0x24a>
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	f040 8100 	bne.w	8006120 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f20:	4b93      	ldr	r3, [pc, #588]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	055b      	lsls	r3, r3, #21
 8005f26:	d503      	bpl.n	8005f30 <HAL_RCC_OscConfig+0x64>
 8005f28:	68e3      	ldr	r3, [r4, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 818f 	beq.w	800624e <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f30:	4a8f      	ldr	r2, [pc, #572]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f32:	6920      	ldr	r0, [r4, #16]
 8005f34:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f36:	498f      	ldr	r1, [pc, #572]	@ (8006174 <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f38:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005f3c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005f40:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f42:	6808      	ldr	r0, [r1, #0]
 8005f44:	f7fe fc06 	bl	8004754 <HAL_InitTick>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f040 8180 	bne.w	800624e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	071a      	lsls	r2, r3, #28
 8005f52:	d519      	bpl.n	8005f88 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f54:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f56:	4d86      	ldr	r5, [pc, #536]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80c8 	beq.w	80060ee <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 8005f5e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6a:	f7fe fc3d 	bl	80047e8 <HAL_GetTick>
 8005f6e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f70:	e005      	b.n	8005f7e <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f72:	f7fe fc39 	bl	80047e8 <HAL_GetTick>
 8005f76:	1b80      	subs	r0, r0, r6
 8005f78:	2802      	cmp	r0, #2
 8005f7a:	f200 8118 	bhi.w	80061ae <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005f82:	079b      	lsls	r3, r3, #30
 8005f84:	d5f5      	bpl.n	8005f72 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	075d      	lsls	r5, r3, #29
 8005f8a:	d541      	bpl.n	8006010 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f8c:	4b78      	ldr	r3, [pc, #480]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f90:	00d0      	lsls	r0, r2, #3
 8005f92:	f100 8110 	bmi.w	80061b6 <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f98:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005f9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005fa8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005faa:	4e73      	ldr	r6, [pc, #460]	@ (8006178 <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	05d9      	lsls	r1, r3, #23
 8005fb0:	f140 812f 	bpl.w	8006212 <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	f000 80ff 	beq.w	80061ba <HAL_RCC_OscConfig+0x2ee>
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	f000 8185 	beq.w	80062cc <HAL_RCC_OscConfig+0x400>
 8005fc2:	4e6b      	ldr	r6, [pc, #428]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fc4:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005fd0:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005fd4:	f022 0204 	bic.w	r2, r2, #4
 8005fd8:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 80f3 	bne.w	80061c8 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe2:	f7fe fc01 	bl	80047e8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005fea:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fec:	e005      	b.n	8005ffa <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fee:	f7fe fbfb 	bl	80047e8 <HAL_GetTick>
 8005ff2:	1bc0      	subs	r0, r0, r7
 8005ff4:	4540      	cmp	r0, r8
 8005ff6:	f200 80da 	bhi.w	80061ae <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ffa:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8005ffe:	0799      	lsls	r1, r3, #30
 8006000:	d4f5      	bmi.n	8005fee <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006002:	b125      	cbz	r5, 800600e <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006004:	4a5a      	ldr	r2, [pc, #360]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006006:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800600c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	069a      	lsls	r2, r3, #26
 8006012:	d518      	bpl.n	8006046 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006014:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006016:	4d56      	ldr	r5, [pc, #344]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80e6 	beq.w	80061ea <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 800601e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602a:	f7fe fbdd 	bl	80047e8 <HAL_GetTick>
 800602e:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006030:	e005      	b.n	800603e <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006032:	f7fe fbd9 	bl	80047e8 <HAL_GetTick>
 8006036:	1b80      	subs	r0, r0, r6
 8006038:	2802      	cmp	r0, #2
 800603a:	f200 80b8 	bhi.w	80061ae <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800603e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8006042:	079b      	lsls	r3, r3, #30
 8006044:	d5f5      	bpl.n	8006032 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006046:	69e3      	ldr	r3, [r4, #28]
 8006048:	b323      	cbz	r3, 8006094 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800604a:	4d49      	ldr	r5, [pc, #292]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800604c:	68aa      	ldr	r2, [r5, #8]
 800604e:	f002 020c 	and.w	r2, r2, #12
 8006052:	2a0c      	cmp	r2, #12
 8006054:	f000 8148 	beq.w	80062e8 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006058:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605a:	682b      	ldr	r3, [r5, #0]
 800605c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006060:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006062:	f000 80f6 	beq.w	8006252 <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006066:	68eb      	ldr	r3, [r5, #12]
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800606e:	68eb      	ldr	r3, [r5, #12]
 8006070:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006078:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fe fbb5 	bl	80047e8 <HAL_GetTick>
 800607e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006080:	e005      	b.n	800608e <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006082:	f7fe fbb1 	bl	80047e8 <HAL_GetTick>
 8006086:	1b00      	subs	r0, r0, r4
 8006088:	2802      	cmp	r0, #2
 800608a:	f200 8090 	bhi.w	80061ae <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	019b      	lsls	r3, r3, #6
 8006092:	d4f6      	bmi.n	8006082 <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 8006094:	2000      	movs	r0, #0
}
 8006096:	b002      	add	sp, #8
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800609c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060a0:	2903      	cmp	r1, #3
 80060a2:	f43f af28 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ac:	d055      	beq.n	800615a <HAL_RCC_OscConfig+0x28e>
 80060ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060b2:	f000 80bf 	beq.w	8006234 <HAL_RCC_OscConfig+0x368>
 80060b6:	4d2e      	ldr	r5, [pc, #184]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 80060b8:	682a      	ldr	r2, [r5, #0]
 80060ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	682a      	ldr	r2, [r5, #0]
 80060c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060c6:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d14b      	bne.n	8006164 <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 80060cc:	f7fe fb8c 	bl	80047e8 <HAL_GetTick>
 80060d0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060d2:	e004      	b.n	80060de <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d4:	f7fe fb88 	bl	80047e8 <HAL_GetTick>
 80060d8:	1b80      	subs	r0, r0, r6
 80060da:	2864      	cmp	r0, #100	@ 0x64
 80060dc:	d867      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	0399      	lsls	r1, r3, #14
 80060e2:	d4f7      	bmi.n	80060d4 <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	079a      	lsls	r2, r3, #30
 80060e8:	f57f af32 	bpl.w	8005f50 <HAL_RCC_OscConfig+0x84>
 80060ec:	e70d      	b.n	8005f0a <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 80060ee:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80060fa:	f7fe fb75 	bl	80047e8 <HAL_GetTick>
 80060fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006100:	e004      	b.n	800610c <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006102:	f7fe fb71 	bl	80047e8 <HAL_GetTick>
 8006106:	1b80      	subs	r0, r0, r6
 8006108:	2802      	cmp	r0, #2
 800610a:	d850      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800610c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8006110:	079f      	lsls	r7, r3, #30
 8006112:	d4f6      	bmi.n	8006102 <HAL_RCC_OscConfig+0x236>
 8006114:	e737      	b.n	8005f86 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006116:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800611a:	2a02      	cmp	r2, #2
 800611c:	f43f af00 	beq.w	8005f20 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006120:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8006122:	4d13      	ldr	r5, [pc, #76]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006124:	2b00      	cmp	r3, #0
 8006126:	d032      	beq.n	800618e <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800612e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006130:	f7fe fb5a 	bl	80047e8 <HAL_GetTick>
 8006134:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006136:	e004      	b.n	8006142 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006138:	f7fe fb56 	bl	80047e8 <HAL_GetTick>
 800613c:	1b80      	subs	r0, r0, r6
 800613e:	2802      	cmp	r0, #2
 8006140:	d835      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	055f      	lsls	r7, r3, #21
 8006146:	d5f7      	bpl.n	8006138 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006148:	686b      	ldr	r3, [r5, #4]
 800614a:	6922      	ldr	r2, [r4, #16]
 800614c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006154:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	e6fa      	b.n	8005f50 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800615a:	4a05      	ldr	r2, [pc, #20]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800615c:	6813      	ldr	r3, [r2, #0]
 800615e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006162:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006164:	f7fe fb40 	bl	80047e8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006168:	4e01      	ldr	r6, [pc, #4]	@ (8006170 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800616a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800616c:	e00b      	b.n	8006186 <HAL_RCC_OscConfig+0x2ba>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	20000508 	.word	0x20000508
 8006178:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800617c:	f7fe fb34 	bl	80047e8 <HAL_GetTick>
 8006180:	1b40      	subs	r0, r0, r5
 8006182:	2864      	cmp	r0, #100	@ 0x64
 8006184:	d813      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006186:	6833      	ldr	r3, [r6, #0]
 8006188:	039f      	lsls	r7, r3, #14
 800618a:	d5f7      	bpl.n	800617c <HAL_RCC_OscConfig+0x2b0>
 800618c:	e7aa      	b.n	80060e4 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006194:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006196:	f7fe fb27 	bl	80047e8 <HAL_GetTick>
 800619a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	0559      	lsls	r1, r3, #21
 80061a0:	f57f aed5 	bpl.w	8005f4e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061a4:	f7fe fb20 	bl	80047e8 <HAL_GetTick>
 80061a8:	1b80      	subs	r0, r0, r6
 80061aa:	2802      	cmp	r0, #2
 80061ac:	d9f6      	bls.n	800619c <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 80061ae:	2003      	movs	r0, #3
}
 80061b0:	b002      	add	sp, #8
 80061b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80061b6:	2500      	movs	r5, #0
 80061b8:	e6f7      	b.n	8005faa <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ba:	4a63      	ldr	r2, [pc, #396]	@ (8006348 <HAL_RCC_OscConfig+0x47c>)
 80061bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80061c8:	f7fe fb0e 	bl	80047e8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061cc:	4f5e      	ldr	r7, [pc, #376]	@ (8006348 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 80061ce:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d0:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d4:	e004      	b.n	80061e0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fe fb07 	bl	80047e8 <HAL_GetTick>
 80061da:	1b80      	subs	r0, r0, r6
 80061dc:	4540      	cmp	r0, r8
 80061de:	d8e6      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061e4:	079b      	lsls	r3, r3, #30
 80061e6:	d5f6      	bpl.n	80061d6 <HAL_RCC_OscConfig+0x30a>
 80061e8:	e70b      	b.n	8006002 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 80061ea:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80061f6:	f7fe faf7 	bl	80047e8 <HAL_GetTick>
 80061fa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061fc:	e004      	b.n	8006208 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061fe:	f7fe faf3 	bl	80047e8 <HAL_GetTick>
 8006202:	1b80      	subs	r0, r0, r6
 8006204:	2802      	cmp	r0, #2
 8006206:	d8d2      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006208:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800620c:	079f      	lsls	r7, r3, #30
 800620e:	d4f6      	bmi.n	80061fe <HAL_RCC_OscConfig+0x332>
 8006210:	e719      	b.n	8006046 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	6833      	ldr	r3, [r6, #0]
 8006214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006218:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800621a:	f7fe fae5 	bl	80047e8 <HAL_GetTick>
 800621e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	05da      	lsls	r2, r3, #23
 8006224:	f53f aec6 	bmi.w	8005fb4 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fe fade 	bl	80047e8 <HAL_GetTick>
 800622c:	1bc0      	subs	r0, r0, r7
 800622e:	2802      	cmp	r0, #2
 8006230:	d9f6      	bls.n	8006220 <HAL_RCC_OscConfig+0x354>
 8006232:	e7bc      	b.n	80061ae <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006238:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800624a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800624c:	e78a      	b.n	8006164 <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 800624e:	2001      	movs	r0, #1
 8006250:	e721      	b.n	8006096 <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 8006252:	f7fe fac9 	bl	80047e8 <HAL_GetTick>
 8006256:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006258:	e004      	b.n	8006264 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625a:	f7fe fac5 	bl	80047e8 <HAL_GetTick>
 800625e:	1b80      	subs	r0, r0, r6
 8006260:	2802      	cmp	r0, #2
 8006262:	d8a4      	bhi.n	80061ae <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	0199      	lsls	r1, r3, #6
 8006268:	d4f7      	bmi.n	800625a <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800626a:	68e9      	ldr	r1, [r5, #12]
 800626c:	4b37      	ldr	r3, [pc, #220]	@ (800634c <HAL_RCC_OscConfig+0x480>)
 800626e:	6a22      	ldr	r2, [r4, #32]
 8006270:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006272:	4e35      	ldr	r6, [pc, #212]	@ (8006348 <HAL_RCC_OscConfig+0x47c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006274:	400b      	ands	r3, r1
 8006276:	4313      	orrs	r3, r2
 8006278:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 800627c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006280:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8006284:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8006288:	3801      	subs	r0, #1
 800628a:	0849      	lsrs	r1, r1, #1
 800628c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006290:	3901      	subs	r1, #1
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006298:	3a01      	subs	r2, #1
 800629a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800629e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062a6:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a8:	68eb      	ldr	r3, [r5, #12]
 80062aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80062b0:	f7fe fa9a 	bl	80047e8 <HAL_GetTick>
 80062b4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062b6:	e005      	b.n	80062c4 <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fe fa96 	bl	80047e8 <HAL_GetTick>
 80062bc:	1b00      	subs	r0, r0, r4
 80062be:	2802      	cmp	r0, #2
 80062c0:	f63f af75 	bhi.w	80061ae <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	019a      	lsls	r2, r3, #6
 80062c8:	d5f6      	bpl.n	80062b8 <HAL_RCC_OscConfig+0x3ec>
 80062ca:	e6e3      	b.n	8006094 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006348 <HAL_RCC_OscConfig+0x47c>)
 80062ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80062d2:	f042 0204 	orr.w	r2, r2, #4
 80062d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80062da:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e6:	e76f      	b.n	80061c8 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d0b0      	beq.n	800624e <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 80062ec:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ee:	6a22      	ldr	r2, [r4, #32]
 80062f0:	f003 0103 	and.w	r1, r3, #3
 80062f4:	4291      	cmp	r1, r2
 80062f6:	d1aa      	bne.n	800624e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80062fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062fe:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006300:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006304:	d1a3      	bne.n	800624e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006306:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006308:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800630c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006310:	d19d      	bne.n	800624e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006312:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006314:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006318:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800631c:	d197      	bne.n	800624e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800631e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006320:	0852      	lsrs	r2, r2, #1
 8006322:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8006326:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006328:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800632c:	d18f      	bne.n	800624e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800632e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006330:	0852      	lsrs	r2, r2, #1
 8006332:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8006336:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006338:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800633c:	bf14      	ite	ne
 800633e:	2001      	movne	r0, #1
 8006340:	2000      	moveq	r0, #0
 8006342:	e6a8      	b.n	8006096 <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 8006344:	2001      	movs	r0, #1
}
 8006346:	4770      	bx	lr
 8006348:	40021000 	.word	0x40021000
 800634c:	019f800c 	.word	0x019f800c

08006350 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006350:	4b18      	ldr	r3, [pc, #96]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x64>)
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	f002 020c 	and.w	r2, r2, #12
 8006358:	2a04      	cmp	r2, #4
 800635a:	d026      	beq.n	80063aa <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	f002 020c 	and.w	r2, r2, #12
 8006362:	2a08      	cmp	r2, #8
 8006364:	d023      	beq.n	80063ae <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	f002 020c 	and.w	r2, r2, #12
 800636c:	2a0c      	cmp	r2, #12
 800636e:	d001      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006370:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006372:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006374:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006376:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006378:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800637a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800637e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006380:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006384:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006388:	bf0c      	ite	eq
 800638a:	4b0b      	ldreq	r3, [pc, #44]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800638c:	4b0b      	ldrne	r3, [pc, #44]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800638e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006390:	fbb3 f3f2 	udiv	r3, r3, r2
 8006394:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006398:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x64>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80063a0:	3301      	adds	r3, #1
 80063a2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80063a4:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80063a8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80063aa:	4804      	ldr	r0, [pc, #16]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x6c>)
 80063ac:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80063ae:	4802      	ldr	r0, [pc, #8]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x68>)
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000
 80063b8:	007a1200 	.word	0x007a1200
 80063bc:	00f42400 	.word	0x00f42400

080063c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f000 80ee 	beq.w	80065a2 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063c6:	4a78      	ldr	r2, [pc, #480]	@ (80065a8 <HAL_RCC_ClockConfig+0x1e8>)
{
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	428b      	cmp	r3, r1
 80063d4:	460d      	mov	r5, r1
 80063d6:	4604      	mov	r4, r0
 80063d8:	d20c      	bcs.n	80063f4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	f023 030f 	bic.w	r3, r3, #15
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	428b      	cmp	r3, r1
 80063ec:	d002      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80063ee:	2001      	movs	r0, #1
}
 80063f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	07df      	lsls	r7, r3, #31
 80063f8:	d569      	bpl.n	80064ce <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063fa:	6867      	ldr	r7, [r4, #4]
 80063fc:	2f03      	cmp	r7, #3
 80063fe:	f000 80a0 	beq.w	8006542 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006402:	4b6a      	ldr	r3, [pc, #424]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006404:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006406:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006408:	f000 8097 	beq.w	800653a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800640c:	055b      	lsls	r3, r3, #21
 800640e:	d5ee      	bpl.n	80063ee <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006410:	f7ff ff9e 	bl	8006350 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006414:	4b66      	ldr	r3, [pc, #408]	@ (80065b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006416:	4298      	cmp	r0, r3
 8006418:	f240 80c0 	bls.w	800659c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800641c:	4a63      	ldr	r2, [pc, #396]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 800641e:	6893      	ldr	r3, [r2, #8]
 8006420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006428:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800642a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800642e:	4e5f      	ldr	r6, [pc, #380]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 8006430:	68b3      	ldr	r3, [r6, #8]
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	433b      	orrs	r3, r7
 8006438:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800643a:	f7fe f9d5 	bl	80047e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800643e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006442:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006444:	e004      	b.n	8006450 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006446:	f7fe f9cf 	bl	80047e8 <HAL_GetTick>
 800644a:	1bc0      	subs	r0, r0, r7
 800644c:	4540      	cmp	r0, r8
 800644e:	d871      	bhi.n	8006534 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006450:	68b3      	ldr	r3, [r6, #8]
 8006452:	6862      	ldr	r2, [r4, #4]
 8006454:	f003 030c 	and.w	r3, r3, #12
 8006458:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800645c:	d1f3      	bne.n	8006446 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	079f      	lsls	r7, r3, #30
 8006462:	d436      	bmi.n	80064d2 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8006464:	f1b9 0f00 	cmp.w	r9, #0
 8006468:	d003      	beq.n	8006472 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800646a:	68b3      	ldr	r3, [r6, #8]
 800646c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006470:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006472:	4e4d      	ldr	r6, [pc, #308]	@ (80065a8 <HAL_RCC_ClockConfig+0x1e8>)
 8006474:	6833      	ldr	r3, [r6, #0]
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	42ab      	cmp	r3, r5
 800647c:	d846      	bhi.n	800650c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	075a      	lsls	r2, r3, #29
 8006482:	d506      	bpl.n	8006492 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006484:	4949      	ldr	r1, [pc, #292]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 8006486:	68e0      	ldr	r0, [r4, #12]
 8006488:	688a      	ldr	r2, [r1, #8]
 800648a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800648e:	4302      	orrs	r2, r0
 8006490:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006492:	071b      	lsls	r3, r3, #28
 8006494:	d507      	bpl.n	80064a6 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006496:	4a45      	ldr	r2, [pc, #276]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 8006498:	6921      	ldr	r1, [r4, #16]
 800649a:	6893      	ldr	r3, [r2, #8]
 800649c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80064a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80064a4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064a6:	f7ff ff53 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 80064aa:	4a40      	ldr	r2, [pc, #256]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 80064ac:	4c41      	ldr	r4, [pc, #260]	@ (80065b4 <HAL_RCC_ClockConfig+0x1f4>)
 80064ae:	6892      	ldr	r2, [r2, #8]
 80064b0:	4941      	ldr	r1, [pc, #260]	@ (80065b8 <HAL_RCC_ClockConfig+0x1f8>)
 80064b2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80064b6:	4603      	mov	r3, r0
 80064b8:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80064ba:	4840      	ldr	r0, [pc, #256]	@ (80065bc <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064bc:	f002 021f 	and.w	r2, r2, #31
 80064c0:	40d3      	lsrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80064c4:	6800      	ldr	r0, [r0, #0]
}
 80064c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80064ca:	f7fe b943 	b.w	8004754 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ce:	079e      	lsls	r6, r3, #30
 80064d0:	d5cf      	bpl.n	8006472 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d2:	0758      	lsls	r0, r3, #29
 80064d4:	d504      	bpl.n	80064e0 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064d6:	4935      	ldr	r1, [pc, #212]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 80064d8:	688a      	ldr	r2, [r1, #8]
 80064da:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80064de:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e0:	0719      	lsls	r1, r3, #28
 80064e2:	d506      	bpl.n	80064f2 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80064e4:	4a31      	ldr	r2, [pc, #196]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 80064e6:	6893      	ldr	r3, [r2, #8]
 80064e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064ec:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064f0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f2:	4a2e      	ldr	r2, [pc, #184]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 80064f4:	68a1      	ldr	r1, [r4, #8]
 80064f6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064f8:	4e2b      	ldr	r6, [pc, #172]	@ (80065a8 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064fe:	430b      	orrs	r3, r1
 8006500:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006502:	6833      	ldr	r3, [r6, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	42ab      	cmp	r3, r5
 800650a:	d9b8      	bls.n	800647e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650c:	6833      	ldr	r3, [r6, #0]
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	432b      	orrs	r3, r5
 8006514:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006516:	f7fe f967 	bl	80047e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800651a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800651e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	42ab      	cmp	r3, r5
 8006528:	d0a9      	beq.n	800647e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800652a:	f7fe f95d 	bl	80047e8 <HAL_GetTick>
 800652e:	1bc0      	subs	r0, r0, r7
 8006530:	4540      	cmp	r0, r8
 8006532:	d9f5      	bls.n	8006520 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8006534:	2003      	movs	r0, #3
}
 8006536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800653a:	039a      	lsls	r2, r3, #14
 800653c:	f53f af68 	bmi.w	8006410 <HAL_RCC_ClockConfig+0x50>
 8006540:	e755      	b.n	80063ee <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006542:	4a1a      	ldr	r2, [pc, #104]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
 8006544:	6811      	ldr	r1, [r2, #0]
 8006546:	0188      	lsls	r0, r1, #6
 8006548:	f57f af51 	bpl.w	80063ee <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800654c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800654e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006550:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8006552:	4e17      	ldr	r6, [pc, #92]	@ (80065b0 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006554:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8006558:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800655a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800655e:	bf0c      	ite	eq
 8006560:	4817      	ldreq	r0, [pc, #92]	@ (80065c0 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006562:	4818      	ldrne	r0, [pc, #96]	@ (80065c4 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006564:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006566:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800656a:	4810      	ldr	r0, [pc, #64]	@ (80065ac <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800656c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006570:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006574:	68c1      	ldr	r1, [r0, #12]
 8006576:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800657a:	3101      	adds	r1, #1
 800657c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800657e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8006582:	42b2      	cmp	r2, r6
 8006584:	d90a      	bls.n	800659c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006586:	6882      	ldr	r2, [r0, #8]
 8006588:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 800658c:	f43f af46 	beq.w	800641c <HAL_RCC_ClockConfig+0x5c>
 8006590:	0799      	lsls	r1, r3, #30
 8006592:	d503      	bpl.n	800659c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006594:	68a3      	ldr	r3, [r4, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f43f af40 	beq.w	800641c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800659c:	f04f 0900 	mov.w	r9, #0
 80065a0:	e745      	b.n	800642e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80065a2:	2001      	movs	r0, #1
}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40022000 	.word	0x40022000
 80065ac:	40021000 	.word	0x40021000
 80065b0:	04c4b400 	.word	0x04c4b400
 80065b4:	0800a5d0 	.word	0x0800a5d0
 80065b8:	20000500 	.word	0x20000500
 80065bc:	20000508 	.word	0x20000508
 80065c0:	007a1200 	.word	0x007a1200
 80065c4:	00f42400 	.word	0x00f42400

080065c8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80065c8:	4b01      	ldr	r3, [pc, #4]	@ (80065d0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000500 	.word	0x20000500

080065d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065d4:	4b05      	ldr	r3, [pc, #20]	@ (80065ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80065d6:	4a06      	ldr	r2, [pc, #24]	@ (80065f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065d8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80065da:	4906      	ldr	r1, [pc, #24]	@ (80065f4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80065e0:	6808      	ldr	r0, [r1, #0]
 80065e2:	5cd3      	ldrb	r3, [r2, r3]
 80065e4:	f003 031f 	and.w	r3, r3, #31
}
 80065e8:	40d8      	lsrs	r0, r3
 80065ea:	4770      	bx	lr
 80065ec:	40021000 	.word	0x40021000
 80065f0:	0800a5c8 	.word	0x0800a5c8
 80065f4:	20000500 	.word	0x20000500

080065f8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065f8:	4b05      	ldr	r3, [pc, #20]	@ (8006610 <HAL_RCC_GetPCLK2Freq+0x18>)
 80065fa:	4a06      	ldr	r2, [pc, #24]	@ (8006614 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80065fc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80065fe:	4906      	ldr	r1, [pc, #24]	@ (8006618 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006600:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	5cd3      	ldrb	r3, [r2, r3]
 8006608:	f003 031f 	and.w	r3, r3, #31
}
 800660c:	40d8      	lsrs	r0, r3
 800660e:	4770      	bx	lr
 8006610:	40021000 	.word	0x40021000
 8006614:	0800a5c8 	.word	0x0800a5c8
 8006618:	20000500 	.word	0x20000500

0800661c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800661c:	4a02      	ldr	r2, [pc, #8]	@ (8006628 <HAL_RCC_EnableCSS+0xc>)
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006624:	6013      	str	r3, [r2, #0]
}
 8006626:	4770      	bx	lr
 8006628:	40021000 	.word	0x40021000

0800662c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006630:	6803      	ldr	r3, [r0, #0]
{
 8006632:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006634:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8006638:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800663a:	d052      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800663c:	4ba1      	ldr	r3, [pc, #644]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800663e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006640:	00d5      	lsls	r5, r2, #3
 8006642:	f140 8108 	bpl.w	8006856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 8006646:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006648:	4d9f      	ldr	r5, [pc, #636]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006650:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006652:	f7fe f8c9 	bl	80047e8 <HAL_GetTick>
 8006656:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006658:	e005      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fe f8c5 	bl	80047e8 <HAL_GetTick>
 800665e:	1b83      	subs	r3, r0, r6
 8006660:	2b02      	cmp	r3, #2
 8006662:	f200 8103 	bhi.w	800686c <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	05d8      	lsls	r0, r3, #23
 800666a:	d5f6      	bpl.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800666c:	4d95      	ldr	r5, [pc, #596]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800666e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006670:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006674:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006678:	d026      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800667a:	4293      	cmp	r3, r2
 800667c:	d024      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800667e:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006682:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800668e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006696:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800669a:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800669e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80066a0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066a4:	d510      	bpl.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a6:	f7fe f89f 	bl	80047e8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80066ae:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066b0:	e005      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fe f899 	bl	80047e8 <HAL_GetTick>
 80066b6:	1b80      	subs	r0, r0, r6
 80066b8:	4540      	cmp	r0, r8
 80066ba:	f200 80d7 	bhi.w	800686c <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066be:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80066c2:	079b      	lsls	r3, r3, #30
 80066c4:	d5f5      	bpl.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80066c8:	497e      	ldr	r1, [pc, #504]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80066ca:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80066ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066d8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066da:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 80066dc:	2f00      	cmp	r7, #0
 80066de:	f040 80ca 	bne.w	8006876 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066e2:	07de      	lsls	r6, r3, #31
 80066e4:	d508      	bpl.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066e6:	4977      	ldr	r1, [pc, #476]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80066e8:	6865      	ldr	r5, [r4, #4]
 80066ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80066ee:	f022 0203 	bic.w	r2, r2, #3
 80066f2:	432a      	orrs	r2, r5
 80066f4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066f8:	079d      	lsls	r5, r3, #30
 80066fa:	d508      	bpl.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066fc:	4971      	ldr	r1, [pc, #452]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80066fe:	68a5      	ldr	r5, [r4, #8]
 8006700:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006704:	f022 020c 	bic.w	r2, r2, #12
 8006708:	432a      	orrs	r2, r5
 800670a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800670e:	0759      	lsls	r1, r3, #29
 8006710:	d508      	bpl.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006712:	496c      	ldr	r1, [pc, #432]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006714:	68e5      	ldr	r5, [r4, #12]
 8006716:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800671a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800671e:	432a      	orrs	r2, r5
 8006720:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006724:	071a      	lsls	r2, r3, #28
 8006726:	d508      	bpl.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006728:	4966      	ldr	r1, [pc, #408]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800672a:	6925      	ldr	r5, [r4, #16]
 800672c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006730:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8006734:	432a      	orrs	r2, r5
 8006736:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800673a:	069f      	lsls	r7, r3, #26
 800673c:	d508      	bpl.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800673e:	4961      	ldr	r1, [pc, #388]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006740:	6965      	ldr	r5, [r4, #20]
 8006742:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006746:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800674a:	432a      	orrs	r2, r5
 800674c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006750:	065e      	lsls	r6, r3, #25
 8006752:	d508      	bpl.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006754:	495b      	ldr	r1, [pc, #364]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006756:	69a5      	ldr	r5, [r4, #24]
 8006758:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800675c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006760:	432a      	orrs	r2, r5
 8006762:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006766:	061d      	lsls	r5, r3, #24
 8006768:	d508      	bpl.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800676a:	4956      	ldr	r1, [pc, #344]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800676c:	69e5      	ldr	r5, [r4, #28]
 800676e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006772:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006776:	432a      	orrs	r2, r5
 8006778:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800677c:	05d9      	lsls	r1, r3, #23
 800677e:	d508      	bpl.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006780:	4950      	ldr	r1, [pc, #320]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006782:	6a25      	ldr	r5, [r4, #32]
 8006784:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006788:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800678c:	432a      	orrs	r2, r5
 800678e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006792:	059a      	lsls	r2, r3, #22
 8006794:	d508      	bpl.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006796:	494b      	ldr	r1, [pc, #300]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006798:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800679a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800679e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80067a2:	432a      	orrs	r2, r5
 80067a4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067a8:	055f      	lsls	r7, r3, #21
 80067aa:	d50b      	bpl.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067ac:	4945      	ldr	r1, [pc, #276]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80067ae:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80067b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80067b4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80067b8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067ba:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067be:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067c2:	d05e      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067c4:	051e      	lsls	r6, r3, #20
 80067c6:	d50b      	bpl.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067c8:	493e      	ldr	r1, [pc, #248]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80067ca:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80067cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80067d0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80067d4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067d6:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067da:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067de:	d055      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067e0:	04dd      	lsls	r5, r3, #19
 80067e2:	d50b      	bpl.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067e4:	4937      	ldr	r1, [pc, #220]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80067e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80067e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80067ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80067f0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067f2:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067fa:	d04c      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067fc:	0499      	lsls	r1, r3, #18
 80067fe:	d50b      	bpl.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006800:	4930      	ldr	r1, [pc, #192]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006802:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006804:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006808:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800680c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800680e:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006812:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006816:	d043      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006818:	045a      	lsls	r2, r3, #17
 800681a:	d50b      	bpl.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800681c:	4929      	ldr	r1, [pc, #164]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800681e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006820:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006824:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006828:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800682a:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800682e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006832:	d03a      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	d50b      	bpl.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006838:	4a22      	ldr	r2, [pc, #136]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800683a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800683c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006840:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006844:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006846:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800684a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800684e:	d031      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 8006850:	b002      	add	sp, #8
 8006852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006858:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800685c:	659a      	str	r2, [r3, #88]	@ 0x58
 800685e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006868:	2701      	movs	r7, #1
 800686a:	e6ed      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800686c:	6823      	ldr	r3, [r4, #0]
        status = ret;
 800686e:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8006870:	2f00      	cmp	r7, #0
 8006872:	f43f af36 	beq.w	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006876:	4913      	ldr	r1, [pc, #76]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006878:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800687a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800687e:	658a      	str	r2, [r1, #88]	@ 0x58
 8006880:	e72f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006882:	68ca      	ldr	r2, [r1, #12]
 8006884:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006888:	60ca      	str	r2, [r1, #12]
 800688a:	e79b      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688c:	68ca      	ldr	r2, [r1, #12]
 800688e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006892:	60ca      	str	r2, [r1, #12]
 8006894:	e7a4      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006896:	68ca      	ldr	r2, [r1, #12]
 8006898:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800689c:	60ca      	str	r2, [r1, #12]
 800689e:	e7ad      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a0:	68ca      	ldr	r2, [r1, #12]
 80068a2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80068a6:	60ca      	str	r2, [r1, #12]
 80068a8:	e7b6      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068aa:	68ca      	ldr	r2, [r1, #12]
 80068ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80068b0:	60ca      	str	r2, [r1, #12]
 80068b2:	e7bf      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068b4:	68d3      	ldr	r3, [r2, #12]
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ba:	60d3      	str	r3, [r2, #12]
}
 80068bc:	b002      	add	sp, #8
 80068be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40007000 	.word	0x40007000

080068cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068cc:	6a03      	ldr	r3, [r0, #32]
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d4:	6a03      	ldr	r3, [r0, #32]
{
 80068d6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80068e2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80068e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80068ea:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80068ee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068f0:	4d13      	ldr	r5, [pc, #76]	@ (8006940 <TIM_OC1_SetConfig+0x74>)
 80068f2:	42a8      	cmp	r0, r5
 80068f4:	d00f      	beq.n	8006916 <TIM_OC1_SetConfig+0x4a>
 80068f6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80068fa:	42a8      	cmp	r0, r5
 80068fc:	d00b      	beq.n	8006916 <TIM_OC1_SetConfig+0x4a>
 80068fe:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8006902:	42a8      	cmp	r0, r5
 8006904:	d007      	beq.n	8006916 <TIM_OC1_SetConfig+0x4a>
 8006906:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800690a:	42a8      	cmp	r0, r5
 800690c:	d003      	beq.n	8006916 <TIM_OC1_SetConfig+0x4a>
 800690e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006912:	42a8      	cmp	r0, r5
 8006914:	d10d      	bne.n	8006932 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006916:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006918:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800691c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800691e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006922:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006926:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800692a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800692e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006932:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006934:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006936:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006938:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800693a:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 800693c:	6203      	str	r3, [r0, #32]
}
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00

08006944 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006944:	6a03      	ldr	r3, [r0, #32]
 8006946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800694a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694c:	6a03      	ldr	r3, [r0, #32]
{
 800694e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006956:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800695a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800695e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006960:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006962:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006966:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800696a:	4d14      	ldr	r5, [pc, #80]	@ (80069bc <TIM_OC3_SetConfig+0x78>)
 800696c:	42a8      	cmp	r0, r5
 800696e:	d00f      	beq.n	8006990 <TIM_OC3_SetConfig+0x4c>
 8006970:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006974:	42a8      	cmp	r0, r5
 8006976:	d00b      	beq.n	8006990 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	4d11      	ldr	r5, [pc, #68]	@ (80069c0 <TIM_OC3_SetConfig+0x7c>)
 800697a:	42a8      	cmp	r0, r5
 800697c:	d00f      	beq.n	800699e <TIM_OC3_SetConfig+0x5a>
 800697e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006982:	42a8      	cmp	r0, r5
 8006984:	d00b      	beq.n	800699e <TIM_OC3_SetConfig+0x5a>
 8006986:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800698a:	42a8      	cmp	r0, r5
 800698c:	d10f      	bne.n	80069ae <TIM_OC3_SetConfig+0x6a>
 800698e:	e006      	b.n	800699e <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006990:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006992:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006996:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800699a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800699e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a6:	ea46 0c05 	orr.w	ip, r6, r5
 80069aa:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80069b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80069b2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80069b4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80069b6:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80069b8:	6203      	str	r3, [r0, #32]
}
 80069ba:	4770      	bx	lr
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40014000 	.word	0x40014000

080069c4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c4:	6a03      	ldr	r3, [r0, #32]
 80069c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069cc:	6a03      	ldr	r3, [r0, #32]
{
 80069ce:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069d6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80069da:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80069e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069ec:	4d14      	ldr	r5, [pc, #80]	@ (8006a40 <TIM_OC4_SetConfig+0x7c>)
 80069ee:	42a8      	cmp	r0, r5
 80069f0:	d00f      	beq.n	8006a12 <TIM_OC4_SetConfig+0x4e>
 80069f2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80069f6:	42a8      	cmp	r0, r5
 80069f8:	d00b      	beq.n	8006a12 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fa:	4d12      	ldr	r5, [pc, #72]	@ (8006a44 <TIM_OC4_SetConfig+0x80>)
 80069fc:	42a8      	cmp	r0, r5
 80069fe:	d00f      	beq.n	8006a20 <TIM_OC4_SetConfig+0x5c>
 8006a00:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006a04:	42a8      	cmp	r0, r5
 8006a06:	d00b      	beq.n	8006a20 <TIM_OC4_SetConfig+0x5c>
 8006a08:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006a0c:	42a8      	cmp	r0, r5
 8006a0e:	d10f      	bne.n	8006a30 <TIM_OC4_SetConfig+0x6c>
 8006a10:	e006      	b.n	8006a20 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a12:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a20:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a24:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a28:	ea46 0c05 	orr.w	ip, r6, r5
 8006a2c:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a30:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006a32:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a34:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006a36:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006a38:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006a3a:	6203      	str	r3, [r0, #32]
}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40014000 	.word	0x40014000

08006a48 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d06d      	beq.n	8006b28 <HAL_TIM_Base_Init+0xe0>
{
 8006a4c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006a4e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006a52:	4604      	mov	r4, r0
 8006a54:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d060      	beq.n	8006b1e <HAL_TIM_Base_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a5e:	4e33      	ldr	r6, [pc, #204]	@ (8006b2c <HAL_TIM_Base_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8006a60:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a62:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a64:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006a66:	2302      	movs	r3, #2
 8006a68:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8006a6e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a70:	d044      	beq.n	8006afc <HAL_TIM_Base_Init+0xb4>
 8006a72:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006a76:	d017      	beq.n	8006aa8 <HAL_TIM_Base_Init+0x60>
 8006a78:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006a7c:	42b2      	cmp	r2, r6
 8006a7e:	d013      	beq.n	8006aa8 <HAL_TIM_Base_Init+0x60>
 8006a80:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006a84:	42b2      	cmp	r2, r6
 8006a86:	d00f      	beq.n	8006aa8 <HAL_TIM_Base_Init+0x60>
 8006a88:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006a8c:	42b2      	cmp	r2, r6
 8006a8e:	d035      	beq.n	8006afc <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a90:	4e27      	ldr	r6, [pc, #156]	@ (8006b30 <HAL_TIM_Base_Init+0xe8>)
 8006a92:	42b2      	cmp	r2, r6
 8006a94:	d036      	beq.n	8006b04 <HAL_TIM_Base_Init+0xbc>
 8006a96:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006a9a:	42b2      	cmp	r2, r6
 8006a9c:	d032      	beq.n	8006b04 <HAL_TIM_Base_Init+0xbc>
 8006a9e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006aa2:	42b2      	cmp	r2, r6
 8006aa4:	d108      	bne.n	8006ab8 <HAL_TIM_Base_Init+0x70>
 8006aa6:	e02d      	b.n	8006b04 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8006aa8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006aae:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ab0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ab6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006abe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006ac2:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006acc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006ad0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006ad4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006ad8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006ae8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006aec:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006af0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006af8:	2000      	movs	r0, #0
}
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006afc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b02:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b04:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b10:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006b12:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b14:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b16:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006b18:	6963      	ldr	r3, [r4, #20]
 8006b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b1c:	e7d2      	b.n	8006ac4 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006b1e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006b22:	f7fd fb69 	bl	80041f8 <HAL_TIM_Base_MspInit>
 8006b26:	e799      	b.n	8006a5c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8006b28:	2001      	movs	r0, #1
}
 8006b2a:	4770      	bx	lr
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	40014000 	.word	0x40014000

08006b34 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop

08006b38 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d06d      	beq.n	8006c18 <HAL_TIM_PWM_Init+0xe0>
{
 8006b3c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006b42:	4604      	mov	r4, r0
 8006b44:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d060      	beq.n	8006c0e <HAL_TIM_PWM_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b4e:	4e33      	ldr	r6, [pc, #204]	@ (8006c1c <HAL_TIM_PWM_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8006b50:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b52:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b54:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006b56:	2302      	movs	r3, #2
 8006b58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8006b5e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b60:	d044      	beq.n	8006bec <HAL_TIM_PWM_Init+0xb4>
 8006b62:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006b66:	d017      	beq.n	8006b98 <HAL_TIM_PWM_Init+0x60>
 8006b68:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006b6c:	42b2      	cmp	r2, r6
 8006b6e:	d013      	beq.n	8006b98 <HAL_TIM_PWM_Init+0x60>
 8006b70:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006b74:	42b2      	cmp	r2, r6
 8006b76:	d00f      	beq.n	8006b98 <HAL_TIM_PWM_Init+0x60>
 8006b78:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006b7c:	42b2      	cmp	r2, r6
 8006b7e:	d035      	beq.n	8006bec <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b80:	4e27      	ldr	r6, [pc, #156]	@ (8006c20 <HAL_TIM_PWM_Init+0xe8>)
 8006b82:	42b2      	cmp	r2, r6
 8006b84:	d036      	beq.n	8006bf4 <HAL_TIM_PWM_Init+0xbc>
 8006b86:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006b8a:	42b2      	cmp	r2, r6
 8006b8c:	d032      	beq.n	8006bf4 <HAL_TIM_PWM_Init+0xbc>
 8006b8e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006b92:	42b2      	cmp	r2, r6
 8006b94:	d108      	bne.n	8006ba8 <HAL_TIM_PWM_Init+0x70>
 8006b96:	e02d      	b.n	8006bf4 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8006b98:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b9e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bac:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006bae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006bb2:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006bc0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006bc4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006bc8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006bcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006bd8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006bdc:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006be0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006be8:	2000      	movs	r0, #0
}
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006bec:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006bf2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c00:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006c02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c04:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c06:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006c08:	6963      	ldr	r3, [r4, #20]
 8006c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c0c:	e7d2      	b.n	8006bb4 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006c0e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006c12:	f7ff ff8f 	bl	8006b34 <HAL_TIM_PWM_MspInit>
 8006c16:	e799      	b.n	8006b4c <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8006c18:	2001      	movs	r0, #1
}
 8006c1a:	4770      	bx	lr
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40014000 	.word	0x40014000

08006c24 <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d06d      	beq.n	8006d08 <HAL_TIM_IC_Init+0xe0>
{
 8006c2c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c32:	4604      	mov	r4, r0
 8006c34:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d060      	beq.n	8006cfe <HAL_TIM_IC_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c3c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c3e:	4e33      	ldr	r6, [pc, #204]	@ (8006d0c <HAL_TIM_IC_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8006c40:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c42:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c44:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c46:	2302      	movs	r3, #2
 8006c48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c4c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8006c4e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c50:	d044      	beq.n	8006cdc <HAL_TIM_IC_Init+0xb4>
 8006c52:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006c56:	d017      	beq.n	8006c88 <HAL_TIM_IC_Init+0x60>
 8006c58:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006c5c:	42b2      	cmp	r2, r6
 8006c5e:	d013      	beq.n	8006c88 <HAL_TIM_IC_Init+0x60>
 8006c60:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006c64:	42b2      	cmp	r2, r6
 8006c66:	d00f      	beq.n	8006c88 <HAL_TIM_IC_Init+0x60>
 8006c68:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006c6c:	42b2      	cmp	r2, r6
 8006c6e:	d035      	beq.n	8006cdc <HAL_TIM_IC_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c70:	4e27      	ldr	r6, [pc, #156]	@ (8006d10 <HAL_TIM_IC_Init+0xe8>)
 8006c72:	42b2      	cmp	r2, r6
 8006c74:	d036      	beq.n	8006ce4 <HAL_TIM_IC_Init+0xbc>
 8006c76:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006c7a:	42b2      	cmp	r2, r6
 8006c7c:	d032      	beq.n	8006ce4 <HAL_TIM_IC_Init+0xbc>
 8006c7e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006c82:	42b2      	cmp	r2, r6
 8006c84:	d108      	bne.n	8006c98 <HAL_TIM_IC_Init+0x70>
 8006c86:	e02d      	b.n	8006ce4 <HAL_TIM_IC_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8006c88:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c8e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c90:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c96:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c9c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006c9e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006ca2:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006cb0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006cb4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006cb8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006cbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006cc8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006ccc:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006cd0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006cd4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006cd8:	2000      	movs	r0, #0
}
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006cdc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ce2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cea:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006cf2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cf6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf8:	6963      	ldr	r3, [r4, #20]
 8006cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cfc:	e7d2      	b.n	8006ca4 <HAL_TIM_IC_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006cfe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8006d02:	f7ff ff8f 	bl	8006c24 <HAL_TIM_IC_MspInit>
 8006d06:	e799      	b.n	8006c3c <HAL_TIM_IC_Init+0x14>
    return HAL_ERROR;
 8006d08:	2001      	movs	r0, #1
}
 8006d0a:	4770      	bx	lr
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40014000 	.word	0x40014000

08006d14 <HAL_TIM_IC_ConfigChannel>:
{
 8006d14:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006d16:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8006d1a:	2801      	cmp	r0, #1
 8006d1c:	f000 80c1 	beq.w	8006ea2 <HAL_TIM_IC_ConfigChannel+0x18e>
 8006d20:	2001      	movs	r0, #1
{
 8006d22:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006d24:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8006d28:	b15a      	cbz	r2, 8006d42 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 8006d2a:	2a04      	cmp	r2, #4
 8006d2c:	d04c      	beq.n	8006dc8 <HAL_TIM_IC_ConfigChannel+0xb4>
  else if (Channel == TIM_CHANNEL_3)
 8006d2e:	2a08      	cmp	r2, #8
 8006d30:	f000 8094 	beq.w	8006e5c <HAL_TIM_IC_ConfigChannel+0x148>
  else if (Channel == TIM_CHANNEL_4)
 8006d34:	2a0c      	cmp	r2, #12
 8006d36:	d06c      	beq.n	8006e12 <HAL_TIM_IC_ConfigChannel+0xfe>
  __HAL_UNLOCK(htim);
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8006d40:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8006d42:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d44:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8006ea8 <HAL_TIM_IC_ConfigChannel+0x194>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d48:	6a16      	ldr	r6, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8006d4a:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4c:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 8006d50:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d54:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d56:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d58:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 8006d5a:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d5c:	d015      	beq.n	8006d8a <HAL_TIM_IC_ConfigChannel+0x76>
 8006d5e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006d62:	d012      	beq.n	8006d8a <HAL_TIM_IC_ConfigChannel+0x76>
 8006d64:	f5ac 3c94 	sub.w	ip, ip, #75776	@ 0x12800
 8006d68:	4562      	cmp	r2, ip
 8006d6a:	d00e      	beq.n	8006d8a <HAL_TIM_IC_ConfigChannel+0x76>
 8006d6c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8006d70:	4562      	cmp	r2, ip
 8006d72:	d00a      	beq.n	8006d8a <HAL_TIM_IC_ConfigChannel+0x76>
 8006d74:	f50c 3c96 	add.w	ip, ip, #76800	@ 0x12c00
 8006d78:	4562      	cmp	r2, ip
 8006d7a:	d006      	beq.n	8006d8a <HAL_TIM_IC_ConfigChannel+0x76>
 8006d7c:	f50c 6c40 	add.w	ip, ip, #3072	@ 0xc00
 8006d80:	4562      	cmp	r2, ip
 8006d82:	d002      	beq.n	8006d8a <HAL_TIM_IC_ConfigChannel+0x76>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d84:	f047 0c01 	orr.w	ip, r7, #1
 8006d88:	e003      	b.n	8006d92 <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d8a:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8006d8e:	ea45 0c07 	orr.w	ip, r5, r7
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d92:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d94:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d98:	b2c0      	uxtb	r0, r0
 8006d9a:	ea40 000c 	orr.w	r0, r0, ip
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d9e:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da0:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006da4:	f004 000a 	and.w	r0, r4, #10
 8006da8:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8006daa:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006dac:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006dae:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006db0:	f020 000c 	bic.w	r0, r0, #12
 8006db4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006db6:	6991      	ldr	r1, [r2, #24]
 8006db8:	4321      	orrs	r1, r4
 8006dba:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006dc2:	2000      	movs	r0, #0
}
 8006dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8006dc6:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dcc:	6a15      	ldr	r5, [r2, #32]
 8006dce:	f025 0510 	bic.w	r5, r5, #16
    TIM_TI2_SetConfig(htim->Instance,
 8006dd2:	e9d1 4600 	ldrd	r4, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd6:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006dd8:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8006dda:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ddc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006de0:	0300      	lsls	r0, r0, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006de2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006de6:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006de8:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006dec:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8006dee:	6a10      	ldr	r0, [r2, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df0:	6191      	str	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006df2:	0124      	lsls	r4, r4, #4
 8006df4:	f004 04a0 	and.w	r4, r4, #160	@ 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006df8:	f020 01a0 	bic.w	r1, r0, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dfc:	4321      	orrs	r1, r4
  TIMx->CCER = tmpccer;
 8006dfe:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e00:	6991      	ldr	r1, [r2, #24]
 8006e02:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8006e06:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e08:	6991      	ldr	r1, [r2, #24]
 8006e0a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8006e0e:	6191      	str	r1, [r2, #24]
 8006e10:	e7d4      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0xa8>
    TIM_TI4_SetConfig(htim->Instance,
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e16:	6a15      	ldr	r5, [r2, #32]
 8006e18:	f425 5580 	bic.w	r5, r5, #4096	@ 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 8006e1c:	e9d1 4600 	ldrd	r4, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e20:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e22:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8006e24:	69d1      	ldr	r1, [r2, #28]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e26:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e2a:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e2c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e30:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e32:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e36:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8006e38:	6a10      	ldr	r0, [r2, #32]
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e3a:	61d1      	str	r1, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e3c:	0324      	lsls	r4, r4, #12
 8006e3e:	f404 4420 	and.w	r4, r4, #40960	@ 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e42:	f420 4120 	bic.w	r1, r0, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e46:	4321      	orrs	r1, r4
  TIMx->CCER = tmpccer ;
 8006e48:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e4a:	69d1      	ldr	r1, [r2, #28]
 8006e4c:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8006e50:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e52:	69d1      	ldr	r1, [r2, #28]
 8006e54:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8006e58:	61d1      	str	r1, [r2, #28]
 8006e5a:	e7af      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0xa8>
    TIM_TI3_SetConfig(htim->Instance,
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e60:	6a16      	ldr	r6, [r2, #32]
 8006e62:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
    TIM_TI3_SetConfig(htim->Instance,
 8006e66:	e9d1 5400 	ldrd	r5, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6a:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e6c:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8006e6e:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e70:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e74:	0100      	lsls	r0, r0, #4
  tmpccmr2 |= TIM_ICSelection;
 8006e76:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e78:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e7a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e7e:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8006e80:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 8006e82:	61d1      	str	r1, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e84:	022d      	lsls	r5, r5, #8
 8006e86:	f405 6520 	and.w	r5, r5, #2560	@ 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e8a:	f420 6120 	bic.w	r1, r0, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e8e:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8006e90:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e92:	69d1      	ldr	r1, [r2, #28]
 8006e94:	f021 010c 	bic.w	r1, r1, #12
 8006e98:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e9a:	69d1      	ldr	r1, [r2, #28]
 8006e9c:	4331      	orrs	r1, r6
 8006e9e:	61d1      	str	r1, [r2, #28]
 8006ea0:	e78c      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0xa8>
  __HAL_LOCK(htim);
 8006ea2:	2002      	movs	r0, #2
}
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40012c00 	.word	0x40012c00

08006eac <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006eac:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d069      	beq.n	8006f88 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8006eb4:	4684      	mov	ip, r0
 8006eb6:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006eba:	2302      	movs	r3, #2
{
 8006ebc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006ebe:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec2:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006ec6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ec8:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006eca:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ecc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006ed0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ed4:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ed6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006eda:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006ede:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 8006ee0:	2b60      	cmp	r3, #96	@ 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006ee2:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006ee4:	d05e      	beq.n	8006fa4 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8006ee6:	d816      	bhi.n	8006f16 <HAL_TIM_SlaveConfigSynchro+0x6a>
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	d06e      	beq.n	8006fca <HAL_TIM_SlaveConfigSynchro+0x11e>
 8006eec:	d933      	bls.n	8006f56 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8006eee:	2b50      	cmp	r3, #80	@ 0x50
 8006ef0:	d141      	bne.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
  tmpccer = TIMx->CCER;
 8006ef2:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef4:	688a      	ldr	r2, [r1, #8]
 8006ef6:	6909      	ldr	r1, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006efc:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efe:	6a03      	ldr	r3, [r0, #32]
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f06:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006f10:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006f12:	6202      	str	r2, [r0, #32]
 8006f14:	e00d      	b.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8006f16:	2b70      	cmp	r3, #112	@ 0x70
 8006f18:	d038      	beq.n	8006f8c <HAL_TIM_SlaveConfigSynchro+0xe0>
 8006f1a:	2b6f      	cmp	r3, #111	@ 0x6f
 8006f1c:	d92b      	bls.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006fdc <HAL_TIM_SlaveConfigSynchro+0x130>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d006      	beq.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006f24:	d91d      	bls.n	8006f62 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8006f26:	4a2e      	ldr	r2, [pc, #184]	@ (8006fe0 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d002      	beq.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006f2c:	3230      	adds	r2, #48	@ 0x30
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d121      	bne.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006f32:	68c3      	ldr	r3, [r0, #12]
 8006f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f38:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006f3a:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8006f3c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f3e:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006f40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f44:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006f46:	f88c 103d 	strb.w	r1, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006f4a:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  return HAL_OK;
 8006f4e:	4610      	mov	r0, r2
}
 8006f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f54:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d0eb      	beq.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006f5a:	d909      	bls.n	8006f70 <HAL_TIM_SlaveConfigSynchro+0xc4>
 8006f5c:	2b30      	cmp	r3, #48	@ 0x30
 8006f5e:	d10a      	bne.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8006f60:	e7e7      	b.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006f62:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f66:	d0e4      	beq.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006f68:	3a10      	subs	r2, #16
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d0e1      	beq.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006f6e:	e002      	b.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8006f70:	f033 0310 	bics.w	r3, r3, #16
 8006f74:	d0dd      	beq.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8006f76:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006f78:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006f7a:	f88c 003d 	strb.w	r0, [ip, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006f7e:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8006f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006f88:	2002      	movs	r0, #2
}
 8006f8a:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f8c:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8006f90:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f92:	6909      	ldr	r1, [r1, #16]
 8006f94:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f96:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f9e:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa0:	6083      	str	r3, [r0, #8]
 8006fa2:	e7c6      	b.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fa4:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa6:	688c      	ldr	r4, [r1, #8]
 8006fa8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006faa:	f023 0310 	bic.w	r3, r3, #16
 8006fae:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006fb2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fb4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fbc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006fc6:	6203      	str	r3, [r0, #32]
 8006fc8:	e7b3      	b.n	8006f32 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006fca:	2c05      	cmp	r4, #5
 8006fcc:	d0d3      	beq.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8006fce:	f1b4 1f01 	cmp.w	r4, #65537	@ 0x10001
 8006fd2:	d0d0      	beq.n	8006f76 <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8006fd4:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006fd6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	e791      	b.n	8006f00 <HAL_TIM_SlaveConfigSynchro+0x54>
 8006fdc:	00100030 	.word	0x00100030
 8006fe0:	00100040 	.word	0x00100040

08006fe4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe4:	6a03      	ldr	r3, [r0, #32]
 8006fe6:	f023 0310 	bic.w	r3, r3, #16
 8006fea:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006fec:	6a03      	ldr	r3, [r0, #32]
{
 8006fee:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006ff0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006ff2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006ffa:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ffe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007002:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007004:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007008:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800700c:	4d14      	ldr	r5, [pc, #80]	@ (8007060 <TIM_OC2_SetConfig+0x7c>)
 800700e:	42a8      	cmp	r0, r5
 8007010:	d00f      	beq.n	8007032 <TIM_OC2_SetConfig+0x4e>
 8007012:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007016:	42a8      	cmp	r0, r5
 8007018:	d00b      	beq.n	8007032 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701a:	4d12      	ldr	r5, [pc, #72]	@ (8007064 <TIM_OC2_SetConfig+0x80>)
 800701c:	42a8      	cmp	r0, r5
 800701e:	d00f      	beq.n	8007040 <TIM_OC2_SetConfig+0x5c>
 8007020:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007024:	42a8      	cmp	r0, r5
 8007026:	d00b      	beq.n	8007040 <TIM_OC2_SetConfig+0x5c>
 8007028:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800702c:	42a8      	cmp	r0, r5
 800702e:	d10f      	bne.n	8007050 <TIM_OC2_SetConfig+0x6c>
 8007030:	e006      	b.n	8007040 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007032:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007038:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800703c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007040:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007044:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007048:	ea46 0c05 	orr.w	ip, r6, r5
 800704c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007050:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007052:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007054:	6182      	str	r2, [r0, #24]
}
 8007056:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8007058:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800705a:	6203      	str	r3, [r0, #32]
}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40014000 	.word	0x40014000

08007068 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8007068:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800706c:	2b01      	cmp	r3, #1
 800706e:	f000 80dc 	beq.w	800722a <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8007072:	2301      	movs	r3, #1
{
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800707a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800707e:	2a14      	cmp	r2, #20
 8007080:	d80c      	bhi.n	800709c <HAL_TIM_PWM_ConfigChannel+0x34>
 8007082:	e8df f002 	tbb	[pc, r2]
 8007086:	0b4f      	.short	0x0b4f
 8007088:	0b630b0b 	.word	0x0b630b0b
 800708c:	0b740b0b 	.word	0x0b740b0b
 8007090:	0b840b0b 	.word	0x0b840b0b
 8007094:	0b950b0b 	.word	0x0b950b0b
 8007098:	0b0b      	.short	0x0b0b
 800709a:	10          	.byte	0x10
 800709b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800709c:	2300      	movs	r3, #0
 800709e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 80070a2:	2001      	movs	r0, #1
}
 80070a4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070a6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a8:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80070b0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80070b2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80070b4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80070b6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070b8:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80070bc:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070c4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070c6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070ca:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ce:	4e58      	ldr	r6, [pc, #352]	@ (8007230 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80070d0:	42b3      	cmp	r3, r6
 80070d2:	d00f      	beq.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80070d4:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80070d8:	42b3      	cmp	r3, r6
 80070da:	d00b      	beq.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80070dc:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80070e0:	42b3      	cmp	r3, r6
 80070e2:	d007      	beq.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80070e4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80070e8:	42b3      	cmp	r3, r6
 80070ea:	d003      	beq.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80070ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80070f0:	42b3      	cmp	r3, r6
 80070f2:	d104      	bne.n	80070fe <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070f4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070f6:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070fa:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80070fe:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007100:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007102:	6869      	ldr	r1, [r5, #4]
 8007104:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8007106:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800710a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800710c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007110:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007118:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800711a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800711c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007120:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007122:	e00e      	b.n	8007142 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007124:	6800      	ldr	r0, [r0, #0]
 8007126:	f7ff fbd1 	bl	80068cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800712a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800712c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800712e:	f043 0308 	orr.w	r3, r3, #8
 8007132:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007134:	6983      	ldr	r3, [r0, #24]
 8007136:	f023 0304 	bic.w	r3, r3, #4
 800713a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800713c:	6983      	ldr	r3, [r0, #24]
 800713e:	4313      	orrs	r3, r2
 8007140:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8007142:	2300      	movs	r3, #0
 8007144:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007148:	2000      	movs	r0, #0
}
 800714a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f7ff ff49 	bl	8006fe4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007152:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007154:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007156:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800715a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800715c:	6983      	ldr	r3, [r0, #24]
 800715e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007162:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007164:	6983      	ldr	r3, [r0, #24]
 8007166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800716a:	6183      	str	r3, [r0, #24]
      break;
 800716c:	e7e9      	b.n	8007142 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800716e:	6800      	ldr	r0, [r0, #0]
 8007170:	f7ff fbe8 	bl	8006944 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007174:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007176:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007178:	f043 0308 	orr.w	r3, r3, #8
 800717c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800717e:	69c3      	ldr	r3, [r0, #28]
 8007180:	f023 0304 	bic.w	r3, r3, #4
 8007184:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007186:	69c3      	ldr	r3, [r0, #28]
 8007188:	4313      	orrs	r3, r2
 800718a:	61c3      	str	r3, [r0, #28]
      break;
 800718c:	e7d9      	b.n	8007142 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800718e:	6800      	ldr	r0, [r0, #0]
 8007190:	f7ff fc18 	bl	80069c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007194:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007196:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007198:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800719c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800719e:	69c3      	ldr	r3, [r0, #28]
 80071a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071a4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a6:	69c3      	ldr	r3, [r0, #28]
 80071a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071ac:	61c3      	str	r3, [r0, #28]
      break;
 80071ae:	e7c8      	b.n	8007142 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071b0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80071b2:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80071ba:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80071bc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80071be:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80071c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071c2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80071c6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80071ca:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071cc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80071ce:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071d2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d6:	4e16      	ldr	r6, [pc, #88]	@ (8007230 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80071d8:	42b3      	cmp	r3, r6
 80071da:	d00f      	beq.n	80071fc <HAL_TIM_PWM_ConfigChannel+0x194>
 80071dc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80071e0:	42b3      	cmp	r3, r6
 80071e2:	d00b      	beq.n	80071fc <HAL_TIM_PWM_ConfigChannel+0x194>
 80071e4:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80071e8:	42b3      	cmp	r3, r6
 80071ea:	d007      	beq.n	80071fc <HAL_TIM_PWM_ConfigChannel+0x194>
 80071ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80071f0:	42b3      	cmp	r3, r6
 80071f2:	d003      	beq.n	80071fc <HAL_TIM_PWM_ConfigChannel+0x194>
 80071f4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80071f8:	42b3      	cmp	r3, r6
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071fc:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071fe:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007202:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8007206:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007208:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800720a:	6869      	ldr	r1, [r5, #4]
 800720c:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 800720e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007212:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007214:	f042 0208 	orr.w	r2, r2, #8
 8007218:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800721a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800721c:	f022 0204 	bic.w	r2, r2, #4
 8007220:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007224:	430a      	orrs	r2, r1
 8007226:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007228:	e78b      	b.n	8007142 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 800722a:	2002      	movs	r0, #2
}
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40012c00 	.word	0x40012c00

08007234 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007234:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d046      	beq.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 800723c:	b470      	push	{r4, r5, r6}
 800723e:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007240:	4e23      	ldr	r6, [pc, #140]	@ (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8007242:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	2302      	movs	r3, #2
 8007246:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800724a:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 800724c:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800724e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007250:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007252:	d024      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8007254:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007258:	42b0      	cmp	r0, r6
 800725a:	d02b      	beq.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800725c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007264:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007266:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800726a:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800726c:	d00a      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800726e:	4b19      	ldr	r3, [pc, #100]	@ (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007270:	4298      	cmp	r0, r3
 8007272:	d007      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8007274:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007278:	4298      	cmp	r0, r3
 800727a:	d003      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800727c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8007280:	4298      	cmp	r0, r3
 8007282:	d104      	bne.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007284:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007286:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800728a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800728c:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800728e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007290:	2301      	movs	r3, #1
 8007292:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007296:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800729a:	bc70      	pop	{r4, r5, r6}
 800729c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800729e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072a4:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ae:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80072b0:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b2:	e7e7      	b.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072b4:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072ba:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80072bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072c4:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 80072c6:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c8:	e7dc      	b.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 80072ca:	2002      	movs	r0, #2
}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40000400 	.word	0x40000400

080072d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d045      	beq.n	800736c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 80072e0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072e2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80072e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ea:	4602      	mov	r2, r0
 80072ec:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072ee:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072f0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072f6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072fc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072fe:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007304:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007306:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800730c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800730e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007310:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007314:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007316:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007318:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800731c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800731e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007322:	4c13      	ldr	r4, [pc, #76]	@ (8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007324:	42a0      	cmp	r0, r4
 8007326:	d00b      	beq.n	8007340 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007328:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800732c:	42a0      	cmp	r0, r4
 800732e:	d007      	beq.n	8007340 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007330:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007332:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8007334:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8007338:	4608      	mov	r0, r1
}
 800733a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800733e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007340:	69cc      	ldr	r4, [r1, #28]
 8007342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007346:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007348:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800734a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800734e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007352:	6a0c      	ldr	r4, [r1, #32]
 8007354:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007358:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800735a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800735c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800735e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007362:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007364:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007368:	430b      	orrs	r3, r1
 800736a:	e7e1      	b.n	8007330 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800736c:	2002      	movs	r0, #2
}
 800736e:	4770      	bx	lr
 8007370:	40012c00 	.word	0x40012c00

08007374 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8007374:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007376:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800737a:	2801      	cmp	r0, #1
 800737c:	d047      	beq.n	800740e <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 800737e:	6810      	ldr	r0, [r2, #0]
 8007380:	3801      	subs	r0, #1
 8007382:	280f      	cmp	r0, #15
{
 8007384:	b4f0      	push	{r4, r5, r6, r7}
 8007386:	d825      	bhi.n	80073d4 <HAL_TIMEx_ConfigBreakInput+0x60>
 8007388:	4c22      	ldr	r4, [pc, #136]	@ (8007414 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 800738a:	4e23      	ldr	r6, [pc, #140]	@ (8007418 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 800738c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8007390:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8007394:	4c21      	ldr	r4, [pc, #132]	@ (800741c <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007396:	4e22      	ldr	r6, [pc, #136]	@ (8007420 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007398:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800739c:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80073a0:	2901      	cmp	r1, #1
 80073a2:	d01d      	beq.n	80073e0 <HAL_TIMEx_ConfigBreakInput+0x6c>
 80073a4:	2902      	cmp	r1, #2
 80073a6:	d12c      	bne.n	8007402 <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80073a8:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80073aa:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80073ac:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80073ae:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80073b0:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80073b2:	fa01 f10c 	lsl.w	r1, r1, ip
 80073b6:	ea81 0207 	eor.w	r2, r1, r7
 80073ba:	402a      	ands	r2, r5
 80073bc:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80073be:	ea80 0102 	eor.w	r1, r0, r2
 80073c2:	4021      	ands	r1, r4
 80073c4:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80073c6:	6672      	str	r2, [r6, #100]	@ 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80073ce:	2000      	movs	r0, #0

  return status;
}
 80073d0:	bcf0      	pop	{r4, r5, r6, r7}
 80073d2:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80073d4:	2700      	movs	r7, #0
  switch (BreakInput)
 80073d6:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80073d8:	46bc      	mov	ip, r7
 80073da:	463c      	mov	r4, r7
 80073dc:	463d      	mov	r5, r7
  switch (BreakInput)
 80073de:	d1e1      	bne.n	80073a4 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80073e0:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 80073e2:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80073e4:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80073e6:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 80073e8:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80073ea:	fa01 f10c 	lsl.w	r1, r1, ip
 80073ee:	ea81 0207 	eor.w	r2, r1, r7
 80073f2:	402a      	ands	r2, r5
 80073f4:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80073f6:	ea80 0102 	eor.w	r1, r0, r2
 80073fa:	4021      	ands	r1, r4
 80073fc:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 80073fe:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8007400:	e7e2      	b.n	80073c8 <HAL_TIMEx_ConfigBreakInput+0x54>
  __HAL_UNLOCK(htim);
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8007408:	2001      	movs	r0, #1
}
 800740a:	bcf0      	pop	{r4, r5, r6, r7}
 800740c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800740e:	2002      	movs	r0, #2
}
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	0800a6a0 	.word	0x0800a6a0
 8007418:	0800a620 	.word	0x0800a620
 800741c:	0800a660 	.word	0x0800a660
 8007420:	0800a5e0 	.word	0x0800a5e0

08007424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007428:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800742a:	6882      	ldr	r2, [r0, #8]
 800742c:	6900      	ldr	r0, [r0, #16]
 800742e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007430:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007432:	4302      	orrs	r2, r0
 8007434:	430a      	orrs	r2, r1
 8007436:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007438:	4995      	ldr	r1, [pc, #596]	@ (8007690 <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800743a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800743c:	4029      	ands	r1, r5
 800743e:	430a      	orrs	r2, r1
 8007440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007446:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007448:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800744c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800744e:	4991      	ldr	r1, [pc, #580]	@ (8007694 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007450:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007452:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007454:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007456:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007458:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800745c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007460:	f000 80bb 	beq.w	80075da <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 8007464:	6a26      	ldr	r6, [r4, #32]
 8007466:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007468:	430a      	orrs	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800746c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746e:	f022 020f 	bic.w	r2, r2, #15
 8007472:	432a      	orrs	r2, r5
 8007474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007476:	4a88      	ldr	r2, [pc, #544]	@ (8007698 <UART_SetConfig+0x274>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d035      	beq.n	80074e8 <UART_SetConfig+0xc4>
 800747c:	4a87      	ldr	r2, [pc, #540]	@ (800769c <UART_SetConfig+0x278>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <UART_SetConfig+0x7c>
 8007482:	4a87      	ldr	r2, [pc, #540]	@ (80076a0 <UART_SetConfig+0x27c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	f000 8098 	beq.w	80075ba <UART_SetConfig+0x196>
 800748a:	4a86      	ldr	r2, [pc, #536]	@ (80076a4 <UART_SetConfig+0x280>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d03f      	beq.n	8007510 <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8007490:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007492:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007494:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8007498:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 800749c:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 800749e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074a0:	4b81      	ldr	r3, [pc, #516]	@ (80076a8 <UART_SetConfig+0x284>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	f003 030c 	and.w	r3, r3, #12
 80074aa:	2b0c      	cmp	r3, #12
 80074ac:	d8f0      	bhi.n	8007490 <UART_SetConfig+0x6c>
 80074ae:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <UART_SetConfig+0x90>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	080075af 	.word	0x080075af
 80074b8:	08007491 	.word	0x08007491
 80074bc:	08007491 	.word	0x08007491
 80074c0:	08007491 	.word	0x08007491
 80074c4:	08007529 	.word	0x08007529
 80074c8:	08007491 	.word	0x08007491
 80074cc:	08007491 	.word	0x08007491
 80074d0:	08007491 	.word	0x08007491
 80074d4:	08007571 	.word	0x08007571
 80074d8:	08007491 	.word	0x08007491
 80074dc:	08007491 	.word	0x08007491
 80074e0:	08007491 	.word	0x08007491
 80074e4:	08007541 	.word	0x08007541
 80074e8:	4b6f      	ldr	r3, [pc, #444]	@ (80076a8 <UART_SetConfig+0x284>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d03c      	beq.n	8007570 <UART_SetConfig+0x14c>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d022      	beq.n	8007540 <UART_SetConfig+0x11c>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d014      	beq.n	8007528 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007502:	f000 80bc 	beq.w	800767e <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007506:	f7ff f877 	bl	80065f8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800750a:	b9a8      	cbnz	r0, 8007538 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 800750c:	2000      	movs	r0, #0
 800750e:	e7c0      	b.n	8007492 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007510:	4b65      	ldr	r3, [pc, #404]	@ (80076a8 <UART_SetConfig+0x284>)
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007516:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800751a:	2b80      	cmp	r3, #128	@ 0x80
 800751c:	d028      	beq.n	8007570 <UART_SetConfig+0x14c>
 800751e:	d859      	bhi.n	80075d4 <UART_SetConfig+0x1b0>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d044      	beq.n	80075ae <UART_SetConfig+0x18a>
 8007524:	2b40      	cmp	r3, #64	@ 0x40
 8007526:	d1b3      	bne.n	8007490 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007528:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800752c:	f000 80aa 	beq.w	8007684 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8007530:	f7fe ff0e 	bl	8006350 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007534:	2800      	cmp	r0, #0
 8007536:	d0e9      	beq.n	800750c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007538:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800753a:	e006      	b.n	800754a <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800753c:	2b30      	cmp	r3, #48	@ 0x30
 800753e:	d1a7      	bne.n	8007490 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007540:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007544:	d018      	beq.n	8007578 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800754a:	6863      	ldr	r3, [r4, #4]
 800754c:	4a57      	ldr	r2, [pc, #348]	@ (80076ac <UART_SetConfig+0x288>)
 800754e:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8007552:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007556:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800755a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800755e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007562:	f1a0 0310 	sub.w	r3, r0, #16
 8007566:	4293      	cmp	r3, r2
 8007568:	d892      	bhi.n	8007490 <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	60d8      	str	r0, [r3, #12]
 800756e:	e7cd      	b.n	800750c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007570:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007574:	484e      	ldr	r0, [pc, #312]	@ (80076b0 <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007576:	d1e8      	bne.n	800754a <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007578:	6862      	ldr	r2, [r4, #4]
 800757a:	4b4c      	ldr	r3, [pc, #304]	@ (80076ac <UART_SetConfig+0x288>)
 800757c:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8007580:	fbb0 f0f1 	udiv	r0, r0, r1
 8007584:	0853      	lsrs	r3, r2, #1
 8007586:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758a:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800758e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007592:	f1a3 0210 	sub.w	r2, r3, #16
 8007596:	428a      	cmp	r2, r1
 8007598:	f63f af7a 	bhi.w	8007490 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800759c:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80075a0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075a2:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075a4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60cb      	str	r3, [r1, #12]
 80075ac:	e7ae      	b.n	800750c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ae:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80075b2:	d05d      	beq.n	8007670 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b4:	f7ff f80e 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
        break;
 80075b8:	e7a7      	b.n	800750a <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ba:	4b3b      	ldr	r3, [pc, #236]	@ (80076a8 <UART_SetConfig+0x284>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d0d3      	beq.n	8007570 <UART_SetConfig+0x14c>
 80075c8:	d8b8      	bhi.n	800753c <UART_SetConfig+0x118>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0ef      	beq.n	80075ae <UART_SetConfig+0x18a>
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d0aa      	beq.n	8007528 <UART_SetConfig+0x104>
 80075d2:	e75d      	b.n	8007490 <UART_SetConfig+0x6c>
 80075d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80075d6:	d0b3      	beq.n	8007540 <UART_SetConfig+0x11c>
 80075d8:	e75a      	b.n	8007490 <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075da:	4311      	orrs	r1, r2
 80075dc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075e0:	4931      	ldr	r1, [pc, #196]	@ (80076a8 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075e2:	f022 020f 	bic.w	r2, r2, #15
 80075e6:	432a      	orrs	r2, r5
 80075e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80075ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f6:	d048      	beq.n	800768a <UART_SetConfig+0x266>
 80075f8:	d833      	bhi.n	8007662 <UART_SetConfig+0x23e>
 80075fa:	b37b      	cbz	r3, 800765c <UART_SetConfig+0x238>
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007600:	f47f af46 	bne.w	8007490 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007604:	f7fe fea4 	bl	8006350 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007608:	2800      	cmp	r0, #0
 800760a:	f43f af7f 	beq.w	800750c <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800760e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007610:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007612:	4b26      	ldr	r3, [pc, #152]	@ (80076ac <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007614:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007618:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 800761c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007620:	4299      	cmp	r1, r3
 8007622:	f63f af35 	bhi.w	8007490 <UART_SetConfig+0x6c>
 8007626:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800762a:	f63f af31 	bhi.w	8007490 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762e:	2300      	movs	r3, #0
 8007630:	4619      	mov	r1, r3
 8007632:	f7f8 fdf1 	bl	8000218 <__aeabi_uldivmod>
 8007636:	0872      	lsrs	r2, r6, #1
 8007638:	0203      	lsls	r3, r0, #8
 800763a:	0209      	lsls	r1, r1, #8
 800763c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007640:	1898      	adds	r0, r3, r2
 8007642:	f141 0100 	adc.w	r1, r1, #0
 8007646:	4632      	mov	r2, r6
 8007648:	2300      	movs	r3, #0
 800764a:	f7f8 fde5 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800764e:	4b19      	ldr	r3, [pc, #100]	@ (80076b4 <UART_SetConfig+0x290>)
 8007650:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007654:	429a      	cmp	r2, r3
 8007656:	f63f af1b 	bhi.w	8007490 <UART_SetConfig+0x6c>
 800765a:	e786      	b.n	800756a <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 800765c:	f7fe ffba 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
        break;
 8007660:	e7d2      	b.n	8007608 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007666:	f47f af13 	bne.w	8007490 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 800766a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800766e:	e7cf      	b.n	8007610 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007670:	f7fe ffb0 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007674:	2800      	cmp	r0, #0
 8007676:	f43f af49 	beq.w	800750c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800767a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800767c:	e77c      	b.n	8007578 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 800767e:	f7fe ffbb 	bl	80065f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8007682:	e7f7      	b.n	8007674 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 8007684:	f7fe fe64 	bl	8006350 <HAL_RCC_GetSysClockFreq>
        break;
 8007688:	e7f4      	b.n	8007674 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 800768a:	4809      	ldr	r0, [pc, #36]	@ (80076b0 <UART_SetConfig+0x28c>)
 800768c:	e7c0      	b.n	8007610 <UART_SetConfig+0x1ec>
 800768e:	bf00      	nop
 8007690:	cfff69f3 	.word	0xcfff69f3
 8007694:	40008000 	.word	0x40008000
 8007698:	40013800 	.word	0x40013800
 800769c:	40004400 	.word	0x40004400
 80076a0:	40004800 	.word	0x40004800
 80076a4:	40004c00 	.word	0x40004c00
 80076a8:	40021000 	.word	0x40021000
 80076ac:	0800a6e0 	.word	0x0800a6e0
 80076b0:	00f42400 	.word	0x00f42400
 80076b4:	000ffcff 	.word	0x000ffcff

080076b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80076ba:	07da      	lsls	r2, r3, #31
{
 80076bc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076be:	d506      	bpl.n	80076ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076c0:	6801      	ldr	r1, [r0, #0]
 80076c2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80076c4:	684a      	ldr	r2, [r1, #4]
 80076c6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80076ca:	4322      	orrs	r2, r4
 80076cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ce:	079c      	lsls	r4, r3, #30
 80076d0:	d506      	bpl.n	80076e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076d2:	6801      	ldr	r1, [r0, #0]
 80076d4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80076d6:	684a      	ldr	r2, [r1, #4]
 80076d8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80076dc:	4322      	orrs	r2, r4
 80076de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076e0:	0759      	lsls	r1, r3, #29
 80076e2:	d506      	bpl.n	80076f2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076e4:	6801      	ldr	r1, [r0, #0]
 80076e6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80076e8:	684a      	ldr	r2, [r1, #4]
 80076ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80076ee:	4322      	orrs	r2, r4
 80076f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076f2:	071a      	lsls	r2, r3, #28
 80076f4:	d506      	bpl.n	8007704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076f6:	6801      	ldr	r1, [r0, #0]
 80076f8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80076fa:	684a      	ldr	r2, [r1, #4]
 80076fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007700:	4322      	orrs	r2, r4
 8007702:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007704:	06dc      	lsls	r4, r3, #27
 8007706:	d506      	bpl.n	8007716 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007708:	6801      	ldr	r1, [r0, #0]
 800770a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800770c:	688a      	ldr	r2, [r1, #8]
 800770e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007712:	4322      	orrs	r2, r4
 8007714:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007716:	0699      	lsls	r1, r3, #26
 8007718:	d506      	bpl.n	8007728 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800771a:	6801      	ldr	r1, [r0, #0]
 800771c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800771e:	688a      	ldr	r2, [r1, #8]
 8007720:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007724:	4322      	orrs	r2, r4
 8007726:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007728:	065a      	lsls	r2, r3, #25
 800772a:	d509      	bpl.n	8007740 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800772c:	6801      	ldr	r1, [r0, #0]
 800772e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007730:	684a      	ldr	r2, [r1, #4]
 8007732:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007736:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007738:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800773c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800773e:	d00b      	beq.n	8007758 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007740:	061b      	lsls	r3, r3, #24
 8007742:	d506      	bpl.n	8007752 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007744:	6802      	ldr	r2, [r0, #0]
 8007746:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007748:	6853      	ldr	r3, [r2, #4]
 800774a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800774e:	430b      	orrs	r3, r1
 8007750:	6053      	str	r3, [r2, #4]
  }
}
 8007752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007756:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007758:	684a      	ldr	r2, [r1, #4]
 800775a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800775c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007760:	4322      	orrs	r2, r4
 8007762:	604a      	str	r2, [r1, #4]
 8007764:	e7ec      	b.n	8007740 <UART_AdvFeatureConfig+0x88>
 8007766:	bf00      	nop

08007768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800776c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007770:	6804      	ldr	r4, [r0, #0]
 8007772:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 8007776:	460d      	mov	r5, r1
 8007778:	4616      	mov	r6, r2
 800777a:	d10a      	bne.n	8007792 <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777c:	69e3      	ldr	r3, [r4, #28]
 800777e:	ea35 0303 	bics.w	r3, r5, r3
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	429e      	cmp	r6, r3
 800778a:	d0f7      	beq.n	800777c <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800778c:	2000      	movs	r0, #0
}
 800778e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007792:	4607      	mov	r7, r0
 8007794:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007796:	69e2      	ldr	r2, [r4, #28]
 8007798:	ea35 0202 	bics.w	r2, r5, r2
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	42b3      	cmp	r3, r6
 80077a4:	d1f2      	bne.n	800778c <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a6:	f7fd f81f 	bl	80047e8 <HAL_GetTick>
 80077aa:	eba0 0009 	sub.w	r0, r0, r9
 80077ae:	4540      	cmp	r0, r8
 80077b0:	d830      	bhi.n	8007814 <UART_WaitOnFlagUntilTimeout+0xac>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077b2:	683c      	ldr	r4, [r7, #0]
 80077b4:	4622      	mov	r2, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f1b8 0f00 	cmp.w	r8, #0
 80077ba:	d02c      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	0758      	lsls	r0, r3, #29
 80077c0:	d5e9      	bpl.n	8007796 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c2:	69e3      	ldr	r3, [r4, #28]
 80077c4:	0519      	lsls	r1, r3, #20
 80077c6:	d5e6      	bpl.n	8007796 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80077cc:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	e844 3100 	strex	r1, r3, [r4]
 80077da:	b139      	cbz	r1, 80077ec <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	e852 3f00 	ldrex	r3, [r2]
 80077e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	e842 3100 	strex	r1, r3, [r2]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d1f7      	bne.n	80077dc <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	f102 0308 	add.w	r3, r2, #8
 80077f0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	f102 0008 	add.w	r0, r2, #8
 80077fc:	e840 3100 	strex	r1, r3, [r0]
 8007800:	2900      	cmp	r1, #0
 8007802:	d1f3      	bne.n	80077ec <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8007804:	2320      	movs	r3, #32
 8007806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800780a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800780e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          return HAL_TIMEOUT;
 8007812:	e019      	b.n	8007848 <UART_WaitOnFlagUntilTimeout+0xe0>
 8007814:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800781a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	e842 3100 	strex	r1, r3, [r2]
 8007822:	2900      	cmp	r1, #0
 8007824:	d1f7      	bne.n	8007816 <UART_WaitOnFlagUntilTimeout+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	f102 0308 	add.w	r3, r2, #8
 800782a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	f102 0008 	add.w	r0, r2, #8
 8007836:	e840 3100 	strex	r1, r3, [r0]
 800783a:	2900      	cmp	r1, #0
 800783c:	d1f3      	bne.n	8007826 <UART_WaitOnFlagUntilTimeout+0xbe>
        huart->gState = HAL_UART_STATE_READY;
 800783e:	2320      	movs	r3, #32
 8007840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 8007848:	2300      	movs	r3, #0
 800784a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 800784e:	2003      	movs	r0, #3
 8007850:	e79d      	b.n	800778e <UART_WaitOnFlagUntilTimeout+0x26>
 8007852:	bf00      	nop

08007854 <HAL_UART_Init>:
  if (huart == NULL)
 8007854:	2800      	cmp	r0, #0
 8007856:	d066      	beq.n	8007926 <HAL_UART_Init+0xd2>
{
 8007858:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800785a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800785e:	b082      	sub	sp, #8
 8007860:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007862:	2b00      	cmp	r3, #0
 8007864:	d04c      	beq.n	8007900 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8007866:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007868:	2324      	movs	r3, #36	@ 0x24
 800786a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007874:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007876:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007878:	f7ff fdd4 	bl	8007424 <UART_SetConfig>
 800787c:	2801      	cmp	r0, #1
 800787e:	d03c      	beq.n	80078fa <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007880:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d135      	bne.n	80078f2 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 800788e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007890:	6899      	ldr	r1, [r3, #8]
 8007892:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8007896:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007898:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800789c:	f041 0101 	orr.w	r1, r1, #1
 80078a0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a2:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 80078a6:	f7fc ff9f 	bl	80047e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80078b0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078b2:	d40e      	bmi.n	80078d2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	075b      	lsls	r3, r3, #29
 80078b8:	d427      	bmi.n	800790a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 80078c2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80078c6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 80078ca:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078cc:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80078ce:	b002      	add	sp, #8
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	462a      	mov	r2, r5
 80078da:	4603      	mov	r3, r0
 80078dc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff ff41 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 80078e6:	b9e0      	cbnz	r0, 8007922 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	075b      	lsls	r3, r3, #29
 80078ee:	d40c      	bmi.n	800790a <HAL_UART_Init+0xb6>
 80078f0:	e7e3      	b.n	80078ba <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80078f2:	4620      	mov	r0, r4
 80078f4:	f7ff fee0 	bl	80076b8 <UART_AdvFeatureConfig>
 80078f8:	e7c5      	b.n	8007886 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80078fa:	2001      	movs	r0, #1
}
 80078fc:	b002      	add	sp, #8
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007900:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8007904:	f7fc fd20 	bl	8004348 <HAL_UART_MspInit>
 8007908:	e7ad      	b.n	8007866 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800790a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2200      	movs	r2, #0
 8007912:	4633      	mov	r3, r6
 8007914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007918:	4620      	mov	r0, r4
 800791a:	f7ff ff25 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 800791e:	2800      	cmp	r0, #0
 8007920:	d0cb      	beq.n	80078ba <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8007922:	2003      	movs	r0, #3
 8007924:	e7d3      	b.n	80078ce <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8007926:	2001      	movs	r0, #1
}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop

0800792c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800792c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8007930:	2b01      	cmp	r3, #1
 8007932:	d017      	beq.n	8007964 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007934:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007936:	2324      	movs	r3, #36	@ 0x24
{
 8007938:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800793a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800793e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007940:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007942:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8007944:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007948:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800794c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800794e:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007950:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007952:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8007956:	2220      	movs	r2, #32
 8007958:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 800795c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007960:	4618      	mov	r0, r3
}
 8007962:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007964:	2002      	movs	r0, #2
}
 8007966:	4770      	bx	lr

08007968 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007968:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800796c:	2a01      	cmp	r2, #1
 800796e:	d037      	beq.n	80079e0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007972:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007974:	2024      	movs	r0, #36	@ 0x24
{
 8007976:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007978:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800797c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800797e:	6810      	ldr	r0, [r2, #0]
 8007980:	f020 0001 	bic.w	r0, r0, #1
 8007984:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007986:	6890      	ldr	r0, [r2, #8]
 8007988:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800798c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800798e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007990:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007992:	b310      	cbz	r0, 80079da <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007994:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007996:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007998:	4d12      	ldr	r5, [pc, #72]	@ (80079e4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800799a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800799e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079a2:	4911      	ldr	r1, [pc, #68]	@ (80079e8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80079a4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079a8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80079ac:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80079b0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079b4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079b8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079bc:	fbb1 f1f5 	udiv	r1, r1, r5
 80079c0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80079c4:	2100      	movs	r1, #0
 80079c6:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80079ca:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079cc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80079ce:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 80079d2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80079d4:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 80079d8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80079da:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80079dc:	4608      	mov	r0, r1
 80079de:	e7ef      	b.n	80079c0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80079e0:	2002      	movs	r0, #2
}
 80079e2:	4770      	bx	lr
 80079e4:	0800a6f8 	.word	0x0800a6f8
 80079e8:	0800a700 	.word	0x0800a700

080079ec <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80079ec:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 80079f0:	2a01      	cmp	r2, #1
 80079f2:	d037      	beq.n	8007a64 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80079f8:	2024      	movs	r0, #36	@ 0x24
{
 80079fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80079fc:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a00:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007a02:	6810      	ldr	r0, [r2, #0]
 8007a04:	f020 0001 	bic.w	r0, r0, #1
 8007a08:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a0a:	6890      	ldr	r0, [r2, #8]
 8007a0c:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8007a10:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a12:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a14:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a16:	b310      	cbz	r0, 8007a5e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a18:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a1a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a1c:	4d12      	ldr	r5, [pc, #72]	@ (8007a68 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a1e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a22:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a26:	4911      	ldr	r1, [pc, #68]	@ (8007a6c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a28:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a2c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a30:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a34:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a38:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a3a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a3c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a40:	fbb1 f1f5 	udiv	r1, r1, r5
 8007a44:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007a4e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a50:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007a52:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 8007a56:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007a58:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8007a5c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007a5e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007a60:	4608      	mov	r0, r1
 8007a62:	e7ef      	b.n	8007a44 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007a64:	2002      	movs	r0, #2
}
 8007a66:	4770      	bx	lr
 8007a68:	0800a6f8 	.word	0x0800a6f8
 8007a6c:	0800a700 	.word	0x0800a700

08007a70 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8007a70:	88c0      	ldrh	r0, [r0, #6]
 8007a72:	4770      	bx	lr

08007a74 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007a74:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8007a76:	8840      	ldrh	r0, [r0, #2]
 8007a78:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007a7c:	0c00      	lsrs	r0, r0, #16
 8007a7e:	4770      	bx	lr

08007a80 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007a80:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007a82:	8803      	ldrh	r3, [r0, #0]
 8007a84:	140d      	asrs	r5, r1, #16
 8007a86:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8007a88:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007a8c:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007a90:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8007a94:	428b      	cmp	r3, r1
{
 8007a96:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8007a98:	da0f      	bge.n	8007aba <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8007a9a:	8846      	ldrh	r6, [r0, #2]
 8007a9c:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007aa0:	4282      	cmp	r2, r0
 8007aa2:	dd13      	ble.n	8007acc <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8007aa4:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8007aa6:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8007aaa:	bfb8      	it	lt
 8007aac:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8007aae:	f7f9 fea1 	bl	80017f4 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8007ab2:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8007ab4:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8007ab6:	db0e      	blt.n	8007ad6 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8007ab8:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8007aba:	b2a4      	uxth	r4, r4
 8007abc:	2000      	movs	r0, #0
 8007abe:	f364 000f 	bfi	r0, r4, #0, #16
 8007ac2:	b2ad      	uxth	r5, r5
 8007ac4:	f365 401f 	bfi	r0, r5, #16, #16
}
 8007ac8:	b004      	add	sp, #16
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8007acc:	1a98      	subs	r0, r3, r2
 8007ace:	f7f9 fe91 	bl	80017f4 <MCM_Sqrt>
        if (Vqd.q < 0)
 8007ad2:	2c00      	cmp	r4, #0
 8007ad4:	daf0      	bge.n	8007ab8 <Circle_Limitation+0x38>
          new_q = - new_q;
 8007ad6:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8007ad8:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8007ada:	e7ee      	b.n	8007aba <Circle_Limitation+0x3a>

08007adc <esc_boot>:
  * @brief  Boot function to initialize the ESC board.
  * @retval none.
  */
void esc_boot(ESC_Handle_t * pHandle)
{
  TIM_TypeDef * TIMx = pHandle->pESC_params->Command_TIM;
 8007adc:	6803      	ldr	r3, [r0, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	f042 0210 	orr.w	r2, r2, #16
 8007ae6:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	f042 0202 	orr.w	r2, r2, #2
 8007aee:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007af0:	6a1a      	ldr	r2, [r3, #32]
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_EnableIT_CC1 (TIMx);
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1);
  LL_TIM_EnableCounter(TIMx);
#ifdef ESC_BEEP_FEATURE
  pHandle->beep_state = SM_BEEP_1;
 8007af2:	f04f 0c01 	mov.w	ip, #1
 8007af6:	ea42 020c 	orr.w	r2, r2, ip
 8007afa:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007afc:	681a      	ldr	r2, [r3, #0]
  pHandle->phase_check_status = false;
 8007afe:	2100      	movs	r1, #0
 8007b00:	ea42 020c 	orr.w	r2, r2, ip
 8007b04:	601a      	str	r2, [r3, #0]
  pHandle->beep_state = SM_BEEP_1;
 8007b06:	f880 c032 	strb.w	ip, [r0, #50]	@ 0x32
  pHandle->phase_check_status = false;
 8007b0a:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
#endif
  
}
 8007b0e:	4770      	bx	lr

08007b10 <esc_pwm_control>:
  * @brief  This is the main function to use in the main.c in order to start the current example 
  * @param  None
  * @retval None
  */
void esc_pwm_control(ESC_Handle_t * pHandle)
{
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ESC_State_t ESC_Fault_Occured;
     
#ifdef ESC_BEEP_FEATURE    
  if ( pHandle->phase_check_status == false)
 8007b12:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
{
 8007b16:	4604      	mov	r4, r0
  if ( pHandle->phase_check_status == false)
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d13b      	bne.n	8007b94 <esc_pwm_control+0x84>
 return (ESC_Beep_loop_STATUS);
}

static bool esc_phase_check(ESC_Handle_t * pHandle)
{ 
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8007b1c:	6803      	ldr	r3, [r0, #0]
   bool ESC_phase_check_status = false;
 
 /* TIMx Peripheral Configuration -------------------------------------------*/    
  if(pHandle-> start_check_flag == false)
 8007b1e:	f890 1035 	ldrb.w	r1, [r0, #53]	@ 0x35
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8007b22:	685b      	ldr	r3, [r3, #4]
  if(pHandle-> start_check_flag == false)
 8007b24:	bb51      	cbnz	r1, 8007b7c <esc_pwm_control+0x6c>
  {
    pHandle-> start_check_flag = true;
 8007b26:	2101      	movs	r1, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8007b28:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8007b2c:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
 8007b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	f422 62aa 	bic.w	r2, r2, #1360	@ 0x550
 8007b38:	f022 0205 	bic.w	r2, r2, #5
 8007b3c:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	f442 7288 	orr.w	r2, r2, #272	@ 0x110
 8007b44:	430a      	orrs	r2, r1
 8007b46:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  
    LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
                                   | LL_TIM_CHANNEL_CH3 );
    
    LL_TIM_EnableAllOutputs (TIMx);
    pHandle->beep_state = SM_BEEP_1;
 8007b50:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b54:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b58:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8007b5c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b60:	635a      	str	r2, [r3, #52]	@ 0x34
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	f022 0211 	bic.w	r2, r2, #17
 8007b68:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007b6a:	6a1a      	ldr	r2, [r3, #32]
 8007b6c:	f442 62a8 	orr.w	r2, r2, #1344	@ 0x540
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 );
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2N
                                     | LL_TIM_CHANNEL_CH3N | LL_TIM_CHANNEL_CH3));        

      }
      pHandle->beep_counter++;
 8007b70:	2101      	movs	r1, #1
 8007b72:	f042 0204 	orr.w	r2, r2, #4
 8007b76:	621a      	str	r2, [r3, #32]
 8007b78:	8621      	strh	r1, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007b7a:	e0e6      	b.n	8007d4a <esc_pwm_control+0x23a>
  switch (pHandle->beep_state)
 8007b7c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8007b80:	3a01      	subs	r2, #1
 8007b82:	2a03      	cmp	r2, #3
 8007b84:	f200 80e1 	bhi.w	8007d4a <esc_pwm_control+0x23a>
 8007b88:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007b8c:	00f80173 	.word	0x00f80173
 8007b90:	00d600e1 	.word	0x00d600e1
    if (MC_GetSTMStateMotor1() == FAULT_OVER)
 8007b94:	f7f9 fbf8 	bl	8001388 <MC_GetSTMStateMotor1>
 8007b98:	280b      	cmp	r0, #11
 8007b9a:	f000 811d 	beq.w	8007dd8 <esc_pwm_control+0x2c8>
  switch (pHandle->sm_state)
 8007b9e:	f894 5036 	ldrb.w	r5, [r4, #54]	@ 0x36
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 8007ba2:	f894 2037 	ldrb.w	r2, [r4, #55]	@ 0x37
 8007ba6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
  ESC_Params_t const * pESC_params = pHandle->pESC_params;
 8007baa:	6826      	ldr	r6, [r4, #0]
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	f000 8101 	beq.w	8007db4 <esc_pwm_control+0x2a4>
     pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8007bb2:	68f3      	ldr	r3, [r6, #12]
 8007bb4:	6223      	str	r3, [r4, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bb6:	4ba1      	ldr	r3, [pc, #644]	@ (8007e3c <esc_pwm_control+0x32c>)
     pHandle->watchdog_counter_prev = pHandle->watchdog_counter;
 8007bb8:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f422 62aa 	bic.w	r2, r2, #1360	@ 0x550
 8007bc2:	f022 0205 	bic.w	r2, r2, #5
 8007bc6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007bc8:	f640 3211 	movw	r2, #2833	@ 0xb11
 8007bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  SET_BIT(TIMx->CCER, Channels);
 8007bce:	6a1a      	ldr	r2, [r3, #32]
 8007bd0:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8007bd4:	f042 0205 	orr.w	r2, r2, #5
 8007bd8:	621a      	str	r2, [r3, #32]
  switch (pHandle->sm_state)
 8007bda:	2d03      	cmp	r5, #3
 8007bdc:	d823      	bhi.n	8007c26 <esc_pwm_control+0x116>
 8007bde:	e8df f005 	tbb	[pc, r5]
 8007be2:	8594      	.short	0x8594
 8007be4:	236d      	.short	0x236d
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,0);
        LL_TIM_OC_SetCompareCH2 (TIMx,0);
        LL_TIM_OC_SetCompareCH3 (TIMx,0);
      }
      pHandle->beep_counter++;
 8007be6:	3201      	adds	r2, #1
 8007be8:	b292      	uxth	r2, r2
      
      if(pHandle->beep_counter > 1000)
 8007bea:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
      pHandle->beep_counter++;
 8007bee:	8622      	strh	r2, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > 1000)
 8007bf0:	f240 80ab 	bls.w	8007d4a <esc_pwm_control+0x23a>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bf4:	4b91      	ldr	r3, [pc, #580]	@ (8007e3c <esc_pwm_control+0x32c>)
      {
        pHandle->beep_state =  SM_BEEP_1; 
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	f422 62aa 	bic.w	r2, r2, #1360	@ 0x550
        pHandle->beep_counter = 0; 
 8007c02:	2000      	movs	r0, #0
 8007c04:	f022 0205 	bic.w	r2, r2, #5
 8007c08:	8620      	strh	r0, [r4, #48]	@ 0x30
 8007c0a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007c0c:	f640 3211 	movw	r2, #2833	@ 0xb11
 8007c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  SET_BIT(TIMx->CCER, Channels);
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8007c18:	f042 0205 	orr.w	r2, r2, #5
 8007c1c:	621a      	str	r2, [r3, #32]
        esc_reset_pwm_ch(pHandle);
        pHandle-> start_check_flag = false;
 8007c1e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    pHandle->phase_check_status = esc_phase_check (pHandle);
 8007c22:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
}
 8007c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (pHandle->sm_state)
 8007c28:	2500      	movs	r5, #0
       if (pHandle->restart_delay == 0)
 8007c2a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 80e4 	bne.w	8007dfc <esc_pwm_control+0x2ec>
             pHandle->pwm_accumulator = 0;  
 8007c34:	e9c4 3305 	strd	r3, r3, [r4, #20]
            pHandle->sm_state = ESC_ARMING;  
 8007c38:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
            pHandle->Ton_value  = 0;
 8007c3c:	62a3      	str	r3, [r4, #40]	@ 0x28
            pHandle->arming_counter = 0;
 8007c3e:	61e3      	str	r3, [r4, #28]
            pHandle->buffer_completed = false;
 8007c40:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 8007c44:	2d01      	cmp	r5, #1
 8007c46:	d1ee      	bne.n	8007c26 <esc_pwm_control+0x116>
  if( pHandle-> start_check_flag == false)
 8007c48:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8007c4c:	6873      	ldr	r3, [r6, #4]
  if( pHandle-> start_check_flag == false)
 8007c4e:	b9a2      	cbnz	r2, 8007c7a <esc_pwm_control+0x16a>
     pHandle-> start_check_flag = true;
 8007c50:	2101      	movs	r1, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8007c52:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8007c56:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
 8007c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c5c:	6a1a      	ldr	r2, [r3, #32]
 8007c5e:	f422 62aa 	bic.w	r2, r2, #1360	@ 0x550
 8007c62:	f022 0205 	bic.w	r2, r2, #5
 8007c66:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007c68:	6a1a      	ldr	r2, [r3, #32]
 8007c6a:	f442 7288 	orr.w	r2, r2, #272	@ 0x110
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c78:	645a      	str	r2, [r3, #68]	@ 0x44
  switch (pHandle->beep_state)
 8007c7a:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 8007c7e:	2a03      	cmp	r2, #3
 8007c80:	f000 814a 	beq.w	8007f18 <esc_pwm_control+0x408>
 8007c84:	2a04      	cmp	r2, #4
 8007c86:	f000 8123 	beq.w	8007ed0 <esc_pwm_control+0x3c0>
 8007c8a:	2a01      	cmp	r2, #1
 8007c8c:	d1cb      	bne.n	8007c26 <esc_pwm_control+0x116>
      if(pHandle->beep_counter == 0)
 8007c8e:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8007c90:	2900      	cmp	r1, #0
 8007c92:	f040 8173 	bne.w	8007f7c <esc_pwm_control+0x46c>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c96:	f64f 51e8 	movw	r1, #65000	@ 0xfde8
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c9a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007c9e:	6358      	str	r0, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ca0:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ca2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ca4:	6a19      	ldr	r1, [r3, #32]
 8007ca6:	f421 7188 	bic.w	r1, r1, #272	@ 0x110
 8007caa:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007cac:	6a19      	ldr	r1, [r3, #32]
 8007cae:	f441 6188 	orr.w	r1, r1, #1088	@ 0x440
 8007cb2:	f041 0105 	orr.w	r1, r1, #5
 8007cb6:	6219      	str	r1, [r3, #32]
      pHandle->beep_counter++;
 8007cb8:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (pHandle->sm_state)
 8007cbc:	2500      	movs	r5, #0
      if( pHandle->Ton_value < pESC_params->Ton_min)
 8007cbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007cc0:	69b2      	ldr	r2, [r6, #24]
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	f080 80be 	bcs.w	8007e44 <esc_pwm_control+0x334>
        pHandle->turnoff_delay --;
 8007cc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cca:	3b01      	subs	r3, #1
        if(pHandle->turnoff_delay <= 0)
 8007ccc:	2b00      	cmp	r3, #0
        pHandle->turnoff_delay --;
 8007cce:	6263      	str	r3, [r4, #36]	@ 0x24
        if(pHandle->turnoff_delay <= 0)
 8007cd0:	dca9      	bgt.n	8007c26 <esc_pwm_control+0x116>
          pHandle->sm_state = ESC_STOP; 
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
          pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 8007cd8:	6933      	ldr	r3, [r6, #16]
 8007cda:	6263      	str	r3, [r4, #36]	@ 0x24
          MCI_StopMotor( pMCI[pESC_params->motor] );
 8007cdc:	f896 2028 	ldrb.w	r2, [r6, #40]	@ 0x28
 8007ce0:	4b57      	ldr	r3, [pc, #348]	@ (8007e40 <esc_pwm_control+0x330>)
 8007ce2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ce6:	f7f9 fc0f 	bl	8001508 <MCI_StopMotor>
 8007cea:	e0b8      	b.n	8007e5e <esc_pwm_control+0x34e>
  switch (pHandle->sm_state)
 8007cec:	2500      	movs	r5, #0
      if (pHandle->Ton_value >= pESC_params->Ton_min)
 8007cee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007cf0:	69b3      	ldr	r3, [r6, #24]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	f080 8117 	bcs.w	8007f26 <esc_pwm_control+0x416>
        if (pHandle->Ton_value < pESC_params->Ton_arming)
 8007cf8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007cfa:	69f3      	ldr	r3, [r6, #28]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d292      	bcs.n	8007c26 <esc_pwm_control+0x116>
          pHandle->sm_state = ESC_ARMING;          
 8007d00:	2300      	movs	r3, #0
 8007d02:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
          pHandle->arming_counter  = 0;
 8007d06:	61e3      	str	r3, [r4, #28]
 8007d08:	e79c      	b.n	8007c44 <esc_pwm_control+0x134>
      if((pHandle->Ton_value >= pESC_params->Ton_arming) && (pHandle->Ton_value < pESC_params->Ton_min)) 
 8007d0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007d0c:	69f2      	ldr	r2, [r6, #28]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d84d      	bhi.n	8007dae <esc_pwm_control+0x29e>
 8007d12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007d14:	69b2      	ldr	r2, [r6, #24]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d949      	bls.n	8007dae <esc_pwm_control+0x29e>
        pHandle->arming_counter++;
 8007d1a:	69e3      	ldr	r3, [r4, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 8007d1c:	68b2      	ldr	r2, [r6, #8]
        pHandle->arming_counter++;
 8007d1e:	3301      	adds	r3, #1
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 8007d20:	4293      	cmp	r3, r2
        pHandle->arming_counter++;
 8007d22:	61e3      	str	r3, [r4, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 8007d24:	d98e      	bls.n	8007c44 <esc_pwm_control+0x134>
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8007d26:	68f1      	ldr	r1, [r6, #12]
           pHandle->arming_counter  = 0;
 8007d28:	2300      	movs	r3, #0
           pHandle->sm_state = ESC_ARMED;   
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	86e2      	strh	r2, [r4, #54]	@ 0x36
           pHandle->watchdog_counter_prev = 0;   
 8007d2e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8007d32:	e9c4 3107 	strd	r3, r1, [r4, #28]
}
 8007d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(pHandle->beep_counter == 0)
 8007d38:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	f47f af53 	bne.w	8007be6 <esc_pwm_control+0xd6>
      pHandle->beep_counter++;
 8007d40:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d42:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007d48:	8621      	strh	r1, [r4, #48]	@ 0x30
{
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	e769      	b.n	8007c22 <esc_pwm_control+0x112>
    if(pHandle->beep_counter == 0)
 8007d4e:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	d167      	bne.n	8007e24 <esc_pwm_control+0x314>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d54:	f24d 62d8 	movw	r2, #55000	@ 0xd6d8
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d58:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8007d5c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d60:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	f422 7288 	bic.w	r2, r2, #272	@ 0x110
 8007d68:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007d6a:	6a1a      	ldr	r2, [r3, #32]
 8007d6c:	f442 6288 	orr.w	r2, r2, #1088	@ 0x440
      pHandle->beep_counter++;
 8007d70:	2101      	movs	r1, #1
 8007d72:	f042 0205 	orr.w	r2, r2, #5
 8007d76:	621a      	str	r2, [r3, #32]
 8007d78:	8621      	strh	r1, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007d7a:	e7e6      	b.n	8007d4a <esc_pwm_control+0x23a>
    if(pHandle->beep_counter == 0)
 8007d7c:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d13f      	bne.n	8007e02 <esc_pwm_control+0x2f2>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d82:	f24f 2230 	movw	r2, #62000	@ 0xf230
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d86:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8007d8a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d8c:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	f442 628a 	orr.w	r2, r2, #1104	@ 0x450
      pHandle->beep_counter++;
 8007da2:	2101      	movs	r1, #1
 8007da4:	f042 0204 	orr.w	r2, r2, #4
 8007da8:	621a      	str	r2, [r3, #32]
 8007daa:	8621      	strh	r1, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007dac:	e7cd      	b.n	8007d4a <esc_pwm_control+0x23a>
         pHandle->arming_counter  = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61e3      	str	r3, [r4, #28]
}
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     if(pHandle->pwm_timeout == 0)
 8007db4:	6a23      	ldr	r3, [r4, #32]
 8007db6:	b9f3      	cbnz	r3, 8007df6 <esc_pwm_control+0x2e6>
       pHandle->Ton_value  = 0;
 8007db8:	62a3      	str	r3, [r4, #40]	@ 0x28
  switch (pHandle->sm_state)
 8007dba:	2d03      	cmp	r5, #3
 8007dbc:	f63f af33 	bhi.w	8007c26 <esc_pwm_control+0x116>
 8007dc0:	a301      	add	r3, pc, #4	@ (adr r3, 8007dc8 <esc_pwm_control+0x2b8>)
 8007dc2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007eb9 	.word	0x08007eb9
 8007dcc:	08007cef 	.word	0x08007cef
 8007dd0:	08007eb5 	.word	0x08007eb5
 8007dd4:	08007ecd 	.word	0x08007ecd
     if (MC_GetOccurredFaultsMotor1() == MC_UNDER_VOLT)
 8007dd8:	f7f9 fad0 	bl	800137c <MC_GetOccurredFaultsMotor1>
 8007ddc:	2804      	cmp	r0, #4
       pHandle->phase_check_status = false;
 8007dde:	bf08      	it	eq
 8007de0:	2300      	moveq	r3, #0
     pHandle->sm_state = ESC_ARMING;   
 8007de2:	f04f 0500 	mov.w	r5, #0
       pHandle->phase_check_status = false;
 8007de6:	bf08      	it	eq
 8007de8:	86a3      	strheq	r3, [r4, #52]	@ 0x34
     MC_AcknowledgeFaultMotor1();
 8007dea:	f7f9 fac1 	bl	8001370 <MC_AcknowledgeFaultMotor1>
     pHandle->sm_state = ESC_ARMING;   
 8007dee:	f884 5036 	strb.w	r5, [r4, #54]	@ 0x36
     pHandle->arming_counter  = 0;
 8007df2:	61e5      	str	r5, [r4, #28]
 8007df4:	e6d5      	b.n	8007ba2 <esc_pwm_control+0x92>
       pHandle->pwm_timeout--;
 8007df6:	3b01      	subs	r3, #1
 8007df8:	6223      	str	r3, [r4, #32]
 8007dfa:	e6ee      	b.n	8007bda <esc_pwm_control+0xca>
            pHandle->restart_delay--;
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	85a3      	strh	r3, [r4, #44]	@ 0x2c
}
 8007e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->beep_counter++;
 8007e02:	3201      	adds	r2, #1
 8007e04:	b292      	uxth	r2, r2
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007e06:	2a64      	cmp	r2, #100	@ 0x64
      pHandle->beep_counter++;
 8007e08:	8622      	strh	r2, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007e0a:	d99e      	bls.n	8007d4a <esc_pwm_control+0x23a>
        pHandle->beep_counter = 0;
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	8622      	strh	r2, [r4, #48]	@ 0x30
        pHandle->beep_state =  SM_BEEP_3; 
 8007e10:	2003      	movs	r0, #3
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e12:	f640 31b8 	movw	r1, #3000	@ 0xbb8
  WRITE_REG(TIMx->ARR, AutoReload);
 8007e16:	f24d 62d8 	movw	r2, #55000	@ 0xd6d8
 8007e1a:	f884 0032 	strb.w	r0, [r4, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e1e:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->ARR, AutoReload);
 8007e20:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007e22:	e792      	b.n	8007d4a <esc_pwm_control+0x23a>
      pHandle->beep_counter++;
 8007e24:	3201      	adds	r2, #1
 8007e26:	b292      	uxth	r2, r2
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007e28:	2a64      	cmp	r2, #100	@ 0x64
      pHandle->beep_counter++;
 8007e2a:	8622      	strh	r2, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007e2c:	d98d      	bls.n	8007d4a <esc_pwm_control+0x23a>
        pHandle->beep_state =  SM_BEEP_4; 
 8007e2e:	2204      	movs	r2, #4
        pHandle->beep_counter = 0;
 8007e30:	2300      	movs	r3, #0
        pHandle->beep_state =  SM_BEEP_4; 
 8007e32:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
        pHandle->beep_counter = 0;
 8007e36:	8623      	strh	r3, [r4, #48]	@ 0x30
 8007e38:	e787      	b.n	8007d4a <esc_pwm_control+0x23a>
 8007e3a:	bf00      	nop
 8007e3c:	40012c00 	.word	0x40012c00
 8007e40:	20001b3c 	.word	0x20001b3c
        if(pHandle->Ton_value <= pESC_params->Ton_max)
 8007e44:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007e46:	6971      	ldr	r1, [r6, #20]
        pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 8007e48:	6933      	ldr	r3, [r6, #16]
 8007e4a:	6263      	str	r3, [r4, #36]	@ 0x24
        if(pHandle->Ton_value <= pESC_params->Ton_max)
 8007e4c:	4288      	cmp	r0, r1
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_max) + pESC_params->speed_min_valueRPM;  
 8007e4e:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
        if(pHandle->Ton_value <= pESC_params->Ton_max)
 8007e50:	d925      	bls.n	8007e9e <esc_pwm_control+0x38e>
          new_speed = pESC_params->speed_max_valueRPM;
 8007e52:	461f      	mov	r7, r3
        if (MC_GetSTMStateMotor1() == RUN)
 8007e54:	f7f9 fa98 	bl	8001388 <MC_GetSTMStateMotor1>
 8007e58:	2806      	cmp	r0, #6
 8007e5a:	f000 8081 	beq.w	8007f60 <esc_pwm_control+0x450>
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 8007e5e:	2d01      	cmp	r5, #1
 8007e60:	f47f aee1 	bne.w	8007c26 <esc_pwm_control+0x116>
 8007e64:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f47f aedc 	bne.w	8007c26 <esc_pwm_control+0x116>
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8007e6e:	6826      	ldr	r6, [r4, #0]
 8007e70:	e6ea      	b.n	8007c48 <esc_pwm_control+0x138>
    if(pHandle->beep_counter == 0)
 8007e72:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
      if(pHandle->beep_counter == 0)
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	f43f ae6d 	beq.w	8007b54 <esc_pwm_control+0x44>
      pHandle->beep_counter++;
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	b292      	uxth	r2, r2
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007e7e:	2a64      	cmp	r2, #100	@ 0x64
      pHandle->beep_counter++;
 8007e80:	8622      	strh	r2, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007e82:	f67f af62 	bls.w	8007d4a <esc_pwm_control+0x23a>
        pHandle->beep_counter = 0;
 8007e86:	2200      	movs	r2, #0
 8007e88:	8622      	strh	r2, [r4, #48]	@ 0x30
        pHandle->beep_state =  SM_BEEP_2; 
 8007e8a:	2002      	movs	r0, #2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e8c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
  WRITE_REG(TIMx->ARR, AutoReload);
 8007e90:	f24f 2230 	movw	r2, #62000	@ 0xf230
 8007e94:	f884 0032 	strb.w	r0, [r4, #50]	@ 0x32
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e98:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->ARR, AutoReload);
 8007e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007e9c:	e755      	b.n	8007d4a <esc_pwm_control+0x23a>
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_max) + pESC_params->speed_min_valueRPM;  
 8007e9e:	8cf0      	ldrh	r0, [r6, #38]	@ 0x26
 8007ea0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007ea2:	1a1b      	subs	r3, r3, r0
 8007ea4:	1a8a      	subs	r2, r1, r2
 8007ea6:	fb02 f303 	mul.w	r3, r2, r3
 8007eaa:	6a32      	ldr	r2, [r6, #32]
 8007eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb0:	181f      	adds	r7, r3, r0
 8007eb2:	e7cf      	b.n	8007e54 <esc_pwm_control+0x344>
  switch (pHandle->sm_state)
 8007eb4:	2501      	movs	r5, #1
 8007eb6:	e702      	b.n	8007cbe <esc_pwm_control+0x1ae>
      if((pHandle->Ton_value >= pESC_params->Ton_arming) && (pHandle->Ton_value < pESC_params->Ton_min)) 
 8007eb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007eba:	69f2      	ldr	r2, [r6, #28]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d84c      	bhi.n	8007f5a <esc_pwm_control+0x44a>
 8007ec0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007ec2:	69b3      	ldr	r3, [r6, #24]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d248      	bcs.n	8007f5a <esc_pwm_control+0x44a>
 8007ec8:	2501      	movs	r5, #1
 8007eca:	e726      	b.n	8007d1a <esc_pwm_control+0x20a>
  switch (pHandle->sm_state)
 8007ecc:	2501      	movs	r5, #1
 8007ece:	e6ac      	b.n	8007c2a <esc_pwm_control+0x11a>
    if(pHandle->beep_counter == 0)
 8007ed0:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007ed2:	b912      	cbnz	r2, 8007eda <esc_pwm_control+0x3ca>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ed4:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ed6:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
      pHandle->beep_counter++;
 8007eda:	1c53      	adds	r3, r2, #1
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 8007edc:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      pHandle->beep_counter++;
 8007ede:	b29b      	uxth	r3, r3
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 8007ee0:	429a      	cmp	r2, r3
      pHandle->beep_counter++;
 8007ee2:	8623      	strh	r3, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 8007ee4:	f4bf ae9f 	bcs.w	8007c26 <esc_pwm_control+0x116>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ee8:	4b31      	ldr	r3, [pc, #196]	@ (8007fb0 <esc_pwm_control+0x4a0>)
        pHandle->beep_state =  SM_BEEP_1; 
 8007eea:	2201      	movs	r2, #1
 8007eec:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
 8007ef0:	6a1a      	ldr	r2, [r3, #32]
 8007ef2:	f422 62aa 	bic.w	r2, r2, #1360	@ 0x550
        pHandle->beep_counter = 0;
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	f022 0205 	bic.w	r2, r2, #5
  WRITE_REG(TIMx->ARR, AutoReload);
 8007efc:	f640 3011 	movw	r0, #2833	@ 0xb11
 8007f00:	8621      	strh	r1, [r4, #48]	@ 0x30
  CLEAR_BIT(TIMx->CCER, Channels);
 8007f02:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007f04:	62d8      	str	r0, [r3, #44]	@ 0x2c
  SET_BIT(TIMx->CCER, Channels);
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8007f0c:	f042 0205 	orr.w	r2, r2, #5
 8007f10:	621a      	str	r2, [r3, #32]
        pHandle-> start_check_flag = false;
 8007f12:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
}
 8007f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(pHandle->beep_counter == 0)
 8007f18:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d13c      	bne.n	8007f98 <esc_pwm_control+0x488>
      pHandle->beep_counter++;
 8007f1e:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8007f22:	8621      	strh	r1, [r4, #48]	@ 0x30
}
 8007f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (pESC_params->speed_min_valueRPM/6), 0 );
 8007f26:	8cf1      	ldrh	r1, [r6, #38]	@ 0x26
 8007f28:	4b22      	ldr	r3, [pc, #136]	@ (8007fb4 <esc_pwm_control+0x4a4>)
 8007f2a:	4f23      	ldr	r7, [pc, #140]	@ (8007fb8 <esc_pwm_control+0x4a8>)
 8007f2c:	fba3 3101 	umull	r3, r1, r3, r1
 8007f30:	f896 3028 	ldrb.w	r3, [r6, #40]	@ 0x28
 8007f34:	0889      	lsrs	r1, r1, #2
 8007f36:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f7f9 fa48 	bl	80013d0 <MCI_ExecSpeedRamp>
        cmd_status = MCI_StartMotor( pMCI[pESC_params->motor] );
 8007f40:	f896 3028 	ldrb.w	r3, [r6, #40]	@ 0x28
 8007f44:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8007f48:	f7f9 faae 	bl	80014a8 <MCI_StartMotor>
        pHandle->restart_delay = STOP_DURATION;
 8007f4c:	f44f 7348 	mov.w	r3, #800	@ 0x320
        if(cmd_status==false)    
 8007f50:	0040      	lsls	r0, r0, #1
 8007f52:	f884 0036 	strb.w	r0, [r4, #54]	@ 0x36
        pHandle->restart_delay = STOP_DURATION;
 8007f56:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8007f58:	e781      	b.n	8007e5e <esc_pwm_control+0x34e>
         pHandle->arming_counter  = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61e3      	str	r3, [r4, #28]
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 8007f5e:	e673      	b.n	8007c48 <esc_pwm_control+0x138>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
 8007f60:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <esc_pwm_control+0x4a4>)
 8007f62:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 8007f66:	fba3 2307 	umull	r2, r3, r3, r7
 8007f6a:	4a13      	ldr	r2, [pc, #76]	@ (8007fb8 <esc_pwm_control+0x4a8>)
 8007f6c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007f70:	f343 018f 	sbfx	r1, r3, #2, #16
 8007f74:	2232      	movs	r2, #50	@ 0x32
 8007f76:	f7f9 fa2b 	bl	80013d0 <MCI_ExecSpeedRamp>
 8007f7a:	e770      	b.n	8007e5e <esc_pwm_control+0x34e>
      pHandle->beep_counter++;
 8007f7c:	1c4b      	adds	r3, r1, #1
 8007f7e:	b29b      	uxth	r3, r3
      if(pHandle->beep_counter > BEEP_TIME_MAX)
 8007f80:	2b64      	cmp	r3, #100	@ 0x64
      pHandle->beep_counter++;
 8007f82:	8623      	strh	r3, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX)
 8007f84:	f67f ae4f 	bls.w	8007c26 <esc_pwm_control+0x116>
          pHandle->beep_state =  SM_BEEP_4; 
 8007f88:	2204      	movs	r2, #4
          pHandle->beep_stop_time = 570;
 8007f8a:	f240 233a 	movw	r3, #570	@ 0x23a
          pHandle->beep_state =  SM_BEEP_4; 
 8007f8e:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
          pHandle->beep_stop_time = 570;
 8007f92:	f8c4 302e 	str.w	r3, [r4, #46]	@ 0x2e
}
 8007f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->beep_counter++;
 8007f98:	1c53      	adds	r3, r2, #1
 8007f9a:	b29b      	uxth	r3, r3
      if(pHandle->beep_counter > 50)
 8007f9c:	2b32      	cmp	r3, #50	@ 0x32
      pHandle->beep_counter++;
 8007f9e:	8623      	strh	r3, [r4, #48]	@ 0x30
      if(pHandle->beep_counter > 50)
 8007fa0:	f67f ae41 	bls.w	8007c26 <esc_pwm_control+0x116>
        pHandle->beep_state =  SM_BEEP_1; 
 8007fa4:	2201      	movs	r2, #1
        pHandle->beep_counter = 0;
 8007fa6:	2300      	movs	r3, #0
        pHandle->beep_state =  SM_BEEP_1; 
 8007fa8:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
        pHandle->beep_counter = 0;
 8007fac:	8623      	strh	r3, [r4, #48]	@ 0x30
}
 8007fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb0:	40012c00 	.word	0x40012c00
 8007fb4:	aaaaaaab 	.word	0xaaaaaaab
 8007fb8:	20001b3c 	.word	0x20001b3c

08007fbc <TIM2_IRQHandler>:
     pHandle->pwm_accumulator += capture_value;
 8007fbc:	4b24      	ldr	r3, [pc, #144]	@ (8008050 <TIM2_IRQHandler+0x94>)
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  * @param  None
  * @retval None
  */

void TIM2_IRQHandler(void)
{
 8007fc2:	b430      	push	{r4, r5}
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8007fc4:	6959      	ldr	r1, [r3, #20]
  if(pHandle->buffer_completed == false)
 8007fc6:	f893 5039 	ldrb.w	r5, [r3, #57]	@ 0x39
 8007fca:	f06f 0002 	mvn.w	r0, #2
 8007fce:	6110      	str	r0, [r2, #16]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 8007fd0:	6b94      	ldr	r4, [r2, #56]	@ 0x38
     pHandle->pwm_accumulator += capture_value;
 8007fd2:	699a      	ldr	r2, [r3, #24]
     pHandle->index_filter++;
 8007fd4:	1c48      	adds	r0, r1, #1
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8007fd6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  if(pHandle->buffer_completed == false)
 8007fda:	b9dd      	cbnz	r5, 8008014 <TIM2_IRQHandler+0x58>
     if(pHandle->index_filter >= ESC_FILTER_DEEP) 
 8007fdc:	2803      	cmp	r0, #3
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8007fde:	604c      	str	r4, [r1, #4]
         pHandle->buffer_completed = true;
 8007fe0:	bf88      	it	hi
 8007fe2:	2101      	movhi	r1, #1
     pHandle->pwm_accumulator += capture_value;
 8007fe4:	4422      	add	r2, r4
     pHandle->index_filter++;
 8007fe6:	bf92      	itee	ls
 8007fe8:	6158      	strls	r0, [r3, #20]
         pHandle->index_filter = 0;
 8007fea:	615d      	strhi	r5, [r3, #20]
         pHandle->buffer_completed = true;
 8007fec:	f883 1039 	strbhi.w	r1, [r3, #57]	@ 0x39
     pHandle->pwm_accumulator += capture_value;
 8007ff0:	619a      	str	r2, [r3, #24]
     pwm_filtered = pHandle->pwm_accumulator/pHandle->index_filter;
 8007ff2:	fbb2 f2f0 	udiv	r2, r2, r0

  /* Get Pulse width and low pass filter it to remove spurious informations */    
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));

  /* Fail safe mechanism: stops the motor is the PWM input is disabled */
  ESC_M1.watchdog_counter++;
 8007ff6:	f893 1037 	ldrb.w	r1, [r3, #55]	@ 0x37
 8007ffa:	3101      	adds	r1, #1
 8007ffc:	b2c9      	uxtb	r1, r1
 8007ffe:	2a01      	cmp	r2, #1
 8008000:	bf38      	it	cc
 8008002:	2201      	movcc	r2, #1
return(pwm_filtered);
 8008004:	2901      	cmp	r1, #1
 8008006:	bf38      	it	cc
 8008008:	2101      	movcc	r1, #1
 800800a:	f883 1037 	strb.w	r1, [r3, #55]	@ 0x37
  if(ESC_M1.watchdog_counter == 0)
     ESC_M1.watchdog_counter = 1;
}
 800800e:	bc30      	pop	{r4, r5}
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));
 8008010:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008012:	4770      	bx	lr
     pHandle->pwm_accumulator -= pHandle->pwm_buffer[pHandle->index_filter];
 8008014:	684d      	ldr	r5, [r1, #4]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;
 8008016:	604c      	str	r4, [r1, #4]
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 8008018:	6859      	ldr	r1, [r3, #4]
     pHandle->pwm_accumulator += capture_value;
 800801a:	4422      	add	r2, r4
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 800801c:	689c      	ldr	r4, [r3, #8]
 800801e:	42a1      	cmp	r1, r4
 8008020:	bf38      	it	cc
 8008022:	4621      	movcc	r1, r4
 8008024:	68dc      	ldr	r4, [r3, #12]
 8008026:	42a1      	cmp	r1, r4
 8008028:	bf38      	it	cc
 800802a:	4621      	movcc	r1, r4
 800802c:	691c      	ldr	r4, [r3, #16]
      pHandle->index_filter = 0;
 800802e:	2804      	cmp	r0, #4
     pHandle->pwm_accumulator += capture_value;
 8008030:	eba2 0205 	sub.w	r2, r2, r5
      pHandle->index_filter = 0;
 8008034:	bf28      	it	cs
 8008036:	2000      	movcs	r0, #0
     pwm_filtered = (pHandle->pwm_accumulator - pwm_max ) / (ESC_FILTER_DEEP -1);
 8008038:	42a1      	cmp	r1, r4
     pHandle->pwm_accumulator += capture_value;
 800803a:	619a      	str	r2, [r3, #24]
     pwm_filtered = (pHandle->pwm_accumulator - pwm_max ) / (ESC_FILTER_DEEP -1);
 800803c:	bf28      	it	cs
 800803e:	1a52      	subcs	r2, r2, r1
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <TIM2_IRQHandler+0x98>)
 8008042:	6158      	str	r0, [r3, #20]
 8008044:	bf38      	it	cc
 8008046:	1b12      	subcc	r2, r2, r4
 8008048:	fba1 1202 	umull	r1, r2, r1, r2
 800804c:	0852      	lsrs	r2, r2, #1
 800804e:	e7d2      	b.n	8007ff6 <TIM2_IRQHandler+0x3a>
 8008050:	20000000 	.word	0x20000000
 8008054:	aaaaaaab 	.word	0xaaaaaaab

08008058 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800805a:	7fc3      	ldrb	r3, [r0, #31]
 800805c:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8008060:	429a      	cmp	r2, r3
{
 8008062:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008064:	d002      	beq.n	800806c <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8008066:	3301      	adds	r3, #1
 8008068:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 800806c:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8008072:	b1a5      	cbz	r5, 800809e <MCPA_dataLog+0x46>
 8008074:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008076:	8ba2      	ldrh	r2, [r4, #28]
 8008078:	42aa      	cmp	r2, r5
 800807a:	d24e      	bcs.n	800811a <MCPA_dataLog+0xc2>
 800807c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8008080:	2bfe      	cmp	r3, #254	@ 0xfe
 8008082:	d066      	beq.n	8008152 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8008084:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8008088:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800808a:	8b22      	ldrh	r2, [r4, #24]
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	3202      	adds	r2, #2
 8008090:	2309      	movs	r3, #9
 8008092:	6845      	ldr	r5, [r0, #4]
 8008094:	b292      	uxth	r2, r2
 8008096:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	8323      	strh	r3, [r4, #24]
}
 800809c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 800809e:	4601      	mov	r1, r0
 80080a0:	2209      	movs	r2, #9
 80080a2:	f851 0b14 	ldr.w	r0, [r1], #20
 80080a6:	6803      	ldr	r3, [r0, #0]
 80080a8:	4798      	blx	r3
 80080aa:	b390      	cbz	r0, 8008112 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80080ac:	4b49      	ldr	r3, [pc, #292]	@ (80081d4 <MCPA_dataLog+0x17c>)
 80080ae:	6961      	ldr	r1, [r4, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80080b4:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80080b8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 80080bc:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80080c0:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80080c2:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 80080c4:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80080c6:	d101      	bne.n	80080cc <MCPA_dataLog+0x74>
 80080c8:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80080ca:	e7d4      	b.n	8008076 <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 80080cc:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 80080d0:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 80080d4:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 80080d8:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 80080dc:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 80080e0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80080e4:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80080e6:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 80080e8:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80080ec:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 80080ee:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80080f2:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80080f4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 80080f8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80080fc:	f002 f8c8 	bl	800a290 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8008100:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8008104:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8008108:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800810c:	441a      	add	r2, r3
 800810e:	f002 f8bf 	bl	800a290 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008112:	8b25      	ldrh	r5, [r4, #24]
 8008114:	2d00      	cmp	r5, #0
 8008116:	d1ad      	bne.n	8008074 <MCPA_dataLog+0x1c>
}
 8008118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800811a:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800811e:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008120:	b36e      	cbz	r6, 800817e <MCPA_dataLog+0x126>
 8008122:	68a2      	ldr	r2, [r4, #8]
 8008124:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8008128:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 800812a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800812e:	8800      	ldrh	r0, [r0, #0]
 8008130:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008134:	8b25      	ldrh	r5, [r4, #24]
 8008136:	3502      	adds	r5, #2
 8008138:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800813a:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800813c:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800813e:	d1f4      	bne.n	800812a <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8008140:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008144:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8008146:	2bfd      	cmp	r3, #253	@ 0xfd
 8008148:	4618      	mov	r0, r3
 800814a:	d91d      	bls.n	8008188 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800814c:	4295      	cmp	r5, r2
 800814e:	d897      	bhi.n	8008080 <MCPA_dataLog+0x28>
}
 8008150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008152:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8008156:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800815a:	4418      	add	r0, r3
 800815c:	4298      	cmp	r0, r3
 800815e:	dd91      	ble.n	8008084 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008160:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008162:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008164:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800816c:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800816e:	5cf3      	ldrb	r3, [r6, r3]
 8008170:	442b      	add	r3, r5
 8008172:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008174:	b2d3      	uxtb	r3, r2
 8008176:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008178:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800817a:	dbf3      	blt.n	8008164 <MCPA_dataLog+0x10c>
 800817c:	e782      	b.n	8008084 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 800817e:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8008182:	28fd      	cmp	r0, #253	@ 0xfd
 8008184:	f63f af71 	bhi.w	800806a <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8008188:	f894 3020 	ldrb.w	r3, [r4, #32]
 800818c:	4283      	cmp	r3, r0
 800818e:	d006      	beq.n	800819e <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 8008190:	3301      	adds	r3, #1
 8008192:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008196:	4295      	cmp	r5, r2
 8008198:	f63f af74 	bhi.w	8008084 <MCPA_dataLog+0x2c>
}
 800819c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800819e:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80081a2:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80081a4:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80081a6:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80081a8:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80081ac:	ddf3      	ble.n	8008196 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80081ae:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081b2:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80081b6:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081be:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80081c2:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081c4:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80081c6:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081c8:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80081ca:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80081cc:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80081ce:	dbf2      	blt.n	80081b6 <MCPA_dataLog+0x15e>
 80081d0:	e7e1      	b.n	8008196 <MCPA_dataLog+0x13e>
 80081d2:	bf00      	nop
 80081d4:	20001ba0 	.word	0x20001ba0

080081d8 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80081d8:	8b03      	ldrh	r3, [r0, #24]
 80081da:	b19b      	cbz	r3, 8008204 <MCPA_flushDataLog+0x2c>
{
 80081dc:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80081de:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80081e2:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80081e4:	2afe      	cmp	r2, #254	@ 0xfe
 80081e6:	4604      	mov	r4, r0
 80081e8:	d00d      	beq.n	8008206 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80081ea:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80081ee:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80081f0:	8b22      	ldrh	r2, [r4, #24]
 80081f2:	6820      	ldr	r0, [r4, #0]
 80081f4:	3202      	adds	r2, #2
 80081f6:	2309      	movs	r3, #9
 80081f8:	6845      	ldr	r5, [r0, #4]
 80081fa:	b292      	uxth	r2, r2
 80081fc:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008206:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800820a:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 800820e:	4494      	add	ip, r2
 8008210:	4562      	cmp	r2, ip
 8008212:	daea      	bge.n	80081ea <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008214:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008216:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008218:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800821c:	6800      	ldr	r0, [r0, #0]
 800821e:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008220:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008222:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008224:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008226:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008228:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800822a:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800822c:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800822e:	dbf3      	blt.n	8008218 <MCPA_flushDataLog+0x40>
 8008230:	e7db      	b.n	80081ea <MCPA_flushDataLog+0x12>
 8008232:	bf00      	nop

08008234 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008238:	880f      	ldrh	r7, [r1, #0]
{
 800823a:	4604      	mov	r4, r0

    if (buffSize == 0U)
 800823c:	2f00      	cmp	r7, #0
 800823e:	d046      	beq.n	80082ce <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8008240:	6803      	ldr	r3, [r0, #0]
 8008242:	89db      	ldrh	r3, [r3, #14]
 8008244:	42bb      	cmp	r3, r7
 8008246:	d33f      	bcc.n	80082c8 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8008248:	788b      	ldrb	r3, [r1, #2]
 800824a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800824e:	f891 8003 	ldrb.w	r8, [r1, #3]
 8008252:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8008256:	790b      	ldrb	r3, [r1, #4]
 8008258:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800825c:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800825e:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8008260:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8008264:	4443      	add	r3, r8
 8008266:	4293      	cmp	r3, r2
 8008268:	dc57      	bgt.n	800831a <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 800826a:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800826c:	2b00      	cmp	r3, #0
 800826e:	d057      	beq.n	8008320 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8008270:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008274:	4645      	mov	r5, r8
 8008276:	e011      	b.n	800829c <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8008278:	68e3      	ldr	r3, [r4, #12]
 800827a:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 800827c:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800827e:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8008282:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8008286:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008288:	f105 0c01 	add.w	ip, r5, #1
 800828c:	fa5f f58c 	uxtb.w	r5, ip
 8008290:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8008292:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008294:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8008296:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800829a:	da11      	bge.n	80082c0 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800829c:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80082a0:	6861      	ldr	r1, [r4, #4]
 80082a2:	4648      	mov	r0, r9
 80082a4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80082a8:	f7fb fad0 	bl	800384c <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80082ac:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	f04f 0002 	mov.w	r0, #2
 80082b6:	d8df      	bhi.n	8008278 <MCPA_cfgLog+0x44>
 80082b8:	4648      	mov	r0, r9
 80082ba:	f7fb fabb 	bl	8003834 <RI_GetIDSize>
 80082be:	e7db      	b.n	8008278 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80082c0:	f108 0206 	add.w	r2, r8, #6
 80082c4:	4297      	cmp	r7, r2
 80082c6:	d210      	bcs.n	80082ea <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80082c8:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80082ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80082ce:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80082d0:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 80082d4:	b9ab      	cbnz	r3, 8008302 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 80082da:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 80082de:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 80082e0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 80082e4:	2000      	movs	r0, #0
}
 80082e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 80082ea:	3f02      	subs	r7, #2
 80082ec:	eba7 0708 	sub.w	r7, r7, r8
 80082f0:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 80082f2:	7833      	ldrb	r3, [r6, #0]
 80082f4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f3      	bne.n	80082e4 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 80082fc:	8b23      	ldrh	r3, [r4, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0e9      	beq.n	80082d6 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008302:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8008304:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8008308:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800830a:	8b22      	ldrh	r2, [r4, #24]
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	3202      	adds	r2, #2
 8008310:	6845      	ldr	r5, [r0, #4]
 8008312:	b292      	uxth	r2, r2
 8008314:	2309      	movs	r3, #9
 8008316:	47a8      	blx	r5
 8008318:	e7dd      	b.n	80082d6 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800831a:	200a      	movs	r0, #10
}
 800831c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008320:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8008322:	4698      	mov	r8, r3
 8008324:	e7ce      	b.n	80082c4 <MCPA_cfgLog+0x90>
 8008326:	bf00      	nop

08008328 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008328:	8843      	ldrh	r3, [r0, #2]
 800832a:	8982      	ldrh	r2, [r0, #12]
 800832c:	429a      	cmp	r2, r3
 800832e:	d306      	bcc.n	800833e <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008330:	89c2      	ldrh	r2, [r0, #14]
 8008332:	429a      	cmp	r2, r3
 8008334:	d901      	bls.n	800833a <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8008336:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8008338:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 800833a:	8900      	ldrh	r0, [r0, #8]
 800833c:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 800833e:	2008      	movs	r0, #8
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop

08008344 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 800834c:	7802      	ldrb	r2, [r0, #0]
{
 800834e:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8008350:	b122      	cbz	r2, 800835c <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008352:	8882      	ldrh	r2, [r0, #4]
 8008354:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8008356:	2100      	movs	r1, #0
 8008358:	8101      	strh	r1, [r0, #8]
}
 800835a:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 800835c:	f7ff fff2 	bl	8008344 <NTC_Clear>
}
 8008360:	bd08      	pop	{r3, pc}
 8008362:	bf00      	nop

08008364 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8008364:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008366:	7803      	ldrb	r3, [r0, #0]
{
 8008368:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800836a:	b983      	cbnz	r3, 800838e <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 800836c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008370:	4299      	cmp	r1, r3
 8008372:	d007      	beq.n	8008384 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008374:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8008376:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008378:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 800837a:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800837e:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8008382:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8008384:	4620      	mov	r0, r4
 8008386:	f7ff ffcf 	bl	8008328 <NTC_SetFaultState>
 800838a:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800838c:	bd10      	pop	{r4, pc}
 800838e:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8008390:	8120      	strh	r0, [r4, #8]
}
 8008392:	bd10      	pop	{r4, pc}

08008394 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8008394:	7803      	ldrb	r3, [r0, #0]
 8008396:	b95b      	cbnz	r3, 80083b0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8008398:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800839a:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 800839c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80083a0:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80083a2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80083a4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80083a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80083ac:	b200      	sxth	r0, r0
 80083ae:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80083b0:	88c0      	ldrh	r0, [r0, #6]
}
 80083b2:	b200      	sxth	r0, r0
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop

080083b8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80083b8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80083ba:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80083bc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80083be:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80083c0:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80083c2:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80083c4:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80083c6:	4770      	bx	lr

080083c8 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80083c8:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80083ca:	4770      	bx	lr

080083cc <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80083cc:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80083ce:	4770      	bx	lr

080083d0 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80083d0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop

080083d8 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80083d8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop

080083e0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80083e0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80083e2:	4770      	bx	lr

080083e4 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80083e4:	8b80      	ldrh	r0, [r0, #28]
 80083e6:	4770      	bx	lr

080083e8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80083e8:	2301      	movs	r3, #1
 80083ea:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80083ec:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80083ee:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 80083f4:	8b40      	ldrh	r0, [r0, #26]
 80083f6:	4770      	bx	lr

080083f8 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 80083f8:	8bc0      	ldrh	r0, [r0, #30]
 80083fa:	4770      	bx	lr

080083fc <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80083fc:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80083fe:	4770      	bx	lr

08008400 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008400:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008402:	4770      	bx	lr

08008404 <PID_SetKIDivisorPOW2>:
{
 8008404:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008406:	2301      	movs	r3, #1
{
 8008408:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800840a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800840c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008410:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008412:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008414:	8343      	strh	r3, [r0, #26]
{
 8008416:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008418:	f7ff fff2 	bl	8008400 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800841c:	4902      	ldr	r1, [pc, #8]	@ (8008428 <PID_SetKIDivisorPOW2+0x24>)
 800841e:	4628      	mov	r0, r5
 8008420:	40a1      	lsls	r1, r4
 8008422:	f7ff ffeb 	bl	80083fc <PID_SetLowerIntegralTermLimit>
}
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	ffff8001 	.word	0xffff8001

0800842c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800842c:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800842e:	4770      	bx	lr

08008430 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008430:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8008438:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800843a:	4770      	bx	lr

0800843c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800843c:	2301      	movs	r3, #1
 800843e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008440:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008442:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop

08008448 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008448:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800844c:	4603      	mov	r3, r0
 800844e:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008450:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008454:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008458:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800845c:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8008460:	b17c      	cbz	r4, 8008482 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008462:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008466:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800846a:	eb15 0e01 	adds.w	lr, r5, r1
 800846e:	d41d      	bmi.n	80084ac <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8008470:	420d      	tst	r5, r1
 8008472:	4914      	ldr	r1, [pc, #80]	@ (80084c4 <PI_Controller+0x7c>)
 8008474:	bf48      	it	mi
 8008476:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008478:	45a6      	cmp	lr, r4
 800847a:	dc02      	bgt.n	8008482 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800847c:	691c      	ldr	r4, [r3, #16]
 800847e:	4574      	cmp	r4, lr
 8008480:	dd1d      	ble.n	80084be <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8008482:	8b99      	ldrh	r1, [r3, #28]
 8008484:	410a      	asrs	r2, r1
 8008486:	8bd9      	ldrh	r1, [r3, #30]
 8008488:	fa44 f101 	asr.w	r1, r4, r1
 800848c:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800848e:	4290      	cmp	r0, r2
 8008490:	da03      	bge.n	800849a <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8008492:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8008494:	4414      	add	r4, r2
 8008496:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8008498:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800849a:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 800849c:	bfc5      	ittet	gt
 800849e:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80084a2:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80084a4:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80084a6:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80084a8:	609c      	str	r4, [r3, #8]
}
 80084aa:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	dde3      	ble.n	8008478 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80084b0:	2900      	cmp	r1, #0
 80084b2:	dde1      	ble.n	8008478 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80084b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084b8:	428c      	cmp	r4, r1
 80084ba:	d1e2      	bne.n	8008482 <PI_Controller+0x3a>
 80084bc:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80084be:	4674      	mov	r4, lr
 80084c0:	e7df      	b.n	8008482 <PI_Controller+0x3a>
 80084c2:	bf00      	nop
 80084c4:	80000001 	.word	0x80000001

080084c8 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80084c8:	6882      	ldr	r2, [r0, #8]
{
 80084ca:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80084cc:	89d1      	ldrh	r1, [r2, #14]
 80084ce:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80084d2:	8993      	ldrh	r3, [r2, #12]
 80084d4:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80084d8:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 80084dc:	fb13 230c 	smlabb	r3, r3, ip, r2
 80084e0:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80084e2:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 80084e6:	bfbc      	itt	lt
 80084e8:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 80084ec:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80084ee:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 80084f2:	bf48      	it	mi
 80084f4:	330f      	addmi	r3, #15
 80084f6:	eb02 1223 	add.w	r2, r2, r3, asr #4
 80084fa:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80084fc:	f85d fb04 	ldr.w	pc, [sp], #4

08008500 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop

08008508 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008508:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800850a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800850e:	ee07 3a90 	vmov	s15, r3
{
 8008512:	ed2d 8b02 	vpush	{d8}
 8008516:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008518:	68c0      	ldr	r0, [r0, #12]
 800851a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800851e:	f7ff faa9 	bl	8007a74 <VBS_GetAvBusVoltage_V>
 8008522:	edd4 7a01 	vldr	s15, [r4, #4]
 8008526:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800852a:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800852e:	ee00 0a10 	vmov	s0, r0
 8008532:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8008536:	ee27 0a80 	vmul.f32	s0, s15, s0
 800853a:	bd10      	pop	{r4, pc}

0800853c <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800853c:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800853e:	4b19      	ldr	r3, [pc, #100]	@ (80085a4 <startTimers+0x68>)
 8008540:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008542:	07d2      	lsls	r2, r2, #31
 8008544:	b083      	sub	sp, #12
 8008546:	d416      	bmi.n	8008576 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008548:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008550:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008552:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008556:	f002 0201 	and.w	r2, r2, #1
 800855a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800855c:	9a01      	ldr	r2, [sp, #4]
 800855e:	694a      	ldr	r2, [r1, #20]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008566:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008568:	f022 0201 	bic.w	r2, r2, #1
 800856c:	659a      	str	r2, [r3, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800856e:	b003      	add	sp, #12
 8008570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008574:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8008576:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800857a:	480b      	ldr	r0, [pc, #44]	@ (80085a8 <startTimers+0x6c>)
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	6859      	ldr	r1, [r3, #4]
 8008580:	4c0a      	ldr	r4, [pc, #40]	@ (80085ac <startTimers+0x70>)
 8008582:	4001      	ands	r1, r0
 8008584:	f041 0120 	orr.w	r1, r1, #32
 8008588:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800858a:	6959      	ldr	r1, [r3, #20]
 800858c:	f041 0101 	orr.w	r1, r1, #1
 8008590:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008592:	6859      	ldr	r1, [r3, #4]
 8008594:	4022      	ands	r2, r4
 8008596:	4001      	ands	r1, r0
 8008598:	430a      	orrs	r2, r1
 800859a:	605a      	str	r2, [r3, #4]
}
 800859c:	b003      	add	sp, #12
 800859e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	40021000 	.word	0x40021000
 80085a8:	fdffff8f 	.word	0xfdffff8f
 80085ac:	02000070 	.word	0x02000070

080085b0 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80085b0:	3201      	adds	r2, #1
{
 80085b2:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80085b4:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80085b6:	f06f 0602 	mvn.w	r6, #2
 80085ba:	0155      	lsls	r5, r2, #5
 80085bc:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80085be:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80085c0:	f893 c000 	ldrb.w	ip, [r3]
 80085c4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80085c8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80085cc:	d80c      	bhi.n	80085e8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80085ce:	6904      	ldr	r4, [r0, #16]
 80085d0:	07a4      	lsls	r4, r4, #30
 80085d2:	d5f5      	bpl.n	80085c0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80085d4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80085d8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80085da:	6106      	str	r6, [r0, #16]
 80085dc:	d8f0      	bhi.n	80085c0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80085de:	781c      	ldrb	r4, [r3, #0]
 80085e0:	2c0f      	cmp	r4, #15
 80085e2:	d8ed      	bhi.n	80085c0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80085e4:	2301      	movs	r3, #1
 80085e6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
 80085ea:	bf00      	nop

080085ec <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80085ec:	6883      	ldr	r3, [r0, #8]
 80085ee:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80085f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80085f6:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80085f8:	6883      	ldr	r3, [r0, #8]
 80085fa:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 80085fc:	b082      	sub	sp, #8
 80085fe:	d418      	bmi.n	8008632 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8008600:	4b26      	ldr	r3, [pc, #152]	@ (800869c <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 8008602:	6882      	ldr	r2, [r0, #8]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4926      	ldr	r1, [pc, #152]	@ (80086a0 <R3_2_ADCxInit+0xb4>)
 8008608:	099b      	lsrs	r3, r3, #6
 800860a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800860e:	fba1 1303 	umull	r1, r3, r1, r3
 8008612:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008616:	099b      	lsrs	r3, r3, #6
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800861e:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8008620:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008622:	9b01      	ldr	r3, [sp, #4]
 8008624:	b12b      	cbz	r3, 8008632 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	3b01      	subs	r3, #1
 800862a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f9      	bne.n	8008626 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8008632:	6883      	ldr	r3, [r0, #8]
 8008634:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800863c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008640:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008642:	6883      	ldr	r3, [r0, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dbfc      	blt.n	8008642 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008648:	6803      	ldr	r3, [r0, #0]
 800864a:	07da      	lsls	r2, r3, #31
 800864c:	d408      	bmi.n	8008660 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800864e:	4a15      	ldr	r2, [pc, #84]	@ (80086a4 <R3_2_ADCxInit+0xb8>)
 8008650:	6883      	ldr	r3, [r0, #8]
 8008652:	4013      	ands	r3, r2
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800865a:	6803      	ldr	r3, [r0, #0]
 800865c:	07db      	lsls	r3, r3, #31
 800865e:	d5f7      	bpl.n	8008650 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8008660:	6883      	ldr	r3, [r0, #8]
 8008662:	4a10      	ldr	r2, [pc, #64]	@ (80086a4 <R3_2_ADCxInit+0xb8>)
 8008664:	4013      	ands	r3, r2
 8008666:	f043 0308 	orr.w	r3, r3, #8
 800866a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800866c:	6883      	ldr	r3, [r0, #8]
 800866e:	4013      	ands	r3, r2
 8008670:	f043 0320 	orr.w	r3, r3, #32
 8008674:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008676:	68c3      	ldr	r3, [r0, #12]
 8008678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800867c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008684:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008686:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008688:	f023 030f 	bic.w	r3, r3, #15
 800868c:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 800868e:	6883      	ldr	r3, [r0, #8]
 8008690:	4013      	ands	r3, r2
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 8008698:	b002      	add	sp, #8
 800869a:	4770      	bx	lr
 800869c:	20000500 	.word	0x20000500
 80086a0:	053e2d63 	.word	0x053e2d63
 80086a4:	7fffffc0 	.word	0x7fffffc0

080086a8 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086a8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 80086ac:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
{
 80086b0:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086b2:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80086b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80086b8:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80086ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80086bc:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80086c0:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80086ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ce:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 80086d0:	2a05      	cmp	r2, #5
 80086d2:	f200 809d 	bhi.w	8008810 <R3_2_GetPhaseCurrents+0x168>
 80086d6:	e8df f002 	tbb	[pc, r2]
 80086da:	1d37      	.short	0x1d37
 80086dc:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80086e0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 80086e4:	4a4e      	ldr	r2, [pc, #312]	@ (8008820 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80086e6:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	db58      	blt.n	800879e <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 80086ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086f0:	f280 8087 	bge.w	8008802 <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 80086f4:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80086f8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 80086fc:	4d48      	ldr	r5, [pc, #288]	@ (8008820 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 80086fe:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008702:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8008704:	42aa      	cmp	r2, r5
 8008706:	da5b      	bge.n	80087c0 <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 8008708:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800870a:	fa1f f38c 	uxth.w	r3, ip
 800870e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008712:	e030      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008714:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 8008718:	4b41      	ldr	r3, [pc, #260]	@ (8008820 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800871a:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800871c:	429c      	cmp	r4, r3
 800871e:	db39      	blt.n	8008794 <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 8008720:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8008724:	da62      	bge.n	80087ec <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 8008726:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800872a:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800872c:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 8008730:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008734:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8008736:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8008738:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800873c:	db39      	blt.n	80087b2 <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 800873e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008742:	804a      	strh	r2, [r1, #2]
 8008744:	4615      	mov	r5, r2
 8008746:	e016      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008748:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 800874c:	4b34      	ldr	r3, [pc, #208]	@ (8008820 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800874e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008750:	429c      	cmp	r4, r3
 8008752:	db1a      	blt.n	800878a <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 8008754:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8008758:	da3d      	bge.n	80087d6 <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 800875a:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800875c:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800875e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 8008762:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008764:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8008766:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8008768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800876c:	db19      	blt.n	80087a2 <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 800876e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008772:	800b      	strh	r3, [r1, #0]
 8008774:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008776:	4413      	add	r3, r2
 8008778:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800877a:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 800877e:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8008782:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008784:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8008788:	4770      	bx	lr
 800878a:	461c      	mov	r4, r3
 800878c:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008790:	461d      	mov	r5, r3
 8008792:	e7e4      	b.n	800875e <R3_2_GetPhaseCurrents+0xb6>
 8008794:	461c      	mov	r4, r3
 8008796:	46a4      	mov	ip, r4
 8008798:	f248 0301 	movw	r3, #32769	@ 0x8001
 800879c:	e7c6      	b.n	800872c <R3_2_GetPhaseCurrents+0x84>
 800879e:	4694      	mov	ip, r2
 80087a0:	e7aa      	b.n	80086f8 <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 80087a2:	4c1f      	ldr	r4, [pc, #124]	@ (8008820 <R3_2_GetPhaseCurrents+0x178>)
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	da26      	bge.n	80087f6 <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 80087a8:	800c      	strh	r4, [r1, #0]
 80087aa:	f248 0301 	movw	r3, #32769	@ 0x8001
 80087ae:	46a4      	mov	ip, r4
 80087b0:	e7e1      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 80087b2:	4d1b      	ldr	r5, [pc, #108]	@ (8008820 <R3_2_GetPhaseCurrents+0x178>)
 80087b4:	42aa      	cmp	r2, r5
 80087b6:	da27      	bge.n	8008808 <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 80087b8:	804d      	strh	r5, [r1, #2]
 80087ba:	f248 0201 	movw	r2, #32769	@ 0x8001
 80087be:	e7da      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 80087c0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80087c4:	db0c      	blt.n	80087e0 <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 80087c6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80087ca:	461a      	mov	r2, r3
 80087cc:	804b      	strh	r3, [r1, #2]
 80087ce:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80087d0:	fa1f f38c 	uxth.w	r3, ip
 80087d4:	e7cf      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
 80087d6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80087da:	4614      	mov	r4, r2
 80087dc:	4615      	mov	r5, r2
 80087de:	e7be      	b.n	800875e <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 80087e0:	b215      	sxth	r5, r2
 80087e2:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80087e4:	fa1f f38c 	uxth.w	r3, ip
 80087e8:	b292      	uxth	r2, r2
 80087ea:	e7c4      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
 80087ec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80087f0:	461c      	mov	r4, r3
 80087f2:	469c      	mov	ip, r3
 80087f4:	e79a      	b.n	800872c <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 80087f6:	fa0f fc83 	sxth.w	ip, r3
 80087fa:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80087fe:	b29b      	uxth	r3, r3
 8008800:	e7b9      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
 8008802:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8008806:	e777      	b.n	80086f8 <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 8008808:	b215      	sxth	r5, r2
 800880a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800880c:	b292      	uxth	r2, r2
 800880e:	e7b2      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 8008810:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8008814:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008818:	880b      	ldrh	r3, [r1, #0]
 800881a:	884a      	ldrh	r2, [r1, #2]
 800881c:	e7ab      	b.n	8008776 <R3_2_GetPhaseCurrents+0xce>
 800881e:	bf00      	nop
 8008820:	ffff8001 	.word	0xffff8001

08008824 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8008824:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008826:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800882a:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800882e:	f880 407c 	strb.w	r4, [r0, #124]	@ 0x7c
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008832:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008836:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008838:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800883c:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800883e:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8008840:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8008844:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008848:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800884a:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800884c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008850:	4904      	ldr	r1, [pc, #16]	@ (8008864 <R3_2_SetADCSampPointPolarization+0x40>)
 8008852:	685b      	ldr	r3, [r3, #4]
}
 8008854:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008858:	420b      	tst	r3, r1
}
 800885a:	bf14      	ite	ne
 800885c:	2001      	movne	r0, #1
 800885e:	2000      	moveq	r0, #0
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	02000070 	.word	0x02000070

08008868 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 8008868:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800886a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800886e:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8008872:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8008874:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008878:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800887a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800887c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008880:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008884:	6853      	ldr	r3, [r2, #4]
 8008886:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800888a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800888e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008890:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8008894:	2b0f      	cmp	r3, #15
 8008896:	d80d      	bhi.n	80088b4 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008898:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800889c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 80088a0:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 80088a2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 80088a6:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 80088a8:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 80088aa:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80088b4:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80088b6:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 80088b8:	600b      	str	r3, [r1, #0]
}
 80088ba:	4770      	bx	lr

080088bc <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80088bc:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 80088c0:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80088c2:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088c4:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 80088c8:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80088ca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80088ce:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80088d2:	6853      	ldr	r3, [r2, #4]
 80088d4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088dc:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80088de:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d80a      	bhi.n	80088fc <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 80088e6:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 80088ea:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 80088ee:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 80088f0:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 80088f2:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 80088f4:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 80088f8:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80088fc:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80088fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8008902:	600b      	str	r3, [r1, #0]
}
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008908:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800890c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008910:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 8008912:	f04f 0c01 	mov.w	ip, #1
{
 8008916:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008918:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 800891c:	f04f 0e00 	mov.w	lr, #0
 8008920:	f880 e07e 	strb.w	lr, [r0, #126]	@ 0x7e
  pHandle->ADCRegularLocked = true;
 8008924:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8008928:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800892a:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800892c:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800892e:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008930:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008934:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008936:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	07d2      	lsls	r2, r2, #31
 800893c:	d5fc      	bpl.n	8008938 <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800893e:	f06f 0201 	mvn.w	r2, #1
 8008942:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008946:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800894a:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800894c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800894e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008952:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8008954:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8008958:	2a02      	cmp	r2, #2
 800895a:	d007      	beq.n	800896c <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800895c:	f06f 0201 	mvn.w	r2, #1
 8008960:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	f042 0201 	orr.w	r2, r2, #1
 8008968:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800896a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800896c:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800896e:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 8008970:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008974:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8008976:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800897a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800897c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008980:	f240 5255 	movw	r2, #1365	@ 0x555
 8008984:	4211      	tst	r1, r2
 8008986:	d004      	beq.n	8008992 <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008988:	f8c7 c018 	str.w	ip, [r7, #24]
 800898c:	61ae      	str	r6, [r5, #24]
 800898e:	61a0      	str	r0, [r4, #24]
}
 8008990:	e7e4      	b.n	800895c <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8008992:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8008996:	62ae      	str	r6, [r5, #40]	@ 0x28
 8008998:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800899a:	e7df      	b.n	800895c <R3_2_SwitchOnPWM+0x54>

0800899c <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800899c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 80089a0:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80089a4:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80089a6:	68d3      	ldr	r3, [r2, #12]
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80089ae:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80089b0:	f04f 0c00 	mov.w	ip, #0
 80089b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089b8:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 80089bc:	6453      	str	r3, [r2, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 80089be:	b919      	cbnz	r1, 80089c8 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80089c0:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d00c      	beq.n	80089e2 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089c8:	f06f 0301 	mvn.w	r3, #1
 80089cc:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80089ce:	6913      	ldr	r3, [r2, #16]
 80089d0:	07db      	lsls	r3, r3, #31
 80089d2:	d5fc      	bpl.n	80089ce <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089d4:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 80089d8:	2300      	movs	r3, #0
 80089da:	6111      	str	r1, [r2, #16]
 80089dc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80089e0:	4770      	bx	lr
{
 80089e2:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80089e4:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80089e8:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80089ec:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 80089ee:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80089f0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 80089f4:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80089f6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 80089fa:	6299      	str	r1, [r3, #40]	@ 0x28
 80089fc:	f06f 0301 	mvn.w	r3, #1
 8008a00:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a02:	6913      	ldr	r3, [r2, #16]
 8008a04:	07d9      	lsls	r1, r3, #31
 8008a06:	d5fc      	bpl.n	8008a02 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a08:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	6111      	str	r1, [r2, #16]
}
 8008a10:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 8008a12:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8008a16:	4770      	bx	lr

08008a18 <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 8008a18:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a1a:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8008a1e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a20:	6853      	ldr	r3, [r2, #4]
 8008a22:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a2a:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008a2c:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8008a30:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8008a34:	480c      	ldr	r0, [pc, #48]	@ (8008a68 <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008a36:	3214      	adds	r2, #20
 8008a38:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8008a3c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8008a40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8008a44:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	bfa8      	it	ge
 8008a4a:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 8008a4c:	4283      	cmp	r3, r0
 8008a4e:	bfb8      	it	lt
 8008a50:	4603      	movlt	r3, r0
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	2200      	movs	r2, #0
 8008a56:	f363 020f 	bfi	r2, r3, #0, #16
 8008a5a:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8008a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8008a62:	600a      	str	r2, [r1, #0]
}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	ffff8001 	.word	0xffff8001

08008a6c <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a6c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a74:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8008a76:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8008a78:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a80:	f06f 0201 	mvn.w	r2, #1
 8008a84:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	07d5      	lsls	r5, r2, #31
 8008a8a:	d5fc      	bpl.n	8008a86 <R3_2_RLSwitchOnPWM+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a8c:	f06f 0201 	mvn.w	r2, #1
 8008a90:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a92:	2201      	movs	r2, #1
 8008a94:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008a96:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
 8008a9a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	07d2      	lsls	r2, r2, #31
 8008aa2:	d5fc      	bpl.n	8008a9e <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	f042 0201 	orr.w	r2, r2, #1
 8008aaa:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008aba:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8008abc:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8008ac0:	2a02      	cmp	r2, #2
 8008ac2:	d117      	bne.n	8008af4 <R3_2_RLSwitchOnPWM+0x88>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008ac4:	6a1a      	ldr	r2, [r3, #32]
      {
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008ac6:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008aca:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008acc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008ace:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008ad2:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008ad6:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008ada:	f240 5355 	movw	r3, #1365	@ 0x555
 8008ade:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008ae0:	bf15      	itete	ne
 8008ae2:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008ae6:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008aea:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008aee:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 8008af2:	62ae      	str	r6, [r5, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8008af4:	2303      	movs	r3, #3
 8008af6:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
  MODIFY_REG(ADCx->CR,
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	4a05      	ldr	r2, [pc, #20]	@ (8008b14 <R3_2_RLSwitchOnPWM+0xa8>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	f043 0308 	orr.w	r3, r3, #8
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	688b      	ldr	r3, [r1, #8]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	f043 0308 	orr.w	r3, r3, #8
 8008b0e:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8008b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b14:	7fffffc0 	.word	0x7fffffc0

08008b18 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008b18:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008b1c:	681a      	ldr	r2, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8008b1e:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b22:	f06f 0301 	mvn.w	r3, #1
 8008b26:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8008b2a:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b2c:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008b2e:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008b30:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b32:	6913      	ldr	r3, [r2, #16]
 8008b34:	07db      	lsls	r3, r3, #31
 8008b36:	d5fc      	bpl.n	8008b32 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008b38:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3e:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8008b40:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d000      	beq.n	8008b4a <R3_2_TurnOnLowSides+0x32>
 8008b48:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008b4a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8008b4e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008b50:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008b52:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008b56:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008b58:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008b5c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8008b60:	618c      	str	r4, [r1, #24]
}
 8008b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b66:	619a      	str	r2, [r3, #24]
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008b6c:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8008b70:	b510      	push	{r4, lr}
 8008b72:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 8008b76:	f101 0e08 	add.w	lr, r1, #8
 8008b7a:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008b7c:	f85e 300c 	ldr.w	r3, [lr, ip]
 8008b80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8008b8e:	684a      	ldr	r2, [r1, #4]
 8008b90:	f000 0303 	and.w	r3, r0, #3
 8008b94:	4313      	orrs	r3, r2
 8008b96:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8008b98:	680a      	ldr	r2, [r1, #0]
 8008b9a:	f000 0010 	and.w	r0, r0, #16
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008ba2:	ea33 0202 	bics.w	r2, r3, r2
 8008ba6:	d014      	beq.n	8008bd2 <R3_2_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008ba8:	4a14      	ldr	r2, [pc, #80]	@ (8008bfc <R3_2_SetAOReferenceVoltage+0x90>)
 8008baa:	4815      	ldr	r0, [pc, #84]	@ (8008c00 <R3_2_SetAOReferenceVoltage+0x94>)
 8008bac:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8008bae:	680c      	ldr	r4, [r1, #0]
 8008bb0:	fba0 0202 	umull	r0, r2, r0, r2
 8008bb4:	0cd2      	lsrs	r2, r2, #19
 8008bb6:	4323      	orrs	r3, r4
 8008bb8:	00d2      	lsls	r2, r2, #3
 8008bba:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8008bbc:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	b12b      	cbz	r3, 8008bce <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008bc2:	9b00      	ldr	r3, [sp, #0]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8008bc8:	9b00      	ldr	r3, [sp, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f9      	bne.n	8008bc2 <R3_2_SetAOReferenceVoltage+0x56>
}
 8008bce:	b002      	add	sp, #8
 8008bd0:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <R3_2_SetAOReferenceVoltage+0x90>)
 8008bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8008c00 <R3_2_SetAOReferenceVoltage+0x94>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bdc:	0cdb      	lsrs	r3, r3, #19
 8008bde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008be2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0f1      	beq.n	8008bce <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008bea:	9b01      	ldr	r3, [sp, #4]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1f9      	bne.n	8008bea <R3_2_SetAOReferenceVoltage+0x7e>
}
 8008bf6:	b002      	add	sp, #8
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000500 	.word	0x20000500
 8008c00:	431bde83 	.word	0x431bde83

08008c04 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008c04:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008c08:	681a      	ldr	r2, [r3, #0]
  pHandle->ADCRegularLocked = true;
 8008c0a:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c0e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008c10:	f06f 0301 	mvn.w	r3, #1
 8008c14:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c18:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008c1a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008c1c:	6913      	ldr	r3, [r2, #16]
 8008c1e:	07db      	lsls	r3, r3, #31
 8008c20:	d5fc      	bpl.n	8008c1c <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008c22:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c28:	6453      	str	r3, [r2, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8008c2a:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d000      	beq.n	8008c34 <R3_2_RLTurnOnLowSides+0x30>
 8008c32:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008c34:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8008c38:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008c3a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008c3c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8008c40:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008c42:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008c46:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 8008c4a:	628c      	str	r4, [r1, #40]	@ 0x28
}
 8008c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c50:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c52:	4770      	bx	lr

08008c54 <R3_2_Init>:
{
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008c58:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8008c5c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8008c5e:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c60:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008c62:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008c64:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 8008c68:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008c6a:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 8008c6e:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c70:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c74:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008c78:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008c7a:	6a20      	ldr	r0, [r4, #32]
 8008c7c:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008c7e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008c82:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008c84:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008c86:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 8008c8a:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c8c:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008c90:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c92:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008c94:	f022 0220 	bic.w	r2, r2, #32
 8008c98:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c9a:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c9c:	6872      	ldr	r2, [r6, #4]
 8008c9e:	f022 0204 	bic.w	r2, r2, #4
 8008ca2:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008ca4:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008ca8:	6872      	ldr	r2, [r6, #4]
 8008caa:	f022 0220 	bic.w	r2, r2, #32
 8008cae:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008cb0:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 8008cb2:	4a85      	ldr	r2, [pc, #532]	@ (8008ec8 <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008cb4:	4885      	ldr	r0, [pc, #532]	@ (8008ecc <R3_2_Init+0x278>)
 8008cb6:	4295      	cmp	r5, r2
 8008cb8:	6902      	ldr	r2, [r0, #16]
 8008cba:	bf0c      	ite	eq
 8008cbc:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 8008cc0:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 8008cc4:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8008cc6:	b181      	cbz	r1, 8008cea <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8008cc8:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008ccc:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8008cd0:	6989      	ldr	r1, [r1, #24]
 8008cd2:	f04e 0e01 	orr.w	lr, lr, #1
 8008cd6:	f8c2 e000 	str.w	lr, [r2]
 8008cda:	6802      	ldr	r2, [r0, #0]
 8008cdc:	f042 0201 	orr.w	r2, r2, #1
 8008ce0:	6002      	str	r2, [r0, #0]
 8008ce2:	680a      	ldr	r2, [r1, #0]
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 8008cea:	b1b3      	cbz	r3, 8008d1a <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8008cec:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 8008cf0:	2a01      	cmp	r2, #1
 8008cf2:	d00a      	beq.n	8008d0a <R3_2_Init+0xb6>
 8008cf4:	f1bc 0f00 	cmp.w	ip, #0
 8008cf8:	d007      	beq.n	8008d0a <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8008cfa:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8008cfe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	4661      	mov	r1, ip
 8008d04:	f7ff ff32 	bl	8008b6c <R3_2_SetAOReferenceVoltage>
 8008d08:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	f042 0201 	orr.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008d18:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8008d1a:	f1bb 0f00 	cmp.w	fp, #0
 8008d1e:	d017      	beq.n	8008d50 <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8008d20:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d007      	beq.n	8008d38 <R3_2_Init+0xe4>
 8008d28:	9b00      	ldr	r3, [sp, #0]
 8008d2a:	b12b      	cbz	r3, 8008d38 <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8008d2c:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8008d30:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008d32:	4619      	mov	r1, r3
 8008d34:	f7ff ff1a 	bl	8008b6c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d38:	f8db 3000 	ldr.w	r3, [fp]
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d44:	f8db 3000 	ldr.w	r3, [fp]
 8008d48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d4c:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 8008d50:	f1ba 0f00 	cmp.w	sl, #0
 8008d54:	d017      	beq.n	8008d86 <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8008d56:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d007      	beq.n	8008d6e <R3_2_Init+0x11a>
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	b12b      	cbz	r3, 8008d6e <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8008d62:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8008d66:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f7ff feff 	bl	8008b6c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d6e:	f8da 3000 	ldr.w	r3, [sl]
 8008d72:	f043 0301 	orr.w	r3, r3, #1
 8008d76:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d7a:	f8da 3000 	ldr.w	r3, [sl]
 8008d7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d82:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 8008d86:	f1b9 0f00 	cmp.w	r9, #0
 8008d8a:	d017      	beq.n	8008dbc <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8008d8c:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d007      	beq.n	8008da4 <R3_2_Init+0x150>
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	b12b      	cbz	r3, 8008da4 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8008d98:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 8008d9c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008d9e:	4619      	mov	r1, r3
 8008da0:	f7ff fee4 	bl	8008b6c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008da4:	f8d9 3000 	ldr.w	r3, [r9]
 8008da8:	f043 0301 	orr.w	r3, r3, #1
 8008dac:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008db0:	f8d9 3000 	ldr.w	r3, [r9]
 8008db4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008db8:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	07da      	lsls	r2, r3, #31
 8008dc0:	d553      	bpl.n	8008e6a <R3_2_Init+0x216>
 8008dc2:	68b3      	ldr	r3, [r6, #8]
 8008dc4:	07db      	lsls	r3, r3, #31
 8008dc6:	d54c      	bpl.n	8008e62 <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 8008dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008dcc:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008dd6:	686b      	ldr	r3, [r5, #4]
 8008dd8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008de0:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008de2:	69ab      	ldr	r3, [r5, #24]
 8008de4:	f043 0308 	orr.w	r3, r3, #8
 8008de8:	61ab      	str	r3, [r5, #24]
 8008dea:	69ab      	ldr	r3, [r5, #24]
 8008dec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008df0:	61ab      	str	r3, [r5, #24]
 8008df2:	69eb      	ldr	r3, [r5, #28]
 8008df4:	f043 0308 	orr.w	r3, r3, #8
 8008df8:	61eb      	str	r3, [r5, #28]
 8008dfa:	69eb      	ldr	r3, [r5, #28]
 8008dfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e00:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e02:	696b      	ldr	r3, [r5, #20]
 8008e04:	f043 0301 	orr.w	r3, r3, #1
 8008e08:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008e0a:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d046      	beq.n	8008ea0 <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 8008e12:	f898 307a 	ldrb.w	r3, [r8, #122]	@ 0x7a
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d034      	beq.n	8008e84 <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008e1a:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8008e1e:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008e20:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8008e22:	9a05      	ldr	r2, [sp, #20]
 8008e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e28:	b172      	cbz	r2, 8008e48 <R3_2_Init+0x1f4>
 8008e2a:	b16b      	cbz	r3, 8008e48 <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008e2c:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8008e30:	e000      	b.n	8008e34 <R3_2_Init+0x1e0>
 8008e32:	b14b      	cbz	r3, 8008e48 <R3_2_Init+0x1f4>
 8008e34:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 8008e36:	9b05      	ldr	r3, [sp, #20]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008e3c:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8008e3e:	9a05      	ldr	r2, [sp, #20]
 8008e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e44:	2a00      	cmp	r2, #0
 8008e46:	d1f4      	bne.n	8008e32 <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008e48:	68eb      	ldr	r3, [r5, #12]
 8008e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e4e:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008e50:	6a2b      	ldr	r3, [r5, #32]
 8008e52:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8008e56:	f043 0305 	orr.w	r3, r3, #5
 8008e5a:	622b      	str	r3, [r5, #32]
}
 8008e5c:	b007      	add	sp, #28
 8008e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff fbc2 	bl	80085ec <R3_2_ADCxInit>
 8008e68:	e7ae      	b.n	8008dc8 <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	f7ff fbbe 	bl	80085ec <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008e70:	2340      	movs	r3, #64	@ 0x40
 8008e72:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e7a:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e7c:	68b3      	ldr	r3, [r6, #8]
 8008e7e:	07db      	lsls	r3, r3, #31
 8008e80:	d4a2      	bmi.n	8008dc8 <R3_2_Init+0x174>
 8008e82:	e7ee      	b.n	8008e62 <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8008e84:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d00d      	beq.n	8008ea8 <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d1c4      	bne.n	8008e1a <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e90:	2201      	movs	r2, #1
 8008e92:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e94:	696a      	ldr	r2, [r5, #20]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e9c:	632b      	str	r3, [r5, #48]	@ 0x30
}
 8008e9e:	e7bc      	b.n	8008e1a <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8008ea0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d004      	beq.n	8008eb2 <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8008ea8:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 8008eac:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008eae:	626b      	str	r3, [r5, #36]	@ 0x24
}
 8008eb0:	e7b3      	b.n	8008e1a <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8008eb2:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 8008eb6:	2a03      	cmp	r2, #3
 8008eb8:	d1f6      	bne.n	8008ea8 <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008eba:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008ebc:	696b      	ldr	r3, [r5, #20]
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008ec4:	632a      	str	r2, [r5, #48]	@ 0x30
}
 8008ec6:	e7ef      	b.n	8008ea8 <R3_2_Init+0x254>
 8008ec8:	40012c00 	.word	0x40012c00
 8008ecc:	e0042000 	.word	0xe0042000

08008ed0 <R3_2_SetOffsetCalib>:
{
 8008ed0:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8008ed2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008ed6:	680b      	ldr	r3, [r1, #0]
 8008ed8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 8008edc:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8008ede:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 8008ee2:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
}
 8008ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 8008eec:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8008ef0:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8008ef4:	608b      	str	r3, [r1, #8]
 8008ef6:	e9c1 0200 	strd	r0, r2, [r1]
}
 8008efa:	4770      	bx	lr

08008efc <R3_2_CurrentReadingPolarization>:
{
 8008efc:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008efe:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008f02:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8008f04:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8008f06:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 8008f08:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
{
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8008f10:	b1ab      	cbz	r3, 8008f3e <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4a50      	ldr	r2, [pc, #320]	@ (8009058 <R3_2_CurrentReadingPolarization+0x15c>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	f043 0308 	orr.w	r3, r3, #8
 8008f1c:	60bb      	str	r3, [r7, #8]
 8008f1e:	68b3      	ldr	r3, [r6, #8]
 8008f20:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008f22:	2180      	movs	r1, #128	@ 0x80
 8008f24:	f043 0308 	orr.w	r3, r3, #8
 8008f28:	60b3      	str	r3, [r6, #8]
 8008f2a:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 8008f2e:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 8008f30:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8008f32:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
  pHandle->_Super.BrakeActionLock = false;
 8008f36:	f884 3085 	strb.w	r3, [r4, #133]	@ 0x85
}
 8008f3a:	b003      	add	sp, #12
 8008f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008f3e:	6802      	ldr	r2, [r0, #0]
 8008f40:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 8008f42:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008f46:	6942      	ldr	r2, [r0, #20]
 8008f48:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8008f4a:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 8008f4e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f52:	6a2b      	ldr	r3, [r5, #32]
 8008f54:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8008f58:	f023 0305 	bic.w	r3, r3, #5
 8008f5c:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 8008f5e:	2304      	movs	r3, #4
 8008f60:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 8008f64:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008f68:	4b3c      	ldr	r3, [pc, #240]	@ (800905c <R3_2_CurrentReadingPolarization+0x160>)
 8008f6a:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009060 <R3_2_CurrentReadingPolarization+0x164>)
 8008f6e:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008f70:	2380      	movs	r3, #128	@ 0x80
 8008f72:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008f76:	f7ff fcc7 	bl	8008908 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8008f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8009064 <R3_2_CurrentReadingPolarization+0x168>)
 8008f7c:	686b      	ldr	r3, [r5, #4]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b70      	cmp	r3, #112	@ 0x70
 8008f82:	d1fb      	bne.n	8008f7c <R3_2_CurrentReadingPolarization+0x80>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	4a34      	ldr	r2, [pc, #208]	@ (8009058 <R3_2_CurrentReadingPolarization+0x15c>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	f043 0308 	orr.w	r3, r3, #8
 8008f8e:	60bb      	str	r3, [r7, #8]
 8008f90:	68b3      	ldr	r3, [r6, #8]
 8008f92:	4013      	ands	r3, r2
 8008f94:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 8008f98:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8008f9c:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8008f9e:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 8008fa2:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 8008fa6:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8008faa:	4631      	mov	r1, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f7ff fafe 	bl	80085b0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f7ff fcf1 	bl	800899c <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 8008fc0:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 8008fc4:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008fc8:	4b27      	ldr	r3, [pc, #156]	@ (8009068 <R3_2_CurrentReadingPolarization+0x16c>)
 8008fca:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f7ff fc9b 	bl	8008908 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8008fd2:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f7ff fae6 	bl	80085b0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f7ff fcd9 	bl	800899c <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008fea:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008fee:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008ff2:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008ff4:	0912      	lsrs	r2, r2, #4
 8008ff6:	e9c4 1222 	strd	r1, r2, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009000:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009002:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009004:	69ab      	ldr	r3, [r5, #24]
 8009006:	6162      	str	r2, [r4, #20]
 8009008:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 800900c:	2001      	movs	r0, #1
 800900e:	f884 0081 	strb.w	r0, [r4, #129]	@ 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009012:	6021      	str	r1, [r4, #0]
 8009014:	61ab      	str	r3, [r5, #24]
 8009016:	69aa      	ldr	r2, [r5, #24]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8009018:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
 800901c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009020:	61aa      	str	r2, [r5, #24]
 8009022:	69ea      	ldr	r2, [r5, #28]
 8009024:	f022 0208 	bic.w	r2, r2, #8
 8009028:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800902a:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800902c:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800902e:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009030:	69ab      	ldr	r3, [r5, #24]
 8009032:	f043 0308 	orr.w	r3, r3, #8
 8009036:	61ab      	str	r3, [r5, #24]
 8009038:	69ab      	ldr	r3, [r5, #24]
 800903a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800903e:	61ab      	str	r3, [r5, #24]
 8009040:	69eb      	ldr	r3, [r5, #28]
 8009042:	f043 0308 	orr.w	r3, r3, #8
 8009046:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009048:	6a2b      	ldr	r3, [r5, #32]
 800904a:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800904e:	f043 0305 	orr.w	r3, r3, #5
 8009052:	622b      	str	r3, [r5, #32]
}
 8009054:	e76b      	b.n	8008f2e <R3_2_CurrentReadingPolarization+0x32>
 8009056:	bf00      	nop
 8009058:	7fffffc0 	.word	0x7fffffc0
 800905c:	08008869 	.word	0x08008869
 8009060:	08008825 	.word	0x08008825
 8009064:	02000070 	.word	0x02000070
 8009068:	080088bd 	.word	0x080088bd

0800906c <R3_2_SetADCSampPointSectX>:
{
 800906c:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800906e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8009072:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 8009076:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800907a:	ebae 0203 	sub.w	r2, lr, r3
 800907e:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 8009082:	b292      	uxth	r2, r2
 8009084:	42a2      	cmp	r2, r4
 8009086:	d917      	bls.n	80090b8 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 8009088:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800908a:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800908e:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009092:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009094:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009096:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800909a:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800909e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 80090a2:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80090a4:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80090a6:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80090a8:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80090aa:	6852      	ldr	r2, [r2, #4]
 80090ac:	4b10      	ldr	r3, [pc, #64]	@ (80090f0 <R3_2_SetADCSampPointSectX+0x84>)
 80090ae:	421a      	tst	r2, r3
}
 80090b0:	bf14      	ite	ne
 80090b2:	2001      	movne	r0, #1
 80090b4:	2000      	moveq	r0, #0
 80090b6:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 80090b8:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 80090bc:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 80090c0:	fa1f fc8c 	uxth.w	ip, ip
 80090c4:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80090c8:	d904      	bls.n	80090d4 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80090ca:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	e7df      	b.n	8009094 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80090d4:	4423      	add	r3, r4
 80090d6:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 80090d8:	459e      	cmp	lr, r3
 80090da:	d8db      	bhi.n	8009094 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80090dc:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80090de:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80090e2:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80090e6:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	e7d2      	b.n	8009094 <R3_2_SetADCSampPointSectX+0x28>
 80090ee:	bf00      	nop
 80090f0:	02000070 	.word	0x02000070

080090f4 <R3_2_TIMx_UP_IRQHandler>:
{
 80090f4:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80090f6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80090fa:	f890 407c 	ldrb.w	r4, [r0, #124]	@ 0x7c
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80090fe:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009100:	681d      	ldr	r5, [r3, #0]
{
 8009102:	4601      	mov	r1, r0
 8009104:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009108:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 800910a:	b1d6      	cbz	r6, 8009142 <R3_2_TIMx_UP_IRQHandler+0x4e>
 800910c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8009110:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1fc      	bne.n	8009110 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8009116:	eb06 030c 	add.w	r3, r6, ip
 800911a:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 800911c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009120:	d006      	beq.n	8009130 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8009122:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009126:	6834      	ldr	r4, [r6, #0]
 8009128:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 800912c:	433c      	orrs	r4, r7
 800912e:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8009130:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 8009132:	1c66      	adds	r6, r4, #1
 8009134:	d005      	beq.n	8009142 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009136:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009138:	6833      	ldr	r3, [r6, #0]
 800913a:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800913e:	4323      	orrs	r3, r4
 8009140:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009142:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 8009146:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8009148:	431c      	orrs	r4, r3
 800914a:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800914c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800914e:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8009152:	4303      	orrs	r3, r0
 8009154:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009156:	686b      	ldr	r3, [r5, #4]
 8009158:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800915c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009160:	2280      	movs	r2, #128	@ 0x80
 8009162:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8009166:	606b      	str	r3, [r5, #4]
}
 8009168:	f101 007a 	add.w	r0, r1, #122	@ 0x7a
 800916c:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800916e:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 8009172:	4770      	bx	lr

08009174 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8009174:	f890 1080 	ldrb.w	r1, [r0, #128]	@ 0x80
{
 8009178:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800917a:	2900      	cmp	r1, #0
 800917c:	d13f      	bne.n	80091fe <R3_2_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800917e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009182:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800918a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800918e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009192:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009194:	6a1a      	ldr	r2, [r3, #32]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800919c:	6a1a      	ldr	r2, [r3, #32]
 800919e:	f022 0204 	bic.w	r2, r2, #4
 80091a2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80091a4:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80091a6:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 80091aa:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80091ac:	f103 0418 	add.w	r4, r3, #24
 80091b0:	d033      	beq.n	800921a <R3_2_RLDetectionModeEnable+0xa6>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 80091b2:	2a02      	cmp	r2, #2
 80091b4:	d10f      	bne.n	80091d6 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80091b6:	699a      	ldr	r2, [r3, #24]
 80091b8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80091bc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80091c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091c4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80091c6:	6a1a      	ldr	r2, [r3, #32]
 80091c8:	f042 0210 	orr.w	r2, r2, #16
 80091cc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80091ce:	6a1a      	ldr	r2, [r3, #32]
 80091d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d4:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80091d6:	6862      	ldr	r2, [r4, #4]
 80091d8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80091dc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80091e0:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 80091e4:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80091e6:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 80091e8:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 80091ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091f0:	621a      	str	r2, [r3, #32]
 80091f2:	6a1a      	ldr	r2, [r3, #32]
 80091f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091f8:	621a      	str	r2, [r3, #32]
 80091fa:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80091fe:	4b0f      	ldr	r3, [pc, #60]	@ (800923c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009200:	490f      	ldr	r1, [pc, #60]	@ (8009240 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009202:	4a10      	ldr	r2, [pc, #64]	@ (8009244 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009204:	4c10      	ldr	r4, [pc, #64]	@ (8009248 <R3_2_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009206:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8009208:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800920a:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800920c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009210:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8009214:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8009218:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009220:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009224:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009228:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	f022 0210 	bic.w	r2, r2, #16
 8009230:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009232:	6a1a      	ldr	r2, [r3, #32]
 8009234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	e7cc      	b.n	80091d6 <R3_2_RLDetectionModeEnable+0x62>
 800923c:	08008c05 	.word	0x08008c05
 8009240:	08008a6d 	.word	0x08008a6d
 8009244:	0800899d 	.word	0x0800899d
 8009248:	08008a19 	.word	0x08008a19

0800924c <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800924c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8009250:	2b00      	cmp	r3, #0
 8009252:	d03d      	beq.n	80092d0 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009254:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009258:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800925c:	681b      	ldr	r3, [r3, #0]
{
 800925e:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	4c40      	ldr	r4, [pc, #256]	@ (8009364 <R3_2_RLDetectionModeDisable+0x118>)
 8009264:	4022      	ands	r2, r4
 8009266:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800926a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8009274:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8009278:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800927a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800927e:	d028      	beq.n	80092d2 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8009280:	2a02      	cmp	r2, #2
 8009282:	d04a      	beq.n	800931a <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009284:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800928c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009290:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8009294:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009296:	6a1a      	ldr	r2, [r3, #32]
 8009298:	f042 0210 	orr.w	r2, r2, #16
 800929c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800929e:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80092a0:	69da      	ldr	r2, [r3, #28]
 80092a2:	4022      	ands	r2, r4
 80092a4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80092a8:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80092aa:	6a1a      	ldr	r2, [r3, #32]
 80092ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092b0:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80092b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009368 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80092b4:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 80092b6:	492d      	ldr	r1, [pc, #180]	@ (800936c <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80092b8:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80092ba:	4a2d      	ldr	r2, [pc, #180]	@ (8009370 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 80092bc:	4c2d      	ldr	r4, [pc, #180]	@ (8009374 <R3_2_RLDetectionModeDisable+0x128>)
 80092be:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 80092c0:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80092c2:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80092c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 80092ca:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 80092ce:	4770      	bx	lr
 80092d0:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80092d2:	6a1a      	ldr	r2, [r3, #32]
 80092d4:	f042 0204 	orr.w	r2, r2, #4
 80092d8:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80092da:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80092e2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80092e6:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 80092ea:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80092ec:	6a1a      	ldr	r2, [r3, #32]
 80092ee:	f042 0210 	orr.w	r2, r2, #16
 80092f2:	621a      	str	r2, [r3, #32]
 80092f4:	6a1a      	ldr	r2, [r3, #32]
 80092f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092fa:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80092fc:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	4022      	ands	r2, r4
 8009302:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009306:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009308:	6a1a      	ldr	r2, [r3, #32]
 800930a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800930e:	621a      	str	r2, [r3, #32]
 8009310:	6a1a      	ldr	r2, [r3, #32]
 8009312:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009316:	621a      	str	r2, [r3, #32]
}
 8009318:	e7cb      	b.n	80092b2 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800931a:	6a1a      	ldr	r2, [r3, #32]
 800931c:	f022 0204 	bic.w	r2, r2, #4
 8009320:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009322:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800932a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800932e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8009332:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009334:	6a1a      	ldr	r2, [r3, #32]
 8009336:	f042 0210 	orr.w	r2, r2, #16
 800933a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800933c:	6a1a      	ldr	r2, [r3, #32]
 800933e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009342:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009344:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	4022      	ands	r2, r4
 800934a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800934e:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009350:	6a1a      	ldr	r2, [r3, #32]
 8009352:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009356:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009358:	6a1a      	ldr	r2, [r3, #32]
 800935a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800935e:	621a      	str	r2, [r3, #32]
}
 8009360:	e7a7      	b.n	80092b2 <R3_2_RLDetectionModeDisable+0x66>
 8009362:	bf00      	nop
 8009364:	fffeff8c 	.word	0xfffeff8c
 8009368:	080086a9 	.word	0x080086a9
 800936c:	08008909 	.word	0x08008909
 8009370:	0800899d 	.word	0x0800899d
 8009374:	08008b19 	.word	0x08008b19

08009378 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009378:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800937c:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009380:	6812      	ldr	r2, [r2, #0]
{
 8009382:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009384:	69d0      	ldr	r0, [r2, #28]
 8009386:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800938a:	fb0c f101 	mul.w	r1, ip, r1
 800938e:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 8009392:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8009394:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8009396:	2401      	movs	r4, #1
 8009398:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800939c:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 80093a0:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 80093a4:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 80093a6:	f8b3 0076 	ldrh.w	r0, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 80093aa:	f8b3 4078 	ldrh.w	r4, [r3, #120]	@ 0x78
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 80093ae:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 80093b2:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80093b4:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80093b6:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80093b8:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80093ba:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 80093be:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 80093c2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 80093c6:	f04f 0c03 	mov.w	ip, #3
 80093ca:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 80093ce:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80093d0:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 80093d2:	f883 c07c 	strb.w	ip, [r3, #124]	@ 0x7c
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80093d6:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80093d8:	d007      	beq.n	80093ea <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80093da:	4b07      	ldr	r3, [pc, #28]	@ (80093f8 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 80093dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80093e0:	421a      	tst	r2, r3
 80093e2:	bf14      	ite	ne
 80093e4:	2001      	movne	r0, #1
 80093e6:	2000      	moveq	r0, #0
}
 80093e8:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 80093ea:	2200      	movs	r2, #0
}
 80093ec:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 80093f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	02000070 	.word	0x02000070

080093fc <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80093fc:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009400:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 8009402:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009404:	f06f 0201 	mvn.w	r2, #1
{
 8009408:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800940a:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800940e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009410:	691a      	ldr	r2, [r3, #16]
 8009412:	07d1      	lsls	r1, r2, #31
 8009414:	d5fc      	bpl.n	8009410 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8009416:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800941a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800941c:	f06f 0401 	mvn.w	r4, #1
 8009420:	3a05      	subs	r2, #5
 8009422:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009424:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009426:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009428:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800942a:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800942c:	691a      	ldr	r2, [r3, #16]
 800942e:	07d2      	lsls	r2, r2, #31
 8009430:	d5fc      	bpl.n	800942c <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8009432:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009434:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009438:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800943a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800943c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009440:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8009442:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8009446:	2a02      	cmp	r2, #2
 8009448:	d10b      	bne.n	8009462 <R3_2_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800944a:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800944e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009452:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009454:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009456:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800945a:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800945c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 8009460:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 8009462:	2203      	movs	r2, #3
 8009464:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  SET_BIT(TIMx->CCER, Channels);
 8009468:	6a1a      	ldr	r2, [r3, #32]
 800946a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800946e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009476:	bc30      	pop	{r4, r5}
 8009478:	60da      	str	r2, [r3, #12]
 800947a:	4770      	bx	lr

0800947c <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800947c:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8009480:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009482:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009484:	4494      	add	ip, r2
 8009486:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 800948a:	b430      	push	{r4, r5}
 800948c:	2500      	movs	r5, #0
 800948e:	f36c 050f 	bfi	r5, ip, #0, #16
 8009492:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009496:	b14b      	cbz	r3, 80094ac <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8009498:	6944      	ldr	r4, [r0, #20]
 800949a:	2300      	movs	r3, #0
 800949c:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800949e:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 80094a0:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80094a4:	8941      	ldrh	r1, [r0, #10]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	4291      	cmp	r1, r2
 80094aa:	d8f7      	bhi.n	800949c <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 80094ac:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80094ae:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 80094b0:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 80094b2:	bc30      	pop	{r4, r5}
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop

080094b8 <RVBS_Init>:
{
 80094b8:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 80094ba:	f7ff ffdf 	bl	800947c <RVBS_Clear>
}
 80094be:	bd08      	pop	{r3, pc}

080094c0 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80094c0:	8982      	ldrh	r2, [r0, #12]
 80094c2:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80094c4:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80094c6:	428a      	cmp	r2, r1
 80094c8:	d010      	beq.n	80094ec <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80094ca:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 80094ce:	459c      	cmp	ip, r3
 80094d0:	d80a      	bhi.n	80094e8 <RVBS_CheckFaultState+0x28>
{
 80094d2:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80094d4:	7c04      	ldrb	r4, [r0, #16]
 80094d6:	b994      	cbnz	r4, 80094fe <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 80094d8:	4299      	cmp	r1, r3
 80094da:	d914      	bls.n	8009506 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 80094dc:	2301      	movs	r3, #1
 80094de:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 80094e0:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80094e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e6:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 80094e8:	2004      	movs	r0, #4
 80094ea:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d30c      	bcc.n	800950a <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80094f0:	8a40      	ldrh	r0, [r0, #18]
 80094f2:	4298      	cmp	r0, r3
 80094f4:	bf94      	ite	ls
 80094f6:	2000      	movls	r0, #0
 80094f8:	2001      	movhi	r0, #1
 80094fa:	0080      	lsls	r0, r0, #2
 80094fc:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80094fe:	429a      	cmp	r2, r3
 8009500:	d2ee      	bcs.n	80094e0 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8009502:	2300      	movs	r3, #0
 8009504:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8009506:	2002      	movs	r0, #2
 8009508:	e7eb      	b.n	80094e2 <RVBS_CheckFaultState+0x22>
 800950a:	2002      	movs	r0, #2
}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop

08009510 <RVBS_CalcAvVbus>:
{
 8009510:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8009512:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009516:	4299      	cmp	r1, r3
{
 8009518:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800951a:	d021      	beq.n	8009560 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800951c:	6943      	ldr	r3, [r0, #20]
 800951e:	7e45      	ldrb	r5, [r0, #25]
 8009520:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009524:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8009528:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800952c:	d00d      	beq.n	800954a <RVBS_CalcAvVbus+0x3a>
 800952e:	3a01      	subs	r2, #1
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8009536:	3b02      	subs	r3, #2
      wtemp = 0u;
 8009538:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800953a:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800953e:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8009540:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009542:	d1fa      	bne.n	800953a <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8009544:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009548:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800954a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800954e:	4575      	cmp	r5, lr
        pHandle->index++;
 8009550:	bf34      	ite	cc
 8009552:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8009554:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009556:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8009558:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800955a:	bf34      	ite	cc
 800955c:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800955e:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff ffad 	bl	80094c0 <RVBS_CheckFaultState>
 8009566:	8120      	strh	r0, [r4, #8]
}
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop

0800956c <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800956c:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800956e:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8009570:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8009574:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8009578:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800957a:	4770      	bx	lr

0800957c <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800957c:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8009580:	2901      	cmp	r1, #1
{
 8009582:	b410      	push	{r4}
 8009584:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009586:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 8009588:	d909      	bls.n	800959e <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800958a:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800958c:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800958e:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 8009590:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009592:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 8009596:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8009598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800959c:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800959e:	d005      	beq.n	80095ac <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80095a0:	fb92 f0f4 	sdiv	r0, r2, r4
}
 80095a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 80095a8:	609a      	str	r2, [r3, #8]
}
 80095aa:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80095ac:	6840      	ldr	r0, [r0, #4]
 80095ae:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 80095b2:	2100      	movs	r1, #0
}
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 80095b8:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 80095ba:	609a      	str	r2, [r3, #8]
}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 80095c0:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 80095c2:	fab0 f080 	clz	r0, r0
 80095c6:	0940      	lsrs	r0, r0, #5
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop

080095cc <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 80095cc:	2800      	cmp	r0, #0
 80095ce:	bfb8      	it	lt
 80095d0:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 80095d2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80095d6:	d213      	bcs.n	8009600 <getScalingFactor+0x34>
 80095d8:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 80095da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80095de:	e001      	b.n	80095e4 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d00a      	beq.n	80095fa <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 80095e4:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 80095e8:	4290      	cmp	r0, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	f103 0301 	add.w	r3, r3, #1
 80095f0:	d3f6      	bcc.n	80095e0 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 80095f2:	3901      	subs	r1, #1
 80095f4:	2001      	movs	r0, #1
 80095f6:	4088      	lsls	r0, r1
 80095f8:	4770      	bx	lr
 80095fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80095fe:	4770      	bx	lr
    if (TargetAbs >= limit)
 8009600:	2001      	movs	r0, #1
}
 8009602:	4770      	bx	lr

08009604 <REMNG_ExecRamp>:
{
 8009604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009608:	4604      	mov	r4, r0
 800960a:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800960c:	6880      	ldr	r0, [r0, #8]
 800960e:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8009610:	4615      	mov	r5, r2
 8009612:	b962      	cbnz	r2, 800962e <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8009614:	4608      	mov	r0, r1
 8009616:	f7ff ffd9 	bl	80095cc <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800961a:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800961e:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009620:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8009622:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009626:	60a6      	str	r6, [r4, #8]
}
 8009628:	2001      	movs	r0, #1
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800962e:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8009632:	eba1 0708 	sub.w	r7, r1, r8
 8009636:	4638      	mov	r0, r7
 8009638:	f7ff ffc8 	bl	80095cc <getScalingFactor>
 800963c:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800963e:	4640      	mov	r0, r8
 8009640:	f7ff ffc4 	bl	80095cc <getScalingFactor>
 8009644:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8009646:	4630      	mov	r0, r6
 8009648:	f7ff ffc0 	bl	80095cc <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800964c:	45ca      	cmp	sl, r9
 800964e:	d318      	bcc.n	8009682 <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 8009650:	4548      	cmp	r0, r9
 8009652:	bf28      	it	cs
 8009654:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8009656:	fb08 f300 	mul.w	r3, r8, r0
 800965a:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800965c:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800965e:	4a0b      	ldr	r2, [pc, #44]	@ (800968c <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8009660:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8009662:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800966c:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800966e:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8009672:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009674:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 8009678:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800967c:	2001      	movs	r0, #1
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 8009682:	4550      	cmp	r0, sl
 8009684:	bf28      	it	cs
 8009686:	4650      	movcs	r0, sl
 8009688:	e7e5      	b.n	8009656 <REMNG_ExecRamp+0x52>
 800968a:	bf00      	nop
 800968c:	10624dd3 	.word	0x10624dd3

08009690 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 8009690:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8009692:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009694:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 8009696:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 800969a:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800969e:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 80096a0:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 80096a4:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096a6:	b309      	cbz	r1, 80096ec <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80096a8:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096aa:	b323      	cbz	r3, 80096f6 <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80096ac:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096ae:	b32b      	cbz	r3, 80096fc <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80096b0:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096b2:	b333      	cbz	r3, 8009702 <RUC_Init+0x72>
 80096b4:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 80096b6:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80096ba:	b1cb      	cbz	r3, 80096f0 <RUC_Init+0x60>
 80096bc:	2204      	movs	r2, #4
 80096be:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 80096c2:	8803      	ldrh	r3, [r0, #0]
 80096c4:	4910      	ldr	r1, [pc, #64]	@ (8009708 <RUC_Init+0x78>)
 80096c6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 80096ca:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80096ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 80096d2:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80096d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80096da:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 80096dc:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80096de:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 80096e0:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 80096e4:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 80096e8:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 80096ec:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80096f0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80096f4:	e7e5      	b.n	80096c2 <RUC_Init+0x32>
      bPhase++;
 80096f6:	f04f 0c02 	mov.w	ip, #2
 80096fa:	e7f9      	b.n	80096f0 <RUC_Init+0x60>
 80096fc:	f04f 0c03 	mov.w	ip, #3
 8009700:	e7f6      	b.n	80096f0 <RUC_Init+0x60>
 8009702:	f04f 0c04 	mov.w	ip, #4
 8009706:	e7f3      	b.n	80096f0 <RUC_Init+0x60>
 8009708:	10624dd3 	.word	0x10624dd3

0800970c <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8009710:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8009712:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8009716:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8009718:	2600      	movs	r6, #0
{
 800971a:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 800971c:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8009720:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 8009724:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8009728:	4638      	mov	r0, r7

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800972a:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 800972c:	f000 fc78 	bl	800a020 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8009730:	2104      	movs	r1, #4
 8009732:	4640      	mov	r0, r8
 8009734:	f000 f906 	bl	8009944 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8009738:	8861      	ldrh	r1, [r4, #2]
 800973a:	fb11 f105 	smulbb	r1, r1, r5
 800973e:	b209      	sxth	r1, r1
 8009740:	4638      	mov	r0, r7
 8009742:	f000 fd23 	bl	800a18c <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8009746:	4632      	mov	r2, r6
 8009748:	4631      	mov	r1, r6
 800974a:	4640      	mov	r0, r8
 800974c:	f000 f8fe 	bl	800994c <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8009750:	8a21      	ldrh	r1, [r4, #16]
 8009752:	89a2      	ldrh	r2, [r4, #12]
 8009754:	fb11 f105 	smulbb	r1, r1, r5
 8009758:	b209      	sxth	r1, r1
 800975a:	4640      	mov	r0, r8
 800975c:	f000 f8f6 	bl	800994c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8009760:	89e1      	ldrh	r1, [r4, #14]
 8009762:	89a2      	ldrh	r2, [r4, #12]
 8009764:	fb11 f105 	smulbb	r1, r1, r5
 8009768:	b209      	sxth	r1, r1
 800976a:	4638      	mov	r0, r7
 800976c:	f000 fd16 	bl	800a19c <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8009770:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8009772:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8009774:	4a06      	ldr	r2, [pc, #24]	@ (8009790 <RUC_Clear+0x84>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 8009776:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800977a:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800977e:	fba2 2303 	umull	r2, r3, r2, r3
 8009782:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009784:	6962      	ldr	r2, [r4, #20]
 8009786:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8009788:	3301      	adds	r3, #1
 800978a:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009790:	10624dd3 	.word	0x10624dd3

08009794 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8009794:	8883      	ldrh	r3, [r0, #4]
{
 8009796:	b510      	push	{r4, lr}
 8009798:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800979a:	bb43      	cbnz	r3, 80097ee <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800979c:	68a0      	ldr	r0, [r4, #8]
 800979e:	b328      	cbz	r0, 80097ec <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 80097a0:	8881      	ldrh	r1, [r0, #4]
 80097a2:	88e3      	ldrh	r3, [r4, #6]
 80097a4:	8802      	ldrh	r2, [r0, #0]
 80097a6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80097a8:	fb11 f103 	smulbb	r1, r1, r3
 80097ac:	b209      	sxth	r1, r1
 80097ae:	f000 f8cd 	bl	800994c <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	88e0      	ldrh	r0, [r4, #6]
 80097b6:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 80097b8:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 80097ba:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 80097be:	b209      	sxth	r1, r1
 80097c0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80097c2:	f000 fceb 	bl	800a19c <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 80097c6:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80097c8:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 80097ca:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80097cc:	4a0b      	ldr	r2, [pc, #44]	@ (80097fc <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80097ce:	6889      	ldr	r1, [r1, #8]
 80097d0:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80097d2:	fb00 f303 	mul.w	r3, r0, r3
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 80097da:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80097de:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 80097e0:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 80097e2:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 80097e4:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 80097e6:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 80097ea:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 80097ec:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0d1      	beq.n	800979c <RUC_Exec+0x8>
  bool retVal = true;
 80097f8:	2001      	movs	r0, #1
}
 80097fa:	bd10      	pop	{r4, pc}
 80097fc:	10624dd3 	.word	0x10624dd3

08009800 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8009800:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8009804:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8009808:	4282      	cmp	r2, r0
 800980a:	bf34      	ite	cc
 800980c:	2000      	movcc	r0, #0
 800980e:	2001      	movcs	r0, #1
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop

08009814 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8009814:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009818:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800981c:	f8d2 c002 	ldr.w	ip, [r2, #2]
 8009820:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8009824:	4618      	mov	r0, r3
 8009826:	8813      	ldrh	r3, [r2, #0]
 8009828:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800982a:	2001      	movs	r0, #1
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop

08009830 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8009830:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop

08009838 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8009838:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800983c:	0089      	lsls	r1, r1, #2
 800983e:	f101 0308 	add.w	r3, r1, #8
 8009842:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8009844:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8009846:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800984a:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800984e:	8983      	ldrh	r3, [r0, #12]
 8009850:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8009852:	2001      	movs	r0, #1
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop

08009858 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8009858:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8009860:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop

08009868 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8009868:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop

08009870 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8009870:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8009874:	4603      	mov	r3, r0
 8009876:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8009878:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800987c:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8009880:	bfb8      	it	lt
 8009882:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009884:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009888:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800988a:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800988c:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800988e:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 8009892:	bfb8      	it	lt
 8009894:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009896:	458e      	cmp	lr, r1
 8009898:	d816      	bhi.n	80098c8 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800989a:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 800989e:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 80098a2:	bfb8      	it	lt
 80098a4:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80098a8:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80098ac:	bfb8      	it	lt
 80098ae:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80098b2:	45f4      	cmp	ip, lr
 80098b4:	d308      	bcc.n	80098c8 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80098b6:	428c      	cmp	r4, r1
 80098b8:	d306      	bcc.n	80098c8 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80098ba:	4290      	cmp	r0, r2
 80098bc:	d809      	bhi.n	80098d2 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80098be:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80098c0:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80098c2:	bf18      	it	ne
 80098c4:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80098c6:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80098c8:	4290      	cmp	r0, r2
 80098ca:	d9f8      	bls.n	80098be <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 80098cc:	3201      	adds	r2, #1
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	e7f5      	b.n	80098be <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 80098d2:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80098d4:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 80098d6:	2001      	movs	r0, #1
}
 80098d8:	bd10      	pop	{r4, pc}
 80098da:	bf00      	nop

080098dc <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 80098dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80098e0:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 80098e4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80098e8:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 80098ec:	b200      	sxth	r0, r0
 80098ee:	4770      	bx	lr

080098f0 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80098f0:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 80098f4:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80098f6:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 80098fa:	6142      	str	r2, [r0, #20]
{
 80098fc:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 80098fe:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8009902:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8009904:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009906:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800990a:	0409      	lsls	r1, r1, #16
 800990c:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8009910:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8009912:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8009916:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009918:	6183      	str	r3, [r0, #24]
}
 800991a:	4770      	bx	lr

0800991c <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800991c:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800991e:	4770      	bx	lr

08009920 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8009920:	6940      	ldr	r0, [r0, #20]
 8009922:	4770      	bx	lr

08009924 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009924:	7803      	ldrb	r3, [r0, #0]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d000      	beq.n	800992c <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800992a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800992c:	6900      	ldr	r0, [r0, #16]
 800992e:	2100      	movs	r1, #0
 8009930:	f7fe bd56 	b.w	80083e0 <PID_SetIntegralTerm>

08009934 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8009934:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop

0800993c <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 800993c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop

08009944 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8009944:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8009946:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8009948:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800994a:	4770      	bx	lr

0800994c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800994c:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800994e:	7803      	ldrb	r3, [r0, #0]
 8009950:	2b04      	cmp	r3, #4
{
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009958:	d01d      	beq.n	8009996 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800995a:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800995c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009960:	4299      	cmp	r1, r3
 8009962:	dd01      	ble.n	8009968 <STC_ExecRamp+0x1c>
 8009964:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8009966:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8009968:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 800996c:	428b      	cmp	r3, r1
 800996e:	dcf9      	bgt.n	8009964 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8009970:	8c23      	ldrh	r3, [r4, #32]
 8009972:	4299      	cmp	r1, r3
 8009974:	da03      	bge.n	800997e <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8009976:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 800997a:	428b      	cmp	r3, r1
 800997c:	dbf2      	blt.n	8009964 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800997e:	b9a6      	cbnz	r6, 80099aa <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009980:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009982:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009984:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009986:	bf0c      	ite	eq
 8009988:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800998a:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 800998c:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 800998e:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8009990:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8009992:	2001      	movs	r0, #1
}
 8009994:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8009996:	f7ff ffd1 	bl	800993c <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800999a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800999c:	42ab      	cmp	r3, r5
 800999e:	dbe1      	blt.n	8009964 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 80099a0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 80099a4:	42ab      	cmp	r3, r5
 80099a6:	dcdd      	bgt.n	8009964 <STC_ExecRamp+0x18>
 80099a8:	e7e9      	b.n	800997e <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80099aa:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 80099ac:	4a06      	ldr	r2, [pc, #24]	@ (80099c8 <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 80099ae:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80099b0:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 80099b4:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80099b8:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 80099ba:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 80099bc:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80099be:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80099c0:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 80099c4:	e7e3      	b.n	800998e <STC_ExecRamp+0x42>
 80099c6:	bf00      	nop
 80099c8:	10624dd3 	.word	0x10624dd3

080099cc <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80099d0:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80099d2:	4770      	bx	lr

080099d4 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80099d4:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80099d6:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80099d8:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80099da:	2a04      	cmp	r2, #4
{
 80099dc:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80099de:	d012      	beq.n	8009a06 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 80099e0:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80099e2:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80099e4:	d908      	bls.n	80099f8 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80099e6:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80099e8:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80099ea:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80099ec:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80099ee:	2a03      	cmp	r2, #3
 80099f0:	d011      	beq.n	8009a16 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80099f2:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80099f4:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80099f8:	d1f9      	bne.n	80099ee <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80099fa:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80099fe:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a00:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009a02:	60c3      	str	r3, [r0, #12]
 8009a04:	e7f3      	b.n	80099ee <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 8009a06:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8009a08:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8009a0a:	d911      	bls.n	8009a30 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8009a0c:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8009a0e:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009a10:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8009a12:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009a14:	e7ed      	b.n	80099f2 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8009a16:	6960      	ldr	r0, [r4, #20]
 8009a18:	f7ff ff22 	bl	8009860 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8009a1c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8009a20:	b209      	sxth	r1, r1
 8009a22:	6920      	ldr	r0, [r4, #16]
 8009a24:	f7fe fd10 	bl	8008448 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8009a28:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009a2a:	0405      	lsls	r5, r0, #16
 8009a2c:	60a5      	str	r5, [r4, #8]
}
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009a30:	d1df      	bne.n	80099f2 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a32:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009a36:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009a38:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009a3a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009a3c:	e7d9      	b.n	80099f2 <STC_CalcTorqueReference+0x1e>
 8009a3e:	bf00      	nop

08009a40 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8009a40:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009a48:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	b299      	uxth	r1, r3
 8009a50:	f361 020f 	bfi	r2, r1, #0, #16
 8009a54:	0c1b      	lsrs	r3, r3, #16
 8009a56:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009a5a:	b082      	sub	sp, #8
}
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	b002      	add	sp, #8
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop

08009a64 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009a64:	b510      	push	{r4, lr}
 8009a66:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8009a68:	6940      	ldr	r0, [r0, #20]
 8009a6a:	f7ff fef9 	bl	8009860 <SPD_GetAvrgMecSpeedUnit>
 8009a6e:	0400      	lsls	r0, r0, #16
 8009a70:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8009a72:	bd10      	pop	{r4, pc}

08009a74 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009a78:	4604      	mov	r4, r0
{
 8009a7a:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f000 80cf 	beq.w	8009c20 <STO_PLL_CalcElAngle+0x1ac>
 8009a82:	2900      	cmp	r1, #0
 8009a84:	f000 80cf 	beq.w	8009c26 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8009a88:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8009a8c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8009a8e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009a92:	429f      	cmp	r7, r3
 8009a94:	f340 80d1 	ble.w	8009c3a <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8009a98:	6683      	str	r3, [r0, #104]	@ 0x68
 8009a9a:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009a9c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009aa0:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009aa2:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009aa6:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009aa8:	9201      	str	r2, [sp, #4]
 8009aaa:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009aae:	f2c0 80c1 	blt.w	8009c34 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009ab2:	425b      	negs	r3, r3
 8009ab4:	429e      	cmp	r6, r3
 8009ab6:	f340 80bd 	ble.w	8009c34 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009aba:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8009abe:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 8009ac2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009ac6:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009aca:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009acc:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009ad0:	f340 80b9 	ble.w	8009c46 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8009ad4:	6623      	str	r3, [r4, #96]	@ 0x60
 8009ad6:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009ad8:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 8009adc:	4543      	cmp	r3, r8
 8009ade:	f2c0 80a6 	blt.w	8009c2e <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009ae2:	425b      	negs	r3, r3
 8009ae4:	4598      	cmp	r8, r3
 8009ae6:	f340 80a2 	ble.w	8009c2e <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009aea:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009aec:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009af0:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009af2:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009af6:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009afa:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009afe:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009b02:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009b06:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b0a:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8009b0c:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009b10:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009b14:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b18:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b1a:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b1c:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b1e:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b20:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009b22:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009b26:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b2a:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009b2e:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8009b32:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b36:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8009b38:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 8009b3c:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8009b3e:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009b42:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8009b46:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009b4a:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8009b4c:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8009b50:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8009b54:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009b58:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8009b5c:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 8009b5e:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 8009b62:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8009b66:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b6a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 8009b6c:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8009b70:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8009b74:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8009b78:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 8009b7c:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8009b80:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b84:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b88:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8009b8c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 8009b90:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 8009b94:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8009b98:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 8009b9c:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8009ba0:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d154      	bne.n	8009c52 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8009bae:	bfa8      	it	ge
 8009bb0:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8009bb4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8009bb8:	f7f7 fda6 	bl	8001708 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009bbc:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8009bbe:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009bc2:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8009bc6:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8009bc8:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8009bcc:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8009bd0:	f340 31cf 	sbfx	r1, r0, #15, #16
 8009bd4:	f345 35cf 	sbfx	r5, r5, #15, #16
 8009bd8:	1a69      	subs	r1, r5, r1
 8009bda:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009bde:	f7fe fc33 	bl	8008448 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8009be2:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8009be6:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8009bea:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8009bec:	3301      	adds	r3, #1
 8009bee:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8009bf0:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8009bf2:	bf12      	itee	ne
 8009bf4:	461a      	movne	r2, r3
 8009bf6:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8009bf8:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8009bfa:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009bfe:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 8009c02:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8009c06:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8009c0a:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c0e:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8009c10:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c12:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8009c14:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c18:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8009c1a:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009c1e:	80a0      	strh	r0, [r4, #4]
}
 8009c20:	b009      	add	sp, #36	@ 0x24
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8009c26:	4608      	mov	r0, r1
}
 8009c28:	b009      	add	sp, #36	@ 0x24
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009c2e:	6663      	str	r3, [r4, #100]	@ 0x64
 8009c30:	4698      	mov	r8, r3
 8009c32:	e75a      	b.n	8009aea <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8009c34:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8009c36:	461e      	mov	r6, r3
 8009c38:	e73f      	b.n	8009aba <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009c3a:	425a      	negs	r2, r3
 8009c3c:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8009c3e:	bfdc      	itt	le
 8009c40:	6682      	strle	r2, [r0, #104]	@ 0x68
 8009c42:	4617      	movle	r7, r2
 8009c44:	e72a      	b.n	8009a9c <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009c46:	425a      	negs	r2, r3
 8009c48:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009c4a:	bfdc      	itt	le
 8009c4c:	6622      	strle	r2, [r4, #96]	@ 0x60
 8009c4e:	4691      	movle	r9, r2
 8009c50:	e742      	b.n	8009ad8 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009c52:	fa1f fa83 	uxth.w	sl, r3
 8009c56:	e7ad      	b.n	8009bb4 <STO_PLL_CalcElAngle+0x140>

08009c58 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8009c5a:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c5e:	2d00      	cmp	r5, #0
 8009c60:	f000 8096 	beq.w	8009d90 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8009c64:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 8009c68:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8009c6c:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009c6e:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009c72:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c76:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009c78:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c7a:	d1fa      	bne.n	8009c72 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8009c7c:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8009c80:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8009c84:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8009c88:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c8c:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8009c8e:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c92:	d1f7      	bne.n	8009c84 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8009c94:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8009c98:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8009c9c:	17de      	asrs	r6, r3, #31
 8009c9e:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009ca2:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8009ca4:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8009ca8:	fbac 2303 	umull	r2, r3, ip, r3
 8009cac:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8009cb0:	09d2      	lsrs	r2, r2, #7
 8009cb2:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009cb6:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009cb8:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009cbc:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009cbe:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009cc2:	bfd8      	it	le
 8009cc4:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8009cc6:	69c5      	ldr	r5, [r0, #28]
 8009cc8:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009ccc:	bfc8      	it	gt
 8009cce:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009cd0:	7845      	ldrb	r5, [r0, #1]
 8009cd2:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8009cd6:	b21d      	sxth	r5, r3
 8009cd8:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009cda:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8009cde:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 8009ce0:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8009ce4:	b99f      	cbnz	r7, 8009d0e <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    if (false == pHandle->IsAlgorithmConverged)
 8009ce6:	b346      	cbz	r6, 8009d3a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009ce8:	42a2      	cmp	r2, r4
 8009cea:	dc23      	bgt.n	8009d34 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 8009cec:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009cf0:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
        pHandle->ReliabilityCounter++;
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009cf8:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8009cfa:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009cfe:	d81c      	bhi.n	8009d3a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009d00:	78c2      	ldrb	r2, [r0, #3]
 8009d02:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009d0e:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009d10:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009d14:	bfb8      	it	lt
 8009d16:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009d18:	429d      	cmp	r5, r3
 8009d1a:	dc12      	bgt.n	8009d42 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 8009d1c:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8009d1e:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8009d20:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8009d22:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8009d26:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8009d2a:	b136      	cbz	r6, 8009d3a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009d2c:	42a2      	cmp	r2, r4
 8009d2e:	dddd      	ble.n	8009cec <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	d0db      	beq.n	8009cec <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8009d3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8009d3e:	f7ff bd97 	b.w	8009870 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8009d42:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8009d46:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8009d4a:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009d4e:	f890 5119 	ldrb.w	r5, [r0, #281]	@ 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 8009d52:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8009d56:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009d5a:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8009d5e:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009d62:	fb03 f505 	mul.w	r5, r3, r5
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	bfb8      	it	lt
 8009d6a:	353f      	addlt	r5, #63	@ 0x3f
 8009d6c:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8009d6e:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	461d      	mov	r5, r3
 8009d76:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 8009d7a:	bfb8      	it	lt
 8009d7c:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8009d80:	11ad      	asrs	r5, r5, #6
 8009d82:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8009d86:	42af      	cmp	r7, r5
 8009d88:	bfd4      	ite	le
 8009d8a:	2500      	movle	r5, #0
 8009d8c:	2501      	movgt	r5, #1
 8009d8e:	e7c8      	b.n	8009d22 <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009d90:	462c      	mov	r4, r5
 8009d92:	462b      	mov	r3, r5
 8009d94:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009d96:	46ae      	mov	lr, r5
 8009d98:	e781      	b.n	8009c9e <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 8009d9a:	bf00      	nop

08009d9c <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8009d9c:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8009da0:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009da4:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009da8:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8009dac:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009dae:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8009db2:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009db6:	ebac 0101 	sub.w	r1, ip, r1
 8009dba:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009dbc:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8009dbe:	b959      	cbnz	r1, 8009dd8 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009dc0:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 8009dc4:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009dc6:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 8009dca:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009dce:	4113      	asrs	r3, r2
}
 8009dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8009dd4:	81c3      	strh	r3, [r0, #14]
}
 8009dd6:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8009dd8:	440a      	add	r2, r1
 8009dda:	b291      	uxth	r1, r2
 8009ddc:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8009dde:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8009de0:	bfdc      	itt	le
 8009de2:	eba1 010c 	suble.w	r1, r1, ip
 8009de6:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8009de8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009dec:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8009df0:	1a9b      	subs	r3, r3, r2
 8009df2:	e7e8      	b.n	8009dc6 <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08009df4 <STO_PLL_Clear>:
{
 8009df4:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8009df6:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8009dfa:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8009dfc:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8009e00:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8009e04:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8009e08:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8009e0a:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8009e0c:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8009e0e:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 8009e12:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8009e16:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 8009e1a:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8009e1e:	b11a      	cbz	r2, 8009e28 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8009e20:	0052      	lsls	r2, r2, #1
 8009e22:	3074      	adds	r0, #116	@ 0x74
 8009e24:	f000 fa08 	bl	800a238 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8009e28:	2100      	movs	r1, #0
 8009e2a:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8009e2e:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009e32:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 8009e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009e3a:	f7fe bad1 	b.w	80083e0 <PID_SetIntegralTerm>
 8009e3e:	bf00      	nop

08009e40 <STO_PLL_Init>:
{
 8009e40:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009e42:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009e46:	4b19      	ldr	r3, [pc, #100]	@ (8009eac <STO_PLL_Init+0x6c>)
 8009e48:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009e4c:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8009e50:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8009e52:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009e54:	fb93 f3fe 	sdiv	r3, r3, lr
 8009e58:	b21b      	sxth	r3, r3
{
 8009e5a:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8009e5c:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 8009e60:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 8009e62:	b30b      	cbz	r3, 8009ea8 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8009e64:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8009e66:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8009e6a:	f102 0c01 	add.w	ip, r2, #1
 8009e6e:	105b      	asrs	r3, r3, #1
 8009e70:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8009e72:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8009e76:	fa1f f28c 	uxth.w	r2, ip
 8009e7a:	d1f4      	bne.n	8009e66 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8009e7c:	b20a      	sxth	r2, r1
 8009e7e:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8009e80:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009e84:	480a      	ldr	r0, [pc, #40]	@ (8009eb0 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8009e86:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009e88:	17cb      	asrs	r3, r1, #31
 8009e8a:	fb80 0101 	smull	r0, r1, r0, r1
 8009e8e:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8009e92:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 8009e94:	4620      	mov	r0, r4
 8009e96:	f7ff ffad 	bl	8009df4 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8009e9a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009e9e:	f7fe fa8b 	bl	80083b8 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	8263      	strh	r3, [r4, #18]
}
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	4671      	mov	r1, lr
 8009eaa:	e7eb      	b.n	8009e84 <STO_PLL_Init+0x44>
 8009eac:	000fea5e 	.word	0x000fea5e
 8009eb0:	06488dc5 	.word	0x06488dc5

08009eb4 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 8009eb4:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 8009eb8:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8009eba:	b112      	cbz	r2, 8009ec2 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009ebc:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009ec0:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 8009ec2:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8009ec6:	b128      	cbz	r0, 8009ed4 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8009ec8:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009eca:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009ecc:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009ed0:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8009ed2:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009ed4:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009ed8:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8009edc:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009ede:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8009ee2:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009ee6:	4614      	mov	r4, r2
      if (wtemp > 0)
 8009ee8:	dd38      	ble.n	8009f5c <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8009eea:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8009eee:	bfbc      	itt	lt
 8009ef0:	f1cc 0c00 	rsblt	ip, ip, #0
 8009ef4:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	db34      	blt.n	8009f66 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8009efc:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009f00:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009f04:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009f08:	b349      	cbz	r1, 8009f5e <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8009f0a:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 8009f0e:	fa1f f18c 	uxth.w	r1, ip
 8009f12:	428d      	cmp	r5, r1
 8009f14:	d223      	bcs.n	8009f5e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009f16:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	bfb8      	it	lt
 8009f1e:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8009f20:	f342 120f 	sbfx	r2, r2, #4, #16
 8009f24:	4594      	cmp	ip, r2
 8009f26:	db1a      	blt.n	8009f5e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009f28:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8009f2c:	f1be 0f00 	cmp.w	lr, #0
 8009f30:	bfb8      	it	lt
 8009f32:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8009f36:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8009f3a:	45f4      	cmp	ip, lr
 8009f3c:	dc0f      	bgt.n	8009f5e <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8009f3e:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009f42:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 8009f46:	3201      	adds	r2, #1
 8009f48:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009f4a:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8009f4c:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009f50:	d804      	bhi.n	8009f5c <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8009f52:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009f54:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009f56:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009f5a:	701a      	strb	r2, [r3, #0]
}
 8009f5c:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 8009f64:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8009f66:	4252      	negs	r2, r2
 8009f68:	b212      	sxth	r2, r2
 8009f6a:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8009f6c:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009f70:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 8009f74:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009f76:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009f7a:	2900      	cmp	r1, #0
 8009f7c:	d0ef      	beq.n	8009f5e <STO_PLL_IsObserverConverged+0xaa>
 8009f7e:	e7c4      	b.n	8009f0a <STO_PLL_IsObserverConverged+0x56>

08009f80 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8009f80:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8009f82:	2200      	movs	r2, #0
 8009f84:	b299      	uxth	r1, r3
 8009f86:	f361 020f 	bfi	r2, r1, #0, #16
 8009f8a:	0c1b      	lsrs	r3, r3, #16
 8009f8c:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009f90:	b082      	sub	sp, #8
}
 8009f92:	4610      	mov	r0, r2
 8009f94:	b002      	add	sp, #8
 8009f96:	4770      	bx	lr

08009f98 <STO_PLL_GetEstimatedCurrent>:
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
//cstat !MISRAC2012-Rule-8.13
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 8009f98:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8009f9a:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009f9c:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009fa0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009fa4:	410a      	asrs	r2, r1
  return (iaux);
 8009fa6:	410b      	asrs	r3, r1
 8009fa8:	b292      	uxth	r2, r2
 8009faa:	f362 000f 	bfi	r0, r2, #0, #16
 8009fae:	b29b      	uxth	r3, r3
{
 8009fb0:	b082      	sub	sp, #8
  return (iaux);
 8009fb2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8009fb6:	b002      	add	sp, #8
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop

08009fbc <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8009fbc:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8009fc0:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8009fc2:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 8009fc6:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop

08009fcc <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8009fcc:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 8009fce:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop

08009fd4 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8009fd4:	6800      	ldr	r0, [r0, #0]
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	3034      	adds	r0, #52	@ 0x34
 8009fda:	f7fe ba01 	b.w	80083e0 <PID_SetIntegralTerm>
 8009fde:	bf00      	nop

08009fe0 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	3034      	adds	r0, #52	@ 0x34
 8009fe4:	f7fe b9fc 	b.w	80083e0 <PID_SetIntegralTerm>

08009fe8 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8009fe8:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop

08009ff0 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8009ff0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop

08009ff8 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8009ff8:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8009ffa:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8009ffe:	4770      	bx	lr

0800a000 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800a000:	6803      	ldr	r3, [r0, #0]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop

0800a00c <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800a00c:	6803      	ldr	r3, [r0, #0]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop

0800a018 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800a018:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop

0800a020 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a020:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a022:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a024:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800a026:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800a02a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800a02c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800a02e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800a030:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800a032:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a034:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800a036:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop

0800a03c <VSS_Init>:
{
 800a03c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800a03e:	f7ff ffef 	bl	800a020 <VSS_Clear>
}
 800a042:	bd08      	pop	{r3, pc}

0800a044 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800a044:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800a048:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800a04a:	b11a      	cbz	r2, 800a054 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800a04c:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800a050:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800a052:	4770      	bx	lr
{
 800a054:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a056:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800a05a:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a05c:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a05e:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a062:	785a      	ldrb	r2, [r3, #1]
 800a064:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a068:	4460      	add	r0, ip
 800a06a:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a06e:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a070:	b200      	sxth	r0, r0
 800a072:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a074:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a076:	b1fc      	cbz	r4, 800a0b8 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800a078:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800a07c:	b1f2      	cbz	r2, 800a0bc <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800a07e:	3a01      	subs	r2, #1
 800a080:	b212      	sxth	r2, r2
 800a082:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a084:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a088:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a08a:	db26      	blt.n	800a0da <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a08c:	eba1 0e0e 	sub.w	lr, r1, lr
 800a090:	fa0f fe8e 	sxth.w	lr, lr
 800a094:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a096:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800a09a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800a09e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a0a2:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800a0a6:	fb12 f205 	smulbb	r2, r2, r5
 800a0aa:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800a0ac:	db0e      	blt.n	800a0cc <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800a0ae:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a0b0:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800a0b2:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a0b6:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800a0b8:	8098      	strh	r0, [r3, #4]
}
 800a0ba:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800a0bc:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800a0c0:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800a0c2:	2401      	movs	r4, #1
 800a0c4:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800a0c8:	8098      	strh	r0, [r3, #4]
}
 800a0ca:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800a0cc:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800a0d0:	2c00      	cmp	r4, #0
 800a0d2:	d0f1      	beq.n	800a0b8 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800a0d4:	440a      	add	r2, r1
 800a0d6:	b210      	sxth	r0, r2
 800a0d8:	e7ee      	b.n	800a0b8 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800a0da:	ebae 0e01 	sub.w	lr, lr, r1
 800a0de:	fa0f fe8e 	sxth.w	lr, lr
 800a0e2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800a0e6:	e7d6      	b.n	800a096 <VSS_CalcElAngle+0x52>

0800a0e8 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800a0e8:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800a0ea:	2a01      	cmp	r2, #1
{
 800a0ec:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800a0ee:	d922      	bls.n	800a136 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800a0f0:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a0f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a0f4:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a0f6:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a0f8:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a0fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a0fe:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a100:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a102:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a106:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a108:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a10c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a110:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a114:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a116:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800a11a:	b212      	sxth	r2, r2
 800a11c:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800a11e:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a120:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800a122:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800a124:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800a128:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800a12a:	b970      	cbnz	r0, 800a14a <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a12c:	78da      	ldrb	r2, [r3, #3]
 800a12e:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800a130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a134:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800a136:	d00d      	beq.n	800a154 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a138:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800a13c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a140:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800a142:	bb00      	cbnz	r0, 800a186 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a144:	78da      	ldrb	r2, [r3, #3]
 800a146:	701a      	strb	r2, [r3, #0]
}
 800a148:	4770      	bx	lr
 800a14a:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff bb8e 	b.w	8009870 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800a154:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800a158:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a15c:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a15e:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a160:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a164:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a168:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a16a:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a16e:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a172:	785a      	ldrb	r2, [r3, #1]
 800a174:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800a178:	2000      	movs	r0, #0
 800a17a:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800a17c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a180:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800a182:	2800      	cmp	r0, #0
 800a184:	d0de      	beq.n	800a144 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff bb72 	b.w	8009870 <SPD_IsMecSpeedReliable>

0800a18c <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a18c:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800a18e:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a190:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800a194:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a196:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop

0800a19c <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800a19c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a1a0:	b9a3      	cbnz	r3, 800a1cc <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1a2:	8b43      	ldrh	r3, [r0, #26]
{
 800a1a4:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a1a6:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1a8:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a1b0:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a1b4:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800a1b6:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800a1ba:	b942      	cbnz	r2, 800a1ce <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1bc:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800a1c0:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1c2:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800a1c6:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a1c8:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800a1ca:	bd10      	pop	{r4, pc}
 800a1cc:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a1ce:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800a1d0:	fb02 f303 	mul.w	r3, r2, r3
 800a1d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a210 <VSS_SetMecAcceleration+0x74>)
 800a1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1da:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800a1de:	3301      	adds	r3, #1
 800a1e0:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1e2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800a1e6:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800a1e8:	b91b      	cbnz	r3, 800a1f2 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a1ea:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a1ec:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a1ee:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800a1f0:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1f2:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a1f6:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800a1fa:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a1fe:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a200:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800a204:	fb0e f303 	mul.w	r3, lr, r3
 800a208:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a20a:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a20c:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800a20e:	e7ef      	b.n	800a1f0 <VSS_SetMecAcceleration+0x54>
 800a210:	10624dd3 	.word	0x10624dd3

0800a214 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800a214:	b151      	cbz	r1, 800a22c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800a216:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800a21a:	2201      	movs	r2, #1
 800a21c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800a220:	b923      	cbnz	r3, 800a22c <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800a222:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800a226:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800a228:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800a22a:	4770      	bx	lr
  bool bAux = true;
 800a22c:	2001      	movs	r0, #1
 800a22e:	4770      	bx	lr

0800a230 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800a230:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop

0800a238 <memset>:
 800a238:	4402      	add	r2, r0
 800a23a:	4603      	mov	r3, r0
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d100      	bne.n	800a242 <memset+0xa>
 800a240:	4770      	bx	lr
 800a242:	f803 1b01 	strb.w	r1, [r3], #1
 800a246:	e7f9      	b.n	800a23c <memset+0x4>

0800a248 <__libc_init_array>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4d0d      	ldr	r5, [pc, #52]	@ (800a280 <__libc_init_array+0x38>)
 800a24c:	4c0d      	ldr	r4, [pc, #52]	@ (800a284 <__libc_init_array+0x3c>)
 800a24e:	1b64      	subs	r4, r4, r5
 800a250:	10a4      	asrs	r4, r4, #2
 800a252:	2600      	movs	r6, #0
 800a254:	42a6      	cmp	r6, r4
 800a256:	d109      	bne.n	800a26c <__libc_init_array+0x24>
 800a258:	4d0b      	ldr	r5, [pc, #44]	@ (800a288 <__libc_init_array+0x40>)
 800a25a:	4c0c      	ldr	r4, [pc, #48]	@ (800a28c <__libc_init_array+0x44>)
 800a25c:	f000 f826 	bl	800a2ac <_init>
 800a260:	1b64      	subs	r4, r4, r5
 800a262:	10a4      	asrs	r4, r4, #2
 800a264:	2600      	movs	r6, #0
 800a266:	42a6      	cmp	r6, r4
 800a268:	d105      	bne.n	800a276 <__libc_init_array+0x2e>
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a270:	4798      	blx	r3
 800a272:	3601      	adds	r6, #1
 800a274:	e7ee      	b.n	800a254 <__libc_init_array+0xc>
 800a276:	f855 3b04 	ldr.w	r3, [r5], #4
 800a27a:	4798      	blx	r3
 800a27c:	3601      	adds	r6, #1
 800a27e:	e7f2      	b.n	800a266 <__libc_init_array+0x1e>
 800a280:	0800a710 	.word	0x0800a710
 800a284:	0800a710 	.word	0x0800a710
 800a288:	0800a710 	.word	0x0800a710
 800a28c:	0800a714 	.word	0x0800a714

0800a290 <memcpy>:
 800a290:	440a      	add	r2, r1
 800a292:	4291      	cmp	r1, r2
 800a294:	f100 33ff 	add.w	r3, r0, #4294967295
 800a298:	d100      	bne.n	800a29c <memcpy+0xc>
 800a29a:	4770      	bx	lr
 800a29c:	b510      	push	{r4, lr}
 800a29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2a6:	4291      	cmp	r1, r2
 800a2a8:	d1f9      	bne.n	800a29e <memcpy+0xe>
 800a2aa:	bd10      	pop	{r4, pc}

0800a2ac <_init>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr

0800a2b8 <_fini>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr
