
Sensorfusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000265b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08026750  08026750  00027750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026f50  08026f50  00028350  2**0
                  CONTENTS
  4 .ARM          00000008  08026f50  08026f50  00027f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026f58  08026f58  00028350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026f58  08026f58  00027f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026f5c  08026f5c  00027f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08026f60  00028000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  20000350  080272b0  00028350  2**3
                  ALLOC
 10 ._user_heap_stack 00008200  20002620  080272b0  00028620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ce0a  00000000  00000000  00028380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f9e  00000000  00000000  0006518a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035b0  00000000  00000000  0006b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000299a  00000000  00000000  0006e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e935  00000000  00000000  00071072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031848  00000000  00000000  0008f9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b298b  00000000  00000000  000c11ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000093  00000000  00000000  00173b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f94c  00000000  00000000  00173c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08026738 	.word	0x08026738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	08026738 	.word	0x08026738

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_TIM_PeriodElapsedCallback>:
	double y;
	double z;
} Quaternion;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d102      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000ea8 	.word	0x20000ea8
 8000f64:	20000bf4 	.word	0x20000bf4

08000f68 <MX_Sensorfusion_init>:

static void MX_Sensorfusion_init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
	float ans_float;

	/* Initialize button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2000      	movs	r0, #0
 8000f72:	f00d fbf1 	bl	800e758 <BSP_PB_Init>

	/* Check what is the Push Button State when the button is not pressed. It can change across families */
	PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000f76:	2000      	movs	r0, #0
 8000f78:	f00d fc42 	bl	800e800 <BSP_PB_GetState>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b32      	ldr	r3, [pc, #200]	@ (8001054 <MX_Sensorfusion_init+0xec>)
 8000f8c:	601a      	str	r2, [r3, #0]

	/* Initialize LED */
	BSP_LED_Init(LED2);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f00d fb62 	bl	800e658 <BSP_LED_Init>

	/* Initialize Virtual COM Port */
	BSP_COM_Init(COM1);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f00d fc95 	bl	800e8c4 <BSP_COM_Init>

	/* Initialize Timer */
	BSP_IP_TIM_Init();
 8000f9a:	f003 ff77 	bl	8004e8c <MX_TIM3_Init>

	/* Configure Timer to run with desired algorithm frequency */
	TIM_Config(ALGO_FREQ);
 8000f9e:	2064      	movs	r0, #100	@ 0x64
 8000fa0:	f000 faf0 	bl	8001584 <TIM_Config>

	/* Initialize (disabled) sensors */
	Init_Sensors();
 8000fa4:	f000 f862 	bl	800106c <Init_Sensors>

	/* Sensor Fusion API initialization function */
	MotionFX_manager_init();
 8000fa8:	f016 fb14 	bl	80175d4 <MotionFX_manager_init>

	/* OPTIONAL */
	/* Get library version */
	MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 8000fac:	492a      	ldr	r1, [pc, #168]	@ (8001058 <MX_Sensorfusion_init+0xf0>)
 8000fae:	482b      	ldr	r0, [pc, #172]	@ (800105c <MX_Sensorfusion_init+0xf4>)
 8000fb0:	f016 fbac 	bl	801770c <MotionFX_manager_get_version>

	/* Enable magnetometer calibration */
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f016 fbc8 	bl	801774a <MotionFX_manager_MagCal_start>

	/* Test if calibration data are available */
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f020 fac1 	bl	8021544 <MotionFX_MagCal_getParams>

	/* If calibration data are available load HI coefficients */
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000fc2:	7c3b      	ldrb	r3, [r7, #16]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d132      	bne.n	800102e <MX_Sensorfusion_init+0xc6>
	{
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fcc:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001060 <MX_Sensorfusion_init+0xf8>
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	edc7 7a05 	vstr	s15, [r7, #20]
		MagOffset.x = (int32_t)ans_float;
 8000fd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe0:	ee17 2a90 	vmov	r2, s15
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <MX_Sensorfusion_init+0xfc>)
 8000fe6:	601a      	str	r2, [r3, #0]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fec:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001060 <MX_Sensorfusion_init+0xf8>
 8000ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff4:	edc7 7a05 	vstr	s15, [r7, #20]
		MagOffset.y = (int32_t)ans_float;
 8000ff8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001000:	ee17 2a90 	vmov	r2, s15
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_Sensorfusion_init+0xfc>)
 8001006:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001008:	edd7 7a03 	vldr	s15, [r7, #12]
 800100c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001060 <MX_Sensorfusion_init+0xf8>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	edc7 7a05 	vstr	s15, [r7, #20]
		MagOffset.z = (int32_t)ans_float;
 8001018:	edd7 7a05 	vldr	s15, [r7, #20]
 800101c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001020:	ee17 2a90 	vmov	r2, s15
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_Sensorfusion_init+0xfc>)
 8001026:	609a      	str	r2, [r3, #8]

		MagCalStatus = 1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_Sensorfusion_init+0x100>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
	}

	DWT_Init();
 800102e:	f000 fadd 	bl	80015ec <DWT_Init>

	BSP_LED_On(LED2);
 8001032:	2000      	movs	r0, #0
 8001034:	f00d fb22 	bl	800e67c <BSP_LED_On>
	HAL_Delay(500);
 8001038:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800103c:	f00d fd9e 	bl	800eb7c <HAL_Delay>
	BSP_LED_Off(LED2);
 8001040:	2000      	movs	r0, #0
 8001042:	f00d fb31 	bl	800e6a8 <BSP_LED_Off>

	/* Start receiving messages via DMA */
	UART_StartReceiveMsg();
 8001046:	f015 fb4b 	bl	80166e0 <UART_StartReceiveMsg>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000da8 	.word	0x20000da8
 8001058:	20000bf0 	.word	0x20000bf0
 800105c:	20000bcc 	.word	0x20000bcc
 8001060:	43fa0000 	.word	0x43fa0000
 8001064:	20000de0 	.word	0x20000de0
 8001068:	20000dec 	.word	0x20000dec

0800106c <Init_Sensors>:

static void Init_Sensors(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_Init();
 8001070:	f016 f984 	bl	801737c <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8001074:	f016 f98a 	bl	801738c <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 8001078:	f016 f990 	bl	801739c <BSP_SENSOR_MAG_Init>
	BSP_SENSOR_PRESS_Init();
 800107c:	f016 f996 	bl	80173ac <BSP_SENSOR_PRESS_Init>
	BSP_SENSOR_TEMP_Init();
 8001080:	f016 f99c 	bl	80173bc <BSP_SENSOR_TEMP_Init>
	BSP_SENSOR_HUM_Init();
 8001084:	f016 f9a2 	bl	80173cc <BSP_SENSOR_HUM_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001088:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800109c <Init_Sensors+0x30>
 800108c:	f016 fa47 	bl	801751e <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001090:	2004      	movs	r0, #4
 8001092:	f016 fa53 	bl	801753c <BSP_SENSOR_ACC_SetFullScale>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	42c80000 	.word	0x42c80000

080010a0 <RTC_Handler>:

static void RTC_Handler(TMsg *Msg)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t sub_sec = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructure;
	uint32_t ans_uint32;
	int32_t ans_int32;
	uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 80010ae:	4b32      	ldr	r3, [pc, #200]	@ (8001178 <RTC_Handler+0xd8>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (UseOfflineData == 1)
 80010b4:	4b31      	ldr	r3, [pc, #196]	@ (800117c <RTC_Handler+0xdc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d12b      	bne.n	8001114 <RTC_Handler+0x74>
	{
		Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <RTC_Handler+0xe0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a30      	ldr	r2, [pc, #192]	@ (8001184 <RTC_Handler+0xe4>)
 80010c2:	2134      	movs	r1, #52	@ 0x34
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	71da      	strb	r2, [r3, #7]
		Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <RTC_Handler+0xe0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001184 <RTC_Handler+0xe4>)
 80010d6:	2134      	movs	r1, #52	@ 0x34
 80010d8:	fb01 f303 	mul.w	r3, r1, r3
 80010dc:	4413      	add	r3, r2
 80010de:	3301      	adds	r3, #1
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	721a      	strb	r2, [r3, #8]
		Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <RTC_Handler+0xe0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <RTC_Handler+0xe4>)
 80010ec:	2134      	movs	r1, #52	@ 0x34
 80010ee:	fb01 f303 	mul.w	r3, r1, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	3302      	adds	r3, #2
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	725a      	strb	r2, [r3, #9]
		Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <RTC_Handler+0xe0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a20      	ldr	r2, [pc, #128]	@ (8001184 <RTC_Handler+0xe4>)
 8001102:	2134      	movs	r1, #52	@ 0x34
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3303      	adds	r3, #3
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	729a      	strb	r2, [r3, #10]
		Msg->Data[3] = (uint8_t)stimestructure.Hours;
		Msg->Data[4] = (uint8_t)stimestructure.Minutes;
		Msg->Data[5] = (uint8_t)stimestructure.Seconds;
		Msg->Data[6] = sub_sec;
	}
}
 8001112:	e02d      	b.n	8001170 <RTC_Handler+0xd0>
		(void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	4816      	ldr	r0, [pc, #88]	@ (8001178 <RTC_Handler+0xd8>)
 800111e:	f012 fe3c 	bl	8013d9a <HAL_RTC_GetTime>
		(void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4813      	ldr	r0, [pc, #76]	@ (8001178 <RTC_Handler+0xd8>)
 800112c:	f012 ff17 	bl	8013f5e <HAL_RTC_GetDate>
		ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2264      	movs	r2, #100	@ 0x64
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
		ans_int32 /= RtcSynchPrediv + 1;
 800113e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001142:	3301      	adds	r3, #1
 8001144:	fbb2 f3f3 	udiv	r3, r2, r3
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
		ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	b2db      	uxtb	r3, r3
 800114e:	623b      	str	r3, [r7, #32]
		sub_sec = (uint8_t)ans_uint32;
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		Msg->Data[3] = (uint8_t)stimestructure.Hours;
 8001156:	7a3a      	ldrb	r2, [r7, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	71da      	strb	r2, [r3, #7]
		Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800115c:	7a7a      	ldrb	r2, [r7, #9]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	721a      	strb	r2, [r3, #8]
		Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 8001162:	7aba      	ldrb	r2, [r7, #10]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	725a      	strb	r2, [r3, #9]
		Msg->Data[6] = sub_sec;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800116e:	729a      	strb	r2, [r3, #10]
}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	@ 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000df8 	.word	0x20000df8
 800117c:	20000bf5 	.word	0x20000bf5
 8001180:	20000d98 	.word	0x20000d98
 8001184:	20000bf8 	.word	0x20000bf8

08001188 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	MagCalRequest = 1U;
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <BSP_PB_Callback+0x1c>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000ddc 	.word	0x20000ddc

080011a8 <Accelero_Sensor_Handler>:

static void Accelero_Sensor_Handler(TMsg *Msg)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    if (UseOfflineData == 1)
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <Accelero_Sensor_Handler+0x94>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d121      	bne.n	80011fc <Accelero_Sensor_Handler+0x54>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <Accelero_Sensor_Handler+0x98>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a21      	ldr	r2, [pc, #132]	@ (8001244 <Accelero_Sensor_Handler+0x9c>)
 80011be:	2134      	movs	r1, #52	@ 0x34
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	3310      	adds	r3, #16
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 80011cc:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <Accelero_Sensor_Handler+0x98>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <Accelero_Sensor_Handler+0x9c>)
 80011d4:	2134      	movs	r1, #52	@ 0x34
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	4413      	add	r3, r2
 80011dc:	3314      	adds	r3, #20
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 80011e2:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <Accelero_Sensor_Handler+0x98>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <Accelero_Sensor_Handler+0x9c>)
 80011ea:	2134      	movs	r1, #52	@ 0x34
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	3318      	adds	r3, #24
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 80011f8:	6093      	str	r3, [r2, #8]
 80011fa:	e002      	b.n	8001202 <Accelero_Sensor_Handler+0x5a>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 80011fe:	f016 f94d 	bl	801749c <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3317      	adds	r3, #23
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 8001208:	6811      	ldr	r1, [r2, #0]
 800120a:	2204      	movs	r2, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f016 fbae 	bl	801796e <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	331b      	adds	r3, #27
 8001216:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 8001218:	6851      	ldr	r1, [r2, #4]
 800121a:	2204      	movs	r2, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f016 fba6 	bl	801796e <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	331f      	adds	r3, #31
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <Accelero_Sensor_Handler+0xa0>)
 8001228:	6891      	ldr	r1, [r2, #8]
 800122a:	2204      	movs	r2, #4
 800122c:	4618      	mov	r0, r3
 800122e:	f016 fb9e 	bl	801796e <Serialize_s32>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000bf5 	.word	0x20000bf5
 8001240:	20000d98 	.word	0x20000d98
 8001244:	20000bf8 	.word	0x20000bf8
 8001248:	20000dac 	.word	0x20000dac

0800124c <Gyro_Sensor_Handler>:

static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    if (UseOfflineData == 1)
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <Gyro_Sensor_Handler+0x94>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d121      	bne.n	80012a0 <Gyro_Sensor_Handler+0x54>
    {
		GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <Gyro_Sensor_Handler+0x98>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <Gyro_Sensor_Handler+0x9c>)
 8001262:	2134      	movs	r1, #52	@ 0x34
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	4413      	add	r3, r2
 800126a:	331c      	adds	r3, #28
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1f      	ldr	r2, [pc, #124]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 8001270:	6013      	str	r3, [r2, #0]
		GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <Gyro_Sensor_Handler+0x98>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <Gyro_Sensor_Handler+0x9c>)
 8001278:	2134      	movs	r1, #52	@ 0x34
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	3320      	adds	r3, #32
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a19      	ldr	r2, [pc, #100]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 8001286:	6053      	str	r3, [r2, #4]
		GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <Gyro_Sensor_Handler+0x98>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a16      	ldr	r2, [pc, #88]	@ (80012e8 <Gyro_Sensor_Handler+0x9c>)
 800128e:	2134      	movs	r1, #52	@ 0x34
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	4413      	add	r3, r2
 8001296:	3324      	adds	r3, #36	@ 0x24
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 800129c:	6093      	str	r3, [r2, #8]
 800129e:	e002      	b.n	80012a6 <Gyro_Sensor_Handler+0x5a>
    }
    else
    {
		BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80012a0:	4812      	ldr	r0, [pc, #72]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 80012a2:	f016 f908 	bl	80174b6 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3323      	adds	r3, #35	@ 0x23
 80012aa:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 80012ac:	6811      	ldr	r1, [r2, #0]
 80012ae:	2204      	movs	r2, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f016 fb5c 	bl	801796e <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3327      	adds	r3, #39	@ 0x27
 80012ba:	4a0c      	ldr	r2, [pc, #48]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 80012bc:	6851      	ldr	r1, [r2, #4]
 80012be:	2204      	movs	r2, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f016 fb54 	bl	801796e <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	332b      	adds	r3, #43	@ 0x2b
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <Gyro_Sensor_Handler+0xa0>)
 80012cc:	6891      	ldr	r1, [r2, #8]
 80012ce:	2204      	movs	r2, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f016 fb4c 	bl	801796e <Serialize_s32>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000bf5 	.word	0x20000bf5
 80012e4:	20000d98 	.word	0x20000d98
 80012e8:	20000bf8 	.word	0x20000bf8
 80012ec:	20000db8 	.word	0x20000db8

080012f0 <Magneto_Sensor_Handler>:

static void Magneto_Sensor_Handler(TMsg *Msg)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 80012f8:	4b68      	ldr	r3, [pc, #416]	@ (800149c <Magneto_Sensor_Handler+0x1ac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001300:	2b40      	cmp	r3, #64	@ 0x40
 8001302:	f040 80c7 	bne.w	8001494 <Magneto_Sensor_Handler+0x1a4>
	{
		if (UseOfflineData == 1)
 8001306:	4b66      	ldr	r3, [pc, #408]	@ (80014a0 <Magneto_Sensor_Handler+0x1b0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d121      	bne.n	8001352 <Magneto_Sensor_Handler+0x62>
		{
		 MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800130e:	4b65      	ldr	r3, [pc, #404]	@ (80014a4 <Magneto_Sensor_Handler+0x1b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a65      	ldr	r2, [pc, #404]	@ (80014a8 <Magneto_Sensor_Handler+0x1b8>)
 8001314:	2134      	movs	r1, #52	@ 0x34
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	3328      	adds	r3, #40	@ 0x28
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a62      	ldr	r2, [pc, #392]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001322:	6013      	str	r3, [r2, #0]
		 MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 8001324:	4b5f      	ldr	r3, [pc, #380]	@ (80014a4 <Magneto_Sensor_Handler+0x1b4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a5f      	ldr	r2, [pc, #380]	@ (80014a8 <Magneto_Sensor_Handler+0x1b8>)
 800132a:	2134      	movs	r1, #52	@ 0x34
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	332c      	adds	r3, #44	@ 0x2c
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a5d      	ldr	r2, [pc, #372]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001338:	6053      	str	r3, [r2, #4]
		 MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800133a:	4b5a      	ldr	r3, [pc, #360]	@ (80014a4 <Magneto_Sensor_Handler+0x1b4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5a      	ldr	r2, [pc, #360]	@ (80014a8 <Magneto_Sensor_Handler+0x1b8>)
 8001340:	2134      	movs	r1, #52	@ 0x34
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	4413      	add	r3, r2
 8001348:	3330      	adds	r3, #48	@ 0x30
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a57      	ldr	r2, [pc, #348]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800134e:	6093      	str	r3, [r2, #8]
 8001350:	e088      	b.n	8001464 <Magneto_Sensor_Handler+0x174>
		}
		else
		{
			BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001352:	4856      	ldr	r0, [pc, #344]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001354:	f016 f8bc 	bl	80174d0 <BSP_SENSOR_MAG_GetAxes>

			if (MagCalStatus == 0U)
 8001358:	4b55      	ldr	r3, [pc, #340]	@ (80014b0 <Magneto_Sensor_Handler+0x1c0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d16c      	bne.n	800143a <Magneto_Sensor_Handler+0x14a>
			{
				mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001360:	4b52      	ldr	r3, [pc, #328]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80014b4 <Magneto_Sensor_Handler+0x1c4>
 8001370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001374:	edc7 7a07 	vstr	s15, [r7, #28]
				mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001378:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80014b4 <Magneto_Sensor_Handler+0x1c4>
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	edc7 7a08 	vstr	s15, [r7, #32]
				mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001390:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80014b4 <Magneto_Sensor_Handler+0x1c4>
 80013a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

				mag_data_in.time_stamp = (int)TimeStamp;
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <Magneto_Sensor_Handler+0x1c8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
				TimeStamp += (uint32_t)ALGO_PERIOD;
 80013ae:	4b42      	ldr	r3, [pc, #264]	@ (80014b8 <Magneto_Sensor_Handler+0x1c8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	330a      	adds	r3, #10
 80013b4:	4a40      	ldr	r2, [pc, #256]	@ (80014b8 <Magneto_Sensor_Handler+0x1c8>)
 80013b6:	6013      	str	r3, [r2, #0]

				MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80013b8:	f107 020c 	add.w	r2, r7, #12
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f016 f9b2 	bl	801772c <MotionFX_manager_MagCal_run>

				if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80013c8:	7e3b      	ldrb	r3, [r7, #24]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d135      	bne.n	800143a <Magneto_Sensor_Handler+0x14a>
				{
					MagCalStatus = 1;
 80013ce:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <Magneto_Sensor_Handler+0x1c0>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]

					ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80013d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80014bc <Magneto_Sensor_Handler+0x1cc>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					MagOffset.x = (int32_t)ans_float;
 80013e4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ec:	ee17 2a90 	vmov	r2, s15
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Magneto_Sensor_Handler+0x1d0>)
 80013f2:	601a      	str	r2, [r3, #0]
					ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80013f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013f8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80014bc <Magneto_Sensor_Handler+0x1cc>
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					MagOffset.y = (int32_t)ans_float;
 8001404:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 2a90 	vmov	r2, s15
 8001410:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Magneto_Sensor_Handler+0x1d0>)
 8001412:	605a      	str	r2, [r3, #4]
					ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001414:	edd7 7a05 	vldr	s15, [r7, #20]
 8001418:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80014bc <Magneto_Sensor_Handler+0x1cc>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					MagOffset.z = (int32_t)ans_float;
 8001424:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142c:	ee17 2a90 	vmov	r2, s15
 8001430:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <Magneto_Sensor_Handler+0x1d0>)
 8001432:	609a      	str	r2, [r3, #8]

					/* Disable magnetometer calibration */
					MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001434:	200a      	movs	r0, #10
 8001436:	f016 f994 	bl	8017762 <MotionFX_manager_MagCal_stop>
				}
			}

			MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <Magneto_Sensor_Handler+0x1d0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001446:	6013      	str	r3, [r2, #0]
			MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <Magneto_Sensor_Handler+0x1d0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001454:	6053      	str	r3, [r2, #4]
			MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <Magneto_Sensor_Handler+0x1d0>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 8001462:	6093      	str	r3, [r2, #8]
		}

		Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	332f      	adds	r3, #47	@ 0x2f
 8001468:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800146a:	6811      	ldr	r1, [r2, #0]
 800146c:	2204      	movs	r2, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f016 fa7d 	bl	801796e <Serialize_s32>
		Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3333      	adds	r3, #51	@ 0x33
 8001478:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800147a:	6851      	ldr	r1, [r2, #4]
 800147c:	2204      	movs	r2, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f016 fa75 	bl	801796e <Serialize_s32>
		Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3337      	adds	r3, #55	@ 0x37
 8001488:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <Magneto_Sensor_Handler+0x1bc>)
 800148a:	6891      	ldr	r1, [r2, #8]
 800148c:	2204      	movs	r2, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f016 fa6d 	bl	801796e <Serialize_s32>
	}
}
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000bc8 	.word	0x20000bc8
 80014a0:	20000bf5 	.word	0x20000bf5
 80014a4:	20000d98 	.word	0x20000d98
 80014a8:	20000bf8 	.word	0x20000bf8
 80014ac:	20000dc4 	.word	0x20000dc4
 80014b0:	20000dec 	.word	0x20000dec
 80014b4:	3b03126f 	.word	0x3b03126f
 80014b8:	20000dd8 	.word	0x20000dd8
 80014bc:	43fa0000 	.word	0x43fa0000
 80014c0:	20000de0 	.word	0x20000de0

080014c4 <Temperature_Sensor_Handler>:
  * @brief  Handles the TEMP axes data getting/sending
  * @param  Msg the TEMP part of the stream
  * @retval None
  */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80014cc:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <Temperature_Sensor_Handler+0x4c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d117      	bne.n	8001508 <Temperature_Sensor_Handler+0x44>
	{
		if (UseOfflineData == 1)
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <Temperature_Sensor_Handler+0x50>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10b      	bne.n	80014f8 <Temperature_Sensor_Handler+0x34>
		{
			TempValue = OfflineData[OfflineDataReadIndex].temperature;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <Temperature_Sensor_Handler+0x54>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <Temperature_Sensor_Handler+0x58>)
 80014e6:	2134      	movs	r1, #52	@ 0x34
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	330c      	adds	r3, #12
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <Temperature_Sensor_Handler+0x5c>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e002      	b.n	80014fe <Temperature_Sensor_Handler+0x3a>
		}
		else
		{
			BSP_SENSOR_TEMP_GetValue(&TempValue);
 80014f8:	4809      	ldr	r0, [pc, #36]	@ (8001520 <Temperature_Sensor_Handler+0x5c>)
 80014fa:	f015 fff6 	bl	80174ea <BSP_SENSOR_TEMP_GetValue>
		}

		(void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	330f      	adds	r3, #15
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <Temperature_Sensor_Handler+0x5c>)
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	601a      	str	r2, [r3, #0]
	}
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000bc8 	.word	0x20000bc8
 8001514:	20000bf5 	.word	0x20000bf5
 8001518:	20000d98 	.word	0x20000d98
 800151c:	20000bf8 	.word	0x20000bf8
 8001520:	20000dd0 	.word	0x20000dd0

08001524 <Humidity_Sensor_Handler>:
  * @brief  Handles the HUM axes data getting/sending
  * @param  Msg the HUM part of the stream
  * @retval None
  */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <Humidity_Sensor_Handler+0x4c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d117      	bne.n	8001568 <Humidity_Sensor_Handler+0x44>
	{
		if (UseOfflineData == 1)
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <Humidity_Sensor_Handler+0x50>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10b      	bne.n	8001558 <Humidity_Sensor_Handler+0x34>
		{
			HumValue = OfflineData[OfflineDataReadIndex].humidity;
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <Humidity_Sensor_Handler+0x54>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <Humidity_Sensor_Handler+0x58>)
 8001546:	2134      	movs	r1, #52	@ 0x34
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	3308      	adds	r3, #8
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <Humidity_Sensor_Handler+0x5c>)
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e002      	b.n	800155e <Humidity_Sensor_Handler+0x3a>
		}
		else
		{
			BSP_SENSOR_HUM_GetValue(&HumValue);
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <Humidity_Sensor_Handler+0x5c>)
 800155a:	f015 ffd3 	bl	8017504 <BSP_SENSOR_HUM_GetValue>
		}

		(void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3313      	adds	r3, #19
 8001562:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <Humidity_Sensor_Handler+0x5c>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	601a      	str	r2, [r3, #0]
	}
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000bc8 	.word	0x20000bc8
 8001574:	20000bf5 	.word	0x20000bf5
 8001578:	20000d98 	.word	0x20000d98
 800157c:	20000bf8 	.word	0x20000bf8
 8001580:	20000dd4 	.word	0x20000dd4

08001584 <TIM_Config>:
  * @brief  Timer configuration
  * @param  Freq the desired Timer frequency
  * @retval None
  */
static void TIM_Config(uint32_t Freq)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800158c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001590:	617b      	str	r3, [r7, #20]
	uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <TIM_Config+0x60>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fbb2 f3f3 	udiv	r3, r2, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
	uint32_t period = (tim_counter_clock / Freq) - 1;
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]

	BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80015ac:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <TIM_Config+0x64>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6053      	str	r3, [r2, #4]
	BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <TIM_Config+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	BSP_IP_TIM_Handle.Init.Period = period;
 80015b8:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <TIM_Config+0x64>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	60d3      	str	r3, [r2, #12]
	BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <TIM_Config+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
	BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <TIM_Config+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80015ca:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <TIM_Config+0x64>)
 80015cc:	f012 fdd4 	bl	8014178 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <TIM_Config+0x56>
	{
		Error_Handler();
 80015d6:	f003 fd51 	bl	800507c <Error_Handler>
	}
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200000d8 	.word	0x200000d8
 80015e8:	20000ea8 	.word	0x20000ea8

080015ec <DWT_Init>:
  * @brief  Initialize DWT register for counting clock cycles purpose
  * @param  None
  * @retval None
  */
static void DWT_Init(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <DWT_Init+0x28>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <DWT_Init+0x28>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015fa:	60d3      	str	r3, [r2, #12]
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <DWT_Init+0x2c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <DWT_Init+0x2c>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000edf0 	.word	0xe000edf0
 8001618:	e0001000 	.word	0xe0001000

0800161c <DWT_Start>:
  * @brief  Start counting clock cycles
  * @param  None
  * @retval None
  */
static void DWT_Start(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <DWT_Start+0x20>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <DWT_Start+0x20>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a04      	ldr	r2, [pc, #16]	@ (800163c <DWT_Start+0x20>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e0001000 	.word	0xe0001000

08001640 <DWT_Stop>:
  * @brief  Stop counting clock cycles and calculate elapsed time in [us]
  * @param  None
  * @retval Elapsed time in [us]
  */
static uint32_t DWT_Stop(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
	volatile uint32_t cycles_count = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
	uint32_t system_core_clock_mhz = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <DWT_Stop+0x44>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <DWT_Stop+0x44>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT;
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <DWT_Stop+0x44>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	603b      	str	r3, [r7, #0]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <DWT_Stop+0x48>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a09      	ldr	r2, [pc, #36]	@ (800168c <DWT_Stop+0x4c>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	607b      	str	r3, [r7, #4]
	return cycles_count / system_core_clock_mhz;
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e0001000 	.word	0xe0001000
 8001688:	200000d8 	.word	0x200000d8
 800168c:	431bde83 	.word	0x431bde83

08001690 <normQuaternion>:
    {
        UART_SendChar(*str++);
    }
}

double normQuaternion(Quaternion q) {
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	eeb0 4a40 	vmov.f32	s8, s0
 800169a:	eef0 4a60 	vmov.f32	s9, s1
 800169e:	eeb0 5a41 	vmov.f32	s10, s2
 80016a2:	eef0 5a61 	vmov.f32	s11, s3
 80016a6:	eeb0 6a42 	vmov.f32	s12, s4
 80016aa:	eef0 6a62 	vmov.f32	s13, s5
 80016ae:	eeb0 7a43 	vmov.f32	s14, s6
 80016b2:	eef0 7a63 	vmov.f32	s15, s7
 80016b6:	ed87 4b00 	vstr	d4, [r7]
 80016ba:	ed87 5b02 	vstr	d5, [r7, #8]
 80016be:	ed87 6b04 	vstr	d6, [r7, #16]
 80016c2:	ed87 7b06 	vstr	d7, [r7, #24]
	return sqrt(q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z);
 80016c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ce:	f7fe ff93 	bl	80005f8 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdcd 	bl	800028c <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001702:	f7fe ff79 	bl	80005f8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7fe fdbd 	bl	800028c <__adddf3>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4614      	mov	r4, r2
 8001718:	461d      	mov	r5, r3
 800171a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800171e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001722:	f7fe ff69 	bl	80005f8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7fe fdad 	bl	800028c <__adddf3>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ec43 2b17 	vmov	d7, r2, r3
 800173a:	eeb0 0a47 	vmov.f32	s0, s14
 800173e:	eef0 0a67 	vmov.f32	s1, s15
 8001742:	f020 fcff 	bl	8022144 <sqrt>
 8001746:	eeb0 7a40 	vmov.f32	s14, s0
 800174a:	eef0 7a60 	vmov.f32	s15, s1
}
 800174e:	eeb0 0a47 	vmov.f32	s0, s14
 8001752:	eef0 0a67 	vmov.f32	s1, s15
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bdb0      	pop	{r4, r5, r7, pc}

0800175c <inverseQuaternion>:

Quaternion inverseQuaternion(Quaternion q) {
 800175c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001760:	b09a      	sub	sp, #104	@ 0x68
 8001762:	af00      	add	r7, sp, #0
 8001764:	eeb0 4a40 	vmov.f32	s8, s0
 8001768:	eef0 4a60 	vmov.f32	s9, s1
 800176c:	eeb0 5a41 	vmov.f32	s10, s2
 8001770:	eef0 5a61 	vmov.f32	s11, s3
 8001774:	eeb0 6a42 	vmov.f32	s12, s4
 8001778:	eef0 6a62 	vmov.f32	s13, s5
 800177c:	eeb0 7a43 	vmov.f32	s14, s6
 8001780:	eef0 7a63 	vmov.f32	s15, s7
 8001784:	ed87 4b08 	vstr	d4, [r7, #32]
 8001788:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800178c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001790:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	double norm = normQuaternion(q);
 8001794:	ed97 4b08 	vldr	d4, [r7, #32]
 8001798:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 800179c:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80017a0:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80017a4:	eeb0 0a44 	vmov.f32	s0, s8
 80017a8:	eef0 0a64 	vmov.f32	s1, s9
 80017ac:	eeb0 1a45 	vmov.f32	s2, s10
 80017b0:	eef0 1a65 	vmov.f32	s3, s11
 80017b4:	eeb0 2a46 	vmov.f32	s4, s12
 80017b8:	eef0 2a66 	vmov.f32	s5, s13
 80017bc:	eeb0 3a47 	vmov.f32	s6, s14
 80017c0:	eef0 3a67 	vmov.f32	s7, s15
 80017c4:	f7ff ff64 	bl	8001690 <normQuaternion>
 80017c8:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	q.w =  q.w / norm;
 80017cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80017d4:	f7ff f83a 	bl	800084c <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	q.x = -q.x / norm;
 80017e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017e4:	4692      	mov	sl, r2
 80017e6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80017ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80017ee:	4650      	mov	r0, sl
 80017f0:	4659      	mov	r1, fp
 80017f2:	f7ff f82b 	bl	800084c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	q.y = -q.y / norm;
 80017fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001802:	4690      	mov	r8, r2
 8001804:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001808:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800180c:	4640      	mov	r0, r8
 800180e:	4649      	mov	r1, r9
 8001810:	f7ff f81c 	bl	800084c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	q.z = -q.z / norm;
 800181c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001820:	4614      	mov	r4, r2
 8001822:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001826:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7ff f80d 	bl	800084c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	return q;
 800183a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800183e:	f107 0520 	add.w	r5, r7, #32
 8001842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001846:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800184a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800184e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001852:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001856:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800185a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800185e:	ec49 8b14 	vmov	d4, r8, r9
 8001862:	ec45 4b15 	vmov	d5, r4, r5
 8001866:	ec41 0b16 	vmov	d6, r0, r1
 800186a:	ec43 2b17 	vmov	d7, r2, r3
}
 800186e:	eeb0 0a44 	vmov.f32	s0, s8
 8001872:	eef0 0a64 	vmov.f32	s1, s9
 8001876:	eeb0 1a45 	vmov.f32	s2, s10
 800187a:	eef0 1a65 	vmov.f32	s3, s11
 800187e:	eeb0 2a46 	vmov.f32	s4, s12
 8001882:	eef0 2a66 	vmov.f32	s5, s13
 8001886:	eeb0 3a47 	vmov.f32	s6, s14
 800188a:	eef0 3a67 	vmov.f32	s7, s15
 800188e:	3768      	adds	r7, #104	@ 0x68
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001896 <scaleQuaternion>:

Quaternion scaleQuaternion(Quaternion q, double scalar) {
 8001896:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800189a:	b09a      	sub	sp, #104	@ 0x68
 800189c:	af00      	add	r7, sp, #0
 800189e:	eeb0 5a41 	vmov.f32	s10, s2
 80018a2:	eef0 5a61 	vmov.f32	s11, s3
 80018a6:	eeb0 6a42 	vmov.f32	s12, s4
 80018aa:	eef0 6a62 	vmov.f32	s13, s5
 80018ae:	eeb0 7a43 	vmov.f32	s14, s6
 80018b2:	eef0 7a63 	vmov.f32	s15, s7
 80018b6:	ed87 4b08 	vstr	d4, [r7, #32]
 80018ba:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80018be:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 80018c2:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 80018c6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
	q.w = scalar * q.w;
 80018ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d2:	f7fe fe91 	bl	80005f8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	q.x = scalar * q.x;
 80018de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018e6:	f7fe fe87 	bl	80005f8 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	q.y = scalar * q.y;
 80018f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018fa:	f7fe fe7d 	bl	80005f8 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	q.z = scalar * q.z;
 8001906:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800190a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800190e:	f7fe fe73 	bl	80005f8 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	return q;
 800191a:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800191e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800192a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800192e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001932:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001936:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800193a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800193e:	ec49 8b14 	vmov	d4, r8, r9
 8001942:	ec45 4b15 	vmov	d5, r4, r5
 8001946:	ec41 0b16 	vmov	d6, r0, r1
 800194a:	ec43 2b17 	vmov	d7, r2, r3
}
 800194e:	eeb0 0a44 	vmov.f32	s0, s8
 8001952:	eef0 0a64 	vmov.f32	s1, s9
 8001956:	eeb0 1a45 	vmov.f32	s2, s10
 800195a:	eef0 1a65 	vmov.f32	s3, s11
 800195e:	eeb0 2a46 	vmov.f32	s4, s12
 8001962:	eef0 2a66 	vmov.f32	s5, s13
 8001966:	eeb0 3a47 	vmov.f32	s6, s14
 800196a:	eef0 3a67 	vmov.f32	s7, s15
 800196e:	3768      	adds	r7, #104	@ 0x68
 8001970:	46bd      	mov	sp, r7
 8001972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001976 <kreuzproduktQuaternion>:

Quaternion kreuzproduktQuaternion(Quaternion q1, Quaternion q2) {
 8001976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197a:	b0a8      	sub	sp, #160	@ 0xa0
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
 8001982:	ed87 1b12 	vstr	d1, [r7, #72]	@ 0x48
 8001986:	ed87 2b14 	vstr	d2, [r7, #80]	@ 0x50
 800198a:	ed87 3b16 	vstr	d3, [r7, #88]	@ 0x58
 800198e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001992:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001996:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800199a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	Quaternion returnQuaternion;
	returnQuaternion.w = (
		q1.w * q2.w -
 800199e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a6:	f7fe fe27 	bl	80005f8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4614      	mov	r4, r2
 80019b0:	461d      	mov	r5, r3
		q1.x * q2.x -
 80019b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80019b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019ba:	f7fe fe1d 	bl	80005f8 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
		q1.w * q2.w -
 80019c2:	4620      	mov	r0, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	f7fe fc5f 	bl	8000288 <__aeabi_dsub>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4614      	mov	r4, r2
 80019d0:	461d      	mov	r5, r3
		q1.y * q2.y -
 80019d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80019d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019da:	f7fe fe0d 	bl	80005f8 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
		q1.x * q2.x -
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f7fe fc4f 	bl	8000288 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
		q1.z * q2.z
 80019f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80019f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019fa:	f7fe fdfd 	bl	80005f8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
		q1.y * q2.y -
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fc3f 	bl	8000288 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
	returnQuaternion.w = (
 8001a0e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	);
	returnQuaternion.x = (
		q1.x * q2.w +
 8001a12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	461d      	mov	r5, r3
		q1.w * q2.x -
 8001a26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a2e:	f7fe fde3 	bl	80005f8 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
		q1.x * q2.w +
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fc27 	bl	800028c <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
		q1.z * q2.y +
 8001a46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001a4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a4e:	f7fe fdd3 	bl	80005f8 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
		q1.w * q2.x -
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fc15 	bl	8000288 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
		q1.y * q2.z
 8001a66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
		q1.z * q2.y +
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fc07 	bl	800028c <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
	returnQuaternion.x = (
 8001a82:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	);
	returnQuaternion.y = (
		q1.y * q2.w +
 8001a86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4614      	mov	r4, r2
 8001a98:	461d      	mov	r5, r3
		q1.z * q2.x +
 8001a9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aa2:	f7fe fda9 	bl	80005f8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
		q1.y * q2.w +
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe fbed 	bl	800028c <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
		q1.w * q2.y -
 8001aba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001abe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ac2:	f7fe fd99 	bl	80005f8 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
		q1.z * q2.x +
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fbdd 	bl	800028c <__adddf3>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	461d      	mov	r5, r3
		q1.x * q2.z
 8001ada:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ade:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ae2:	f7fe fd89 	bl	80005f8 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
		q1.w * q2.y -
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fbcb 	bl	8000288 <__aeabi_dsub>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
	returnQuaternion.y = (
 8001af6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	);
	returnQuaternion.z = (
		q1.z * q2.w -
 8001afa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b02:	f7fe fd79 	bl	80005f8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	461d      	mov	r5, r3
		q1.y * q2.x +
 8001b0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b16:	f7fe fd6f 	bl	80005f8 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
		q1.z * q2.w -
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fbb1 	bl	8000288 <__aeabi_dsub>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	461d      	mov	r5, r3
		q1.x * q2.y +
 8001b2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001b32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
		q1.y * q2.x +
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fba3 	bl	800028c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	461d      	mov	r5, r3
		q1.w * q2.z
 8001b4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b56:	f7fe fd4f 	bl	80005f8 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
		q1.x * q2.y +
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fb93 	bl	800028c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
	returnQuaternion.z = (
 8001b6a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	);
	return returnQuaternion;
 8001b6e:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8001b72:	f107 0560 	add.w	r5, r7, #96	@ 0x60
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b82:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001b86:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001b8a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001b8e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001b92:	ec49 8b14 	vmov	d4, r8, r9
 8001b96:	ec45 4b15 	vmov	d5, r4, r5
 8001b9a:	ec41 0b16 	vmov	d6, r0, r1
 8001b9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ba2:	eeb0 0a44 	vmov.f32	s0, s8
 8001ba6:	eef0 0a64 	vmov.f32	s1, s9
 8001baa:	eeb0 1a45 	vmov.f32	s2, s10
 8001bae:	eef0 1a65 	vmov.f32	s3, s11
 8001bb2:	eeb0 2a46 	vmov.f32	s4, s12
 8001bb6:	eef0 2a66 	vmov.f32	s5, s13
 8001bba:	eeb0 3a47 	vmov.f32	s6, s14
 8001bbe:	eef0 3a67 	vmov.f32	s7, s15
 8001bc2:	37a0      	adds	r7, #160	@ 0xa0
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bca:	0000      	movs	r0, r0
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <main>:

int main(void)
{
 8001bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd4:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8001bd8:	af00      	add	r7, sp, #0
	HAL_Init();
 8001bda:	f00c ff5d 	bl	800ea98 <HAL_Init>

	SystemClock_Config();
 8001bde:	f002 febb 	bl	8004958 <SystemClock_Config>

	MX_GPIO_Init();
 8001be2:	f002 ff25 	bl	8004a30 <MX_GPIO_Init>
	MX_DMA_Init();
 8001be6:	f003 f99f 	bl	8004f28 <MX_DMA_Init>
	MX_CRC_Init();
 8001bea:	f003 f8e1 	bl	8004db0 <MX_CRC_Init>
	MX_TIM1_Init();
 8001bee:	f002 ffd5 	bl	8004b9c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001bf2:	f003 f85d 	bl	8004cb0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001bf6:	f003 f949 	bl	8004e8c <MX_TIM3_Init>
	MX_RTC_Init();
 8001bfa:	f003 f8ed 	bl	8004dd8 <MX_RTC_Init>
	MX_Sensorfusion_init();
 8001bfe:	f7ff f9b3 	bl	8000f68 <MX_Sensorfusion_init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c02:	2100      	movs	r1, #0
 8001c04:	48bf      	ldr	r0, [pc, #764]	@ (8001f04 <main+0x334>)
 8001c06:	f012 fbf1 	bl	80143ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	48bd      	ldr	r0, [pc, #756]	@ (8001f04 <main+0x334>)
 8001c0e:	f012 fbed 	bl	80143ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c12:	2100      	movs	r1, #0
 8001c14:	48bc      	ldr	r0, [pc, #752]	@ (8001f08 <main+0x338>)
 8001c16:	f012 fbe9 	bl	80143ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	48ba      	ldr	r0, [pc, #744]	@ (8001f08 <main+0x338>)
 8001c1e:	f012 fbe5 	bl	80143ec <HAL_TIM_PWM_Start>

    setPwmDutyCycle(&htim1, TIM_CHANNEL_1, 0.45f);
 8001c22:	ed9f 0aba 	vldr	s0, [pc, #744]	@ 8001f0c <main+0x33c>
 8001c26:	2100      	movs	r1, #0
 8001c28:	48b6      	ldr	r0, [pc, #728]	@ (8001f04 <main+0x334>)
 8001c2a:	f002 fe3b 	bl	80048a4 <setPwmDutyCycle>
    setPwmDutyCycle(&htim1, TIM_CHANNEL_2, 0.50f);
 8001c2e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001c32:	2104      	movs	r1, #4
 8001c34:	48b3      	ldr	r0, [pc, #716]	@ (8001f04 <main+0x334>)
 8001c36:	f002 fe35 	bl	80048a4 <setPwmDutyCycle>
    setPwmDutyCycle(&htim2, TIM_CHANNEL_1, 0.55f);
 8001c3a:	ed9f 0ab5 	vldr	s0, [pc, #724]	@ 8001f10 <main+0x340>
 8001c3e:	2100      	movs	r1, #0
 8001c40:	48b1      	ldr	r0, [pc, #708]	@ (8001f08 <main+0x338>)
 8001c42:	f002 fe2f 	bl	80048a4 <setPwmDutyCycle>
    setPwmDutyCycle(&htim2, TIM_CHANNEL_2, 0.60f);
 8001c46:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8001f14 <main+0x344>
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	48ae      	ldr	r0, [pc, #696]	@ (8001f08 <main+0x338>)
 8001c4e:	f002 fe29 	bl	80048a4 <setPwmDutyCycle>

    HAL_Delay(100);
 8001c52:	2064      	movs	r0, #100	@ 0x64
 8001c54:	f00c ff92 	bl	800eb7c <HAL_Delay>

	int cnt = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
	};

	// init_complementary_filter();

	roll_pitch_gain = (0.5 * (
        attitute_p_gain[X] +
 8001c5e:	4bae      	ldr	r3, [pc, #696]	@ (8001f18 <main+0x348>)
 8001c60:	e9d3 0100 	ldrd	r0, r1, [r3]
        attitute_p_gain[Y]
 8001c64:	4bac      	ldr	r3, [pc, #688]	@ (8001f18 <main+0x348>)
 8001c66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        attitute_p_gain[X] +
 8001c6a:	f7fe fb0f 	bl	800028c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
	roll_pitch_gain = (0.5 * (
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	@ (8001f1c <main+0x34c>)
 8001c7c:	f7fe fcbc 	bl	80005f8 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	4ba5      	ldr	r3, [pc, #660]	@ (8001f20 <main+0x350>)
 8001c8a:	e9c3 0100 	strd	r0, r1, [r3]
    ));
    yaw_w = attitute_p_gain[Z] / roll_pitch_gain;
 8001c8e:	4ba2      	ldr	r3, [pc, #648]	@ (8001f18 <main+0x348>)
 8001c90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c94:	4ba2      	ldr	r3, [pc, #648]	@ (8001f20 <main+0x350>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fdd7 	bl	800084c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8001f24 <main+0x354>)
 8001ca8:	e9c3 0100 	strd	r0, r1, [r3]

    if (yaw_w < 0.0) {
 8001cac:	4b9d      	ldr	r3, [pc, #628]	@ (8001f24 <main+0x354>)
 8001cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	f7fe ff0f 	bl	8000adc <__aeabi_dcmplt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <main+0x102>
        yaw_w = 0.0;
 8001cc4:	4997      	ldr	r1, [pc, #604]	@ (8001f24 <main+0x354>)
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9c1 2300 	strd	r2, r3, [r1]
    }
    if (yaw_w > 1.0) {
 8001cd2:	4b94      	ldr	r3, [pc, #592]	@ (8001f24 <main+0x354>)
 8001cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b92      	ldr	r3, [pc, #584]	@ (8001f28 <main+0x358>)
 8001cde:	f7fe ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <main+0x124>
        yaw_w = 1.0;
 8001ce8:	498e      	ldr	r1, [pc, #568]	@ (8001f24 <main+0x354>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b8e      	ldr	r3, [pc, #568]	@ (8001f28 <main+0x358>)
 8001cf0:	e9c1 2300 	strd	r2, r3, [r1]
    }

    thr_int[0] = 0.0;
 8001cf4:	498d      	ldr	r1, [pc, #564]	@ (8001f2c <main+0x35c>)
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9c1 2300 	strd	r2, r3, [r1]
    thr_int[1] = 0.0;
 8001d02:	498a      	ldr	r1, [pc, #552]	@ (8001f2c <main+0x35c>)
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    thr_int[2] = 0.0;
 8001d10:	4986      	ldr	r1, [pc, #536]	@ (8001f2c <main+0x35c>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    attitute_p_gain[2] = roll_pitch_gain;
 8001d1e:	4b80      	ldr	r3, [pc, #512]	@ (8001f20 <main+0x350>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	497c      	ldr	r1, [pc, #496]	@ (8001f18 <main+0x348>)
 8001d26:	e9c1 2304 	strd	r2, r3, [r1, #16]

    double v_target[3] = {0.0, 0.0, 0.0};
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8

    double rate_setpoint[3];
    double quad_rate[3] = {0.0, 0.0, 0.0};
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    double omega_dot[3] = {0.0, 0.0, 0.0};
 8001d72:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001d76:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9c1 2300 	strd	r2, r3, [r1]
 8001d86:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001d8a:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001d9a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001d9e:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double rateCtrl[3];

    double mixerFM[4][4] = {
 8001dae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001db2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001db6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f30 <main+0x360>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	4611      	mov	r1, r2
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f01f fc9a 	bl	80216f8 <memcpy>
        {  23000, -64000,  64000,  1530000},
        {  23000, -64000, -64000, -1530000},
        {  23000,  64000, -64000,  1530000}
    };

	DWT_Start();
 8001dc4:	f7ff fc2a 	bl	800161c <DWT_Start>
	{

		static TMsg msg_dat;
		static TMsg msg_cmd;
		static int discarded_count = 0;
		uint32_t dt_us = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
		MFX_input_t data_in;
		MFX_input_t *pdata_in = &data_in;
 8001dce:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8001dd2:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360

		if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8001dd6:	4857      	ldr	r0, [pc, #348]	@ (8001f34 <main+0x364>)
 8001dd8:	f014 fbb0 	bl	801653c <UART_ReceivedMSG>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d106      	bne.n	8001df0 <main+0x220>
		{
			if (msg_cmd.Data[0] == DEV_ADDR)
 8001de2:	4b54      	ldr	r3, [pc, #336]	@ (8001f34 <main+0x364>)
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	2b32      	cmp	r3, #50	@ 0x32
 8001de8:	d102      	bne.n	8001df0 <main+0x220>
			{
				(void)HandleMSG((TMsg *)&msg_cmd);
 8001dea:	4852      	ldr	r0, [pc, #328]	@ (8001f34 <main+0x364>)
 8001dec:	f014 feb0 	bl	8016b50 <HandleMSG>
			}
		}

		if (MagCalRequest == 1U)
 8001df0:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <main+0x368>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d120      	bne.n	8001e3c <main+0x26c>
		{
			/* Debouncing */
			HAL_Delay(50);
 8001dfa:	2032      	movs	r0, #50	@ 0x32
 8001dfc:	f00c febe 	bl	800eb7c <HAL_Delay>

			/* Wait until the button is released */
			while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 8001e00:	bf00      	nop
 8001e02:	2000      	movs	r0, #0
 8001e04:	f00c fcfc 	bl	800e800 <BSP_PB_GetState>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f3c <main+0x36c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d0f7      	beq.n	8001e02 <main+0x232>

			/* Debouncing */
			HAL_Delay(50);
 8001e12:	2032      	movs	r0, #50	@ 0x32
 8001e14:	f00c feb2 	bl	800eb7c <HAL_Delay>

			MagCalRequest = 0;
 8001e18:	4a47      	ldr	r2, [pc, #284]	@ (8001f38 <main+0x368>)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	7013      	strb	r3, [r2, #0]

			/* Reset magnetometer calibration value*/
			MagCalStatus = 0;
 8001e1e:	4a48      	ldr	r2, [pc, #288]	@ (8001f40 <main+0x370>)
 8001e20:	2300      	movs	r3, #0
 8001e22:	7013      	strb	r3, [r2, #0]
			MagOffset.x = 0;
 8001e24:	4a47      	ldr	r2, [pc, #284]	@ (8001f44 <main+0x374>)
 8001e26:	2300      	movs	r3, #0
 8001e28:	6013      	str	r3, [r2, #0]
			MagOffset.y = 0;
 8001e2a:	4a46      	ldr	r2, [pc, #280]	@ (8001f44 <main+0x374>)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6053      	str	r3, [r2, #4]
			MagOffset.z = 0;
 8001e30:	4a44      	ldr	r2, [pc, #272]	@ (8001f44 <main+0x374>)
 8001e32:	2300      	movs	r3, #0
 8001e34:	6093      	str	r3, [r2, #8]

			/* Enable magnetometer calibration */
			MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001e36:	200a      	movs	r0, #10
 8001e38:	f015 fc87 	bl	801774a <MotionFX_manager_MagCal_start>
		}
		SensorReadRequest = 1U;
 8001e3c:	4a42      	ldr	r2, [pc, #264]	@ (8001f48 <main+0x378>)
 8001e3e:	2301      	movs	r3, #1
 8001e40:	7013      	strb	r3, [r2, #0]
		if (SensorReadRequest == 1U)
 8001e42:	4b41      	ldr	r3, [pc, #260]	@ (8001f48 <main+0x378>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 8130 	bne.w	80020ae <main+0x4de>
		{
			SensorReadRequest = 0;
 8001e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f48 <main+0x378>)
 8001e50:	2300      	movs	r3, #0
 8001e52:	7013      	strb	r3, [r2, #0]

			/* Acquire data from enabled sensors and fill Msg stream */
			RTC_Handler(&msg_dat);
 8001e54:	483d      	ldr	r0, [pc, #244]	@ (8001f4c <main+0x37c>)
 8001e56:	f7ff f923 	bl	80010a0 <RTC_Handler>
			Accelero_Sensor_Handler(&msg_dat);
 8001e5a:	483c      	ldr	r0, [pc, #240]	@ (8001f4c <main+0x37c>)
 8001e5c:	f7ff f9a4 	bl	80011a8 <Accelero_Sensor_Handler>
			Gyro_Sensor_Handler(&msg_dat);
 8001e60:	483a      	ldr	r0, [pc, #232]	@ (8001f4c <main+0x37c>)
 8001e62:	f7ff f9f3 	bl	800124c <Gyro_Sensor_Handler>
			Magneto_Sensor_Handler(&msg_dat);
 8001e66:	4839      	ldr	r0, [pc, #228]	@ (8001f4c <main+0x37c>)
 8001e68:	f7ff fa42 	bl	80012f0 <Magneto_Sensor_Handler>
			Humidity_Sensor_Handler(&msg_dat);
 8001e6c:	4837      	ldr	r0, [pc, #220]	@ (8001f4c <main+0x37c>)
 8001e6e:	f7ff fb59 	bl	8001524 <Humidity_Sensor_Handler>
			Temperature_Sensor_Handler(&msg_dat);
 8001e72:	4836      	ldr	r0, [pc, #216]	@ (8001f4c <main+0x37c>)
 8001e74:	f7ff fb26 	bl	80014c4 <Temperature_Sensor_Handler>

			/* Convert angular velocity from [mdps] to [dps] */
			data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001e78:	4b35      	ldr	r3, [pc, #212]	@ (8001f50 <main+0x380>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001f58 <main+0x388>
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001e90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e94:	edc3 7a06 	vstr	s15, [r3, #24]
			data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <main+0x380>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001f58 <main+0x388>
 8001ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eac:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001eb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eb4:	edc3 7a07 	vstr	s15, [r3, #28]
			data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <main+0x380>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001f58 <main+0x388>
 8001ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ecc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ed0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ed4:	edc3 7a08 	vstr	s15, [r3, #32]

			/* Convert acceleration from [mg] to [g] */
			data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <main+0x384>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001f58 <main+0x388>
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ef0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ef4:	edc3 7a03 	vstr	s15, [r3, #12]
			data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <main+0x384>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	e02c      	b.n	8001f5c <main+0x38c>
 8001f02:	bf00      	nop
 8001f04:	20000e18 	.word	0x20000e18
 8001f08:	20000e60 	.word	0x20000e60
 8001f0c:	3ee66666 	.word	0x3ee66666
 8001f10:	3f0ccccd 	.word	0x3f0ccccd
 8001f14:	3f19999a 	.word	0x3f19999a
 8001f18:	20000048 	.word	0x20000048
 8001f1c:	3fe00000 	.word	0x3fe00000
 8001f20:	20000fe8 	.word	0x20000fe8
 8001f24:	20001008 	.word	0x20001008
 8001f28:	3ff00000 	.word	0x3ff00000
 8001f2c:	20000f98 	.word	0x20000f98
 8001f30:	08026760 	.word	0x08026760
 8001f34:	200011c0 	.word	0x200011c0
 8001f38:	20000ddc 	.word	0x20000ddc
 8001f3c:	20000da8 	.word	0x20000da8
 8001f40:	20000dec 	.word	0x20000dec
 8001f44:	20000de0 	.word	0x20000de0
 8001f48:	20000bf4 	.word	0x20000bf4
 8001f4c:	200012c4 	.word	0x200012c4
 8001f50:	20000db8 	.word	0x20000db8
 8001f54:	20000dac 	.word	0x20000dac
 8001f58:	3a83126f 	.word	0x3a83126f
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001f58 <main+0x388>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f70:	edc3 7a04 	vstr	s15, [r3, #16]
			data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001f74:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <main+0x4a4>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f80:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002078 <main+0x4a8>
 8001f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f88:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f90:	edc3 7a05 	vstr	s15, [r3, #20]

			/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
			data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001f94:	4b39      	ldr	r3, [pc, #228]	@ (800207c <main+0x4ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002080 <main+0x4b0>
 8001fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
			data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001fb4:	4b31      	ldr	r3, [pc, #196]	@ (800207c <main+0x4ac>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002080 <main+0x4b0>
 8001fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd0:	edc3 7a01 	vstr	s15, [r3, #4]
			data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	@ (800207c <main+0x4ac>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002080 <main+0x4b0>
 8001fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ff0:	edc3 7a02 	vstr	s15, [r3, #8]

			/* Run Sensor Fusion algorithm */
			BSP_LED_On(LED2);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f00c fb41 	bl	800e67c <BSP_LED_On>
			MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <main+0x4b4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002088 <main+0x4b8>
 8002002:	4619      	mov	r1, r3
 8002004:	f8d7 0360 	ldr.w	r0, [r7, #864]	@ 0x360
 8002008:	f015 fb3c 	bl	8017684 <MotionFX_manager_run>
			BSP_LED_Off(LED2);
 800200c:	2000      	movs	r0, #0
 800200e:	f00c fb4b 	bl	800e6a8 <BSP_LED_Off>
//			(void) memcpy(&msg_dat->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
//
//			Serialize_s32(&msg_dat->Data[115], (int32_t)dt_us, 4);

			/* Send data stream */
			INIT_STREAMING_HEADER(&msg_dat);
 8002012:	481e      	ldr	r0, [pc, #120]	@ (800208c <main+0x4bc>)
 8002014:	f014 fd82 	bl	8016b1c <INIT_STREAMING_HEADER>
			msg_dat.Len = STREAMING_MSG_LENGTH;
 8002018:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <main+0x4bc>)
 800201a:	2377      	movs	r3, #119	@ 0x77
 800201c:	6013      	str	r3, [r2, #0]

			if (UseOfflineData == 1U)
 800201e:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <main+0x4c0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d11e      	bne.n	8002064 <main+0x494>
			{
				OfflineDataCount--;
 8002026:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <main+0x4c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <main+0x4c4>)
 800202e:	601a      	str	r2, [r3, #0]
				if (OfflineDataCount < 0)
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <main+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da02      	bge.n	800203e <main+0x46e>
				{
					OfflineDataCount = 0;
 8002038:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <main+0x4c4>)
 800203a:	2300      	movs	r3, #0
 800203c:	6013      	str	r3, [r2, #0]
				}

				OfflineDataReadIndex++;
 800203e:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <main+0x4c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <main+0x4c8>)
 8002046:	601a      	str	r2, [r3, #0]
				if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <main+0x4c8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b07      	cmp	r3, #7
 800204e:	dd02      	ble.n	8002056 <main+0x486>
				{
					OfflineDataReadIndex = 0;
 8002050:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <main+0x4c8>)
 8002052:	2300      	movs	r3, #0
 8002054:	6013      	str	r3, [r2, #0]
				}

				if (OfflineDataCount > 0)
 8002056:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <main+0x4c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dd02      	ble.n	8002064 <main+0x494>
				{
					SensorReadRequest = 1;
 800205e:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <main+0x4cc>)
 8002060:	2301      	movs	r3, #1
 8002062:	7013      	strb	r3, [r2, #0]
				}
			}

			if (discarded_count >= SAMPLETODISCARD)
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <main+0x4d0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b0e      	cmp	r3, #14
 800206a:	dd1b      	ble.n	80020a4 <main+0x4d4>
			{
				UART_SendMsg(&msg_dat);
 800206c:	4807      	ldr	r0, [pc, #28]	@ (800208c <main+0x4bc>)
 800206e:	f014 fb1b 	bl	80166a8 <UART_SendMsg>
 8002072:	e01c      	b.n	80020ae <main+0x4de>
 8002074:	20000dac 	.word	0x20000dac
 8002078:	3a83126f 	.word	0x3a83126f
 800207c:	20000dc4 	.word	0x20000dc4
 8002080:	3b03126f 	.word	0x3b03126f
 8002084:	20000008 	.word	0x20000008
 8002088:	3c23d70a 	.word	0x3c23d70a
 800208c:	200012c4 	.word	0x200012c4
 8002090:	20000bf5 	.word	0x20000bf5
 8002094:	20000da0 	.word	0x20000da0
 8002098:	20000d98 	.word	0x20000d98
 800209c:	20000bf4 	.word	0x20000bf4
 80020a0:	200013c8 	.word	0x200013c8
			}
			else
			{
				discarded_count++;
 80020a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002348 <main+0x778>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	4ba7      	ldr	r3, [pc, #668]	@ (8002348 <main+0x778>)
 80020ac:	601a      	str	r2, [r3, #0]
			}
		}

		acc_a_x = pdata_out->linear_acceleration[0];
 80020ae:	4ba7      	ldr	r3, [pc, #668]	@ (800234c <main+0x77c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa47 	bl	8000548 <__aeabi_f2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	49a4      	ldr	r1, [pc, #656]	@ (8002350 <main+0x780>)
 80020c0:	e9c1 2300 	strd	r2, r3, [r1]
		acc_a_y = pdata_out->linear_acceleration[1];
 80020c4:	4ba1      	ldr	r3, [pc, #644]	@ (800234c <main+0x77c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa3c 	bl	8000548 <__aeabi_f2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	499f      	ldr	r1, [pc, #636]	@ (8002354 <main+0x784>)
 80020d6:	e9c1 2300 	strd	r2, r3, [r1]
		acc_a_z = pdata_out->linear_acceleration[2];
 80020da:	4b9c      	ldr	r3, [pc, #624]	@ (800234c <main+0x77c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa31 	bl	8000548 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	499b      	ldr	r1, [pc, #620]	@ (8002358 <main+0x788>)
 80020ec:	e9c1 2300 	strd	r2, r3, [r1]


		dt_us = DWT_Stop();
 80020f0:	f7ff faa6 	bl	8001640 <DWT_Stop>
 80020f4:	f8c7 0364 	str.w	r0, [r7, #868]	@ 0x364


		DWT_Start();
 80020f8:	f7ff fa90 	bl	800161c <DWT_Start>

		acc_v_x = acc_v_x + dt_us * (
 80020fc:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8002100:	f7fe fa00 	bl	8000504 <__aeabi_ui2d>
 8002104:	4b92      	ldr	r3, [pc, #584]	@ (8002350 <main+0x780>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe fa75 	bl	80005f8 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	4b91      	ldr	r3, [pc, #580]	@ (800235c <main+0x78c>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe f8b6 	bl	800028c <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	4b8c      	ldr	r3, [pc, #560]	@ (800235c <main+0x78c>)
 800212a:	e9c3 0100 	strd	r0, r1, [r3]
			acc_a_x
		);
		acc_v_y = acc_v_y + dt_us * (
 800212e:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8002132:	f7fe f9e7 	bl	8000504 <__aeabi_ui2d>
 8002136:	4b87      	ldr	r3, [pc, #540]	@ (8002354 <main+0x784>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fa5c 	bl	80005f8 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	4b85      	ldr	r3, [pc, #532]	@ (8002360 <main+0x790>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe f89d 	bl	800028c <__adddf3>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	4b81      	ldr	r3, [pc, #516]	@ (8002360 <main+0x790>)
 800215c:	e9c3 0100 	strd	r0, r1, [r3]
			acc_a_y
		);
		acc_v_z = acc_v_z + dt_us * (
 8002160:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8002164:	f7fe f9ce 	bl	8000504 <__aeabi_ui2d>
 8002168:	4b7b      	ldr	r3, [pc, #492]	@ (8002358 <main+0x788>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa43 	bl	80005f8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	4b7a      	ldr	r3, [pc, #488]	@ (8002364 <main+0x794>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f7fe f884 	bl	800028c <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	4b75      	ldr	r3, [pc, #468]	@ (8002364 <main+0x794>)
 800218e:	e9c3 0100 	strd	r0, r1, [r3]
//		quad_quat_state[1] = pdata_out->quaternion[2];
//		quad_quat_state[2] = pdata_out->quaternion[1];
//		quad_quat_state[3] = pdata_out->quaternion[0];

		Quaternion quad_quat_staten;
		quad_quat_staten.w = pdata_out->quaternion[3];
 8002192:	4b6e      	ldr	r3, [pc, #440]	@ (800234c <main+0x77c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9d5 	bl	8000548 <__aeabi_f2d>
 800219e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021a2:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80021a6:	e9c3 0100 	strd	r0, r1, [r3]
		quad_quat_staten.x = pdata_out->quaternion[2];
 80021aa:	4b68      	ldr	r3, [pc, #416]	@ (800234c <main+0x77c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021ba:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80021be:	e9c3 0102 	strd	r0, r1, [r3, #8]
		quad_quat_staten.y = pdata_out->quaternion[1];
 80021c2:	4b62      	ldr	r3, [pc, #392]	@ (800234c <main+0x77c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f9bd 	bl	8000548 <__aeabi_f2d>
 80021ce:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021d2:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80021d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
		quad_quat_staten.z = pdata_out->quaternion[0];
 80021da:	4b5c      	ldr	r3, [pc, #368]	@ (800234c <main+0x77c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9b1 	bl	8000548 <__aeabi_f2d>
 80021e6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021ea:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80021ee:	e9c3 0106 	strd	r0, r1, [r3, #24]
//		quad_quat_state[1] = 0;
//		quad_quat_state[2] = 0;
//		quad_quat_state[3] = 0;

		// Controller
		quad_rate[0] = gyro_v_x;
 80021f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002368 <main+0x798>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
		quad_rate[1] = gyro_v_y;
 80021fc:	4b5b      	ldr	r3, [pc, #364]	@ (800236c <main+0x79c>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
		quad_rate[2] = gyro_v_z;
 8002206:	4b5a      	ldr	r3, [pc, #360]	@ (8002370 <main+0x7a0>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8

		omega_dot[0] = gyro_a_x;
 8002210:	4b58      	ldr	r3, [pc, #352]	@ (8002374 <main+0x7a4>)
 8002212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002216:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800221a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800221e:	e9c3 0100 	strd	r0, r1, [r3]
		omega_dot[1] = gyro_a_y;
 8002222:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <main+0x7a8>)
 8002224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002228:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800222c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002230:	e9c3 0102 	strd	r0, r1, [r3, #8]
		omega_dot[2] = gyro_a_z;
 8002234:	4b51      	ldr	r3, [pc, #324]	@ (800237c <main+0x7ac>)
 8002236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800223a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800223e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002242:	e9c3 0104 	strd	r0, r1, [r3, #16]

		// Controller v_z
		v_error[Z] = v_target[Z] - acc_v_z;
 8002246:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
 800224a:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <main+0x794>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f81a 	bl	8000288 <__aeabi_dsub>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	4b48      	ldr	r3, [pc, #288]	@ (8002380 <main+0x7b0>)
 800225e:	e9c3 0104 	strd	r0, r1, [r3, #16]
		// double thrust_z;

		thrust_sp[2] = vel_p_gain[2] * v_error[2] - vel_d_gain[2] * acc_a_z + quadcopter_mass * (acc_setpoint[2] - gravitation_constant) + thr_int[2];
 8002262:	4b48      	ldr	r3, [pc, #288]	@ (8002384 <main+0x7b4>)
 8002264:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002268:	4b45      	ldr	r3, [pc, #276]	@ (8002380 <main+0x7b0>)
 800226a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800226e:	f7fe f9c3 	bl	80005f8 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4614      	mov	r4, r2
 8002278:	461d      	mov	r5, r3
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <main+0x7b8>)
 800227c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <main+0x788>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe f9b7 	bl	80005f8 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4620      	mov	r0, r4
 8002290:	4629      	mov	r1, r5
 8002292:	f7fd fff9 	bl	8000288 <__aeabi_dsub>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4614      	mov	r4, r2
 800229c:	461d      	mov	r5, r3
 800229e:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <main+0x7bc>)
 80022a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <main+0x7c0>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f7fd ffed 	bl	8000288 <__aeabi_dsub>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	4b37      	ldr	r3, [pc, #220]	@ (8002394 <main+0x7c4>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f99c 	bl	80005f8 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fd ffe0 	bl	800028c <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	4b30      	ldr	r3, [pc, #192]	@ (8002398 <main+0x7c8>)
 80022d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022da:	f7fd ffd7 	bl	800028c <__adddf3>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <main+0x7cc>)
 80022e8:	e9c3 0104 	strd	r0, r1, [r3, #16]

		double uMax = -0.4;
 80022ec:	a312      	add	r3, pc, #72	@ (adr r3, 8002338 <main+0x768>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
		double uMin = -16 * 9.18;
 80022f6:	a312      	add	r3, pc, #72	@ (adr r3, 8002340 <main+0x770>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350

		// thrust_sp[2] = thrust_z;
		if (thrust_sp[2] < uMin) {
 8002300:	4b26      	ldr	r3, [pc, #152]	@ (800239c <main+0x7cc>)
 8002302:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002306:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
 800230a:	f7fe fc05 	bl	8000b18 <__aeabi_dcmpgt>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <main+0x74e>
			thrust_sp[2] = uMin;
 8002314:	4921      	ldr	r1, [pc, #132]	@ (800239c <main+0x7cc>)
 8002316:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800231a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		if (thrust_sp[2] > uMax) {
 800231e:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <main+0x7cc>)
 8002320:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002324:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 8002328:	f7fe fbd8 	bl	8000adc <__aeabi_dcmplt>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d03a      	beq.n	80023a8 <main+0x7d8>
			thrust_sp[2] = uMax;
 8002332:	491a      	ldr	r1, [pc, #104]	@ (800239c <main+0x7cc>)
 8002334:	e034      	b.n	80023a0 <main+0x7d0>
 8002336:	bf00      	nop
 8002338:	9999999a 	.word	0x9999999a
 800233c:	bfd99999 	.word	0xbfd99999
 8002340:	f5c28f5c 	.word	0xf5c28f5c
 8002344:	c0625c28 	.word	0xc0625c28
 8002348:	200013c8 	.word	0x200013c8
 800234c:	20000008 	.word	0x20000008
 8002350:	20000f30 	.word	0x20000f30
 8002354:	20000f38 	.word	0x20000f38
 8002358:	20000f40 	.word	0x20000f40
 800235c:	20000f48 	.word	0x20000f48
 8002360:	20000f50 	.word	0x20000f50
 8002364:	20000f58 	.word	0x20000f58
 8002368:	20000f78 	.word	0x20000f78
 800236c:	20000f80 	.word	0x20000f80
 8002370:	20000f88 	.word	0x20000f88
 8002374:	20000f60 	.word	0x20000f60
 8002378:	20000f68 	.word	0x20000f68
 800237c:	20000f70 	.word	0x20000f70
 8002380:	20001010 	.word	0x20001010
 8002384:	20000018 	.word	0x20000018
 8002388:	20000030 	.word	0x20000030
 800238c:	20000fb8 	.word	0x20000fb8
 8002390:	20000098 	.word	0x20000098
 8002394:	200000a0 	.word	0x200000a0
 8002398:	20000f98 	.word	0x20000f98
 800239c:	20000ff0 	.word	0x20000ff0
 80023a0:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 80023a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		// Controller v_x, v_y

		// XY Velocity Control (Thrust in NE-direction)
		v_error[X] = v_target[X] - acc_v_x;
 80023a8:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80023ac:	4bbe      	ldr	r3, [pc, #760]	@ (80026a8 <main+0xad8>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fd ff69 	bl	8000288 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	4bbb      	ldr	r3, [pc, #748]	@ (80026ac <main+0xadc>)
 80023c0:	e9c3 0100 	strd	r0, r1, [r3]
		v_error[Y] = v_target[Y] - acc_v_y;
 80023c4:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80023c8:	4bb9      	ldr	r3, [pc, #740]	@ (80026b0 <main+0xae0>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fd ff5b 	bl	8000288 <__aeabi_dsub>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4bb4      	ldr	r3, [pc, #720]	@ (80026ac <main+0xadc>)
 80023dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
		thrust_sp[X] = (
			vel_p_gain[X] * v_error[X] -
 80023e0:	4bb4      	ldr	r3, [pc, #720]	@ (80026b4 <main+0xae4>)
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e6:	4bb1      	ldr	r3, [pc, #708]	@ (80026ac <main+0xadc>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f904 	bl	80005f8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
			vel_d_gain[X] *  acc_a_x +
 80023f8:	4baf      	ldr	r3, [pc, #700]	@ (80026b8 <main+0xae8>)
 80023fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fe:	4baf      	ldr	r3, [pc, #700]	@ (80026bc <main+0xaec>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f8f8 	bl	80005f8 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
			vel_p_gain[X] * v_error[X] -
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff3a 	bl	8000288 <__aeabi_dsub>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4614      	mov	r4, r2
 800241a:	461d      	mov	r5, r3
			quadcopter_mass * acc_setpoint[X] +
 800241c:	4ba8      	ldr	r3, [pc, #672]	@ (80026c0 <main+0xaf0>)
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	4ba8      	ldr	r3, [pc, #672]	@ (80026c4 <main+0xaf4>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f8e6 	bl	80005f8 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
			vel_d_gain[X] *  acc_a_x +
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fd ff2a 	bl	800028c <__adddf3>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
			thr_int[X]
 8002440:	4ba1      	ldr	r3, [pc, #644]	@ (80026c8 <main+0xaf8>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
			quadcopter_mass * acc_setpoint[X] +
 8002446:	f7fd ff21 	bl	800028c <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
		thrust_sp[X] = (
 8002452:	4b9e      	ldr	r3, [pc, #632]	@ (80026cc <main+0xafc>)
 8002454:	e9c3 0100 	strd	r0, r1, [r3]
		);
		thrust_sp[Y] = (
			vel_p_gain[Y] * v_error[Y] -
 8002458:	4b96      	ldr	r3, [pc, #600]	@ (80026b4 <main+0xae4>)
 800245a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800245e:	4b93      	ldr	r3, [pc, #588]	@ (80026ac <main+0xadc>)
 8002460:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002464:	f7fe f8c8 	bl	80005f8 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
			vel_d_gain[Y] *  acc_a_y +
 8002470:	4b91      	ldr	r3, [pc, #580]	@ (80026b8 <main+0xae8>)
 8002472:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002476:	4b96      	ldr	r3, [pc, #600]	@ (80026d0 <main+0xb00>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f8bc 	bl	80005f8 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
			vel_p_gain[Y] * v_error[Y] -
 8002484:	4620      	mov	r0, r4
 8002486:	4629      	mov	r1, r5
 8002488:	f7fd fefe 	bl	8000288 <__aeabi_dsub>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
			quadcopter_mass * acc_setpoint[Y] +
 8002494:	4b8a      	ldr	r3, [pc, #552]	@ (80026c0 <main+0xaf0>)
 8002496:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800249a:	4b8a      	ldr	r3, [pc, #552]	@ (80026c4 <main+0xaf4>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f8aa 	bl	80005f8 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
			vel_d_gain[Y] *  acc_a_y +
 80024a8:	4620      	mov	r0, r4
 80024aa:	4629      	mov	r1, r5
 80024ac:	f7fd feee 	bl	800028c <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
			thr_int[Y]
 80024b8:	4b83      	ldr	r3, [pc, #524]	@ (80026c8 <main+0xaf8>)
 80024ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
			quadcopter_mass * acc_setpoint[Y] +
 80024be:	f7fd fee5 	bl	800028c <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
		thrust_sp[Y] = (
 80024ca:	4b80      	ldr	r3, [pc, #512]	@ (80026cc <main+0xafc>)
 80024cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
		);

		double thrust_max_xy_tilt = (
			abs(thrust_sp[2]) * tan(tiltMax)
 80024d0:	4b7e      	ldr	r3, [pc, #504]	@ (80026cc <main+0xafc>)
 80024d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f7fe fb3d 	bl	8000b58 <__aeabi_d2iz>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bfb8      	it	lt
 80024e4:	425b      	neglt	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f81c 	bl	8000524 <__aeabi_i2d>
 80024ec:	4604      	mov	r4, r0
 80024ee:	460d      	mov	r5, r1
 80024f0:	4b78      	ldr	r3, [pc, #480]	@ (80026d4 <main+0xb04>)
 80024f2:	ed93 7b00 	vldr	d7, [r3]
 80024f6:	eeb0 0a47 	vmov.f32	s0, s14
 80024fa:	eef0 0a67 	vmov.f32	s1, s15
 80024fe:	f01f feff 	bl	8022300 <tan>
 8002502:	ec53 2b10 	vmov	r2, r3, d0
		double thrust_max_xy_tilt = (
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
		);
		double thrust_max_xy = sqrt(
			pow(maxThr, 2) -
 8002516:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <main+0xb08>)
 8002518:	ed93 7b00 	vldr	d7, [r3]
 800251c:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 80026a0 <main+0xad0>
 8002520:	eeb0 0a47 	vmov.f32	s0, s14
 8002524:	eef0 0a67 	vmov.f32	s1, s15
 8002528:	f01f fd9c 	bl	8022064 <pow>
 800252c:	ec55 4b10 	vmov	r4, r5, d0
			pow(thrust_sp[Z], 2)
 8002530:	4b66      	ldr	r3, [pc, #408]	@ (80026cc <main+0xafc>)
 8002532:	ed93 7b04 	vldr	d7, [r3, #16]
 8002536:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 80026a0 <main+0xad0>
 800253a:	eeb0 0a47 	vmov.f32	s0, s14
 800253e:	eef0 0a67 	vmov.f32	s1, s15
 8002542:	f01f fd8f 	bl	8022064 <pow>
 8002546:	ec53 2b10 	vmov	r2, r3, d0
		double thrust_max_xy = sqrt(
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd fe9b 	bl	8000288 <__aeabi_dsub>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	ec43 2b17 	vmov	d7, r2, r3
 800255a:	eeb0 0a47 	vmov.f32	s0, s14
 800255e:	eef0 0a67 	vmov.f32	s1, s15
 8002562:	f01f fdef 	bl	8022144 <sqrt>
 8002566:	ed87 0be4 	vstr	d0, [r7, #912]	@ 0x390
		);

		if (thrust_max_xy > thrust_max_xy_tilt) {
 800256a:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 800256e:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	@ 0x390
 8002572:	f7fe fad1 	bl	8000b18 <__aeabi_dcmpgt>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <main+0x9b4>
			thrust_max_xy = thrust_max_xy_tilt;
 800257c:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8002580:	e9c7 23e4 	strd	r2, r3, [r7, #912]	@ 0x390
		}

		if (
			thrust_sp[X] * thrust_sp[X] + thrust_sp[Y] * thrust_sp[Y] >
 8002584:	4b51      	ldr	r3, [pc, #324]	@ (80026cc <main+0xafc>)
 8002586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800258a:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <main+0xafc>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fe f832 	bl	80005f8 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
 800259c:	4b4b      	ldr	r3, [pc, #300]	@ (80026cc <main+0xafc>)
 800259e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025a2:	4b4a      	ldr	r3, [pc, #296]	@ (80026cc <main+0xafc>)
 80025a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025a8:	f7fe f826 	bl	80005f8 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd fe6a 	bl	800028c <__adddf3>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
			pow(thrust_max_xy, 2)) {
 80025c0:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 80026a0 <main+0xad0>
 80025c4:	ed97 0be4 	vldr	d0, [r7, #912]	@ 0x390
 80025c8:	f01f fd4c 	bl	8022064 <pow>
 80025cc:	ec53 2b10 	vmov	r2, r3, d0
		if (
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fe faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d055      	beq.n	800268a <main+0xaba>

			double mag = sqrt(
				pow(thrust_sp[X], 2) +
 80025de:	4b3b      	ldr	r3, [pc, #236]	@ (80026cc <main+0xafc>)
 80025e0:	ed93 7b00 	vldr	d7, [r3]
 80025e4:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 80026a0 <main+0xad0>
 80025e8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ec:	eef0 0a67 	vmov.f32	s1, s15
 80025f0:	f01f fd38 	bl	8022064 <pow>
 80025f4:	ec55 4b10 	vmov	r4, r5, d0
				pow(thrust_sp[Y], 2)
 80025f8:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <main+0xafc>)
 80025fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80025fe:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 80026a0 <main+0xad0>
 8002602:	eeb0 0a47 	vmov.f32	s0, s14
 8002606:	eef0 0a67 	vmov.f32	s1, s15
 800260a:	f01f fd2b 	bl	8022064 <pow>
 800260e:	ec53 2b10 	vmov	r2, r3, d0
			double mag = sqrt(
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fd fe39 	bl	800028c <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ec43 2b17 	vmov	d7, r2, r3
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	f01f fd8b 	bl	8022144 <sqrt>
 800262e:	ed87 0bd0 	vstr	d0, [r7, #832]	@ 0x340
			);

			thrust_sp[X] = (
				thrust_sp[X] * thrust_max_xy / mag
 8002632:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <main+0xafc>)
 8002634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002638:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 800263c:	f7fd ffdc 	bl	80005f8 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 800264c:	f7fe f8fe 	bl	800084c <__aeabi_ddiv>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
			thrust_sp[X] = (
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <main+0xafc>)
 800265a:	e9c3 0100 	strd	r0, r1, [r3]
			);
			thrust_sp[Y] = (
				thrust_sp[Y] * thrust_max_xy / mag
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <main+0xafc>)
 8002660:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002664:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 8002668:	f7fd ffc6 	bl	80005f8 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8002678:	f7fe f8e8 	bl	800084c <__aeabi_ddiv>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
			thrust_sp[Y] = (
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <main+0xafc>)
 8002686:	e9c3 0102 	strd	r0, r1, [r3, #8]
		}

		// Use tracking Anti-Windup for NE-direction: during saturation, the integrator is used to unsaturate the output
		// see Anti-Reset Windup for PID controllers, L.Rundqwist, 1990

		v_error_lim[X] = v_error[X] - (
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <main+0xadc>)
 800268c:	e9d3 4500 	ldrd	r4, r5, [r3]
			thrust_sp[X] - thrust_sp[X]
 8002690:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <main+0xafc>)
 8002692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <main+0xafc>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	e01e      	b.n	80026dc <main+0xb0c>
 800269e:	bf00      	nop
 80026a0:	00000000 	.word	0x00000000
 80026a4:	40000000 	.word	0x40000000
 80026a8:	20000f48 	.word	0x20000f48
 80026ac:	20001010 	.word	0x20001010
 80026b0:	20000f50 	.word	0x20000f50
 80026b4:	20000018 	.word	0x20000018
 80026b8:	20000030 	.word	0x20000030
 80026bc:	20000f30 	.word	0x20000f30
 80026c0:	20000fb8 	.word	0x20000fb8
 80026c4:	200000a0 	.word	0x200000a0
 80026c8:	20000f98 	.word	0x20000f98
 80026cc:	20000ff0 	.word	0x20000ff0
 80026d0:	20000f38 	.word	0x20000f38
 80026d4:	20000090 	.word	0x20000090
 80026d8:	200000b0 	.word	0x200000b0
 80026dc:	f7fd fdd4 	bl	8000288 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
			) * 2.0 / vel_p_gain[X];
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	f7fd fdce 	bl	800028c <__adddf3>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	4bb6      	ldr	r3, [pc, #728]	@ (80029d4 <main+0xe04>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fe f8a5 	bl	800084c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
		v_error_lim[X] = v_error[X] - (
 8002706:	4620      	mov	r0, r4
 8002708:	4629      	mov	r1, r5
 800270a:	f7fd fdbd 	bl	8000288 <__aeabi_dsub>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	4bb0      	ldr	r3, [pc, #704]	@ (80029d8 <main+0xe08>)
 8002718:	e9c3 0100 	strd	r0, r1, [r3]
		v_error_lim[Y] = v_error[X] - (
 800271c:	4baf      	ldr	r3, [pc, #700]	@ (80029dc <main+0xe0c>)
 800271e:	e9d3 4500 	ldrd	r4, r5, [r3]
			thrust_sp[Y] - thrust_sp[Y]
 8002722:	4baf      	ldr	r3, [pc, #700]	@ (80029e0 <main+0xe10>)
 8002724:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002728:	4bad      	ldr	r3, [pc, #692]	@ (80029e0 <main+0xe10>)
 800272a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800272e:	f7fd fdab 	bl	8000288 <__aeabi_dsub>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
			) * 2.0 / vel_p_gain[Y];
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	f7fd fda5 	bl	800028c <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	4ba2      	ldr	r3, [pc, #648]	@ (80029d4 <main+0xe04>)
 800274c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002750:	f7fe f87c 	bl	800084c <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
		v_error_lim[Y] = v_error[X] - (
 8002758:	4620      	mov	r0, r4
 800275a:	4629      	mov	r1, r5
 800275c:	f7fd fd94 	bl	8000288 <__aeabi_dsub>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	4b9b      	ldr	r3, [pc, #620]	@ (80029d8 <main+0xe08>)
 800276a:	e9c3 0102 	strd	r0, r1, [r3, #8]

		double tmpnorm = sqrt(
			thrust_sp[0] * thrust_sp[0] +
 800276e:	4b9c      	ldr	r3, [pc, #624]	@ (80029e0 <main+0xe10>)
 8002770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002774:	4b9a      	ldr	r3, [pc, #616]	@ (80029e0 <main+0xe10>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fd ff3d 	bl	80005f8 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4614      	mov	r4, r2
 8002784:	461d      	mov	r5, r3
			thrust_sp[1] * thrust_sp[1] +
 8002786:	4b96      	ldr	r3, [pc, #600]	@ (80029e0 <main+0xe10>)
 8002788:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800278c:	4b94      	ldr	r3, [pc, #592]	@ (80029e0 <main+0xe10>)
 800278e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002792:	f7fd ff31 	bl	80005f8 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
			thrust_sp[0] * thrust_sp[0] +
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7fd fd75 	bl	800028c <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
			thrust_sp[2] * thrust_sp[2]
 80027aa:	4b8d      	ldr	r3, [pc, #564]	@ (80029e0 <main+0xe10>)
 80027ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80027b0:	4b8b      	ldr	r3, [pc, #556]	@ (80029e0 <main+0xe10>)
 80027b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027b6:	f7fd ff1f 	bl	80005f8 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
		double tmpnorm = sqrt(
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fd63 	bl	800028c <__adddf3>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	ec43 2b17 	vmov	d7, r2, r3
 80027ce:	eeb0 0a47 	vmov.f32	s0, s14
 80027d2:	eef0 0a67 	vmov.f32	s1, s15
 80027d6:	f01f fcb5 	bl	8022144 <sqrt>
 80027da:	ed87 0bce 	vstr	d0, [r7, #824]	@ 0x338
		);

		body_z[0] = -thrust_sp[0] / tmpnorm;
 80027de:	4b80      	ldr	r3, [pc, #512]	@ (80029e0 <main+0xe10>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80027e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80027ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027f0:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 80027f4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80027f8:	f7fe f828 	bl	800084c <__aeabi_ddiv>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	4b77      	ldr	r3, [pc, #476]	@ (80029e4 <main+0xe14>)
 8002806:	e9c3 0100 	strd	r0, r1, [r3]
		body_z[1] = -thrust_sp[1] / tmpnorm;
 800280a:	4b75      	ldr	r3, [pc, #468]	@ (80029e0 <main+0xe10>)
 800280c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002810:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002814:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800281c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8002820:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002824:	f7fe f812 	bl	800084c <__aeabi_ddiv>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	4b6c      	ldr	r3, [pc, #432]	@ (80029e4 <main+0xe14>)
 8002832:	e9c3 0102 	strd	r0, r1, [r3, #8]
		body_z[2] = -thrust_sp[2] / tmpnorm;
 8002836:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <main+0xe10>)
 8002838:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800283c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002840:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002848:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800284c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002850:	f7fd fffc 	bl	800084c <__aeabi_ddiv>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <main+0xe14>)
 800285e:	e9c3 0104 	strd	r0, r1, [r3, #16]

		y_C[0] = -sin(yaw_setpoint);
 8002862:	4b61      	ldr	r3, [pc, #388]	@ (80029e8 <main+0xe18>)
 8002864:	ed93 7b00 	vldr	d7, [r3]
 8002868:	eeb0 0a47 	vmov.f32	s0, s14
 800286c:	eef0 0a67 	vmov.f32	s1, s15
 8002870:	f01f fcf2 	bl	8022258 <sin>
 8002874:	ec53 2b10 	vmov	r2, r3, d0
 8002878:	67ba      	str	r2, [r7, #120]	@ 0x78
 800287a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800287e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002880:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <main+0xe1c>)
 8002882:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8002886:	ed83 7b00 	vstr	d7, [r3]
		y_C[1] = cos(yaw_setpoint);
 800288a:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <main+0xe18>)
 800288c:	ed93 7b00 	vldr	d7, [r3]
 8002890:	eeb0 0a47 	vmov.f32	s0, s14
 8002894:	eef0 0a67 	vmov.f32	s1, s15
 8002898:	f01f fc82 	bl	80221a0 <cos>
 800289c:	eeb0 7a40 	vmov.f32	s14, s0
 80028a0:	eef0 7a60 	vmov.f32	s15, s1
 80028a4:	4b51      	ldr	r3, [pc, #324]	@ (80029ec <main+0xe1c>)
 80028a6:	ed83 7b02 	vstr	d7, [r3, #8]
		y_C[2] = 0.0;
 80028aa:	4950      	ldr	r1, [pc, #320]	@ (80029ec <main+0xe1c>)
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9c1 2304 	strd	r2, r3, [r1, #16]

		// Kreuzprodukt
		body_x[0] = y_C[1] * body_z[2] - y_C[2] * body_z[1];
 80028b8:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <main+0xe1c>)
 80028ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028be:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <main+0xe14>)
 80028c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028c4:	f7fd fe98 	bl	80005f8 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4b46      	ldr	r3, [pc, #280]	@ (80029ec <main+0xe1c>)
 80028d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <main+0xe14>)
 80028d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028dc:	f7fd fe8c 	bl	80005f8 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4620      	mov	r0, r4
 80028e6:	4629      	mov	r1, r5
 80028e8:	f7fd fcce 	bl	8000288 <__aeabi_dsub>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	4b3e      	ldr	r3, [pc, #248]	@ (80029f0 <main+0xe20>)
 80028f6:	e9c3 0100 	strd	r0, r1, [r3]
		body_x[1] = y_C[2] * body_z[0] - y_C[0] * body_z[2];
 80028fa:	4b3c      	ldr	r3, [pc, #240]	@ (80029ec <main+0xe1c>)
 80028fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002900:	4b38      	ldr	r3, [pc, #224]	@ (80029e4 <main+0xe14>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe77 	bl	80005f8 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4614      	mov	r4, r2
 8002910:	461d      	mov	r5, r3
 8002912:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <main+0xe1c>)
 8002914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002918:	4b32      	ldr	r3, [pc, #200]	@ (80029e4 <main+0xe14>)
 800291a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800291e:	f7fd fe6b 	bl	80005f8 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4620      	mov	r0, r4
 8002928:	4629      	mov	r1, r5
 800292a:	f7fd fcad 	bl	8000288 <__aeabi_dsub>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	4b2e      	ldr	r3, [pc, #184]	@ (80029f0 <main+0xe20>)
 8002938:	e9c3 0102 	strd	r0, r1, [r3, #8]
		body_x[2] = y_C[0] * body_z[1] - y_C[1] * body_z[0];
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <main+0xe1c>)
 800293e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002942:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <main+0xe14>)
 8002944:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002948:	f7fd fe56 	bl	80005f8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <main+0xe1c>)
 8002956:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800295a:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <main+0xe14>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fd fe4a 	bl	80005f8 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fc8c 	bl	8000288 <__aeabi_dsub>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <main+0xe20>)
 800297a:	e9c3 0104 	strd	r0, r1, [r3, #16]

		double normBodyX = sqrt(
			body_x[0] * body_x[0] +
 800297e:	4b1c      	ldr	r3, [pc, #112]	@ (80029f0 <main+0xe20>)
 8002980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002984:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <main+0xe20>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd fe35 	bl	80005f8 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4614      	mov	r4, r2
 8002994:	461d      	mov	r5, r3
			body_x[1] * body_x[1] +
 8002996:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <main+0xe20>)
 8002998:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <main+0xe20>)
 800299e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029a2:	f7fd fe29 	bl	80005f8 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
			body_x[0] * body_x[0] +
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7fd fc6d 	bl	800028c <__adddf3>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4614      	mov	r4, r2
 80029b8:	461d      	mov	r5, r3
			body_x[2] * body_x[2]
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <main+0xe20>)
 80029bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <main+0xe20>)
 80029c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029c6:	f7fd fe17 	bl	80005f8 <__aeabi_dmul>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
		double normBodyX = sqrt(
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	e00f      	b.n	80029f4 <main+0xe24>
 80029d4:	20000018 	.word	0x20000018
 80029d8:	20001028 	.word	0x20001028
 80029dc:	20001010 	.word	0x20001010
 80029e0:	20000ff0 	.word	0x20000ff0
 80029e4:	20001070 	.word	0x20001070
 80029e8:	20001088 	.word	0x20001088
 80029ec:	20001090 	.word	0x20001090
 80029f0:	20001040 	.word	0x20001040
 80029f4:	f7fd fc4a 	bl	800028c <__adddf3>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	ec43 2b17 	vmov	d7, r2, r3
 8002a00:	eeb0 0a47 	vmov.f32	s0, s14
 8002a04:	eef0 0a67 	vmov.f32	s1, s15
 8002a08:	f01f fb9c 	bl	8022144 <sqrt>
 8002a0c:	ed87 0bcc 	vstr	d0, [r7, #816]	@ 0x330
		);

		body_x[0] = body_x[0] / normBodyX;
 8002a10:	4baf      	ldr	r3, [pc, #700]	@ (8002cd0 <main+0x1100>)
 8002a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a16:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8002a1a:	f7fd ff17 	bl	800084c <__aeabi_ddiv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	4baa      	ldr	r3, [pc, #680]	@ (8002cd0 <main+0x1100>)
 8002a28:	e9c3 0100 	strd	r0, r1, [r3]
		body_x[1] = body_x[1] / normBodyX;
 8002a2c:	4ba8      	ldr	r3, [pc, #672]	@ (8002cd0 <main+0x1100>)
 8002a2e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a32:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8002a36:	f7fd ff09 	bl	800084c <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	4ba3      	ldr	r3, [pc, #652]	@ (8002cd0 <main+0x1100>)
 8002a44:	e9c3 0102 	strd	r0, r1, [r3, #8]
		body_x[2] = body_x[2] / normBodyX;
 8002a48:	4ba1      	ldr	r3, [pc, #644]	@ (8002cd0 <main+0x1100>)
 8002a4a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a4e:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8002a52:	f7fd fefb 	bl	800084c <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8002cd0 <main+0x1100>)
 8002a60:	e9c3 0104 	strd	r0, r1, [r3, #16]

		body_y[0] = (
			body_z[1] * body_x[2] -
 8002a64:	4b9b      	ldr	r3, [pc, #620]	@ (8002cd4 <main+0x1104>)
 8002a66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a6a:	4b99      	ldr	r3, [pc, #612]	@ (8002cd0 <main+0x1100>)
 8002a6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a70:	f7fd fdc2 	bl	80005f8 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
			body_z[2] * body_x[1]
 8002a7c:	4b95      	ldr	r3, [pc, #596]	@ (8002cd4 <main+0x1104>)
 8002a7e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a82:	4b93      	ldr	r3, [pc, #588]	@ (8002cd0 <main+0x1100>)
 8002a84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a88:	f7fd fdb6 	bl	80005f8 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
			body_z[1] * body_x[2] -
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fd fbf8 	bl	8000288 <__aeabi_dsub>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
		body_y[0] = (
 8002aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd8 <main+0x1108>)
 8002aa2:	e9c3 0100 	strd	r0, r1, [r3]
		);
		body_y[1] = (
			body_z[2] * body_x[0] -
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd4 <main+0x1104>)
 8002aa8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002aac:	4b88      	ldr	r3, [pc, #544]	@ (8002cd0 <main+0x1100>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fda1 	bl	80005f8 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4614      	mov	r4, r2
 8002abc:	461d      	mov	r5, r3
			body_z[0] * body_x[2]
 8002abe:	4b85      	ldr	r3, [pc, #532]	@ (8002cd4 <main+0x1104>)
 8002ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac4:	4b82      	ldr	r3, [pc, #520]	@ (8002cd0 <main+0x1100>)
 8002ac6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002aca:	f7fd fd95 	bl	80005f8 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
			body_z[2] * body_x[0] -
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd fbd7 	bl	8000288 <__aeabi_dsub>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
		body_y[1] = (
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd8 <main+0x1108>)
 8002ae4:	e9c3 0102 	strd	r0, r1, [r3, #8]
		);
		body_y[2] = (
			body_z[0] * body_x[1] -
 8002ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd4 <main+0x1104>)
 8002aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aee:	4b78      	ldr	r3, [pc, #480]	@ (8002cd0 <main+0x1100>)
 8002af0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002af4:	f7fd fd80 	bl	80005f8 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
			body_z[1] * body_x[0]
 8002b00:	4b74      	ldr	r3, [pc, #464]	@ (8002cd4 <main+0x1104>)
 8002b02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b06:	4b72      	ldr	r3, [pc, #456]	@ (8002cd0 <main+0x1100>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fd74 	bl	80005f8 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
			body_z[0] * body_x[1] -
 8002b14:	4620      	mov	r0, r4
 8002b16:	4629      	mov	r1, r5
 8002b18:	f7fd fbb6 	bl	8000288 <__aeabi_dsub>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
		body_y[2] = (
 8002b24:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd8 <main+0x1108>)
 8002b26:	e9c3 0104 	strd	r0, r1, [r3, #16]
		);

		double R_sp[3][3];

		// Desired rotation matrix
		R_sp[0][0] = body_x[0];
 8002b2a:	4b69      	ldr	r3, [pc, #420]	@ (8002cd0 <main+0x1100>)
 8002b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b30:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002b34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b38:	e9c3 0100 	strd	r0, r1, [r3]
		R_sp[1][0] = body_x[1];
 8002b3c:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <main+0x1100>)
 8002b3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b42:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002b46:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b4a:	e9c3 0106 	strd	r0, r1, [r3, #24]
		R_sp[2][0] = body_x[2];
 8002b4e:	4b60      	ldr	r3, [pc, #384]	@ (8002cd0 <main+0x1100>)
 8002b50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b54:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002b58:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b5c:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30

		R_sp[0][1] = body_y[0];
 8002b60:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <main+0x1108>)
 8002b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b66:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002b6a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b6e:	e9c3 0102 	strd	r0, r1, [r3, #8]
		R_sp[1][1] = body_y[1];
 8002b72:	4b59      	ldr	r3, [pc, #356]	@ (8002cd8 <main+0x1108>)
 8002b74:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b78:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002b7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b80:	e9c3 0108 	strd	r0, r1, [r3, #32]
		R_sp[2][1] = body_y[2];
 8002b84:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <main+0x1108>)
 8002b86:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b8a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002b8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b92:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38

		R_sp[0][2] = body_z[0];
 8002b96:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd4 <main+0x1104>)
 8002b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002ba0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ba4:	e9c3 0104 	strd	r0, r1, [r3, #16]
		R_sp[1][2] = body_z[1];
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd4 <main+0x1104>)
 8002baa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002bb2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bb6:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
		R_sp[2][2] = body_z[2];
 8002bba:	4b46      	ldr	r3, [pc, #280]	@ (8002cd4 <main+0x1104>)
 8002bbc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002bc0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002bc4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bc8:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
		// double quaternion_ganz[4];

		Quaternion quaternion_ganz;


		double tr = R_sp[0][0] + R_sp[1][1] + R_sp[2][2];
 8002bcc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002bd0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002bdc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002be0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002be4:	f7fd fb52 	bl	800028c <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002bf4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bf8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002bfc:	f7fd fb46 	bl	800028c <__adddf3>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
		double r, e0, e1, e2, e3;

		if (tr > R_sp[0][0] && tr > R_sp[1][1] && tr > R_sp[2][2]) {
 8002c08:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002c0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8002c18:	f7fd ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8099 	beq.w	8002d56 <main+0x1186>
 8002c24:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002c28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c30:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8002c34:	f7fd ff70 	bl	8000b18 <__aeabi_dcmpgt>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 808b 	beq.w	8002d56 <main+0x1186>
 8002c40:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002c44:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c48:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002c4c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8002c50:	f7fd ff62 	bl	8000b18 <__aeabi_dcmpgt>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d07d      	beq.n	8002d56 <main+0x1186>
			e0 = 0.5 * sqrt(1 + tr);
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <main+0x110c>)
 8002c60:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8002c64:	f7fd fb12 	bl	800028c <__adddf3>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	ec43 2b17 	vmov	d7, r2, r3
 8002c70:	eeb0 0a47 	vmov.f32	s0, s14
 8002c74:	eef0 0a67 	vmov.f32	s1, s15
 8002c78:	f01f fa64 	bl	8022144 <sqrt>
 8002c7c:	ec51 0b10 	vmov	r0, r1, d0
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <main+0x1110>)
 8002c86:	f7fd fcb7 	bl	80005f8 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9c7 23e2 	strd	r2, r3, [r7, #904]	@ 0x388
			r = 0.25 / e0;
 8002c92:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	4912      	ldr	r1, [pc, #72]	@ (8002ce4 <main+0x1114>)
 8002c9c:	f7fd fdd6 	bl	800084c <__aeabi_ddiv>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			e1 = (R_sp[2][1] - R_sp[1][2]) * r;
 8002ca8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002cac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002cb0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002cb4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002cb8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002cbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002cc0:	f7fd fae2 	bl	8000288 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002ccc:	e00c      	b.n	8002ce8 <main+0x1118>
 8002cce:	bf00      	nop
 8002cd0:	20001040 	.word	0x20001040
 8002cd4:	20001070 	.word	0x20001070
 8002cd8:	20001058 	.word	0x20001058
 8002cdc:	3ff00000 	.word	0x3ff00000
 8002ce0:	3fe00000 	.word	0x3fe00000
 8002ce4:	3fd00000 	.word	0x3fd00000
 8002ce8:	f7fd fc86 	bl	80005f8 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	e9c7 23e0 	strd	r2, r3, [r7, #896]	@ 0x380
			e2 = (R_sp[0][2] - R_sp[2][0]) * r;
 8002cf4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002cf8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002cfc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002d00:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d04:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d08:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002d0c:	f7fd fabc 	bl	8000288 <__aeabi_dsub>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002d18:	f7fd fc6e 	bl	80005f8 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
			e3 = (R_sp[1][0] - R_sp[0][1]) * r;
 8002d24:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d2c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d30:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d3c:	f7fd faa4 	bl	8000288 <__aeabi_dsub>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002d48:	f7fd fc56 	bl	80005f8 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	e9c7 23dc 	strd	r2, r3, [r7, #880]	@ 0x370
 8002d54:	e1c7      	b.n	80030e6 <main+0x1516>
		} else if (R_sp[0][0] > R_sp[1][1] && R_sp[0][0] > R_sp[2][2]) {
 8002d56:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d5a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d62:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d66:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d6e:	f7fd fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8096 	beq.w	8002ea6 <main+0x12d6>
 8002d7a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d7e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d86:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002d8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002d92:	f7fd fec1 	bl	8000b18 <__aeabi_dcmpgt>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8084 	beq.w	8002ea6 <main+0x12d6>
			e1 = 0.5 * sqrt(1 - tr + 2 * R_sp[0][0]);
 8002d9e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	498b      	ldr	r1, [pc, #556]	@ (8002fd4 <main+0x1404>)
 8002da8:	f7fd fa6e 	bl	8000288 <__aeabi_dsub>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4614      	mov	r4, r2
 8002db2:	461d      	mov	r5, r3
 8002db4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002db8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	f7fd fa62 	bl	800028c <__adddf3>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4620      	mov	r0, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	f7fd fa5c 	bl	800028c <__adddf3>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	ec43 2b17 	vmov	d7, r2, r3
 8002ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8002de0:	eef0 0a67 	vmov.f32	s1, s15
 8002de4:	f01f f9ae 	bl	8022144 <sqrt>
 8002de8:	ec51 0b10 	vmov	r0, r1, d0
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	4b79      	ldr	r3, [pc, #484]	@ (8002fd8 <main+0x1408>)
 8002df2:	f7fd fc01 	bl	80005f8 <__aeabi_dmul>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	e9c7 23e0 	strd	r2, r3, [r7, #896]	@ 0x380
			r = 0.25 / e1;
 8002dfe:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	4975      	ldr	r1, [pc, #468]	@ (8002fdc <main+0x140c>)
 8002e08:	f7fd fd20 	bl	800084c <__aeabi_ddiv>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			e0 = (R_sp[2][1] - R_sp[1][2]) * r;
 8002e14:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002e18:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002e20:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002e24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e28:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002e2c:	f7fd fa2c 	bl	8000288 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002e38:	f7fd fbde 	bl	80005f8 <__aeabi_dmul>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	e9c7 23e2 	strd	r2, r3, [r7, #904]	@ 0x388
			e2 = (R_sp[0][1] + R_sp[1][0]) * r;
 8002e44:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002e48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e50:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002e54:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e58:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e5c:	f7fd fa16 	bl	800028c <__adddf3>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002e68:	f7fd fbc6 	bl	80005f8 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
			e3 = (R_sp[0][2] + R_sp[2][0]) * r;
 8002e74:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002e78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e7c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e80:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002e84:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e88:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002e8c:	f7fd f9fe 	bl	800028c <__adddf3>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002e98:	f7fd fbae 	bl	80005f8 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	e9c7 23dc 	strd	r2, r3, [r7, #880]	@ 0x370
 8002ea4:	e11f      	b.n	80030e6 <main+0x1516>
		} else if (R_sp[1][1] > R_sp[2][2]) {
 8002ea6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002eaa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002eae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002eb2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002eb6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002eba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002ebe:	f7fd fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 808b 	beq.w	8002fe0 <main+0x1410>
			e2 = 0.5 * sqrt(1 - tr + 2 * R_sp[1][1]);
 8002eca:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	4940      	ldr	r1, [pc, #256]	@ (8002fd4 <main+0x1404>)
 8002ed4:	f7fd f9d8 	bl	8000288 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002ee4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ee8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	f7fd f9cc 	bl	800028c <__adddf3>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4620      	mov	r0, r4
 8002efa:	4629      	mov	r1, r5
 8002efc:	f7fd f9c6 	bl	800028c <__adddf3>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	ec43 2b17 	vmov	d7, r2, r3
 8002f08:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0c:	eef0 0a67 	vmov.f32	s1, s15
 8002f10:	f01f f918 	bl	8022144 <sqrt>
 8002f14:	ec51 0b10 	vmov	r0, r1, d0
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <main+0x1408>)
 8002f1e:	f7fd fb6b 	bl	80005f8 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
			r = 0.25 / e2;
 8002f2a:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	492a      	ldr	r1, [pc, #168]	@ (8002fdc <main+0x140c>)
 8002f34:	f7fd fc8a 	bl	800084c <__aeabi_ddiv>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			e0 = (R_sp[0][2] - R_sp[2][0]) * r;
 8002f40:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002f44:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f4c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002f50:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f54:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002f58:	f7fd f996 	bl	8000288 <__aeabi_dsub>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002f64:	f7fd fb48 	bl	80005f8 <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	e9c7 23e2 	strd	r2, r3, [r7, #904]	@ 0x388
			e1 = (R_sp[0][1] + R_sp[1][0]) * r;
 8002f70:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002f74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f7c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002f80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f88:	f7fd f980 	bl	800028c <__adddf3>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002f94:	f7fd fb30 	bl	80005f8 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	e9c7 23e0 	strd	r2, r3, [r7, #896]	@ 0x380
			e3 = (R_sp[1][2] + R_sp[2][1]) * r;
 8002fa0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002fa4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fa8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002fac:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002fb0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fb4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fb8:	f7fd f968 	bl	800028c <__adddf3>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8002fc4:	f7fd fb18 	bl	80005f8 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	e9c7 23dc 	strd	r2, r3, [r7, #880]	@ 0x370
 8002fd0:	e089      	b.n	80030e6 <main+0x1516>
 8002fd2:	bf00      	nop
 8002fd4:	3ff00000 	.word	0x3ff00000
 8002fd8:	3fe00000 	.word	0x3fe00000
 8002fdc:	3fd00000 	.word	0x3fd00000
		} else {
			e3 = 0.5 * sqrt(1 - tr + 2 * R_sp[2][2]);
 8002fe0:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8002fe4:	f04f 0000 	mov.w	r0, #0
 8002fe8:	49c4      	ldr	r1, [pc, #784]	@ (80032fc <main+0x172c>)
 8002fea:	f7fd f94d 	bl	8000288 <__aeabi_dsub>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002ffa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ffe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	f7fd f941 	bl	800028c <__adddf3>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	f7fd f93b 	bl	800028c <__adddf3>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	ec43 2b17 	vmov	d7, r2, r3
 800301e:	eeb0 0a47 	vmov.f32	s0, s14
 8003022:	eef0 0a67 	vmov.f32	s1, s15
 8003026:	f01f f88d 	bl	8022144 <sqrt>
 800302a:	ec51 0b10 	vmov	r0, r1, d0
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	4bb3      	ldr	r3, [pc, #716]	@ (8003300 <main+0x1730>)
 8003034:	f7fd fae0 	bl	80005f8 <__aeabi_dmul>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	e9c7 23dc 	strd	r2, r3, [r7, #880]	@ 0x370
			r = 0.25 / e3;
 8003040:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	49ae      	ldr	r1, [pc, #696]	@ (8003304 <main+0x1734>)
 800304a:	f7fd fbff 	bl	800084c <__aeabi_ddiv>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			e0 = (R_sp[1][0] - R_sp[0][1]) * r;
 8003056:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800305a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800305e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003062:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003066:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800306a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800306e:	f7fd f90b 	bl	8000288 <__aeabi_dsub>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 800307a:	f7fd fabd 	bl	80005f8 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	e9c7 23e2 	strd	r2, r3, [r7, #904]	@ 0x388
			e1 = (R_sp[0][2] + R_sp[2][0]) * r;
 8003086:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800308a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800308e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003092:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003096:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800309a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800309e:	f7fd f8f5 	bl	800028c <__adddf3>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 80030aa:	f7fd faa5 	bl	80005f8 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	e9c7 23e0 	strd	r2, r3, [r7, #896]	@ 0x380
			e2 = (R_sp[1][2] + R_sp[2][1]) * r;
 80030b6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80030ba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030be:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80030c2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80030c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80030ce:	f7fd f8dd 	bl	800028c <__adddf3>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 80030da:	f7fd fa8d 	bl	80005f8 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
		}

		quaternion_ganz.w = e0;
 80030e6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80030ea:	f5a3 713a 	sub.w	r1, r3, #744	@ 0x2e8
 80030ee:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 80030f2:	e9c1 2300 	strd	r2, r3, [r1]
		quaternion_ganz.x = e1;
 80030f6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80030fa:	f5a3 713a 	sub.w	r1, r3, #744	@ 0x2e8
 80030fe:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 8003102:	e9c1 2302 	strd	r2, r3, [r1, #8]
		quaternion_ganz.y = e2;
 8003106:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800310a:	f5a3 713a 	sub.w	r1, r3, #744	@ 0x2e8
 800310e:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 8003112:	e9c1 2304 	strd	r2, r3, [r1, #16]
		quaternion_ganz.z = e3;
 8003116:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800311a:	f5a3 713a 	sub.w	r1, r3, #744	@ 0x2e8
 800311e:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 8003122:	e9c1 2306 	strd	r2, r3, [r1, #24]
//		quaternion_ganz[0] = e0;
//		quaternion_ganz[1] = e1;
//		quaternion_ganz[2] = e2;
//		quaternion_ganz[3] = e3;

		if (e0 < 0) {
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9d7 01e2 	ldrd	r0, r1, [r7, #904]	@ 0x388
 8003132:	f7fd fcd3 	bl	8000adc <__aeabi_dcmplt>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d047      	beq.n	80031cc <main+0x15fc>
			quaternion_ganz.w = -quaternion_ganz.w;
 800313c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003140:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	673a      	str	r2, [r7, #112]	@ 0x70
 800314a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800314e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003150:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003154:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8003158:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 800315c:	ed83 7b00 	vstr	d7, [r3]
			quaternion_ganz.x = -quaternion_ganz.x;
 8003160:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003164:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8003168:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800316c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800316e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003174:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003178:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800317c:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003180:	ed83 7b02 	vstr	d7, [r3, #8]
			quaternion_ganz.y = -quaternion_ganz.y;
 8003184:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003188:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800318c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003190:	663a      	str	r2, [r7, #96]	@ 0x60
 8003192:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003196:	667b      	str	r3, [r7, #100]	@ 0x64
 8003198:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800319c:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80031a0:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80031a4:	ed83 7b04 	vstr	d7, [r3, #16]
			quaternion_ganz.z = -quaternion_ganz.z;
 80031a8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031ac:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80031b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031b6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80031ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031bc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031c0:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80031c4:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80031c8:	ed83 7b06 	vstr	d7, [r3, #24]
//			quaternion_ganz[2] = -quaternion_ganz[2];
//			quaternion_ganz[3] = -quaternion_ganz[3];
//		}


		double norm = normQuaternion(quaternion_ganz);
 80031cc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031d0:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80031d4:	ed93 4b00 	vldr	d4, [r3]
 80031d8:	ed93 5b02 	vldr	d5, [r3, #8]
 80031dc:	ed93 6b04 	vldr	d6, [r3, #16]
 80031e0:	ed93 7b06 	vldr	d7, [r3, #24]
 80031e4:	eeb0 0a44 	vmov.f32	s0, s8
 80031e8:	eef0 0a64 	vmov.f32	s1, s9
 80031ec:	eeb0 1a45 	vmov.f32	s2, s10
 80031f0:	eef0 1a65 	vmov.f32	s3, s11
 80031f4:	eeb0 2a46 	vmov.f32	s4, s12
 80031f8:	eef0 2a66 	vmov.f32	s5, s13
 80031fc:	eeb0 3a47 	vmov.f32	s6, s14
 8003200:	eef0 3a67 	vmov.f32	s7, s15
 8003204:	f7fe fa44 	bl	8001690 <normQuaternion>
 8003208:	ed87 0bc6 	vstr	d0, [r7, #792]	@ 0x318

		quaternion_ganz = scaleQuaternion(quaternion_ganz, 1 / norm);
 800320c:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 8003210:	f04f 0000 	mov.w	r0, #0
 8003214:	4939      	ldr	r1, [pc, #228]	@ (80032fc <main+0x172c>)
 8003216:	f7fd fb19 	bl	800084c <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	ec43 2b14 	vmov	d4, r2, r3
 8003222:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003226:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800322a:	ed93 3b00 	vldr	d3, [r3]
 800322e:	ed93 5b02 	vldr	d5, [r3, #8]
 8003232:	ed93 6b04 	vldr	d6, [r3, #16]
 8003236:	ed93 7b06 	vldr	d7, [r3, #24]
 800323a:	eeb0 0a43 	vmov.f32	s0, s6
 800323e:	eef0 0a63 	vmov.f32	s1, s7
 8003242:	eeb0 1a45 	vmov.f32	s2, s10
 8003246:	eef0 1a65 	vmov.f32	s3, s11
 800324a:	eeb0 2a46 	vmov.f32	s4, s12
 800324e:	eef0 2a66 	vmov.f32	s5, s13
 8003252:	eeb0 3a47 	vmov.f32	s6, s14
 8003256:	eef0 3a67 	vmov.f32	s7, s15
 800325a:	f7fe fb1c 	bl	8001896 <scaleQuaternion>
 800325e:	eeb0 4a40 	vmov.f32	s8, s0
 8003262:	eef0 4a60 	vmov.f32	s9, s1
 8003266:	eeb0 5a41 	vmov.f32	s10, s2
 800326a:	eef0 5a61 	vmov.f32	s11, s3
 800326e:	eeb0 6a42 	vmov.f32	s12, s4
 8003272:	eef0 6a62 	vmov.f32	s13, s5
 8003276:	eeb0 7a43 	vmov.f32	s14, s6
 800327a:	eef0 7a63 	vmov.f32	s15, s7
 800327e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003282:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8003286:	ed83 4b00 	vstr	d4, [r3]
 800328a:	ed83 5b02 	vstr	d5, [r3, #8]
 800328e:	ed83 6b04 	vstr	d6, [r3, #16]
 8003292:	ed83 7b06 	vstr	d7, [r3, #24]
		// quaternion_ganz[2] = q_target[2];
		// quaternion_ganz[3] = q_target[3];

		// Current thrust orientation e_z and desired thrust orientation e_z_d

		quad_dcm[0][0] = 1.0;
 8003296:	491c      	ldr	r1, [pc, #112]	@ (8003308 <main+0x1738>)
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <main+0x172c>)
 800329e:	e9c1 2300 	strd	r2, r3, [r1]
		quad_dcm[1][1] = 1.0;
 80032a2:	4919      	ldr	r1, [pc, #100]	@ (8003308 <main+0x1738>)
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <main+0x172c>)
 80032aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
		quad_dcm[2][2] = 1.0;
 80032ae:	4916      	ldr	r1, [pc, #88]	@ (8003308 <main+0x1738>)
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <main+0x172c>)
 80032b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

		e_z[0] = quad_dcm[0][2];
 80032ba:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <main+0x1738>)
 80032bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032c0:	4912      	ldr	r1, [pc, #72]	@ (800330c <main+0x173c>)
 80032c2:	e9c1 2300 	strd	r2, r3, [r1]
		e_z[1] = quad_dcm[1][2];
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <main+0x1738>)
 80032c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80032cc:	490f      	ldr	r1, [pc, #60]	@ (800330c <main+0x173c>)
 80032ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
		e_z[2] = quad_dcm[2][2];
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <main+0x1738>)
 80032d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80032d8:	490c      	ldr	r1, [pc, #48]	@ (800330c <main+0x173c>)
 80032da:	e9c1 2304 	strd	r2, r3, [r1, #16]

		double normThrustSp = sqrt(
			thrust_sp[0] * thrust_sp[0] +
 80032de:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <main+0x1740>)
 80032e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <main+0x1740>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd f985 	bl	80005f8 <__aeabi_dmul>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4614      	mov	r4, r2
 80032f4:	461d      	mov	r5, r3
			thrust_sp[1] * thrust_sp[1] +
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <main+0x1740>)
 80032f8:	e00c      	b.n	8003314 <main+0x1744>
 80032fa:	bf00      	nop
 80032fc:	3ff00000 	.word	0x3ff00000
 8003300:	3fe00000 	.word	0x3fe00000
 8003304:	3fd00000 	.word	0x3fd00000
 8003308:	200010a8 	.word	0x200010a8
 800330c:	200010f0 	.word	0x200010f0
 8003310:	20000ff0 	.word	0x20000ff0
 8003314:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003318:	4baf      	ldr	r3, [pc, #700]	@ (80035d8 <main+0x1a08>)
 800331a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331e:	f7fd f96b 	bl	80005f8 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
			thrust_sp[0] * thrust_sp[0] +
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fc ffaf 	bl	800028c <__adddf3>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4614      	mov	r4, r2
 8003334:	461d      	mov	r5, r3
			thrust_sp[2] * thrust_sp[2]
 8003336:	4ba8      	ldr	r3, [pc, #672]	@ (80035d8 <main+0x1a08>)
 8003338:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800333c:	4ba6      	ldr	r3, [pc, #664]	@ (80035d8 <main+0x1a08>)
 800333e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003342:	f7fd f959 	bl	80005f8 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
		double normThrustSp = sqrt(
 800334a:	4620      	mov	r0, r4
 800334c:	4629      	mov	r1, r5
 800334e:	f7fc ff9d 	bl	800028c <__adddf3>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	ec43 2b17 	vmov	d7, r2, r3
 800335a:	eeb0 0a47 	vmov.f32	s0, s14
 800335e:	eef0 0a67 	vmov.f32	s1, s15
 8003362:	f01e feef 	bl	8022144 <sqrt>
 8003366:	ed87 0bc4 	vstr	d0, [r7, #784]	@ 0x310
		);

		e_z_d[0] = -thrust_sp[0] / normThrustSp;
 800336a:	4b9b      	ldr	r3, [pc, #620]	@ (80035d8 <main+0x1a08>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	653a      	str	r2, [r7, #80]	@ 0x50
 8003372:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003376:	657b      	str	r3, [r7, #84]	@ 0x54
 8003378:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 800337c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003380:	f7fd fa64 	bl	800084c <__aeabi_ddiv>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	4b93      	ldr	r3, [pc, #588]	@ (80035dc <main+0x1a0c>)
 800338e:	e9c3 0100 	strd	r0, r1, [r3]
		e_z_d[1] = -thrust_sp[1] / normThrustSp;
 8003392:	4b91      	ldr	r3, [pc, #580]	@ (80035d8 <main+0x1a08>)
 8003394:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003398:	64ba      	str	r2, [r7, #72]	@ 0x48
 800339a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 80033a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80033a8:	f7fd fa50 	bl	800084c <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	4b89      	ldr	r3, [pc, #548]	@ (80035dc <main+0x1a0c>)
 80033b6:	e9c3 0102 	strd	r0, r1, [r3, #8]
		e_z_d[2] = -thrust_sp[2] / normThrustSp;
 80033ba:	4b87      	ldr	r3, [pc, #540]	@ (80035d8 <main+0x1a08>)
 80033bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80033c2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80033c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c8:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 80033cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80033d0:	f7fd fa3c 	bl	800084c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	4b7f      	ldr	r3, [pc, #508]	@ (80035dc <main+0x1a0c>)
 80033de:	e9c3 0104 	strd	r0, r1, [r3, #16]

		double qe_red_dot_part = (
			e_z[0] * e_z_d[0] +
 80033e2:	4b7f      	ldr	r3, [pc, #508]	@ (80035e0 <main+0x1a10>)
 80033e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e8:	4b7c      	ldr	r3, [pc, #496]	@ (80035dc <main+0x1a0c>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd f903 	bl	80005f8 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4614      	mov	r4, r2
 80033f8:	461d      	mov	r5, r3
			e_z[1] * e_z_d[1] +
 80033fa:	4b79      	ldr	r3, [pc, #484]	@ (80035e0 <main+0x1a10>)
 80033fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003400:	4b76      	ldr	r3, [pc, #472]	@ (80035dc <main+0x1a0c>)
 8003402:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003406:	f7fd f8f7 	bl	80005f8 <__aeabi_dmul>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
			e_z[0] * e_z_d[0] +
 800340e:	4620      	mov	r0, r4
 8003410:	4629      	mov	r1, r5
 8003412:	f7fc ff3b 	bl	800028c <__adddf3>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4614      	mov	r4, r2
 800341c:	461d      	mov	r5, r3
			e_z[2] * e_z_d[2]
 800341e:	4b70      	ldr	r3, [pc, #448]	@ (80035e0 <main+0x1a10>)
 8003420:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003424:	4b6d      	ldr	r3, [pc, #436]	@ (80035dc <main+0x1a0c>)
 8003426:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800342a:	f7fd f8e5 	bl	80005f8 <__aeabi_dmul>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
		double qe_red_dot_part = (
 8003432:	4620      	mov	r0, r4
 8003434:	4629      	mov	r1, r5
 8003436:	f7fc ff29 	bl	800028c <__adddf3>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
		);

		e_z_norm = sqrt(
			e_z[0] * e_z[0] +
 8003442:	4b67      	ldr	r3, [pc, #412]	@ (80035e0 <main+0x1a10>)
 8003444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003448:	4b65      	ldr	r3, [pc, #404]	@ (80035e0 <main+0x1a10>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd f8d3 	bl	80005f8 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4614      	mov	r4, r2
 8003458:	461d      	mov	r5, r3
			e_z[1] * e_z[1] +
 800345a:	4b61      	ldr	r3, [pc, #388]	@ (80035e0 <main+0x1a10>)
 800345c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003460:	4b5f      	ldr	r3, [pc, #380]	@ (80035e0 <main+0x1a10>)
 8003462:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003466:	f7fd f8c7 	bl	80005f8 <__aeabi_dmul>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
			e_z[0] * e_z[0] +
 800346e:	4620      	mov	r0, r4
 8003470:	4629      	mov	r1, r5
 8003472:	f7fc ff0b 	bl	800028c <__adddf3>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	461d      	mov	r5, r3
			e_z[2] * e_z[2]
 800347e:	4b58      	ldr	r3, [pc, #352]	@ (80035e0 <main+0x1a10>)
 8003480:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003484:	4b56      	ldr	r3, [pc, #344]	@ (80035e0 <main+0x1a10>)
 8003486:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800348a:	f7fd f8b5 	bl	80005f8 <__aeabi_dmul>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
		e_z_norm = sqrt(
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fc fef9 	bl	800028c <__adddf3>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	ec43 2b17 	vmov	d7, r2, r3
 80034a2:	eeb0 0a47 	vmov.f32	s0, s14
 80034a6:	eef0 0a67 	vmov.f32	s1, s15
 80034aa:	f01e fe4b 	bl	8022144 <sqrt>
 80034ae:	eeb0 7a40 	vmov.f32	s14, s0
 80034b2:	eef0 7a60 	vmov.f32	s15, s1
 80034b6:	4b4b      	ldr	r3, [pc, #300]	@ (80035e4 <main+0x1a14>)
 80034b8:	ed83 7b00 	vstr	d7, [r3]
		);

		e_z[0] = -e_z[0] / e_z_norm;
 80034bc:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <main+0x1a10>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ca:	4b46      	ldr	r3, [pc, #280]	@ (80035e4 <main+0x1a14>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80034d4:	f7fd f9ba 	bl	800084c <__aeabi_ddiv>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	4b3f      	ldr	r3, [pc, #252]	@ (80035e0 <main+0x1a10>)
 80034e2:	e9c3 0100 	strd	r0, r1, [r3]
		e_z[1] = -e_z[1] / e_z_norm;
 80034e6:	4b3e      	ldr	r3, [pc, #248]	@ (80035e0 <main+0x1a10>)
 80034e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80034ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80034f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034f4:	4b3b      	ldr	r3, [pc, #236]	@ (80035e4 <main+0x1a14>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80034fe:	f7fd f9a5 	bl	800084c <__aeabi_ddiv>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <main+0x1a10>)
 800350c:	e9c3 0102 	strd	r0, r1, [r3, #8]
		e_z[2] = -e_z[2] / e_z_norm;
 8003510:	4b33      	ldr	r3, [pc, #204]	@ (80035e0 <main+0x1a10>)
 8003512:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003516:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003518:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800351e:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <main+0x1a14>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003528:	f7fd f990 	bl	800084c <__aeabi_ddiv>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	4b2a      	ldr	r3, [pc, #168]	@ (80035e0 <main+0x1a10>)
 8003536:	e9c3 0104 	strd	r0, r1, [r3, #16]

		double e_z_d_norm = sqrt(
			e_z_d[0] * e_z_d[0] +
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <main+0x1a0c>)
 800353c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003540:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <main+0x1a0c>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f7fd f857 	bl	80005f8 <__aeabi_dmul>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4614      	mov	r4, r2
 8003550:	461d      	mov	r5, r3
			e_z_d[1] * e_z_d[1] +
 8003552:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <main+0x1a0c>)
 8003554:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003558:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <main+0x1a0c>)
 800355a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800355e:	f7fd f84b 	bl	80005f8 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
			e_z_d[0] * e_z_d[0] +
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f7fc fe8f 	bl	800028c <__adddf3>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4614      	mov	r4, r2
 8003574:	461d      	mov	r5, r3
			e_z_d[2] * e_z_d[2]
 8003576:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <main+0x1a0c>)
 8003578:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800357c:	4b17      	ldr	r3, [pc, #92]	@ (80035dc <main+0x1a0c>)
 800357e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003582:	f7fd f839 	bl	80005f8 <__aeabi_dmul>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
		double e_z_d_norm = sqrt(
 800358a:	4620      	mov	r0, r4
 800358c:	4629      	mov	r1, r5
 800358e:	f7fc fe7d 	bl	800028c <__adddf3>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	ec43 2b17 	vmov	d7, r2, r3
 800359a:	eeb0 0a47 	vmov.f32	s0, s14
 800359e:	eef0 0a67 	vmov.f32	s1, s15
 80035a2:	f01e fdcf 	bl	8022144 <sqrt>
 80035a6:	ed87 0bc0 	vstr	d0, [r7, #768]	@ 0x300
		);

		e_z_d[0] = -e_z_d[0] / e_z_d_norm;
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <main+0x1a0c>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	623a      	str	r2, [r7, #32]
 80035b2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 80035bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035c0:	f7fd f944 	bl	800084c <__aeabi_ddiv>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	4b03      	ldr	r3, [pc, #12]	@ (80035dc <main+0x1a0c>)
 80035ce:	e9c3 0100 	strd	r0, r1, [r3]
		e_z_d[1] = -e_z_d[1] / e_z_d_norm;
 80035d2:	4b02      	ldr	r3, [pc, #8]	@ (80035dc <main+0x1a0c>)
 80035d4:	e008      	b.n	80035e8 <main+0x1a18>
 80035d6:	bf00      	nop
 80035d8:	20000ff0 	.word	0x20000ff0
 80035dc:	20001108 	.word	0x20001108
 80035e0:	200010f0 	.word	0x200010f0
 80035e4:	200011b0 	.word	0x200011b0
 80035e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035ec:	61ba      	str	r2, [r7, #24]
 80035ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 80035f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035fc:	f7fd f926 	bl	800084c <__aeabi_ddiv>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	4bb2      	ldr	r3, [pc, #712]	@ (80038d4 <main+0x1d04>)
 800360a:	e9c3 0102 	strd	r0, r1, [r3, #8]
		e_z_d[2] = -e_z_d[2] / e_z_d_norm;
 800360e:	4bb1      	ldr	r3, [pc, #708]	@ (80038d4 <main+0x1d04>)
 8003610:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003614:	613a      	str	r2, [r7, #16]
 8003616:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 8003620:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003624:	f7fd f912 	bl	800084c <__aeabi_ddiv>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	4ba8      	ldr	r3, [pc, #672]	@ (80038d4 <main+0x1d04>)
 8003632:	e9c3 0104 	strd	r0, r1, [r3, #16]

		qe_red[0] = qe_red_dot_part + sqrt(
			e_z[0] * e_z[0] +
 8003636:	4ba8      	ldr	r3, [pc, #672]	@ (80038d8 <main+0x1d08>)
 8003638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800363c:	4ba6      	ldr	r3, [pc, #664]	@ (80038d8 <main+0x1d08>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc ffd9 	bl	80005f8 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4614      	mov	r4, r2
 800364c:	461d      	mov	r5, r3
			e_z[1] * e_z[1] +
 800364e:	4ba2      	ldr	r3, [pc, #648]	@ (80038d8 <main+0x1d08>)
 8003650:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003654:	4ba0      	ldr	r3, [pc, #640]	@ (80038d8 <main+0x1d08>)
 8003656:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800365a:	f7fc ffcd 	bl	80005f8 <__aeabi_dmul>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
			e_z[0] * e_z[0] +
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fc fe11 	bl	800028c <__adddf3>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4614      	mov	r4, r2
 8003670:	461d      	mov	r5, r3
			e_z[2] * e_z[2] +
 8003672:	4b99      	ldr	r3, [pc, #612]	@ (80038d8 <main+0x1d08>)
 8003674:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003678:	4b97      	ldr	r3, [pc, #604]	@ (80038d8 <main+0x1d08>)
 800367a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800367e:	f7fc ffbb 	bl	80005f8 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
			e_z[1] * e_z[1] +
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f7fc fdff 	bl	800028c <__adddf3>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4614      	mov	r4, r2
 8003694:	461d      	mov	r5, r3
			e_z_d[0] * e_z_d[0] +
 8003696:	4b8f      	ldr	r3, [pc, #572]	@ (80038d4 <main+0x1d04>)
 8003698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800369c:	4b8d      	ldr	r3, [pc, #564]	@ (80038d4 <main+0x1d04>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f7fc ffa9 	bl	80005f8 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
			e_z[2] * e_z[2] +
 80036aa:	4620      	mov	r0, r4
 80036ac:	4629      	mov	r1, r5
 80036ae:	f7fc fded 	bl	800028c <__adddf3>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4614      	mov	r4, r2
 80036b8:	461d      	mov	r5, r3
			e_z_d[1] * e_z_d[1] +
 80036ba:	4b86      	ldr	r3, [pc, #536]	@ (80038d4 <main+0x1d04>)
 80036bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80036c0:	4b84      	ldr	r3, [pc, #528]	@ (80038d4 <main+0x1d04>)
 80036c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036c6:	f7fc ff97 	bl	80005f8 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
			e_z_d[0] * e_z_d[0] +
 80036ce:	4620      	mov	r0, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	f7fc fddb 	bl	800028c <__adddf3>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4614      	mov	r4, r2
 80036dc:	461d      	mov	r5, r3
			e_z_d[2] * e_z_d[2]
 80036de:	4b7d      	ldr	r3, [pc, #500]	@ (80038d4 <main+0x1d04>)
 80036e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80036e4:	4b7b      	ldr	r3, [pc, #492]	@ (80038d4 <main+0x1d04>)
 80036e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036ea:	f7fc ff85 	bl	80005f8 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
		qe_red[0] = qe_red_dot_part + sqrt(
 80036f2:	4620      	mov	r0, r4
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc fdc9 	bl	800028c <__adddf3>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	ec43 2b17 	vmov	d7, r2, r3
 8003702:	eeb0 0a47 	vmov.f32	s0, s14
 8003706:	eef0 0a67 	vmov.f32	s1, s15
 800370a:	f01e fd1b 	bl	8022144 <sqrt>
 800370e:	ec51 0b10 	vmov	r0, r1, d0
 8003712:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 8003716:	f7fc fdb9 	bl	800028c <__adddf3>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	4b6e      	ldr	r3, [pc, #440]	@ (80038dc <main+0x1d0c>)
 8003724:	e9c3 0100 	strd	r0, r1, [r3]
		);

		qe_red[1] = (
			e_z[1] * e_z_d[2] -
 8003728:	4b6b      	ldr	r3, [pc, #428]	@ (80038d8 <main+0x1d08>)
 800372a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800372e:	4b69      	ldr	r3, [pc, #420]	@ (80038d4 <main+0x1d04>)
 8003730:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003734:	f7fc ff60 	bl	80005f8 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4614      	mov	r4, r2
 800373e:	461d      	mov	r5, r3
			e_z[2] * e_z_d[1]
 8003740:	4b65      	ldr	r3, [pc, #404]	@ (80038d8 <main+0x1d08>)
 8003742:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003746:	4b63      	ldr	r3, [pc, #396]	@ (80038d4 <main+0x1d04>)
 8003748:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800374c:	f7fc ff54 	bl	80005f8 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
			e_z[1] * e_z_d[2] -
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f7fc fd96 	bl	8000288 <__aeabi_dsub>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
		qe_red[1] = (
 8003764:	4b5d      	ldr	r3, [pc, #372]	@ (80038dc <main+0x1d0c>)
 8003766:	e9c3 0102 	strd	r0, r1, [r3, #8]
		);
		qe_red[2] = (
			e_z[2] * e_z_d[0] -
 800376a:	4b5b      	ldr	r3, [pc, #364]	@ (80038d8 <main+0x1d08>)
 800376c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003770:	4b58      	ldr	r3, [pc, #352]	@ (80038d4 <main+0x1d04>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc ff3f 	bl	80005f8 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4614      	mov	r4, r2
 8003780:	461d      	mov	r5, r3
			e_z[0] * e_z_d[2]
 8003782:	4b55      	ldr	r3, [pc, #340]	@ (80038d8 <main+0x1d08>)
 8003784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003788:	4b52      	ldr	r3, [pc, #328]	@ (80038d4 <main+0x1d04>)
 800378a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800378e:	f7fc ff33 	bl	80005f8 <__aeabi_dmul>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
			e_z[2] * e_z_d[0] -
 8003796:	4620      	mov	r0, r4
 8003798:	4629      	mov	r1, r5
 800379a:	f7fc fd75 	bl	8000288 <__aeabi_dsub>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
		qe_red[2] = (
 80037a6:	4b4d      	ldr	r3, [pc, #308]	@ (80038dc <main+0x1d0c>)
 80037a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
		);
		qe_red[3] = (
			e_z[0] * e_z_d[1] -
 80037ac:	4b4a      	ldr	r3, [pc, #296]	@ (80038d8 <main+0x1d08>)
 80037ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b2:	4b48      	ldr	r3, [pc, #288]	@ (80038d4 <main+0x1d04>)
 80037b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80037b8:	f7fc ff1e 	bl	80005f8 <__aeabi_dmul>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
			e_z[1] * e_z_d[0]
 80037c4:	4b44      	ldr	r3, [pc, #272]	@ (80038d8 <main+0x1d08>)
 80037c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037ca:	4b42      	ldr	r3, [pc, #264]	@ (80038d4 <main+0x1d04>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc ff12 	bl	80005f8 <__aeabi_dmul>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
			e_z[0] * e_z_d[1] -
 80037d8:	4620      	mov	r0, r4
 80037da:	4629      	mov	r1, r5
 80037dc:	f7fc fd54 	bl	8000288 <__aeabi_dsub>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
		qe_red[3] = (
 80037e8:	4b3c      	ldr	r3, [pc, #240]	@ (80038dc <main+0x1d0c>)
 80037ea:	e9c3 0106 	strd	r0, r1, [r3, #24]
		);

		qe_norm = sqrt(
			qe_red[0] * qe_red[0] +
 80037ee:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <main+0x1d0c>)
 80037f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f4:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <main+0x1d0c>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fc fefd 	bl	80005f8 <__aeabi_dmul>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4614      	mov	r4, r2
 8003804:	461d      	mov	r5, r3
			qe_red[1] * qe_red[1] +
 8003806:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <main+0x1d0c>)
 8003808:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800380c:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <main+0x1d0c>)
 800380e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003812:	f7fc fef1 	bl	80005f8 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
			qe_red[0] * qe_red[0] +
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f7fc fd35 	bl	800028c <__adddf3>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4614      	mov	r4, r2
 8003828:	461d      	mov	r5, r3
			qe_red[2] * qe_red[2] +
 800382a:	4b2c      	ldr	r3, [pc, #176]	@ (80038dc <main+0x1d0c>)
 800382c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003830:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <main+0x1d0c>)
 8003832:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003836:	f7fc fedf 	bl	80005f8 <__aeabi_dmul>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
			qe_red[1] * qe_red[1] +
 800383e:	4620      	mov	r0, r4
 8003840:	4629      	mov	r1, r5
 8003842:	f7fc fd23 	bl	800028c <__adddf3>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4614      	mov	r4, r2
 800384c:	461d      	mov	r5, r3
			qe_red[3] * qe_red[3]
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <main+0x1d0c>)
 8003850:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003854:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <main+0x1d0c>)
 8003856:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800385a:	f7fc fecd 	bl	80005f8 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
		qe_norm = sqrt(
 8003862:	4620      	mov	r0, r4
 8003864:	4629      	mov	r1, r5
 8003866:	f7fc fd11 	bl	800028c <__adddf3>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	ec43 2b17 	vmov	d7, r2, r3
 8003872:	eeb0 0a47 	vmov.f32	s0, s14
 8003876:	eef0 0a67 	vmov.f32	s1, s15
 800387a:	f01e fc63 	bl	8022144 <sqrt>
 800387e:	eeb0 7a40 	vmov.f32	s14, s0
 8003882:	eef0 7a60 	vmov.f32	s15, s1
 8003886:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <main+0x1d10>)
 8003888:	ed83 7b00 	vstr	d7, [r3]
		);

		qe_red[0] = qe_red[0] / qe_norm;
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <main+0x1d0c>)
 800388e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003892:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <main+0x1d10>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f7fc ffd8 	bl	800084c <__aeabi_ddiv>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <main+0x1d0c>)
 80038a6:	e9c3 0100 	strd	r0, r1, [r3]
		qe_red[1] = qe_red[1] / qe_norm;
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <main+0x1d0c>)
 80038ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <main+0x1d10>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f7fc ffc9 	bl	800084c <__aeabi_ddiv>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <main+0x1d0c>)
 80038c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
		qe_red[2] = qe_red[2] / qe_norm;
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <main+0x1d0c>)
 80038ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <main+0x1d10>)
 80038d0:	e008      	b.n	80038e4 <main+0x1d14>
 80038d2:	bf00      	nop
 80038d4:	20001108 	.word	0x20001108
 80038d8:	200010f0 	.word	0x200010f0
 80038dc:	20001120 	.word	0x20001120
 80038e0:	200011b8 	.word	0x200011b8
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f7fc ffb0 	bl	800084c <__aeabi_ddiv>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	4bb4      	ldr	r3, [pc, #720]	@ (8003bc8 <main+0x1ff8>)
 80038f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
		qe_red[3] = qe_red[3] / qe_norm;
 80038fa:	4bb3      	ldr	r3, [pc, #716]	@ (8003bc8 <main+0x1ff8>)
 80038fc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003900:	4bb2      	ldr	r3, [pc, #712]	@ (8003bcc <main+0x1ffc>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc ffa1 	bl	800084c <__aeabi_ddiv>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	4bad      	ldr	r3, [pc, #692]	@ (8003bc8 <main+0x1ff8>)
 8003914:	e9c3 0106 	strd	r0, r1, [r3, #24]

		// Reduced desired quaternion (reduced because it doesn't consider the desired Yaw angle)

		qd_red[0] = (
			qe_red[0] * quad_quat_state[0] -
 8003918:	4bab      	ldr	r3, [pc, #684]	@ (8003bc8 <main+0x1ff8>)
 800391a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391e:	4bac      	ldr	r3, [pc, #688]	@ (8003bd0 <main+0x2000>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fe68 	bl	80005f8 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4614      	mov	r4, r2
 800392e:	461d      	mov	r5, r3
			qe_red[1] * quad_quat_state[1] -
 8003930:	4ba5      	ldr	r3, [pc, #660]	@ (8003bc8 <main+0x1ff8>)
 8003932:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003936:	4ba6      	ldr	r3, [pc, #664]	@ (8003bd0 <main+0x2000>)
 8003938:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800393c:	f7fc fe5c 	bl	80005f8 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
			qe_red[0] * quad_quat_state[0] -
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	f7fc fc9e 	bl	8000288 <__aeabi_dsub>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4614      	mov	r4, r2
 8003952:	461d      	mov	r5, r3
			qe_red[2] * quad_quat_state[2] -
 8003954:	4b9c      	ldr	r3, [pc, #624]	@ (8003bc8 <main+0x1ff8>)
 8003956:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800395a:	4b9d      	ldr	r3, [pc, #628]	@ (8003bd0 <main+0x2000>)
 800395c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003960:	f7fc fe4a 	bl	80005f8 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
			qe_red[1] * quad_quat_state[1] -
 8003968:	4620      	mov	r0, r4
 800396a:	4629      	mov	r1, r5
 800396c:	f7fc fc8c 	bl	8000288 <__aeabi_dsub>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4614      	mov	r4, r2
 8003976:	461d      	mov	r5, r3
			qe_red[3] * quad_quat_state[3]
 8003978:	4b93      	ldr	r3, [pc, #588]	@ (8003bc8 <main+0x1ff8>)
 800397a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800397e:	4b94      	ldr	r3, [pc, #592]	@ (8003bd0 <main+0x2000>)
 8003980:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003984:	f7fc fe38 	bl	80005f8 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
			qe_red[2] * quad_quat_state[2] -
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fc7a 	bl	8000288 <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
		qd_red[0] = (
 800399c:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd4 <main+0x2004>)
 800399e:	e9c3 0100 	strd	r0, r1, [r3]
		);
		qd_red[1] = (
			qe_red[1] * quad_quat_state[0] +
 80039a2:	4b89      	ldr	r3, [pc, #548]	@ (8003bc8 <main+0x1ff8>)
 80039a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80039a8:	4b89      	ldr	r3, [pc, #548]	@ (8003bd0 <main+0x2000>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f7fc fe23 	bl	80005f8 <__aeabi_dmul>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4614      	mov	r4, r2
 80039b8:	461d      	mov	r5, r3
			qe_red[0] * quad_quat_state[1] -
 80039ba:	4b83      	ldr	r3, [pc, #524]	@ (8003bc8 <main+0x1ff8>)
 80039bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039c0:	4b83      	ldr	r3, [pc, #524]	@ (8003bd0 <main+0x2000>)
 80039c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039c6:	f7fc fe17 	bl	80005f8 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
			qe_red[1] * quad_quat_state[0] +
 80039ce:	4620      	mov	r0, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	f7fc fc5b 	bl	800028c <__adddf3>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	461d      	mov	r5, r3
			qe_red[3] * quad_quat_state[2] +
 80039de:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc8 <main+0x1ff8>)
 80039e0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80039e4:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd0 <main+0x2000>)
 80039e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ea:	f7fc fe05 	bl	80005f8 <__aeabi_dmul>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
			qe_red[0] * quad_quat_state[1] -
 80039f2:	4620      	mov	r0, r4
 80039f4:	4629      	mov	r1, r5
 80039f6:	f7fc fc47 	bl	8000288 <__aeabi_dsub>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4614      	mov	r4, r2
 8003a00:	461d      	mov	r5, r3
			qe_red[2] * quad_quat_state[3]
 8003a02:	4b71      	ldr	r3, [pc, #452]	@ (8003bc8 <main+0x1ff8>)
 8003a04:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003a08:	4b71      	ldr	r3, [pc, #452]	@ (8003bd0 <main+0x2000>)
 8003a0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a0e:	f7fc fdf3 	bl	80005f8 <__aeabi_dmul>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
			qe_red[3] * quad_quat_state[2] +
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fc fc37 	bl	800028c <__adddf3>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
		qd_red[1] = (
 8003a26:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd4 <main+0x2004>)
 8003a28:	e9c3 0102 	strd	r0, r1, [r3, #8]
		);
		qd_red[2] = (
			qe_red[2] * quad_quat_state[0] +
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <main+0x1ff8>)
 8003a2e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003a32:	4b67      	ldr	r3, [pc, #412]	@ (8003bd0 <main+0x2000>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f7fc fdde 	bl	80005f8 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
			qe_red[3] * quad_quat_state[1] +
 8003a44:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <main+0x1ff8>)
 8003a46:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003a4a:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <main+0x2000>)
 8003a4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a50:	f7fc fdd2 	bl	80005f8 <__aeabi_dmul>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
			qe_red[2] * quad_quat_state[0] +
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f7fc fc16 	bl	800028c <__adddf3>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4614      	mov	r4, r2
 8003a66:	461d      	mov	r5, r3
			qe_red[0] * quad_quat_state[2] -
 8003a68:	4b57      	ldr	r3, [pc, #348]	@ (8003bc8 <main+0x1ff8>)
 8003a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a6e:	4b58      	ldr	r3, [pc, #352]	@ (8003bd0 <main+0x2000>)
 8003a70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a74:	f7fc fdc0 	bl	80005f8 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
			qe_red[3] * quad_quat_state[1] +
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	4629      	mov	r1, r5
 8003a80:	f7fc fc04 	bl	800028c <__adddf3>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4614      	mov	r4, r2
 8003a8a:	461d      	mov	r5, r3
			qe_red[1] * quad_quat_state[3]
 8003a8c:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc8 <main+0x1ff8>)
 8003a8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a92:	4b4f      	ldr	r3, [pc, #316]	@ (8003bd0 <main+0x2000>)
 8003a94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a98:	f7fc fdae 	bl	80005f8 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
			qe_red[0] * quad_quat_state[2] -
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fbf0 	bl	8000288 <__aeabi_dsub>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
		qd_red[2] = (
 8003ab0:	4b48      	ldr	r3, [pc, #288]	@ (8003bd4 <main+0x2004>)
 8003ab2:	e9c3 0104 	strd	r0, r1, [r3, #16]
		);
		qd_red[3] = (
			qe_red[3] * quad_quat_state[0] -
 8003ab6:	4b44      	ldr	r3, [pc, #272]	@ (8003bc8 <main+0x1ff8>)
 8003ab8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003abc:	4b44      	ldr	r3, [pc, #272]	@ (8003bd0 <main+0x2000>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fd99 	bl	80005f8 <__aeabi_dmul>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4614      	mov	r4, r2
 8003acc:	461d      	mov	r5, r3
			qe_red[2] * quad_quat_state[1] +
 8003ace:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <main+0x1ff8>)
 8003ad0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd0 <main+0x2000>)
 8003ad6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ada:	f7fc fd8d 	bl	80005f8 <__aeabi_dmul>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
			qe_red[3] * quad_quat_state[0] -
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f7fc fbcf 	bl	8000288 <__aeabi_dsub>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4614      	mov	r4, r2
 8003af0:	461d      	mov	r5, r3
			qe_red[1] * quad_quat_state[2] +
 8003af2:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <main+0x1ff8>)
 8003af4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003af8:	4b35      	ldr	r3, [pc, #212]	@ (8003bd0 <main+0x2000>)
 8003afa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003afe:	f7fc fd7b 	bl	80005f8 <__aeabi_dmul>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
			qe_red[2] * quad_quat_state[1] +
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	f7fc fbbf 	bl	800028c <__adddf3>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4614      	mov	r4, r2
 8003b14:	461d      	mov	r5, r3
			qe_red[0] * quad_quat_state[3]
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <main+0x1ff8>)
 8003b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd0 <main+0x2000>)
 8003b1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b22:	f7fc fd69 	bl	80005f8 <__aeabi_dmul>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
			qe_red[1] * quad_quat_state[2] +
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7fc fbad 	bl	800028c <__adddf3>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
		qd_red[3] = (
 8003b3a:	4b26      	ldr	r3, [pc, #152]	@ (8003bd4 <main+0x2004>)
 8003b3c:	e9c3 0106 	strd	r0, r1, [r3, #24]
		);

		// Mixed desired quaternion (between reduced and full) and resulting desired quaternion qd

		qd_norm = sqrt(
			qd_red[0] * qd_red[0] +
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <main+0x2004>)
 8003b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b46:	4b23      	ldr	r3, [pc, #140]	@ (8003bd4 <main+0x2004>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f7fc fd54 	bl	80005f8 <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
			qd_red[1] * qd_red[1] +
 8003b58:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd4 <main+0x2004>)
 8003b5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <main+0x2004>)
 8003b60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b64:	f7fc fd48 	bl	80005f8 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
			qd_red[0] * qd_red[0] +
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc fb8c 	bl	800028c <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	461d      	mov	r5, r3
			qd_red[2] * qd_red[2] +
 8003b7c:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <main+0x2004>)
 8003b7e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003b82:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <main+0x2004>)
 8003b84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b88:	f7fc fd36 	bl	80005f8 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
			qd_red[1] * qd_red[1] +
 8003b90:	4620      	mov	r0, r4
 8003b92:	4629      	mov	r1, r5
 8003b94:	f7fc fb7a 	bl	800028c <__adddf3>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	461d      	mov	r5, r3
			qd_red[3] * qd_red[3]
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <main+0x2004>)
 8003ba2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <main+0x2004>)
 8003ba8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003bac:	f7fc fd24 	bl	80005f8 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
		qd_norm = sqrt(
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fb68 	bl	800028c <__adddf3>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	ec43 2b17 	vmov	d7, r2, r3
 8003bc4:	e008      	b.n	8003bd8 <main+0x2008>
 8003bc6:	bf00      	nop
 8003bc8:	20001120 	.word	0x20001120
 8003bcc:	200011b8 	.word	0x200011b8
 8003bd0:	200000b8 	.word	0x200000b8
 8003bd4:	20001140 	.word	0x20001140
 8003bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bdc:	eef0 0a67 	vmov.f32	s1, s15
 8003be0:	f01e fab0 	bl	8022144 <sqrt>
 8003be4:	eeb0 7a40 	vmov.f32	s14, s0
 8003be8:	eef0 7a60 	vmov.f32	s15, s1
 8003bec:	4bd7      	ldr	r3, [pc, #860]	@ (8003f4c <main+0x237c>)
 8003bee:	ed83 7b00 	vstr	d7, [r3]
		);



		Quaternion qd_reduziert;
		qd_reduziert.w = qd_red[0];
 8003bf2:	4bd7      	ldr	r3, [pc, #860]	@ (8003f50 <main+0x2380>)
 8003bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bf8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003bfc:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003c00:	e9c3 0100 	strd	r0, r1, [r3]
		qd_reduziert.x = qd_red[1];
 8003c04:	4bd2      	ldr	r3, [pc, #840]	@ (8003f50 <main+0x2380>)
 8003c06:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c0a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003c0e:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003c12:	e9c3 0102 	strd	r0, r1, [r3, #8]
		qd_reduziert.y = qd_red[2];
 8003c16:	4bce      	ldr	r3, [pc, #824]	@ (8003f50 <main+0x2380>)
 8003c18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003c1c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003c20:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003c24:	e9c3 0104 	strd	r0, r1, [r3, #16]
		qd_reduziert.z = qd_red[3];
 8003c28:	4bc9      	ldr	r3, [pc, #804]	@ (8003f50 <main+0x2380>)
 8003c2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003c2e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003c32:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003c36:	e9c3 0106 	strd	r0, r1, [r3, #24]

		Quaternion qd_reduziert_inverse = inverseQuaternion(qd_reduziert);
 8003c3a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003c3e:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003c42:	ed93 4b00 	vldr	d4, [r3]
 8003c46:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c4a:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c4e:	ed93 7b06 	vldr	d7, [r3, #24]
 8003c52:	eeb0 0a44 	vmov.f32	s0, s8
 8003c56:	eef0 0a64 	vmov.f32	s1, s9
 8003c5a:	eeb0 1a45 	vmov.f32	s2, s10
 8003c5e:	eef0 1a65 	vmov.f32	s3, s11
 8003c62:	eeb0 2a46 	vmov.f32	s4, s12
 8003c66:	eef0 2a66 	vmov.f32	s5, s13
 8003c6a:	eeb0 3a47 	vmov.f32	s6, s14
 8003c6e:	eef0 3a67 	vmov.f32	s7, s15
 8003c72:	f7fd fd73 	bl	800175c <inverseQuaternion>
 8003c76:	eeb0 4a40 	vmov.f32	s8, s0
 8003c7a:	eef0 4a60 	vmov.f32	s9, s1
 8003c7e:	eeb0 5a41 	vmov.f32	s10, s2
 8003c82:	eef0 5a61 	vmov.f32	s11, s3
 8003c86:	eeb0 6a42 	vmov.f32	s12, s4
 8003c8a:	eef0 6a62 	vmov.f32	s13, s5
 8003c8e:	eeb0 7a43 	vmov.f32	s14, s6
 8003c92:	eef0 7a63 	vmov.f32	s15, s7
 8003c96:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003c9a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003c9e:	ed83 4b00 	vstr	d4, [r3]
 8003ca2:	ed83 5b02 	vstr	d5, [r3, #8]
 8003ca6:	ed83 6b04 	vstr	d6, [r3, #16]
 8003caa:	ed83 7b06 	vstr	d7, [r3, #24]
//		qd_red_inverse[1] = -qd_red[1] / qd_norm;
//		qd_red_inverse[2] = -qd_red[2] / qd_norm;
//		qd_red_inverse[3] = -qd_red[3] / qd_norm;


		Quaternion q_mix = kreuzproduktQuaternion(qd_reduziert_inverse, quaternion_ganz);
 8003cae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003cb2:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8003cb6:	ed93 4b00 	vldr	d4, [r3]
 8003cba:	ed93 5b02 	vldr	d5, [r3, #8]
 8003cbe:	ed93 6b04 	vldr	d6, [r3, #16]
 8003cc2:	ed93 7b06 	vldr	d7, [r3, #24]
 8003cc6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003cca:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003cce:	ed93 0b00 	vldr	d0, [r3]
 8003cd2:	ed93 1b02 	vldr	d1, [r3, #8]
 8003cd6:	ed93 2b04 	vldr	d2, [r3, #16]
 8003cda:	ed93 3b06 	vldr	d3, [r3, #24]
 8003cde:	f7fd fe4a 	bl	8001976 <kreuzproduktQuaternion>
 8003ce2:	eeb0 4a40 	vmov.f32	s8, s0
 8003ce6:	eef0 4a60 	vmov.f32	s9, s1
 8003cea:	eeb0 5a41 	vmov.f32	s10, s2
 8003cee:	eef0 5a61 	vmov.f32	s11, s3
 8003cf2:	eeb0 6a42 	vmov.f32	s12, s4
 8003cf6:	eef0 6a62 	vmov.f32	s13, s5
 8003cfa:	eeb0 7a43 	vmov.f32	s14, s6
 8003cfe:	eef0 7a63 	vmov.f32	s15, s7
 8003d02:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d06:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003d0a:	ed83 4b00 	vstr	d4, [r3]
 8003d0e:	ed83 5b02 	vstr	d5, [r3, #8]
 8003d12:	ed83 6b04 	vstr	d6, [r3, #16]
 8003d16:	ed83 7b06 	vstr	d7, [r3, #24]
//			qd_red_inverse[2] * quaternion_ganz[1] +
//			qd_red_inverse[1] * quaternion_ganz[2] +
//			qd_red_inverse[0] * quaternion_ganz[3]
//		);

		if (q_mix.w < -1.0) {
 8003d1a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d1e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003f54 <main+0x2384>)
 8003d2c:	f7fc fed6 	bl	8000adc <__aeabi_dcmplt>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <main+0x2178>
			q_mix.w = -1.0;
 8003d36:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d3a:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	4b84      	ldr	r3, [pc, #528]	@ (8003f54 <main+0x2384>)
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (q_mix.w > 1.0) {
 8003d48:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d4c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	4b7f      	ldr	r3, [pc, #508]	@ (8003f58 <main+0x2388>)
 8003d5a:	f7fc fedd 	bl	8000b18 <__aeabi_dcmpgt>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <main+0x21a6>
			q_mix.w = 1.0;
 8003d64:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d68:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	4b79      	ldr	r3, [pc, #484]	@ (8003f58 <main+0x2388>)
 8003d72:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (q_mix.z < -1.0) {
 8003d76:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d7a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003d7e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	4b73      	ldr	r3, [pc, #460]	@ (8003f54 <main+0x2384>)
 8003d88:	f7fc fea8 	bl	8000adc <__aeabi_dcmplt>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <main+0x21d4>
			q_mix.z = -1.0;
 8003d92:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003d96:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f54 <main+0x2384>)
 8003da0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		}
		if (q_mix.z > 1.0) {
 8003da4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003da8:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003dac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	4b68      	ldr	r3, [pc, #416]	@ (8003f58 <main+0x2388>)
 8003db6:	f7fc feaf 	bl	8000b18 <__aeabi_dcmpgt>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <main+0x2202>
			q_mix.z = 1.0;
 8003dc0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003dc4:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	4b62      	ldr	r3, [pc, #392]	@ (8003f58 <main+0x2388>)
 8003dce:	e9c1 2306 	strd	r2, r3, [r1, #24]
//			q_mix[3] = 1.0;
//		}

		Quaternion qd;
		qd.w = (
			qd_reduziert.w * cos(yaw_w * acos(q_mix.w)) -
 8003dd2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003dd6:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003dda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003dde:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003de2:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003de6:	ed93 7b00 	vldr	d7, [r3]
 8003dea:	eeb0 0a47 	vmov.f32	s0, s14
 8003dee:	eef0 0a67 	vmov.f32	s1, s15
 8003df2:	f01e f8cd 	bl	8021f90 <acos>
 8003df6:	ec51 0b10 	vmov	r0, r1, d0
 8003dfa:	4b58      	ldr	r3, [pc, #352]	@ (8003f5c <main+0x238c>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f7fc fbfa 	bl	80005f8 <__aeabi_dmul>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	ec43 2b17 	vmov	d7, r2, r3
 8003e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e10:	eef0 0a67 	vmov.f32	s1, s15
 8003e14:	f01e f9c4 	bl	80221a0 <cos>
 8003e18:	ec53 2b10 	vmov	r2, r3, d0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc fbea 	bl	80005f8 <__aeabi_dmul>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4690      	mov	r8, r2
 8003e2a:	4699      	mov	r9, r3
			qd_reduziert.z * sin(yaw_w * asin(q_mix.z))
 8003e2c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003e30:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003e34:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003e38:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003e3c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003e40:	ed93 7b06 	vldr	d7, [r3, #24]
 8003e44:	eeb0 0a47 	vmov.f32	s0, s14
 8003e48:	eef0 0a67 	vmov.f32	s1, s15
 8003e4c:	f01e f8d4 	bl	8021ff8 <asin>
 8003e50:	ec51 0b10 	vmov	r0, r1, d0
 8003e54:	4b41      	ldr	r3, [pc, #260]	@ (8003f5c <main+0x238c>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc fbcd 	bl	80005f8 <__aeabi_dmul>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	ec43 2b17 	vmov	d7, r2, r3
 8003e66:	eeb0 0a47 	vmov.f32	s0, s14
 8003e6a:	eef0 0a67 	vmov.f32	s1, s15
 8003e6e:	f01e f9f3 	bl	8022258 <sin>
 8003e72:	ec53 2b10 	vmov	r2, r3, d0
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc fbbd 	bl	80005f8 <__aeabi_dmul>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
			qd_reduziert.w * cos(yaw_w * acos(q_mix.w)) -
 8003e82:	4640      	mov	r0, r8
 8003e84:	4649      	mov	r1, r9
 8003e86:	f7fc f9ff 	bl	8000288 <__aeabi_dsub>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
		qd.w = (
 8003e92:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003e96:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003e9a:	e9c3 0100 	strd	r0, r1, [r3]
		);
		qd.x = (
			qd_reduziert.x * cos(yaw_w * acos(q_mix.w)) +
 8003e9e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003ea2:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003ea6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003eaa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003eae:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003eb2:	ed93 7b00 	vldr	d7, [r3]
 8003eb6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eba:	eef0 0a67 	vmov.f32	s1, s15
 8003ebe:	f01e f867 	bl	8021f90 <acos>
 8003ec2:	ec51 0b10 	vmov	r0, r1, d0
 8003ec6:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <main+0x238c>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc fb94 	bl	80005f8 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	ec43 2b17 	vmov	d7, r2, r3
 8003ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8003edc:	eef0 0a67 	vmov.f32	s1, s15
 8003ee0:	f01e f95e 	bl	80221a0 <cos>
 8003ee4:	ec53 2b10 	vmov	r2, r3, d0
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc fb84 	bl	80005f8 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4690      	mov	r8, r2
 8003ef6:	4699      	mov	r9, r3
			qd_reduziert.y * sin(yaw_w * asin(q_mix.z))
 8003ef8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003efc:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003f00:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003f04:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003f08:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003f0c:	ed93 7b06 	vldr	d7, [r3, #24]
 8003f10:	eeb0 0a47 	vmov.f32	s0, s14
 8003f14:	eef0 0a67 	vmov.f32	s1, s15
 8003f18:	f01e f86e 	bl	8021ff8 <asin>
 8003f1c:	ec51 0b10 	vmov	r0, r1, d0
 8003f20:	4b0e      	ldr	r3, [pc, #56]	@ (8003f5c <main+0x238c>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f7fc fb67 	bl	80005f8 <__aeabi_dmul>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	ec43 2b17 	vmov	d7, r2, r3
 8003f32:	eeb0 0a47 	vmov.f32	s0, s14
 8003f36:	eef0 0a67 	vmov.f32	s1, s15
 8003f3a:	f01e f98d 	bl	8022258 <sin>
 8003f3e:	ec53 2b10 	vmov	r2, r3, d0
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	f7fc fb57 	bl	80005f8 <__aeabi_dmul>
 8003f4a:	e009      	b.n	8003f60 <main+0x2390>
 8003f4c:	200011a8 	.word	0x200011a8
 8003f50:	20001140 	.word	0x20001140
 8003f54:	bff00000 	.word	0xbff00000
 8003f58:	3ff00000 	.word	0x3ff00000
 8003f5c:	20001008 	.word	0x20001008
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
			qd_reduziert.x * cos(yaw_w * acos(q_mix.w)) +
 8003f64:	4640      	mov	r0, r8
 8003f66:	4649      	mov	r1, r9
 8003f68:	f7fc f990 	bl	800028c <__adddf3>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
		qd.x = (
 8003f74:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003f78:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003f7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
		);
		qd.y = (
			qd_reduziert.y * cos(yaw_w * acos(q_mix.w)) -
 8003f80:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003f84:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003f88:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003f8c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003f90:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003f94:	ed93 7b00 	vldr	d7, [r3]
 8003f98:	eeb0 0a47 	vmov.f32	s0, s14
 8003f9c:	eef0 0a67 	vmov.f32	s1, s15
 8003fa0:	f01d fff6 	bl	8021f90 <acos>
 8003fa4:	ec51 0b10 	vmov	r0, r1, d0
 8003fa8:	4bbe      	ldr	r3, [pc, #760]	@ (80042a4 <main+0x26d4>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc fb23 	bl	80005f8 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	ec43 2b17 	vmov	d7, r2, r3
 8003fba:	eeb0 0a47 	vmov.f32	s0, s14
 8003fbe:	eef0 0a67 	vmov.f32	s1, s15
 8003fc2:	f01e f8ed 	bl	80221a0 <cos>
 8003fc6:	ec53 2b10 	vmov	r2, r3, d0
 8003fca:	4620      	mov	r0, r4
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f7fc fb13 	bl	80005f8 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	4699      	mov	r9, r3
			qd_reduziert.x * sin(yaw_w * asin(q_mix.z))
 8003fda:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003fde:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003fe2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003fe6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003fea:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003fee:	ed93 7b06 	vldr	d7, [r3, #24]
 8003ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ff6:	eef0 0a67 	vmov.f32	s1, s15
 8003ffa:	f01d fffd 	bl	8021ff8 <asin>
 8003ffe:	ec51 0b10 	vmov	r0, r1, d0
 8004002:	4ba8      	ldr	r3, [pc, #672]	@ (80042a4 <main+0x26d4>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc faf6 	bl	80005f8 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	ec43 2b17 	vmov	d7, r2, r3
 8004014:	eeb0 0a47 	vmov.f32	s0, s14
 8004018:	eef0 0a67 	vmov.f32	s1, s15
 800401c:	f01e f91c 	bl	8022258 <sin>
 8004020:	ec53 2b10 	vmov	r2, r3, d0
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc fae6 	bl	80005f8 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
			qd_reduziert.y * cos(yaw_w * acos(q_mix.w)) -
 8004030:	4640      	mov	r0, r8
 8004032:	4649      	mov	r1, r9
 8004034:	f7fc f928 	bl	8000288 <__aeabi_dsub>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
		qd.y = (
 8004040:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004044:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8004048:	e9c3 0104 	strd	r0, r1, [r3, #16]
		);
		qd.z = (
			qd_reduziert.z * cos(yaw_w * acos(q_mix.w)) +
 800404c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004050:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8004054:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004058:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800405c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8004060:	ed93 7b00 	vldr	d7, [r3]
 8004064:	eeb0 0a47 	vmov.f32	s0, s14
 8004068:	eef0 0a67 	vmov.f32	s1, s15
 800406c:	f01d ff90 	bl	8021f90 <acos>
 8004070:	ec51 0b10 	vmov	r0, r1, d0
 8004074:	4b8b      	ldr	r3, [pc, #556]	@ (80042a4 <main+0x26d4>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc fabd 	bl	80005f8 <__aeabi_dmul>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	ec43 2b17 	vmov	d7, r2, r3
 8004086:	eeb0 0a47 	vmov.f32	s0, s14
 800408a:	eef0 0a67 	vmov.f32	s1, s15
 800408e:	f01e f887 	bl	80221a0 <cos>
 8004092:	ec53 2b10 	vmov	r2, r3, d0
 8004096:	4620      	mov	r0, r4
 8004098:	4629      	mov	r1, r5
 800409a:	f7fc faad 	bl	80005f8 <__aeabi_dmul>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4690      	mov	r8, r2
 80040a4:	4699      	mov	r9, r3
			qd_reduziert.w * sin(yaw_w * asin(q_mix.z))
 80040a6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80040aa:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80040ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80040b2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80040b6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80040ba:	ed93 7b06 	vldr	d7, [r3, #24]
 80040be:	eeb0 0a47 	vmov.f32	s0, s14
 80040c2:	eef0 0a67 	vmov.f32	s1, s15
 80040c6:	f01d ff97 	bl	8021ff8 <asin>
 80040ca:	ec51 0b10 	vmov	r0, r1, d0
 80040ce:	4b75      	ldr	r3, [pc, #468]	@ (80042a4 <main+0x26d4>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa90 	bl	80005f8 <__aeabi_dmul>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	ec43 2b17 	vmov	d7, r2, r3
 80040e0:	eeb0 0a47 	vmov.f32	s0, s14
 80040e4:	eef0 0a67 	vmov.f32	s1, s15
 80040e8:	f01e f8b6 	bl	8022258 <sin>
 80040ec:	ec53 2b10 	vmov	r2, r3, d0
 80040f0:	4620      	mov	r0, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7fc fa80 	bl	80005f8 <__aeabi_dmul>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
			qd_reduziert.z * cos(yaw_w * acos(q_mix.w)) +
 80040fc:	4640      	mov	r0, r8
 80040fe:	4649      	mov	r1, r9
 8004100:	f7fc f8c4 	bl	800028c <__adddf3>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
		qd.z = (
 800410c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004110:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8004114:	e9c3 0106 	strd	r0, r1, [r3, #24]
		);

		Quaternion quad_quat_state_inverse = inverseQuaternion(quad_quat_staten);
 8004118:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800411c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8004120:	ed93 4b00 	vldr	d4, [r3]
 8004124:	ed93 5b02 	vldr	d5, [r3, #8]
 8004128:	ed93 6b04 	vldr	d6, [r3, #16]
 800412c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004130:	eeb0 0a44 	vmov.f32	s0, s8
 8004134:	eef0 0a64 	vmov.f32	s1, s9
 8004138:	eeb0 1a45 	vmov.f32	s2, s10
 800413c:	eef0 1a65 	vmov.f32	s3, s11
 8004140:	eeb0 2a46 	vmov.f32	s4, s12
 8004144:	eef0 2a66 	vmov.f32	s5, s13
 8004148:	eeb0 3a47 	vmov.f32	s6, s14
 800414c:	eef0 3a67 	vmov.f32	s7, s15
 8004150:	f7fd fb04 	bl	800175c <inverseQuaternion>
 8004154:	eeb0 4a40 	vmov.f32	s8, s0
 8004158:	eef0 4a60 	vmov.f32	s9, s1
 800415c:	eeb0 5a41 	vmov.f32	s10, s2
 8004160:	eef0 5a61 	vmov.f32	s11, s3
 8004164:	eeb0 6a42 	vmov.f32	s12, s4
 8004168:	eef0 6a62 	vmov.f32	s13, s5
 800416c:	eeb0 7a43 	vmov.f32	s14, s6
 8004170:	eef0 7a63 	vmov.f32	s15, s7
 8004174:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004178:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800417c:	ed83 4b00 	vstr	d4, [r3]
 8004180:	ed83 5b02 	vstr	d5, [r3, #8]
 8004184:	ed83 6b04 	vstr	d6, [r3, #16]
 8004188:	ed83 7b06 	vstr	d7, [r3, #24]
//		quad_quat_state_inverse[1] = -quad_quat_state[1] / nor;
//		quad_quat_state_inverse[2] = -quad_quat_state[2] / nor;
//		quad_quat_state_inverse[3] = -quad_quat_state[3] / nor;

		Quaternion quaternion_error;
		quaternion_error = kreuzproduktQuaternion(quad_quat_state_inverse, qd);
 800418c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004190:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8004194:	ed93 4b00 	vldr	d4, [r3]
 8004198:	ed93 5b02 	vldr	d5, [r3, #8]
 800419c:	ed93 6b04 	vldr	d6, [r3, #16]
 80041a0:	ed93 7b06 	vldr	d7, [r3, #24]
 80041a4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80041a8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80041ac:	ed93 0b00 	vldr	d0, [r3]
 80041b0:	ed93 1b02 	vldr	d1, [r3, #8]
 80041b4:	ed93 2b04 	vldr	d2, [r3, #16]
 80041b8:	ed93 3b06 	vldr	d3, [r3, #24]
 80041bc:	f7fd fbdb 	bl	8001976 <kreuzproduktQuaternion>
 80041c0:	eeb0 4a40 	vmov.f32	s8, s0
 80041c4:	eef0 4a60 	vmov.f32	s9, s1
 80041c8:	eeb0 5a41 	vmov.f32	s10, s2
 80041cc:	eef0 5a61 	vmov.f32	s11, s3
 80041d0:	eeb0 6a42 	vmov.f32	s12, s4
 80041d4:	eef0 6a62 	vmov.f32	s13, s5
 80041d8:	eeb0 7a43 	vmov.f32	s14, s6
 80041dc:	eef0 7a63 	vmov.f32	s15, s7
 80041e0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80041e4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80041e8:	ed83 4b00 	vstr	d4, [r3]
 80041ec:	ed83 5b02 	vstr	d5, [r3, #8]
 80041f0:	ed83 6b04 	vstr	d6, [r3, #16]
 80041f4:	ed83 7b06 	vstr	d7, [r3, #24]
//			quad_quat_state_inverse[2] * qd[1] +
//			quad_quat_state_inverse[1] * qd[2] +
//			quad_quat_state_inverse[0] * qd[3]
//		);

		if (quaternion_error.w > 0) {
 80041f8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80041fc:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8004200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	f7fc fc84 	bl	8000b18 <__aeabi_dcmpgt>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04a      	beq.n	80042ac <main+0x26dc>
			rate_setpoint[0] = (2.0 * quaternion_error.x * attitute_p_gain[0]);
 8004216:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800421a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800421e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	f7fc f831 	bl	800028c <__adddf3>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	4b1d      	ldr	r3, [pc, #116]	@ (80042a8 <main+0x26d8>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fc f9de 	bl	80005f8 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
			rate_setpoint[1] = (2.0 * quaternion_error.y * attitute_p_gain[1]);
 8004244:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004248:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800424c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	f7fc f81a 	bl	800028c <__adddf3>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <main+0x26d8>)
 8004262:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004266:	f7fc f9c7 	bl	80005f8 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
			rate_setpoint[2] = (2.0 * quaternion_error.z * attitute_p_gain[2]);
 8004272:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004276:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800427a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	f7fc f803 	bl	800028c <__adddf3>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <main+0x26d8>)
 8004290:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004294:	f7fc f9b0 	bl	80005f8 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
 80042a0:	e058      	b.n	8004354 <main+0x2784>
 80042a2:	bf00      	nop
 80042a4:	20001008 	.word	0x20001008
 80042a8:	20000048 	.word	0x20000048
		} else {
			rate_setpoint[0] = -(2.0 * quaternion_error.x * attitute_p_gain[0]);
 80042ac:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80042b0:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80042b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	f7fb ffe6 	bl	800028c <__adddf3>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <main+0x278c>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc f993 	bl	80005f8 <__aeabi_dmul>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	60ba      	str	r2, [r7, #8]
 80042d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	ed97 7b02 	vldr	d7, [r7, #8]
 80042e2:	ed87 7bb4 	vstr	d7, [r7, #720]	@ 0x2d0
			rate_setpoint[1] = -(2.0 * quaternion_error.y * attitute_p_gain[1]);
 80042e6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80042ea:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80042ee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	f7fb ffc9 	bl	800028c <__adddf3>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	4b16      	ldr	r3, [pc, #88]	@ (800435c <main+0x278c>)
 8004304:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004308:	f7fc f976 	bl	80005f8 <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	603a      	str	r2, [r7, #0]
 8004312:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	ed97 7b00 	vldr	d7, [r7]
 800431c:	ed87 7bb6 	vstr	d7, [r7, #728]	@ 0x2d8
			rate_setpoint[2] = -(2.0 * quaternion_error.z * attitute_p_gain[2]);
 8004320:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004324:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8004328:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	f7fb ffac 	bl	800028c <__adddf3>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	4b07      	ldr	r3, [pc, #28]	@ (800435c <main+0x278c>)
 800433e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004342:	f7fc f959 	bl	80005f8 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4692      	mov	sl, r2
 800434c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8004350:	e9c7 abb8 	strd	sl, fp, [r7, #736]	@ 0x2e0
//				-2.0 * quadternion_error[3] * attitute_p_gain[2]
//			);
//		}

		// Rate Control
		for (int i = 0; i < 3; i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 800435a:	e064      	b.n	8004426 <main+0x2856>
 800435c:	20000048 	.word	0x20000048
			rate_error[i] = rate_setpoint[i] - quad_rate[i];
 8004360:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800436a:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800436e:	4413      	add	r3, r2
 8004370:	3bd0      	subs	r3, #208	@ 0xd0
 8004372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004376:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8004380:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8004384:	4413      	add	r3, r2
 8004386:	3be8      	subs	r3, #232	@ 0xe8
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fb ff7c 	bl	8000288 <__aeabi_dsub>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	4ad3      	ldr	r2, [pc, #844]	@ (80046e8 <main+0x2b18>)
 800439a:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	e9c3 0100 	strd	r0, r1, [r3]
			rateCtrl[i] = (
				rate_p_gain[i] * rate_error[i] -
 80043a6:	4ad1      	ldr	r2, [pc, #836]	@ (80046ec <main+0x2b1c>)
 80043a8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b4:	4acc      	ldr	r2, [pc, #816]	@ (80046e8 <main+0x2b18>)
 80043b6:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fc f919 	bl	80005f8 <__aeabi_dmul>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4614      	mov	r4, r2
 80043cc:	461d      	mov	r5, r3
				rate_d_gain[i] * omega_dot[i]
 80043ce:	4ac8      	ldr	r2, [pc, #800]	@ (80046f0 <main+0x2b20>)
 80043d0:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043dc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80043e0:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 80043e4:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f7fc f902 	bl	80005f8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
				rate_p_gain[i] * rate_error[i] -
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fb ff44 	bl	8000288 <__aeabi_dsub>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
			rateCtrl[i] = (
 8004408:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800440c:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004410:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	e9c3 0100 	strd	r0, r1, [r3]
		for (int i = 0; i < 3; i++) {
 800441c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004420:	3301      	adds	r3, #1
 8004422:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8004426:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800442a:	2b02      	cmp	r3, #2
 800442c:	dd98      	ble.n	8004360 <main+0x2790>
			);
		}

		thrust_sp_norm = sqrt(
			pow(thrust_sp[0], 2) +
 800442e:	4bb1      	ldr	r3, [pc, #708]	@ (80046f4 <main+0x2b24>)
 8004430:	ed93 7b00 	vldr	d7, [r3]
 8004434:	ed9f 1baa 	vldr	d1, [pc, #680]	@ 80046e0 <main+0x2b10>
 8004438:	eeb0 0a47 	vmov.f32	s0, s14
 800443c:	eef0 0a67 	vmov.f32	s1, s15
 8004440:	f01d fe10 	bl	8022064 <pow>
 8004444:	ec55 4b10 	vmov	r4, r5, d0
			pow(thrust_sp[1], 2) +
 8004448:	4baa      	ldr	r3, [pc, #680]	@ (80046f4 <main+0x2b24>)
 800444a:	ed93 7b02 	vldr	d7, [r3, #8]
 800444e:	ed9f 1ba4 	vldr	d1, [pc, #656]	@ 80046e0 <main+0x2b10>
 8004452:	eeb0 0a47 	vmov.f32	s0, s14
 8004456:	eef0 0a67 	vmov.f32	s1, s15
 800445a:	f01d fe03 	bl	8022064 <pow>
 800445e:	ec53 2b10 	vmov	r2, r3, d0
			pow(thrust_sp[0], 2) +
 8004462:	4620      	mov	r0, r4
 8004464:	4629      	mov	r1, r5
 8004466:	f7fb ff11 	bl	800028c <__adddf3>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4614      	mov	r4, r2
 8004470:	461d      	mov	r5, r3
			pow(thrust_sp[2], 2)
 8004472:	4ba0      	ldr	r3, [pc, #640]	@ (80046f4 <main+0x2b24>)
 8004474:	ed93 7b04 	vldr	d7, [r3, #16]
 8004478:	ed9f 1b99 	vldr	d1, [pc, #612]	@ 80046e0 <main+0x2b10>
 800447c:	eeb0 0a47 	vmov.f32	s0, s14
 8004480:	eef0 0a67 	vmov.f32	s1, s15
 8004484:	f01d fdee 	bl	8022064 <pow>
 8004488:	ec53 2b10 	vmov	r2, r3, d0
		thrust_sp_norm = sqrt(
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fb fefc 	bl	800028c <__adddf3>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	ec43 2b17 	vmov	d7, r2, r3
 800449c:	eeb0 0a47 	vmov.f32	s0, s14
 80044a0:	eef0 0a67 	vmov.f32	s1, s15
 80044a4:	f01d fe4e 	bl	8022144 <sqrt>
 80044a8:	eeb0 7a40 	vmov.f32	s14, s0
 80044ac:	eef0 7a60 	vmov.f32	s15, s1
 80044b0:	4b91      	ldr	r3, [pc, #580]	@ (80046f8 <main+0x2b28>)
 80044b2:	ed83 7b00 	vstr	d7, [r3]
		);

		w_cmd[0] = (
			mixerFM[0][0] * thrust_sp_norm +
 80044b6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80044ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044c2:	4b8d      	ldr	r3, [pc, #564]	@ (80046f8 <main+0x2b28>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fc f896 	bl	80005f8 <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4614      	mov	r4, r2
 80044d2:	461d      	mov	r5, r3
			mixerFM[0][1] * rateCtrl[X] +
 80044d4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80044d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80044e0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80044e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f7fc f884 	bl	80005f8 <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
			mixerFM[0][0] * thrust_sp_norm +
 80044f4:	4620      	mov	r0, r4
 80044f6:	4629      	mov	r1, r5
 80044f8:	f7fb fec8 	bl	800028c <__adddf3>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4614      	mov	r4, r2
 8004502:	461d      	mov	r5, r3
			mixerFM[0][2] * rateCtrl[Y] +
 8004504:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004508:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800450c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004510:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004514:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004518:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800451c:	f7fc f86c 	bl	80005f8 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
			mixerFM[0][1] * rateCtrl[X] +
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb feb0 	bl	800028c <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
			mixerFM[0][3] * rateCtrl[Z]
 8004534:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004538:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800453c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004540:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004544:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004548:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800454c:	f7fc f854 	bl	80005f8 <__aeabi_dmul>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
			mixerFM[0][2] * rateCtrl[Y] +
 8004554:	4620      	mov	r0, r4
 8004556:	4629      	mov	r1, r5
 8004558:	f7fb fe98 	bl	800028c <__adddf3>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
		w_cmd[0] = (
 8004564:	4b65      	ldr	r3, [pc, #404]	@ (80046fc <main+0x2b2c>)
 8004566:	e9c3 0100 	strd	r0, r1, [r3]
		);
		w_cmd[1] = (
			mixerFM[1][0] * thrust_sp_norm +
 800456a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800456e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004572:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004576:	4b60      	ldr	r3, [pc, #384]	@ (80046f8 <main+0x2b28>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f7fc f83c 	bl	80005f8 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4614      	mov	r4, r2
 8004586:	461d      	mov	r5, r3
			mixerFM[1][1] * rateCtrl[X] +
 8004588:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800458c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004590:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004594:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004598:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fc f82a 	bl	80005f8 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
			mixerFM[1][0] * thrust_sp_norm +
 80045a8:	4620      	mov	r0, r4
 80045aa:	4629      	mov	r1, r5
 80045ac:	f7fb fe6e 	bl	800028c <__adddf3>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	461d      	mov	r5, r3
			mixerFM[1][2] * rateCtrl[Y] +
 80045b8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80045bc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045c0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80045c4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80045c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80045cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80045d0:	f7fc f812 	bl	80005f8 <__aeabi_dmul>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
			mixerFM[1][1] * rateCtrl[X] +
 80045d8:	4620      	mov	r0, r4
 80045da:	4629      	mov	r1, r5
 80045dc:	f7fb fe56 	bl	800028c <__adddf3>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
			mixerFM[1][3] * rateCtrl[Z]
 80045e8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80045ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045f0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80045f4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80045f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80045fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004600:	f7fb fffa 	bl	80005f8 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
			mixerFM[1][2] * rateCtrl[Y] +
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fe3e 	bl	800028c <__adddf3>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
		w_cmd[1] = (
 8004618:	4b38      	ldr	r3, [pc, #224]	@ (80046fc <main+0x2b2c>)
 800461a:	e9c3 0102 	strd	r0, r1, [r3, #8]
		);
		w_cmd[2] = (
			mixerFM[2][0] * thrust_sp_norm +
 800461e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004622:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004626:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800462a:	4b33      	ldr	r3, [pc, #204]	@ (80046f8 <main+0x2b28>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fb ffe2 	bl	80005f8 <__aeabi_dmul>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4614      	mov	r4, r2
 800463a:	461d      	mov	r5, r3
			mixerFM[2][1] * rateCtrl[X] +
 800463c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004640:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004644:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8004648:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800464c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ffd0 	bl	80005f8 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
			mixerFM[2][0] * thrust_sp_norm +
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb fe14 	bl	800028c <__adddf3>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4614      	mov	r4, r2
 800466a:	461d      	mov	r5, r3
			mixerFM[2][2] * rateCtrl[Y] +
 800466c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004670:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004674:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004678:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800467c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004680:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004684:	f7fb ffb8 	bl	80005f8 <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
			mixerFM[2][1] * rateCtrl[X] +
 800468c:	4620      	mov	r0, r4
 800468e:	4629      	mov	r1, r5
 8004690:	f7fb fdfc 	bl	800028c <__adddf3>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4614      	mov	r4, r2
 800469a:	461d      	mov	r5, r3
			mixerFM[2][3] * rateCtrl[Z]
 800469c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80046a0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80046a4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80046a8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80046ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80046b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046b4:	f7fb ffa0 	bl	80005f8 <__aeabi_dmul>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
			mixerFM[2][2] * rateCtrl[Y] +
 80046bc:	4620      	mov	r0, r4
 80046be:	4629      	mov	r1, r5
 80046c0:	f7fb fde4 	bl	800028c <__adddf3>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
		w_cmd[2] = (
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <main+0x2b2c>)
 80046ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
		);
		w_cmd[3] = (
			mixerFM[3][0] * thrust_sp_norm +
 80046d2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80046d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80046da:	e011      	b.n	8004700 <main+0x2b30>
 80046dc:	f3af 8000 	nop.w
 80046e0:	00000000 	.word	0x00000000
 80046e4:	40000000 	.word	0x40000000
 80046e8:	20000fd0 	.word	0x20000fd0
 80046ec:	20000060 	.word	0x20000060
 80046f0:	20000078 	.word	0x20000078
 80046f4:	20000ff0 	.word	0x20000ff0
 80046f8:	20001160 	.word	0x20001160
 80046fc:	20001188 	.word	0x20001188
 8004700:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8004704:	4b60      	ldr	r3, [pc, #384]	@ (8004888 <main+0x2cb8>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f7fb ff75 	bl	80005f8 <__aeabi_dmul>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4614      	mov	r4, r2
 8004714:	461d      	mov	r5, r3
			mixerFM[3][1] * rateCtrl[X] +
 8004716:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800471a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800471e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8004722:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004726:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb ff63 	bl	80005f8 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
			mixerFM[3][0] * thrust_sp_norm +
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	f7fb fda7 	bl	800028c <__adddf3>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4614      	mov	r4, r2
 8004744:	461d      	mov	r5, r3
			mixerFM[3][2] * rateCtrl[Y] +
 8004746:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800474a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800474e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8004752:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004756:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800475a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800475e:	f7fb ff4b 	bl	80005f8 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
			mixerFM[3][1] * rateCtrl[X] +
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fb fd8f 	bl	800028c <__adddf3>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4614      	mov	r4, r2
 8004774:	461d      	mov	r5, r3
			mixerFM[3][3] * rateCtrl[Z]
 8004776:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800477a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800477e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8004782:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8004786:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800478a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800478e:	f7fb ff33 	bl	80005f8 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
			mixerFM[3][2] * rateCtrl[Y] +
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f7fb fd77 	bl	800028c <__adddf3>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
		w_cmd[3] = (
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <main+0x2cbc>)
 80047a8:	e9c3 0106 	strd	r0, r1, [r3, #24]
		);

		for (int i = 0; i < 4; i++) {
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80047b2:	e04e      	b.n	8004852 <main+0x2c82>
			w_cmd_clipped[i] = sqrt(w_cmd[i]);
 80047b4:	4a35      	ldr	r2, [pc, #212]	@ (800488c <main+0x2cbc>)
 80047b6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	ed93 7b00 	vldr	d7, [r3]
 80047c2:	eeb0 0a47 	vmov.f32	s0, s14
 80047c6:	eef0 0a67 	vmov.f32	s1, s15
 80047ca:	f01d fcbb 	bl	8022144 <sqrt>
 80047ce:	eeb0 7a40 	vmov.f32	s14, s0
 80047d2:	eef0 7a60 	vmov.f32	s15, s1
 80047d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004890 <main+0x2cc0>)
 80047d8:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	ed83 7b00 	vstr	d7, [r3]
			if (w_cmd_clipped[i] < minWMotor) {
 80047e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004890 <main+0x2cc0>)
 80047e6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047f2:	4b28      	ldr	r3, [pc, #160]	@ (8004894 <main+0x2cc4>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fc f970 	bl	8000adc <__aeabi_dcmplt>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <main+0x2c46>
				w_cmd_clipped[i] = minWMotor;
 8004802:	4b24      	ldr	r3, [pc, #144]	@ (8004894 <main+0x2cc4>)
 8004804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004808:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <main+0x2cc0>)
 800480a:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	e9c3 0100 	strd	r0, r1, [r3]
			};
			if (w_cmd_clipped[i] > maxWMotor) {
 8004816:	4a1e      	ldr	r2, [pc, #120]	@ (8004890 <main+0x2cc0>)
 8004818:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004824:	4b1c      	ldr	r3, [pc, #112]	@ (8004898 <main+0x2cc8>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f7fc f975 	bl	8000b18 <__aeabi_dcmpgt>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <main+0x2c78>
				w_cmd_clipped[i] = maxWMotor;
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <main+0x2cc8>)
 8004836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800483a:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <main+0x2cc0>)
 800483c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	e9c3 0100 	strd	r0, r1, [r3]
		for (int i = 0; i < 4; i++) {
 8004848:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 800484c:	3301      	adds	r3, #1
 800484e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8004852:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8004856:	2b03      	cmp	r3, #3
 8004858:	ddac      	ble.n	80047b4 <main+0x2be4>

		// PWM Motor control



		t += delta_t;
 800485a:	4b10      	ldr	r3, [pc, #64]	@ (800489c <main+0x2ccc>)
 800485c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004860:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <main+0x2cd0>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb fd11 	bl	800028c <__adddf3>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <main+0x2ccc>)
 8004874:	e9c3 0100 	strd	r0, r1, [r3]

		cnt++;
 8004878:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800487c:	3301      	adds	r3, #1
 800487e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
	{
 8004882:	f7fd baa1 	b.w	8001dc8 <main+0x1f8>
 8004886:	bf00      	nop
 8004888:	20001160 	.word	0x20001160
 800488c:	20001188 	.word	0x20001188
 8004890:	20001168 	.word	0x20001168
 8004894:	20000fb0 	.word	0x20000fb0
 8004898:	200000a8 	.word	0x200000a8
 800489c:	20000f90 	.word	0x20000f90
 80048a0:	20000010 	.word	0x20000010

080048a4 <setPwmDutyCycle>:
	}
}

void setPwmDutyCycle(TIM_HandleTypeDef *htim, uint32_t channel, float dutyCycle)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (dutyCycle < 0.4f) dutyCycle = 0.4f;
 80048b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048b6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004948 <setPwmDutyCycle+0xa4>
 80048ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d501      	bpl.n	80048c8 <setPwmDutyCycle+0x24>
 80048c4:	4b21      	ldr	r3, [pc, #132]	@ (800494c <setPwmDutyCycle+0xa8>)
 80048c6:	607b      	str	r3, [r7, #4]
	if (dutyCycle > 0.6f) dutyCycle = 0.6f;
 80048c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80048cc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004950 <setPwmDutyCycle+0xac>
 80048d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	dd01      	ble.n	80048de <setPwmDutyCycle+0x3a>
 80048da:	4b1e      	ldr	r3, [pc, #120]	@ (8004954 <setPwmDutyCycle+0xb0>)
 80048dc:	607b      	str	r3, [r7, #4]

	uint32_t period = __HAL_TIM_GET_AUTORELOAD(htim);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	617b      	str	r3, [r7, #20]
	uint32_t pulse = (uint32_t)(dutyCycle * period);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fc:	ee17 3a90 	vmov	r3, s15
 8004900:	613b      	str	r3, [r7, #16]

	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <setPwmDutyCycle+0x6e>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004910:	e013      	b.n	800493a <setPwmDutyCycle+0x96>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d104      	bne.n	8004922 <setPwmDutyCycle+0x7e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004920:	e00b      	b.n	800493a <setPwmDutyCycle+0x96>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d104      	bne.n	8004932 <setPwmDutyCycle+0x8e>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8004930:	e003      	b.n	800493a <setPwmDutyCycle+0x96>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	3ecccccd 	.word	0x3ecccccd
 800494c:	3ecccccd 	.word	0x3ecccccd
 8004950:	3f19999a 	.word	0x3f19999a
 8004954:	3f19999a 	.word	0x3f19999a

08004958 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b094      	sub	sp, #80	@ 0x50
 800495c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800495e:	f107 0320 	add.w	r3, r7, #32
 8004962:	2230      	movs	r2, #48	@ 0x30
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f01c fe92 	bl	8021690 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800496c:	f107 030c 	add.w	r3, r7, #12
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	4b29      	ldr	r3, [pc, #164]	@ (8004a28 <SystemClock_Config+0xd0>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	4a28      	ldr	r2, [pc, #160]	@ (8004a28 <SystemClock_Config+0xd0>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498a:	6413      	str	r3, [r2, #64]	@ 0x40
 800498c:	4b26      	ldr	r3, [pc, #152]	@ (8004a28 <SystemClock_Config+0xd0>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004998:	2300      	movs	r3, #0
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <SystemClock_Config+0xd4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a22      	ldr	r2, [pc, #136]	@ (8004a2c <SystemClock_Config+0xd4>)
 80049a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <SystemClock_Config+0xd4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80049b4:	230a      	movs	r3, #10
 80049b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049b8:	2301      	movs	r3, #1
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049bc:	2310      	movs	r3, #16
 80049be:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80049c0:	2301      	movs	r3, #1
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049c4:	2302      	movs	r3, #2
 80049c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049c8:	2300      	movs	r3, #0
 80049ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80049cc:	2310      	movs	r3, #16
 80049ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80049d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80049d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80049d6:	2304      	movs	r3, #4
 80049d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80049da:	2304      	movs	r3, #4
 80049dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049de:	f107 0320 	add.w	r3, r7, #32
 80049e2:	4618      	mov	r0, r3
 80049e4:	f00e fb34 	bl	8013050 <HAL_RCC_OscConfig>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80049ee:	f000 fb45 	bl	800507c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049f2:	230f      	movs	r3, #15
 80049f4:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049f6:	2302      	movs	r3, #2
 80049f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a02:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f00e fd96 	bl	8013540 <HAL_RCC_ClockConfig>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8004a1a:	f000 fb2f 	bl	800507c <Error_Handler>
	}
}
 8004a1e:	bf00      	nop
 8004a20:	3750      	adds	r7, #80	@ 0x50
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40007000 	.word	0x40007000

08004a30 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <MX_GPIO_Init+0x9c>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	4a23      	ldr	r2, [pc, #140]	@ (8004acc <MX_GPIO_Init+0x9c>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a46:	4b21      	ldr	r3, [pc, #132]	@ (8004acc <MX_GPIO_Init+0x9c>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	4b1d      	ldr	r3, [pc, #116]	@ (8004acc <MX_GPIO_Init+0x9c>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004acc <MX_GPIO_Init+0x9c>)
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a62:	4b1a      	ldr	r3, [pc, #104]	@ (8004acc <MX_GPIO_Init+0x9c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]

	// Configure GPIO pins : PA8 PA9 (TIM1 CH1 and CH2)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6e:	f107 030c 	add.w	r3, r7, #12
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	609a      	str	r2, [r3, #8]
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	4619      	mov	r1, r3
 8004a9a:	480d      	ldr	r0, [pc, #52]	@ (8004ad0 <MX_GPIO_Init+0xa0>)
 8004a9c:	f00a fe54 	bl	800f748 <HAL_GPIO_Init>

	// Configure GPIO pins : PB8 PB9 (TIM2 CH1 and CH2)
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004aa0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	4619      	mov	r1, r3
 8004abc:	4805      	ldr	r0, [pc, #20]	@ (8004ad4 <MX_GPIO_Init+0xa4>)
 8004abe:	f00a fe43 	bl	800f748 <HAL_GPIO_Init>
}
 8004ac2:	bf00      	nop
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	40020400 	.word	0x40020400

08004ad8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	@ 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
	if(htim->Instance==TIM1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a25      	ldr	r2, [pc, #148]	@ (8004b8c <HAL_TIM_MspPostInit+0xb4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d11f      	bne.n	8004b3a <HAL_TIM_MspPostInit+0x62>
	{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	4b24      	ldr	r3, [pc, #144]	@ (8004b90 <HAL_TIM_MspPostInit+0xb8>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4a23      	ldr	r2, [pc, #140]	@ (8004b90 <HAL_TIM_MspPostInit+0xb8>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0a:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <HAL_TIM_MspPostInit+0xb8>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
	/**TIM1 GPIO Configuration
	PA8     ------> TIM1_CH1
	PA9     ------> TIM1_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b24:	2300      	movs	r3, #0
 8004b26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	f107 0314 	add.w	r3, r7, #20
 8004b30:	4619      	mov	r1, r3
 8004b32:	4818      	ldr	r0, [pc, #96]	@ (8004b94 <HAL_TIM_MspPostInit+0xbc>)
 8004b34:	f00a fe08 	bl	800f748 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8004b38:	e023      	b.n	8004b82 <HAL_TIM_MspPostInit+0xaa>
	else if(htim->Instance==TIM2)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b42:	d11e      	bne.n	8004b82 <HAL_TIM_MspPostInit+0xaa>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <HAL_TIM_MspPostInit+0xb8>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	4a10      	ldr	r2, [pc, #64]	@ (8004b90 <HAL_TIM_MspPostInit+0xb8>)
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b54:	4b0e      	ldr	r3, [pc, #56]	@ (8004b90 <HAL_TIM_MspPostInit+0xb8>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b66:	2302      	movs	r3, #2
 8004b68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b72:	2301      	movs	r3, #1
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b76:	f107 0314 	add.w	r3, r7, #20
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4806      	ldr	r0, [pc, #24]	@ (8004b98 <HAL_TIM_MspPostInit+0xc0>)
 8004b7e:	f00a fde3 	bl	800f748 <HAL_GPIO_Init>
}
 8004b82:	bf00      	nop
 8004b84:	3728      	adds	r7, #40	@ 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40020000 	.word	0x40020000
 8004b98:	40020400 	.word	0x40020400

08004b9c <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	@ 0x38
 8004ba0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb0:	f107 0320 	add.w	r3, r7, #32
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	611a      	str	r2, [r3, #16]
 8004bc8:	615a      	str	r2, [r3, #20]
 8004bca:	619a      	str	r2, [r3, #24]

	htim1.Instance = TIM1;
 8004bcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004bce:	4a37      	ldr	r2, [pc, #220]	@ (8004cac <MX_TIM1_Init+0x110>)
 8004bd0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 8004bd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004bd4:	2253      	movs	r2, #83	@ 0x53
 8004bd6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bd8:	4b33      	ldr	r3, [pc, #204]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8004bde:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004be0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004be4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004be6:	4b30      	ldr	r3, [pc, #192]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004bec:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004bf8:	482b      	ldr	r0, [pc, #172]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004bfa:	f00f fabd 	bl	8014178 <HAL_TIM_Base_Init>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <MX_TIM1_Init+0x6c>
	{
	Error_Handler();
 8004c04:	f000 fa3a 	bl	800507c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c12:	4619      	mov	r1, r3
 8004c14:	4824      	ldr	r0, [pc, #144]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004c16:	f00f fe4b 	bl	80148b0 <HAL_TIM_ConfigClockSource>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_TIM1_Init+0x88>
	{
	Error_Handler();
 8004c20:	f000 fa2c 	bl	800507c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c24:	4820      	ldr	r0, [pc, #128]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004c26:	f00f fb88 	bl	801433a <HAL_TIM_PWM_Init>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_TIM1_Init+0x98>
	{
	Error_Handler();
 8004c30:	f000 fa24 	bl	800507c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c3c:	f107 0320 	add.w	r3, r7, #32
 8004c40:	4619      	mov	r1, r3
 8004c42:	4819      	ldr	r0, [pc, #100]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004c44:	f010 f9fc 	bl	8015040 <HAL_TIMEx_MasterConfigSynchronization>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_TIM1_Init+0xb6>
	{
	Error_Handler();
 8004c4e:	f000 fa15 	bl	800507c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c52:	2360      	movs	r3, #96	@ 0x60
 8004c54:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	2200      	movs	r2, #0
 8004c72:	4619      	mov	r1, r3
 8004c74:	480c      	ldr	r0, [pc, #48]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004c76:	f00f fd59 	bl	801472c <HAL_TIM_PWM_ConfigChannel>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_TIM1_Init+0xe8>
	{
	Error_Handler();
 8004c80:	f000 f9fc 	bl	800507c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	2204      	movs	r2, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4807      	ldr	r0, [pc, #28]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004c8c:	f00f fd4e 	bl	801472c <HAL_TIM_PWM_ConfigChannel>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_TIM1_Init+0xfe>
	{
	Error_Handler();
 8004c96:	f000 f9f1 	bl	800507c <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 8004c9a:	4803      	ldr	r0, [pc, #12]	@ (8004ca8 <MX_TIM1_Init+0x10c>)
 8004c9c:	f7ff ff1c 	bl	8004ad8 <HAL_TIM_MspPostInit>
}
 8004ca0:	bf00      	nop
 8004ca2:	3738      	adds	r7, #56	@ 0x38
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000e18 	.word	0x20000e18
 8004cac:	40010000 	.word	0x40010000

08004cb0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	@ 0x38
 8004cb4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
 8004cc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc4:	f107 0320 	add.w	r3, r7, #32
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
 8004cdc:	615a      	str	r2, [r3, #20]
 8004cde:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 8004ce0:	4b32      	ldr	r3, [pc, #200]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004ce2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ce6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 83;
 8004ce8:	4b30      	ldr	r3, [pc, #192]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004cea:	2253      	movs	r2, #83	@ 0x53
 8004cec:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cee:	4b2f      	ldr	r3, [pc, #188]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004cf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004cfa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d02:	4b2a      	ldr	r3, [pc, #168]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d08:	4828      	ldr	r0, [pc, #160]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d0a:	f00f fa35 	bl	8014178 <HAL_TIM_Base_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_TIM2_Init+0x68>
	{
	Error_Handler();
 8004d14:	f000 f9b2 	bl	800507c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d22:	4619      	mov	r1, r3
 8004d24:	4821      	ldr	r0, [pc, #132]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d26:	f00f fdc3 	bl	80148b0 <HAL_TIM_ConfigClockSource>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <MX_TIM2_Init+0x84>
	{
	Error_Handler();
 8004d30:	f000 f9a4 	bl	800507c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d34:	481d      	ldr	r0, [pc, #116]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d36:	f00f fb00 	bl	801433a <HAL_TIM_PWM_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM2_Init+0x94>
	{
	Error_Handler();
 8004d40:	f000 f99c 	bl	800507c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d4c:	f107 0320 	add.w	r3, r7, #32
 8004d50:	4619      	mov	r1, r3
 8004d52:	4816      	ldr	r0, [pc, #88]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d54:	f010 f974 	bl	8015040 <HAL_TIMEx_MasterConfigSynchronization>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_TIM2_Init+0xb2>
	{
	Error_Handler();
 8004d5e:	f000 f98d 	bl	800507c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d62:	2360      	movs	r3, #96	@ 0x60
 8004d64:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d72:	1d3b      	adds	r3, r7, #4
 8004d74:	2200      	movs	r2, #0
 8004d76:	4619      	mov	r1, r3
 8004d78:	480c      	ldr	r0, [pc, #48]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d7a:	f00f fcd7 	bl	801472c <HAL_TIM_PWM_ConfigChannel>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <MX_TIM2_Init+0xd8>
	{
	Error_Handler();
 8004d84:	f000 f97a 	bl	800507c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4807      	ldr	r0, [pc, #28]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004d90:	f00f fccc 	bl	801472c <HAL_TIM_PWM_ConfigChannel>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_TIM2_Init+0xee>
	{
	Error_Handler();
 8004d9a:	f000 f96f 	bl	800507c <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim2);
 8004d9e:	4803      	ldr	r0, [pc, #12]	@ (8004dac <MX_TIM2_Init+0xfc>)
 8004da0:	f7ff fe9a 	bl	8004ad8 <HAL_TIM_MspPostInit>
}
 8004da4:	bf00      	nop
 8004da6:	3738      	adds	r7, #56	@ 0x38
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000e60 	.word	0x20000e60

08004db0 <MX_CRC_Init>:

static void MX_CRC_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	hcrc.Instance = CRC;
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <MX_CRC_Init+0x20>)
 8004db6:	4a07      	ldr	r2, [pc, #28]	@ (8004dd4 <MX_CRC_Init+0x24>)
 8004db8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004dba:	4805      	ldr	r0, [pc, #20]	@ (8004dd0 <MX_CRC_Init+0x20>)
 8004dbc:	f00a f845 	bl	800ee4a <HAL_CRC_Init>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8004dc6:	f000 f959 	bl	800507c <Error_Handler>
	}
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000df0 	.word	0x20000df0
 8004dd4:	40023000 	.word	0x40023000

08004dd8 <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004dec:	2300      	movs	r3, #0
 8004dee:	603b      	str	r3, [r7, #0]

  hrtc.Instance = RTC;
 8004df0:	4b24      	ldr	r3, [pc, #144]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004df2:	4a25      	ldr	r2, [pc, #148]	@ (8004e88 <MX_RTC_Init+0xb0>)
 8004df4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004df6:	4b23      	ldr	r3, [pc, #140]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004dfc:	4b21      	ldr	r3, [pc, #132]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004dfe:	227f      	movs	r2, #127	@ 0x7f
 8004e00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e04:	22ff      	movs	r2, #255	@ 0xff
 8004e06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004e08:	4b1e      	ldr	r3, [pc, #120]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004e14:	4b1b      	ldr	r3, [pc, #108]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e1a:	481a      	ldr	r0, [pc, #104]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e1c:	f00e fea0 	bl	8013b60 <HAL_RTC_Init>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004e26:	f000 f929 	bl	800507c <Error_Handler>
  }

  sTime.Hours = 0x0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	2201      	movs	r2, #1
 8004e42:	4619      	mov	r1, r3
 8004e44:	480f      	ldr	r0, [pc, #60]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e46:	f00e ff0e 	bl	8013c66 <HAL_RTC_SetTime>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004e50:	f000 f914 	bl	800507c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004e54:	2301      	movs	r3, #1
 8004e56:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004e64:	463b      	mov	r3, r7
 8004e66:	2201      	movs	r2, #1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4806      	ldr	r0, [pc, #24]	@ (8004e84 <MX_RTC_Init+0xac>)
 8004e6c:	f00e fff3 	bl	8013e56 <HAL_RTC_SetDate>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004e76:	f000 f901 	bl	800507c <Error_Handler>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000df8 	.word	0x20000df8
 8004e88:	40002800 	.word	0x40002800

08004e8c <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
 8004e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <MX_TIM3_Init+0x98>)
 8004eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004eae:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004ebc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ec8:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ece:	4814      	ldr	r0, [pc, #80]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004ed0:	f00f f952 	bl	8014178 <HAL_TIM_Base_Init>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004eda:	f000 f8cf 	bl	800507c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480d      	ldr	r0, [pc, #52]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004eec:	f00f fce0 	bl	80148b0 <HAL_TIM_ConfigClockSource>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004ef6:	f000 f8c1 	bl	800507c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f02:	463b      	mov	r3, r7
 8004f04:	4619      	mov	r1, r3
 8004f06:	4806      	ldr	r0, [pc, #24]	@ (8004f20 <MX_TIM3_Init+0x94>)
 8004f08:	f010 f89a 	bl	8015040 <HAL_TIMEx_MasterConfigSynchronization>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004f12:	f000 f8b3 	bl	800507c <Error_Handler>
  }
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000ea8 	.word	0x20000ea8
 8004f24:	40000400 	.word	0x40000400

08004f28 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	4b4f      	ldr	r3, [pc, #316]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	4a4e      	ldr	r2, [pc, #312]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	4b48      	ldr	r3, [pc, #288]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	4a47      	ldr	r2, [pc, #284]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f5a:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	4b41      	ldr	r3, [pc, #260]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	4a40      	ldr	r2, [pc, #256]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f76:	4b3e      	ldr	r3, [pc, #248]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b3a      	ldr	r3, [pc, #232]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	4a39      	ldr	r2, [pc, #228]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f92:	4b37      	ldr	r3, [pc, #220]	@ (8005070 <MX_DMA_Init+0x148>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	4b33      	ldr	r3, [pc, #204]	@ (8005070 <MX_DMA_Init+0x148>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa6:	4a32      	ldr	r2, [pc, #200]	@ (8005070 <MX_DMA_Init+0x148>)
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fae:	4b30      	ldr	r3, [pc, #192]	@ (8005070 <MX_DMA_Init+0x148>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	2010      	movs	r0, #16
 8004fc0:	f009 feff 	bl	800edc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004fc4:	2010      	movs	r0, #16
 8004fc6:	f009 ff18 	bl	800edfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	2028      	movs	r0, #40	@ 0x28
 8004fd0:	f009 fef7 	bl	800edc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fd4:	2028      	movs	r0, #40	@ 0x28
 8004fd6:	f009 ff10 	bl	800edfa <HAL_NVIC_EnableIRQ>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <MX_DMA_Init+0x148>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	4a23      	ldr	r2, [pc, #140]	@ (8005070 <MX_DMA_Init+0x148>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fea:	4b21      	ldr	r3, [pc, #132]	@ (8005070 <MX_DMA_Init+0x148>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8005070 <MX_DMA_Init+0x148>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <MX_DMA_Init+0x148>)
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6313      	str	r3, [r2, #48]	@ 0x30
 8005006:	4b1a      	ldr	r3, [pc, #104]	@ (8005070 <MX_DMA_Init+0x148>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pins : PA8 PA9 (TIM1 CH1 and CH2)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005012:	f107 031c 	add.w	r3, r7, #28
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	609a      	str	r2, [r3, #8]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005022:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005028:	2302      	movs	r3, #2
 800502a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005034:	2301      	movs	r3, #1
 8005036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	f107 031c 	add.w	r3, r7, #28
 800503c:	4619      	mov	r1, r3
 800503e:	480d      	ldr	r0, [pc, #52]	@ (8005074 <MX_DMA_Init+0x14c>)
 8005040:	f00a fb82 	bl	800f748 <HAL_GPIO_Init>

  // Configure GPIO pins : PB8 PB9 (TIM2 CH1 and CH2)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005044:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504a:	2302      	movs	r3, #2
 800504c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005052:	2300      	movs	r3, #0
 8005054:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005056:	2301      	movs	r3, #1
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505a:	f107 031c 	add.w	r3, r7, #28
 800505e:	4619      	mov	r1, r3
 8005060:	4805      	ldr	r0, [pc, #20]	@ (8005078 <MX_DMA_Init+0x150>)
 8005062:	f00a fb71 	bl	800f748 <HAL_GPIO_Init>
}
 8005066:	bf00      	nop
 8005068:	3730      	adds	r7, #48	@ 0x30
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	40020000 	.word	0x40020000
 8005078:	40020400 	.word	0x40020400

0800507c <Error_Handler>:
//  HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), 10);
//}
/* USER CODE END 4 */

void Error_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005080:	b672      	cpsid	i
}
 8005082:	bf00      	nop
  __disable_irq();
  while (1)
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <Error_Handler+0x8>

08005088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <HAL_MspInit+0x4c>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	4a0f      	ldr	r2, [pc, #60]	@ (80050d4 <HAL_MspInit+0x4c>)
 8005098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800509c:	6453      	str	r3, [r2, #68]	@ 0x44
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <HAL_MspInit+0x4c>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	603b      	str	r3, [r7, #0]
 80050ae:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_MspInit+0x4c>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <HAL_MspInit+0x4c>)
 80050b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ba:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_MspInit+0x4c>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050c6:	2007      	movs	r0, #7
 80050c8:	f009 fe70 	bl	800edac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800

080050d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <HAL_CRC_MspInit+0x3c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10d      	bne.n	8005106 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <HAL_CRC_MspInit+0x40>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <HAL_CRC_MspInit+0x40>)
 80050f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050fa:	4b07      	ldr	r3, [pc, #28]	@ (8005118 <HAL_CRC_MspInit+0x40>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40023000 	.word	0x40023000
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	611a      	str	r2, [r3, #16]
 8005134:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a0c      	ldr	r2, [pc, #48]	@ (800516c <HAL_RTC_MspInit+0x50>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d111      	bne.n	8005164 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005140:	2302      	movs	r3, #2
 8005142:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005148:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f00e fc16 	bl	8013980 <HAL_RCCEx_PeriphCLKConfig>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800515a:	f7ff ff8f 	bl	800507c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800515e:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <HAL_RTC_MspInit+0x54>)
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8005164:	bf00      	nop
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40002800 	.word	0x40002800
 8005170:	42470e3c 	.word	0x42470e3c

08005174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0e      	ldr	r2, [pc, #56]	@ (80051bc <HAL_TIM_Base_MspInit+0x48>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d115      	bne.n	80051b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <HAL_TIM_Base_MspInit+0x4c>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005190:	f043 0302 	orr.w	r3, r3, #2
 8005194:	6413      	str	r3, [r2, #64]	@ 0x40
 8005196:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <HAL_TIM_Base_MspInit+0x4c>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2100      	movs	r1, #0
 80051a6:	201d      	movs	r0, #29
 80051a8:	f009 fe0b 	bl	800edc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80051ac:	201d      	movs	r0, #29
 80051ae:	f009 fe24 	bl	800edfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40023800 	.word	0x40023800

080051c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <NMI_Handler+0x4>

080051cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <HardFault_Handler+0x4>

080051d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <MemManage_Handler+0x4>

080051dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <BusFault_Handler+0x4>

080051e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <UsageFault_Handler+0x4>

080051ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800521a:	f009 fc8f 	bl	800eb3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005228:	4802      	ldr	r0, [pc, #8]	@ (8005234 <DMA1_Stream5_IRQHandler+0x10>)
 800522a:	f009 ffc3 	bl	800f1b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200016b8 	.word	0x200016b8

08005238 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800523c:	4802      	ldr	r0, [pc, #8]	@ (8005248 <TIM3_IRQHandler+0x10>)
 800523e:	f00f f985 	bl	801454c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000ea8 	.word	0x20000ea8

0800524c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005250:	4802      	ldr	r0, [pc, #8]	@ (800525c <I2C1_EV_IRQHandler+0x10>)
 8005252:	f00b fd0b 	bl	8010c6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200013cc 	.word	0x200013cc

08005260 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005264:	4802      	ldr	r0, [pc, #8]	@ (8005270 <I2C1_ER_IRQHandler+0x10>)
 8005266:	f00b fe54 	bl	8010f12 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200013cc 	.word	0x200013cc

08005274 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005278:	4802      	ldr	r0, [pc, #8]	@ (8005284 <USART2_IRQHandler+0x10>)
 800527a:	f010 f86d 	bl	8015358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20001670 	.word	0x20001670

08005288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800528c:	4802      	ldr	r0, [pc, #8]	@ (8005298 <EXTI15_10_IRQHandler+0x10>)
 800528e:	f00a fa37 	bl	800f700 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200002d4 	.word	0x200002d4

0800529c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80052a6:	4b13      	ldr	r3, [pc, #76]	@ (80052f4 <BSP_I2C1_Init+0x58>)
 80052a8:	4a13      	ldr	r2, [pc, #76]	@ (80052f8 <BSP_I2C1_Init+0x5c>)
 80052aa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80052ac:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <BSP_I2C1_Init+0x60>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	4912      	ldr	r1, [pc, #72]	@ (80052fc <BSP_I2C1_Init+0x60>)
 80052b4:	600a      	str	r2, [r1, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d117      	bne.n	80052ea <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80052ba:	480e      	ldr	r0, [pc, #56]	@ (80052f4 <BSP_I2C1_Init+0x58>)
 80052bc:	f00b ff30 	bl	8011120 <HAL_I2C_GetState>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d111      	bne.n	80052ea <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80052c6:	480b      	ldr	r0, [pc, #44]	@ (80052f4 <BSP_I2C1_Init+0x58>)
 80052c8:	f000 f936 	bl	8005538 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80052d2:	4808      	ldr	r0, [pc, #32]	@ (80052f4 <BSP_I2C1_Init+0x58>)
 80052d4:	f000 f8fc 	bl	80054d0 <MX_I2C1_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80052de:	f06f 0307 	mvn.w	r3, #7
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	e001      	b.n	80052ea <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80052ea:	687b      	ldr	r3, [r7, #4]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	200013cc 	.word	0x200013cc
 80052f8:	40005400 	.word	0x40005400
 80052fc:	20001420 	.word	0x20001420

08005300 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800530a:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <BSP_I2C1_DeInit+0x48>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d014      	beq.n	800533c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <BSP_I2C1_DeInit+0x48>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	4a0b      	ldr	r2, [pc, #44]	@ (8005348 <BSP_I2C1_DeInit+0x48>)
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <BSP_I2C1_DeInit+0x48>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8005324:	4809      	ldr	r0, [pc, #36]	@ (800534c <BSP_I2C1_DeInit+0x4c>)
 8005326:	f000 f961 	bl	80055ec <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800532a:	4808      	ldr	r0, [pc, #32]	@ (800534c <BSP_I2C1_DeInit+0x4c>)
 800532c:	f00a fdea 	bl	800ff04 <HAL_I2C_DeInit>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005336:	f06f 0307 	mvn.w	r3, #7
 800533a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800533c:	687b      	ldr	r3, [r7, #4]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20001420 	.word	0x20001420
 800534c:	200013cc 	.word	0x200013cc

08005350 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	@ 0x28
 8005354:	af04      	add	r7, sp, #16
 8005356:	60ba      	str	r2, [r7, #8]
 8005358:	461a      	mov	r2, r3
 800535a:	4603      	mov	r3, r0
 800535c:	81fb      	strh	r3, [r7, #14]
 800535e:	460b      	mov	r3, r1
 8005360:	81bb      	strh	r3, [r7, #12]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800536a:	89ba      	ldrh	r2, [r7, #12]
 800536c:	89f9      	ldrh	r1, [r7, #14]
 800536e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2301      	movs	r3, #1
 800537e:	480c      	ldr	r0, [pc, #48]	@ (80053b0 <BSP_I2C1_WriteReg+0x60>)
 8005380:	f00b f948 	bl	8010614 <HAL_I2C_Mem_Write>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800538a:	4809      	ldr	r0, [pc, #36]	@ (80053b0 <BSP_I2C1_WriteReg+0x60>)
 800538c:	f00b fed6 	bl	801113c <HAL_I2C_GetError>
 8005390:	4603      	mov	r3, r0
 8005392:	2b04      	cmp	r3, #4
 8005394:	d103      	bne.n	800539e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005396:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e002      	b.n	80053a4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800539e:	f06f 0303 	mvn.w	r3, #3
 80053a2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80053a4:	697b      	ldr	r3, [r7, #20]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200013cc 	.word	0x200013cc

080053b4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	60ba      	str	r2, [r7, #8]
 80053bc:	461a      	mov	r2, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	81fb      	strh	r3, [r7, #14]
 80053c2:	460b      	mov	r3, r1
 80053c4:	81bb      	strh	r3, [r7, #12]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80053ce:	89ba      	ldrh	r2, [r7, #12]
 80053d0:	89f9      	ldrh	r1, [r7, #14]
 80053d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053d6:	9302      	str	r3, [sp, #8]
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2301      	movs	r3, #1
 80053e2:	480c      	ldr	r0, [pc, #48]	@ (8005414 <BSP_I2C1_ReadReg+0x60>)
 80053e4:	f00b fa10 	bl	8010808 <HAL_I2C_Mem_Read>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80053ee:	4809      	ldr	r0, [pc, #36]	@ (8005414 <BSP_I2C1_ReadReg+0x60>)
 80053f0:	f00b fea4 	bl	801113c <HAL_I2C_GetError>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d103      	bne.n	8005402 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80053fa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e002      	b.n	8005408 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005402:	f06f 0303 	mvn.w	r3, #3
 8005406:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005408:	697b      	ldr	r3, [r7, #20]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200013cc 	.word	0x200013cc

08005418 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af02      	add	r7, sp, #8
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	80fb      	strh	r3, [r7, #6]
 8005424:	4613      	mov	r3, r2
 8005426:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800542c:	88bb      	ldrh	r3, [r7, #4]
 800542e:	88f9      	ldrh	r1, [r7, #6]
 8005430:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005434:	9200      	str	r2, [sp, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	480b      	ldr	r0, [pc, #44]	@ (8005468 <BSP_I2C1_Send+0x50>)
 800543a:	f00a fdbb 	bl	800ffb4 <HAL_I2C_Master_Transmit>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8005444:	4808      	ldr	r0, [pc, #32]	@ (8005468 <BSP_I2C1_Send+0x50>)
 8005446:	f00b fe79 	bl	801113c <HAL_I2C_GetError>
 800544a:	4603      	mov	r3, r0
 800544c:	2b04      	cmp	r3, #4
 800544e:	d003      	beq.n	8005458 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005450:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e002      	b.n	800545e <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005458:	f06f 0303 	mvn.w	r3, #3
 800545c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800545e:	68fb      	ldr	r3, [r7, #12]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	200013cc 	.word	0x200013cc

0800546c <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	4603      	mov	r3, r0
 8005474:	6039      	str	r1, [r7, #0]
 8005476:	80fb      	strh	r3, [r7, #6]
 8005478:	4613      	mov	r3, r2
 800547a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005480:	88bb      	ldrh	r3, [r7, #4]
 8005482:	88f9      	ldrh	r1, [r7, #6]
 8005484:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005488:	9200      	str	r2, [sp, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	480b      	ldr	r0, [pc, #44]	@ (80054bc <BSP_I2C1_Recv+0x50>)
 800548e:	f00a fe8f 	bl	80101b0 <HAL_I2C_Master_Receive>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8005498:	4808      	ldr	r0, [pc, #32]	@ (80054bc <BSP_I2C1_Recv+0x50>)
 800549a:	f00b fe4f 	bl	801113c <HAL_I2C_GetError>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d003      	beq.n	80054ac <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80054a4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e002      	b.n	80054b2 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80054ac:	f06f 0303 	mvn.w	r3, #3
 80054b0:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	200013cc 	.word	0x200013cc

080054c0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80054c4:	f009 fb4e 	bl	800eb64 <HAL_GetTick>
 80054c8:	4603      	mov	r3, r0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a14      	ldr	r2, [pc, #80]	@ (8005530 <MX_I2C1_Init+0x60>)
 80054e0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <MX_I2C1_Init+0x64>)
 80054e6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054fa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f00a fbb1 	bl	800fc7c <HAL_I2C_Init>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40005400 	.word	0x40005400
 8005534:	00061a80 	.word	0x00061a80

08005538 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	@ 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	4b27      	ldr	r3, [pc, #156]	@ (80055e4 <I2C1_MspInit+0xac>)
 8005546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005548:	4a26      	ldr	r2, [pc, #152]	@ (80055e4 <I2C1_MspInit+0xac>)
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005550:	4b24      	ldr	r3, [pc, #144]	@ (80055e4 <I2C1_MspInit+0xac>)
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800555c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005562:	2312      	movs	r3, #18
 8005564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800556a:	2303      	movs	r3, #3
 800556c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800556e:	2304      	movs	r3, #4
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005572:	f107 0314 	add.w	r3, r7, #20
 8005576:	4619      	mov	r1, r3
 8005578:	481b      	ldr	r0, [pc, #108]	@ (80055e8 <I2C1_MspInit+0xb0>)
 800557a:	f00a f8e5 	bl	800f748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800557e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005584:	2312      	movs	r3, #18
 8005586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558c:	2303      	movs	r3, #3
 800558e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005590:	2304      	movs	r3, #4
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	4619      	mov	r1, r3
 800559a:	4813      	ldr	r0, [pc, #76]	@ (80055e8 <I2C1_MspInit+0xb0>)
 800559c:	f00a f8d4 	bl	800f748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <I2C1_MspInit+0xac>)
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	4a0e      	ldr	r2, [pc, #56]	@ (80055e4 <I2C1_MspInit+0xac>)
 80055aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <I2C1_MspInit+0xac>)
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80055bc:	2200      	movs	r2, #0
 80055be:	2100      	movs	r1, #0
 80055c0:	201f      	movs	r0, #31
 80055c2:	f009 fbfe 	bl	800edc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80055c6:	201f      	movs	r0, #31
 80055c8:	f009 fc17 	bl	800edfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2100      	movs	r1, #0
 80055d0:	2020      	movs	r0, #32
 80055d2:	f009 fbf6 	bl	800edc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80055d6:	2020      	movs	r0, #32
 80055d8:	f009 fc0f 	bl	800edfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80055dc:	bf00      	nop
 80055de:	3728      	adds	r7, #40	@ 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40020400 	.word	0x40020400

080055ec <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80055f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <I2C1_MspDeInit+0x3c>)
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005628 <I2C1_MspDeInit+0x3c>)
 80055fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055fe:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8005600:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005604:	4809      	ldr	r0, [pc, #36]	@ (800562c <I2C1_MspDeInit+0x40>)
 8005606:	f00a fa23 	bl	800fa50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800560a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800560e:	4807      	ldr	r0, [pc, #28]	@ (800562c <I2C1_MspDeInit+0x40>)
 8005610:	f00a fa1e 	bl	800fa50 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005614:	201f      	movs	r0, #31
 8005616:	f009 fbfe 	bl	800ee16 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800561a:	2020      	movs	r0, #32
 800561c:	f009 fbfb 	bl	800ee16 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40023800 	.word	0x40023800
 800562c:	40020400 	.word	0x40020400

08005630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005638:	4a14      	ldr	r2, [pc, #80]	@ (800568c <_sbrk+0x5c>)
 800563a:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <_sbrk+0x60>)
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005644:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <_sbrk+0x64>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800564c:	4b11      	ldr	r3, [pc, #68]	@ (8005694 <_sbrk+0x64>)
 800564e:	4a12      	ldr	r2, [pc, #72]	@ (8005698 <_sbrk+0x68>)
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005652:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <_sbrk+0x64>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d207      	bcs.n	8005670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005660:	f01c f81e 	bl	80216a0 <__errno>
 8005664:	4603      	mov	r3, r0
 8005666:	220c      	movs	r2, #12
 8005668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800566e:	e009      	b.n	8005684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005670:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <_sbrk+0x64>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005676:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <_sbrk+0x64>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	4a05      	ldr	r2, [pc, #20]	@ (8005694 <_sbrk+0x64>)
 8005680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20020000 	.word	0x20020000
 8005690:	00008000 	.word	0x00008000
 8005694:	20001424 	.word	0x20001424
 8005698:	20002620 	.word	0x20002620

0800569c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056a0:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <SystemInit+0x20>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <SystemInit+0x20>)
 80056a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80056c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056c4:	f7ff ffea 	bl	800569c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056c8:	480c      	ldr	r0, [pc, #48]	@ (80056fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80056ca:	490d      	ldr	r1, [pc, #52]	@ (8005700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80056cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80056ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056d0:	e002      	b.n	80056d8 <LoopCopyDataInit>

080056d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056d6:	3304      	adds	r3, #4

080056d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056dc:	d3f9      	bcc.n	80056d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056de:	4a0a      	ldr	r2, [pc, #40]	@ (8005708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80056e0:	4c0a      	ldr	r4, [pc, #40]	@ (800570c <LoopFillZerobss+0x22>)
  movs r3, #0
 80056e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056e4:	e001      	b.n	80056ea <LoopFillZerobss>

080056e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056e8:	3204      	adds	r2, #4

080056ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056ec:	d3fb      	bcc.n	80056e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056ee:	f01b ffdd 	bl	80216ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056f2:	f7fc fa6d 	bl	8001bd0 <main>
  bx  lr    
 80056f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005700:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8005704:	08026f60 	.word	0x08026f60
  ldr r2, =_sbss
 8005708:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800570c:	20002620 	.word	0x20002620

08005710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005710:	e7fe      	b.n	8005710 <ADC_IRQHandler>
	...

08005714 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e084      	b.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	7b1a      	ldrb	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a34      	ldr	r2, [pc, #208]	@ (8005844 <LIS2DUXS12_RegisterBusIO+0x130>)
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a33      	ldr	r2, [pc, #204]	@ (8005848 <LIS2DUXS12_RegisterBusIO+0x134>)
 800577a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e04f      	b.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4798      	blx	r3
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e045      	b.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d11c      	bne.n	80057f0 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d13c      	bne.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8e6 	bl	8005992 <LIS2DUXS12_ExitDeepPowerDownSPI>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057d0:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 80057d2:	2350      	movs	r3, #80	@ 0x50
 80057d4:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	461a      	mov	r2, r3
 80057da:	2110      	movs	r1, #16
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fbe8 	bl	8005fb2 <LIS2DUXS12_Write_Reg>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d028      	beq.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e024      	b.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10e      	bne.n	8005816 <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11b      	bne.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8c5 	bl	8005992 <LIS2DUXS12_ExitDeepPowerDownSPI>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 800580e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e011      	b.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f89d 	bl	8005968 <LIS2DUXS12_ExitDeepPowerDownI2C>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 8005834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005838:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08006429 	.word	0x08006429
 8005848:	0800645f 	.word	0x0800645f

0800584c <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d01f      	beq.n	800589c <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3320      	adds	r3, #32
 8005860:	f107 0214 	add.w	r2, r7, #20
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fa72 	bl	8006d50 <lis2duxs12_i3c_configure_get>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005876:	e052      	b.n	800591e <LIS2DUXS12_Init+0xd2>
    }
    val.asf_on = PROPERTY_ENABLE;
 8005878:	7d7b      	ldrb	r3, [r7, #21]
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3320      	adds	r3, #32
 8005884:	f107 0214 	add.w	r2, r7, #20
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f001 fa28 	bl	8006ce0 <lis2duxs12_i3c_configure_set>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800589a:	e040      	b.n	800591e <LIS2DUXS12_Init+0xd2>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3320      	adds	r3, #32
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fe98 	bl	80065d8 <lis2duxs12_init_set>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <LIS2DUXS12_Init+0x68>
  {
    return LIS2DUXS12_ERROR;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058b2:	e034      	b.n	800591e <LIS2DUXS12_Init+0xd2>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f103 0020 	add.w	r0, r3, #32
 80058c4:	f107 030c 	add.w	r3, r7, #12
 80058c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058cc:	f001 fa7f 	bl	8006dce <lis2duxs12_fifo_mode_set>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <LIS2DUXS12_Init+0x90>
  {
    return LIS2DUXS12_ERROR;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058da:	e020      	b.n	800591e <LIS2DUXS12_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a12      	ldr	r2, [pc, #72]	@ (8005928 <LIS2DUXS12_Init+0xdc>)
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default ultra low power (disabled). */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	2100      	movs	r1, #0
 80058f0:	460a      	mov	r2, r1
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	460a      	mov	r2, r1
 80058f6:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3320      	adds	r3, #32
 80058fc:	f107 0208 	add.w	r2, r7, #8
 8005900:	4611      	mov	r1, r2
 8005902:	4618      	mov	r0, r3
 8005904:	f000 ff10 	bl	8006728 <lis2duxs12_mode_set>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <LIS2DUXS12_Init+0xc8>
  {
    return LIS2DUXS12_ERROR;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005912:	e004      	b.n	800591e <LIS2DUXS12_Init+0xd2>
  }

  pObj->is_initialized = 1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	42c80000 	.word	0x42c80000

0800592c <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8ad 	bl	8005a94 <LIS2DUXS12_ACC_Disable>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005944:	e00c      	b.n	8005960 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset ultra low power to default value (disabled). */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode*/
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3320      	adds	r3, #32
 8005974:	f107 020f 	add.w	r2, r7, #15
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fe1a 	bl	80065b4 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	2019      	movs	r0, #25
 8005986:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3320      	adds	r3, #32
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 f8da 	bl	8006b58 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	2019      	movs	r0, #25
 80059aa:	4798      	blx	r3

  return LIS2DUXS12_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3320      	adds	r3, #32
 80059c4:	f107 020f 	add.w	r2, r7, #15
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fdf2 	bl	80065b4 <lis2duxs12_device_id_get>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059da:	e003      	b.n	80059e4 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 80059dc:	7bfa      	ldrb	r2, [r7, #15]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2200      	movs	r2, #0
 8005a00:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2200      	movs	r2, #0
 8005a06:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2210      	movs	r2, #16
 8005a18:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4a06      	ldr	r2, [pc, #24]	@ (8005a44 <LIS2DUXS12_GetCapabilities+0x58>)
 8005a2c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	44480000 	.word	0x44480000

08005a48 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e016      	b.n	8005a8c <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fab9 	bl	8005fe8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a80:	e004      	b.n	8005a8c <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e046      	b.n	8005b38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8005aaa:	f107 030c 	add.w	r3, r7, #12
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f893 	bl	8005bdc <LIS2DUXS12_ACC_GetOutputDataRate>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ac0:	e03a      	b.n	8005b38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8005ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005b40 <LIS2DUXS12_ACC_Disable+0xac>
 8005aca:	eef4 7a47 	vcmp.f32	s15, s14
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	d10e      	bne.n	8005af2 <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8005ad4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8005b44 <LIS2DUXS12_ACC_Disable+0xb0>
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f94b 	bl	8005d74 <LIS2DUXS12_ACC_SetOutputDataRate>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ae8:	e026      	b.n	8005b38 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	2003      	movs	r0, #3
 8005af0:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3320      	adds	r3, #32
 8005af6:	f107 0208 	add.w	r2, r7, #8
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 ff33 	bl	8006968 <lis2duxs12_mode_get>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b0c:	e014      	b.n	8005b38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3320      	adds	r3, #32
 8005b16:	f107 0208 	add.w	r2, r7, #8
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fe03 	bl	8006728 <lis2duxs12_mode_set>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b2c:	e004      	b.n	8005b38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	44480000 	.word	0x44480000
 8005b44:	43c80000 	.word	0x43c80000

08005b48 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3320      	adds	r3, #32
 8005b5a:	f107 0208 	add.w	r2, r7, #8
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 ff01 	bl	8006968 <lis2duxs12_mode_get>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8005b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b70:	e026      	b.n	8005bc0 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8005b72:	7a7b      	ldrb	r3, [r7, #9]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d81b      	bhi.n	8005bb0 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b91 	.word	0x08005b91
 8005b84:	08005b99 	.word	0x08005b99
 8005b88:	08005ba1 	.word	0x08005ba1
 8005b8c:	08005ba9 	.word	0x08005ba9
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8005b94:	601a      	str	r2, [r3, #0]
      break;
 8005b96:	e012      	b.n	8005bbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8005b9c:	601a      	str	r2, [r3, #0]
      break;
 8005b9e:	e00e      	b.n	8005bbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8005bd0 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8005ba4:	601a      	str	r2, [r3, #0]
      break;
 8005ba6:	e00a      	b.n	8005bbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd4 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8005bac:	601a      	str	r2, [r3, #0]
      break;
 8005bae:	e006      	b.n	8005bbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4a09      	ldr	r2, [pc, #36]	@ (8005bd8 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 8005bb4:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bba:	60fb      	str	r3, [r7, #12]
      break;
 8005bbc:	bf00      	nop
  }

  return ret;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	3d79db23 	.word	0x3d79db23
 8005bcc:	3df9db23 	.word	0x3df9db23
 8005bd0:	3e79db23 	.word	0x3e79db23
 8005bd4:	3ef9db23 	.word	0x3ef9db23
 8005bd8:	bf800000 	.word	0xbf800000

08005bdc <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3320      	adds	r3, #32
 8005bee:	f107 0208 	add.w	r2, r7, #8
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 feb7 	bl	8006968 <lis2duxs12_mode_get>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c04:	e09b      	b.n	8005d3e <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8005c06:	7a3b      	ldrb	r3, [r7, #8]
 8005c08:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c0a:	f200 8090 	bhi.w	8005d2e <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8005c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005cd5 	.word	0x08005cd5
 8005c18:	08005cdf 	.word	0x08005cdf
 8005c1c:	08005ce7 	.word	0x08005ce7
 8005c20:	08005cff 	.word	0x08005cff
 8005c24:	08005cef 	.word	0x08005cef
 8005c28:	08005cf7 	.word	0x08005cf7
 8005c2c:	08005cff 	.word	0x08005cff
 8005c30:	08005d07 	.word	0x08005d07
 8005c34:	08005d0f 	.word	0x08005d0f
 8005c38:	08005d17 	.word	0x08005d17
 8005c3c:	08005d1f 	.word	0x08005d1f
 8005c40:	08005d27 	.word	0x08005d27
 8005c44:	08005d2f 	.word	0x08005d2f
 8005c48:	08005d2f 	.word	0x08005d2f
 8005c4c:	08005d2f 	.word	0x08005d2f
 8005c50:	08005d2f 	.word	0x08005d2f
 8005c54:	08005d2f 	.word	0x08005d2f
 8005c58:	08005d2f 	.word	0x08005d2f
 8005c5c:	08005d2f 	.word	0x08005d2f
 8005c60:	08005d2f 	.word	0x08005d2f
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005cf7 	.word	0x08005cf7
 8005c6c:	08005cff 	.word	0x08005cff
 8005c70:	08005d07 	.word	0x08005d07
 8005c74:	08005d0f 	.word	0x08005d0f
 8005c78:	08005d17 	.word	0x08005d17
 8005c7c:	08005d1f 	.word	0x08005d1f
 8005c80:	08005d27 	.word	0x08005d27
 8005c84:	08005d2f 	.word	0x08005d2f
 8005c88:	08005d2f 	.word	0x08005d2f
 8005c8c:	08005d2f 	.word	0x08005d2f
 8005c90:	08005d2f 	.word	0x08005d2f
 8005c94:	08005d2f 	.word	0x08005d2f
 8005c98:	08005d2f 	.word	0x08005d2f
 8005c9c:	08005d2f 	.word	0x08005d2f
 8005ca0:	08005d2f 	.word	0x08005d2f
 8005ca4:	08005d2f 	.word	0x08005d2f
 8005ca8:	08005d2f 	.word	0x08005d2f
 8005cac:	08005d2f 	.word	0x08005d2f
 8005cb0:	08005d2f 	.word	0x08005d2f
 8005cb4:	08005d2f 	.word	0x08005d2f
 8005cb8:	08005d2f 	.word	0x08005d2f
 8005cbc:	08005d2f 	.word	0x08005d2f
 8005cc0:	08005d2f 	.word	0x08005d2f
 8005cc4:	08005d2f 	.word	0x08005d2f
 8005cc8:	08005d2f 	.word	0x08005d2f
 8005ccc:	08005cd5 	.word	0x08005cd5
 8005cd0:	08005cd5 	.word	0x08005cd5
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
      break;
 8005cdc:	e02e      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	@ (8005d48 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8005ce2:	601a      	str	r2, [r3, #0]
      break;
 8005ce4:	e02a      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8005cea:	601a      	str	r2, [r3, #0]
      break;
 8005cec:	e026      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8005cf2:	601a      	str	r2, [r3, #0]
      break;
 8005cf4:	e022      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	4a16      	ldr	r2, [pc, #88]	@ (8005d54 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8005cfa:	601a      	str	r2, [r3, #0]
      break;
 8005cfc:	e01e      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8005d02:	601a      	str	r2, [r3, #0]
      break;
 8005d04:	e01a      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	4a14      	ldr	r2, [pc, #80]	@ (8005d5c <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8005d0a:	601a      	str	r2, [r3, #0]
      break;
 8005d0c:	e016      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	4a13      	ldr	r2, [pc, #76]	@ (8005d60 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8005d12:	601a      	str	r2, [r3, #0]
      break;
 8005d14:	e012      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	4a12      	ldr	r2, [pc, #72]	@ (8005d64 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8005d1a:	601a      	str	r2, [r3, #0]
      break;
 8005d1c:	e00e      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	4a11      	ldr	r2, [pc, #68]	@ (8005d68 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8005d22:	601a      	str	r2, [r3, #0]
      break;
 8005d24:	e00a      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	4a10      	ldr	r2, [pc, #64]	@ (8005d6c <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8005d2a:	601a      	str	r2, [r3, #0]
      break;
 8005d2c:	e006      	b.n	8005d3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	@ (8005d70 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8005d32:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d38:	60fb      	str	r3, [r7, #12]
      break;
 8005d3a:	bf00      	nop
  }

  return ret;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	3fcccccd 	.word	0x3fcccccd
 8005d4c:	40400000 	.word	0x40400000
 8005d50:	40c00000 	.word	0x40c00000
 8005d54:	41480000 	.word	0x41480000
 8005d58:	41c80000 	.word	0x41c80000
 8005d5c:	42480000 	.word	0x42480000
 8005d60:	42c80000 	.word	0x42c80000
 8005d64:	43480000 	.word	0x43480000
 8005d68:	43c80000 	.word	0x43c80000
 8005d6c:	44480000 	.word	0x44480000
 8005d70:	bf800000 	.word	0xbf800000

08005d74 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use Ultra Low Power disabled */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_LOW_POWER);
 8005d80:	2101      	movs	r1, #1
 8005d82:	ed97 0a00 	vldr	s0, [r7]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f805 	bl	8005d96 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005da2:	460b      	mov	r3, r1
 8005da4:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d108      	bne.n	8005dc2 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	4619      	mov	r1, r3
 8005db4:	ed97 0a02 	vldr	s0, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f915 	bl	8005fe8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	e007      	b.n	8005dd2 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	ed97 0a02 	vldr	s0, [r7, #8]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fa8a 	bl	80062e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8005dd0:	4603      	mov	r3, r0
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3320      	adds	r3, #32
 8005dee:	f107 0208 	add.w	r2, r7, #8
 8005df2:	4611      	mov	r1, r2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fdb7 	bl	8006968 <lis2duxs12_mode_get>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e04:	e027      	b.n	8005e56 <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8005e06:	7a7b      	ldrb	r3, [r7, #9]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d81b      	bhi.n	8005e44 <LIS2DUXS12_ACC_GetFullScale+0x68>
 8005e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e14 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e25 	.word	0x08005e25
 8005e18:	08005e2d 	.word	0x08005e2d
 8005e1c:	08005e35 	.word	0x08005e35
 8005e20:	08005e3d 	.word	0x08005e3d
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2202      	movs	r2, #2
 8005e28:	601a      	str	r2, [r3, #0]
      break;
 8005e2a:	e013      	b.n	8005e54 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	601a      	str	r2, [r3, #0]
      break;
 8005e32:	e00f      	b.n	8005e54 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2208      	movs	r2, #8
 8005e38:	601a      	str	r2, [r3, #0]
      break;
 8005e3a:	e00b      	b.n	8005e54 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2210      	movs	r2, #16
 8005e40:	601a      	str	r2, [r3, #0]
      break;
 8005e42:	e007      	b.n	8005e54 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e4a:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e50:	60fb      	str	r3, [r7, #12]
      break;
 8005e52:	bf00      	nop
  }

  return ret;
 8005e54:	68fb      	ldr	r3, [r7, #12]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3320      	adds	r3, #32
 8005e6e:	f107 020c 	add.w	r2, r7, #12
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fd77 	bl	8006968 <lis2duxs12_mode_get>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e84:	e01f      	b.n	8005ec6 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	dd0b      	ble.n	8005ea4 <LIS2DUXS12_ACC_SetFullScale+0x44>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	dd06      	ble.n	8005ea0 <LIS2DUXS12_ACC_SetFullScale+0x40>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	dc01      	bgt.n	8005e9c <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e004      	b.n	8005ea6 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e002      	b.n	8005ea6 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8005ea4:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 8005ea6:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3320      	adds	r3, #32
 8005eac:	f107 020c 	add.w	r2, r7, #12
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fc38 	bl	8006728 <lis2duxs12_mode_set>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ec2:	e000      	b.n	8005ec6 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b088      	sub	sp, #32
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3320      	adds	r3, #32
 8005edc:	f107 021c 	add.w	r2, r7, #28
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fd40 	bl	8006968 <lis2duxs12_mode_get>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 8005eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ef2:	e01b      	b.n	8005f2c <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3320      	adds	r3, #32
 8005ef8:	f107 0208 	add.w	r2, r7, #8
 8005efc:	f107 011c 	add.w	r1, r7, #28
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fe41 	bl	8006b88 <lis2duxs12_xl_data_get>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f10:	e00c      	b.n	8005f2c <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 8005f12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 8005f1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 8005f22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3320      	adds	r3, #32
 8005f42:	f107 021c 	add.w	r2, r7, #28
 8005f46:	4611      	mov	r1, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fd0d 	bl	8006968 <lis2duxs12_mode_get>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f58:	e027      	b.n	8005faa <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3320      	adds	r3, #32
 8005f5e:	f107 0208 	add.w	r2, r7, #8
 8005f62:	f107 011c 	add.w	r1, r7, #28
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fe0e 	bl	8006b88 <lis2duxs12_xl_data_get>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f76:	e018      	b.n	8005faa <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8005f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f80:	ee17 2a90 	vmov	r2, s15
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8005f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f90:	ee17 2a90 	vmov	r2, s15
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8005f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fa0:	ee17 2a90 	vmov	r2, s15
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f103 0020 	add.w	r0, r3, #32
 8005fc8:	1cba      	adds	r2, r7, #2
 8005fca:	78f9      	ldrb	r1, [r7, #3]
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f000 fa79 	bl	80064c4 <lis2duxs12_write_reg>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fdc:	e000      	b.n	8005fe0 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3320      	adds	r3, #32
 8005ffc:	f107 0214 	add.w	r2, r7, #20
 8006000:	4611      	mov	r1, r2
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fcb0 	bl	8006968 <lis2duxs12_mode_get>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 800600e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006012:	e142      	b.n	800629a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d118      	bne.n	800604c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 800601a:	edd7 7a02 	vldr	s15, [r7, #8]
 800601e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80062a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 8006022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602a:	d801      	bhi.n	8006030 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 800602c:	2301      	movs	r3, #1
 800602e:	e00b      	b.n	8006048 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8006030:	edd7 7a02 	vldr	s15, [r7, #8]
 8006034:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8006038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800603c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006040:	d801      	bhi.n	8006046 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8006042:	2302      	movs	r3, #2
 8006044:	e000      	b.n	8006048 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8006046:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 8006048:	753b      	strb	r3, [r7, #20]
 800604a:	e0a4      	b.n	8006196 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d14f      	bne.n	80060f2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 8006052:	edd7 7a02 	vldr	s15, [r7, #8]
 8006056:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800605a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006062:	d801      	bhi.n	8006068 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 8006064:	2304      	movs	r3, #4
 8006066:	e042      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8006068:	edd7 7a02 	vldr	s15, [r7, #8]
 800606c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006078:	d801      	bhi.n	800607e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 800607a:	2305      	movs	r3, #5
 800607c:	e037      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800607e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006082:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8006086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608e:	d801      	bhi.n	8006094 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006090:	2306      	movs	r3, #6
 8006092:	e02c      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8006094:	edd7 7a02 	vldr	s15, [r7, #8]
 8006098:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80062a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 800609c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a4:	d801      	bhi.n	80060aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 80060a6:	2307      	movs	r3, #7
 80060a8:	e021      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80060aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80060ae:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80062ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80060b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ba:	d801      	bhi.n	80060c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80060bc:	2308      	movs	r3, #8
 80060be:	e016      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80060c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80060c4:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80062b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80060c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d0:	d801      	bhi.n	80060d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 80060d2:	2309      	movs	r3, #9
 80060d4:	e00b      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80060d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80060da:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80062b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80060de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e6:	d801      	bhi.n	80060ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 80060e8:	230a      	movs	r3, #10
 80060ea:	e000      	b.n	80060ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80060ec:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 80060ee:	753b      	strb	r3, [r7, #20]
 80060f0:	e051      	b.n	8006196 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d14e      	bne.n	8006196 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 80060f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80060fc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8006100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006108:	d801      	bhi.n	800610e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800610a:	2314      	movs	r3, #20
 800610c:	e042      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800610e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006112:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800611a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611e:	d801      	bhi.n	8006124 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8006120:	2315      	movs	r3, #21
 8006122:	e037      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8006124:	edd7 7a02 	vldr	s15, [r7, #8]
 8006128:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800612c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	d801      	bhi.n	800613a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8006136:	2316      	movs	r3, #22
 8006138:	e02c      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800613a:	edd7 7a02 	vldr	s15, [r7, #8]
 800613e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80062a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8006142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614a:	d801      	bhi.n	8006150 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 800614c:	2317      	movs	r3, #23
 800614e:	e021      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8006150:	edd7 7a02 	vldr	s15, [r7, #8]
 8006154:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80062ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8006158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006160:	d801      	bhi.n	8006166 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8006162:	2318      	movs	r3, #24
 8006164:	e016      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8006166:	edd7 7a02 	vldr	s15, [r7, #8]
 800616a:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80062b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 800616e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006176:	d801      	bhi.n	800617c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8006178:	2319      	movs	r3, #25
 800617a:	e00b      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800617c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006180:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80062b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8006184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618c:	d801      	bhi.n	8006192 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800618e:	231a      	movs	r3, #26
 8006190:	e000      	b.n	8006194 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8006192:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8006194:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3320      	adds	r3, #32
 800619a:	f107 0214 	add.w	r2, r7, #20
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fac1 	bl	8006728 <lis2duxs12_mode_set>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061b0:	e073      	b.n	800629a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80061b2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d05b      	beq.n	8006270 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 80061b8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d056      	beq.n	800626c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 80061be:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d051      	beq.n	8006268 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 80061c4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80061c6:	2b14      	cmp	r3, #20
 80061c8:	d04c      	beq.n	8006264 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 80061ca:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	d047      	beq.n	8006260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 80061d0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80061d2:	2b15      	cmp	r3, #21
 80061d4:	d042      	beq.n	800625c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 80061d6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d03d      	beq.n	8006258 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 80061dc:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d038      	beq.n	8006254 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 80061e2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80061e4:	2b16      	cmp	r3, #22
 80061e6:	d033      	beq.n	8006250 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 80061e8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80061ea:	2b07      	cmp	r3, #7
 80061ec:	d02e      	beq.n	800624c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 80061ee:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80061f0:	2b17      	cmp	r3, #23
 80061f2:	d029      	beq.n	8006248 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 80061f4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d024      	beq.n	8006244 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 80061fa:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80061fc:	2b18      	cmp	r3, #24
 80061fe:	d01f      	beq.n	8006240 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8006200:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8006202:	2b09      	cmp	r3, #9
 8006204:	d01a      	beq.n	800623c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8006206:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8006208:	2b19      	cmp	r3, #25
 800620a:	d015      	beq.n	8006238 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 800620c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 800620e:	2b0a      	cmp	r3, #10
 8006210:	d010      	beq.n	8006234 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 8006212:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8006214:	2b1a      	cmp	r3, #26
 8006216:	d00b      	beq.n	8006230 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 8006218:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 800621a:	2b0b      	cmp	r3, #11
 800621c:	d006      	beq.n	800622c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 800621e:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 8006220:	2b1b      	cmp	r3, #27
 8006222:	d101      	bne.n	8006228 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 8006224:	4b24      	ldr	r3, [pc, #144]	@ (80062b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8006226:	e024      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8006228:	4b24      	ldr	r3, [pc, #144]	@ (80062bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 800622a:	e022      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 800622c:	4b22      	ldr	r3, [pc, #136]	@ (80062b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 800622e:	e020      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8006230:	4b23      	ldr	r3, [pc, #140]	@ (80062c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8006232:	e01e      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8006234:	4b22      	ldr	r3, [pc, #136]	@ (80062c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8006236:	e01c      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8006238:	4b22      	ldr	r3, [pc, #136]	@ (80062c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800623a:	e01a      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800623c:	4b21      	ldr	r3, [pc, #132]	@ (80062c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800623e:	e018      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8006240:	4b21      	ldr	r3, [pc, #132]	@ (80062c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8006242:	e016      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8006244:	4b20      	ldr	r3, [pc, #128]	@ (80062c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8006246:	e014      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8006248:	4b20      	ldr	r3, [pc, #128]	@ (80062cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800624a:	e012      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 800624c:	4b1f      	ldr	r3, [pc, #124]	@ (80062cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800624e:	e010      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8006250:	4b1f      	ldr	r3, [pc, #124]	@ (80062d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8006252:	e00e      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8006254:	4b1e      	ldr	r3, [pc, #120]	@ (80062d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8006256:	e00c      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8006258:	4b1d      	ldr	r3, [pc, #116]	@ (80062d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800625a:	e00a      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800625c:	4b1d      	ldr	r3, [pc, #116]	@ (80062d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800625e:	e008      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8006260:	4b1c      	ldr	r3, [pc, #112]	@ (80062d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8006262:	e006      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8006264:	4b1c      	ldr	r3, [pc, #112]	@ (80062d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 8006266:	e004      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8006268:	4b1b      	ldr	r3, [pc, #108]	@ (80062d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 800626a:	e002      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 800626c:	4b1b      	ldr	r3, [pc, #108]	@ (80062dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 800626e:	e000      	b.n	8006272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8006270:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800627c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006280:	eef4 7a47 	vcmp.f32	s15, s14
 8006284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006288:	d102      	bne.n	8006290 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 800628a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800628e:	e004      	b.n	800629a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	79fa      	ldrb	r2, [r7, #7]
 8006294:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	3fcccccd 	.word	0x3fcccccd
 80062a8:	42480000 	.word	0x42480000
 80062ac:	42c80000 	.word	0x42c80000
 80062b0:	43480000 	.word	0x43480000
 80062b4:	43c80000 	.word	0x43c80000
 80062b8:	44480000 	.word	0x44480000
 80062bc:	bf800000 	.word	0xbf800000
 80062c0:	43c80000 	.word	0x43c80000
 80062c4:	43480000 	.word	0x43480000
 80062c8:	42c80000 	.word	0x42c80000
 80062cc:	42480000 	.word	0x42480000
 80062d0:	41c80000 	.word	0x41c80000
 80062d4:	41480000 	.word	0x41480000
 80062d8:	40c00000 	.word	0x40c00000
 80062dc:	40400000 	.word	0x40400000
 80062e0:	3fcccccd 	.word	0x3fcccccd

080062e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80062f0:	460b      	mov	r3, r1
 80062f2:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11a      	bne.n	8006330 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 80062fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80062fe:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	d802      	bhi.n	8006312 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 800630c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006310:	e00b      	b.n	800632a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 8006312:	edd7 7a02 	vldr	s15, [r7, #8]
 8006316:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800631a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800631e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006322:	d801      	bhi.n	8006328 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8006324:	4b33      	ldr	r3, [pc, #204]	@ (80063f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 8006326:	e000      	b.n	800632a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8006328:	4b33      	ldr	r3, [pc, #204]	@ (80063f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	6353      	str	r3, [r2, #52]	@ 0x34
 800632e:	e055      	b.n	80063dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d002      	beq.n	800633c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d14f      	bne.n	80063dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 800633c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006340:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8006344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634c:	d801      	bhi.n	8006352 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 800634e:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8006350:	e042      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 8006352:	edd7 7a02 	vldr	s15, [r7, #8]
 8006356:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800635a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	d801      	bhi.n	8006368 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 8006364:	4b26      	ldr	r3, [pc, #152]	@ (8006400 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8006366:	e037      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 8006368:	edd7 7a02 	vldr	s15, [r7, #8]
 800636c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8006370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006378:	d801      	bhi.n	800637e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 800637a:	4b1f      	ldr	r3, [pc, #124]	@ (80063f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800637c:	e02c      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 800637e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006382:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8006404 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8006386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638e:	d801      	bhi.n	8006394 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8006390:	4b1d      	ldr	r3, [pc, #116]	@ (8006408 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8006392:	e021      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8006394:	edd7 7a02 	vldr	s15, [r7, #8]
 8006398:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800640c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 800639c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	d801      	bhi.n	80063aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 80063a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006410 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 80063a8:	e016      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 80063aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80063ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006414 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 80063b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	d801      	bhi.n	80063c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 80063bc:	4b16      	ldr	r3, [pc, #88]	@ (8006418 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 80063be:	e00b      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 80063c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80063c4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800641c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 80063c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d0:	d801      	bhi.n	80063d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 80063d2:	4b13      	ldr	r3, [pc, #76]	@ (8006420 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 80063d4:	e000      	b.n	80063d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80063d6:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	79fa      	ldrb	r2, [r7, #7]
 80063e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40400000 	.word	0x40400000
 80063f8:	41c80000 	.word	0x41c80000
 80063fc:	40c00000 	.word	0x40c00000
 8006400:	41480000 	.word	0x41480000
 8006404:	42480000 	.word	0x42480000
 8006408:	42480000 	.word	0x42480000
 800640c:	42c80000 	.word	0x42c80000
 8006410:	42c80000 	.word	0x42c80000
 8006414:	43480000 	.word	0x43480000
 8006418:	43480000 	.word	0x43480000
 800641c:	43c80000 	.word	0x43c80000
 8006420:	43c80000 	.word	0x43c80000
 8006424:	44480000 	.word	0x44480000

08006428 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	461a      	mov	r2, r3
 8006434:	460b      	mov	r3, r1
 8006436:	72fb      	strb	r3, [r7, #11]
 8006438:	4613      	mov	r3, r2
 800643a:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	695c      	ldr	r4, [r3, #20]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	7b1b      	ldrb	r3, [r3, #12]
 8006448:	4618      	mov	r0, r3
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	b299      	uxth	r1, r3
 800644e:	893b      	ldrh	r3, [r7, #8]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	47a0      	blx	r4
 8006454:	4603      	mov	r3, r0
}
 8006456:	4618      	mov	r0, r3
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	bd90      	pop	{r4, r7, pc}

0800645e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800645e:	b590      	push	{r4, r7, lr}
 8006460:	b087      	sub	sp, #28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	461a      	mov	r2, r3
 800646a:	460b      	mov	r3, r1
 800646c:	72fb      	strb	r3, [r7, #11]
 800646e:	4613      	mov	r3, r2
 8006470:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	691c      	ldr	r4, [r3, #16]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	7b1b      	ldrb	r3, [r3, #12]
 800647e:	4618      	mov	r0, r3
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	b299      	uxth	r1, r3
 8006484:	893b      	ldrh	r3, [r7, #8]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	47a0      	blx	r4
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	bd90      	pop	{r4, r7, pc}

08006494 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                                   uint16_t len)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	460b      	mov	r3, r1
 80064a2:	72fb      	strb	r3, [r7, #11]
 80064a4:	4613      	mov	r3, r2
 80064a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685c      	ldr	r4, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68d8      	ldr	r0, [r3, #12]
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	7af9      	ldrb	r1, [r7, #11]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	47a0      	blx	r4
 80064b8:	6178      	str	r0, [r7, #20]
  return ret;
 80064ba:	697b      	ldr	r3, [r7, #20]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd90      	pop	{r4, r7, pc}

080064c4 <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                                    uint16_t len)
{
 80064c4:	b590      	push	{r4, r7, lr}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	461a      	mov	r2, r3
 80064d0:	460b      	mov	r3, r1
 80064d2:	72fb      	strb	r3, [r7, #11]
 80064d4:	4613      	mov	r3, r2
 80064d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681c      	ldr	r4, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68d8      	ldr	r0, [r3, #12]
 80064e0:	893b      	ldrh	r3, [r7, #8]
 80064e2:	7af9      	ldrb	r1, [r7, #11]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	47a0      	blx	r4
 80064e8:	6178      	str	r0, [r7, #20]
  return ret;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd90      	pop	{r4, r7, pc}

080064f4 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 80064fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006520 <lis2duxs12_from_fs2g_to_mg+0x2c>
 800650e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006512:	eeb0 0a67 	vmov.f32	s0, s15
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	3d79db23 	.word	0x3d79db23

08006524 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 800652e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800653a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006550 <lis2duxs12_from_fs4g_to_mg+0x2c>
 800653e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006542:	eeb0 0a67 	vmov.f32	s0, s15
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	3df9db23 	.word	0x3df9db23

08006554 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 800655e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800656a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006580 <lis2duxs12_from_fs8g_to_mg+0x2c>
 800656e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006572:	eeb0 0a67 	vmov.f32	s0, s15
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	3e79db23 	.word	0x3e79db23

08006584 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 800658e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800659a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80065b0 <lis2duxs12_from_fs16g_to_mg+0x2c>
 800659e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80065a2:	eeb0 0a67 	vmov.f32	s0, s15
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	3ef9db23 	.word	0x3ef9db23

080065b4 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 80065be:	2301      	movs	r3, #1
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	210f      	movs	r1, #15
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff65 	bl	8006494 <lis2duxs12_read_reg>
 80065ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 80065e8:	f107 0210 	add.w	r2, r7, #16
 80065ec:	2301      	movs	r3, #1
 80065ee:	2110      	movs	r1, #16
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ff4f 	bl	8006494 <lis2duxs12_read_reg>
 80065f6:	4602      	mov	r2, r0
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	4413      	add	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 80065fe:	f107 020c 	add.w	r2, r7, #12
 8006602:	2301      	movs	r3, #1
 8006604:	2113      	movs	r1, #19
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ff44 	bl	8006494 <lis2duxs12_read_reg>
 800660c:	4602      	mov	r2, r0
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
  switch (val) {
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	2b03      	cmp	r3, #3
 8006618:	d870      	bhi.n	80066fc <lis2duxs12_init_set+0x124>
 800661a:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <lis2duxs12_init_set+0x48>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006671 	.word	0x08006671
 8006624:	08006631 	.word	0x08006631
 8006628:	08006651 	.word	0x08006651
 800662c:	080066b7 	.word	0x080066b7
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8006630:	7b3b      	ldrb	r3, [r7, #12]
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	733b      	strb	r3, [r7, #12]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 8006638:	f107 020c 	add.w	r2, r7, #12
 800663c:	2301      	movs	r3, #1
 800663e:	2113      	movs	r1, #19
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ff3f 	bl	80064c4 <lis2duxs12_write_reg>
 8006646:	4602      	mov	r2, r0
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	4413      	add	r3, r2
 800664c:	617b      	str	r3, [r7, #20]
      break;
 800664e:	e065      	b.n	800671c <lis2duxs12_init_set+0x144>
    case LIS2DUXS12_RESET:

      ctrl1.sw_reset = PROPERTY_ENABLE;
 8006650:	7c3b      	ldrb	r3, [r7, #16]
 8006652:	f043 0320 	orr.w	r3, r3, #32
 8006656:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006658:	f107 0210 	add.w	r2, r7, #16
 800665c:	2301      	movs	r3, #1
 800665e:	2110      	movs	r1, #16
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ff2f 	bl	80064c4 <lis2duxs12_write_reg>
 8006666:	4602      	mov	r2, r0
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	4413      	add	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
      break;
 800666e:	e055      	b.n	800671c <lis2duxs12_init_set+0x144>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8006670:	7b3b      	ldrb	r3, [r7, #12]
 8006672:	f36f 1304 	bfc	r3, #4, #1
 8006676:	733b      	strb	r3, [r7, #12]
      ctrl4.bdu = PROPERTY_ENABLE;
 8006678:	7b3b      	ldrb	r3, [r7, #12]
 800667a:	f043 0320 	orr.w	r3, r3, #32
 800667e:	733b      	strb	r3, [r7, #12]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8006680:	7c3b      	ldrb	r3, [r7, #16]
 8006682:	f043 0310 	orr.w	r3, r3, #16
 8006686:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 8006688:	f107 020c 	add.w	r2, r7, #12
 800668c:	2301      	movs	r3, #1
 800668e:	2113      	movs	r1, #19
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff ff17 	bl	80064c4 <lis2duxs12_write_reg>
 8006696:	4602      	mov	r2, r0
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4413      	add	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 800669e:	f107 0210 	add.w	r2, r7, #16
 80066a2:	2301      	movs	r3, #1
 80066a4:	2110      	movs	r1, #16
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff ff0c 	bl	80064c4 <lis2duxs12_write_reg>
 80066ac:	4602      	mov	r2, r0
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
      break;
 80066b4:	e032      	b.n	800671c <lis2duxs12_init_set+0x144>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 80066b6:	7b3b      	ldrb	r3, [r7, #12]
 80066b8:	f043 0310 	orr.w	r3, r3, #16
 80066bc:	733b      	strb	r3, [r7, #12]
      ctrl4.bdu = PROPERTY_ENABLE;
 80066be:	7b3b      	ldrb	r3, [r7, #12]
 80066c0:	f043 0320 	orr.w	r3, r3, #32
 80066c4:	733b      	strb	r3, [r7, #12]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 80066c6:	7c3b      	ldrb	r3, [r7, #16]
 80066c8:	f043 0310 	orr.w	r3, r3, #16
 80066cc:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 80066ce:	f107 020c 	add.w	r2, r7, #12
 80066d2:	2301      	movs	r3, #1
 80066d4:	2113      	movs	r1, #19
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fef4 	bl	80064c4 <lis2duxs12_write_reg>
 80066dc:	4602      	mov	r2, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 80066e4:	f107 0210 	add.w	r2, r7, #16
 80066e8:	2301      	movs	r3, #1
 80066ea:	2110      	movs	r1, #16
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fee9 	bl	80064c4 <lis2duxs12_write_reg>
 80066f2:	4602      	mov	r2, r0
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	4413      	add	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
      break;
 80066fa:	e00f      	b.n	800671c <lis2duxs12_init_set+0x144>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 80066fc:	7c3b      	ldrb	r3, [r7, #16]
 80066fe:	f043 0320 	orr.w	r3, r3, #32
 8006702:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006704:	f107 0210 	add.w	r2, r7, #16
 8006708:	2301      	movs	r3, #1
 800670a:	2110      	movs	r1, #16
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fed9 	bl	80064c4 <lis2duxs12_write_reg>
 8006712:	4602      	mov	r2, r0
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	4413      	add	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
      break;
 800671a:	bf00      	nop
  }
  return ret;
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop

08006728 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t*)&ctrl5, 1);
 8006732:	f107 020c 	add.w	r2, r7, #12
 8006736:	2301      	movs	r3, #1
 8006738:	2114      	movs	r1, #20
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff feaa 	bl	8006494 <lis2duxs12_read_reg>
 8006740:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	b2da      	uxtb	r2, r3
 800674c:	7b3b      	ldrb	r3, [r7, #12]
 800674e:	f362 1307 	bfi	r3, r2, #4, #4
 8006752:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	b2da      	uxtb	r2, r3
 800675e:	7b3b      	ldrb	r3, [r7, #12]
 8006760:	f362 0301 	bfi	r3, r2, #0, #2
 8006764:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr) {
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b2f      	cmp	r3, #47	@ 0x2f
 800676c:	f200 80c8 	bhi.w	8006900 <lis2duxs12_mode_set+0x1d8>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <lis2duxs12_mode_set+0x50>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	08006839 	.word	0x08006839
 800677c:	08006839 	.word	0x08006839
 8006780:	08006839 	.word	0x08006839
 8006784:	08006839 	.word	0x08006839
 8006788:	08006843 	.word	0x08006843
 800678c:	08006867 	.word	0x08006867
 8006790:	0800689b 	.word	0x0800689b
 8006794:	080068e3 	.word	0x080068e3
 8006798:	080068e3 	.word	0x080068e3
 800679c:	080068e3 	.word	0x080068e3
 80067a0:	080068e3 	.word	0x080068e3
 80067a4:	080068e3 	.word	0x080068e3
 80067a8:	08006901 	.word	0x08006901
 80067ac:	08006901 	.word	0x08006901
 80067b0:	08006901 	.word	0x08006901
 80067b4:	08006901 	.word	0x08006901
 80067b8:	08006901 	.word	0x08006901
 80067bc:	08006901 	.word	0x08006901
 80067c0:	08006901 	.word	0x08006901
 80067c4:	08006901 	.word	0x08006901
 80067c8:	080068e3 	.word	0x080068e3
 80067cc:	080068e3 	.word	0x080068e3
 80067d0:	080068e3 	.word	0x080068e3
 80067d4:	080068e3 	.word	0x080068e3
 80067d8:	080068e3 	.word	0x080068e3
 80067dc:	080068e3 	.word	0x080068e3
 80067e0:	080068e3 	.word	0x080068e3
 80067e4:	080068e3 	.word	0x080068e3
 80067e8:	08006901 	.word	0x08006901
 80067ec:	08006901 	.word	0x08006901
 80067f0:	08006901 	.word	0x08006901
 80067f4:	08006901 	.word	0x08006901
 80067f8:	08006901 	.word	0x08006901
 80067fc:	08006901 	.word	0x08006901
 8006800:	08006901 	.word	0x08006901
 8006804:	08006901 	.word	0x08006901
 8006808:	08006901 	.word	0x08006901
 800680c:	08006901 	.word	0x08006901
 8006810:	08006901 	.word	0x08006901
 8006814:	08006901 	.word	0x08006901
 8006818:	08006901 	.word	0x08006901
 800681c:	08006901 	.word	0x08006901
 8006820:	08006901 	.word	0x08006901
 8006824:	08006901 	.word	0x08006901
 8006828:	08006901 	.word	0x08006901
 800682c:	08006901 	.word	0x08006901
 8006830:	080068e3 	.word	0x080068e3
 8006834:	080068e3 	.word	0x080068e3
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8006838:	7b3b      	ldrb	r3, [r7, #12]
 800683a:	f36f 0383 	bfc	r3, #2, #2
 800683e:	733b      	strb	r3, [r7, #12]
      break;
 8006840:	e05e      	b.n	8006900 <lis2duxs12_mode_set+0x1d8>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch(val->bw) {
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	789b      	ldrb	r3, [r3, #2]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <lis2duxs12_mode_set+0x132>
 800684a:	2b00      	cmp	r3, #0
 800684c:	db53      	blt.n	80068f6 <lis2duxs12_mode_set+0x1ce>
 800684e:	3b01      	subs	r3, #1
 8006850:	2b02      	cmp	r3, #2
 8006852:	d850      	bhi.n	80068f6 <lis2duxs12_mode_set+0x1ce>
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
        case LIS2DUXS12_ODR_div_16:
          return -1;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006858:	e081      	b.n	800695e <lis2duxs12_mode_set+0x236>
        case LIS2DUXS12_ODR_div_2:
          ctrl5.bw = 0x3;
 800685a:	7b3b      	ldrb	r3, [r7, #12]
 800685c:	f043 030c 	orr.w	r3, r3, #12
 8006860:	733b      	strb	r3, [r7, #12]
          break;
 8006862:	bf00      	nop
      }
      break;
 8006864:	e047      	b.n	80068f6 <lis2duxs12_mode_set+0x1ce>
    case LIS2DUXS12_12Hz5_LP:
      switch(val->bw) {
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	789b      	ldrb	r3, [r3, #2]
 800686a:	2b03      	cmp	r3, #3
 800686c:	dc45      	bgt.n	80068fa <lis2duxs12_mode_set+0x1d2>
 800686e:	2b02      	cmp	r3, #2
 8006870:	da04      	bge.n	800687c <lis2duxs12_mode_set+0x154>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <lis2duxs12_mode_set+0x15a>
 8006876:	2b01      	cmp	r3, #1
 8006878:	d009      	beq.n	800688e <lis2duxs12_mode_set+0x166>
          break;
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x3;
          break;
      }
      break;
 800687a:	e03e      	b.n	80068fa <lis2duxs12_mode_set+0x1d2>
          return -1;
 800687c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006880:	e06d      	b.n	800695e <lis2duxs12_mode_set+0x236>
          ctrl5.bw = 0x2;
 8006882:	7b3b      	ldrb	r3, [r7, #12]
 8006884:	2202      	movs	r2, #2
 8006886:	f362 0383 	bfi	r3, r2, #2, #2
 800688a:	733b      	strb	r3, [r7, #12]
          break;
 800688c:	e004      	b.n	8006898 <lis2duxs12_mode_set+0x170>
          ctrl5.bw = 0x3;
 800688e:	7b3b      	ldrb	r3, [r7, #12]
 8006890:	f043 030c 	orr.w	r3, r3, #12
 8006894:	733b      	strb	r3, [r7, #12]
          break;
 8006896:	bf00      	nop
      break;
 8006898:	e02f      	b.n	80068fa <lis2duxs12_mode_set+0x1d2>
    case LIS2DUXS12_25Hz_LP:
      switch(val->bw) {
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d82d      	bhi.n	80068fe <lis2duxs12_mode_set+0x1d6>
 80068a2:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <lis2duxs12_mode_set+0x180>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068bf 	.word	0x080068bf
 80068ac:	080068cb 	.word	0x080068cb
 80068b0:	080068d7 	.word	0x080068d7
 80068b4:	080068b9 	.word	0x080068b9
        case LIS2DUXS12_ODR_div_16:
          return -1;
 80068b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068bc:	e04f      	b.n	800695e <lis2duxs12_mode_set+0x236>
        case LIS2DUXS12_ODR_div_2:
          ctrl5.bw = 0x1;
 80068be:	7b3b      	ldrb	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f362 0383 	bfi	r3, r2, #2, #2
 80068c6:	733b      	strb	r3, [r7, #12]
          break;
 80068c8:	e00a      	b.n	80068e0 <lis2duxs12_mode_set+0x1b8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x2;
 80068ca:	7b3b      	ldrb	r3, [r7, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f362 0383 	bfi	r3, r2, #2, #2
 80068d2:	733b      	strb	r3, [r7, #12]
          break;
 80068d4:	e004      	b.n	80068e0 <lis2duxs12_mode_set+0x1b8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x3;
 80068d6:	7b3b      	ldrb	r3, [r7, #12]
 80068d8:	f043 030c 	orr.w	r3, r3, #12
 80068dc:	733b      	strb	r3, [r7, #12]
          break;
 80068de:	bf00      	nop
      }
      break;
 80068e0:	e00d      	b.n	80068fe <lis2duxs12_mode_set+0x1d6>
    case LIS2DUXS12_50Hz_HP:
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
      ctrl5.bw = (uint8_t)val->bw;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	7b3b      	ldrb	r3, [r7, #12]
 80068ee:	f362 0383 	bfi	r3, r2, #2, #2
 80068f2:	733b      	strb	r3, [r7, #12]
      break;
 80068f4:	e004      	b.n	8006900 <lis2duxs12_mode_set+0x1d8>
      break;
 80068f6:	bf00      	nop
 80068f8:	e002      	b.n	8006900 <lis2duxs12_mode_set+0x1d8>
      break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <lis2duxs12_mode_set+0x1d8>
      break;
 80068fe:	bf00      	nop
  }

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t*)&ctrl3, 1);
 8006900:	f107 0210 	add.w	r2, r7, #16
 8006904:	2301      	movs	r3, #1
 8006906:	2112      	movs	r1, #18
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff fdc3 	bl	8006494 <lis2duxs12_read_reg>
 800690e:	4602      	mov	r2, r0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4413      	add	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800691e:	2b10      	cmp	r3, #16
 8006920:	d101      	bne.n	8006926 <lis2duxs12_mode_set+0x1fe>
 8006922:	2201      	movs	r2, #1
 8006924:	e000      	b.n	8006928 <lis2duxs12_mode_set+0x200>
 8006926:	2200      	movs	r2, #0
 8006928:	7c3b      	ldrb	r3, [r7, #16]
 800692a:	f362 0382 	bfi	r3, r2, #2, #1
 800692e:	743b      	strb	r3, [r7, #16]

  if (ret == 0) {
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d112      	bne.n	800695c <lis2duxs12_mode_set+0x234>
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t*)&ctrl5, 1);
 8006936:	f107 020c 	add.w	r2, r7, #12
 800693a:	2301      	movs	r3, #1
 800693c:	2114      	movs	r1, #20
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fdc0 	bl	80064c4 <lis2duxs12_write_reg>
 8006944:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t*)&ctrl3, 1);
 8006946:	f107 0210 	add.w	r2, r7, #16
 800694a:	2301      	movs	r3, #1
 800694c:	2112      	movs	r1, #18
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fdb8 	bl	80064c4 <lis2duxs12_write_reg>
 8006954:	4602      	mov	r2, r0
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800695c:	697b      	ldr	r3, [r7, #20]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop

08006968 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t*)&ctrl5, 1);
 8006972:	f107 020c 	add.w	r2, r7, #12
 8006976:	2301      	movs	r3, #1
 8006978:	2114      	movs	r1, #20
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fd8a 	bl	8006494 <lis2duxs12_read_reg>
 8006980:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t*)&ctrl3, 1);
 8006982:	f107 0210 	add.w	r2, r7, #16
 8006986:	2301      	movs	r3, #1
 8006988:	2112      	movs	r1, #18
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff fd82 	bl	8006494 <lis2duxs12_read_reg>
 8006990:	4602      	mov	r2, r0
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr) {
 8006998:	7b3b      	ldrb	r3, [r7, #12]
 800699a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b0b      	cmp	r3, #11
 80069a2:	f200 8083 	bhi.w	8006aac <lis2duxs12_mode_get+0x144>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <lis2duxs12_mode_get+0x44>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	080069e5 	.word	0x080069e5
 80069b4:	080069ed 	.word	0x080069ed
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	08006a05 	.word	0x08006a05
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006a4d 	.word	0x08006a4d
 80069d0:	08006a65 	.word	0x08006a65
 80069d4:	08006a7d 	.word	0x08006a7d
 80069d8:	08006a95 	.word	0x08006a95
    case LIS2DUXS12_OFF:
      val->odr = LIS2DUXS12_OFF;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
      break;
 80069e2:	e067      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_1Hz6_ULP:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
      break;
 80069ea:	e063      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_3Hz_ULP:
      val->odr = LIS2DUXS12_3Hz_ULP;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2202      	movs	r2, #2
 80069f0:	701a      	strb	r2, [r3, #0]
      break;
 80069f2:	e05f      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_25Hz_ULP:
      val->odr = LIS2DUXS12_25Hz_ULP;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2203      	movs	r2, #3
 80069f8:	701a      	strb	r2, [r3, #0]
      break;
 80069fa:	e05b      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_6Hz_LP:
      val->odr = LIS2DUXS12_6Hz_LP;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2204      	movs	r2, #4
 8006a00:	701a      	strb	r2, [r3, #0]
      break;
 8006a02:	e057      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_12Hz5_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8006a04:	7c3b      	ldrb	r3, [r7, #16]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <lis2duxs12_mode_get+0xac>
 8006a10:	2215      	movs	r2, #21
 8006a12:	e000      	b.n	8006a16 <lis2duxs12_mode_get+0xae>
 8006a14:	2205      	movs	r2, #5
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	701a      	strb	r2, [r3, #0]
      break;
 8006a1a:	e04b      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_25Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8006a1c:	7c3b      	ldrb	r3, [r7, #16]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <lis2duxs12_mode_get+0xc4>
 8006a28:	2216      	movs	r2, #22
 8006a2a:	e000      	b.n	8006a2e <lis2duxs12_mode_get+0xc6>
 8006a2c:	2206      	movs	r2, #6
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	e03f      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_50Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8006a34:	7c3b      	ldrb	r3, [r7, #16]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <lis2duxs12_mode_get+0xdc>
 8006a40:	2217      	movs	r2, #23
 8006a42:	e000      	b.n	8006a46 <lis2duxs12_mode_get+0xde>
 8006a44:	2207      	movs	r2, #7
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	701a      	strb	r2, [r3, #0]
      break;
 8006a4a:	e033      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_100Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8006a4c:	7c3b      	ldrb	r3, [r7, #16]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <lis2duxs12_mode_get+0xf4>
 8006a58:	2218      	movs	r2, #24
 8006a5a:	e000      	b.n	8006a5e <lis2duxs12_mode_get+0xf6>
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	701a      	strb	r2, [r3, #0]
      break;
 8006a62:	e027      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_200Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8006a64:	7c3b      	ldrb	r3, [r7, #16]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <lis2duxs12_mode_get+0x10c>
 8006a70:	2219      	movs	r2, #25
 8006a72:	e000      	b.n	8006a76 <lis2duxs12_mode_get+0x10e>
 8006a74:	2209      	movs	r2, #9
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e01b      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_400Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8006a7c:	7c3b      	ldrb	r3, [r7, #16]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <lis2duxs12_mode_get+0x124>
 8006a88:	221a      	movs	r2, #26
 8006a8a:	e000      	b.n	8006a8e <lis2duxs12_mode_get+0x126>
 8006a8c:	220a      	movs	r2, #10
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	701a      	strb	r2, [r3, #0]
      break;
 8006a92:	e00f      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_800Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8006a94:	7c3b      	ldrb	r3, [r7, #16]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <lis2duxs12_mode_get+0x13c>
 8006aa0:	221b      	movs	r2, #27
 8006aa2:	e000      	b.n	8006aa6 <lis2duxs12_mode_get+0x13e>
 8006aa4:	220b      	movs	r2, #11
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e003      	b.n	8006ab4 <lis2duxs12_mode_get+0x14c>
      break;
    case LIS2DUXS12_TRIG_SW:
      val->odr = LIS2DUXS12_TRIG_SW;
      break;
    default:
      val->odr = LIS2DUXS12_OFF;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
      break;
 8006ab2:	bf00      	nop
  }

  switch (ctrl5.fs) {
 8006ab4:	7b3b      	ldrb	r3, [r7, #12]
 8006ab6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d81b      	bhi.n	8006af8 <lis2duxs12_mode_get+0x190>
 8006ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <lis2duxs12_mode_get+0x160>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae1 	.word	0x08006ae1
 8006ad0:	08006ae9 	.word	0x08006ae9
 8006ad4:	08006af1 	.word	0x08006af1
    case LIS2DUXS12_2g:
      val->fs = LIS2DUXS12_2g;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	705a      	strb	r2, [r3, #1]
      break;
 8006ade:	e00f      	b.n	8006b00 <lis2duxs12_mode_get+0x198>
    case LIS2DUXS12_4g:
      val->fs = LIS2DUXS12_4g;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	705a      	strb	r2, [r3, #1]
      break;
 8006ae6:	e00b      	b.n	8006b00 <lis2duxs12_mode_get+0x198>
    case LIS2DUXS12_8g:
      val->fs = LIS2DUXS12_8g;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2202      	movs	r2, #2
 8006aec:	705a      	strb	r2, [r3, #1]
      break;
 8006aee:	e007      	b.n	8006b00 <lis2duxs12_mode_get+0x198>
    case LIS2DUXS12_16g:
      val->fs = LIS2DUXS12_16g;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2203      	movs	r2, #3
 8006af4:	705a      	strb	r2, [r3, #1]
      break;
 8006af6:	e003      	b.n	8006b00 <lis2duxs12_mode_get+0x198>
    default:
      val->fs = LIS2DUXS12_2g;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	705a      	strb	r2, [r3, #1]
      break;
 8006afe:	bf00      	nop
  }

  switch (ctrl5.bw) {
 8006b00:	7b3b      	ldrb	r3, [r7, #12]
 8006b02:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d81b      	bhi.n	8006b44 <lis2duxs12_mode_get+0x1dc>
 8006b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <lis2duxs12_mode_get+0x1ac>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b25 	.word	0x08006b25
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b35 	.word	0x08006b35
 8006b20:	08006b3d 	.word	0x08006b3d
    case LIS2DUXS12_ODR_div_2:
      val->bw = LIS2DUXS12_ODR_div_2;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	709a      	strb	r2, [r3, #2]
      break;
 8006b2a:	e00f      	b.n	8006b4c <lis2duxs12_mode_get+0x1e4>
    case LIS2DUXS12_ODR_div_4:
      val->bw = LIS2DUXS12_ODR_div_4;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	709a      	strb	r2, [r3, #2]
      break;
 8006b32:	e00b      	b.n	8006b4c <lis2duxs12_mode_get+0x1e4>
    case LIS2DUXS12_ODR_div_8:
      val->bw = LIS2DUXS12_ODR_div_8;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2202      	movs	r2, #2
 8006b38:	709a      	strb	r2, [r3, #2]
      break;
 8006b3a:	e007      	b.n	8006b4c <lis2duxs12_mode_get+0x1e4>
    case LIS2DUXS12_ODR_div_16:
      val->bw = LIS2DUXS12_ODR_div_16;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2203      	movs	r2, #3
 8006b40:	709a      	strb	r2, [r3, #2]
      break;
 8006b42:	e003      	b.n	8006b4c <lis2duxs12_mode_get+0x1e4>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2200      	movs	r2, #0
 8006b48:	709a      	strb	r2, [r3, #2]
      break;
 8006b4a:	bf00      	nop
  }

  return ret;
 8006b4c:	697b      	ldr	r3, [r7, #20]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(stmdev_ctx_t *ctx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  lis2duxs12_if_wake_up_t if_wake_up = {0};
 8006b60:	2300      	movs	r3, #0
 8006b62:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  if_wake_up.soft_pd = PROPERTY_ENABLE;
 8006b64:	7a3b      	ldrb	r3, [r7, #8]
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_IF_WAKE_UP, (uint8_t *)&if_wake_up, 1);
 8006b6c:	f107 0208 	add.w	r2, r7, #8
 8006b70:	2301      	movs	r3, #1
 8006b72:	213e      	movs	r1, #62	@ 0x3e
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fca5 	bl	80064c4 <lis2duxs12_write_reg>
 8006b7a:	60f8      	str	r0, [r7, #12]

  return ret;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(stmdev_ctx_t *ctx, lis2duxs12_md_t *md,
                          lis2duxs12_xl_data_t *data)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b089      	sub	sp, #36	@ 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8006b94:	f107 0210 	add.w	r2, r7, #16
 8006b98:	2306      	movs	r3, #6
 8006b9a:	2128      	movs	r1, #40	@ 0x28
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fc79 	bl	8006494 <lis2duxs12_read_reg>
 8006ba2:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++) {
 8006ba8:	2300      	movs	r3, #0
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e08f      	b.n	8006cce <lis2duxs12_xl_data_get+0x146>
    data->raw[i] = (int16_t)buff[j+1U];
 8006bae:	7fbb      	ldrb	r3, [r7, #30]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	3320      	adds	r3, #32
 8006bb4:	443b      	add	r3, r7
 8006bb6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8006bba:	7ffb      	ldrb	r3, [r7, #31]
 8006bbc:	b211      	sxth	r1, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4413      	add	r3, r2
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8006bca:	7ffb      	ldrb	r3, [r7, #31]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	7fba      	ldrb	r2, [r7, #30]
 8006be0:	3220      	adds	r2, #32
 8006be2:	443a      	add	r2, r7
 8006be4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8006be8:	4413      	add	r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	7ffb      	ldrb	r3, [r7, #31]
 8006bee:	b211      	sxth	r1, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4413      	add	r3, r2
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	809a      	strh	r2, [r3, #4]
    j+=2U;
 8006bfc:	7fbb      	ldrb	r3, [r7, #30]
 8006bfe:	3302      	adds	r3, #2
 8006c00:	77bb      	strb	r3, [r7, #30]
    switch ( md->fs ) {
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d856      	bhi.n	8006cb8 <lis2duxs12_xl_data_get+0x130>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <lis2duxs12_xl_data_get+0x88>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006c93 	.word	0x08006c93
      case LIS2DUXS12_2g:
        data->mg[i] =lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	3304      	adds	r3, #4
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c2e:	7ffc      	ldrb	r4, [r7, #31]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fc5f 	bl	80064f4 <lis2duxs12_from_fs2g_to_mg>
 8006c36:	eef0 7a40 	vmov.f32	s15, s0
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	00a3      	lsls	r3, r4, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	edc3 7a00 	vstr	s15, [r3]
        break;
 8006c44:	e040      	b.n	8006cc8 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] =lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8006c46:	7ffb      	ldrb	r3, [r7, #31]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c54:	7ffc      	ldrb	r4, [r7, #31]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fc64 	bl	8006524 <lis2duxs12_from_fs4g_to_mg>
 8006c5c:	eef0 7a40 	vmov.f32	s15, s0
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	00a3      	lsls	r3, r4, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	edc3 7a00 	vstr	s15, [r3]
        break;
 8006c6a:	e02d      	b.n	8006cc8 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] =lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8006c6c:	7ffb      	ldrb	r3, [r7, #31]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	4413      	add	r3, r2
 8006c76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c7a:	7ffc      	ldrb	r4, [r7, #31]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff fc69 	bl	8006554 <lis2duxs12_from_fs8g_to_mg>
 8006c82:	eef0 7a40 	vmov.f32	s15, s0
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	00a3      	lsls	r3, r4, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	edc3 7a00 	vstr	s15, [r3]
        break;
 8006c90:	e01a      	b.n	8006cc8 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] =lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 8006c92:	7ffb      	ldrb	r3, [r7, #31]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	3304      	adds	r3, #4
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ca0:	7ffc      	ldrb	r4, [r7, #31]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fc6e 	bl	8006584 <lis2duxs12_from_fs16g_to_mg>
 8006ca8:	eef0 7a40 	vmov.f32	s15, s0
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	00a3      	lsls	r3, r4, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	edc3 7a00 	vstr	s15, [r3]
        break;
 8006cb6:	e007      	b.n	8006cc8 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8006cb8:	7ffb      	ldrb	r3, [r7, #31]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
        break;
 8006cc6:	bf00      	nop
  for (i = 0U; i < 3U; i++) {
 8006cc8:	7ffb      	ldrb	r3, [r7, #31]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	7ffb      	ldrb	r3, [r7, #31]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	f67f af6c 	bls.w	8006bae <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3724      	adds	r7, #36	@ 0x24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd90      	pop	{r4, r7, pc}

08006ce0 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8006cea:	f107 0208 	add.w	r2, r7, #8
 8006cee:	2301      	movs	r3, #1
 8006cf0:	2133      	movs	r1, #51	@ 0x33
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fbce 	bl	8006494 <lis2duxs12_read_reg>
 8006cf8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d122      	bne.n	8006d46 <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	7a3b      	ldrb	r3, [r7, #8]
 8006d0c:	f362 0301 	bfi	r3, r2, #0, #2
 8006d10:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	7a3b      	ldrb	r3, [r7, #8]
 8006d1e:	f362 1386 	bfi	r3, r2, #6, #1
 8006d22:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	7a3b      	ldrb	r3, [r7, #8]
 8006d30:	f362 1345 	bfi	r3, r2, #5, #1
 8006d34:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8006d36:	f107 0208 	add.w	r2, r7, #8
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	2133      	movs	r1, #51	@ 0x33
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fbc0 	bl	80064c4 <lis2duxs12_write_reg>
 8006d44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d46:	68fb      	ldr	r3, [r7, #12]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8006d5a:	f107 0208 	add.w	r2, r7, #8
 8006d5e:	2301      	movs	r3, #1
 8006d60:	2133      	movs	r1, #51	@ 0x33
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fb96 	bl	8006494 <lis2duxs12_read_reg>
 8006d68:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 8006d6a:	7a3b      	ldrb	r3, [r7, #8]
 8006d6c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d70:	b2d9      	uxtb	r1, r3
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	7853      	ldrb	r3, [r2, #1]
 8006d76:	f361 0341 	bfi	r3, r1, #1, #1
 8006d7a:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8006d7c:	7a3b      	ldrb	r3, [r7, #8]
 8006d7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d82:	b2d9      	uxtb	r1, r3
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	7853      	ldrb	r3, [r2, #1]
 8006d88:	f361 0300 	bfi	r3, r1, #0, #1
 8006d8c:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel) {
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d00e      	beq.n	8006db4 <lis2duxs12_i3c_configure_get+0x64>
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	dc10      	bgt.n	8006dbc <lis2duxs12_i3c_configure_get+0x6c>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <lis2duxs12_i3c_configure_get+0x54>
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d004      	beq.n	8006dac <lis2duxs12_i3c_configure_get+0x5c>
 8006da2:	e00b      	b.n	8006dbc <lis2duxs12_i3c_configure_get+0x6c>
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
     break;
 8006daa:	e00b      	b.n	8006dc4 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2201      	movs	r2, #1
 8006db0:	701a      	strb	r2, [r3, #0]
     break;
 8006db2:	e007      	b.n	8006dc4 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
     break;
 8006dba:	e003      	b.n	8006dc4 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	701a      	strb	r2, [r3, #0]
     break;
 8006dc2:	bf00      	nop
  }

 return ret;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08a      	sub	sp, #40	@ 0x28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8006ddc:	f107 0220 	add.w	r2, r7, #32
 8006de0:	2301      	movs	r3, #1
 8006de2:	2113      	movs	r1, #19
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fb55 	bl	8006494 <lis2duxs12_read_reg>
 8006dea:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8006dec:	f107 021c 	add.w	r2, r7, #28
 8006df0:	2301      	movs	r3, #1
 8006df2:	2115      	movs	r1, #21
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fb4d 	bl	8006494 <lis2duxs12_read_reg>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	4413      	add	r3, r2
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8006e02:	f107 0214 	add.w	r2, r7, #20
 8006e06:	2301      	movs	r3, #1
 8006e08:	2147      	movs	r1, #71	@ 0x47
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fb42 	bl	8006494 <lis2duxs12_read_reg>
 8006e10:	4602      	mov	r2, r0
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	4413      	add	r3, r2
 8006e16:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8006e18:	f107 0218 	add.w	r2, r7, #24
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	2116      	movs	r1, #22
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fb37 	bl	8006494 <lis2duxs12_read_reg>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	4413      	add	r3, r2
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 8081 	bne.w	8006f38 <lis2duxs12_fifo_mode_set+0x16a>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 8006e36:	793b      	ldrb	r3, [r7, #4]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d00e      	beq.n	8006e5a <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 8006e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e40:	f043 0308 	orr.w	r3, r3, #8
 8006e44:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 8006e48:	793b      	ldrb	r3, [r7, #4]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	7f3b      	ldrb	r3, [r7, #28]
 8006e52:	f362 0302 	bfi	r3, r2, #0, #3
 8006e56:	773b      	strb	r3, [r7, #28]
 8006e58:	e005      	b.n	8006e66 <lis2duxs12_fifo_mode_set+0x98>
    }
    else {
      ctrl4.fifo_en = 0;
 8006e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e5e:	f36f 03c3 	bfc	r3, #3, #1
 8006e62:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 8006e66:	797b      	ldrb	r3, [r7, #5]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	7f3b      	ldrb	r3, [r7, #28]
 8006e70:	f362 1386 	bfi	r3, r2, #6, #1
 8006e74:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 8006e76:	79bb      	ldrb	r3, [r7, #6]
 8006e78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	7e3b      	ldrb	r3, [r7, #24]
 8006e80:	f362 13c7 	bfi	r3, r2, #7, #1
 8006e84:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 8006e86:	7a3b      	ldrb	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00f      	beq.n	8006eac <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 8006e8c:	7a3b      	ldrb	r3, [r7, #8]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	7d3b      	ldrb	r3, [r7, #20]
 8006e96:	f362 03c4 	bfi	r3, r2, #3, #2
 8006e9a:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 8006e9c:	7a7b      	ldrb	r3, [r7, #9]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	7d3b      	ldrb	r3, [r7, #20]
 8006ea6:	f362 0302 	bfi	r3, r2, #0, #3
 8006eaa:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	7f3b      	ldrb	r3, [r7, #28]
 8006eb6:	f362 13c7 	bfi	r3, r2, #7, #1
 8006eba:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U) {
 8006ebc:	79bb      	ldrb	r3, [r7, #6]
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <lis2duxs12_fifo_mode_set+0x112>
      fifo_ctrl.stop_on_fth = 1;
 8006ec8:	7f3b      	ldrb	r3, [r7, #28]
 8006eca:	f043 0308 	orr.w	r3, r3, #8
 8006ece:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8006ed0:	79bb      	ldrb	r3, [r7, #6]
 8006ed2:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	7e3b      	ldrb	r3, [r7, #24]
 8006eda:	f362 0306 	bfi	r3, r2, #0, #7
 8006ede:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8006ee0:	f107 0214 	add.w	r2, r7, #20
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	2147      	movs	r1, #71	@ 0x47
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff faeb 	bl	80064c4 <lis2duxs12_write_reg>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	4413      	add	r3, r2
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8006ef6:	f107 0218 	add.w	r2, r7, #24
 8006efa:	2301      	movs	r3, #1
 8006efc:	2116      	movs	r1, #22
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff fae0 	bl	80064c4 <lis2duxs12_write_reg>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	4413      	add	r3, r2
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8006f0c:	f107 021c 	add.w	r2, r7, #28
 8006f10:	2301      	movs	r3, #1
 8006f12:	2115      	movs	r1, #21
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff fad5 	bl	80064c4 <lis2duxs12_write_reg>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	4413      	add	r3, r2
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8006f22:	f107 0220 	add.w	r2, r7, #32
 8006f26:	2301      	movs	r3, #1
 8006f28:	2113      	movs	r1, #19
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff faca 	bl	80064c4 <lis2duxs12_write_reg>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	4413      	add	r3, r2
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3728      	adds	r7, #40	@ 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	e067      	b.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	7b1a      	ldrb	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a28      	ldr	r2, [pc, #160]	@ (800703c <LIS2MDL_RegisterBusIO+0xf8>)
 8006f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a27      	ldr	r2, [pc, #156]	@ (8007040 <LIS2MDL_RegisterBusIO+0xfc>)
 8006fa2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	69da      	ldr	r2, [r3, #28]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e036      	b.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4798      	blx	r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e02c      	b.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d028      	beq.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d123      	bne.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10d      	bne.n	800700c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8006ff0:	2334      	movs	r3, #52	@ 0x34
 8006ff2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2162      	movs	r1, #98	@ 0x62
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fb18 	bl	8007630 <LIS2MDL_Write_Reg>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d014      	beq.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8007006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800700a:	e012      	b.n	8007032 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b03      	cmp	r3, #3
 8007012:	d101      	bne.n	8007018 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	e00c      	b.n	8007032 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3320      	adds	r3, #32
 800701c:	2101      	movs	r1, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f000 ff69 	bl	8007ef6 <lis2mdl_i2c_interface_set>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800702e:	e000      	b.n	8007032 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8007030:	68fb      	ldr	r3, [r7, #12]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	08007687 	.word	0x08007687
 8007040:	08007709 	.word	0x08007709

08007044 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d144      	bne.n	80070de <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	2301      	movs	r3, #1
 800705a:	2162      	movs	r1, #98	@ 0x62
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fb94 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8007068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800706c:	e06c      	b.n	8007148 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800706e:	f107 020c 	add.w	r2, r7, #12
 8007072:	2301      	movs	r3, #1
 8007074:	2160      	movs	r1, #96	@ 0x60
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fb87 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007086:	e05f      	b.n	8007148 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8007088:	7a3b      	ldrb	r3, [r7, #8]
 800708a:	f043 0310 	orr.w	r3, r3, #16
 800708e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8007090:	7a3b      	ldrb	r3, [r7, #8]
 8007092:	f36f 0341 	bfc	r3, #1, #1
 8007096:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8007098:	7b3b      	ldrb	r3, [r7, #12]
 800709a:	2202      	movs	r2, #2
 800709c:	f362 0301 	bfi	r3, r2, #0, #2
 80070a0:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80070a2:	7b3b      	ldrb	r3, [r7, #12]
 80070a4:	f043 030c 	orr.w	r3, r3, #12
 80070a8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80070aa:	f107 0208 	add.w	r2, r7, #8
 80070ae:	2301      	movs	r3, #1
 80070b0:	2162      	movs	r1, #98	@ 0x62
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fca8 	bl	8007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070c2:	e041      	b.n	8007148 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80070c4:	f107 020c 	add.w	r2, r7, #12
 80070c8:	2301      	movs	r3, #1
 80070ca:	2160      	movs	r1, #96	@ 0x60
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc9b 	bl	8007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d032      	beq.n	800713e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070dc:	e034      	b.n	8007148 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3320      	adds	r3, #32
 80070e2:	2101      	movs	r1, #1
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fe61 	bl	8007dac <lis2mdl_block_data_update_set>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070f4:	e028      	b.n	8007148 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3320      	adds	r3, #32
 80070fa:	2102      	movs	r1, #2
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fdd1 	bl	8007ca4 <lis2mdl_operating_mode_set>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8007108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800710c:	e01c      	b.n	8007148 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3320      	adds	r3, #32
 8007112:	2103      	movs	r1, #3
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fdeb 	bl	8007cf0 <lis2mdl_data_rate_set>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8007120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007124:	e010      	b.n	8007148 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3320      	adds	r3, #32
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f000 febc 	bl	8007eaa <lis2mdl_self_test_set>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8007138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800713c:	e004      	b.n	8007148 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f8a5 	bl	80072a8 <LIS2MDL_MAG_Disable>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8007164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007168:	e004      	b.n	8007174 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d10b      	bne.n	80071a6 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800718e:	2301      	movs	r3, #1
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	214f      	movs	r1, #79	@ 0x4f
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 faf8 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071a4:	e00c      	b.n	80071c0 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3320      	adds	r3, #32
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fe6b 	bl	8007e88 <lis2mdl_device_id_get>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80071b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071bc:	e000      	b.n	80071c0 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2200      	movs	r2, #0
 80071dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2201      	movs	r2, #1
 80071e2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2232      	movs	r2, #50	@ 0x32
 80071fa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4a04      	ldr	r2, [pc, #16]	@ (8007220 <LIS2MDL_GetCapabilities+0x58>)
 8007210:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	42c80000 	.word	0x42c80000

08007224 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e032      	b.n	80072a0 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b03      	cmp	r3, #3
 8007240:	d11d      	bne.n	800727e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8007242:	f107 020c 	add.w	r2, r7, #12
 8007246:	2301      	movs	r3, #1
 8007248:	2160      	movs	r1, #96	@ 0x60
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa9d 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8007256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800725a:	e021      	b.n	80072a0 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 800725c:	7b3b      	ldrb	r3, [r7, #12]
 800725e:	f36f 0301 	bfc	r3, #0, #2
 8007262:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8007264:	f107 020c 	add.w	r2, r7, #12
 8007268:	2301      	movs	r3, #1
 800726a:	2160      	movs	r1, #96	@ 0x60
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fbcb 	bl	8007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8007278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800727c:	e010      	b.n	80072a0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3320      	adds	r3, #32
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fd0d 	bl	8007ca4 <lis2mdl_operating_mode_set>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8007290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007294:	e004      	b.n	80072a0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e033      	b.n	8007326 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d11e      	bne.n	8007304 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80072c6:	f107 020c 	add.w	r2, r7, #12
 80072ca:	2301      	movs	r3, #1
 80072cc:	2160      	movs	r1, #96	@ 0x60
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa5b 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80072da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072de:	e022      	b.n	8007326 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80072e0:	7b3b      	ldrb	r3, [r7, #12]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f362 0301 	bfi	r3, r2, #0, #2
 80072e8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80072ea:	f107 020c 	add.w	r2, r7, #12
 80072ee:	2301      	movs	r3, #1
 80072f0:	2160      	movs	r1, #96	@ 0x60
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fb88 	bl	8007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00e      	beq.n	800731c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80072fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007302:	e010      	b.n	8007326 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3320      	adds	r3, #32
 8007308:	2102      	movs	r1, #2
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fcca 	bl	8007ca4 <lis2mdl_operating_mode_set>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800731a:	e004      	b.n	8007326 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800733e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
	...

08007350 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3320      	adds	r3, #32
 8007362:	f107 020b 	add.w	r2, r7, #11
 8007366:	4611      	mov	r1, r2
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fce7 	bl	8007d3c <lis2mdl_data_rate_get>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8007374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007378:	e023      	b.n	80073c2 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d81b      	bhi.n	80073b8 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8007380:	a201      	add	r2, pc, #4	@ (adr r2, 8007388 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	08007399 	.word	0x08007399
 800738c:	080073a1 	.word	0x080073a1
 8007390:	080073a9 	.word	0x080073a9
 8007394:	080073b1 	.word	0x080073b1
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	4a0c      	ldr	r2, [pc, #48]	@ (80073cc <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 800739c:	601a      	str	r2, [r3, #0]
      break;
 800739e:	e00f      	b.n	80073c0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	4a0b      	ldr	r2, [pc, #44]	@ (80073d0 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80073a4:	601a      	str	r2, [r3, #0]
      break;
 80073a6:	e00b      	b.n	80073c0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4a0a      	ldr	r2, [pc, #40]	@ (80073d4 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80073ac:	601a      	str	r2, [r3, #0]
      break;
 80073ae:	e007      	b.n	80073c0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	4a09      	ldr	r2, [pc, #36]	@ (80073d8 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80073b4:	601a      	str	r2, [r3, #0]
      break;
 80073b6:	e003      	b.n	80073c0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073bc:	60fb      	str	r3, [r7, #12]
      break;
 80073be:	bf00      	nop
  }

  return ret;
 80073c0:	68fb      	ldr	r3, [r7, #12]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	41200000 	.word	0x41200000
 80073d0:	41a00000 	.word	0x41a00000
 80073d4:	42480000 	.word	0x42480000
 80073d8:	42c80000 	.word	0x42c80000

080073dc <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80073e8:	edd7 7a00 	vldr	s15, [r7]
 80073ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80073f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f8:	d801      	bhi.n	80073fe <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80073fa:	2300      	movs	r3, #0
 80073fc:	e016      	b.n	800742c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80073fe:	edd7 7a00 	vldr	s15, [r7]
 8007402:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8007406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740e:	d801      	bhi.n	8007414 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8007410:	2301      	movs	r3, #1
 8007412:	e00b      	b.n	800742c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8007414:	edd7 7a00 	vldr	s15, [r7]
 8007418:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80074a0 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 800741c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007424:	d801      	bhi.n	800742a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8007426:	2302      	movs	r3, #2
 8007428:	e000      	b.n	800742c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800742a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800742c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b03      	cmp	r3, #3
 8007434:	d121      	bne.n	800747a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8007436:	f107 020c 	add.w	r2, r7, #12
 800743a:	2301      	movs	r3, #1
 800743c:	2160      	movs	r1, #96	@ 0x60
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9a3 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800744a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800744e:	e022      	b.n	8007496 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	b2da      	uxtb	r2, r3
 8007458:	7b3b      	ldrb	r3, [r7, #12]
 800745a:	f362 0383 	bfi	r3, r2, #2, #2
 800745e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8007460:	f107 020c 	add.w	r2, r7, #12
 8007464:	2301      	movs	r3, #1
 8007466:	2160      	movs	r1, #96	@ 0x60
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 facd 	bl	8007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00f      	beq.n	8007494 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8007474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007478:	e00d      	b.n	8007496 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3320      	adds	r3, #32
 800747e:	7bfa      	ldrb	r2, [r7, #15]
 8007480:	4611      	mov	r1, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fc34 	bl	8007cf0 <lis2mdl_data_rate_set>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007492:	e000      	b.n	8007496 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	42480000 	.word	0x42480000

080074a4 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2232      	movs	r2, #50	@ 0x32
 80074b2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3320      	adds	r3, #32
 80074e8:	f107 0208 	add.w	r2, r7, #8
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fc82 	bl	8007df8 <lis2mdl_magnetic_raw_get>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074fe:	e00c      	b.n	800751a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007500:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007508:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007510:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b088      	sub	sp, #32
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d134      	bne.n	800759e <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8007534:	f107 0218 	add.w	r2, r7, #24
 8007538:	2306      	movs	r3, #6
 800753a:	2168      	movs	r1, #104	@ 0x68
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f924 	bl	800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800754c:	e06c      	b.n	8007628 <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800754e:	7e7b      	ldrb	r3, [r7, #25]
 8007550:	b21b      	sxth	r3, r3
 8007552:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8007554:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007558:	b29b      	uxth	r3, r3
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	7e3a      	ldrb	r2, [r7, #24]
 8007560:	4413      	add	r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	b21b      	sxth	r3, r3
 8007566:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8007568:	7efb      	ldrb	r3, [r7, #27]
 800756a:	b21b      	sxth	r3, r3
 800756c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 800756e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007572:	b29b      	uxth	r3, r3
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	b29b      	uxth	r3, r3
 8007578:	7eba      	ldrb	r2, [r7, #26]
 800757a:	4413      	add	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	b21b      	sxth	r3, r3
 8007580:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8007582:	7f7b      	ldrb	r3, [r7, #29]
 8007584:	b21b      	sxth	r3, r3
 8007586:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8007588:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800758c:	b29b      	uxth	r3, r3
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	b29b      	uxth	r3, r3
 8007592:	7f3a      	ldrb	r2, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	b29b      	uxth	r3, r3
 8007598:	b21b      	sxth	r3, r3
 800759a:	82bb      	strh	r3, [r7, #20]
 800759c:	e00d      	b.n	80075ba <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3320      	adds	r3, #32
 80075a2:	f107 0210 	add.w	r2, r7, #16
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fc25 	bl	8007df8 <lis2mdl_magnetic_raw_get>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075b8:	e036      	b.n	8007628 <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80075ba:	f107 030c 	add.w	r3, r7, #12
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff feb4 	bl	800732e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80075c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80075d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075de:	ee17 2a90 	vmov	r2, s15
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80075e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075fe:	ee17 2a90 	vmov	r2, s15
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007606:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007612:	edd7 7a03 	vldr	s15, [r7, #12]
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800761e:	ee17 2a90 	vmov	r2, s15
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
 800763c:	4613      	mov	r3, r2
 800763e:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d10b      	bne.n	8007660 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8007648:	1cba      	adds	r2, r7, #2
 800764a:	78f9      	ldrb	r1, [r7, #3]
 800764c:	2301      	movs	r3, #1
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9da 	bl	8007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d010      	beq.n	800767c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800765a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800765e:	e00e      	b.n	800767e <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f103 0020 	add.w	r0, r3, #32
 8007666:	1cba      	adds	r2, r7, #2
 8007668:	78f9      	ldrb	r1, [r7, #3]
 800766a:	2301      	movs	r3, #1
 800766c:	f000 fb02 	bl	8007c74 <lis2mdl_write_reg>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8007676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800767a:	e000      	b.n	800767e <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007686:	b590      	push	{r4, r7, lr}
 8007688:	b087      	sub	sp, #28
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	461a      	mov	r2, r3
 8007692:	460b      	mov	r3, r1
 8007694:	72fb      	strb	r3, [r7, #11]
 8007696:	4613      	mov	r3, r2
 8007698:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10e      	bne.n	80076c4 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	695c      	ldr	r4, [r3, #20]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	7b1b      	ldrb	r3, [r3, #12]
 80076ae:	4618      	mov	r0, r3
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	47a0      	blx	r4
 80076c0:	4603      	mov	r3, r0
 80076c2:	e01d      	b.n	8007700 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d10b      	bne.n	80076e4 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	695c      	ldr	r4, [r3, #20]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	7b1b      	ldrb	r3, [r3, #12]
 80076d4:	4618      	mov	r0, r3
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	b299      	uxth	r1, r3
 80076da:	893b      	ldrh	r3, [r7, #8]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	47a0      	blx	r4
 80076e0:	4603      	mov	r3, r0
 80076e2:	e00d      	b.n	8007700 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	695c      	ldr	r4, [r3, #20]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	7b1b      	ldrb	r3, [r3, #12]
 80076ec:	4618      	mov	r0, r3
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	893b      	ldrh	r3, [r7, #8]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	47a0      	blx	r4
 80076fe:	4603      	mov	r3, r0
  }
}
 8007700:	4618      	mov	r0, r3
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	bd90      	pop	{r4, r7, pc}

08007708 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	461a      	mov	r2, r3
 8007714:	460b      	mov	r3, r1
 8007716:	72fb      	strb	r3, [r7, #11]
 8007718:	4613      	mov	r3, r2
 800771a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10e      	bne.n	8007746 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	691c      	ldr	r4, [r3, #16]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	7b1b      	ldrb	r3, [r3, #12]
 8007730:	4618      	mov	r0, r3
 8007732:	7afb      	ldrb	r3, [r7, #11]
 8007734:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007738:	b2db      	uxtb	r3, r3
 800773a:	4619      	mov	r1, r3
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	47a0      	blx	r4
 8007742:	4603      	mov	r3, r0
 8007744:	e01d      	b.n	8007782 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d10b      	bne.n	8007766 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	691c      	ldr	r4, [r3, #16]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	7b1b      	ldrb	r3, [r3, #12]
 8007756:	4618      	mov	r0, r3
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	b299      	uxth	r1, r3
 800775c:	893b      	ldrh	r3, [r7, #8]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	47a0      	blx	r4
 8007762:	4603      	mov	r3, r0
 8007764:	e00d      	b.n	8007782 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	691c      	ldr	r4, [r3, #16]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	7b1b      	ldrb	r3, [r3, #12]
 800776e:	4618      	mov	r0, r3
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	893b      	ldrh	r3, [r7, #8]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	47a0      	blx	r4
 8007780:	4603      	mov	r3, r0
  }
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	bd90      	pop	{r4, r7, pc}

0800778a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b08c      	sub	sp, #48	@ 0x30
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	461a      	mov	r2, r3
 8007796:	460b      	mov	r3, r1
 8007798:	72fb      	strb	r3, [r7, #11]
 800779a:	4613      	mov	r3, r2
 800779c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80077b0:	233d      	movs	r3, #61	@ 0x3d
 80077b2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80077b4:	2315      	movs	r3, #21
 80077b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80077ba:	2316      	movs	r3, #22
 80077bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80077c0:	2317      	movs	r3, #23
 80077c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80077c6:	2314      	movs	r3, #20
 80077c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80077cc:	2344      	movs	r3, #68	@ 0x44
 80077ce:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80077d0:	2302      	movs	r3, #2
 80077d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80077d6:	2339      	movs	r3, #57	@ 0x39
 80077d8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80077e2:	2329      	movs	r3, #41	@ 0x29
 80077e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80077e8:	231e      	movs	r3, #30
 80077ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80077f4:	893b      	ldrh	r3, [r7, #8]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80077fa:	2310      	movs	r3, #16
 80077fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8007800:	2300      	movs	r3, #0
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8007806:	2340      	movs	r3, #64	@ 0x40
 8007808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f103 0020 	add.w	r0, r3, #32
 8007812:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8007816:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800781a:	2301      	movs	r3, #1
 800781c:	f000 fa2a 	bl	8007c74 <lis2mdl_write_reg>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8007826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800782a:	e0e9      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f103 0020 	add.w	r0, r3, #32
 8007832:	f107 021f 	add.w	r2, r7, #31
 8007836:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800783a:	2301      	movs	r3, #1
 800783c:	f000 fa1a 	bl	8007c74 <lis2mdl_write_reg>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8007846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800784a:	e0d9      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f103 0020 	add.w	r0, r3, #32
 8007852:	f107 020b 	add.w	r2, r7, #11
 8007856:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800785a:	2301      	movs	r3, #1
 800785c:	f000 fa0a 	bl	8007c74 <lis2mdl_write_reg>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800786a:	e0c9      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f103 0020 	add.w	r0, r3, #32
 8007872:	f107 021d 	add.w	r2, r7, #29
 8007876:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800787a:	2301      	movs	r3, #1
 800787c:	f000 f9fa 	bl	8007c74 <lis2mdl_write_reg>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8007886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800788a:	e0b9      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f103 0020 	add.w	r0, r3, #32
 8007892:	f107 021e 	add.w	r2, r7, #30
 8007896:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800789a:	2301      	movs	r3, #1
 800789c:	f000 f9ea 	bl	8007c74 <lis2mdl_write_reg>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80078a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078aa:	e0a9      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f103 0020 	add.w	r0, r3, #32
 80078b2:	f107 0220 	add.w	r2, r7, #32
 80078b6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80078ba:	2301      	movs	r3, #1
 80078bc:	f000 f9da 	bl	8007c74 <lis2mdl_write_reg>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078ca:	e099      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f103 0020 	add.w	r0, r3, #32
 80078d2:	f107 021c 	add.w	r2, r7, #28
 80078d6:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80078da:	2301      	movs	r3, #1
 80078dc:	f000 f9b2 	bl	8007c44 <lis2mdl_read_reg>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078ea:	e089      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80078ec:	7f3b      	ldrb	r3, [r7, #28]
 80078ee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d102      	bne.n	80078fc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80078f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80078fa:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f103 0020 	add.w	r0, r3, #32
 8007902:	f107 021c 	add.w	r2, r7, #28
 8007906:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800790a:	2301      	movs	r3, #1
 800790c:	f000 f9b2 	bl	8007c74 <lis2mdl_write_reg>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8007916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800791a:	e071      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f103 0020 	add.w	r0, r3, #32
 8007922:	f107 0214 	add.w	r2, r7, #20
 8007926:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800792a:	2306      	movs	r3, #6
 800792c:	f000 f98a 	bl	8007c44 <lis2mdl_read_reg>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800793a:	e061      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f103 0020 	add.w	r0, r3, #32
 8007942:	f107 021b 	add.w	r2, r7, #27
 8007946:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800794a:	2301      	movs	r3, #1
 800794c:	f000 f97a 	bl	8007c44 <lis2mdl_read_reg>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8007956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800795a:	e051      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800795c:	7efa      	ldrb	r2, [r7, #27]
 800795e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007962:	4013      	ands	r3, r2
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800796a:	429a      	cmp	r2, r3
 800796c:	d1e6      	bne.n	800793c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f103 0020 	add.w	r0, r3, #32
 8007974:	f107 021b 	add.w	r2, r7, #27
 8007978:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800797c:	2301      	movs	r3, #1
 800797e:	f000 f961 	bl	8007c44 <lis2mdl_read_reg>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8007988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800798c:	e038      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800798e:	7efa      	ldrb	r2, [r7, #27]
 8007990:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007994:	4013      	ands	r3, r2
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800799c:	429a      	cmp	r2, r3
 800799e:	d1e6      	bne.n	800796e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f103 0020 	add.w	r0, r3, #32
 80079a6:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80079aa:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80079ae:	2301      	movs	r3, #1
 80079b0:	f000 f960 	bl	8007c74 <lis2mdl_write_reg>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079be:	e01f      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f103 0020 	add.w	r0, r3, #32
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	f000 f939 	bl	8007c44 <lis2mdl_read_reg>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079dc:	e010      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f103 0020 	add.w	r0, r3, #32
 80079e4:	f107 0220 	add.w	r2, r7, #32
 80079e8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80079ec:	2301      	movs	r3, #1
 80079ee:	f000 f941 	bl	8007c74 <lis2mdl_write_reg>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80079f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079fc:	e000      	b.n	8007a00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3730      	adds	r7, #48	@ 0x30
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08c      	sub	sp, #48	@ 0x30
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	461a      	mov	r2, r3
 8007a14:	460b      	mov	r3, r1
 8007a16:	72fb      	strb	r3, [r7, #11]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8007a22:	2340      	movs	r3, #64	@ 0x40
 8007a24:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8007a2e:	233c      	movs	r3, #60	@ 0x3c
 8007a30:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8007a32:	2315      	movs	r3, #21
 8007a34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8007a38:	2316      	movs	r3, #22
 8007a3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8007a3e:	2317      	movs	r3, #23
 8007a40:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8007a48:	2314      	movs	r3, #20
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8007a4e:	2344      	movs	r3, #68	@ 0x44
 8007a50:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8007a52:	2339      	movs	r3, #57	@ 0x39
 8007a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8007a58:	2380      	movs	r3, #128	@ 0x80
 8007a5a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8007a5e:	2329      	movs	r3, #41	@ 0x29
 8007a60:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8007a64:	231e      	movs	r3, #30
 8007a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8007a70:	2310      	movs	r3, #16
 8007a72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8007a7c:	2340      	movs	r3, #64	@ 0x40
 8007a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8007a82:	230e      	movs	r3, #14
 8007a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f103 0020 	add.w	r0, r3, #32
 8007a8e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8007a92:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007a96:	2301      	movs	r3, #1
 8007a98:	f000 f8ec 	bl	8007c74 <lis2mdl_write_reg>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8007aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aa6:	e0c9      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f103 0020 	add.w	r0, r3, #32
 8007aae:	f107 021f 	add.w	r2, r7, #31
 8007ab2:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f000 f8dc 	bl	8007c74 <lis2mdl_write_reg>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8007ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ac6:	e0b9      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f103 0020 	add.w	r0, r3, #32
 8007ace:	f107 020b 	add.w	r2, r7, #11
 8007ad2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f000 f8cc 	bl	8007c74 <lis2mdl_write_reg>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ae6:	e0a9      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f103 0020 	add.w	r0, r3, #32
 8007aee:	f107 021e 	add.w	r2, r7, #30
 8007af2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8007af6:	2301      	movs	r3, #1
 8007af8:	f000 f8bc 	bl	8007c74 <lis2mdl_write_reg>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8007b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b06:	e099      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f103 0020 	add.w	r0, r3, #32
 8007b0e:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8007b12:	2301      	movs	r3, #1
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	f000 f8ad 	bl	8007c74 <lis2mdl_write_reg>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b24:	e08a      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f103 0020 	add.w	r0, r3, #32
 8007b2c:	f107 021d 	add.w	r2, r7, #29
 8007b30:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8007b34:	2301      	movs	r3, #1
 8007b36:	f000 f89d 	bl	8007c74 <lis2mdl_write_reg>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b44:	e07a      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f103 0020 	add.w	r0, r3, #32
 8007b4c:	f107 0220 	add.w	r2, r7, #32
 8007b50:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007b54:	2301      	movs	r3, #1
 8007b56:	f000 f88d 	bl	8007c74 <lis2mdl_write_reg>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b64:	e06a      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f103 0020 	add.w	r0, r3, #32
 8007b6c:	f107 021c 	add.w	r2, r7, #28
 8007b70:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007b74:	2301      	movs	r3, #1
 8007b76:	f000 f865 	bl	8007c44 <lis2mdl_read_reg>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b84:	e05a      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8007b86:	7f3b      	ldrb	r3, [r7, #28]
 8007b88:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d102      	bne.n	8007b96 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8007b90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b94:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f103 0020 	add.w	r0, r3, #32
 8007b9c:	f107 021c 	add.w	r2, r7, #28
 8007ba0:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f000 f865 	bl	8007c74 <lis2mdl_write_reg>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8007bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bb4:	e042      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f103 0020 	add.w	r0, r3, #32
 8007bbc:	f107 0214 	add.w	r2, r7, #20
 8007bc0:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8007bc4:	2306      	movs	r3, #6
 8007bc6:	f000 f83d 	bl	8007c44 <lis2mdl_read_reg>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bd4:	e032      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f103 0020 	add.w	r0, r3, #32
 8007bdc:	f107 021b 	add.w	r2, r7, #27
 8007be0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8007be4:	2301      	movs	r3, #1
 8007be6:	f000 f82d 	bl	8007c44 <lis2mdl_read_reg>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bf4:	e022      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8007bf6:	7efa      	ldrb	r2, [r7, #27]
 8007bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d1e6      	bne.n	8007bd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f103 0020 	add.w	r0, r3, #32
 8007c0e:	f107 021b 	add.w	r2, r7, #27
 8007c12:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8007c16:	2301      	movs	r3, #1
 8007c18:	f000 f814 	bl	8007c44 <lis2mdl_read_reg>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8007c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c26:	e009      	b.n	8007c3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8007c28:	7efa      	ldrb	r2, [r7, #27]
 8007c2a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c2e:	4013      	ands	r3, r2
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d1e6      	bne.n	8007c08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3730      	adds	r7, #48	@ 0x30
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	460b      	mov	r3, r1
 8007c52:	72fb      	strb	r3, [r7, #11]
 8007c54:	4613      	mov	r3, r2
 8007c56:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685c      	ldr	r4, [r3, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68d8      	ldr	r0, [r3, #12]
 8007c60:	893b      	ldrh	r3, [r7, #8]
 8007c62:	7af9      	ldrb	r1, [r7, #11]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	47a0      	blx	r4
 8007c68:	6178      	str	r0, [r7, #20]

  return ret;
 8007c6a:	697b      	ldr	r3, [r7, #20]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd90      	pop	{r4, r7, pc}

08007c74 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007c74:	b590      	push	{r4, r7, lr}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	460b      	mov	r3, r1
 8007c82:	72fb      	strb	r3, [r7, #11]
 8007c84:	4613      	mov	r3, r2
 8007c86:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681c      	ldr	r4, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68d8      	ldr	r0, [r3, #12]
 8007c90:	893b      	ldrh	r3, [r7, #8]
 8007c92:	7af9      	ldrb	r1, [r7, #11]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	47a0      	blx	r4
 8007c98:	6178      	str	r0, [r7, #20]

  return ret;
 8007c9a:	697b      	ldr	r3, [r7, #20]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd90      	pop	{r4, r7, pc}

08007ca4 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007cb0:	f107 0208 	add.w	r2, r7, #8
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	2160      	movs	r1, #96	@ 0x60
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff ffc3 	bl	8007c44 <lis2mdl_read_reg>
 8007cbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10f      	bne.n	8007ce6 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	7a3b      	ldrb	r3, [r7, #8]
 8007cd0:	f362 0301 	bfi	r3, r2, #0, #2
 8007cd4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007cd6:	f107 0208 	add.w	r2, r7, #8
 8007cda:	2301      	movs	r3, #1
 8007cdc:	2160      	movs	r1, #96	@ 0x60
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ffc8 	bl	8007c74 <lis2mdl_write_reg>
 8007ce4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007cfc:	f107 0208 	add.w	r2, r7, #8
 8007d00:	2301      	movs	r3, #1
 8007d02:	2160      	movs	r1, #96	@ 0x60
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff9d 	bl	8007c44 <lis2mdl_read_reg>
 8007d0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10f      	bne.n	8007d32 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	7a3b      	ldrb	r3, [r7, #8]
 8007d1c:	f362 0383 	bfi	r3, r2, #2, #2
 8007d20:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007d22:	f107 0208 	add.w	r2, r7, #8
 8007d26:	2301      	movs	r3, #1
 8007d28:	2160      	movs	r1, #96	@ 0x60
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ffa2 	bl	8007c74 <lis2mdl_write_reg>
 8007d30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007d32:	68fb      	ldr	r3, [r7, #12]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	2160      	movs	r1, #96	@ 0x60
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff ff78 	bl	8007c44 <lis2mdl_read_reg>
 8007d54:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8007d56:	7a3b      	ldrb	r3, [r7, #8]
 8007d58:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d81a      	bhi.n	8007d98 <lis2mdl_data_rate_get+0x5c>
 8007d62:	a201      	add	r2, pc, #4	@ (adr r2, 8007d68 <lis2mdl_data_rate_get+0x2c>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d81 	.word	0x08007d81
 8007d70:	08007d89 	.word	0x08007d89
 8007d74:	08007d91 	.word	0x08007d91
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
      break;
 8007d7e:	e00f      	b.n	8007da0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
      break;
 8007d86:	e00b      	b.n	8007da0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e007      	b.n	8007da0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2203      	movs	r2, #3
 8007d94:	701a      	strb	r2, [r3, #0]
      break;
 8007d96:	e003      	b.n	8007da0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	bf00      	nop
  }

  return ret;
 8007da0:	68fb      	ldr	r3, [r7, #12]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop

08007dac <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007db8:	f107 0208 	add.w	r2, r7, #8
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	2162      	movs	r1, #98	@ 0x62
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ff3f 	bl	8007c44 <lis2mdl_read_reg>
 8007dc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10f      	bne.n	8007dee <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	7a3b      	ldrb	r3, [r7, #8]
 8007dd8:	f362 1304 	bfi	r3, r2, #4, #1
 8007ddc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007dde:	f107 0208 	add.w	r2, r7, #8
 8007de2:	2301      	movs	r3, #1
 8007de4:	2162      	movs	r1, #98	@ 0x62
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ff44 	bl	8007c74 <lis2mdl_write_reg>
 8007dec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8007e02:	f107 020c 	add.w	r2, r7, #12
 8007e06:	2306      	movs	r3, #6
 8007e08:	2168      	movs	r1, #104	@ 0x68
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff ff1a 	bl	8007c44 <lis2mdl_read_reg>
 8007e10:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007e12:	7b7b      	ldrb	r3, [r7, #13]
 8007e14:	b21a      	sxth	r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	7b3a      	ldrb	r2, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	b21a      	sxth	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007e32:	7bfa      	ldrb	r2, [r7, #15]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	3302      	adds	r3, #2
 8007e38:	b212      	sxth	r2, r2
 8007e3a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	3302      	adds	r3, #2
 8007e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	7bba      	ldrb	r2, [r7, #14]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	3302      	adds	r3, #2
 8007e54:	b212      	sxth	r2, r2
 8007e56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007e58:	7c7a      	ldrb	r2, [r7, #17]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	b212      	sxth	r2, r2
 8007e60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	3304      	adds	r3, #4
 8007e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	7c3a      	ldrb	r2, [r7, #16]
 8007e72:	4413      	add	r3, r2
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	b212      	sxth	r2, r2
 8007e7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007e7e:	697b      	ldr	r3, [r7, #20]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8007e92:	2301      	movs	r3, #1
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	214f      	movs	r1, #79	@ 0x4f
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff fed3 	bl	8007c44 <lis2mdl_read_reg>
 8007e9e:	60f8      	str	r0, [r7, #12]

  return ret;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007eb6:	f107 0208 	add.w	r2, r7, #8
 8007eba:	2301      	movs	r3, #1
 8007ebc:	2162      	movs	r1, #98	@ 0x62
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fec0 	bl	8007c44 <lis2mdl_read_reg>
 8007ec4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10f      	bne.n	8007eec <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	7a3b      	ldrb	r3, [r7, #8]
 8007ed6:	f362 0341 	bfi	r3, r2, #1, #1
 8007eda:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007edc:	f107 0208 	add.w	r2, r7, #8
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	2162      	movs	r1, #98	@ 0x62
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fec5 	bl	8007c74 <lis2mdl_write_reg>
 8007eea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007f02:	f107 0208 	add.w	r2, r7, #8
 8007f06:	2301      	movs	r3, #1
 8007f08:	2162      	movs	r1, #98	@ 0x62
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fe9a 	bl	8007c44 <lis2mdl_read_reg>
 8007f10:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	7a3b      	ldrb	r3, [r7, #8]
 8007f22:	f362 1345 	bfi	r3, r2, #5, #1
 8007f26:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007f28:	f107 0208 	add.w	r2, r7, #8
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	2162      	movs	r1, #98	@ 0x62
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fe9f 	bl	8007c74 <lis2mdl_write_reg>
 8007f36:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d103      	bne.n	8007f60 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	e051      	b.n	8008004 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	7b1a      	ldrb	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691a      	ldr	r2, [r3, #16]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008010 <LPS22DF_RegisterBusIO+0xcc>)
 8007f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8008014 <LPS22DF_RegisterBusIO+0xd0>)
 8007fa2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e020      	b.n	8008004 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4798      	blx	r3
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e016      	b.n	8008004 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d112      	bne.n	8008004 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10d      	bne.n	8008004 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8007fe8:	2320      	movs	r3, #32
 8007fea:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	210e      	movs	r1, #14
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f9e6 	bl	80083c4 <LPS22DF_Write_Reg>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008002:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8008004:	68fb      	ldr	r3, [r7, #12]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	08008769 	.word	0x08008769
 8008014:	0800879f 	.word	0x0800879f

08008018 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fb40 	bl	80086b0 <LPS22DF_Initialize>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 8008036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800803a:	e004      	b.n	8008046 <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800805c:	2b01      	cmp	r3, #1
 800805e:	d111      	bne.n	8008084 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f882 	bl	800816a <LPS22DF_PRESS_Disable>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 800806c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008070:	e00d      	b.n	800808e <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f921 	bl	80082ba <LPS22DF_TEMP_Disable>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008082:	e004      	b.n	800808e <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3320      	adds	r3, #32
 80080a4:	f107 020c 	add.w	r2, r7, #12
 80080a8:	4611      	mov	r1, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fc0a 	bl	80088c4 <lps22df_id_get>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080ba:	e003      	b.n	80080c4 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 80080bc:	7b3a      	ldrb	r2, [r7, #12]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2201      	movs	r2, #1
 80080e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2200      	movs	r2, #0
 80080f2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	4a08      	ldr	r2, [pc, #32]	@ (8008120 <LPS22DF_GetCapabilities+0x54>)
 8008100:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	4a06      	ldr	r2, [pc, #24]	@ (8008120 <LPS22DF_GetCapabilities+0x54>)
 8008106:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	43480000 	.word	0x43480000

08008124 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	e013      	b.n	8008162 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f103 0220 	add.w	r2, r3, #32
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3333      	adds	r3, #51	@ 0x33
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f000 fcac 	bl	8008aa4 <lps22df_mode_set>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8008152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008156:	e004      	b.n	8008162 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	e030      	b.n	80081e2 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d126      	bne.n	80081d8 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3320      	adds	r3, #32
 800818e:	f107 020c 	add.w	r2, r7, #12
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fce3 	bl	8008b60 <lps22df_mode_get>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081a4:	e01d      	b.n	80081e2 <LPS22DF_PRESS_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3333      	adds	r3, #51	@ 0x33
 80081aa:	461a      	mov	r2, r3
 80081ac:	f107 030c 	add.w	r3, r7, #12
 80081b0:	8819      	ldrh	r1, [r3, #0]
 80081b2:	789b      	ldrb	r3, [r3, #2]
 80081b4:	8011      	strh	r1, [r2, #0]
 80081b6:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80081b8:	2300      	movs	r3, #0
 80081ba:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3320      	adds	r3, #32
 80081c0:	f107 020c 	add.w	r2, r7, #12
 80081c4:	4611      	mov	r1, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fc6c 	bl	8008aa4 <lps22df_mode_set>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80081d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081d6:	e004      	b.n	80081e2 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f900 	bl	80083fc <LPS22DF_GetOutputDataRate>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008218:	2b01      	cmp	r3, #1
 800821a:	d106      	bne.n	800822a <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 800821c:	ed97 0a00 	vldr	s0, [r7]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f955 	bl	80084d0 <LPS22DF_SetOutputDataRate_When_Enabled>
 8008226:	4603      	mov	r3, r0
 8008228:	e005      	b.n	8008236 <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800822a:	ed97 0a00 	vldr	s0, [r7]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f9da 	bl	80085e8 <LPS22DF_SetOutputDataRate_When_Disabled>
 8008234:	4603      	mov	r3, r0
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float *Value)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3320      	adds	r3, #32
 800824c:	f107 0208 	add.w	r2, r7, #8
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fd50 	bl	8008cf8 <lps22df_data_get>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008262:	e003      	b.n	800826c <LPS22DF_PRESS_GetPressure+0x2e>
  }

  *Value = data.pressure.hpa;
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e013      	b.n	80082b2 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f103 0220 	add.w	r2, r3, #32
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3333      	adds	r3, #51	@ 0x33
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	f000 fc04 	bl	8008aa4 <lps22df_mode_set>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082a6:	e004      	b.n	80082b2 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e030      	b.n	8008332 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d126      	bne.n	8008328 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3320      	adds	r3, #32
 80082de:	f107 020c 	add.w	r2, r7, #12
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fc3b 	bl	8008b60 <lps22df_mode_get>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80082f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082f4:	e01d      	b.n	8008332 <LPS22DF_TEMP_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3333      	adds	r3, #51	@ 0x33
 80082fa:	461a      	mov	r2, r3
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	8819      	ldrh	r1, [r3, #0]
 8008302:	789b      	ldrb	r3, [r3, #2]
 8008304:	8011      	strh	r1, [r2, #0]
 8008306:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8008308:	2300      	movs	r3, #0
 800830a:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3320      	adds	r3, #32
 8008310:	f107 020c 	add.w	r2, r7, #12
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fbc4 	bl	8008aa4 <lps22df_mode_set>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8008322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008326:	e004      	b.n	8008332 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f858 	bl	80083fc <LPS22DF_GetOutputDataRate>
 800834c:	4603      	mov	r3, r0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008368:	2b01      	cmp	r3, #1
 800836a:	d106      	bne.n	800837a <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 800836c:	ed97 0a00 	vldr	s0, [r7]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f8ad 	bl	80084d0 <LPS22DF_SetOutputDataRate_When_Enabled>
 8008376:	4603      	mov	r3, r0
 8008378:	e005      	b.n	8008386 <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800837a:	ed97 0a00 	vldr	s0, [r7]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f932 	bl	80085e8 <LPS22DF_SetOutputDataRate_When_Disabled>
 8008384:	4603      	mov	r3, r0
  }
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float *Value)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b086      	sub	sp, #24
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3320      	adds	r3, #32
 800839c:	f107 0208 	add.w	r2, r7, #8
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fca8 	bl	8008cf8 <lps22df_data_get>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083b2:	e003      	b.n	80083bc <LPS22DF_TEMP_GetTemperature+0x2e>
  }

  *Value = data.heat.deg_c;
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
 80083d0:	4613      	mov	r3, r2
 80083d2:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f103 0020 	add.w	r0, r3, #32
 80083da:	1cba      	adds	r2, r7, #2
 80083dc:	78f9      	ldrb	r1, [r7, #3]
 80083de:	2301      	movs	r3, #1
 80083e0:	f000 fa10 	bl	8008804 <lps22df_write_reg>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 80083ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083ee:	e000      	b.n	80083f2 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3320      	adds	r3, #32
 800840e:	f107 0208 	add.w	r2, r7, #8
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fba3 	bl	8008b60 <lps22df_mode_get>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8008420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008424:	e044      	b.n	80084b0 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8008426:	7a3b      	ldrb	r3, [r7, #8]
 8008428:	2b08      	cmp	r3, #8
 800842a:	d83c      	bhi.n	80084a6 <LPS22DF_GetOutputDataRate+0xaa>
 800842c:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <LPS22DF_GetOutputDataRate+0x38>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008459 	.word	0x08008459
 8008438:	08008463 	.word	0x08008463
 800843c:	0800846d 	.word	0x0800846d
 8008440:	08008477 	.word	0x08008477
 8008444:	0800847f 	.word	0x0800847f
 8008448:	08008487 	.word	0x08008487
 800844c:	0800848f 	.word	0x0800848f
 8008450:	08008497 	.word	0x08008497
 8008454:	0800849f 	.word	0x0800849f
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
      break;
 8008460:	e025      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008468:	601a      	str	r2, [r3, #0]
      break;
 800846a:	e020      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8008472:	601a      	str	r2, [r3, #0]
      break;
 8008474:	e01b      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	4a0f      	ldr	r2, [pc, #60]	@ (80084b8 <LPS22DF_GetOutputDataRate+0xbc>)
 800847a:	601a      	str	r2, [r3, #0]
      break;
 800847c:	e017      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	4a0e      	ldr	r2, [pc, #56]	@ (80084bc <LPS22DF_GetOutputDataRate+0xc0>)
 8008482:	601a      	str	r2, [r3, #0]
      break;
 8008484:	e013      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	4a0d      	ldr	r2, [pc, #52]	@ (80084c0 <LPS22DF_GetOutputDataRate+0xc4>)
 800848a:	601a      	str	r2, [r3, #0]
      break;
 800848c:	e00f      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	4a0c      	ldr	r2, [pc, #48]	@ (80084c4 <LPS22DF_GetOutputDataRate+0xc8>)
 8008492:	601a      	str	r2, [r3, #0]
      break;
 8008494:	e00b      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	4a0b      	ldr	r2, [pc, #44]	@ (80084c8 <LPS22DF_GetOutputDataRate+0xcc>)
 800849a:	601a      	str	r2, [r3, #0]
      break;
 800849c:	e007      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	@ (80084cc <LPS22DF_GetOutputDataRate+0xd0>)
 80084a2:	601a      	str	r2, [r3, #0]
      break;
 80084a4:	e003      	b.n	80084ae <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084aa:	60fb      	str	r3, [r7, #12]
      break;
 80084ac:	bf00      	nop
  }

  return ret;
 80084ae:	68fb      	ldr	r3, [r7, #12]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	41200000 	.word	0x41200000
 80084bc:	41c80000 	.word	0x41c80000
 80084c0:	42480000 	.word	0x42480000
 80084c4:	42960000 	.word	0x42960000
 80084c8:	42c80000 	.word	0x42c80000
 80084cc:	43480000 	.word	0x43480000

080084d0 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float Odr)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3320      	adds	r3, #32
 80084e0:	f107 020c 	add.w	r2, r7, #12
 80084e4:	4611      	mov	r1, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fb3a 	bl	8008b60 <lps22df_mode_get>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 80084f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084f6:	e06c      	b.n	80085d2 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 80084f8:	edd7 7a00 	vldr	s15, [r7]
 80084fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008508:	d801      	bhi.n	800850e <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 800850a:	2301      	movs	r3, #1
 800850c:	e042      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800850e:	edd7 7a00 	vldr	s15, [r7]
 8008512:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8008516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	d801      	bhi.n	8008524 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8008520:	2302      	movs	r3, #2
 8008522:	e037      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008524:	edd7 7a00 	vldr	s15, [r7]
 8008528:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800852c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008534:	d801      	bhi.n	800853a <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8008536:	2303      	movs	r3, #3
 8008538:	e02c      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800853a:	edd7 7a00 	vldr	s15, [r7]
 800853e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8008542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854a:	d801      	bhi.n	8008550 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 800854c:	2304      	movs	r3, #4
 800854e:	e021      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008550:	edd7 7a00 	vldr	s15, [r7]
 8008554:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80085dc <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8008558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008560:	d801      	bhi.n	8008566 <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8008562:	2305      	movs	r3, #5
 8008564:	e016      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008566:	edd7 7a00 	vldr	s15, [r7]
 800856a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80085e0 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 800856e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d801      	bhi.n	800857c <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8008578:	2306      	movs	r3, #6
 800857a:	e00b      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800857c:	edd7 7a00 	vldr	s15, [r7]
 8008580:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80085e4 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8008584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	d801      	bhi.n	8008592 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 800858e:	2307      	movs	r3, #7
 8008590:	e000      	b.n	8008594 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008592:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8008594:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3320      	adds	r3, #32
 800859a:	f107 020c 	add.w	r2, r7, #12
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fa7f 	bl	8008aa4 <lps22df_mode_set>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 80085ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085b0:	e00f      	b.n	80085d2 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f103 0220 	add.w	r2, r3, #32
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3333      	adds	r3, #51	@ 0x33
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f000 face 	bl	8008b60 <lps22df_mode_get>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 80085ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085ce:	e000      	b.n	80085d2 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	42480000 	.word	0x42480000
 80085e0:	42960000 	.word	0x42960000
 80085e4:	42c80000 	.word	0x42c80000

080085e8 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float Odr)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 80085f4:	edd7 7a00 	vldr	s15, [r7]
 80085f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008604:	d801      	bhi.n	800860a <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8008606:	2301      	movs	r3, #1
 8008608:	e042      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800860a:	edd7 7a00 	vldr	s15, [r7]
 800860e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8008612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861a:	d801      	bhi.n	8008620 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 800861c:	2302      	movs	r3, #2
 800861e:	e037      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008620:	edd7 7a00 	vldr	s15, [r7]
 8008624:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	d801      	bhi.n	8008636 <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8008632:	2303      	movs	r3, #3
 8008634:	e02c      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008636:	edd7 7a00 	vldr	s15, [r7]
 800863a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800863e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	d801      	bhi.n	800864c <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8008648:	2304      	movs	r3, #4
 800864a:	e021      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800864c:	edd7 7a00 	vldr	s15, [r7]
 8008650:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80086a4 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8008654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	d801      	bhi.n	8008662 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 800865e:	2305      	movs	r3, #5
 8008660:	e016      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008662:	edd7 7a00 	vldr	s15, [r7]
 8008666:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80086a8 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 800866a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800866e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008672:	d801      	bhi.n	8008678 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8008674:	2306      	movs	r3, #6
 8008676:	e00b      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008678:	edd7 7a00 	vldr	s15, [r7]
 800867c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80086ac <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8008680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008688:	d801      	bhi.n	800868e <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 800868a:	2307      	movs	r3, #7
 800868c:	e000      	b.n	8008690 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800868e:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	42480000 	.word	0x42480000
 80086a8:	42960000 	.word	0x42960000
 80086ac:	42c80000 	.word	0x42c80000

080086b0 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3320      	adds	r3, #32
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 f977 	bl	80089b2 <lps22df_init_set>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 80086ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086ce:	e047      	b.n	8008760 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d102      	bne.n	80086de <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 80086d8:	2303      	movs	r3, #3
 80086da:	723b      	strb	r3, [r7, #8]
 80086dc:	e008      	b.n	80086f0 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d102      	bne.n	80086ec <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 80086e6:	2302      	movs	r3, #2
 80086e8:	723b      	strb	r3, [r7, #8]
 80086ea:	e001      	b.n	80086f0 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 80086ec:	2300      	movs	r3, #0
 80086ee:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_AUTO;
 80086f0:	2300      	movs	r3, #0
 80086f2:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3320      	adds	r3, #32
 80086f8:	f107 0208 	add.w	r2, r7, #8
 80086fc:	4611      	mov	r1, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f8f5 	bl	80088ee <lps22df_bus_mode_set>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 800870a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800870e:	e027      	b.n	8008760 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8008710:	2300      	movs	r3, #0
 8008712:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8008714:	2300      	movs	r3, #0
 8008716:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8008718:	2301      	movs	r3, #1
 800871a:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3320      	adds	r3, #32
 8008720:	f107 020c 	add.w	r2, r7, #12
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 f9bc 	bl	8008aa4 <lps22df_mode_set>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8008732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008736:	e013      	b.n	8008760 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f103 0220 	add.w	r2, r3, #32
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3333      	adds	r3, #51	@ 0x33
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f000 fa0b 	bl	8008b60 <lps22df_mode_get>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008754:	e004      	b.n	8008760 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2204      	movs	r2, #4
 800875a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008768:	b590      	push	{r4, r7, lr}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	461a      	mov	r2, r3
 8008774:	460b      	mov	r3, r1
 8008776:	72fb      	strb	r3, [r7, #11]
 8008778:	4613      	mov	r3, r2
 800877a:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	695c      	ldr	r4, [r3, #20]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	7b1b      	ldrb	r3, [r3, #12]
 8008788:	4618      	mov	r0, r3
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	b299      	uxth	r1, r3
 800878e:	893b      	ldrh	r3, [r7, #8]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	47a0      	blx	r4
 8008794:	4603      	mov	r3, r0
}
 8008796:	4618      	mov	r0, r3
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd90      	pop	{r4, r7, pc}

0800879e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800879e:	b590      	push	{r4, r7, lr}
 80087a0:	b087      	sub	sp, #28
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	461a      	mov	r2, r3
 80087aa:	460b      	mov	r3, r1
 80087ac:	72fb      	strb	r3, [r7, #11]
 80087ae:	4613      	mov	r3, r2
 80087b0:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	691c      	ldr	r4, [r3, #16]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	7b1b      	ldrb	r3, [r3, #12]
 80087be:	4618      	mov	r0, r3
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	b299      	uxth	r1, r3
 80087c4:	893b      	ldrh	r3, [r7, #8]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	47a0      	blx	r4
 80087ca:	4603      	mov	r3, r0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd90      	pop	{r4, r7, pc}

080087d4 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	461a      	mov	r2, r3
 80087e0:	460b      	mov	r3, r1
 80087e2:	72fb      	strb	r3, [r7, #11]
 80087e4:	4613      	mov	r3, r2
 80087e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685c      	ldr	r4, [r3, #4]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68d8      	ldr	r0, [r3, #12]
 80087f0:	893b      	ldrh	r3, [r7, #8]
 80087f2:	7af9      	ldrb	r1, [r7, #11]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	47a0      	blx	r4
 80087f8:	6178      	str	r0, [r7, #20]
  return ret;
 80087fa:	697b      	ldr	r3, [r7, #20]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	371c      	adds	r7, #28
 8008800:	46bd      	mov	sp, r7
 8008802:	bd90      	pop	{r4, r7, pc}

08008804 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	461a      	mov	r2, r3
 8008810:	460b      	mov	r3, r1
 8008812:	72fb      	strb	r3, [r7, #11]
 8008814:	4613      	mov	r3, r2
 8008816:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681c      	ldr	r4, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68d8      	ldr	r0, [r3, #12]
 8008820:	893b      	ldrh	r3, [r7, #8]
 8008822:	7af9      	ldrb	r1, [r7, #11]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	47a0      	blx	r4
 8008828:	6178      	str	r0, [r7, #20]
  return ret;
 800882a:	697b      	ldr	r3, [r7, #20]
}
 800882c:	4618      	mov	r0, r3
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	bd90      	pop	{r4, r7, pc}

08008834 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d006      	beq.n	8008852 <bytecpy+0x1e>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <bytecpy+0x1e>
  {
    *target = *source;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	701a      	strb	r2, [r3, #0]
  }
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008872:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800888c <lps22df_from_lsb_to_hPa+0x2c>
 8008876:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800887a:	eef0 7a66 	vmov.f32	s15, s13
}
 800887e:	eeb0 0a67 	vmov.f32	s0, s15
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	49800000 	.word	0x49800000

08008890 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800889a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088a6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80088c0 <lps22df_from_lsb_to_celsius+0x30>
 80088aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80088ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80088b2:	eeb0 0a67 	vmov.f32	s0, s15
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	42c80000 	.word	0x42c80000

080088c4 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 80088ce:	f107 020b 	add.w	r2, r7, #11
 80088d2:	2301      	movs	r3, #1
 80088d4:	210f      	movs	r1, #15
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff ff7c 	bl	80087d4 <lps22df_read_reg>
 80088dc:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 80088de:	7afa      	ldrb	r2, [r7, #11]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	701a      	strb	r2, [r3, #0]

  return ret;
 80088e4:	68fb      	ldr	r3, [r7, #12]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b086      	sub	sp, #24
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_add_t i3c_if_ctrl_add;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 80088f8:	f107 020c 	add.w	r2, r7, #12
 80088fc:	2301      	movs	r3, #1
 80088fe:	210e      	movs	r1, #14
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff ff67 	bl	80087d4 <lps22df_read_reg>
 8008906:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d124      	bne.n	8008958 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	089b      	lsrs	r3, r3, #2
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	b2da      	uxtb	r2, r3
 800891a:	7b3b      	ldrb	r3, [r7, #12]
 800891c:	f362 13c7 	bfi	r3, r2, #7, #1
 8008920:	733b      	strb	r3, [r7, #12]
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	b2da      	uxtb	r2, r3
 800892e:	7b3b      	ldrb	r3, [r7, #12]
 8008930:	f362 1386 	bfi	r3, r2, #6, #1
 8008934:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	7b3b      	ldrb	r3, [r7, #12]
 8008942:	f362 1345 	bfi	r3, r2, #5, #1
 8008946:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8008948:	f107 020c 	add.w	r2, r7, #12
 800894c:	2301      	movs	r3, #1
 800894e:	210e      	movs	r1, #14
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff ff57 	bl	8008804 <lps22df_write_reg>
 8008956:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d107      	bne.n	800896e <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 800895e:	f107 0210 	add.w	r2, r7, #16
 8008962:	2301      	movs	r3, #1
 8008964:	2119      	movs	r1, #25
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff ff34 	bl	80087d4 <lps22df_read_reg>
 800896c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  if (ret == 0)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d119      	bne.n	80089a8 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl_add.asf_on = (uint8_t)val->filter & 0x01U;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	7c3b      	ldrb	r3, [r7, #16]
 8008980:	f362 1345 	bfi	r3, r2, #5, #1
 8008984:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl_add.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	789b      	ldrb	r3, [r3, #2]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	b2da      	uxtb	r2, r3
 8008990:	7c3b      	ldrb	r3, [r7, #16]
 8008992:	f362 0301 	bfi	r3, r2, #0, #2
 8008996:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8008998:	f107 0210 	add.w	r2, r7, #16
 800899c:	2301      	movs	r3, #1
 800899e:	2119      	movs	r1, #25
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff2f 	bl	8008804 <lps22df_write_reg>
 80089a6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  return ret;
 80089a8:	697b      	ldr	r3, [r7, #20]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(stmdev_ctx_t *ctx, lps22df_init_t val)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 80089be:	f107 0208 	add.w	r2, r7, #8
 80089c2:	2302      	movs	r3, #2
 80089c4:	2111      	movs	r1, #17
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff ff04 	bl	80087d4 <lps22df_read_reg>
 80089cc:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d162      	bne.n	8008a9a <lps22df_init_set+0xe8>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 80089d4:	f107 0208 	add.w	r2, r7, #8
 80089d8:	f107 0310 	add.w	r3, r7, #16
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ff28 	bl	8008834 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	f107 030c 	add.w	r3, r7, #12
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff ff1f 	bl	8008834 <bytecpy>

    switch (val)
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d012      	beq.n	8008a22 <lps22df_init_set+0x70>
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	dc3f      	bgt.n	8008a80 <lps22df_init_set+0xce>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01b      	beq.n	8008a3c <lps22df_init_set+0x8a>
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d13b      	bne.n	8008a80 <lps22df_init_set+0xce>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8008a08:	7c3b      	ldrb	r3, [r7, #16]
 8008a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0e:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8008a10:	f107 0210 	add.w	r2, r7, #16
 8008a14:	2301      	movs	r3, #1
 8008a16:	2111      	movs	r1, #17
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fef3 	bl	8008804 <lps22df_write_reg>
 8008a1e:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8008a20:	e03b      	b.n	8008a9a <lps22df_init_set+0xe8>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8008a22:	7c3b      	ldrb	r3, [r7, #16]
 8008a24:	f043 0304 	orr.w	r3, r3, #4
 8008a28:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8008a2a:	f107 0210 	add.w	r2, r7, #16
 8008a2e:	2301      	movs	r3, #1
 8008a30:	2111      	movs	r1, #17
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fee6 	bl	8008804 <lps22df_write_reg>
 8008a38:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8008a3a:	e02e      	b.n	8008a9a <lps22df_init_set+0xe8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8008a3c:	7c3b      	ldrb	r3, [r7, #16]
 8008a3e:	f043 0308 	orr.w	r3, r3, #8
 8008a42:	743b      	strb	r3, [r7, #16]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8008a44:	7b3b      	ldrb	r3, [r7, #12]
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	733b      	strb	r3, [r7, #12]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8008a4c:	f107 0210 	add.w	r2, r7, #16
 8008a50:	f107 0308 	add.w	r3, r7, #8
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff feec 	bl	8008834 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8008a5c:	f107 020c 	add.w	r2, r7, #12
 8008a60:	f107 0308 	add.w	r3, r7, #8
 8008a64:	3301      	adds	r3, #1
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff fee3 	bl	8008834 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8008a6e:	f107 0208 	add.w	r2, r7, #8
 8008a72:	2302      	movs	r3, #2
 8008a74:	2111      	movs	r1, #17
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fec4 	bl	8008804 <lps22df_write_reg>
 8008a7c:	6178      	str	r0, [r7, #20]
        break;
 8008a7e:	e00c      	b.n	8008a9a <lps22df_init_set+0xe8>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8008a80:	7c3b      	ldrb	r3, [r7, #16]
 8008a82:	f043 0304 	orr.w	r3, r3, #4
 8008a86:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8008a88:	f107 0210 	add.w	r2, r7, #16
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	2111      	movs	r1, #17
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff feb7 	bl	8008804 <lps22df_write_reg>
 8008a96:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8008a98:	bf00      	nop
    }
  }
  return ret;
 8008a9a:	697b      	ldr	r3, [r7, #20]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8008aae:	f107 0208 	add.w	r2, r7, #8
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	2110      	movs	r1, #16
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fe8c 	bl	80087d4 <lps22df_read_reg>
 8008abc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d148      	bne.n	8008b56 <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8008ac4:	f107 0208 	add.w	r2, r7, #8
 8008ac8:	f107 0310 	add.w	r3, r7, #16
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff feb0 	bl	8008834 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8008ad4:	f107 0308 	add.w	r3, r7, #8
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	f107 030c 	add.w	r3, r7, #12
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fea7 	bl	8008834 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	7c3b      	ldrb	r3, [r7, #16]
 8008af2:	f362 03c6 	bfi	r3, r2, #3, #4
 8008af6:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	7c3b      	ldrb	r3, [r7, #16]
 8008b04:	f362 0302 	bfi	r3, r2, #0, #3
 8008b08:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	789b      	ldrb	r3, [r3, #2]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	7b3b      	ldrb	r3, [r7, #12]
 8008b16:	f362 1304 	bfi	r3, r2, #4, #1
 8008b1a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8008b1c:	7b3b      	ldrb	r3, [r7, #12]
 8008b1e:	f36f 1345 	bfc	r3, #5, #1
 8008b22:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8008b24:	f107 0210 	add.w	r2, r7, #16
 8008b28:	f107 0308 	add.w	r3, r7, #8
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fe80 	bl	8008834 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8008b34:	f107 020c 	add.w	r2, r7, #12
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fe77 	bl	8008834 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8008b46:	f107 0208 	add.w	r2, r7, #8
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	2110      	movs	r1, #16
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff fe58 	bl	8008804 <lps22df_write_reg>
 8008b54:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008b56:	697b      	ldr	r3, [r7, #20]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8008b6a:	f107 0208 	add.w	r2, r7, #8
 8008b6e:	2302      	movs	r3, #2
 8008b70:	2110      	movs	r1, #16
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff fe2e 	bl	80087d4 <lps22df_read_reg>
 8008b78:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f040 80b6 	bne.w	8008cee <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8008b82:	f107 0208 	add.w	r2, r7, #8
 8008b86:	f107 0310 	add.w	r3, r7, #16
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fe51 	bl	8008834 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	f107 030c 	add.w	r3, r7, #12
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fe48 	bl	8008834 <bytecpy>

    switch (ctrl_reg1.odr)
 8008ba4:	7c3b      	ldrb	r3, [r7, #16]
 8008ba6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	d839      	bhi.n	8008c24 <lps22df_mode_get+0xc4>
 8008bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb8 <lps22df_mode_get+0x58>)
 8008bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb6:	bf00      	nop
 8008bb8:	08008bdd 	.word	0x08008bdd
 8008bbc:	08008be5 	.word	0x08008be5
 8008bc0:	08008bed 	.word	0x08008bed
 8008bc4:	08008bf5 	.word	0x08008bf5
 8008bc8:	08008bfd 	.word	0x08008bfd
 8008bcc:	08008c05 	.word	0x08008c05
 8008bd0:	08008c0d 	.word	0x08008c0d
 8008bd4:	08008c15 	.word	0x08008c15
 8008bd8:	08008c1d 	.word	0x08008c1d
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
        break;
 8008be2:	e023      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2201      	movs	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
        break;
 8008bea:	e01f      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	701a      	strb	r2, [r3, #0]
        break;
 8008bf2:	e01b      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	701a      	strb	r2, [r3, #0]
        break;
 8008bfa:	e017      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2204      	movs	r2, #4
 8008c00:	701a      	strb	r2, [r3, #0]
        break;
 8008c02:	e013      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2205      	movs	r2, #5
 8008c08:	701a      	strb	r2, [r3, #0]
        break;
 8008c0a:	e00f      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2206      	movs	r2, #6
 8008c10:	701a      	strb	r2, [r3, #0]
        break;
 8008c12:	e00b      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2207      	movs	r2, #7
 8008c18:	701a      	strb	r2, [r3, #0]
        break;
 8008c1a:	e007      	b.n	8008c2c <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2208      	movs	r2, #8
 8008c20:	701a      	strb	r2, [r3, #0]
        break;
 8008c22:	e003      	b.n	8008c2c <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	701a      	strb	r2, [r3, #0]
        break;
 8008c2a:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8008c2c:	7c3b      	ldrb	r3, [r7, #16]
 8008c2e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b07      	cmp	r3, #7
 8008c36:	d833      	bhi.n	8008ca0 <lps22df_mode_get+0x140>
 8008c38:	a201      	add	r2, pc, #4	@ (adr r2, 8008c40 <lps22df_mode_get+0xe0>)
 8008c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3e:	bf00      	nop
 8008c40:	08008c61 	.word	0x08008c61
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c71 	.word	0x08008c71
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	08008c81 	.word	0x08008c81
 8008c54:	08008c89 	.word	0x08008c89
 8008c58:	08008c91 	.word	0x08008c91
 8008c5c:	08008c99 	.word	0x08008c99
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	705a      	strb	r2, [r3, #1]
        break;
 8008c66:	e01f      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	705a      	strb	r2, [r3, #1]
        break;
 8008c6e:	e01b      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2202      	movs	r2, #2
 8008c74:	705a      	strb	r2, [r3, #1]
        break;
 8008c76:	e017      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	705a      	strb	r2, [r3, #1]
        break;
 8008c7e:	e013      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2204      	movs	r2, #4
 8008c84:	705a      	strb	r2, [r3, #1]
        break;
 8008c86:	e00f      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	705a      	strb	r2, [r3, #1]
        break;
 8008c8e:	e00b      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2206      	movs	r2, #6
 8008c94:	705a      	strb	r2, [r3, #1]
        break;
 8008c96:	e007      	b.n	8008ca8 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2207      	movs	r2, #7
 8008c9c:	705a      	strb	r2, [r3, #1]
        break;
 8008c9e:	e003      	b.n	8008ca8 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	705a      	strb	r2, [r3, #1]
        break;
 8008ca6:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8008ca8:	7b3b      	ldrb	r3, [r7, #12]
 8008caa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	7b3a      	ldrb	r2, [r7, #12]
 8008cb4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8008cb8:	b2d2      	uxtb	r2, r2
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d00e      	beq.n	8008cde <lps22df_mode_get+0x17e>
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	dc10      	bgt.n	8008ce6 <lps22df_mode_get+0x186>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <lps22df_mode_get+0x16e>
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d004      	beq.n	8008cd6 <lps22df_mode_get+0x176>
 8008ccc:	e00b      	b.n	8008ce6 <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	709a      	strb	r2, [r3, #2]
        break;
 8008cd4:	e00b      	b.n	8008cee <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	709a      	strb	r2, [r3, #2]
        break;
 8008cdc:	e007      	b.n	8008cee <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2203      	movs	r2, #3
 8008ce2:	709a      	strb	r2, [r3, #2]
        break;
 8008ce4:	e003      	b.n	8008cee <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	709a      	strb	r2, [r3, #2]
        break;
 8008cec:	bf00      	nop
    }
  }
  return ret;
 8008cee:	697b      	ldr	r3, [r7, #20]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <lps22df_data_get>:
  * @param  data  data retrieved from the sensor.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_data_get(stmdev_ctx_t *ctx, lps22df_data_t *data)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint8_t buff[5];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, buff, 5);
 8008d02:	f107 020c 	add.w	r2, r7, #12
 8008d06:	2305      	movs	r3, #5
 8008d08:	2128      	movs	r1, #40	@ 0x28
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff fd62 	bl	80087d4 <lps22df_read_reg>
 8008d10:	6178      	str	r0, [r7, #20]

  /* pressure conversion */
  data->pressure.raw = (int32_t)buff[2];
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	461a      	mov	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[1];
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	7b7a      	ldrb	r2, [r7, #13]
 8008d22:	441a      	add	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[0];
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	7b3a      	ldrb	r2, [r7, #12]
 8008d30:	441a      	add	r2, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	605a      	str	r2, [r3, #4]
  data->pressure.raw = data->pressure.raw * 256;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	021a      	lsls	r2, r3, #8
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	605a      	str	r2, [r3, #4]

  data->pressure.hpa = lps22df_from_lsb_to_hPa(data->pressure.raw);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff fd8b 	bl	8008860 <lps22df_from_lsb_to_hPa>
 8008d4a:	eef0 7a40 	vmov.f32	s15, s0
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	edc3 7a00 	vstr	s15, [r3]


  /* temperature conversion */
  data->heat.raw = (int16_t)buff[4];
 8008d54:	7c3b      	ldrb	r3, [r7, #16]
 8008d56:	b21a      	sxth	r2, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	819a      	strh	r2, [r3, #12]
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	7bfa      	ldrb	r2, [r7, #15]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	b21a      	sxth	r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	819a      	strh	r2, [r3, #12]
  data->heat.deg_c = lps22df_from_lsb_to_celsius(data->heat.raw);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fd88 	bl	8008890 <lps22df_from_lsb_to_celsius>
 8008d80:	eef0 7a40 	vmov.f32	s15, s0
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	edc3 7a02 	vstr	s15, [r3, #8]

  return ret;
 8008d8a:	697b      	ldr	r3, [r7, #20]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d103      	bne.n	8008db0 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	e04d      	b.n	8008e4c <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	7b1a      	ldrb	r2, [r3, #12]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	695a      	ldr	r2, [r3, #20]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a1b      	ldr	r2, [pc, #108]	@ (8008e58 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8008dec:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e5c <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8008df2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 8008e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	e020      	b.n	8008e4c <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4798      	blx	r3
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e016      	b.n	8008e4c <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d112      	bne.n	8008e4c <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10d      	bne.n	8008e4c <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8008e30:	230c      	movs	r3, #12
 8008e32:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	461a      	mov	r2, r3
 8008e38:	2112      	movs	r1, #18
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fdbe 	bl	80099bc <LSM6DSO16IS_Write_Reg>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 8008e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e4a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	08009e85 	.word	0x08009e85
 8008e5c:	08009ebb 	.word	0x08009ebb

08008e60 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fdc1 	bl	80099f6 <LSM6DSO16IS_Set_Mem_Bank>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 8008e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3320      	adds	r3, #32
 8008e84:	2101      	movs	r1, #1
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 fbd0 	bl	800a62c <lsm6dso16is_auto_increment_set>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e96:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3320      	adds	r3, #32
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fbea 	bl	800a678 <lsm6dso16is_block_data_update_set>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8008eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008eae:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2204      	movs	r2, #4
 8008eb4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3320      	adds	r3, #32
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 f904 	bl	800a0cc <lsm6dso16is_xl_data_rate_set>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 8008eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ece:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3320      	adds	r3, #32
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 f89a 	bl	800a010 <lsm6dso16is_xl_full_scale_set>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 8008ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2204      	movs	r2, #4
 8008eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3320      	adds	r3, #32
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fa9c 	bl	800a434 <lsm6dso16is_gy_data_rate_set>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f06:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3320      	adds	r3, #32
 8008f0c:	2103      	movs	r1, #3
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fa04 	bl	800a31c <lsm6dso16is_gy_full_scale_set>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f1e:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f890 	bl	800906a <LSM6DSO16IS_ACC_Disable>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 8008f50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f54:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fad0 	bl	80094fc <LSM6DSO16IS_GYRO_Disable>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f66:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10b      	bne.n	8008f86 <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8008f86:	68fb      	ldr	r3, [r7, #12]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3320      	adds	r3, #32
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fffc 	bl	8009fa2 <lsm6dso16is_device_id_get>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8008fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008fe8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2210      	movs	r2, #16
 8008fee:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	4a07      	ldr	r2, [pc, #28]	@ (8009018 <LSM6DSO16IS_GetCapabilities+0x58>)
 8008ffa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	4a06      	ldr	r2, [pc, #24]	@ (8009018 <LSM6DSO16IS_GetCapabilities+0x58>)
 8009000:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	45505000 	.word	0x45505000

0800901c <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800902e:	2b01      	cmp	r3, #1
 8009030:	d102      	bne.n	8009038 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	e013      	b.n	8009060 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f103 0220 	add.w	r2, r3, #32
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f001 f840 	bl	800a0cc <lsm6dso16is_xl_data_rate_set>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8009052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009056:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8009060:	68fb      	ldr	r3, [r7, #12]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e01e      	b.n	80090c4 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f103 0220 	add.w	r2, r3, #32
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3333      	adds	r3, #51	@ 0x33
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f001 f85a 	bl	800a14c <lsm6dso16is_xl_data_rate_get>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 800909e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090a2:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3320      	adds	r3, #32
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f80e 	bl	800a0cc <lsm6dso16is_xl_data_rate_set>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 80090b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090ba:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80090c4:	68fb      	ldr	r3, [r7, #12]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3320      	adds	r3, #32
 80090e2:	f107 020b 	add.w	r2, r7, #11
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 ffb7 	bl	800a05c <lsm6dso16is_xl_full_scale_get>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090f8:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d81b      	bhi.n	8009138 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8009100:	a201      	add	r2, pc, #4	@ (adr r2, 8009108 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	08009119 	.word	0x08009119
 800910c:	08009131 	.word	0x08009131
 8009110:	08009121 	.word	0x08009121
 8009114:	08009129 	.word	0x08009129
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	4a0c      	ldr	r2, [pc, #48]	@ (800914c <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 800911c:	601a      	str	r2, [r3, #0]
      break;
 800911e:	e00f      	b.n	8009140 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	4a0b      	ldr	r2, [pc, #44]	@ (8009150 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8009124:	601a      	str	r2, [r3, #0]
      break;
 8009126:	e00b      	b.n	8009140 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	4a0a      	ldr	r2, [pc, #40]	@ (8009154 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 800912c:	601a      	str	r2, [r3, #0]
      break;
 800912e:	e007      	b.n	8009140 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	4a09      	ldr	r2, [pc, #36]	@ (8009158 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8009134:	601a      	str	r2, [r3, #0]
      break;
 8009136:	e003      	b.n	8009140 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800913c:	60fb      	str	r3, [r7, #12]
      break;
 800913e:	bf00      	nop
  }

  return ret;
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	3d79db23 	.word	0x3d79db23
 8009150:	3df9db23 	.word	0x3df9db23
 8009154:	3e79db23 	.word	0x3e79db23
 8009158:	3ef9db23 	.word	0x3ef9db23

0800915c <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3320      	adds	r3, #32
 800916e:	f107 020b 	add.w	r2, r7, #11
 8009172:	4611      	mov	r1, r2
 8009174:	4618      	mov	r0, r3
 8009176:	f000 ffe9 	bl	800a14c <lsm6dso16is_xl_data_rate_get>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009184:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	2b1b      	cmp	r3, #27
 800918a:	d86c      	bhi.n	8009266 <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 800918c:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	08009205 	.word	0x08009205
 8009198:	08009217 	.word	0x08009217
 800919c:	0800921f 	.word	0x0800921f
 80091a0:	08009227 	.word	0x08009227
 80091a4:	0800922f 	.word	0x0800922f
 80091a8:	08009237 	.word	0x08009237
 80091ac:	0800923f 	.word	0x0800923f
 80091b0:	08009247 	.word	0x08009247
 80091b4:	0800924f 	.word	0x0800924f
 80091b8:	08009257 	.word	0x08009257
 80091bc:	0800925f 	.word	0x0800925f
 80091c0:	08009267 	.word	0x08009267
 80091c4:	08009267 	.word	0x08009267
 80091c8:	08009267 	.word	0x08009267
 80091cc:	08009267 	.word	0x08009267
 80091d0:	08009267 	.word	0x08009267
 80091d4:	08009267 	.word	0x08009267
 80091d8:	08009217 	.word	0x08009217
 80091dc:	0800921f 	.word	0x0800921f
 80091e0:	08009227 	.word	0x08009227
 80091e4:	0800922f 	.word	0x0800922f
 80091e8:	08009237 	.word	0x08009237
 80091ec:	0800923f 	.word	0x0800923f
 80091f0:	08009247 	.word	0x08009247
 80091f4:	0800924f 	.word	0x0800924f
 80091f8:	08009257 	.word	0x08009257
 80091fc:	0800925f 	.word	0x0800925f
 8009200:	0800920f 	.word	0x0800920f
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
      break;
 800920c:	e02f      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	4a19      	ldr	r2, [pc, #100]	@ (8009278 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8009212:	601a      	str	r2, [r3, #0]
      break;
 8009214:	e02b      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	4a18      	ldr	r2, [pc, #96]	@ (800927c <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 800921a:	601a      	str	r2, [r3, #0]
      break;
 800921c:	e027      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	4a17      	ldr	r2, [pc, #92]	@ (8009280 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8009222:	601a      	str	r2, [r3, #0]
      break;
 8009224:	e023      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	4a16      	ldr	r2, [pc, #88]	@ (8009284 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 800922a:	601a      	str	r2, [r3, #0]
      break;
 800922c:	e01f      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	4a15      	ldr	r2, [pc, #84]	@ (8009288 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8009232:	601a      	str	r2, [r3, #0]
      break;
 8009234:	e01b      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	4a14      	ldr	r2, [pc, #80]	@ (800928c <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 800923a:	601a      	str	r2, [r3, #0]
      break;
 800923c:	e017      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	4a13      	ldr	r2, [pc, #76]	@ (8009290 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8009242:	601a      	str	r2, [r3, #0]
      break;
 8009244:	e013      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	4a12      	ldr	r2, [pc, #72]	@ (8009294 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 800924a:	601a      	str	r2, [r3, #0]
      break;
 800924c:	e00f      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	4a11      	ldr	r2, [pc, #68]	@ (8009298 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8009252:	601a      	str	r2, [r3, #0]
      break;
 8009254:	e00b      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	4a10      	ldr	r2, [pc, #64]	@ (800929c <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 800925a:	601a      	str	r2, [r3, #0]
      break;
 800925c:	e007      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	4a0f      	ldr	r2, [pc, #60]	@ (80092a0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8009262:	601a      	str	r2, [r3, #0]
      break;
 8009264:	e003      	b.n	800926e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800926a:	60fb      	str	r3, [r7, #12]
      break;
 800926c:	bf00      	nop
  }

  return ret;
 800926e:	68fb      	ldr	r3, [r7, #12]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	3fcccccd 	.word	0x3fcccccd
 800927c:	41480000 	.word	0x41480000
 8009280:	41d00000 	.word	0x41d00000
 8009284:	42500000 	.word	0x42500000
 8009288:	42d00000 	.word	0x42d00000
 800928c:	43500000 	.word	0x43500000
 8009290:	43d00000 	.word	0x43d00000
 8009294:	44504000 	.word	0x44504000
 8009298:	44d06000 	.word	0x44d06000
 800929c:	45505000 	.word	0x45505000
 80092a0:	45d05800 	.word	0x45d05800

080092a4 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d106      	bne.n	80092c8 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80092ba:	ed97 0a00 	vldr	s0, [r7]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fbc0 	bl	8009a44 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	e005      	b.n	80092d4 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80092c8:	ed97 0a00 	vldr	s0, [r7]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc47 	bl	8009b60 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 80092d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80092d4:	68fb      	ldr	r3, [r7, #12]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3320      	adds	r3, #32
 80092f2:	f107 020b 	add.w	r2, r7, #11
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 feaf 	bl	800a05c <lsm6dso16is_xl_full_scale_get>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009308:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2b03      	cmp	r3, #3
 800930e:	d81b      	bhi.n	8009348 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8009310:	a201      	add	r2, pc, #4	@ (adr r2, 8009318 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	08009329 	.word	0x08009329
 800931c:	08009341 	.word	0x08009341
 8009320:	08009331 	.word	0x08009331
 8009324:	08009339 	.word	0x08009339
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2202      	movs	r2, #2
 800932c:	601a      	str	r2, [r3, #0]
      break;
 800932e:	e00f      	b.n	8009350 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2204      	movs	r2, #4
 8009334:	601a      	str	r2, [r3, #0]
      break;
 8009336:	e00b      	b.n	8009350 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	601a      	str	r2, [r3, #0]
      break;
 800933e:	e007      	b.n	8009350 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2210      	movs	r2, #16
 8009344:	601a      	str	r2, [r3, #0]
      break;
 8009346:	e003      	b.n	8009350 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800934c:	60fb      	str	r3, [r7, #12]
      break;
 800934e:	bf00      	nop
  }

  return ret;
 8009350:	68fb      	ldr	r3, [r7, #12]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop

0800935c <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b02      	cmp	r3, #2
 800936e:	dd0b      	ble.n	8009388 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b04      	cmp	r3, #4
 8009374:	dd06      	ble.n	8009384 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b08      	cmp	r3, #8
 800937a:	dc01      	bgt.n	8009380 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 800937c:	2303      	movs	r3, #3
 800937e:	e004      	b.n	800938a <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8009380:	2301      	movs	r3, #1
 8009382:	e002      	b.n	800938a <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8009384:	2302      	movs	r3, #2
 8009386:	e000      	b.n	800938a <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8009388:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 800938a:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3320      	adds	r3, #32
 8009390:	7afa      	ldrb	r2, [r7, #11]
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fe3b 	bl	800a010 <lsm6dso16is_xl_full_scale_set>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 80093a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80093a6:	68fb      	ldr	r3, [r7, #12]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3320      	adds	r3, #32
 80093c2:	f107 020c 	add.w	r2, r7, #12
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f9c3 	bl	800a754 <lsm6dso16is_acceleration_raw_get>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80093d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093d8:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 80093da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 80093e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 80093ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	809a      	strh	r2, [r3, #4]

  return ret;
 80093f2:	697b      	ldr	r3, [r7, #20]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 800940a:	f04f 0300 	mov.w	r3, #0
 800940e:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3320      	adds	r3, #32
 8009414:	f107 020c 	add.w	r2, r7, #12
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f001 f99a 	bl	800a754 <lsm6dso16is_acceleration_raw_get>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8009426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800942a:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fe4c 	bl	80090d0 <LSM6DSO16IS_ACC_GetSensitivity>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 800943e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009442:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8009444:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009448:	ee07 3a90 	vmov	s15, r3
 800944c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009450:	edd7 7a02 	vldr	s15, [r7, #8]
 8009454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800945c:	ee17 2a90 	vmov	r2, s15
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8009464:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009470:	edd7 7a02 	vldr	s15, [r7, #8]
 8009474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800947c:	ee17 2a90 	vmov	r2, s15
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8009484:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009490:	edd7 7a02 	vldr	s15, [r7, #8]
 8009494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800949c:	ee17 2a90 	vmov	r2, s15
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	609a      	str	r2, [r3, #8]

  return ret;
 80094a4:	697b      	ldr	r3, [r7, #20]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d102      	bne.n	80094ca <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	e013      	b.n	80094f2 <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f103 0220 	add.w	r2, r3, #32
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094d6:	4619      	mov	r1, r3
 80094d8:	4610      	mov	r0, r2
 80094da:	f000 ffab 	bl	800a434 <lsm6dso16is_gy_data_rate_set>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80094e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094e8:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 80094f2:	68fb      	ldr	r3, [r7, #12]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d102      	bne.n	8009518 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e01e      	b.n	8009556 <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f103 0220 	add.w	r2, r3, #32
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3334      	adds	r3, #52	@ 0x34
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f000 ffc5 	bl	800a4b4 <lsm6dso16is_gy_data_rate_get>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8009530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009534:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	3320      	adds	r3, #32
 800953a:	2100      	movs	r1, #0
 800953c:	4618      	mov	r0, r3
 800953e:	f000 ff79 	bl	800a434 <lsm6dso16is_gy_data_rate_set>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8009548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800954c:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8009556:	68fb      	ldr	r3, [r7, #12]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3320      	adds	r3, #32
 8009572:	f107 020b 	add.w	r2, r7, #11
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f000 feff 	bl	800a37c <lsm6dso16is_gy_full_scale_get>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009588:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	2b10      	cmp	r3, #16
 800958e:	d839      	bhi.n	8009604 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8009590:	a201      	add	r2, pc, #4	@ (adr r2, 8009598 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8009592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009596:	bf00      	nop
 8009598:	080095e5 	.word	0x080095e5
 800959c:	080095ed 	.word	0x080095ed
 80095a0:	080095f5 	.word	0x080095f5
 80095a4:	080095fd 	.word	0x080095fd
 80095a8:	08009605 	.word	0x08009605
 80095ac:	08009605 	.word	0x08009605
 80095b0:	08009605 	.word	0x08009605
 80095b4:	08009605 	.word	0x08009605
 80095b8:	08009605 	.word	0x08009605
 80095bc:	08009605 	.word	0x08009605
 80095c0:	08009605 	.word	0x08009605
 80095c4:	08009605 	.word	0x08009605
 80095c8:	08009605 	.word	0x08009605
 80095cc:	08009605 	.word	0x08009605
 80095d0:	08009605 	.word	0x08009605
 80095d4:	08009605 	.word	0x08009605
 80095d8:	080095dd 	.word	0x080095dd
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	4a0e      	ldr	r2, [pc, #56]	@ (8009618 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 80095e0:	601a      	str	r2, [r3, #0]
      break;
 80095e2:	e013      	b.n	800960c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	4a0d      	ldr	r2, [pc, #52]	@ (800961c <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 80095e8:	601a      	str	r2, [r3, #0]
      break;
 80095ea:	e00f      	b.n	800960c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 80095f0:	601a      	str	r2, [r3, #0]
      break;
 80095f2:	e00b      	b.n	800960c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	4a0b      	ldr	r2, [pc, #44]	@ (8009624 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 80095f8:	601a      	str	r2, [r3, #0]
      break;
 80095fa:	e007      	b.n	800960c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009628 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8009600:	601a      	str	r2, [r3, #0]
      break;
 8009602:	e003      	b.n	800960c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009608:	60fb      	str	r3, [r7, #12]
      break;
 800960a:	bf00      	nop
  }

  return ret;
 800960c:	68fb      	ldr	r3, [r7, #12]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	408c0000 	.word	0x408c0000
 800961c:	410c0000 	.word	0x410c0000
 8009620:	418c0000 	.word	0x418c0000
 8009624:	420c0000 	.word	0x420c0000
 8009628:	428c0000 	.word	0x428c0000

0800962c <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3320      	adds	r3, #32
 800963e:	f107 020b 	add.w	r2, r7, #11
 8009642:	4611      	mov	r1, r2
 8009644:	4618      	mov	r0, r3
 8009646:	f000 ff35 	bl	800a4b4 <lsm6dso16is_gy_data_rate_get>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009654:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8009656:	7afb      	ldrb	r3, [r7, #11]
 8009658:	2b1a      	cmp	r3, #26
 800965a:	d866      	bhi.n	800972a <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 800965c:	a201      	add	r2, pc, #4	@ (adr r2, 8009664 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 800965e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009662:	bf00      	nop
 8009664:	080096d1 	.word	0x080096d1
 8009668:	080096db 	.word	0x080096db
 800966c:	080096e3 	.word	0x080096e3
 8009670:	080096eb 	.word	0x080096eb
 8009674:	080096f3 	.word	0x080096f3
 8009678:	080096fb 	.word	0x080096fb
 800967c:	08009703 	.word	0x08009703
 8009680:	0800970b 	.word	0x0800970b
 8009684:	08009713 	.word	0x08009713
 8009688:	0800971b 	.word	0x0800971b
 800968c:	08009723 	.word	0x08009723
 8009690:	0800972b 	.word	0x0800972b
 8009694:	0800972b 	.word	0x0800972b
 8009698:	0800972b 	.word	0x0800972b
 800969c:	0800972b 	.word	0x0800972b
 80096a0:	0800972b 	.word	0x0800972b
 80096a4:	0800972b 	.word	0x0800972b
 80096a8:	080096db 	.word	0x080096db
 80096ac:	080096e3 	.word	0x080096e3
 80096b0:	080096eb 	.word	0x080096eb
 80096b4:	080096f3 	.word	0x080096f3
 80096b8:	080096fb 	.word	0x080096fb
 80096bc:	08009703 	.word	0x08009703
 80096c0:	0800970b 	.word	0x0800970b
 80096c4:	08009713 	.word	0x08009713
 80096c8:	0800971b 	.word	0x0800971b
 80096cc:	08009723 	.word	0x08009723
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
      break;
 80096d8:	e02b      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	4a17      	ldr	r2, [pc, #92]	@ (800973c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 80096de:	601a      	str	r2, [r3, #0]
      break;
 80096e0:	e027      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	4a16      	ldr	r2, [pc, #88]	@ (8009740 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 80096e6:	601a      	str	r2, [r3, #0]
      break;
 80096e8:	e023      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	4a15      	ldr	r2, [pc, #84]	@ (8009744 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 80096ee:	601a      	str	r2, [r3, #0]
      break;
 80096f0:	e01f      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	4a14      	ldr	r2, [pc, #80]	@ (8009748 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 80096f6:	601a      	str	r2, [r3, #0]
      break;
 80096f8:	e01b      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	4a13      	ldr	r2, [pc, #76]	@ (800974c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 80096fe:	601a      	str	r2, [r3, #0]
      break;
 8009700:	e017      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	4a12      	ldr	r2, [pc, #72]	@ (8009750 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8009706:	601a      	str	r2, [r3, #0]
      break;
 8009708:	e013      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	4a11      	ldr	r2, [pc, #68]	@ (8009754 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 800970e:	601a      	str	r2, [r3, #0]
      break;
 8009710:	e00f      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	4a10      	ldr	r2, [pc, #64]	@ (8009758 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8009716:	601a      	str	r2, [r3, #0]
      break;
 8009718:	e00b      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	4a0f      	ldr	r2, [pc, #60]	@ (800975c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 800971e:	601a      	str	r2, [r3, #0]
      break;
 8009720:	e007      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	4a0e      	ldr	r2, [pc, #56]	@ (8009760 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8009726:	601a      	str	r2, [r3, #0]
      break;
 8009728:	e003      	b.n	8009732 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 800972a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800972e:	60fb      	str	r3, [r7, #12]
      break;
 8009730:	bf00      	nop
  }

  return ret;
 8009732:	68fb      	ldr	r3, [r7, #12]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	41480000 	.word	0x41480000
 8009740:	41d00000 	.word	0x41d00000
 8009744:	42500000 	.word	0x42500000
 8009748:	42d00000 	.word	0x42d00000
 800974c:	43500000 	.word	0x43500000
 8009750:	43d00000 	.word	0x43d00000
 8009754:	44504000 	.word	0x44504000
 8009758:	44d06000 	.word	0x44d06000
 800975c:	45505000 	.word	0x45505000
 8009760:	45d05800 	.word	0x45d05800

08009764 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009776:	2b01      	cmp	r3, #1
 8009778:	d106      	bne.n	8009788 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800977a:	ed97 0a00 	vldr	s0, [r7]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa70 	bl	8009c64 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	e005      	b.n	8009794 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009788:	ed97 0a00 	vldr	s0, [r7]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 faf7 	bl	8009d80 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8009792:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009794:	68fb      	ldr	r3, [r7, #12]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3320      	adds	r3, #32
 80097b2:	f107 020b 	add.w	r2, r7, #11
 80097b6:	4611      	mov	r1, r2
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 fddf 	bl	800a37c <lsm6dso16is_gy_full_scale_get>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097c8:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	2b10      	cmp	r3, #16
 80097ce:	d83c      	bhi.n	800984a <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 80097d0:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	08009825 	.word	0x08009825
 80097dc:	0800982d 	.word	0x0800982d
 80097e0:	08009837 	.word	0x08009837
 80097e4:	08009841 	.word	0x08009841
 80097e8:	0800984b 	.word	0x0800984b
 80097ec:	0800984b 	.word	0x0800984b
 80097f0:	0800984b 	.word	0x0800984b
 80097f4:	0800984b 	.word	0x0800984b
 80097f8:	0800984b 	.word	0x0800984b
 80097fc:	0800984b 	.word	0x0800984b
 8009800:	0800984b 	.word	0x0800984b
 8009804:	0800984b 	.word	0x0800984b
 8009808:	0800984b 	.word	0x0800984b
 800980c:	0800984b 	.word	0x0800984b
 8009810:	0800984b 	.word	0x0800984b
 8009814:	0800984b 	.word	0x0800984b
 8009818:	0800981d 	.word	0x0800981d
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	227d      	movs	r2, #125	@ 0x7d
 8009820:	601a      	str	r2, [r3, #0]
      break;
 8009822:	e016      	b.n	8009852 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	22fa      	movs	r2, #250	@ 0xfa
 8009828:	601a      	str	r2, [r3, #0]
      break;
 800982a:	e012      	b.n	8009852 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009832:	601a      	str	r2, [r3, #0]
      break;
 8009834:	e00d      	b.n	8009852 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800983c:	601a      	str	r2, [r3, #0]
      break;
 800983e:	e008      	b.n	8009852 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009846:	601a      	str	r2, [r3, #0]
      break;
 8009848:	e003      	b.n	8009852 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 800984a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800984e:	60fb      	str	r3, [r7, #12]
      break;
 8009850:	bf00      	nop
  }

  return ret;
 8009852:	68fb      	ldr	r3, [r7, #12]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b7d      	cmp	r3, #125	@ 0x7d
 800986e:	dd12      	ble.n	8009896 <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2bfa      	cmp	r3, #250	@ 0xfa
 8009874:	dd0d      	ble.n	8009892 <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800987c:	dd07      	ble.n	800988e <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009884:	dc01      	bgt.n	800988a <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8009886:	2302      	movs	r3, #2
 8009888:	e006      	b.n	8009898 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800988a:	2303      	movs	r3, #3
 800988c:	e004      	b.n	8009898 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800988e:	2301      	movs	r3, #1
 8009890:	e002      	b.n	8009898 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8009892:	2300      	movs	r3, #0
 8009894:	e000      	b.n	8009898 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8009896:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8009898:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3320      	adds	r3, #32
 800989e:	7afa      	ldrb	r2, [r7, #11]
 80098a0:	4611      	mov	r1, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fd3a 	bl	800a31c <lsm6dso16is_gy_full_scale_set>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80098b4:	68fb      	ldr	r3, [r7, #12]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b086      	sub	sp, #24
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3320      	adds	r3, #32
 80098d0:	f107 020c 	add.w	r2, r7, #12
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fef4 	bl	800a6c4 <lsm6dso16is_angular_rate_raw_get>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098e6:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 80098e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 80098f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 80098f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	809a      	strh	r2, [r3, #4]

  return ret;
 8009900:	697b      	ldr	r3, [r7, #20]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8009918:	f04f 0300 	mov.w	r3, #0
 800991c:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3320      	adds	r3, #32
 8009922:	f107 020c 	add.w	r2, r7, #12
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fecb 	bl	800a6c4 <lsm6dso16is_angular_rate_raw_get>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8009934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009938:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fe0d 	bl	8009560 <LSM6DSO16IS_GYRO_GetSensitivity>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 800994c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009950:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8009952:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800995e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800996a:	ee17 2a90 	vmov	r2, s15
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8009972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800997e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800998a:	ee17 2a90 	vmov	r2, s15
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8009992:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800999e:	edd7 7a02 	vldr	s15, [r7, #8]
 80099a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099aa:	ee17 2a90 	vmov	r2, s15
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	609a      	str	r2, [r3, #8]

  return ret;
 80099b2:	697b      	ldr	r3, [r7, #20]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3718      	adds	r7, #24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
 80099c8:	4613      	mov	r3, r2
 80099ca:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f103 0020 	add.w	r0, r3, #32
 80099d6:	1cba      	adds	r2, r7, #2
 80099d8:	78f9      	ldrb	r1, [r7, #3]
 80099da:	2301      	movs	r3, #1
 80099dc:	f000 faa0 	bl	8009f20 <lsm6dso16is_write_reg>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80099e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80099ec:	68fb      	ldr	r3, [r7, #12]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d006      	beq.n	8009a1a <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d101      	bne.n	8009a16 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8009a12:	2303      	movs	r3, #3
 8009a14:	e002      	b.n	8009a1c <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8009a16:	2300      	movs	r3, #0
 8009a18:	e000      	b.n	8009a1c <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8009a1a:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8009a1c:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3320      	adds	r3, #32
 8009a22:	7afa      	ldrb	r2, [r7, #11]
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fa92 	bl	8009f50 <lsm6dso16is_mem_bank_set>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8009a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009a38:	68fb      	ldr	r3, [r7, #12]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8009a54:	edd7 7a00 	vldr	s15, [r7]
 8009a58:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8009a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a64:	d801      	bhi.n	8009a6a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e058      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009a6a:	edd7 7a00 	vldr	s15, [r7]
 8009a6e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8009a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7a:	d801      	bhi.n	8009a80 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e04d      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009a80:	edd7 7a00 	vldr	s15, [r7]
 8009a84:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009b44 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a90:	d801      	bhi.n	8009a96 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 8009a92:	2303      	movs	r3, #3
 8009a94:	e042      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009a96:	edd7 7a00 	vldr	s15, [r7]
 8009a9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009b48 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8009a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	d801      	bhi.n	8009aac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	e037      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009aac:	edd7 7a00 	vldr	s15, [r7]
 8009ab0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009b4c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8009ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	d801      	bhi.n	8009ac2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8009abe:	2305      	movs	r3, #5
 8009ac0:	e02c      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009ac2:	edd7 7a00 	vldr	s15, [r7]
 8009ac6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009b50 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8009aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad2:	d801      	bhi.n	8009ad8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8009ad4:	2306      	movs	r3, #6
 8009ad6:	e021      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009ad8:	edd7 7a00 	vldr	s15, [r7]
 8009adc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009b54 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8009ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	d801      	bhi.n	8009aee <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8009aea:	2307      	movs	r3, #7
 8009aec:	e016      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009aee:	edd7 7a00 	vldr	s15, [r7]
 8009af2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009b58 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8009af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afe:	d801      	bhi.n	8009b04 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8009b00:	2308      	movs	r3, #8
 8009b02:	e00b      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009b04:	edd7 7a00 	vldr	s15, [r7]
 8009b08:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009b5c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 8009b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b14:	d801      	bhi.n	8009b1a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8009b16:	2309      	movs	r3, #9
 8009b18:	e000      	b.n	8009b1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009b1a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8009b1c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3320      	adds	r3, #32
 8009b22:	7afa      	ldrb	r2, [r7, #11]
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 fad0 	bl	800a0cc <lsm6dso16is_xl_data_rate_set>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8009b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009b38:	68fb      	ldr	r3, [r7, #12]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	42500000 	.word	0x42500000
 8009b48:	42d00000 	.word	0x42d00000
 8009b4c:	43500000 	.word	0x43500000
 8009b50:	43d00000 	.word	0x43d00000
 8009b54:	44504000 	.word	0x44504000
 8009b58:	44d06000 	.word	0x44d06000
 8009b5c:	45505000 	.word	0x45505000

08009b60 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8009b6c:	edd7 7a00 	vldr	s15, [r7]
 8009b70:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8009b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7c:	d801      	bhi.n	8009b82 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e058      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b82:	edd7 7a00 	vldr	s15, [r7]
 8009b86:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8009b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b92:	d801      	bhi.n	8009b98 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e04d      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b98:	edd7 7a00 	vldr	s15, [r7]
 8009b9c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009c48 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba8:	d801      	bhi.n	8009bae <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009baa:	2303      	movs	r3, #3
 8009bac:	e042      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009bae:	edd7 7a00 	vldr	s15, [r7]
 8009bb2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009c4c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 8009bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbe:	d801      	bhi.n	8009bc4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	e037      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009bc4:	edd7 7a00 	vldr	s15, [r7]
 8009bc8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009c50 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8009bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd4:	d801      	bhi.n	8009bda <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009bd6:	2305      	movs	r3, #5
 8009bd8:	e02c      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009bda:	edd7 7a00 	vldr	s15, [r7]
 8009bde:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009c54 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8009be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bea:	d801      	bhi.n	8009bf0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 8009bec:	2306      	movs	r3, #6
 8009bee:	e021      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009bf0:	edd7 7a00 	vldr	s15, [r7]
 8009bf4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009c58 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8009bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	d801      	bhi.n	8009c06 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8009c02:	2307      	movs	r3, #7
 8009c04:	e016      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009c06:	edd7 7a00 	vldr	s15, [r7]
 8009c0a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009c5c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8009c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	d801      	bhi.n	8009c1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009c18:	2308      	movs	r3, #8
 8009c1a:	e00b      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009c1c:	edd7 7a00 	vldr	s15, [r7]
 8009c20:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009c60 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2c:	d801      	bhi.n	8009c32 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8009c2e:	2309      	movs	r3, #9
 8009c30:	e000      	b.n	8009c34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009c32:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	42500000 	.word	0x42500000
 8009c4c:	42d00000 	.word	0x42d00000
 8009c50:	43500000 	.word	0x43500000
 8009c54:	43d00000 	.word	0x43d00000
 8009c58:	44504000 	.word	0x44504000
 8009c5c:	44d06000 	.word	0x44d06000
 8009c60:	45505000 	.word	0x45505000

08009c64 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8009c74:	edd7 7a00 	vldr	s15, [r7]
 8009c78:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8009c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c84:	d801      	bhi.n	8009c8a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e058      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009c8a:	edd7 7a00 	vldr	s15, [r7]
 8009c8e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8009c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9a:	d801      	bhi.n	8009ca0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e04d      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009ca0:	edd7 7a00 	vldr	s15, [r7]
 8009ca4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009d64 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8009ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb0:	d801      	bhi.n	8009cb6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e042      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009cb6:	edd7 7a00 	vldr	s15, [r7]
 8009cba:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009d68 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8009cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc6:	d801      	bhi.n	8009ccc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	e037      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009ccc:	edd7 7a00 	vldr	s15, [r7]
 8009cd0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009d6c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8009cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	d801      	bhi.n	8009ce2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8009cde:	2305      	movs	r3, #5
 8009ce0:	e02c      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009ce2:	edd7 7a00 	vldr	s15, [r7]
 8009ce6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009d70 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8009cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf2:	d801      	bhi.n	8009cf8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8009cf4:	2306      	movs	r3, #6
 8009cf6:	e021      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009cf8:	edd7 7a00 	vldr	s15, [r7]
 8009cfc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009d74 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8009d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d08:	d801      	bhi.n	8009d0e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 8009d0a:	2307      	movs	r3, #7
 8009d0c:	e016      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009d0e:	edd7 7a00 	vldr	s15, [r7]
 8009d12:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009d78 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8009d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1e:	d801      	bhi.n	8009d24 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8009d20:	2308      	movs	r3, #8
 8009d22:	e00b      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009d24:	edd7 7a00 	vldr	s15, [r7]
 8009d28:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009d7c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8009d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d34:	d801      	bhi.n	8009d3a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8009d36:	2309      	movs	r3, #9
 8009d38:	e000      	b.n	8009d3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8009d3a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8009d3c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3320      	adds	r3, #32
 8009d42:	7afa      	ldrb	r2, [r7, #11]
 8009d44:	4611      	mov	r1, r2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fb74 	bl	800a434 <lsm6dso16is_gy_data_rate_set>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8009d52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d56:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	42500000 	.word	0x42500000
 8009d68:	42d00000 	.word	0x42d00000
 8009d6c:	43500000 	.word	0x43500000
 8009d70:	43d00000 	.word	0x43d00000
 8009d74:	44504000 	.word	0x44504000
 8009d78:	44d06000 	.word	0x44d06000
 8009d7c:	45505000 	.word	0x45505000

08009d80 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8009d8c:	edd7 7a00 	vldr	s15, [r7]
 8009d90:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8009d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9c:	d801      	bhi.n	8009da2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e058      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009da2:	edd7 7a00 	vldr	s15, [r7]
 8009da6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8009daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	d801      	bhi.n	8009db8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8009db4:	2302      	movs	r3, #2
 8009db6:	e04d      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009db8:	edd7 7a00 	vldr	s15, [r7]
 8009dbc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009e68 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc8:	d801      	bhi.n	8009dce <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e042      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009dce:	edd7 7a00 	vldr	s15, [r7]
 8009dd2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009e6c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8009dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dde:	d801      	bhi.n	8009de4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8009de0:	2304      	movs	r3, #4
 8009de2:	e037      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009de4:	edd7 7a00 	vldr	s15, [r7]
 8009de8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009e70 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8009dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df4:	d801      	bhi.n	8009dfa <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8009df6:	2305      	movs	r3, #5
 8009df8:	e02c      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009dfa:	edd7 7a00 	vldr	s15, [r7]
 8009dfe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009e74 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8009e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0a:	d801      	bhi.n	8009e10 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009e0c:	2306      	movs	r3, #6
 8009e0e:	e021      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009e10:	edd7 7a00 	vldr	s15, [r7]
 8009e14:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009e78 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8009e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	d801      	bhi.n	8009e26 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8009e22:	2307      	movs	r3, #7
 8009e24:	e016      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009e26:	edd7 7a00 	vldr	s15, [r7]
 8009e2a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009e7c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8009e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e36:	d801      	bhi.n	8009e3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009e38:	2308      	movs	r3, #8
 8009e3a:	e00b      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009e3c:	edd7 7a00 	vldr	s15, [r7]
 8009e40:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009e80 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8009e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4c:	d801      	bhi.n	8009e52 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8009e4e:	2309      	movs	r3, #9
 8009e50:	e000      	b.n	8009e54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009e52:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	42500000 	.word	0x42500000
 8009e6c:	42d00000 	.word	0x42d00000
 8009e70:	43500000 	.word	0x43500000
 8009e74:	43d00000 	.word	0x43d00000
 8009e78:	44504000 	.word	0x44504000
 8009e7c:	44d06000 	.word	0x44d06000
 8009e80:	45505000 	.word	0x45505000

08009e84 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009e84:	b590      	push	{r4, r7, lr}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	607a      	str	r2, [r7, #4]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	460b      	mov	r3, r1
 8009e92:	72fb      	strb	r3, [r7, #11]
 8009e94:	4613      	mov	r3, r2
 8009e96:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	695c      	ldr	r4, [r3, #20]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	7b1b      	ldrb	r3, [r3, #12]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	7afb      	ldrb	r3, [r7, #11]
 8009ea8:	b299      	uxth	r1, r3
 8009eaa:	893b      	ldrh	r3, [r7, #8]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	47a0      	blx	r4
 8009eb0:	4603      	mov	r3, r0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd90      	pop	{r4, r7, pc}

08009eba <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009eba:	b590      	push	{r4, r7, lr}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	72fb      	strb	r3, [r7, #11]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	691c      	ldr	r4, [r3, #16]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	7b1b      	ldrb	r3, [r3, #12]
 8009eda:	4618      	mov	r0, r3
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	b299      	uxth	r1, r3
 8009ee0:	893b      	ldrh	r3, [r7, #8]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	47a0      	blx	r4
 8009ee6:	4603      	mov	r3, r0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd90      	pop	{r4, r7, pc}

08009ef0 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	461a      	mov	r2, r3
 8009efc:	460b      	mov	r3, r1
 8009efe:	72fb      	strb	r3, [r7, #11]
 8009f00:	4613      	mov	r3, r2
 8009f02:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	685c      	ldr	r4, [r3, #4]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68d8      	ldr	r0, [r3, #12]
 8009f0c:	893b      	ldrh	r3, [r7, #8]
 8009f0e:	7af9      	ldrb	r1, [r7, #11]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	47a0      	blx	r4
 8009f14:	6178      	str	r0, [r7, #20]

  return ret;
 8009f16:	697b      	ldr	r3, [r7, #20]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd90      	pop	{r4, r7, pc}

08009f20 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8009f20:	b590      	push	{r4, r7, lr}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	72fb      	strb	r3, [r7, #11]
 8009f30:	4613      	mov	r3, r2
 8009f32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681c      	ldr	r4, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68d8      	ldr	r0, [r3, #12]
 8009f3c:	893b      	ldrh	r3, [r7, #8]
 8009f3e:	7af9      	ldrb	r1, [r7, #11]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	47a0      	blx	r4
 8009f44:	6178      	str	r0, [r7, #20]

  return ret;
 8009f46:	697b      	ldr	r3, [r7, #20]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd90      	pop	{r4, r7, pc}

08009f50 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d101      	bne.n	8009f6a <lsm6dso16is_mem_bank_set+0x1a>
 8009f66:	2201      	movs	r2, #1
 8009f68:	e000      	b.n	8009f6c <lsm6dso16is_mem_bank_set+0x1c>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	7a3b      	ldrb	r3, [r7, #8]
 8009f6e:	f362 1386 	bfi	r3, r2, #6, #1
 8009f72:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d101      	bne.n	8009f7e <lsm6dso16is_mem_bank_set+0x2e>
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	e000      	b.n	8009f80 <lsm6dso16is_mem_bank_set+0x30>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	7a3b      	ldrb	r3, [r7, #8]
 8009f82:	f362 13c7 	bfi	r3, r2, #7, #1
 8009f86:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8009f88:	f107 0208 	add.w	r2, r7, #8
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	2101      	movs	r1, #1
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ffc5 	bl	8009f20 <lsm6dso16is_write_reg>
 8009f96:	60f8      	str	r0, [r7, #12]

  return ret;
 8009f98:	68fb      	ldr	r3, [r7, #12]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 8009fac:	2301      	movs	r3, #1
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	210f      	movs	r1, #15
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff ff9c 	bl	8009ef0 <lsm6dso16is_read_reg>
 8009fb8:	60f8      	str	r0, [r7, #12]

  return ret;
 8009fba:	68fb      	ldr	r3, [r7, #12]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8009fd0:	f107 0208 	add.w	r2, r7, #8
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	2115      	movs	r1, #21
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff ff89 	bl	8009ef0 <lsm6dso16is_read_reg>
 8009fde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10f      	bne.n	800a006 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	7a3b      	ldrb	r3, [r7, #8]
 8009ff0:	f362 1304 	bfi	r3, r2, #4, #1
 8009ff4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8009ff6:	f107 0208 	add.w	r2, r7, #8
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	2115      	movs	r1, #21
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff ff8e 	bl	8009f20 <lsm6dso16is_write_reg>
 800a004:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a006:	68fb      	ldr	r3, [r7, #12]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a01c:	f107 0208 	add.w	r2, r7, #8
 800a020:	2301      	movs	r3, #1
 800a022:	2110      	movs	r1, #16
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff ff63 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a02a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10f      	bne.n	800a052 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	f003 0303 	and.w	r3, r3, #3
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	7a3b      	ldrb	r3, [r7, #8]
 800a03c:	f362 0383 	bfi	r3, r2, #2, #2
 800a040:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a042:	f107 0208 	add.w	r2, r7, #8
 800a046:	2301      	movs	r3, #1
 800a048:	2110      	movs	r1, #16
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff ff68 	bl	8009f20 <lsm6dso16is_write_reg>
 800a050:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a052:	68fb      	ldr	r3, [r7, #12]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a066:	f107 0208 	add.w	r2, r7, #8
 800a06a:	2301      	movs	r3, #1
 800a06c:	2110      	movs	r1, #16
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff ff3e 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a074:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 800a076:	7a3b      	ldrb	r3, [r7, #8]
 800a078:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d81a      	bhi.n	800a0b8 <lsm6dso16is_xl_full_scale_get+0x5c>
 800a082:	a201      	add	r2, pc, #4	@ (adr r2, 800a088 <lsm6dso16is_xl_full_scale_get+0x2c>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a099 	.word	0x0800a099
 800a08c:	0800a0b1 	.word	0x0800a0b1
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0a9 	.word	0x0800a0a9
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
      break;
 800a09e:	e00f      	b.n	800a0c0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	701a      	strb	r2, [r3, #0]
      break;
 800a0a6:	e00b      	b.n	800a0c0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	701a      	strb	r2, [r3, #0]
      break;
 800a0ae:	e007      	b.n	800a0c0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	701a      	strb	r2, [r3, #0]
      break;
 800a0b6:	e003      	b.n	800a0c0 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
      break;
 800a0be:	bf00      	nop
  }
  return ret;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop

0800a0cc <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a0d8:	f107 0208 	add.w	r2, r7, #8
 800a0dc:	2301      	movs	r3, #1
 800a0de:	2110      	movs	r1, #16
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff ff05 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a0e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d128      	bne.n	800a140 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800a0ee:	78fb      	ldrb	r3, [r7, #3]
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d008      	beq.n	800a10a <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff ff62 	bl	8009fc4 <lsm6dso16is_xl_hm_mode_set>
 800a100:	4602      	mov	r2, r0
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4413      	add	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	e007      	b.n	800a11a <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800a10a:	2100      	movs	r1, #0
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ff59 	bl	8009fc4 <lsm6dso16is_xl_hm_mode_set>
 800a112:	4602      	mov	r2, r0
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	b2da      	uxtb	r2, r3
 800a122:	7a3b      	ldrb	r3, [r7, #8]
 800a124:	f362 1307 	bfi	r3, r2, #4, #4
 800a128:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a12a:	f107 0208 	add.w	r2, r7, #8
 800a12e:	2301      	movs	r3, #1
 800a130:	2110      	movs	r1, #16
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fef4 	bl	8009f20 <lsm6dso16is_write_reg>
 800a138:	4602      	mov	r2, r0
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a140:	68fb      	ldr	r3, [r7, #12]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a156:	f107 0210 	add.w	r2, r7, #16
 800a15a:	2301      	movs	r3, #1
 800a15c:	2110      	movs	r1, #16
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fec6 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a164:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800a166:	f107 020c 	add.w	r2, r7, #12
 800a16a:	2301      	movs	r3, #1
 800a16c:	2115      	movs	r1, #21
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff febe 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a174:	4602      	mov	r2, r0
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	4413      	add	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 800a17c:	7b3b      	ldrb	r3, [r7, #12]
 800a17e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a182:	b2db      	uxtb	r3, r3
 800a184:	011b      	lsls	r3, r3, #4
 800a186:	7c3a      	ldrb	r2, [r7, #16]
 800a188:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	4313      	orrs	r3, r2
 800a190:	2b1b      	cmp	r3, #27
 800a192:	f200 8093 	bhi.w	800a2bc <lsm6dso16is_xl_data_rate_get+0x170>
 800a196:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <lsm6dso16is_xl_data_rate_get+0x50>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a20d 	.word	0x0800a20d
 800a1a0:	0800a215 	.word	0x0800a215
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a225 	.word	0x0800a225
 800a1ac:	0800a22d 	.word	0x0800a22d
 800a1b0:	0800a235 	.word	0x0800a235
 800a1b4:	0800a23d 	.word	0x0800a23d
 800a1b8:	0800a245 	.word	0x0800a245
 800a1bc:	0800a24d 	.word	0x0800a24d
 800a1c0:	0800a255 	.word	0x0800a255
 800a1c4:	0800a25d 	.word	0x0800a25d
 800a1c8:	0800a2bd 	.word	0x0800a2bd
 800a1cc:	0800a2bd 	.word	0x0800a2bd
 800a1d0:	0800a2bd 	.word	0x0800a2bd
 800a1d4:	0800a2bd 	.word	0x0800a2bd
 800a1d8:	0800a2bd 	.word	0x0800a2bd
 800a1dc:	0800a2bd 	.word	0x0800a2bd
 800a1e0:	0800a265 	.word	0x0800a265
 800a1e4:	0800a26d 	.word	0x0800a26d
 800a1e8:	0800a275 	.word	0x0800a275
 800a1ec:	0800a27d 	.word	0x0800a27d
 800a1f0:	0800a285 	.word	0x0800a285
 800a1f4:	0800a28d 	.word	0x0800a28d
 800a1f8:	0800a295 	.word	0x0800a295
 800a1fc:	0800a29d 	.word	0x0800a29d
 800a200:	0800a2a5 	.word	0x0800a2a5
 800a204:	0800a2ad 	.word	0x0800a2ad
 800a208:	0800a2b5 	.word	0x0800a2b5
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2200      	movs	r2, #0
 800a210:	701a      	strb	r2, [r3, #0]
      break;
 800a212:	e057      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2201      	movs	r2, #1
 800a218:	701a      	strb	r2, [r3, #0]
      break;
 800a21a:	e053      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2202      	movs	r2, #2
 800a220:	701a      	strb	r2, [r3, #0]
      break;
 800a222:	e04f      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2203      	movs	r2, #3
 800a228:	701a      	strb	r2, [r3, #0]
      break;
 800a22a:	e04b      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2204      	movs	r2, #4
 800a230:	701a      	strb	r2, [r3, #0]
      break;
 800a232:	e047      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2205      	movs	r2, #5
 800a238:	701a      	strb	r2, [r3, #0]
      break;
 800a23a:	e043      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2206      	movs	r2, #6
 800a240:	701a      	strb	r2, [r3, #0]
      break;
 800a242:	e03f      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2207      	movs	r2, #7
 800a248:	701a      	strb	r2, [r3, #0]
      break;
 800a24a:	e03b      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2208      	movs	r2, #8
 800a250:	701a      	strb	r2, [r3, #0]
      break;
 800a252:	e037      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2209      	movs	r2, #9
 800a258:	701a      	strb	r2, [r3, #0]
      break;
 800a25a:	e033      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	220a      	movs	r2, #10
 800a260:	701a      	strb	r2, [r3, #0]
      break;
 800a262:	e02f      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2211      	movs	r2, #17
 800a268:	701a      	strb	r2, [r3, #0]
      break;
 800a26a:	e02b      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2212      	movs	r2, #18
 800a270:	701a      	strb	r2, [r3, #0]
      break;
 800a272:	e027      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2213      	movs	r2, #19
 800a278:	701a      	strb	r2, [r3, #0]
      break;
 800a27a:	e023      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2214      	movs	r2, #20
 800a280:	701a      	strb	r2, [r3, #0]
      break;
 800a282:	e01f      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2215      	movs	r2, #21
 800a288:	701a      	strb	r2, [r3, #0]
      break;
 800a28a:	e01b      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2216      	movs	r2, #22
 800a290:	701a      	strb	r2, [r3, #0]
      break;
 800a292:	e017      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2217      	movs	r2, #23
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e013      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2218      	movs	r2, #24
 800a2a0:	701a      	strb	r2, [r3, #0]
      break;
 800a2a2:	e00f      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2219      	movs	r2, #25
 800a2a8:	701a      	strb	r2, [r3, #0]
      break;
 800a2aa:	e00b      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	221a      	movs	r2, #26
 800a2b0:	701a      	strb	r2, [r3, #0]
      break;
 800a2b2:	e007      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	221b      	movs	r2, #27
 800a2b8:	701a      	strb	r2, [r3, #0]
      break;
 800a2ba:	e003      	b.n	800a2c4 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	701a      	strb	r2, [r3, #0]
      break;
 800a2c2:	bf00      	nop
  }

  return ret;
 800a2c4:	697b      	ldr	r3, [r7, #20]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop

0800a2d0 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800a2dc:	f107 0208 	add.w	r2, r7, #8
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	2116      	movs	r1, #22
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fe03 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a2ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10f      	bne.n	800a312 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	7a3b      	ldrb	r3, [r7, #8]
 800a2fc:	f362 13c7 	bfi	r3, r2, #7, #1
 800a300:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800a302:	f107 0208 	add.w	r2, r7, #8
 800a306:	2301      	movs	r3, #1
 800a308:	2116      	movs	r1, #22
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fe08 	bl	8009f20 <lsm6dso16is_write_reg>
 800a310:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a312:	68fb      	ldr	r3, [r7, #12]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a328:	f107 0208 	add.w	r2, r7, #8
 800a32c:	2301      	movs	r3, #1
 800a32e:	2111      	movs	r1, #17
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fddd 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a336:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d119      	bne.n	800a372 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	b2da      	uxtb	r2, r3
 800a346:	7a3b      	ldrb	r3, [r7, #8]
 800a348:	f362 0383 	bfi	r3, r2, #2, #2
 800a34c:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	091b      	lsrs	r3, r3, #4
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	7a3b      	ldrb	r3, [r7, #8]
 800a35c:	f362 0341 	bfi	r3, r2, #1, #1
 800a360:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a362:	f107 0208 	add.w	r2, r7, #8
 800a366:	2301      	movs	r3, #1
 800a368:	2111      	movs	r1, #17
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fdd8 	bl	8009f20 <lsm6dso16is_write_reg>
 800a370:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a372:	68fb      	ldr	r3, [r7, #12]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a386:	f107 0208 	add.w	r2, r7, #8
 800a38a:	2301      	movs	r3, #1
 800a38c:	2111      	movs	r1, #17
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff fdae 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a394:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 800a396:	7a3b      	ldrb	r3, [r7, #8]
 800a398:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	7a3a      	ldrb	r2, [r7, #8]
 800a3a2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d838      	bhi.n	800a420 <lsm6dso16is_gy_full_scale_get+0xa4>
 800a3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <lsm6dso16is_gy_full_scale_get+0x38>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a401 	.word	0x0800a401
 800a3b8:	0800a409 	.word	0x0800a409
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a419 	.word	0x0800a419
 800a3c4:	0800a421 	.word	0x0800a421
 800a3c8:	0800a421 	.word	0x0800a421
 800a3cc:	0800a421 	.word	0x0800a421
 800a3d0:	0800a421 	.word	0x0800a421
 800a3d4:	0800a421 	.word	0x0800a421
 800a3d8:	0800a421 	.word	0x0800a421
 800a3dc:	0800a421 	.word	0x0800a421
 800a3e0:	0800a421 	.word	0x0800a421
 800a3e4:	0800a421 	.word	0x0800a421
 800a3e8:	0800a421 	.word	0x0800a421
 800a3ec:	0800a421 	.word	0x0800a421
 800a3f0:	0800a421 	.word	0x0800a421
 800a3f4:	0800a3f9 	.word	0x0800a3f9
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	701a      	strb	r2, [r3, #0]
      break;
 800a3fe:	e013      	b.n	800a428 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
      break;
 800a406:	e00f      	b.n	800a428 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2201      	movs	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
      break;
 800a40e:	e00b      	b.n	800a428 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2202      	movs	r2, #2
 800a414:	701a      	strb	r2, [r3, #0]
      break;
 800a416:	e007      	b.n	800a428 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	2203      	movs	r2, #3
 800a41c:	701a      	strb	r2, [r3, #0]
      break;
 800a41e:	e003      	b.n	800a428 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2210      	movs	r2, #16
 800a424:	701a      	strb	r2, [r3, #0]
      break;
 800a426:	bf00      	nop
  }
  return ret;
 800a428:	68fb      	ldr	r3, [r7, #12]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop

0800a434 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a440:	f107 0208 	add.w	r2, r7, #8
 800a444:	2301      	movs	r3, #1
 800a446:	2111      	movs	r1, #17
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff fd51 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a44e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d128      	bne.n	800a4a8 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800a460:	2101      	movs	r1, #1
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff ff34 	bl	800a2d0 <lsm6dso16is_gy_hm_mode_set>
 800a468:	4602      	mov	r2, r0
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4413      	add	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e007      	b.n	800a482 <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800a472:	2100      	movs	r1, #0
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff ff2b 	bl	800a2d0 <lsm6dso16is_gy_hm_mode_set>
 800a47a:	4602      	mov	r2, r0
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	f003 030f 	and.w	r3, r3, #15
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	7a3b      	ldrb	r3, [r7, #8]
 800a48c:	f362 1307 	bfi	r3, r2, #4, #4
 800a490:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a492:	f107 0208 	add.w	r2, r7, #8
 800a496:	2301      	movs	r3, #1
 800a498:	2111      	movs	r1, #17
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fd40 	bl	8009f20 <lsm6dso16is_write_reg>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a4be:	f107 0210 	add.w	r2, r7, #16
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	2111      	movs	r1, #17
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff fd12 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a4cc:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800a4ce:	f107 020c 	add.w	r2, r7, #12
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	2116      	movs	r1, #22
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff fd0a 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 800a4e4:	7b3b      	ldrb	r3, [r7, #12]
 800a4e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	011b      	lsls	r3, r3, #4
 800a4ee:	7c3a      	ldrb	r2, [r7, #16]
 800a4f0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a4f4:	b2d2      	uxtb	r2, r2
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	2b1a      	cmp	r3, #26
 800a4fa:	f200 808d 	bhi.w	800a618 <lsm6dso16is_gy_data_rate_get+0x164>
 800a4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <lsm6dso16is_gy_data_rate_get+0x50>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a571 	.word	0x0800a571
 800a508:	0800a579 	.word	0x0800a579
 800a50c:	0800a581 	.word	0x0800a581
 800a510:	0800a589 	.word	0x0800a589
 800a514:	0800a591 	.word	0x0800a591
 800a518:	0800a599 	.word	0x0800a599
 800a51c:	0800a5a1 	.word	0x0800a5a1
 800a520:	0800a5a9 	.word	0x0800a5a9
 800a524:	0800a5b1 	.word	0x0800a5b1
 800a528:	0800a5b9 	.word	0x0800a5b9
 800a52c:	0800a5c1 	.word	0x0800a5c1
 800a530:	0800a619 	.word	0x0800a619
 800a534:	0800a619 	.word	0x0800a619
 800a538:	0800a619 	.word	0x0800a619
 800a53c:	0800a619 	.word	0x0800a619
 800a540:	0800a619 	.word	0x0800a619
 800a544:	0800a619 	.word	0x0800a619
 800a548:	0800a5c9 	.word	0x0800a5c9
 800a54c:	0800a5d1 	.word	0x0800a5d1
 800a550:	0800a5d9 	.word	0x0800a5d9
 800a554:	0800a5e1 	.word	0x0800a5e1
 800a558:	0800a5e9 	.word	0x0800a5e9
 800a55c:	0800a5f1 	.word	0x0800a5f1
 800a560:	0800a5f9 	.word	0x0800a5f9
 800a564:	0800a601 	.word	0x0800a601
 800a568:	0800a609 	.word	0x0800a609
 800a56c:	0800a611 	.word	0x0800a611
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]
      break;
 800a576:	e053      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2201      	movs	r2, #1
 800a57c:	701a      	strb	r2, [r3, #0]
      break;
 800a57e:	e04f      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2202      	movs	r2, #2
 800a584:	701a      	strb	r2, [r3, #0]
      break;
 800a586:	e04b      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2203      	movs	r2, #3
 800a58c:	701a      	strb	r2, [r3, #0]
      break;
 800a58e:	e047      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2204      	movs	r2, #4
 800a594:	701a      	strb	r2, [r3, #0]
      break;
 800a596:	e043      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2205      	movs	r2, #5
 800a59c:	701a      	strb	r2, [r3, #0]
      break;
 800a59e:	e03f      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2206      	movs	r2, #6
 800a5a4:	701a      	strb	r2, [r3, #0]
      break;
 800a5a6:	e03b      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2207      	movs	r2, #7
 800a5ac:	701a      	strb	r2, [r3, #0]
      break;
 800a5ae:	e037      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	701a      	strb	r2, [r3, #0]
      break;
 800a5b6:	e033      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2209      	movs	r2, #9
 800a5bc:	701a      	strb	r2, [r3, #0]
      break;
 800a5be:	e02f      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	220a      	movs	r2, #10
 800a5c4:	701a      	strb	r2, [r3, #0]
      break;
 800a5c6:	e02b      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2211      	movs	r2, #17
 800a5cc:	701a      	strb	r2, [r3, #0]
      break;
 800a5ce:	e027      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2212      	movs	r2, #18
 800a5d4:	701a      	strb	r2, [r3, #0]
      break;
 800a5d6:	e023      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2213      	movs	r2, #19
 800a5dc:	701a      	strb	r2, [r3, #0]
      break;
 800a5de:	e01f      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2214      	movs	r2, #20
 800a5e4:	701a      	strb	r2, [r3, #0]
      break;
 800a5e6:	e01b      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2215      	movs	r2, #21
 800a5ec:	701a      	strb	r2, [r3, #0]
      break;
 800a5ee:	e017      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2216      	movs	r2, #22
 800a5f4:	701a      	strb	r2, [r3, #0]
      break;
 800a5f6:	e013      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2217      	movs	r2, #23
 800a5fc:	701a      	strb	r2, [r3, #0]
      break;
 800a5fe:	e00f      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2218      	movs	r2, #24
 800a604:	701a      	strb	r2, [r3, #0]
      break;
 800a606:	e00b      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2219      	movs	r2, #25
 800a60c:	701a      	strb	r2, [r3, #0]
      break;
 800a60e:	e007      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	221a      	movs	r2, #26
 800a614:	701a      	strb	r2, [r3, #0]
      break;
 800a616:	e003      	b.n	800a620 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]
      break;
 800a61e:	bf00      	nop
  }

  return ret;
 800a620:	697b      	ldr	r3, [r7, #20]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop

0800a62c <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a638:	f107 0208 	add.w	r2, r7, #8
 800a63c:	2301      	movs	r3, #1
 800a63e:	2112      	movs	r1, #18
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff fc55 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10f      	bne.n	800a66e <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	b2da      	uxtb	r2, r3
 800a656:	7a3b      	ldrb	r3, [r7, #8]
 800a658:	f362 0382 	bfi	r3, r2, #2, #1
 800a65c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a65e:	f107 0208 	add.w	r2, r7, #8
 800a662:	2301      	movs	r3, #1
 800a664:	2112      	movs	r1, #18
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fc5a 	bl	8009f20 <lsm6dso16is_write_reg>
 800a66c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a66e:	68fb      	ldr	r3, [r7, #12]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a684:	f107 0208 	add.w	r2, r7, #8
 800a688:	2301      	movs	r3, #1
 800a68a:	2112      	movs	r1, #18
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff fc2f 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a692:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10f      	bne.n	800a6ba <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	7a3b      	ldrb	r3, [r7, #8]
 800a6a4:	f362 1386 	bfi	r3, r2, #6, #1
 800a6a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a6aa:	f107 0208 	add.w	r2, r7, #8
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	2112      	movs	r1, #18
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff fc34 	bl	8009f20 <lsm6dso16is_write_reg>
 800a6b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 800a6ce:	f107 020c 	add.w	r2, r7, #12
 800a6d2:	2306      	movs	r3, #6
 800a6d4:	2122      	movs	r1, #34	@ 0x22
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff fc0a 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a6dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a6de:	7b7b      	ldrb	r3, [r7, #13]
 800a6e0:	b21a      	sxth	r2, r3
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	7b3a      	ldrb	r2, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	b21a      	sxth	r2, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a6fe:	7bfa      	ldrb	r2, [r7, #15]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	3302      	adds	r3, #2
 800a704:	b212      	sxth	r2, r2
 800a706:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	3302      	adds	r3, #2
 800a70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a710:	b29b      	uxth	r3, r3
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	b29b      	uxth	r3, r3
 800a716:	7bba      	ldrb	r2, [r7, #14]
 800a718:	4413      	add	r3, r2
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	3302      	adds	r3, #2
 800a720:	b212      	sxth	r2, r2
 800a722:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a724:	7c7a      	ldrb	r2, [r7, #17]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	3304      	adds	r3, #4
 800a72a:	b212      	sxth	r2, r2
 800a72c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	3304      	adds	r3, #4
 800a732:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a736:	b29b      	uxth	r3, r3
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	7c3a      	ldrb	r2, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	b29a      	uxth	r2, r3
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	3304      	adds	r3, #4
 800a746:	b212      	sxth	r2, r2
 800a748:	801a      	strh	r2, [r3, #0]

  return ret;
 800a74a:	697b      	ldr	r3, [r7, #20]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3718      	adds	r7, #24
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 800a75e:	f107 020c 	add.w	r2, r7, #12
 800a762:	2306      	movs	r3, #6
 800a764:	2128      	movs	r1, #40	@ 0x28
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fbc2 	bl	8009ef0 <lsm6dso16is_read_reg>
 800a76c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a76e:	7b7b      	ldrb	r3, [r7, #13]
 800a770:	b21a      	sxth	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	021b      	lsls	r3, r3, #8
 800a780:	b29b      	uxth	r3, r3
 800a782:	7b3a      	ldrb	r2, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	b29b      	uxth	r3, r3
 800a788:	b21a      	sxth	r2, r3
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a78e:	7bfa      	ldrb	r2, [r7, #15]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	3302      	adds	r3, #2
 800a794:	b212      	sxth	r2, r2
 800a796:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3302      	adds	r3, #2
 800a79c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	021b      	lsls	r3, r3, #8
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	7bba      	ldrb	r2, [r7, #14]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	3302      	adds	r3, #2
 800a7b0:	b212      	sxth	r2, r2
 800a7b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a7b4:	7c7a      	ldrb	r2, [r7, #17]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	b212      	sxth	r2, r2
 800a7bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	7c3a      	ldrb	r2, [r7, #16]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	b212      	sxth	r2, r2
 800a7d8:	801a      	strh	r2, [r3, #0]

  return ret;
 800a7da:	697b      	ldr	r3, [r7, #20]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d103      	bne.n	800a800 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 800a7f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	e05d      	b.n	800a8bc <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	7b1a      	ldrb	r2, [r3, #12]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	691a      	ldr	r2, [r3, #16]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	695a      	ldr	r2, [r3, #20]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	699a      	ldr	r2, [r3, #24]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a23      	ldr	r2, [pc, #140]	@ (800a8c8 <LSM6DSV16X_RegisterBusIO+0xe4>)
 800a83c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a22      	ldr	r2, [pc, #136]	@ (800a8cc <LSM6DSV16X_RegisterBusIO+0xe8>)
 800a842:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	69da      	ldr	r2, [r3, #28]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d103      	bne.n	800a862 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	e02c      	b.n	800a8bc <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4798      	blx	r3
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 800a86e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e022      	b.n	800a8bc <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d11e      	bne.n	800a8bc <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a884:	2b00      	cmp	r3, #0
 800a886:	d119      	bne.n	800a8bc <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 800a888:	2304      	movs	r3, #4
 800a88a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	461a      	mov	r2, r3
 800a890:	2112      	movs	r1, #18
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fd95 	bl	800b3c2 <LSM6DSV16X_Write_Reg>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8a2:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	2103      	movs	r1, #3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fd89 	bl	800b3c2 <LSM6DSV16X_Write_Reg>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d002      	beq.n	800a8bc <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 800a8b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8ba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800b8b5 	.word	0x0800b8b5
 800a8cc:	0800b8eb 	.word	0x0800b8eb

0800a8d0 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3320      	adds	r3, #32
 800a8dc:	2101      	movs	r1, #1
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 fb20 	bl	800bf24 <lsm6dsv16x_auto_increment_set>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <LSM6DSV16X_Init+0x20>
  {
    return LSM6DSV16X_ERROR;
 800a8ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8ee:	e064      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3320      	adds	r3, #32
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 fb3a 	bl	800bf70 <lsm6dsv16x_block_data_update_set>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <LSM6DSV16X_Init+0x38>
  {
    return LSM6DSV16X_ERROR;
 800a902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a906:	e058      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3320      	adds	r3, #32
 800a90c:	2100      	movs	r1, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f001 fcd0 	bl	800c2b4 <lsm6dsv16x_fifo_mode_set>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <LSM6DSV16X_Init+0x50>
  {
    return LSM6DSV16X_ERROR;
 800a91a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a91e:	e04c      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2206      	movs	r2, #6
 800a924:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3320      	adds	r3, #32
 800a92c:	2100      	movs	r1, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f001 f837 	bl	800b9a2 <lsm6dsv16x_xl_data_rate_set>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <LSM6DSV16X_Init+0x70>
  {
    return LSM6DSV16X_ERROR;
 800a93a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a93e:	e03c      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3320      	adds	r3, #32
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f001 fbb6 	bl	800c0b8 <lsm6dsv16x_xl_full_scale_set>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <LSM6DSV16X_Init+0x88>
  {
    return LSM6DSV16X_ERROR;
 800a952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a956:	e030      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2206      	movs	r2, #6
 800a95c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3320      	adds	r3, #32
 800a964:	2100      	movs	r1, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f001 f97c 	bl	800bc64 <lsm6dsv16x_gy_data_rate_set>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <LSM6DSV16X_Init+0xa8>
  {
    return LSM6DSV16X_ERROR;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a976:	e020      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3320      	adds	r3, #32
 800a97c:	2104      	movs	r1, #4
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 fb1c 	bl	800bfbc <lsm6dsv16x_gy_full_scale_set>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <LSM6DSV16X_Init+0xc0>
  {
    return LSM6DSV16X_ERROR;
 800a98a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a98e:	e014      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 800a990:	7b3b      	ldrb	r3, [r7, #12]
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3320      	adds	r3, #32
 800a99c:	7b39      	ldrb	r1, [r7, #12]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 fcae 	bl	800c300 <lsm6dsv16x_ah_qvar_mode_set>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d002      	beq.n	800a9b0 <LSM6DSV16X_Init+0xe0>
  {
    return LSM6DSV16X_ERROR;
 800a9aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9ae:	e004      	b.n	800a9ba <LSM6DSV16X_Init+0xea>
  }

  pObj->is_initialized = 1;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f898 	bl	800ab00 <LSM6DSV16X_ACC_Disable>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9da:	e025      	b.n	800aa28 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fab2 	bl	800af46 <LSM6DSV16X_GYRO_Disable>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9ec:	e01c      	b.n	800aa28 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 800a9fe:	7b3b      	ldrb	r3, [r7, #12]
 800aa00:	f36f 0300 	bfc	r3, #0, #1
 800aa04:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3320      	adds	r3, #32
 800aa0a:	7b39      	ldrb	r1, [r7, #12]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f001 fc77 	bl	800c300 <lsm6dsv16x_ah_qvar_mode_set>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa1c:	e004      	b.n	800aa28 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3320      	adds	r3, #32
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 ff9d 	bl	800b980 <lsm6dsv16x_device_id_get>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 800aa4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa50:	e000      	b.n	800aa54 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2200      	movs	r2, #0
 800aa76:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800aa84:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2210      	movs	r2, #16
 800aa8a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	4a07      	ldr	r2, [pc, #28]	@ (800aab4 <LSM6DSV16X_GetCapabilities+0x58>)
 800aa96:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	4a06      	ldr	r2, [pc, #24]	@ (800aab4 <LSM6DSV16X_GetCapabilities+0x58>)
 800aa9c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	f04f 0200 	mov.w	r2, #0
 800aaa4:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	45f00000 	.word	0x45f00000

0800aab8 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d101      	bne.n	800aace <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e014      	b.n	800aaf8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f103 0220 	add.w	r2, r3, #32
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f000 ff60 	bl	800b9a2 <lsm6dsv16x_xl_data_rate_set>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaec:	e004      	b.n	800aaf8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e01f      	b.n	800ab56 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f103 0220 	add.w	r2, r3, #32
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3333      	adds	r3, #51	@ 0x33
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f000 ff8e 	bl	800ba44 <lsm6dsv16x_xl_data_rate_get>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d002      	beq.n	800ab34 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800ab2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab32:	e010      	b.n	800ab56 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3320      	adds	r3, #32
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 ff31 	bl	800b9a2 <lsm6dsv16x_xl_data_rate_set>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800ab46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab4a:	e004      	b.n	800ab56 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3320      	adds	r3, #32
 800ab72:	f107 020b 	add.w	r2, r7, #11
 800ab76:	4611      	mov	r1, r2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 fac3 	bl	800c104 <lsm6dsv16x_xl_full_scale_get>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab88:	e023      	b.n	800abd2 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d81b      	bhi.n	800abc8 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 800ab90:	a201      	add	r2, pc, #4	@ (adr r2, 800ab98 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abb1 	.word	0x0800abb1
 800aba0:	0800abb9 	.word	0x0800abb9
 800aba4:	0800abc1 	.word	0x0800abc1
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	4a0c      	ldr	r2, [pc, #48]	@ (800abdc <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 800abac:	601a      	str	r2, [r3, #0]
      break;
 800abae:	e00f      	b.n	800abd0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	4a0b      	ldr	r2, [pc, #44]	@ (800abe0 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 800abb4:	601a      	str	r2, [r3, #0]
      break;
 800abb6:	e00b      	b.n	800abd0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	4a0a      	ldr	r2, [pc, #40]	@ (800abe4 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 800abbc:	601a      	str	r2, [r3, #0]
      break;
 800abbe:	e007      	b.n	800abd0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	4a09      	ldr	r2, [pc, #36]	@ (800abe8 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 800abc4:	601a      	str	r2, [r3, #0]
      break;
 800abc6:	e003      	b.n	800abd0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abcc:	60fb      	str	r3, [r7, #12]
      break;
 800abce:	bf00      	nop
  }

  return ret;
 800abd0:	68fb      	ldr	r3, [r7, #12]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	3d79db23 	.word	0x3d79db23
 800abe0:	3df9db23 	.word	0x3df9db23
 800abe4:	3e79db23 	.word	0x3e79db23
 800abe8:	3ef9db23 	.word	0x3ef9db23

0800abec <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3320      	adds	r3, #32
 800abfe:	f107 020b 	add.w	r2, r7, #11
 800ac02:	4611      	mov	r1, r2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 ff1d 	bl	800ba44 <lsm6dsv16x_xl_data_rate_get>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800ac10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac14:	e05a      	b.n	800accc <LSM6DSV16X_ACC_GetOutputDataRate+0xe0>
  }

  switch (odr_low_level)
 800ac16:	7afb      	ldrb	r3, [r7, #11]
 800ac18:	2b0c      	cmp	r3, #12
 800ac1a:	d852      	bhi.n	800acc2 <LSM6DSV16X_ACC_GetOutputDataRate+0xd6>
 800ac1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac24 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac59 	.word	0x0800ac59
 800ac28:	0800ac63 	.word	0x0800ac63
 800ac2c:	0800ac6b 	.word	0x0800ac6b
 800ac30:	0800ac73 	.word	0x0800ac73
 800ac34:	0800ac7b 	.word	0x0800ac7b
 800ac38:	0800ac83 	.word	0x0800ac83
 800ac3c:	0800ac8b 	.word	0x0800ac8b
 800ac40:	0800ac93 	.word	0x0800ac93
 800ac44:	0800ac9b 	.word	0x0800ac9b
 800ac48:	0800aca3 	.word	0x0800aca3
 800ac4c:	0800acab 	.word	0x0800acab
 800ac50:	0800acb3 	.word	0x0800acb3
 800ac54:	0800acbb 	.word	0x0800acbb
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f04f 0200 	mov.w	r2, #0
 800ac5e:	601a      	str	r2, [r3, #0]
      break;
 800ac60:	e033      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	4a1b      	ldr	r2, [pc, #108]	@ (800acd4 <LSM6DSV16X_ACC_GetOutputDataRate+0xe8>)
 800ac66:	601a      	str	r2, [r3, #0]
      break;
 800ac68:	e02f      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	4a1a      	ldr	r2, [pc, #104]	@ (800acd8 <LSM6DSV16X_ACC_GetOutputDataRate+0xec>)
 800ac6e:	601a      	str	r2, [r3, #0]
      break;
 800ac70:	e02b      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	4a19      	ldr	r2, [pc, #100]	@ (800acdc <LSM6DSV16X_ACC_GetOutputDataRate+0xf0>)
 800ac76:	601a      	str	r2, [r3, #0]
      break;
 800ac78:	e027      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	4a18      	ldr	r2, [pc, #96]	@ (800ace0 <LSM6DSV16X_ACC_GetOutputDataRate+0xf4>)
 800ac7e:	601a      	str	r2, [r3, #0]
      break;
 800ac80:	e023      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	4a17      	ldr	r2, [pc, #92]	@ (800ace4 <LSM6DSV16X_ACC_GetOutputDataRate+0xf8>)
 800ac86:	601a      	str	r2, [r3, #0]
      break;
 800ac88:	e01f      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	4a16      	ldr	r2, [pc, #88]	@ (800ace8 <LSM6DSV16X_ACC_GetOutputDataRate+0xfc>)
 800ac8e:	601a      	str	r2, [r3, #0]
      break;
 800ac90:	e01b      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	4a15      	ldr	r2, [pc, #84]	@ (800acec <LSM6DSV16X_ACC_GetOutputDataRate+0x100>)
 800ac96:	601a      	str	r2, [r3, #0]
      break;
 800ac98:	e017      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	4a14      	ldr	r2, [pc, #80]	@ (800acf0 <LSM6DSV16X_ACC_GetOutputDataRate+0x104>)
 800ac9e:	601a      	str	r2, [r3, #0]
      break;
 800aca0:	e013      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	4a13      	ldr	r2, [pc, #76]	@ (800acf4 <LSM6DSV16X_ACC_GetOutputDataRate+0x108>)
 800aca6:	601a      	str	r2, [r3, #0]
      break;
 800aca8:	e00f      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	4a12      	ldr	r2, [pc, #72]	@ (800acf8 <LSM6DSV16X_ACC_GetOutputDataRate+0x10c>)
 800acae:	601a      	str	r2, [r3, #0]
      break;
 800acb0:	e00b      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	4a11      	ldr	r2, [pc, #68]	@ (800acfc <LSM6DSV16X_ACC_GetOutputDataRate+0x110>)
 800acb6:	601a      	str	r2, [r3, #0]
      break;
 800acb8:	e007      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	4a10      	ldr	r2, [pc, #64]	@ (800ad00 <LSM6DSV16X_ACC_GetOutputDataRate+0x114>)
 800acbe:	601a      	str	r2, [r3, #0]
      break;
 800acc0:	e003      	b.n	800acca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    default:
      ret = LSM6DSV16X_ERROR;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800acc6:	60fb      	str	r3, [r7, #12]
      break;
 800acc8:	bf00      	nop
  }

  return ret;
 800acca:	68fb      	ldr	r3, [r7, #12]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	3ff00000 	.word	0x3ff00000
 800acd8:	40f00000 	.word	0x40f00000
 800acdc:	41700000 	.word	0x41700000
 800ace0:	41f00000 	.word	0x41f00000
 800ace4:	42700000 	.word	0x42700000
 800ace8:	42f00000 	.word	0x42f00000
 800acec:	43700000 	.word	0x43700000
 800acf0:	43f00000 	.word	0x43f00000
 800acf4:	44700000 	.word	0x44700000
 800acf8:	44f00000 	.word	0x44f00000
 800acfc:	45700000 	.word	0x45700000
 800ad00:	45f00000 	.word	0x45f00000

0800ad04 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d106      	bne.n	800ad28 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800ad1a:	ed97 0a00 	vldr	s0, [r7]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fb6a 	bl	800b3f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 800ad24:	4603      	mov	r3, r0
 800ad26:	e005      	b.n	800ad34 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800ad28:	ed97 0a00 	vldr	s0, [r7]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fc05 	bl	800b53c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 800ad32:	4603      	mov	r3, r0
  }
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3320      	adds	r3, #32
 800ad4e:	f107 020b 	add.w	r2, r7, #11
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f001 f9d5 	bl	800c104 <lsm6dsv16x_xl_full_scale_get>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad64:	e023      	b.n	800adae <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d81b      	bhi.n	800ada4 <LSM6DSV16X_ACC_GetFullScale+0x68>
 800ad6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800ad8d 	.word	0x0800ad8d
 800ad7c:	0800ad95 	.word	0x0800ad95
 800ad80:	0800ad9d 	.word	0x0800ad9d
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2202      	movs	r2, #2
 800ad88:	601a      	str	r2, [r3, #0]
      break;
 800ad8a:	e00f      	b.n	800adac <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2204      	movs	r2, #4
 800ad90:	601a      	str	r2, [r3, #0]
      break;
 800ad92:	e00b      	b.n	800adac <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2208      	movs	r2, #8
 800ad98:	601a      	str	r2, [r3, #0]
      break;
 800ad9a:	e007      	b.n	800adac <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2210      	movs	r2, #16
 800ada0:	601a      	str	r2, [r3, #0]
      break;
 800ada2:	e003      	b.n	800adac <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800ada4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ada8:	60fb      	str	r3, [r7, #12]
      break;
 800adaa:	bf00      	nop
  }

  return ret;
 800adac:	68fb      	ldr	r3, [r7, #12]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop

0800adb8 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	dd0b      	ble.n	800ade0 <LSM6DSV16X_ACC_SetFullScale+0x28>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b04      	cmp	r3, #4
 800adcc:	dd06      	ble.n	800addc <LSM6DSV16X_ACC_SetFullScale+0x24>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b08      	cmp	r3, #8
 800add2:	dc01      	bgt.n	800add8 <LSM6DSV16X_ACC_SetFullScale+0x20>
 800add4:	2302      	movs	r3, #2
 800add6:	e004      	b.n	800ade2 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800add8:	2303      	movs	r3, #3
 800adda:	e002      	b.n	800ade2 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800ade0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 800ade2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3320      	adds	r3, #32
 800ade8:	7bfa      	ldrb	r2, [r7, #15]
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f001 f963 	bl	800c0b8 <lsm6dsv16x_xl_full_scale_set>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 800adf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adfc:	e000      	b.n	800ae00 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3320      	adds	r3, #32
 800ae16:	f107 0208 	add.w	r2, r7, #8
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 f9fc 	bl	800c21a <lsm6dsv16x_acceleration_raw_get>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae2c:	e00c      	b.n	800ae48 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800ae2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800ae36:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800ae3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3320      	adds	r3, #32
 800ae64:	f107 0210 	add.w	r2, r7, #16
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 f9d5 	bl	800c21a <lsm6dsv16x_acceleration_raw_get>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800ae76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae7a:	e03c      	b.n	800aef6 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 800ae7c:	f107 030c 	add.w	r3, r7, #12
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fe6c 	bl	800ab60 <LSM6DSV16X_ACC_GetSensitivity>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 800ae8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae92:	e030      	b.n	800aef6 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800ae94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ae98:	ee07 3a90 	vmov	s15, r3
 800ae9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aea0:	edd7 7a03 	vldr	s15, [r7, #12]
 800aea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aeac:	ee17 2a90 	vmov	r2, s15
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800aeb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aeb8:	ee07 3a90 	vmov	s15, r3
 800aebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aec0:	edd7 7a03 	vldr	s15, [r7, #12]
 800aec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aecc:	ee17 2a90 	vmov	r2, s15
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800aed4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aee0:	edd7 7a03 	vldr	s15, [r7, #12]
 800aee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aeec:	ee17 2a90 	vmov	r2, s15
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	e014      	b.n	800af3e <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f103 0220 	add.w	r2, r3, #32
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f000 fe9e 	bl	800bc64 <lsm6dsv16x_gy_data_rate_set>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af32:	e004      	b.n	800af3e <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	e01f      	b.n	800af9c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f103 0220 	add.w	r2, r3, #32
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3334      	adds	r3, #52	@ 0x34
 800af66:	4619      	mov	r1, r3
 800af68:	4610      	mov	r0, r2
 800af6a:	f000 fecb 	bl	800bd04 <lsm6dsv16x_gy_data_rate_get>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800af74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af78:	e010      	b.n	800af9c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3320      	adds	r3, #32
 800af7e:	2100      	movs	r1, #0
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fe6f 	bl	800bc64 <lsm6dsv16x_gy_data_rate_set>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800af8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af90:	e004      	b.n	800af9c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3320      	adds	r3, #32
 800afb6:	f107 020b 	add.w	r2, r7, #11
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 f823 	bl	800c008 <lsm6dsv16x_gy_full_scale_get>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800afc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afcc:	e03d      	b.n	800b04a <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	2b0c      	cmp	r3, #12
 800afd2:	d835      	bhi.n	800b040 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 800afd4:	a201      	add	r2, pc, #4	@ (adr r2, 800afdc <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800b011 	.word	0x0800b011
 800afe0:	0800b019 	.word	0x0800b019
 800afe4:	0800b021 	.word	0x0800b021
 800afe8:	0800b029 	.word	0x0800b029
 800afec:	0800b031 	.word	0x0800b031
 800aff0:	0800b041 	.word	0x0800b041
 800aff4:	0800b041 	.word	0x0800b041
 800aff8:	0800b041 	.word	0x0800b041
 800affc:	0800b041 	.word	0x0800b041
 800b000:	0800b041 	.word	0x0800b041
 800b004:	0800b041 	.word	0x0800b041
 800b008:	0800b041 	.word	0x0800b041
 800b00c:	0800b039 	.word	0x0800b039
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	4a10      	ldr	r2, [pc, #64]	@ (800b054 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 800b014:	601a      	str	r2, [r3, #0]
      break;
 800b016:	e017      	b.n	800b048 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	4a0f      	ldr	r2, [pc, #60]	@ (800b058 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 800b01c:	601a      	str	r2, [r3, #0]
      break;
 800b01e:	e013      	b.n	800b048 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	4a0e      	ldr	r2, [pc, #56]	@ (800b05c <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 800b024:	601a      	str	r2, [r3, #0]
      break;
 800b026:	e00f      	b.n	800b048 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	4a0d      	ldr	r2, [pc, #52]	@ (800b060 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 800b02c:	601a      	str	r2, [r3, #0]
      break;
 800b02e:	e00b      	b.n	800b048 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	4a0c      	ldr	r2, [pc, #48]	@ (800b064 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 800b034:	601a      	str	r2, [r3, #0]
      break;
 800b036:	e007      	b.n	800b048 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	4a0b      	ldr	r2, [pc, #44]	@ (800b068 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 800b03c:	601a      	str	r2, [r3, #0]
      break;
 800b03e:	e003      	b.n	800b048 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 800b040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b044:	60fb      	str	r3, [r7, #12]
      break;
 800b046:	bf00      	nop
  }

  return ret;
 800b048:	68fb      	ldr	r3, [r7, #12]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	408c0000 	.word	0x408c0000
 800b058:	410c0000 	.word	0x410c0000
 800b05c:	418c0000 	.word	0x418c0000
 800b060:	420c0000 	.word	0x420c0000
 800b064:	428c0000 	.word	0x428c0000
 800b068:	430c0000 	.word	0x430c0000

0800b06c <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3320      	adds	r3, #32
 800b07e:	f107 020b 	add.w	r2, r7, #11
 800b082:	4611      	mov	r1, r2
 800b084:	4618      	mov	r0, r3
 800b086:	f000 fe3d 	bl	800bd04 <lsm6dsv16x_gy_data_rate_get>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b094:	e056      	b.n	800b144 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd8>
  }

  switch (odr_low_level)
 800b096:	7afb      	ldrb	r3, [r7, #11]
 800b098:	2b0c      	cmp	r3, #12
 800b09a:	d84e      	bhi.n	800b13a <LSM6DSV16X_GYRO_GetOutputDataRate+0xce>
 800b09c:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b0d9 	.word	0x0800b0d9
 800b0a8:	0800b13b 	.word	0x0800b13b
 800b0ac:	0800b0e3 	.word	0x0800b0e3
 800b0b0:	0800b0eb 	.word	0x0800b0eb
 800b0b4:	0800b0f3 	.word	0x0800b0f3
 800b0b8:	0800b0fb 	.word	0x0800b0fb
 800b0bc:	0800b103 	.word	0x0800b103
 800b0c0:	0800b10b 	.word	0x0800b10b
 800b0c4:	0800b113 	.word	0x0800b113
 800b0c8:	0800b11b 	.word	0x0800b11b
 800b0cc:	0800b123 	.word	0x0800b123
 800b0d0:	0800b12b 	.word	0x0800b12b
 800b0d4:	0800b133 	.word	0x0800b133
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	f04f 0200 	mov.w	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
      break;
 800b0e0:	e02f      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	4a19      	ldr	r2, [pc, #100]	@ (800b14c <LSM6DSV16X_GYRO_GetOutputDataRate+0xe0>)
 800b0e6:	601a      	str	r2, [r3, #0]
      break;
 800b0e8:	e02b      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	4a18      	ldr	r2, [pc, #96]	@ (800b150 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe4>)
 800b0ee:	601a      	str	r2, [r3, #0]
      break;
 800b0f0:	e027      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	4a17      	ldr	r2, [pc, #92]	@ (800b154 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe8>)
 800b0f6:	601a      	str	r2, [r3, #0]
      break;
 800b0f8:	e023      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	4a16      	ldr	r2, [pc, #88]	@ (800b158 <LSM6DSV16X_GYRO_GetOutputDataRate+0xec>)
 800b0fe:	601a      	str	r2, [r3, #0]
      break;
 800b100:	e01f      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	4a15      	ldr	r2, [pc, #84]	@ (800b15c <LSM6DSV16X_GYRO_GetOutputDataRate+0xf0>)
 800b106:	601a      	str	r2, [r3, #0]
      break;
 800b108:	e01b      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	4a14      	ldr	r2, [pc, #80]	@ (800b160 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf4>)
 800b10e:	601a      	str	r2, [r3, #0]
      break;
 800b110:	e017      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	4a13      	ldr	r2, [pc, #76]	@ (800b164 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf8>)
 800b116:	601a      	str	r2, [r3, #0]
      break;
 800b118:	e013      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	4a12      	ldr	r2, [pc, #72]	@ (800b168 <LSM6DSV16X_GYRO_GetOutputDataRate+0xfc>)
 800b11e:	601a      	str	r2, [r3, #0]
      break;
 800b120:	e00f      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	4a11      	ldr	r2, [pc, #68]	@ (800b16c <LSM6DSV16X_GYRO_GetOutputDataRate+0x100>)
 800b126:	601a      	str	r2, [r3, #0]
      break;
 800b128:	e00b      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	4a10      	ldr	r2, [pc, #64]	@ (800b170 <LSM6DSV16X_GYRO_GetOutputDataRate+0x104>)
 800b12e:	601a      	str	r2, [r3, #0]
      break;
 800b130:	e007      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	4a0f      	ldr	r2, [pc, #60]	@ (800b174 <LSM6DSV16X_GYRO_GetOutputDataRate+0x108>)
 800b136:	601a      	str	r2, [r3, #0]
      break;
 800b138:	e003      	b.n	800b142 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    default:
      ret = LSM6DSV16X_ERROR;
 800b13a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b13e:	60fb      	str	r3, [r7, #12]
      break;
 800b140:	bf00      	nop
  }

  return ret;
 800b142:	68fb      	ldr	r3, [r7, #12]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	40f00000 	.word	0x40f00000
 800b150:	41700000 	.word	0x41700000
 800b154:	41f00000 	.word	0x41f00000
 800b158:	42700000 	.word	0x42700000
 800b15c:	42f00000 	.word	0x42f00000
 800b160:	43700000 	.word	0x43700000
 800b164:	43f00000 	.word	0x43f00000
 800b168:	44700000 	.word	0x44700000
 800b16c:	44f00000 	.word	0x44f00000
 800b170:	45700000 	.word	0x45700000
 800b174:	45f00000 	.word	0x45f00000

0800b178 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d106      	bne.n	800b19c <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800b18e:	ed97 0a00 	vldr	s0, [r7]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fa6a 	bl	800b66c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 800b198:	4603      	mov	r3, r0
 800b19a:	e005      	b.n	800b1a8 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800b19c:	ed97 0a00 	vldr	s0, [r7]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 faf9 	bl	800b798 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 800b1a6:	4603      	mov	r3, r0
  }
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3320      	adds	r3, #32
 800b1c2:	f107 020b 	add.w	r2, r7, #11
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 ff1d 	bl	800c008 <lsm6dsv16x_gy_full_scale_get>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b1d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1d8:	e041      	b.n	800b25e <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 800b1da:	7afb      	ldrb	r3, [r7, #11]
 800b1dc:	2b0c      	cmp	r3, #12
 800b1de:	d839      	bhi.n	800b254 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 800b1e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e8 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 800b1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e6:	bf00      	nop
 800b1e8:	0800b21d 	.word	0x0800b21d
 800b1ec:	0800b225 	.word	0x0800b225
 800b1f0:	0800b22d 	.word	0x0800b22d
 800b1f4:	0800b237 	.word	0x0800b237
 800b1f8:	0800b241 	.word	0x0800b241
 800b1fc:	0800b255 	.word	0x0800b255
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b255 	.word	0x0800b255
 800b208:	0800b255 	.word	0x0800b255
 800b20c:	0800b255 	.word	0x0800b255
 800b210:	0800b255 	.word	0x0800b255
 800b214:	0800b255 	.word	0x0800b255
 800b218:	0800b24b 	.word	0x0800b24b
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	227d      	movs	r2, #125	@ 0x7d
 800b220:	601a      	str	r2, [r3, #0]
      break;
 800b222:	e01b      	b.n	800b25c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	22fa      	movs	r2, #250	@ 0xfa
 800b228:	601a      	str	r2, [r3, #0]
      break;
 800b22a:	e017      	b.n	800b25c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b232:	601a      	str	r2, [r3, #0]
      break;
 800b234:	e012      	b.n	800b25c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b23c:	601a      	str	r2, [r3, #0]
      break;
 800b23e:	e00d      	b.n	800b25c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800b246:	601a      	str	r2, [r3, #0]
      break;
 800b248:	e008      	b.n	800b25c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b250:	601a      	str	r2, [r3, #0]
      break;
 800b252:	e003      	b.n	800b25c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b258:	60fb      	str	r3, [r7, #12]
      break;
 800b25a:	bf00      	nop
  }

  return ret;
 800b25c:	68fb      	ldr	r3, [r7, #12]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop

0800b268 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b7d      	cmp	r3, #125	@ 0x7d
 800b276:	dd18      	ble.n	800b2aa <LSM6DSV16X_GYRO_SetFullScale+0x42>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	2bfa      	cmp	r3, #250	@ 0xfa
 800b27c:	dd13      	ble.n	800b2a6 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b284:	dd0d      	ble.n	800b2a2 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b28c:	dd07      	ble.n	800b29e <LSM6DSV16X_GYRO_SetFullScale+0x36>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b294:	dc01      	bgt.n	800b29a <LSM6DSV16X_GYRO_SetFullScale+0x32>
 800b296:	2304      	movs	r3, #4
 800b298:	e008      	b.n	800b2ac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b29a:	230c      	movs	r3, #12
 800b29c:	e006      	b.n	800b2ac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e004      	b.n	800b2ac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e002      	b.n	800b2ac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b2aa:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 800b2ac:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3320      	adds	r3, #32
 800b2b2:	7bfa      	ldrb	r2, [r7, #15]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fe80 	bl	800bfbc <lsm6dsv16x_gy_full_scale_set>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2c6:	e000      	b.n	800b2ca <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3320      	adds	r3, #32
 800b2e0:	f107 0208 	add.w	r2, r7, #8
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 ff4a 	bl	800c180 <lsm6dsv16x_angular_rate_raw_get>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800b2f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2f6:	e00c      	b.n	800b312 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800b2f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800b300:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800b308:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b086      	sub	sp, #24
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3320      	adds	r3, #32
 800b328:	f107 0210 	add.w	r2, r7, #16
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 ff26 	bl	800c180 <lsm6dsv16x_angular_rate_raw_get>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <LSM6DSV16X_GYRO_GetAxes+0x26>
  {
    return LSM6DSV16X_ERROR;
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b33e:	e03c      	b.n	800b3ba <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 800b340:	f107 030c 	add.w	r3, r7, #12
 800b344:	4619      	mov	r1, r3
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fe2c 	bl	800afa4 <LSM6DSV16X_GYRO_GetSensitivity>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <LSM6DSV16X_GYRO_GetAxes+0x3e>
  {
    return LSM6DSV16X_ERROR;
 800b352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b356:	e030      	b.n	800b3ba <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800b358:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b35c:	ee07 3a90 	vmov	s15, r3
 800b360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b364:	edd7 7a03 	vldr	s15, [r7, #12]
 800b368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b370:	ee17 2a90 	vmov	r2, s15
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800b378:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b37c:	ee07 3a90 	vmov	s15, r3
 800b380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b384:	edd7 7a03 	vldr	s15, [r7, #12]
 800b388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b390:	ee17 2a90 	vmov	r2, s15
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800b398:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3b0:	ee17 2a90 	vmov	r2, s15
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f103 0020 	add.w	r0, r3, #32
 800b3d8:	1cba      	adds	r2, r7, #2
 800b3da:	78f9      	ldrb	r1, [r7, #3]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f000 fab7 	bl	800b950 <lsm6dsv16x_write_reg>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3ec:	e000      	b.n	800b3f0 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800b404:	edd7 7a00 	vldr	s15, [r7]
 800b408:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 800b40c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	d801      	bhi.n	800b41a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 800b416:	2301      	movs	r3, #1
 800b418:	e06e      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b41a:	edd7 7a00 	vldr	s15, [r7]
 800b41e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800b422:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42a:	d801      	bhi.n	800b430 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e063      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b430:	edd7 7a00 	vldr	s15, [r7]
 800b434:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800b438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	d801      	bhi.n	800b446 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800b442:	2303      	movs	r3, #3
 800b444:	e058      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b446:	edd7 7a00 	vldr	s15, [r7]
 800b44a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800b44e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b456:	d801      	bhi.n	800b45c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 800b458:	2304      	movs	r3, #4
 800b45a:	e04d      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b45c:	edd7 7a00 	vldr	s15, [r7]
 800b460:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b520 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 800b464:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46c:	d801      	bhi.n	800b472 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800b46e:	2305      	movs	r3, #5
 800b470:	e042      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b472:	edd7 7a00 	vldr	s15, [r7]
 800b476:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800b524 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800b47a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b482:	d801      	bhi.n	800b488 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 800b484:	2306      	movs	r3, #6
 800b486:	e037      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b488:	edd7 7a00 	vldr	s15, [r7]
 800b48c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b528 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 800b490:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b498:	d801      	bhi.n	800b49e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800b49a:	2307      	movs	r3, #7
 800b49c:	e02c      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b49e:	edd7 7a00 	vldr	s15, [r7]
 800b4a2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b52c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 800b4a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ae:	d801      	bhi.n	800b4b4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	e021      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b4b4:	edd7 7a00 	vldr	s15, [r7]
 800b4b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b530 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 800b4bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c4:	d801      	bhi.n	800b4ca <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800b4c6:	2309      	movs	r3, #9
 800b4c8:	e016      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b4ca:	edd7 7a00 	vldr	s15, [r7]
 800b4ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b534 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800b4d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4da:	d801      	bhi.n	800b4e0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800b4dc:	230a      	movs	r3, #10
 800b4de:	e00b      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b4e0:	edd7 7a00 	vldr	s15, [r7]
 800b4e4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b538 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 800b4e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f0:	d801      	bhi.n	800b4f6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 800b4f2:	230b      	movs	r3, #11
 800b4f4:	e000      	b.n	800b4f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b4f6:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800b4f8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	3320      	adds	r3, #32
 800b4fe:	7bfa      	ldrb	r2, [r7, #15]
 800b500:	4611      	mov	r1, r2
 800b502:	4618      	mov	r0, r3
 800b504:	f000 fa4d 	bl	800b9a2 <lsm6dsv16x_xl_data_rate_set>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 800b50e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b512:	e000      	b.n	800b516 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	42700000 	.word	0x42700000
 800b524:	42f00000 	.word	0x42f00000
 800b528:	43700000 	.word	0x43700000
 800b52c:	43f00000 	.word	0x43f00000
 800b530:	44700000 	.word	0x44700000
 800b534:	44f00000 	.word	0x44f00000
 800b538:	45700000 	.word	0x45700000

0800b53c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800b548:	edd7 7a00 	vldr	s15, [r7]
 800b54c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 800b550:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b558:	d801      	bhi.n	800b55e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e06e      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b55e:	edd7 7a00 	vldr	s15, [r7]
 800b562:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800b566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b56e:	d801      	bhi.n	800b574 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 800b570:	2302      	movs	r3, #2
 800b572:	e063      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b574:	edd7 7a00 	vldr	s15, [r7]
 800b578:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800b57c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	d801      	bhi.n	800b58a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800b586:	2303      	movs	r3, #3
 800b588:	e058      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b58a:	edd7 7a00 	vldr	s15, [r7]
 800b58e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800b592:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	d801      	bhi.n	800b5a0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 800b59c:	2304      	movs	r3, #4
 800b59e:	e04d      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b5a0:	edd7 7a00 	vldr	s15, [r7]
 800b5a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b650 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 800b5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	d801      	bhi.n	800b5b6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800b5b2:	2305      	movs	r3, #5
 800b5b4:	e042      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b5b6:	edd7 7a00 	vldr	s15, [r7]
 800b5ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b654 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 800b5be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c6:	d801      	bhi.n	800b5cc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 800b5c8:	2306      	movs	r3, #6
 800b5ca:	e037      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b5cc:	edd7 7a00 	vldr	s15, [r7]
 800b5d0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b658 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800b5d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5dc:	d801      	bhi.n	800b5e2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800b5de:	2307      	movs	r3, #7
 800b5e0:	e02c      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b5e2:	edd7 7a00 	vldr	s15, [r7]
 800b5e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b65c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 800b5ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	d801      	bhi.n	800b5f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	e021      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b5f8:	edd7 7a00 	vldr	s15, [r7]
 800b5fc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b660 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 800b600:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b608:	d801      	bhi.n	800b60e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800b60a:	2309      	movs	r3, #9
 800b60c:	e016      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b60e:	edd7 7a00 	vldr	s15, [r7]
 800b612:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b664 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 800b616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61e:	d801      	bhi.n	800b624 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800b620:	230a      	movs	r3, #10
 800b622:	e00b      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b624:	edd7 7a00 	vldr	s15, [r7]
 800b628:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b668 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 800b62c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b634:	d801      	bhi.n	800b63a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 800b636:	230b      	movs	r3, #11
 800b638:	e000      	b.n	800b63c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b63a:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	42700000 	.word	0x42700000
 800b654:	42f00000 	.word	0x42f00000
 800b658:	43700000 	.word	0x43700000
 800b65c:	43f00000 	.word	0x43f00000
 800b660:	44700000 	.word	0x44700000
 800b664:	44f00000 	.word	0x44f00000
 800b668:	45700000 	.word	0x45700000

0800b66c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 800b678:	edd7 7a00 	vldr	s15, [r7]
 800b67c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800b680:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	d801      	bhi.n	800b68e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800b68a:	2302      	movs	r3, #2
 800b68c:	e063      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b68e:	edd7 7a00 	vldr	s15, [r7]
 800b692:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800b696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69e:	d801      	bhi.n	800b6a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e058      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b6a4:	edd7 7a00 	vldr	s15, [r7]
 800b6a8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800b6ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b4:	d801      	bhi.n	800b6ba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800b6b6:	2304      	movs	r3, #4
 800b6b8:	e04d      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b6ba:	edd7 7a00 	vldr	s15, [r7]
 800b6be:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b77c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800b6c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ca:	d801      	bhi.n	800b6d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800b6cc:	2305      	movs	r3, #5
 800b6ce:	e042      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b6d0:	edd7 7a00 	vldr	s15, [r7]
 800b6d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b780 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800b6d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	d801      	bhi.n	800b6e6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800b6e2:	2306      	movs	r3, #6
 800b6e4:	e037      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b6e6:	edd7 7a00 	vldr	s15, [r7]
 800b6ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b784 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800b6ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f6:	d801      	bhi.n	800b6fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800b6f8:	2307      	movs	r3, #7
 800b6fa:	e02c      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b6fc:	edd7 7a00 	vldr	s15, [r7]
 800b700:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b788 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 800b704:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70c:	d801      	bhi.n	800b712 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800b70e:	2308      	movs	r3, #8
 800b710:	e021      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b712:	edd7 7a00 	vldr	s15, [r7]
 800b716:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b78c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800b71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b722:	d801      	bhi.n	800b728 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800b724:	2309      	movs	r3, #9
 800b726:	e016      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b728:	edd7 7a00 	vldr	s15, [r7]
 800b72c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b790 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 800b730:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b738:	d801      	bhi.n	800b73e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800b73a:	230a      	movs	r3, #10
 800b73c:	e00b      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b73e:	edd7 7a00 	vldr	s15, [r7]
 800b742:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b794 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800b746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74e:	d801      	bhi.n	800b754 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 800b750:	230b      	movs	r3, #11
 800b752:	e000      	b.n	800b756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800b754:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800b756:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3320      	adds	r3, #32
 800b75c:	7bfa      	ldrb	r2, [r7, #15]
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f000 fa7f 	bl	800bc64 <lsm6dsv16x_gy_data_rate_set>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 800b76c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b770:	e000      	b.n	800b774 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	42700000 	.word	0x42700000
 800b780:	42f00000 	.word	0x42f00000
 800b784:	43700000 	.word	0x43700000
 800b788:	43f00000 	.word	0x43f00000
 800b78c:	44700000 	.word	0x44700000
 800b790:	44f00000 	.word	0x44f00000
 800b794:	45700000 	.word	0x45700000

0800b798 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 800b7a4:	edd7 7a00 	vldr	s15, [r7]
 800b7a8:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800b7ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b4:	d801      	bhi.n	800b7ba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	e063      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b7ba:	edd7 7a00 	vldr	s15, [r7]
 800b7be:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800b7c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ca:	d801      	bhi.n	800b7d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e058      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b7d0:	edd7 7a00 	vldr	s15, [r7]
 800b7d4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800b7d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e0:	d801      	bhi.n	800b7e6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	e04d      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b7e6:	edd7 7a00 	vldr	s15, [r7]
 800b7ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800b898 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800b7ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f6:	d801      	bhi.n	800b7fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800b7f8:	2305      	movs	r3, #5
 800b7fa:	e042      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b7fc:	edd7 7a00 	vldr	s15, [r7]
 800b800:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b89c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 800b804:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80c:	d801      	bhi.n	800b812 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800b80e:	2306      	movs	r3, #6
 800b810:	e037      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b812:	edd7 7a00 	vldr	s15, [r7]
 800b816:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b8a0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800b81a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b822:	d801      	bhi.n	800b828 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800b824:	2307      	movs	r3, #7
 800b826:	e02c      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b828:	edd7 7a00 	vldr	s15, [r7]
 800b82c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b8a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 800b830:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	d801      	bhi.n	800b83e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800b83a:	2308      	movs	r3, #8
 800b83c:	e021      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b83e:	edd7 7a00 	vldr	s15, [r7]
 800b842:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b8a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800b846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	d801      	bhi.n	800b854 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800b850:	2309      	movs	r3, #9
 800b852:	e016      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b854:	edd7 7a00 	vldr	s15, [r7]
 800b858:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b8ac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 800b85c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	d801      	bhi.n	800b86a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800b866:	230a      	movs	r3, #10
 800b868:	e00b      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b86a:	edd7 7a00 	vldr	s15, [r7]
 800b86e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b8b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 800b872:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87a:	d801      	bhi.n	800b880 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800b87c:	230b      	movs	r3, #11
 800b87e:	e000      	b.n	800b882 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800b880:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	42700000 	.word	0x42700000
 800b89c:	42f00000 	.word	0x42f00000
 800b8a0:	43700000 	.word	0x43700000
 800b8a4:	43f00000 	.word	0x43f00000
 800b8a8:	44700000 	.word	0x44700000
 800b8ac:	44f00000 	.word	0x44f00000
 800b8b0:	45700000 	.word	0x45700000

0800b8b4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800b8b4:	b590      	push	{r4, r7, lr}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	607a      	str	r2, [r7, #4]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	72fb      	strb	r3, [r7, #11]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	695c      	ldr	r4, [r3, #20]
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	7b1b      	ldrb	r3, [r3, #12]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	7afb      	ldrb	r3, [r7, #11]
 800b8d8:	b299      	uxth	r1, r3
 800b8da:	893b      	ldrh	r3, [r7, #8]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	47a0      	blx	r4
 800b8e0:	4603      	mov	r3, r0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	371c      	adds	r7, #28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd90      	pop	{r4, r7, pc}

0800b8ea <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800b8ea:	b590      	push	{r4, r7, lr}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	72fb      	strb	r3, [r7, #11]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	691c      	ldr	r4, [r3, #16]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	7b1b      	ldrb	r3, [r3, #12]
 800b90a:	4618      	mov	r0, r3
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	b299      	uxth	r1, r3
 800b910:	893b      	ldrh	r3, [r7, #8]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	47a0      	blx	r4
 800b916:	4603      	mov	r3, r0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd90      	pop	{r4, r7, pc}

0800b920 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 800b920:	b590      	push	{r4, r7, lr}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	461a      	mov	r2, r3
 800b92c:	460b      	mov	r3, r1
 800b92e:	72fb      	strb	r3, [r7, #11]
 800b930:	4613      	mov	r3, r2
 800b932:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	685c      	ldr	r4, [r3, #4]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	68d8      	ldr	r0, [r3, #12]
 800b93c:	893b      	ldrh	r3, [r7, #8]
 800b93e:	7af9      	ldrb	r1, [r7, #11]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	47a0      	blx	r4
 800b944:	6178      	str	r0, [r7, #20]

  return ret;
 800b946:	697b      	ldr	r3, [r7, #20]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	371c      	adds	r7, #28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	607a      	str	r2, [r7, #4]
 800b95a:	461a      	mov	r2, r3
 800b95c:	460b      	mov	r3, r1
 800b95e:	72fb      	strb	r3, [r7, #11]
 800b960:	4613      	mov	r3, r2
 800b962:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681c      	ldr	r4, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68d8      	ldr	r0, [r3, #12]
 800b96c:	893b      	ldrh	r3, [r7, #8]
 800b96e:	7af9      	ldrb	r1, [r7, #11]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	47a0      	blx	r4
 800b974:	6178      	str	r0, [r7, #20]

  return ret;
 800b976:	697b      	ldr	r3, [r7, #20]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	371c      	adds	r7, #28
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd90      	pop	{r4, r7, pc}

0800b980 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800b98a:	2301      	movs	r3, #1
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	210f      	movs	r1, #15
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff ffc5 	bl	800b920 <lsm6dsv16x_read_reg>
 800b996:	60f8      	str	r0, [r7, #12]

  return ret;
 800b998:	68fb      	ldr	r3, [r7, #12]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b086      	sub	sp, #24
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800b9ae:	f107 0210 	add.w	r2, r7, #16
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	2110      	movs	r1, #16
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff ffb2 	bl	800b920 <lsm6dsv16x_read_reg>
 800b9bc:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <lsm6dsv16x_xl_data_rate_set+0x26>
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	e039      	b.n	800ba3c <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	7c3b      	ldrb	r3, [r7, #16]
 800b9d2:	f362 0303 	bfi	r3, r2, #0, #4
 800b9d6:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800b9d8:	f107 0210 	add.w	r2, r7, #16
 800b9dc:	2301      	movs	r3, #1
 800b9de:	2110      	movs	r1, #16
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ffb5 	bl	800b950 <lsm6dsv16x_write_reg>
 800b9e6:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <lsm6dsv16x_xl_data_rate_set+0x50>
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	e024      	b.n	800ba3c <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	091b      	lsrs	r3, r3, #4
 800b9f6:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800b9f8:	7cfb      	ldrb	r3, [r7, #19]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d01d      	beq.n	800ba3a <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800b9fe:	f107 020c 	add.w	r2, r7, #12
 800ba02:	2301      	movs	r3, #1
 800ba04:	2162      	movs	r1, #98	@ 0x62
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff ff8a 	bl	800b920 <lsm6dsv16x_read_reg>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	4413      	add	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800ba14:	7cfb      	ldrb	r3, [r7, #19]
 800ba16:	f003 0303 	and.w	r3, r3, #3
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	7b3b      	ldrb	r3, [r7, #12]
 800ba1e:	f362 0301 	bfi	r3, r2, #0, #2
 800ba22:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800ba24:	f107 020c 	add.w	r2, r7, #12
 800ba28:	2301      	movs	r3, #1
 800ba2a:	2162      	movs	r1, #98	@ 0x62
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff ff8f 	bl	800b950 <lsm6dsv16x_write_reg>
 800ba32:	4602      	mov	r2, r0
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	4413      	add	r3, r2
 800ba38:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800ba3a:	697b      	ldr	r3, [r7, #20]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800ba4e:	f107 0210 	add.w	r2, r7, #16
 800ba52:	2301      	movs	r3, #1
 800ba54:	2110      	movs	r1, #16
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff ff62 	bl	800b920 <lsm6dsv16x_read_reg>
 800ba5c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800ba5e:	f107 020c 	add.w	r2, r7, #12
 800ba62:	2301      	movs	r3, #1
 800ba64:	2162      	movs	r1, #98	@ 0x62
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff ff5a 	bl	800b920 <lsm6dsv16x_read_reg>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	4413      	add	r3, r2
 800ba72:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <lsm6dsv16x_xl_data_rate_get+0x3a>
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	e0ed      	b.n	800bc5a <lsm6dsv16x_xl_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 800ba7e:	7b3b      	ldrb	r3, [r7, #12]
 800ba80:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800ba88:	7c3b      	ldrb	r3, [r7, #16]
 800ba8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b0c      	cmp	r3, #12
 800ba92:	f200 80dd 	bhi.w	800bc50 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800ba96:	a201      	add	r2, pc, #4	@ (adr r2, 800ba9c <lsm6dsv16x_xl_data_rate_get+0x58>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bad1 	.word	0x0800bad1
 800baa0:	0800bad9 	.word	0x0800bad9
 800baa4:	0800bae1 	.word	0x0800bae1
 800baa8:	0800bae9 	.word	0x0800bae9
 800baac:	0800bb0d 	.word	0x0800bb0d
 800bab0:	0800bb31 	.word	0x0800bb31
 800bab4:	0800bb55 	.word	0x0800bb55
 800bab8:	0800bb79 	.word	0x0800bb79
 800babc:	0800bb9d 	.word	0x0800bb9d
 800bac0:	0800bbc1 	.word	0x0800bbc1
 800bac4:	0800bbe5 	.word	0x0800bbe5
 800bac8:	0800bc09 	.word	0x0800bc09
 800bacc:	0800bc2d 	.word	0x0800bc2d
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2200      	movs	r2, #0
 800bad4:	701a      	strb	r2, [r3, #0]
      break;
 800bad6:	e0bf      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2201      	movs	r2, #1
 800badc:	701a      	strb	r2, [r3, #0]
      break;
 800bade:	e0bb      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2202      	movs	r2, #2
 800bae4:	701a      	strb	r2, [r3, #0]
      break;
 800bae6:	e0b7      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800bae8:	7cfb      	ldrb	r3, [r7, #19]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d005      	beq.n	800bafa <lsm6dsv16x_xl_data_rate_get+0xb6>
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d007      	beq.n	800bb02 <lsm6dsv16x_xl_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2203      	movs	r2, #3
 800baf6:	701a      	strb	r2, [r3, #0]
        break;
 800baf8:	e007      	b.n	800bb0a <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2213      	movs	r2, #19
 800bafe:	701a      	strb	r2, [r3, #0]
        break;
 800bb00:	e003      	b.n	800bb0a <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2223      	movs	r2, #35	@ 0x23
 800bb06:	701a      	strb	r2, [r3, #0]
        break;
 800bb08:	bf00      	nop
      }
      break;
 800bb0a:	e0a5      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 800bb0c:	7cfb      	ldrb	r3, [r7, #19]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d005      	beq.n	800bb1e <lsm6dsv16x_xl_data_rate_get+0xda>
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d007      	beq.n	800bb26 <lsm6dsv16x_xl_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2204      	movs	r2, #4
 800bb1a:	701a      	strb	r2, [r3, #0]
        break;
 800bb1c:	e007      	b.n	800bb2e <lsm6dsv16x_xl_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2214      	movs	r2, #20
 800bb22:	701a      	strb	r2, [r3, #0]
        break;
 800bb24:	e003      	b.n	800bb2e <lsm6dsv16x_xl_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2224      	movs	r2, #36	@ 0x24
 800bb2a:	701a      	strb	r2, [r3, #0]
        break;
 800bb2c:	bf00      	nop
      }
      break;
 800bb2e:	e093      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 800bb30:	7cfb      	ldrb	r3, [r7, #19]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d005      	beq.n	800bb42 <lsm6dsv16x_xl_data_rate_get+0xfe>
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d007      	beq.n	800bb4a <lsm6dsv16x_xl_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	701a      	strb	r2, [r3, #0]
        break;
 800bb40:	e007      	b.n	800bb52 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2215      	movs	r2, #21
 800bb46:	701a      	strb	r2, [r3, #0]
        break;
 800bb48:	e003      	b.n	800bb52 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2225      	movs	r2, #37	@ 0x25
 800bb4e:	701a      	strb	r2, [r3, #0]
        break;
 800bb50:	bf00      	nop
      }
      break;
 800bb52:	e081      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 800bb54:	7cfb      	ldrb	r3, [r7, #19]
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d005      	beq.n	800bb66 <lsm6dsv16x_xl_data_rate_get+0x122>
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d007      	beq.n	800bb6e <lsm6dsv16x_xl_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2206      	movs	r2, #6
 800bb62:	701a      	strb	r2, [r3, #0]
        break;
 800bb64:	e007      	b.n	800bb76 <lsm6dsv16x_xl_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2216      	movs	r2, #22
 800bb6a:	701a      	strb	r2, [r3, #0]
        break;
 800bb6c:	e003      	b.n	800bb76 <lsm6dsv16x_xl_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2226      	movs	r2, #38	@ 0x26
 800bb72:	701a      	strb	r2, [r3, #0]
        break;
 800bb74:	bf00      	nop
      }
      break;
 800bb76:	e06f      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800bb78:	7cfb      	ldrb	r3, [r7, #19]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d005      	beq.n	800bb8a <lsm6dsv16x_xl_data_rate_get+0x146>
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d007      	beq.n	800bb92 <lsm6dsv16x_xl_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2207      	movs	r2, #7
 800bb86:	701a      	strb	r2, [r3, #0]
        break;
 800bb88:	e007      	b.n	800bb9a <lsm6dsv16x_xl_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2217      	movs	r2, #23
 800bb8e:	701a      	strb	r2, [r3, #0]
        break;
 800bb90:	e003      	b.n	800bb9a <lsm6dsv16x_xl_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2227      	movs	r2, #39	@ 0x27
 800bb96:	701a      	strb	r2, [r3, #0]
        break;
 800bb98:	bf00      	nop
      }
      break;
 800bb9a:	e05d      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 800bb9c:	7cfb      	ldrb	r3, [r7, #19]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d005      	beq.n	800bbae <lsm6dsv16x_xl_data_rate_get+0x16a>
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d007      	beq.n	800bbb6 <lsm6dsv16x_xl_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2208      	movs	r2, #8
 800bbaa:	701a      	strb	r2, [r3, #0]
        break;
 800bbac:	e007      	b.n	800bbbe <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	2218      	movs	r2, #24
 800bbb2:	701a      	strb	r2, [r3, #0]
        break;
 800bbb4:	e003      	b.n	800bbbe <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2228      	movs	r2, #40	@ 0x28
 800bbba:	701a      	strb	r2, [r3, #0]
        break;
 800bbbc:	bf00      	nop
      }
      break;
 800bbbe:	e04b      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 800bbc0:	7cfb      	ldrb	r3, [r7, #19]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d005      	beq.n	800bbd2 <lsm6dsv16x_xl_data_rate_get+0x18e>
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d007      	beq.n	800bbda <lsm6dsv16x_xl_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2209      	movs	r2, #9
 800bbce:	701a      	strb	r2, [r3, #0]
        break;
 800bbd0:	e007      	b.n	800bbe2 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2219      	movs	r2, #25
 800bbd6:	701a      	strb	r2, [r3, #0]
        break;
 800bbd8:	e003      	b.n	800bbe2 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2229      	movs	r2, #41	@ 0x29
 800bbde:	701a      	strb	r2, [r3, #0]
        break;
 800bbe0:	bf00      	nop
      }
      break;
 800bbe2:	e039      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 800bbe4:	7cfb      	ldrb	r3, [r7, #19]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d005      	beq.n	800bbf6 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d007      	beq.n	800bbfe <lsm6dsv16x_xl_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	220a      	movs	r2, #10
 800bbf2:	701a      	strb	r2, [r3, #0]
        break;
 800bbf4:	e007      	b.n	800bc06 <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	221a      	movs	r2, #26
 800bbfa:	701a      	strb	r2, [r3, #0]
        break;
 800bbfc:	e003      	b.n	800bc06 <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	222a      	movs	r2, #42	@ 0x2a
 800bc02:	701a      	strb	r2, [r3, #0]
        break;
 800bc04:	bf00      	nop
      }
      break;
 800bc06:	e027      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800bc08:	7cfb      	ldrb	r3, [r7, #19]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d005      	beq.n	800bc1a <lsm6dsv16x_xl_data_rate_get+0x1d6>
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d007      	beq.n	800bc22 <lsm6dsv16x_xl_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	220b      	movs	r2, #11
 800bc16:	701a      	strb	r2, [r3, #0]
        break;
 800bc18:	e007      	b.n	800bc2a <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	221b      	movs	r2, #27
 800bc1e:	701a      	strb	r2, [r3, #0]
        break;
 800bc20:	e003      	b.n	800bc2a <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	222b      	movs	r2, #43	@ 0x2b
 800bc26:	701a      	strb	r2, [r3, #0]
        break;
 800bc28:	bf00      	nop
      }
      break;
 800bc2a:	e015      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 800bc2c:	7cfb      	ldrb	r3, [r7, #19]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d005      	beq.n	800bc3e <lsm6dsv16x_xl_data_rate_get+0x1fa>
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d007      	beq.n	800bc46 <lsm6dsv16x_xl_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	220c      	movs	r2, #12
 800bc3a:	701a      	strb	r2, [r3, #0]
        break;
 800bc3c:	e007      	b.n	800bc4e <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	221c      	movs	r2, #28
 800bc42:	701a      	strb	r2, [r3, #0]
        break;
 800bc44:	e003      	b.n	800bc4e <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	222c      	movs	r2, #44	@ 0x2c
 800bc4a:	701a      	strb	r2, [r3, #0]
        break;
 800bc4c:	bf00      	nop
      }
      break;
 800bc4e:	e003      	b.n	800bc58 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	701a      	strb	r2, [r3, #0]
      break;
 800bc56:	bf00      	nop
  }

  return ret;
 800bc58:	697b      	ldr	r3, [r7, #20]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop

0800bc64 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800bc70:	f107 0210 	add.w	r2, r7, #16
 800bc74:	2301      	movs	r3, #1
 800bc76:	2111      	movs	r1, #17
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff fe51 	bl	800b920 <lsm6dsv16x_read_reg>
 800bc7e:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	f003 030f 	and.w	r3, r3, #15
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	7c3b      	ldrb	r3, [r7, #16]
 800bc8a:	f362 0303 	bfi	r3, r2, #0, #4
 800bc8e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800bc90:	f107 0210 	add.w	r2, r7, #16
 800bc94:	2301      	movs	r3, #1
 800bc96:	2111      	movs	r1, #17
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff fe59 	bl	800b950 <lsm6dsv16x_write_reg>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	4413      	add	r3, r2
 800bca4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <lsm6dsv16x_gy_data_rate_set+0x4c>
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	e024      	b.n	800bcfa <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	091b      	lsrs	r3, r3, #4
 800bcb4:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800bcb6:	7cfb      	ldrb	r3, [r7, #19]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d01d      	beq.n	800bcf8 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800bcbc:	f107 020c 	add.w	r2, r7, #12
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	2162      	movs	r1, #98	@ 0x62
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff fe2b 	bl	800b920 <lsm6dsv16x_read_reg>
 800bcca:	4602      	mov	r2, r0
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	4413      	add	r3, r2
 800bcd0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800bcd2:	7cfb      	ldrb	r3, [r7, #19]
 800bcd4:	f003 0303 	and.w	r3, r3, #3
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	7b3b      	ldrb	r3, [r7, #12]
 800bcdc:	f362 0301 	bfi	r3, r2, #0, #2
 800bce0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800bce2:	f107 020c 	add.w	r2, r7, #12
 800bce6:	2301      	movs	r3, #1
 800bce8:	2162      	movs	r1, #98	@ 0x62
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff fe30 	bl	800b950 <lsm6dsv16x_write_reg>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800bcf8:	697b      	ldr	r3, [r7, #20]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800bd0e:	f107 0210 	add.w	r2, r7, #16
 800bd12:	2301      	movs	r3, #1
 800bd14:	2111      	movs	r1, #17
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff fe02 	bl	800b920 <lsm6dsv16x_read_reg>
 800bd1c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800bd1e:	f107 020c 	add.w	r2, r7, #12
 800bd22:	2301      	movs	r3, #1
 800bd24:	2162      	movs	r1, #98	@ 0x62
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff fdfa 	bl	800b920 <lsm6dsv16x_read_reg>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	4413      	add	r3, r2
 800bd32:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <lsm6dsv16x_gy_data_rate_get+0x3a>
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	e0ed      	b.n	800bf1a <lsm6dsv16x_gy_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 800bd3e:	7b3b      	ldrb	r3, [r7, #12]
 800bd40:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 800bd48:	7c3b      	ldrb	r3, [r7, #16]
 800bd4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b0c      	cmp	r3, #12
 800bd52:	f200 80dd 	bhi.w	800bf10 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800bd56:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <lsm6dsv16x_gy_data_rate_get+0x58>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd91 	.word	0x0800bd91
 800bd60:	0800bd99 	.word	0x0800bd99
 800bd64:	0800bda1 	.word	0x0800bda1
 800bd68:	0800bda9 	.word	0x0800bda9
 800bd6c:	0800bdcd 	.word	0x0800bdcd
 800bd70:	0800bdf1 	.word	0x0800bdf1
 800bd74:	0800be15 	.word	0x0800be15
 800bd78:	0800be39 	.word	0x0800be39
 800bd7c:	0800be5d 	.word	0x0800be5d
 800bd80:	0800be81 	.word	0x0800be81
 800bd84:	0800bea5 	.word	0x0800bea5
 800bd88:	0800bec9 	.word	0x0800bec9
 800bd8c:	0800beed 	.word	0x0800beed
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	701a      	strb	r2, [r3, #0]
      break;
 800bd96:	e0bf      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	701a      	strb	r2, [r3, #0]
      break;
 800bd9e:	e0bb      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2202      	movs	r2, #2
 800bda4:	701a      	strb	r2, [r3, #0]
      break;
 800bda6:	e0b7      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800bda8:	7cfb      	ldrb	r3, [r7, #19]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d005      	beq.n	800bdba <lsm6dsv16x_gy_data_rate_get+0xb6>
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d007      	beq.n	800bdc2 <lsm6dsv16x_gy_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	701a      	strb	r2, [r3, #0]
        break;
 800bdb8:	e007      	b.n	800bdca <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2213      	movs	r2, #19
 800bdbe:	701a      	strb	r2, [r3, #0]
        break;
 800bdc0:	e003      	b.n	800bdca <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2223      	movs	r2, #35	@ 0x23
 800bdc6:	701a      	strb	r2, [r3, #0]
        break;
 800bdc8:	bf00      	nop
      }
      break;
 800bdca:	e0a5      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 800bdcc:	7cfb      	ldrb	r3, [r7, #19]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d005      	beq.n	800bdde <lsm6dsv16x_gy_data_rate_get+0xda>
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d007      	beq.n	800bde6 <lsm6dsv16x_gy_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2204      	movs	r2, #4
 800bdda:	701a      	strb	r2, [r3, #0]
        break;
 800bddc:	e007      	b.n	800bdee <lsm6dsv16x_gy_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2214      	movs	r2, #20
 800bde2:	701a      	strb	r2, [r3, #0]
        break;
 800bde4:	e003      	b.n	800bdee <lsm6dsv16x_gy_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2224      	movs	r2, #36	@ 0x24
 800bdea:	701a      	strb	r2, [r3, #0]
        break;
 800bdec:	bf00      	nop
      }
      break;
 800bdee:	e093      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 800bdf0:	7cfb      	ldrb	r3, [r7, #19]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d005      	beq.n	800be02 <lsm6dsv16x_gy_data_rate_get+0xfe>
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d007      	beq.n	800be0a <lsm6dsv16x_gy_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	701a      	strb	r2, [r3, #0]
        break;
 800be00:	e007      	b.n	800be12 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2215      	movs	r2, #21
 800be06:	701a      	strb	r2, [r3, #0]
        break;
 800be08:	e003      	b.n	800be12 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2225      	movs	r2, #37	@ 0x25
 800be0e:	701a      	strb	r2, [r3, #0]
        break;
 800be10:	bf00      	nop
      }
      break;
 800be12:	e081      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 800be14:	7cfb      	ldrb	r3, [r7, #19]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d005      	beq.n	800be26 <lsm6dsv16x_gy_data_rate_get+0x122>
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d007      	beq.n	800be2e <lsm6dsv16x_gy_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2206      	movs	r2, #6
 800be22:	701a      	strb	r2, [r3, #0]
        break;
 800be24:	e007      	b.n	800be36 <lsm6dsv16x_gy_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2216      	movs	r2, #22
 800be2a:	701a      	strb	r2, [r3, #0]
        break;
 800be2c:	e003      	b.n	800be36 <lsm6dsv16x_gy_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2226      	movs	r2, #38	@ 0x26
 800be32:	701a      	strb	r2, [r3, #0]
        break;
 800be34:	bf00      	nop
      }
      break;
 800be36:	e06f      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800be38:	7cfb      	ldrb	r3, [r7, #19]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d005      	beq.n	800be4a <lsm6dsv16x_gy_data_rate_get+0x146>
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d007      	beq.n	800be52 <lsm6dsv16x_gy_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2207      	movs	r2, #7
 800be46:	701a      	strb	r2, [r3, #0]
        break;
 800be48:	e007      	b.n	800be5a <lsm6dsv16x_gy_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2217      	movs	r2, #23
 800be4e:	701a      	strb	r2, [r3, #0]
        break;
 800be50:	e003      	b.n	800be5a <lsm6dsv16x_gy_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2227      	movs	r2, #39	@ 0x27
 800be56:	701a      	strb	r2, [r3, #0]
        break;
 800be58:	bf00      	nop
      }
      break;
 800be5a:	e05d      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 800be5c:	7cfb      	ldrb	r3, [r7, #19]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d005      	beq.n	800be6e <lsm6dsv16x_gy_data_rate_get+0x16a>
 800be62:	2b02      	cmp	r3, #2
 800be64:	d007      	beq.n	800be76 <lsm6dsv16x_gy_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2208      	movs	r2, #8
 800be6a:	701a      	strb	r2, [r3, #0]
        break;
 800be6c:	e007      	b.n	800be7e <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2218      	movs	r2, #24
 800be72:	701a      	strb	r2, [r3, #0]
        break;
 800be74:	e003      	b.n	800be7e <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2228      	movs	r2, #40	@ 0x28
 800be7a:	701a      	strb	r2, [r3, #0]
        break;
 800be7c:	bf00      	nop
      }
      break;
 800be7e:	e04b      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 800be80:	7cfb      	ldrb	r3, [r7, #19]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d005      	beq.n	800be92 <lsm6dsv16x_gy_data_rate_get+0x18e>
 800be86:	2b02      	cmp	r3, #2
 800be88:	d007      	beq.n	800be9a <lsm6dsv16x_gy_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2209      	movs	r2, #9
 800be8e:	701a      	strb	r2, [r3, #0]
        break;
 800be90:	e007      	b.n	800bea2 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	2219      	movs	r2, #25
 800be96:	701a      	strb	r2, [r3, #0]
        break;
 800be98:	e003      	b.n	800bea2 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2229      	movs	r2, #41	@ 0x29
 800be9e:	701a      	strb	r2, [r3, #0]
        break;
 800bea0:	bf00      	nop
      }
      break;
 800bea2:	e039      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 800bea4:	7cfb      	ldrb	r3, [r7, #19]
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d005      	beq.n	800beb6 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d007      	beq.n	800bebe <lsm6dsv16x_gy_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	220a      	movs	r2, #10
 800beb2:	701a      	strb	r2, [r3, #0]
        break;
 800beb4:	e007      	b.n	800bec6 <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	221a      	movs	r2, #26
 800beba:	701a      	strb	r2, [r3, #0]
        break;
 800bebc:	e003      	b.n	800bec6 <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	222a      	movs	r2, #42	@ 0x2a
 800bec2:	701a      	strb	r2, [r3, #0]
        break;
 800bec4:	bf00      	nop
      }
      break;
 800bec6:	e027      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800bec8:	7cfb      	ldrb	r3, [r7, #19]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d005      	beq.n	800beda <lsm6dsv16x_gy_data_rate_get+0x1d6>
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d007      	beq.n	800bee2 <lsm6dsv16x_gy_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	220b      	movs	r2, #11
 800bed6:	701a      	strb	r2, [r3, #0]
        break;
 800bed8:	e007      	b.n	800beea <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	221b      	movs	r2, #27
 800bede:	701a      	strb	r2, [r3, #0]
        break;
 800bee0:	e003      	b.n	800beea <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	222b      	movs	r2, #43	@ 0x2b
 800bee6:	701a      	strb	r2, [r3, #0]
        break;
 800bee8:	bf00      	nop
      }
      break;
 800beea:	e015      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 800beec:	7cfb      	ldrb	r3, [r7, #19]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d005      	beq.n	800befe <lsm6dsv16x_gy_data_rate_get+0x1fa>
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d007      	beq.n	800bf06 <lsm6dsv16x_gy_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	220c      	movs	r2, #12
 800befa:	701a      	strb	r2, [r3, #0]
        break;
 800befc:	e007      	b.n	800bf0e <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	221c      	movs	r2, #28
 800bf02:	701a      	strb	r2, [r3, #0]
        break;
 800bf04:	e003      	b.n	800bf0e <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	222c      	movs	r2, #44	@ 0x2c
 800bf0a:	701a      	strb	r2, [r3, #0]
        break;
 800bf0c:	bf00      	nop
      }
      break;
 800bf0e:	e003      	b.n	800bf18 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	701a      	strb	r2, [r3, #0]
      break;
 800bf16:	bf00      	nop
  }

  return ret;
 800bf18:	697b      	ldr	r3, [r7, #20]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop

0800bf24 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800bf30:	f107 0208 	add.w	r2, r7, #8
 800bf34:	2301      	movs	r3, #1
 800bf36:	2112      	movs	r1, #18
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff fcf1 	bl	800b920 <lsm6dsv16x_read_reg>
 800bf3e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10f      	bne.n	800bf66 <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 800bf46:	78fb      	ldrb	r3, [r7, #3]
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	7a3b      	ldrb	r3, [r7, #8]
 800bf50:	f362 0382 	bfi	r3, r2, #2, #1
 800bf54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800bf56:	f107 0208 	add.w	r2, r7, #8
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	2112      	movs	r1, #18
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7ff fcf6 	bl	800b950 <lsm6dsv16x_write_reg>
 800bf64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800bf66:	68fb      	ldr	r3, [r7, #12]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800bf7c:	f107 0208 	add.w	r2, r7, #8
 800bf80:	2301      	movs	r3, #1
 800bf82:	2112      	movs	r1, #18
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff fccb 	bl	800b920 <lsm6dsv16x_read_reg>
 800bf8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10f      	bne.n	800bfb2 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 800bf92:	78fb      	ldrb	r3, [r7, #3]
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	7a3b      	ldrb	r3, [r7, #8]
 800bf9c:	f362 1386 	bfi	r3, r2, #6, #1
 800bfa0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800bfa2:	f107 0208 	add.w	r2, r7, #8
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	2112      	movs	r1, #18
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fcd0 	bl	800b950 <lsm6dsv16x_write_reg>
 800bfb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800bfc8:	f107 0208 	add.w	r2, r7, #8
 800bfcc:	2301      	movs	r3, #1
 800bfce:	2115      	movs	r1, #21
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7ff fca5 	bl	800b920 <lsm6dsv16x_read_reg>
 800bfd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10f      	bne.n	800bffe <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	7a3b      	ldrb	r3, [r7, #8]
 800bfe8:	f362 0303 	bfi	r3, r2, #0, #4
 800bfec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800bfee:	f107 0208 	add.w	r2, r7, #8
 800bff2:	2301      	movs	r3, #1
 800bff4:	2115      	movs	r1, #21
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff fcaa 	bl	800b950 <lsm6dsv16x_write_reg>
 800bffc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800bffe:	68fb      	ldr	r3, [r7, #12]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800c012:	f107 0208 	add.w	r2, r7, #8
 800c016:	2301      	movs	r3, #1
 800c018:	2115      	movs	r1, #21
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fc80 	bl	800b920 <lsm6dsv16x_read_reg>
 800c020:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <lsm6dsv16x_gy_full_scale_get+0x24>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	e040      	b.n	800c0ae <lsm6dsv16x_gy_full_scale_get+0xa6>

  switch (ctrl6.fs_g)
 800c02c:	7a3b      	ldrb	r3, [r7, #8]
 800c02e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b0c      	cmp	r3, #12
 800c036:	d835      	bhi.n	800c0a4 <lsm6dsv16x_gy_full_scale_get+0x9c>
 800c038:	a201      	add	r2, pc, #4	@ (adr r2, 800c040 <lsm6dsv16x_gy_full_scale_get+0x38>)
 800c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03e:	bf00      	nop
 800c040:	0800c075 	.word	0x0800c075
 800c044:	0800c07d 	.word	0x0800c07d
 800c048:	0800c085 	.word	0x0800c085
 800c04c:	0800c08d 	.word	0x0800c08d
 800c050:	0800c095 	.word	0x0800c095
 800c054:	0800c0a5 	.word	0x0800c0a5
 800c058:	0800c0a5 	.word	0x0800c0a5
 800c05c:	0800c0a5 	.word	0x0800c0a5
 800c060:	0800c0a5 	.word	0x0800c0a5
 800c064:	0800c0a5 	.word	0x0800c0a5
 800c068:	0800c0a5 	.word	0x0800c0a5
 800c06c:	0800c0a5 	.word	0x0800c0a5
 800c070:	0800c09d 	.word	0x0800c09d
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
      break;
 800c07a:	e017      	b.n	800c0ac <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2201      	movs	r2, #1
 800c080:	701a      	strb	r2, [r3, #0]
      break;
 800c082:	e013      	b.n	800c0ac <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2202      	movs	r2, #2
 800c088:	701a      	strb	r2, [r3, #0]
      break;
 800c08a:	e00f      	b.n	800c0ac <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2203      	movs	r2, #3
 800c090:	701a      	strb	r2, [r3, #0]
      break;
 800c092:	e00b      	b.n	800c0ac <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2204      	movs	r2, #4
 800c098:	701a      	strb	r2, [r3, #0]
      break;
 800c09a:	e007      	b.n	800c0ac <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	220c      	movs	r2, #12
 800c0a0:	701a      	strb	r2, [r3, #0]
      break;
 800c0a2:	e003      	b.n	800c0ac <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	701a      	strb	r2, [r3, #0]
      break;
 800c0aa:	bf00      	nop
  }

  return ret;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop

0800c0b8 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800c0c4:	f107 0208 	add.w	r2, r7, #8
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	2117      	movs	r1, #23
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7ff fc27 	bl	800b920 <lsm6dsv16x_read_reg>
 800c0d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10f      	bne.n	800c0fa <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800c0da:	78fb      	ldrb	r3, [r7, #3]
 800c0dc:	f003 0303 	and.w	r3, r3, #3
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	7a3b      	ldrb	r3, [r7, #8]
 800c0e4:	f362 0301 	bfi	r3, r2, #0, #2
 800c0e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800c0ea:	f107 0208 	add.w	r2, r7, #8
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	2117      	movs	r1, #23
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff fc2c 	bl	800b950 <lsm6dsv16x_write_reg>
 800c0f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800c10e:	f107 0208 	add.w	r2, r7, #8
 800c112:	2301      	movs	r3, #1
 800c114:	2117      	movs	r1, #23
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fc02 	bl	800b920 <lsm6dsv16x_read_reg>
 800c11c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <lsm6dsv16x_xl_full_scale_get+0x24>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	e026      	b.n	800c176 <lsm6dsv16x_xl_full_scale_get+0x72>

  switch (ctrl8.fs_xl)
 800c128:	7a3b      	ldrb	r3, [r7, #8]
 800c12a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b03      	cmp	r3, #3
 800c132:	d81b      	bhi.n	800c16c <lsm6dsv16x_xl_full_scale_get+0x68>
 800c134:	a201      	add	r2, pc, #4	@ (adr r2, 800c13c <lsm6dsv16x_xl_full_scale_get+0x38>)
 800c136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13a:	bf00      	nop
 800c13c:	0800c14d 	.word	0x0800c14d
 800c140:	0800c155 	.word	0x0800c155
 800c144:	0800c15d 	.word	0x0800c15d
 800c148:	0800c165 	.word	0x0800c165
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
      break;
 800c152:	e00f      	b.n	800c174 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2201      	movs	r2, #1
 800c158:	701a      	strb	r2, [r3, #0]
      break;
 800c15a:	e00b      	b.n	800c174 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2202      	movs	r2, #2
 800c160:	701a      	strb	r2, [r3, #0]
      break;
 800c162:	e007      	b.n	800c174 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	2203      	movs	r2, #3
 800c168:	701a      	strb	r2, [r3, #0]
      break;
 800c16a:	e003      	b.n	800c174 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
      break;
 800c172:	bf00      	nop
  }

  return ret;
 800c174:	68fb      	ldr	r3, [r7, #12]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop

0800c180 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 800c18a:	f107 020c 	add.w	r2, r7, #12
 800c18e:	2306      	movs	r3, #6
 800c190:	2122      	movs	r1, #34	@ 0x22
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fbc4 	bl	800b920 <lsm6dsv16x_read_reg>
 800c198:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <lsm6dsv16x_angular_rate_raw_get+0x24>
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	e036      	b.n	800c212 <lsm6dsv16x_angular_rate_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 800c1a4:	7b7b      	ldrb	r3, [r7, #13]
 800c1a6:	b21a      	sxth	r2, r3
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	021b      	lsls	r3, r3, #8
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	7b3a      	ldrb	r2, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	b21a      	sxth	r2, r3
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800c1c4:	7bfa      	ldrb	r2, [r7, #15]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	3302      	adds	r3, #2
 800c1ca:	b212      	sxth	r2, r2
 800c1cc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	021b      	lsls	r3, r3, #8
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	7bba      	ldrb	r2, [r7, #14]
 800c1de:	4413      	add	r3, r2
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	3302      	adds	r3, #2
 800c1e6:	b212      	sxth	r2, r2
 800c1e8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800c1ea:	7c7a      	ldrb	r2, [r7, #17]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	b212      	sxth	r2, r2
 800c1f2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	021b      	lsls	r3, r3, #8
 800c200:	b29b      	uxth	r3, r3
 800c202:	7c3a      	ldrb	r2, [r7, #16]
 800c204:	4413      	add	r3, r2
 800c206:	b29a      	uxth	r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	3304      	adds	r3, #4
 800c20c:	b212      	sxth	r2, r2
 800c20e:	801a      	strh	r2, [r3, #0]

  return ret;
 800c210:	697b      	ldr	r3, [r7, #20]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b086      	sub	sp, #24
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 800c224:	f107 020c 	add.w	r2, r7, #12
 800c228:	2306      	movs	r3, #6
 800c22a:	2128      	movs	r1, #40	@ 0x28
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fb77 	bl	800b920 <lsm6dsv16x_read_reg>
 800c232:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <lsm6dsv16x_acceleration_raw_get+0x24>
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	e036      	b.n	800c2ac <lsm6dsv16x_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 800c23e:	7b7b      	ldrb	r3, [r7, #13]
 800c240:	b21a      	sxth	r2, r3
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	021b      	lsls	r3, r3, #8
 800c250:	b29b      	uxth	r3, r3
 800c252:	7b3a      	ldrb	r2, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	b29b      	uxth	r3, r3
 800c258:	b21a      	sxth	r2, r3
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800c25e:	7bfa      	ldrb	r2, [r7, #15]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	3302      	adds	r3, #2
 800c264:	b212      	sxth	r2, r2
 800c266:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	3302      	adds	r3, #2
 800c26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c270:	b29b      	uxth	r3, r3
 800c272:	021b      	lsls	r3, r3, #8
 800c274:	b29b      	uxth	r3, r3
 800c276:	7bba      	ldrb	r2, [r7, #14]
 800c278:	4413      	add	r3, r2
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	3302      	adds	r3, #2
 800c280:	b212      	sxth	r2, r2
 800c282:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800c284:	7c7a      	ldrb	r2, [r7, #17]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	3304      	adds	r3, #4
 800c28a:	b212      	sxth	r2, r2
 800c28c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	3304      	adds	r3, #4
 800c292:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c296:	b29b      	uxth	r3, r3
 800c298:	021b      	lsls	r3, r3, #8
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	7c3a      	ldrb	r2, [r7, #16]
 800c29e:	4413      	add	r3, r2
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	b212      	sxth	r2, r2
 800c2a8:	801a      	strh	r2, [r3, #0]

  return ret;
 800c2aa:	697b      	ldr	r3, [r7, #20]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800c2c0:	f107 0208 	add.w	r2, r7, #8
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	210a      	movs	r1, #10
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7ff fb29 	bl	800b920 <lsm6dsv16x_read_reg>
 800c2ce:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10f      	bne.n	800c2f6 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	f003 0307 	and.w	r3, r3, #7
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	7a3b      	ldrb	r3, [r7, #8]
 800c2e0:	f362 0302 	bfi	r3, r2, #0, #3
 800c2e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800c2e6:	f107 0208 	add.w	r2, r7, #8
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	210a      	movs	r1, #10
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fb2e 	bl	800b950 <lsm6dsv16x_write_reg>
 800c2f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 800c30a:	f107 0208 	add.w	r2, r7, #8
 800c30e:	2301      	movs	r3, #1
 800c310:	2116      	movs	r1, #22
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff fb04 	bl	800b920 <lsm6dsv16x_read_reg>
 800c318:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10f      	bne.n	800c340 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 800c320:	783b      	ldrb	r3, [r7, #0]
 800c322:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c326:	b2da      	uxtb	r2, r3
 800c328:	7a3b      	ldrb	r3, [r7, #8]
 800c32a:	f362 13c7 	bfi	r3, r2, #7, #1
 800c32e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 800c330:	f107 0208 	add.w	r2, r7, #8
 800c334:	2301      	movs	r3, #1
 800c336:	2116      	movs	r1, #22
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7ff fb09 	bl	800b950 <lsm6dsv16x_write_reg>
 800c33e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c340:	68fb      	ldr	r3, [r7, #12]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d103      	bne.n	800c364 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 800c35c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	e034      	b.n	800c3ce <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	689a      	ldr	r2, [r3, #8]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	7b1a      	ldrb	r2, [r3, #12]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	695a      	ldr	r2, [r3, #20]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	699a      	ldr	r2, [r3, #24]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a0e      	ldr	r2, [pc, #56]	@ (800c3d8 <SHT40AD1B_RegisterBusIO+0x8c>)
 800c3a0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a0d      	ldr	r2, [pc, #52]	@ (800c3dc <SHT40AD1B_RegisterBusIO+0x90>)
 800c3a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	69da      	ldr	r2, [r3, #28]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4798      	blx	r3
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	e002      	b.n	800c3ce <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3cc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	0800c65d 	.word	0x0800c65d
 800c3dc:	0800c69d 	.word	0x0800c69d

0800c3e0 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f04f 0200 	mov.w	r2, #0
 800c3ee:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f04f 0200 	mov.w	r2, #0
 800c3f6:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr

0800c40e <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 800c40e:	b480      	push	{r7}
 800c410:	b083      	sub	sp, #12
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3320      	adds	r3, #32
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fa23 	bl	800c888 <sht40ad1b_device_id_get>
 800c442:	4603      	mov	r3, r0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2201      	movs	r2, #1
 800c45a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	2200      	movs	r2, #0
 800c460:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2201      	movs	r2, #1
 800c466:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	2200      	movs	r2, #0
 800c46c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2200      	movs	r2, #0
 800c472:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	f04f 0200 	mov.w	r2, #0
 800c48a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	f04f 0200 	mov.w	r2, #0
 800c492:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d101      	bne.n	800c4b8 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	e004      	b.n	800c4c2 <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e004      	b.n	800c4ee <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b083      	sub	sp, #12
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f86f 	bl	800c622 <GetData>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 800c54a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c54e:	e004      	b.n	800c55a <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c570:	2b01      	cmp	r3, #1
 800c572:	d101      	bne.n	800c578 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	e004      	b.n	800c582 <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d101      	bne.n	800c5a4 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	e004      	b.n	800c5ae <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b083      	sub	sp, #12
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f80f 	bl	800c622 <GetData>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d002      	beq.n	800c610 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 800c60a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c60e:	e004      	b.n	800c61a <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3320      	adds	r3, #32
 800c62e:	f107 0208 	add.w	r2, r7, #8
 800c632:	4611      	mov	r1, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f000 f881 	bl	800c73c <sht40ad1b_data_get>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 800c640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c644:	e006      	b.n	800c654 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	607a      	str	r2, [r7, #4]
 800c666:	461a      	mov	r2, r3
 800c668:	460b      	mov	r3, r1
 800c66a:	72fb      	strb	r3, [r7, #11]
 800c66c:	4613      	mov	r3, r2
 800c66e:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d109      	bne.n	800c690 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	695b      	ldr	r3, [r3, #20]
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	7b12      	ldrb	r2, [r2, #12]
 800c684:	4610      	mov	r0, r2
 800c686:	893a      	ldrh	r2, [r7, #8]
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	4798      	blx	r3
 800c68c:	4603      	mov	r3, r0
 800c68e:	e001      	b.n	800c694 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800c690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 800c694:	4618      	mov	r0, r3
 800c696:	3718      	adds	r7, #24
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	607a      	str	r2, [r7, #4]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	72fb      	strb	r3, [r7, #11]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	7b12      	ldrb	r2, [r2, #12]
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	893a      	ldrh	r2, [r7, #8]
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	4798      	blx	r3
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	e001      	b.n	800c6d4 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800c6d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800c6dc:	b590      	push	{r4, r7, lr}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	607a      	str	r2, [r7, #4]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	72fb      	strb	r3, [r7, #11]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	685c      	ldr	r4, [r3, #4]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	68d8      	ldr	r0, [r3, #12]
 800c6f8:	893b      	ldrh	r3, [r7, #8]
 800c6fa:	7af9      	ldrb	r1, [r7, #11]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	47a0      	blx	r4
 800c700:	6178      	str	r0, [r7, #20]

  return ret;
 800c702:	697b      	ldr	r3, [r7, #20]
}
 800c704:	4618      	mov	r0, r3
 800c706:	371c      	adds	r7, #28
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd90      	pop	{r4, r7, pc}

0800c70c <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800c70c:	b590      	push	{r4, r7, lr}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	461a      	mov	r2, r3
 800c718:	460b      	mov	r3, r1
 800c71a:	72fb      	strb	r3, [r7, #11]
 800c71c:	4613      	mov	r3, r2
 800c71e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681c      	ldr	r4, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	68d8      	ldr	r0, [r3, #12]
 800c728:	893b      	ldrh	r3, [r7, #8]
 800c72a:	7af9      	ldrb	r1, [r7, #11]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	47a0      	blx	r4
 800c730:	6178      	str	r0, [r7, #20]

  return ret;
 800c732:	697b      	ldr	r3, [r7, #20]
}
 800c734:	4618      	mov	r0, r3
 800c736:	371c      	adds	r7, #28
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd90      	pop	{r4, r7, pc}

0800c73c <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800c746:	23fd      	movs	r3, #253	@ 0xfd
 800c748:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800c74a:	2300      	movs	r3, #0
 800c74c:	60bb      	str	r3, [r7, #8]
 800c74e:	2300      	movs	r3, #0
 800c750:	81bb      	strh	r3, [r7, #12]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800c752:	f107 020f 	add.w	r2, r7, #15
 800c756:	2301      	movs	r3, #1
 800c758:	2100      	movs	r1, #0
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff ffd6 	bl	800c70c <sht40ad1b_write_reg>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <sht40ad1b_data_get+0x2e>
  {
    return 1;
 800c766:	2301      	movs	r3, #1
 800c768:	e07d      	b.n	800c866 <sht40ad1b_data_get+0x12a>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	200a      	movs	r0, #10
 800c770:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800c772:	f107 0208 	add.w	r2, r7, #8
 800c776:	2306      	movs	r3, #6
 800c778:	2100      	movs	r1, #0
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7ff ffae 	bl	800c6dc <sht40ad1b_read_reg>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <sht40ad1b_data_get+0x4e>
  {
    return 1;
 800c786:	2301      	movs	r3, #1
 800c788:	e06d      	b.n	800c866 <sht40ad1b_data_get+0x12a>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800c78a:	7a3b      	ldrb	r3, [r7, #8]
 800c78c:	021b      	lsls	r3, r3, #8
 800c78e:	b29b      	uxth	r3, r3
 800c790:	7a7a      	ldrb	r2, [r7, #9]
 800c792:	4413      	add	r3, r2
 800c794:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800c796:	7abb      	ldrb	r3, [r7, #10]
 800c798:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800c79a:	7afb      	ldrb	r3, [r7, #11]
 800c79c:	021b      	lsls	r3, r3, #8
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	7b3a      	ldrb	r2, [r7, #12]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800c7a6:	7b7b      	ldrb	r3, [r7, #13]
 800c7a8:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800c7aa:	7f7a      	ldrb	r2, [r7, #29]
 800c7ac:	f107 0308 	add.w	r3, r7, #8
 800c7b0:	2102      	movs	r1, #2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 f8b3 	bl	800c91e <crc_check>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <sht40ad1b_data_get+0x86>
  {
    return 1;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e051      	b.n	800c866 <sht40ad1b_data_get+0x12a>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800c7c2:	7e7a      	ldrb	r2, [r7, #25]
 800c7c4:	f107 0308 	add.w	r3, r7, #8
 800c7c8:	3303      	adds	r3, #3
 800c7ca:	2102      	movs	r1, #2
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 f8a6 	bl	800c91e <crc_check>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <sht40ad1b_data_get+0xa0>
  {
    return 1;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e044      	b.n	800c866 <sht40ad1b_data_get+0x12a>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800c7dc:	8bfb      	ldrh	r3, [r7, #30]
 800c7de:	ee07 3a90 	vmov	s15, r3
 800c7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800c870 <sht40ad1b_data_get+0x134>
 800c7ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c7ee:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800c874 <sht40ad1b_data_get+0x138>
 800c7f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7f6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800c878 <sht40ad1b_data_get+0x13c>
 800c7fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7fe:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800c802:	8b7b      	ldrh	r3, [r7, #26]
 800c804:	ee07 3a90 	vmov	s15, r3
 800c808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800c87c <sht40ad1b_data_get+0x140>
 800c810:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c814:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800c874 <sht40ad1b_data_get+0x138>
 800c818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c81c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800c820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c824:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800c828:	edd7 7a04 	vldr	s15, [r7, #16]
 800c82c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800c880 <sht40ad1b_data_get+0x144>
 800c830:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c838:	dd01      	ble.n	800c83e <sht40ad1b_data_get+0x102>
 800c83a:	4b12      	ldr	r3, [pc, #72]	@ (800c884 <sht40ad1b_data_get+0x148>)
 800c83c:	e00a      	b.n	800c854 <sht40ad1b_data_get+0x118>
              :                        hum_value;
 800c83e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84a:	d502      	bpl.n	800c852 <sht40ad1b_data_get+0x116>
 800c84c:	f04f 0300 	mov.w	r3, #0
 800c850:	e000      	b.n	800c854 <sht40ad1b_data_get+0x118>
 800c852:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800c854:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	3304      	adds	r3, #4
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	601a      	str	r2, [r3, #0]
  return 0;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3720      	adds	r7, #32
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	432f0000 	.word	0x432f0000
 800c874:	477fff00 	.word	0x477fff00
 800c878:	42340000 	.word	0x42340000
 800c87c:	42fa0000 	.word	0x42fa0000
 800c880:	42c80000 	.word	0x42c80000
 800c884:	42c80000 	.word	0x42c80000

0800c888 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	2200      	movs	r2, #0
 800c896:	701a      	strb	r2, [r3, #0]
  return 0;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b085      	sub	sp, #20
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800c8b2:	2331      	movs	r3, #49	@ 0x31
 800c8b4:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800c8b6:	23ff      	movs	r3, #255	@ 0xff
 800c8b8:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	81bb      	strh	r3, [r7, #12]
 800c8be:	e023      	b.n	800c908 <crc_calculate+0x62>
  {
    crc ^= data[index];
 800c8c0:	89bb      	ldrh	r3, [r7, #12]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	781a      	ldrb	r2, [r3, #0]
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	4053      	eors	r3, r2
 800c8cc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800c8ce:	2308      	movs	r3, #8
 800c8d0:	72fb      	strb	r3, [r7, #11]
 800c8d2:	e013      	b.n	800c8fc <crc_calculate+0x56>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800c8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da08      	bge.n	800c8ee <crc_calculate+0x48>
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	b25a      	sxtb	r2, r3
 800c8e2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800c8e6:	4053      	eors	r3, r2
 800c8e8:	b25b      	sxtb	r3, r3
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	e002      	b.n	800c8f4 <crc_calculate+0x4e>
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800c8f6:	7afb      	ldrb	r3, [r7, #11]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	72fb      	strb	r3, [r7, #11]
 800c8fc:	7afb      	ldrb	r3, [r7, #11]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1e8      	bne.n	800c8d4 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800c902:	89bb      	ldrh	r3, [r7, #12]
 800c904:	3301      	adds	r3, #1
 800c906:	81bb      	strh	r3, [r7, #12]
 800c908:	89ba      	ldrh	r2, [r7, #12]
 800c90a:	887b      	ldrh	r3, [r7, #2]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d3d7      	bcc.n	800c8c0 <crc_calculate+0x1a>
    }
  }

  return crc;
 800c910:	7bfb      	ldrb	r3, [r7, #15]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b082      	sub	sp, #8
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	807b      	strh	r3, [r7, #2]
 800c92a:	4613      	mov	r3, r2
 800c92c:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800c92e:	887b      	ldrh	r3, [r7, #2]
 800c930:	4619      	mov	r1, r3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7ff ffb7 	bl	800c8a6 <crc_calculate>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	787b      	ldrb	r3, [r7, #1]
 800c93e:	4293      	cmp	r3, r2
 800c940:	bf14      	ite	ne
 800c942:	2301      	movne	r3, #1
 800c944:	2300      	moveq	r3, #0
 800c946:	b2db      	uxtb	r3, r3
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800c960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	e034      	b.n	800c9d2 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	7b1a      	ldrb	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	691a      	ldr	r2, [r3, #16]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	695a      	ldr	r2, [r3, #20]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	699a      	ldr	r2, [r3, #24]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a0e      	ldr	r2, [pc, #56]	@ (800c9dc <STTS22H_RegisterBusIO+0x8c>)
 800c9a4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a0d      	ldr	r2, [pc, #52]	@ (800c9e0 <STTS22H_RegisterBusIO+0x90>)
 800c9aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	69da      	ldr	r2, [r3, #28]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d004      	beq.n	800c9cc <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4798      	blx	r3
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	e002      	b.n	800c9d2 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800c9cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	0800cded 	.word	0x0800cded
 800c9e0:	0800ce5b 	.word	0x0800ce5b

0800c9e4 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d127      	bne.n	800ca46 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c9fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3320      	adds	r3, #32
 800ca02:	2101      	movs	r1, #1
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 fc25 	bl	800d254 <stts22h_block_data_update_set>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800ca10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca14:	e01c      	b.n	800ca50 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3320      	adds	r3, #32
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fc72 	bl	800d306 <stts22h_auto_increment_set>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800ca28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca2c:	e010      	b.n	800ca50 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3320      	adds	r3, #32
 800ca32:	2100      	movs	r1, #0
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 fa91 	bl	800cf5c <stts22h_temp_data_rate_set>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800ca40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca44:	e004      	b.n	800ca50 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d108      	bne.n	800ca7c <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f878 	bl	800cb60 <STTS22H_TEMP_Disable>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800ca76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca7a:	e004      	b.n	800ca86 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b084      	sub	sp, #16
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3320      	adds	r3, #32
 800ca9c:	f107 020f 	add.w	r2, r7, #15
 800caa0:	4611      	mov	r1, r2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fc1e 	bl	800d2e4 <stts22h_dev_id_get>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800caae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cab2:	e003      	b.n	800cabc <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800cab4:	7bfa      	ldrb	r2, [r7, #15]
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2200      	movs	r2, #0
 800cad2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2200      	movs	r2, #0
 800cad8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2201      	movs	r2, #1
 800cade:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2200      	movs	r2, #0
 800caea:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	f04f 0200 	mov.w	r2, #0
 800caf2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	4a08      	ldr	r2, [pc, #32]	@ (800cb18 <STTS22H_GetCapabilities+0x54>)
 800caf8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	f04f 0200 	mov.w	r2, #0
 800cb00:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	f04f 0200 	mov.w	r2, #0
 800cb08:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	43480000 	.word	0x43480000

0800cb1c <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d101      	bne.n	800cb32 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e012      	b.n	800cb58 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800cb38:	eeb0 0a67 	vmov.f32	s0, s15
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f8e9 	bl	800cd14 <STTS22H_TEMP_SetOutputDataRate>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800cb48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb4c:	e004      	b.n	800cb58 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e01c      	b.n	800cbb0 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	3334      	adds	r3, #52	@ 0x34
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f81b 	bl	800cbb8 <STTS22H_TEMP_GetOutputDataRate>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800cb88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb8c:	e010      	b.n	800cbb0 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3320      	adds	r3, #32
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 f9e1 	bl	800cf5c <stts22h_temp_data_rate_set>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800cba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cba4:	e004      	b.n	800cbb0 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3320      	adds	r3, #32
 800cbca:	f107 020b 	add.w	r2, r7, #11
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fa89 	bl	800d0e8 <stts22h_temp_data_rate_get>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbe0:	e08b      	b.n	800ccfa <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800cbe2:	7afb      	ldrb	r3, [r7, #11]
 800cbe4:	2b32      	cmp	r3, #50	@ 0x32
 800cbe6:	f200 8083 	bhi.w	800ccf0 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800cbea:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf0 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800cbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf0:	0800ccbd 	.word	0x0800ccbd
 800cbf4:	0800ccbd 	.word	0x0800ccbd
 800cbf8:	0800ccd1 	.word	0x0800ccd1
 800cbfc:	0800ccf1 	.word	0x0800ccf1
 800cc00:	0800ccc7 	.word	0x0800ccc7
 800cc04:	0800ccf1 	.word	0x0800ccf1
 800cc08:	0800ccf1 	.word	0x0800ccf1
 800cc0c:	0800ccf1 	.word	0x0800ccf1
 800cc10:	0800ccf1 	.word	0x0800ccf1
 800cc14:	0800ccf1 	.word	0x0800ccf1
 800cc18:	0800ccf1 	.word	0x0800ccf1
 800cc1c:	0800ccf1 	.word	0x0800ccf1
 800cc20:	0800ccf1 	.word	0x0800ccf1
 800cc24:	0800ccf1 	.word	0x0800ccf1
 800cc28:	0800ccf1 	.word	0x0800ccf1
 800cc2c:	0800ccf1 	.word	0x0800ccf1
 800cc30:	0800ccf1 	.word	0x0800ccf1
 800cc34:	0800ccf1 	.word	0x0800ccf1
 800cc38:	0800ccd9 	.word	0x0800ccd9
 800cc3c:	0800ccf1 	.word	0x0800ccf1
 800cc40:	0800ccf1 	.word	0x0800ccf1
 800cc44:	0800ccf1 	.word	0x0800ccf1
 800cc48:	0800ccf1 	.word	0x0800ccf1
 800cc4c:	0800ccf1 	.word	0x0800ccf1
 800cc50:	0800ccf1 	.word	0x0800ccf1
 800cc54:	0800ccf1 	.word	0x0800ccf1
 800cc58:	0800ccf1 	.word	0x0800ccf1
 800cc5c:	0800ccf1 	.word	0x0800ccf1
 800cc60:	0800ccf1 	.word	0x0800ccf1
 800cc64:	0800ccf1 	.word	0x0800ccf1
 800cc68:	0800ccf1 	.word	0x0800ccf1
 800cc6c:	0800ccf1 	.word	0x0800ccf1
 800cc70:	0800ccf1 	.word	0x0800ccf1
 800cc74:	0800ccf1 	.word	0x0800ccf1
 800cc78:	0800cce1 	.word	0x0800cce1
 800cc7c:	0800ccf1 	.word	0x0800ccf1
 800cc80:	0800ccf1 	.word	0x0800ccf1
 800cc84:	0800ccf1 	.word	0x0800ccf1
 800cc88:	0800ccf1 	.word	0x0800ccf1
 800cc8c:	0800ccf1 	.word	0x0800ccf1
 800cc90:	0800ccf1 	.word	0x0800ccf1
 800cc94:	0800ccf1 	.word	0x0800ccf1
 800cc98:	0800ccf1 	.word	0x0800ccf1
 800cc9c:	0800ccf1 	.word	0x0800ccf1
 800cca0:	0800ccf1 	.word	0x0800ccf1
 800cca4:	0800ccf1 	.word	0x0800ccf1
 800cca8:	0800ccf1 	.word	0x0800ccf1
 800ccac:	0800ccf1 	.word	0x0800ccf1
 800ccb0:	0800ccf1 	.word	0x0800ccf1
 800ccb4:	0800ccf1 	.word	0x0800ccf1
 800ccb8:	0800cce9 	.word	0x0800cce9
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	f04f 0200 	mov.w	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
      break;
 800ccc4:	e018      	b.n	800ccf8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cccc:	601a      	str	r2, [r3, #0]
      break;
 800ccce:	e013      	b.n	800ccf8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd04 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800ccd4:	601a      	str	r2, [r3, #0]
      break;
 800ccd6:	e00f      	b.n	800ccf8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	4a0b      	ldr	r2, [pc, #44]	@ (800cd08 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800ccdc:	601a      	str	r2, [r3, #0]
      break;
 800ccde:	e00b      	b.n	800ccf8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	4a0a      	ldr	r2, [pc, #40]	@ (800cd0c <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800cce4:	601a      	str	r2, [r3, #0]
      break;
 800cce6:	e007      	b.n	800ccf8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	4a09      	ldr	r2, [pc, #36]	@ (800cd10 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800ccec:	601a      	str	r2, [r3, #0]
      break;
 800ccee:	e003      	b.n	800ccf8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800ccf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccf4:	60fb      	str	r3, [r7, #12]
      break;
 800ccf6:	bf00      	nop
  }

  return ret;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	41c80000 	.word	0x41c80000
 800cd08:	42480000 	.word	0x42480000
 800cd0c:	42c80000 	.word	0x42c80000
 800cd10:	43480000 	.word	0x43480000

0800cd14 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800cd20:	edd7 7a00 	vldr	s15, [r7]
 800cd24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd30:	d801      	bhi.n	800cd36 <STTS22H_TEMP_SetOutputDataRate+0x22>
 800cd32:	2304      	movs	r3, #4
 800cd34:	e021      	b.n	800cd7a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800cd36:	edd7 7a00 	vldr	s15, [r7]
 800cd3a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800cd3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd46:	d801      	bhi.n	800cd4c <STTS22H_TEMP_SetOutputDataRate+0x38>
 800cd48:	2302      	movs	r3, #2
 800cd4a:	e016      	b.n	800cd7a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800cd4c:	edd7 7a00 	vldr	s15, [r7]
 800cd50:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800cda0 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800cd54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5c:	d801      	bhi.n	800cd62 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800cd5e:	2312      	movs	r3, #18
 800cd60:	e00b      	b.n	800cd7a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800cd62:	edd7 7a00 	vldr	s15, [r7]
 800cd66:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800cda4 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800cd6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd72:	d801      	bhi.n	800cd78 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800cd74:	2322      	movs	r3, #34	@ 0x22
 800cd76:	e000      	b.n	800cd7a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800cd78:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800cd7a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3320      	adds	r3, #32
 800cd80:	7bfa      	ldrb	r2, [r7, #15]
 800cd82:	4611      	mov	r1, r2
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 f8e9 	bl	800cf5c <stts22h_temp_data_rate_set>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800cd90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd94:	e000      	b.n	800cd98 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	42480000 	.word	0x42480000
 800cda4:	42c80000 	.word	0x42c80000

0800cda8 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3320      	adds	r3, #32
 800cdb6:	f107 020e 	add.w	r2, r7, #14
 800cdba:	4611      	mov	r1, r2
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 fa6f 	bl	800d2a0 <stts22h_temperature_raw_get>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800cdc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdcc:	e00a      	b.n	800cde4 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800cdce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 f8a8 	bl	800cf28 <stts22h_from_lsb_to_celsius>
 800cdd8:	eef0 7a40 	vmov.f32	s15, s0
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800cdec:	b590      	push	{r4, r7, lr}
 800cdee:	b089      	sub	sp, #36	@ 0x24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	607a      	str	r2, [r7, #4]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	72fb      	strb	r3, [r7, #11]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d11f      	bne.n	800ce50 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800ce10:	2300      	movs	r3, #0
 800ce12:	83fb      	strh	r3, [r7, #30]
 800ce14:	e018      	b.n	800ce48 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	695c      	ldr	r4, [r3, #20]
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	7b1b      	ldrb	r3, [r3, #12]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	7afb      	ldrb	r3, [r7, #11]
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	8bfb      	ldrh	r3, [r7, #30]
 800ce26:	4413      	add	r3, r2
 800ce28:	b299      	uxth	r1, r3
 800ce2a:	8bfb      	ldrh	r3, [r7, #30]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	441a      	add	r2, r3
 800ce30:	2301      	movs	r3, #1
 800ce32:	47a0      	blx	r4
 800ce34:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800ce3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce40:	e007      	b.n	800ce52 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800ce42:	8bfb      	ldrh	r3, [r7, #30]
 800ce44:	3301      	adds	r3, #1
 800ce46:	83fb      	strh	r3, [r7, #30]
 800ce48:	8bfa      	ldrh	r2, [r7, #30]
 800ce4a:	893b      	ldrh	r3, [r7, #8]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d3e2      	bcc.n	800ce16 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800ce50:	69bb      	ldr	r3, [r7, #24]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3724      	adds	r7, #36	@ 0x24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd90      	pop	{r4, r7, pc}

0800ce5a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800ce5a:	b590      	push	{r4, r7, lr}
 800ce5c:	b089      	sub	sp, #36	@ 0x24
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	461a      	mov	r2, r3
 800ce66:	460b      	mov	r3, r1
 800ce68:	72fb      	strb	r3, [r7, #11]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d11f      	bne.n	800cebe <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800ce7e:	2300      	movs	r3, #0
 800ce80:	83fb      	strh	r3, [r7, #30]
 800ce82:	e018      	b.n	800ceb6 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	691c      	ldr	r4, [r3, #16]
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	7b1b      	ldrb	r3, [r3, #12]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	7afb      	ldrb	r3, [r7, #11]
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	8bfb      	ldrh	r3, [r7, #30]
 800ce94:	4413      	add	r3, r2
 800ce96:	b299      	uxth	r1, r3
 800ce98:	8bfb      	ldrh	r3, [r7, #30]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	441a      	add	r2, r3
 800ce9e:	2301      	movs	r3, #1
 800cea0:	47a0      	blx	r4
 800cea2:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d002      	beq.n	800ceb0 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800ceaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ceae:	e007      	b.n	800cec0 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800ceb0:	8bfb      	ldrh	r3, [r7, #30]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	83fb      	strh	r3, [r7, #30]
 800ceb6:	8bfa      	ldrh	r2, [r7, #30]
 800ceb8:	893b      	ldrh	r3, [r7, #8]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d3e2      	bcc.n	800ce84 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800cebe:	69bb      	ldr	r3, [r7, #24]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3724      	adds	r7, #36	@ 0x24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd90      	pop	{r4, r7, pc}

0800cec8 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800cec8:	b590      	push	{r4, r7, lr}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	607a      	str	r2, [r7, #4]
 800ced2:	461a      	mov	r2, r3
 800ced4:	460b      	mov	r3, r1
 800ced6:	72fb      	strb	r3, [r7, #11]
 800ced8:	4613      	mov	r3, r2
 800ceda:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	685c      	ldr	r4, [r3, #4]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	68d8      	ldr	r0, [r3, #12]
 800cee4:	893b      	ldrh	r3, [r7, #8]
 800cee6:	7af9      	ldrb	r1, [r7, #11]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	47a0      	blx	r4
 800ceec:	6178      	str	r0, [r7, #20]

  return ret;
 800ceee:	697b      	ldr	r3, [r7, #20]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	371c      	adds	r7, #28
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd90      	pop	{r4, r7, pc}

0800cef8 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	607a      	str	r2, [r7, #4]
 800cf02:	461a      	mov	r2, r3
 800cf04:	460b      	mov	r3, r1
 800cf06:	72fb      	strb	r3, [r7, #11]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681c      	ldr	r4, [r3, #0]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68d8      	ldr	r0, [r3, #12]
 800cf14:	893b      	ldrh	r3, [r7, #8]
 800cf16:	7af9      	ldrb	r1, [r7, #11]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	47a0      	blx	r4
 800cf1c:	6178      	str	r0, [r7, #20]

  return ret;
 800cf1e:	697b      	ldr	r3, [r7, #20]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	371c      	adds	r7, #28
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd90      	pop	{r4, r7, pc}

0800cf28 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800cf32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf36:	ee07 3a90 	vmov	s15, r3
 800cf3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf3e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800cf58 <stts22h_from_lsb_to_celsius+0x30>
 800cf42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cf46:	eef0 7a66 	vmov.f32	s15, s13
}
 800cf4a:	eeb0 0a67 	vmov.f32	s0, s15
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	42c80000 	.word	0x42c80000

0800cf5c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800cf68:	f107 020c 	add.w	r2, r7, #12
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	2104      	movs	r1, #4
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7ff ffa9 	bl	800cec8 <stts22h_read_reg>
 800cf76:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d107      	bne.n	800cf8e <stts22h_temp_data_rate_set+0x32>
  {
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
 800cf7e:	f107 0210 	add.w	r2, r7, #16
 800cf82:	2301      	movs	r3, #1
 800cf84:	210c      	movs	r1, #12
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7ff ff9e 	bl	800cec8 <stts22h_read_reg>
 800cf8c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 800cf8e:	78fb      	ldrb	r3, [r7, #3]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d11d      	bne.n	800cfd0 <stts22h_temp_data_rate_set+0x74>
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d11a      	bne.n	800cfd0 <stts22h_temp_data_rate_set+0x74>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800cf9a:	7c3b      	ldrb	r3, [r7, #16]
 800cf9c:	f043 0302 	orr.w	r3, r3, #2
 800cfa0:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800cfa2:	f107 0210 	add.w	r2, r7, #16
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	210c      	movs	r1, #12
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff ffa4 	bl	800cef8 <stts22h_write_reg>
 800cfb0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10b      	bne.n	800cfd0 <stts22h_temp_data_rate_set+0x74>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800cfb8:	7c3b      	ldrb	r3, [r7, #16]
 800cfba:	f36f 0341 	bfc	r3, #1, #1
 800cfbe:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800cfc0:	f107 0210 	add.w	r2, r7, #16
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	210c      	movs	r1, #12
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7ff ff95 	bl	800cef8 <stts22h_write_reg>
 800cfce:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d008      	beq.n	800cfe8 <stts22h_temp_data_rate_set+0x8c>
 800cfd6:	78fb      	ldrb	r3, [r7, #3]
 800cfd8:	2b12      	cmp	r3, #18
 800cfda:	d005      	beq.n	800cfe8 <stts22h_temp_data_rate_set+0x8c>
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	2b22      	cmp	r3, #34	@ 0x22
 800cfe0:	d002      	beq.n	800cfe8 <stts22h_temp_data_rate_set+0x8c>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800cfe2:	78fb      	ldrb	r3, [r7, #3]
 800cfe4:	2b32      	cmp	r3, #50	@ 0x32
 800cfe6:	d123      	bne.n	800d030 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 800cfe8:	7b3b      	ldrb	r3, [r7, #12]
 800cfea:	f003 0304 	and.w	r3, r3, #4
 800cfee:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d11d      	bne.n	800d030 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d11a      	bne.n	800d030 <stts22h_temp_data_rate_set+0xd4>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800cffa:	7c3b      	ldrb	r3, [r7, #16]
 800cffc:	f043 0302 	orr.w	r3, r3, #2
 800d000:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d002:	f107 0210 	add.w	r2, r7, #16
 800d006:	2301      	movs	r3, #1
 800d008:	210c      	movs	r1, #12
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff ff74 	bl	800cef8 <stts22h_write_reg>
 800d010:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10b      	bne.n	800d030 <stts22h_temp_data_rate_set+0xd4>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800d018:	7c3b      	ldrb	r3, [r7, #16]
 800d01a:	f36f 0341 	bfc	r3, #1, #1
 800d01e:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d020:	f107 0210 	add.w	r2, r7, #16
 800d024:	2301      	movs	r3, #1
 800d026:	210c      	movs	r1, #12
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7ff ff65 	bl	800cef8 <stts22h_write_reg>
 800d02e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 800d030:	78fb      	ldrb	r3, [r7, #3]
 800d032:	2b04      	cmp	r3, #4
 800d034:	d125      	bne.n	800d082 <stts22h_temp_data_rate_set+0x126>
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d122      	bne.n	800d082 <stts22h_temp_data_rate_set+0x126>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800d03c:	7c3b      	ldrb	r3, [r7, #16]
 800d03e:	f043 0302 	orr.w	r3, r3, #2
 800d042:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 800d044:	7c3b      	ldrb	r3, [r7, #16]
 800d046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d04a:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d04c:	f107 0210 	add.w	r2, r7, #16
 800d050:	2301      	movs	r3, #1
 800d052:	210c      	movs	r1, #12
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f7ff ff4f 	bl	800cef8 <stts22h_write_reg>
 800d05a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10f      	bne.n	800d082 <stts22h_temp_data_rate_set+0x126>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800d062:	7c3b      	ldrb	r3, [r7, #16]
 800d064:	f36f 0341 	bfc	r3, #1, #1
 800d068:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 800d06a:	7c3b      	ldrb	r3, [r7, #16]
 800d06c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d070:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d072:	f107 0210 	add.w	r2, r7, #16
 800d076:	2301      	movs	r3, #1
 800d078:	210c      	movs	r1, #12
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff ff3c 	bl	800cef8 <stts22h_write_reg>
 800d080:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d12a      	bne.n	800d0de <stts22h_temp_data_rate_set+0x182>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	7b3b      	ldrb	r3, [r7, #12]
 800d092:	f362 0300 	bfi	r3, r2, #0, #1
 800d096:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800d098:	78fb      	ldrb	r3, [r7, #3]
 800d09a:	085b      	lsrs	r3, r3, #1
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	7b3b      	ldrb	r3, [r7, #12]
 800d0a4:	f362 0382 	bfi	r3, r2, #2, #1
 800d0a8:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800d0aa:	78fb      	ldrb	r3, [r7, #3]
 800d0ac:	089b      	lsrs	r3, r3, #2
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	7b3b      	ldrb	r3, [r7, #12]
 800d0b6:	f362 13c7 	bfi	r3, r2, #7, #1
 800d0ba:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	091b      	lsrs	r3, r3, #4
 800d0c0:	f003 0303 	and.w	r3, r3, #3
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	7b3b      	ldrb	r3, [r7, #12]
 800d0c8:	f362 1305 	bfi	r3, r2, #4, #2
 800d0cc:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d0ce:	f107 020c 	add.w	r2, r7, #12
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	2104      	movs	r1, #4
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff ff0e 	bl	800cef8 <stts22h_write_reg>
 800d0dc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800d0de:	697b      	ldr	r3, [r7, #20]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800d0f2:	f107 0208 	add.w	r2, r7, #8
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	2104      	movs	r1, #4
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fee4 	bl	800cec8 <stts22h_read_reg>
 800d100:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800d102:	7a3b      	ldrb	r3, [r7, #8]
 800d104:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	461a      	mov	r2, r3
 800d10c:	7a3b      	ldrb	r3, [r7, #8]
 800d10e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d112:	b2db      	uxtb	r3, r3
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	431a      	orrs	r2, r3
 800d118:	7a3b      	ldrb	r3, [r7, #8]
 800d11a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800d124:	7a3b      	ldrb	r3, [r7, #8]
 800d126:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	011b      	lsls	r3, r3, #4
                                                 2) |
 800d12e:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800d130:	2b32      	cmp	r3, #50	@ 0x32
 800d132:	f200 8085 	bhi.w	800d240 <stts22h_temp_data_rate_get+0x158>
 800d136:	a201      	add	r2, pc, #4	@ (adr r2, 800d13c <stts22h_temp_data_rate_get+0x54>)
 800d138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13c:	0800d209 	.word	0x0800d209
 800d140:	0800d211 	.word	0x0800d211
 800d144:	0800d221 	.word	0x0800d221
 800d148:	0800d241 	.word	0x0800d241
 800d14c:	0800d219 	.word	0x0800d219
 800d150:	0800d241 	.word	0x0800d241
 800d154:	0800d241 	.word	0x0800d241
 800d158:	0800d241 	.word	0x0800d241
 800d15c:	0800d241 	.word	0x0800d241
 800d160:	0800d241 	.word	0x0800d241
 800d164:	0800d241 	.word	0x0800d241
 800d168:	0800d241 	.word	0x0800d241
 800d16c:	0800d241 	.word	0x0800d241
 800d170:	0800d241 	.word	0x0800d241
 800d174:	0800d241 	.word	0x0800d241
 800d178:	0800d241 	.word	0x0800d241
 800d17c:	0800d241 	.word	0x0800d241
 800d180:	0800d241 	.word	0x0800d241
 800d184:	0800d229 	.word	0x0800d229
 800d188:	0800d241 	.word	0x0800d241
 800d18c:	0800d241 	.word	0x0800d241
 800d190:	0800d241 	.word	0x0800d241
 800d194:	0800d241 	.word	0x0800d241
 800d198:	0800d241 	.word	0x0800d241
 800d19c:	0800d241 	.word	0x0800d241
 800d1a0:	0800d241 	.word	0x0800d241
 800d1a4:	0800d241 	.word	0x0800d241
 800d1a8:	0800d241 	.word	0x0800d241
 800d1ac:	0800d241 	.word	0x0800d241
 800d1b0:	0800d241 	.word	0x0800d241
 800d1b4:	0800d241 	.word	0x0800d241
 800d1b8:	0800d241 	.word	0x0800d241
 800d1bc:	0800d241 	.word	0x0800d241
 800d1c0:	0800d241 	.word	0x0800d241
 800d1c4:	0800d231 	.word	0x0800d231
 800d1c8:	0800d241 	.word	0x0800d241
 800d1cc:	0800d241 	.word	0x0800d241
 800d1d0:	0800d241 	.word	0x0800d241
 800d1d4:	0800d241 	.word	0x0800d241
 800d1d8:	0800d241 	.word	0x0800d241
 800d1dc:	0800d241 	.word	0x0800d241
 800d1e0:	0800d241 	.word	0x0800d241
 800d1e4:	0800d241 	.word	0x0800d241
 800d1e8:	0800d241 	.word	0x0800d241
 800d1ec:	0800d241 	.word	0x0800d241
 800d1f0:	0800d241 	.word	0x0800d241
 800d1f4:	0800d241 	.word	0x0800d241
 800d1f8:	0800d241 	.word	0x0800d241
 800d1fc:	0800d241 	.word	0x0800d241
 800d200:	0800d241 	.word	0x0800d241
 800d204:	0800d239 	.word	0x0800d239
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2200      	movs	r2, #0
 800d20c:	701a      	strb	r2, [r3, #0]
      break;
 800d20e:	e01b      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2201      	movs	r2, #1
 800d214:	701a      	strb	r2, [r3, #0]
      break;
 800d216:	e017      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2204      	movs	r2, #4
 800d21c:	701a      	strb	r2, [r3, #0]
      break;
 800d21e:	e013      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2202      	movs	r2, #2
 800d224:	701a      	strb	r2, [r3, #0]
      break;
 800d226:	e00f      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	2212      	movs	r2, #18
 800d22c:	701a      	strb	r2, [r3, #0]
      break;
 800d22e:	e00b      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	2222      	movs	r2, #34	@ 0x22
 800d234:	701a      	strb	r2, [r3, #0]
      break;
 800d236:	e007      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	2232      	movs	r2, #50	@ 0x32
 800d23c:	701a      	strb	r2, [r3, #0]
      break;
 800d23e:	e003      	b.n	800d248 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2200      	movs	r2, #0
 800d244:	701a      	strb	r2, [r3, #0]
      break;
 800d246:	bf00      	nop
  }

  return ret;
 800d248:	68fb      	ldr	r3, [r7, #12]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop

0800d254 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d260:	f107 0208 	add.w	r2, r7, #8
 800d264:	2301      	movs	r3, #1
 800d266:	2104      	movs	r1, #4
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff fe2d 	bl	800cec8 <stts22h_read_reg>
 800d26e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10f      	bne.n	800d296 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800d276:	78fb      	ldrb	r3, [r7, #3]
 800d278:	f003 0301 	and.w	r3, r3, #1
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	7a3b      	ldrb	r3, [r7, #8]
 800d280:	f362 1386 	bfi	r3, r2, #6, #1
 800d284:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d286:	f107 0208 	add.w	r2, r7, #8
 800d28a:	2301      	movs	r3, #1
 800d28c:	2104      	movs	r1, #4
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff fe32 	bl	800cef8 <stts22h_write_reg>
 800d294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800d296:	68fb      	ldr	r3, [r7, #12]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800d2aa:	f107 0208 	add.w	r2, r7, #8
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	2106      	movs	r1, #6
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff fe08 	bl	800cec8 <stts22h_read_reg>
 800d2b8:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800d2ba:	7a7b      	ldrb	r3, [r7, #9]
 800d2bc:	b21a      	sxth	r2, r3
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	021b      	lsls	r3, r3, #8
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	7a3a      	ldrb	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	b21a      	sxth	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	801a      	strh	r2, [r3, #0]

  return ret;
 800d2da:	68fb      	ldr	r3, [r7, #12]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	2101      	movs	r1, #1
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff fde7 	bl	800cec8 <stts22h_read_reg>
 800d2fa:	60f8      	str	r0, [r7, #12]

  return ret;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d312:	f107 0208 	add.w	r2, r7, #8
 800d316:	2301      	movs	r3, #1
 800d318:	2104      	movs	r1, #4
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7ff fdd4 	bl	800cec8 <stts22h_read_reg>
 800d320:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10f      	bne.n	800d348 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800d328:	78fb      	ldrb	r3, [r7, #3]
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	7a3b      	ldrb	r3, [r7, #8]
 800d332:	f362 03c3 	bfi	r3, r2, #3, #1
 800d336:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d338:	f107 0208 	add.w	r2, r7, #8
 800d33c:	2301      	movs	r3, #1
 800d33e:	2104      	movs	r1, #4
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff fdd9 	bl	800cef8 <stts22h_write_reg>
 800d346:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800d348:	68fb      	ldr	r3, [r7, #12]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
	...

0800d354 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08c      	sub	sp, #48	@ 0x30
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800d35e:	2300      	movs	r3, #0
 800d360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800d362:	2301      	movs	r3, #1
 800d364:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d07c      	beq.n	800d46a <IKS4A1_ENV_SENSOR_Init+0x116>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2b02      	cmp	r3, #2
 800d374:	f200 80b2 	bhi.w	800d4dc <IKS4A1_ENV_SENSOR_Init+0x188>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <IKS4A1_ENV_SENSOR_Init+0x32>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d039      	beq.n	800d3f8 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800d384:	e0aa      	b.n	800d4dc <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f000 f9b4 	bl	800d6f4 <STTS22H_0_Probe>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800d392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d396:	e0df      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800d398:	4a71      	ldr	r2, [pc, #452]	@ (800d560 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	4970      	ldr	r1, [pc, #448]	@ (800d564 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d3aa:	f107 0108 	add.w	r1, r7, #8
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	4798      	blx	r3
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800d3b8:	f06f 0306 	mvn.w	r3, #6
 800d3bc:	e0cc      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800d3be:	7a3b      	ldrb	r3, [r7, #8]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d103      	bne.n	800d3cc <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	f043 0301 	orr.w	r3, r3, #1
 800d3ca:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800d3cc:	7abb      	ldrb	r3, [r7, #10]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d103      	bne.n	800d3da <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	f043 0304 	orr.w	r3, r3, #4
 800d3d8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800d3da:	7a7b      	ldrb	r3, [r7, #9]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d103      	bne.n	800d3e8 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	f043 0302 	orr.w	r3, r3, #2
 800d3e6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800d3e8:	7afb      	ldrb	r3, [r7, #11]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d17a      	bne.n	800d4e4 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800d3ee:	6a3b      	ldr	r3, [r7, #32]
 800d3f0:	f043 0308 	orr.w	r3, r3, #8
 800d3f4:	623b      	str	r3, [r7, #32]
      }
      break;
 800d3f6:	e075      	b.n	800d4e4 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800d3f8:	6838      	ldr	r0, [r7, #0]
 800d3fa:	f000 fa31 	bl	800d860 <LPS22DF_0_Probe>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800d404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d408:	e0a6      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800d40a:	4a55      	ldr	r2, [pc, #340]	@ (800d560 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	4953      	ldr	r1, [pc, #332]	@ (800d564 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d41c:	f107 0108 	add.w	r1, r7, #8
 800d420:	4610      	mov	r0, r2
 800d422:	4798      	blx	r3
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d002      	beq.n	800d430 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800d42a:	f06f 0306 	mvn.w	r3, #6
 800d42e:	e093      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800d430:	7a3b      	ldrb	r3, [r7, #8]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d103      	bne.n	800d43e <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	f043 0301 	orr.w	r3, r3, #1
 800d43c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800d43e:	7abb      	ldrb	r3, [r7, #10]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d103      	bne.n	800d44c <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	f043 0304 	orr.w	r3, r3, #4
 800d44a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800d44c:	7a7b      	ldrb	r3, [r7, #9]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d103      	bne.n	800d45a <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	f043 0302 	orr.w	r3, r3, #2
 800d458:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800d45a:	7afb      	ldrb	r3, [r7, #11]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d143      	bne.n	800d4e8 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	f043 0308 	orr.w	r3, r3, #8
 800d466:	623b      	str	r3, [r7, #32]
      }
      break;
 800d468:	e03e      	b.n	800d4e8 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800d46a:	6838      	ldr	r0, [r7, #0]
 800d46c:	f000 fac8 	bl	800da00 <SHT40AD1B_0_Probe>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800d476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d47a:	e06d      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800d47c:	4a38      	ldr	r2, [pc, #224]	@ (800d560 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	4937      	ldr	r1, [pc, #220]	@ (800d564 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d48e:	f107 0108 	add.w	r1, r7, #8
 800d492:	4610      	mov	r0, r2
 800d494:	4798      	blx	r3
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800d49c:	f06f 0306 	mvn.w	r3, #6
 800d4a0:	e05a      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800d4a2:	7a3b      	ldrb	r3, [r7, #8]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d103      	bne.n	800d4b0 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	f043 0301 	orr.w	r3, r3, #1
 800d4ae:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800d4b0:	7abb      	ldrb	r3, [r7, #10]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d103      	bne.n	800d4be <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	f043 0304 	orr.w	r3, r3, #4
 800d4bc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800d4be:	7a7b      	ldrb	r3, [r7, #9]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d103      	bne.n	800d4cc <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	f043 0302 	orr.w	r3, r3, #2
 800d4ca:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800d4cc:	7afb      	ldrb	r3, [r7, #11]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d10c      	bne.n	800d4ec <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	f043 0308 	orr.w	r3, r3, #8
 800d4d8:	623b      	str	r3, [r7, #32]
      }
      break;
 800d4da:	e007      	b.n	800d4ec <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800d4dc:	f06f 0301 	mvn.w	r3, #1
 800d4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800d4e2:	e004      	b.n	800d4ee <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800d4e4:	bf00      	nop
 800d4e6:	e002      	b.n	800d4ee <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800d4e8:	bf00      	nop
 800d4ea:	e000      	b.n	800d4ee <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800d4ec:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800d4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	e02f      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4fc:	e028      	b.n	800d550 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d502:	4013      	ands	r3, r2
 800d504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d506:	429a      	cmp	r2, r3
 800d508:	d11c      	bne.n	800d544 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800d50a:	6a3a      	ldr	r2, [r7, #32]
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	4013      	ands	r3, r2
 800d510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d512:	429a      	cmp	r2, r3
 800d514:	d116      	bne.n	800d544 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800d516:	4a14      	ldr	r2, [pc, #80]	@ (800d568 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800d518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d51e:	4913      	ldr	r1, [pc, #76]	@ (800d56c <IKS4A1_ENV_SENSOR_Init+0x218>)
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	0092      	lsls	r2, r2, #2
 800d524:	4413      	add	r3, r2
 800d526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	490d      	ldr	r1, [pc, #52]	@ (800d564 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d534:	4610      	mov	r0, r2
 800d536:	4798      	blx	r3
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800d53e:	f06f 0304 	mvn.w	r3, #4
 800d542:	e009      	b.n	800d558 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	3301      	adds	r3, #1
 800d54e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	2b03      	cmp	r3, #3
 800d554:	d9d3      	bls.n	800d4fe <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800d556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3730      	adds	r7, #48	@ 0x30
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20001464 	.word	0x20001464
 800d564:	20001428 	.word	0x20001428
 800d568:	20000288 	.word	0x20000288
 800d56c:	20001434 	.word	0x20001434

0800d570 <IKS4A1_ENV_SENSOR_Enable>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d903      	bls.n	800d588 <IKS4A1_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d580:	f06f 0301 	mvn.w	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	e026      	b.n	800d5d6 <IKS4A1_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800d588:	4a15      	ldr	r2, [pc, #84]	@ (800d5e0 <IKS4A1_ENV_SENSOR_Enable+0x70>)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	4013      	ands	r3, r2
 800d594:	683a      	ldr	r2, [r7, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d11a      	bne.n	800d5d0 <IKS4A1_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800d59a:	4a12      	ldr	r2, [pc, #72]	@ (800d5e4 <IKS4A1_ENV_SENSOR_Enable+0x74>)
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a2:	4911      	ldr	r1, [pc, #68]	@ (800d5e8 <IKS4A1_ENV_SENSOR_Enable+0x78>)
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	0092      	lsls	r2, r2, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	490e      	ldr	r1, [pc, #56]	@ (800d5ec <IKS4A1_ENV_SENSOR_Enable+0x7c>)
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	4798      	blx	r3
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <IKS4A1_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d5c2:	f06f 0304 	mvn.w	r3, #4
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	e005      	b.n	800d5d6 <IKS4A1_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	e002      	b.n	800d5d6 <IKS4A1_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800d5d0:	f06f 0301 	mvn.w	r3, #1
 800d5d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20001470 	.word	0x20001470
 800d5e4:	20000288 	.word	0x20000288
 800d5e8:	20001434 	.word	0x20001434
 800d5ec:	20001428 	.word	0x20001428

0800d5f0 <IKS4A1_ENV_SENSOR_Disable>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d903      	bls.n	800d608 <IKS4A1_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d600:	f06f 0301 	mvn.w	r3, #1
 800d604:	60fb      	str	r3, [r7, #12]
 800d606:	e026      	b.n	800d656 <IKS4A1_ENV_SENSOR_Disable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800d608:	4a15      	ldr	r2, [pc, #84]	@ (800d660 <IKS4A1_ENV_SENSOR_Disable+0x70>)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	4013      	ands	r3, r2
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d11a      	bne.n	800d650 <IKS4A1_ENV_SENSOR_Disable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800d61a:	4a12      	ldr	r2, [pc, #72]	@ (800d664 <IKS4A1_ENV_SENSOR_Disable+0x74>)
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d622:	4911      	ldr	r1, [pc, #68]	@ (800d668 <IKS4A1_ENV_SENSOR_Disable+0x78>)
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	0092      	lsls	r2, r2, #2
 800d628:	4413      	add	r3, r2
 800d62a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	490e      	ldr	r1, [pc, #56]	@ (800d66c <IKS4A1_ENV_SENSOR_Disable+0x7c>)
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d638:	4610      	mov	r0, r2
 800d63a:	4798      	blx	r3
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <IKS4A1_ENV_SENSOR_Disable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d642:	f06f 0304 	mvn.w	r3, #4
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e005      	b.n	800d656 <IKS4A1_ENV_SENSOR_Disable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	60fb      	str	r3, [r7, #12]
 800d64e:	e002      	b.n	800d656 <IKS4A1_ENV_SENSOR_Disable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800d650:	f06f 0301 	mvn.w	r3, #1
 800d654:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800d656:	68fb      	ldr	r3, [r7, #12]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20001470 	.word	0x20001470
 800d664:	20000288 	.word	0x20000288
 800d668:	20001434 	.word	0x20001434
 800d66c:	20001428 	.word	0x20001428

0800d670 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d903      	bls.n	800d68a <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d682:	f06f 0301 	mvn.w	r3, #1
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	e027      	b.n	800d6da <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800d68a:	4a16      	ldr	r2, [pc, #88]	@ (800d6e4 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	4013      	ands	r3, r2
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d11b      	bne.n	800d6d4 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800d69c:	4a12      	ldr	r2, [pc, #72]	@ (800d6e8 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a4:	4911      	ldr	r1, [pc, #68]	@ (800d6ec <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	490f      	ldr	r1, [pc, #60]	@ (800d6f0 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4798      	blx	r3
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d6c6:	f06f 0304 	mvn.w	r3, #4
 800d6ca:	617b      	str	r3, [r7, #20]
 800d6cc:	e005      	b.n	800d6da <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
 800d6d2:	e002      	b.n	800d6da <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800d6d4:	f06f 0301 	mvn.w	r3, #1
 800d6d8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800d6da:	697b      	ldr	r3, [r7, #20]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3718      	adds	r7, #24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	20001470 	.word	0x20001470
 800d6e8:	20000288 	.word	0x20000288
 800d6ec:	20001434 	.word	0x20001434
 800d6f0:	20001428 	.word	0x20001428

0800d6f4 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b092      	sub	sp, #72	@ 0x48
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800d700:	2300      	movs	r3, #0
 800d702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800d704:	2371      	movs	r3, #113	@ 0x71
 800d706:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_Init;
 800d70a:	4b47      	ldr	r3, [pc, #284]	@ (800d828 <STTS22H_0_Probe+0x134>)
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800d70e:	4b47      	ldr	r3, [pc, #284]	@ (800d82c <STTS22H_0_Probe+0x138>)
 800d710:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800d712:	4b47      	ldr	r3, [pc, #284]	@ (800d830 <STTS22H_0_Probe+0x13c>)
 800d714:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800d716:	4b47      	ldr	r3, [pc, #284]	@ (800d834 <STTS22H_0_Probe+0x140>)
 800d718:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GetTick;
 800d71a:	4b47      	ldr	r3, [pc, #284]	@ (800d838 <STTS22H_0_Probe+0x144>)
 800d71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_Delay;
 800d71e:	4b47      	ldr	r3, [pc, #284]	@ (800d83c <STTS22H_0_Probe+0x148>)
 800d720:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800d722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d726:	4619      	mov	r1, r3
 800d728:	4845      	ldr	r0, [pc, #276]	@ (800d840 <STTS22H_0_Probe+0x14c>)
 800d72a:	f7ff f911 	bl	800c950 <STTS22H_RegisterBusIO>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d003      	beq.n	800d73c <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d734:	f06f 0306 	mvn.w	r3, #6
 800d738:	647b      	str	r3, [r7, #68]	@ 0x44
 800d73a:	e06f      	b.n	800d81c <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800d73c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800d740:	4619      	mov	r1, r3
 800d742:	483f      	ldr	r0, [pc, #252]	@ (800d840 <STTS22H_0_Probe+0x14c>)
 800d744:	f7ff f9a3 	bl	800ca8e <STTS22H_ReadID>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d003      	beq.n	800d756 <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d74e:	f06f 0306 	mvn.w	r3, #6
 800d752:	647b      	str	r3, [r7, #68]	@ 0x44
 800d754:	e062      	b.n	800d81c <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800d756:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d75a:	2ba0      	cmp	r3, #160	@ 0xa0
 800d75c:	d003      	beq.n	800d766 <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d75e:	f06f 0306 	mvn.w	r3, #6
 800d762:	647b      	str	r3, [r7, #68]	@ 0x44
 800d764:	e05a      	b.n	800d81c <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800d766:	f107 0308 	add.w	r3, r7, #8
 800d76a:	4619      	mov	r1, r3
 800d76c:	4834      	ldr	r0, [pc, #208]	@ (800d840 <STTS22H_0_Probe+0x14c>)
 800d76e:	f7ff f9a9 	bl	800cac4 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800d772:	7a3b      	ldrb	r3, [r7, #8]
 800d774:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800d776:	7a7b      	ldrb	r3, [r7, #9]
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800d77c:	7abb      	ldrb	r3, [r7, #10]
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800d782:	7afb      	ldrb	r3, [r7, #11]
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800d788:	4a2e      	ldr	r2, [pc, #184]	@ (800d844 <STTS22H_0_Probe+0x150>)
 800d78a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800d78c:	4b2e      	ldr	r3, [pc, #184]	@ (800d848 <STTS22H_0_Probe+0x154>)
 800d78e:	4a2c      	ldr	r2, [pc, #176]	@ (800d840 <STTS22H_0_Probe+0x14c>)
 800d790:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800d792:	4b2e      	ldr	r3, [pc, #184]	@ (800d84c <STTS22H_0_Probe+0x158>)
 800d794:	4a2e      	ldr	r2, [pc, #184]	@ (800d850 <STTS22H_0_Probe+0x15c>)
 800d796:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800d798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d11d      	bne.n	800d7da <STTS22H_0_Probe+0xe6>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d018      	beq.n	800d7da <STTS22H_0_Probe+0xe6>
 800d7a8:	7a3b      	ldrb	r3, [r7, #8]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d115      	bne.n	800d7da <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800d7ae:	4b29      	ldr	r3, [pc, #164]	@ (800d854 <STTS22H_0_Probe+0x160>)
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	4a29      	ldr	r2, [pc, #164]	@ (800d858 <STTS22H_0_Probe+0x164>)
 800d7b4:	4929      	ldr	r1, [pc, #164]	@ (800d85c <STTS22H_0_Probe+0x168>)
 800d7b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800d7ba:	4b24      	ldr	r3, [pc, #144]	@ (800d84c <STTS22H_0_Probe+0x158>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a21      	ldr	r2, [pc, #132]	@ (800d848 <STTS22H_0_Probe+0x154>)
 800d7c2:	6812      	ldr	r2, [r2, #0]
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	4798      	blx	r3
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d7ce:	f06f 0304 	mvn.w	r3, #4
 800d7d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7d4:	e001      	b.n	800d7da <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800d7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d107      	bne.n	800d7f0 <STTS22H_0_Probe+0xfc>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f003 0304 	and.w	r3, r3, #4
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d002      	beq.n	800d7f0 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d7ea:	f06f 0304 	mvn.w	r3, #4
 800d7ee:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800d7f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d107      	bne.n	800d806 <STTS22H_0_Probe+0x112>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f003 0302 	and.w	r3, r3, #2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d800:	f06f 0304 	mvn.w	r3, #4
 800d804:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800d806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d107      	bne.n	800d81c <STTS22H_0_Probe+0x128>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f003 0308 	and.w	r3, r3, #8
 800d812:	2b00      	cmp	r3, #0
 800d814:	d002      	beq.n	800d81c <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d816:	f06f 0304 	mvn.w	r3, #4
 800d81a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800d81c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3748      	adds	r7, #72	@ 0x48
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	0800529d 	.word	0x0800529d
 800d82c:	08005301 	.word	0x08005301
 800d830:	080053b5 	.word	0x080053b5
 800d834:	08005351 	.word	0x08005351
 800d838:	080054c1 	.word	0x080054c1
 800d83c:	0800eb7d 	.word	0x0800eb7d
 800d840:	2000147c 	.word	0x2000147c
 800d844:	20001470 	.word	0x20001470
 800d848:	20001428 	.word	0x20001428
 800d84c:	20001464 	.word	0x20001464
 800d850:	20000264 	.word	0x20000264
 800d854:	20000288 	.word	0x20000288
 800d858:	20001434 	.word	0x20001434
 800d85c:	20000274 	.word	0x20000274

0800d860 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b092      	sub	sp, #72	@ 0x48
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800d868:	2300      	movs	r3, #0
 800d86a:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800d86c:	2300      	movs	r3, #0
 800d86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800d870:	23bb      	movs	r3, #187	@ 0xbb
 800d872:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_Init;
 800d876:	4b53      	ldr	r3, [pc, #332]	@ (800d9c4 <LPS22DF_0_Probe+0x164>)
 800d878:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800d87a:	4b53      	ldr	r3, [pc, #332]	@ (800d9c8 <LPS22DF_0_Probe+0x168>)
 800d87c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800d87e:	4b53      	ldr	r3, [pc, #332]	@ (800d9cc <LPS22DF_0_Probe+0x16c>)
 800d880:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800d882:	4b53      	ldr	r3, [pc, #332]	@ (800d9d0 <LPS22DF_0_Probe+0x170>)
 800d884:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GetTick;
 800d886:	4b53      	ldr	r3, [pc, #332]	@ (800d9d4 <LPS22DF_0_Probe+0x174>)
 800d888:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_Delay;
 800d88a:	4b53      	ldr	r3, [pc, #332]	@ (800d9d8 <LPS22DF_0_Probe+0x178>)
 800d88c:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800d88e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d892:	4619      	mov	r1, r3
 800d894:	4851      	ldr	r0, [pc, #324]	@ (800d9dc <LPS22DF_0_Probe+0x17c>)
 800d896:	f7fa fb55 	bl	8007f44 <LPS22DF_RegisterBusIO>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d8a0:	f06f 0306 	mvn.w	r3, #6
 800d8a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8a6:	e087      	b.n	800d9b8 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800d8a8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	484b      	ldr	r0, [pc, #300]	@ (800d9dc <LPS22DF_0_Probe+0x17c>)
 800d8b0:	f7fa fbf1 	bl	8008096 <LPS22DF_ReadID>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d8ba:	f06f 0306 	mvn.w	r3, #6
 800d8be:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8c0:	e07a      	b.n	800d9b8 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800d8c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d8c6:	2bb4      	cmp	r3, #180	@ 0xb4
 800d8c8:	d003      	beq.n	800d8d2 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d8ca:	f06f 0306 	mvn.w	r3, #6
 800d8ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8d0:	e072      	b.n	800d9b8 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800d8d2:	f107 0308 	add.w	r3, r7, #8
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4840      	ldr	r0, [pc, #256]	@ (800d9dc <LPS22DF_0_Probe+0x17c>)
 800d8da:	f7fa fbf7 	bl	80080cc <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800d8de:	7a3b      	ldrb	r3, [r7, #8]
 800d8e0:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800d8e2:	7a7b      	ldrb	r3, [r7, #9]
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800d8e8:	7abb      	ldrb	r3, [r7, #10]
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800d8ee:	7afb      	ldrb	r3, [r7, #11]
 800d8f0:	00db      	lsls	r3, r3, #3
 800d8f2:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800d8f4:	4a3a      	ldr	r2, [pc, #232]	@ (800d9e0 <LPS22DF_0_Probe+0x180>)
 800d8f6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800d8f8:	4b3a      	ldr	r3, [pc, #232]	@ (800d9e4 <LPS22DF_0_Probe+0x184>)
 800d8fa:	4a38      	ldr	r2, [pc, #224]	@ (800d9dc <LPS22DF_0_Probe+0x17c>)
 800d8fc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800d8fe:	4b3a      	ldr	r3, [pc, #232]	@ (800d9e8 <LPS22DF_0_Probe+0x188>)
 800d900:	4a3a      	ldr	r2, [pc, #232]	@ (800d9ec <LPS22DF_0_Probe+0x18c>)
 800d902:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800d904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d906:	2b00      	cmp	r3, #0
 800d908:	d11e      	bne.n	800d948 <LPS22DF_0_Probe+0xe8>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d019      	beq.n	800d948 <LPS22DF_0_Probe+0xe8>
 800d914:	7a3b      	ldrb	r3, [r7, #8]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d116      	bne.n	800d948 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800d91a:	4b35      	ldr	r3, [pc, #212]	@ (800d9f0 <LPS22DF_0_Probe+0x190>)
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	4a35      	ldr	r2, [pc, #212]	@ (800d9f4 <LPS22DF_0_Probe+0x194>)
 800d920:	3304      	adds	r3, #4
 800d922:	4935      	ldr	r1, [pc, #212]	@ (800d9f8 <LPS22DF_0_Probe+0x198>)
 800d924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800d928:	4b2f      	ldr	r3, [pc, #188]	@ (800d9e8 <LPS22DF_0_Probe+0x188>)
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a2d      	ldr	r2, [pc, #180]	@ (800d9e4 <LPS22DF_0_Probe+0x184>)
 800d930:	6852      	ldr	r2, [r2, #4]
 800d932:	4610      	mov	r0, r2
 800d934:	4798      	blx	r3
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d003      	beq.n	800d944 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d93c:	f06f 0304 	mvn.w	r3, #4
 800d940:	647b      	str	r3, [r7, #68]	@ 0x44
 800d942:	e001      	b.n	800d948 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800d944:	2300      	movs	r3, #0
 800d946:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800d948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d11e      	bne.n	800d98c <LPS22DF_0_Probe+0x12c>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f003 0302 	and.w	r3, r3, #2
 800d954:	2b00      	cmp	r3, #0
 800d956:	d019      	beq.n	800d98c <LPS22DF_0_Probe+0x12c>
 800d958:	7a7b      	ldrb	r3, [r7, #9]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d116      	bne.n	800d98c <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800d95e:	4b24      	ldr	r3, [pc, #144]	@ (800d9f0 <LPS22DF_0_Probe+0x190>)
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	4a24      	ldr	r2, [pc, #144]	@ (800d9f4 <LPS22DF_0_Probe+0x194>)
 800d964:	3304      	adds	r3, #4
 800d966:	4925      	ldr	r1, [pc, #148]	@ (800d9fc <LPS22DF_0_Probe+0x19c>)
 800d968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800d96c:	4b1e      	ldr	r3, [pc, #120]	@ (800d9e8 <LPS22DF_0_Probe+0x188>)
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a1c      	ldr	r2, [pc, #112]	@ (800d9e4 <LPS22DF_0_Probe+0x184>)
 800d974:	6852      	ldr	r2, [r2, #4]
 800d976:	4610      	mov	r0, r2
 800d978:	4798      	blx	r3
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d003      	beq.n	800d988 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d980:	f06f 0304 	mvn.w	r3, #4
 800d984:	647b      	str	r3, [r7, #68]	@ 0x44
 800d986:	e001      	b.n	800d98c <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800d988:	2300      	movs	r3, #0
 800d98a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800d98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d107      	bne.n	800d9a2 <LPS22DF_0_Probe+0x142>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f003 0304 	and.w	r3, r3, #4
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d99c:	f06f 0304 	mvn.w	r3, #4
 800d9a0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800d9a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d107      	bne.n	800d9b8 <LPS22DF_0_Probe+0x158>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f003 0308 	and.w	r3, r3, #8
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d002      	beq.n	800d9b8 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d9b2:	f06f 0304 	mvn.w	r3, #4
 800d9b6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800d9b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3748      	adds	r7, #72	@ 0x48
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	0800529d 	.word	0x0800529d
 800d9c8:	08005301 	.word	0x08005301
 800d9cc:	080053b5 	.word	0x080053b5
 800d9d0:	08005351 	.word	0x08005351
 800d9d4:	080054c1 	.word	0x080054c1
 800d9d8:	0800eb7d 	.word	0x0800eb7d
 800d9dc:	200014b4 	.word	0x200014b4
 800d9e0:	20001470 	.word	0x20001470
 800d9e4:	20001428 	.word	0x20001428
 800d9e8:	20001464 	.word	0x20001464
 800d9ec:	20000144 	.word	0x20000144
 800d9f0:	20000288 	.word	0x20000288
 800d9f4:	20001434 	.word	0x20001434
 800d9f8:	20000168 	.word	0x20000168
 800d9fc:	20000154 	.word	0x20000154

0800da00 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b092      	sub	sp, #72	@ 0x48
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800da08:	2300      	movs	r3, #0
 800da0a:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800da0c:	2300      	movs	r3, #0
 800da0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800da10:	2389      	movs	r3, #137	@ 0x89
 800da12:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_Init;
 800da16:	4b53      	ldr	r3, [pc, #332]	@ (800db64 <SHT40AD1B_0_Probe+0x164>)
 800da18:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800da1a:	4b53      	ldr	r3, [pc, #332]	@ (800db68 <SHT40AD1B_0_Probe+0x168>)
 800da1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_Read;
 800da1e:	4b53      	ldr	r3, [pc, #332]	@ (800db6c <SHT40AD1B_0_Probe+0x16c>)
 800da20:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_Write;
 800da22:	4b53      	ldr	r3, [pc, #332]	@ (800db70 <SHT40AD1B_0_Probe+0x170>)
 800da24:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GetTick;
 800da26:	4b53      	ldr	r3, [pc, #332]	@ (800db74 <SHT40AD1B_0_Probe+0x174>)
 800da28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_Delay;
 800da2a:	4b53      	ldr	r3, [pc, #332]	@ (800db78 <SHT40AD1B_0_Probe+0x178>)
 800da2c:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800da2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da32:	4619      	mov	r1, r3
 800da34:	4851      	ldr	r0, [pc, #324]	@ (800db7c <SHT40AD1B_0_Probe+0x17c>)
 800da36:	f7fe fc89 	bl	800c34c <SHT40AD1B_RegisterBusIO>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d003      	beq.n	800da48 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800da40:	f06f 0306 	mvn.w	r3, #6
 800da44:	647b      	str	r3, [r7, #68]	@ 0x44
 800da46:	e087      	b.n	800db58 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800da48:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800da4c:	4619      	mov	r1, r3
 800da4e:	484b      	ldr	r0, [pc, #300]	@ (800db7c <SHT40AD1B_0_Probe+0x17c>)
 800da50:	f7fe fcec 	bl	800c42c <SHT40AD1B_ReadID>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d003      	beq.n	800da62 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800da5a:	f06f 0306 	mvn.w	r3, #6
 800da5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800da60:	e07a      	b.n	800db58 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800da62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800da66:	2b00      	cmp	r3, #0
 800da68:	d003      	beq.n	800da72 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800da6a:	f06f 0306 	mvn.w	r3, #6
 800da6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800da70:	e072      	b.n	800db58 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800da72:	f107 0308 	add.w	r3, r7, #8
 800da76:	4619      	mov	r1, r3
 800da78:	4840      	ldr	r0, [pc, #256]	@ (800db7c <SHT40AD1B_0_Probe+0x17c>)
 800da7a:	f7fe fce7 	bl	800c44c <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800da7e:	7a3b      	ldrb	r3, [r7, #8]
 800da80:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800da82:	7a7b      	ldrb	r3, [r7, #9]
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800da88:	7abb      	ldrb	r3, [r7, #10]
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800da8e:	7afb      	ldrb	r3, [r7, #11]
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800da94:	4a3a      	ldr	r2, [pc, #232]	@ (800db80 <SHT40AD1B_0_Probe+0x180>)
 800da96:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800da98:	4b3a      	ldr	r3, [pc, #232]	@ (800db84 <SHT40AD1B_0_Probe+0x184>)
 800da9a:	4a38      	ldr	r2, [pc, #224]	@ (800db7c <SHT40AD1B_0_Probe+0x17c>)
 800da9c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800da9e:	4b3a      	ldr	r3, [pc, #232]	@ (800db88 <SHT40AD1B_0_Probe+0x188>)
 800daa0:	4a3a      	ldr	r2, [pc, #232]	@ (800db8c <SHT40AD1B_0_Probe+0x18c>)
 800daa2:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800daa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d11e      	bne.n	800dae8 <SHT40AD1B_0_Probe+0xe8>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f003 0301 	and.w	r3, r3, #1
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d019      	beq.n	800dae8 <SHT40AD1B_0_Probe+0xe8>
 800dab4:	7a3b      	ldrb	r3, [r7, #8]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d116      	bne.n	800dae8 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800daba:	4b35      	ldr	r3, [pc, #212]	@ (800db90 <SHT40AD1B_0_Probe+0x190>)
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	4a35      	ldr	r2, [pc, #212]	@ (800db94 <SHT40AD1B_0_Probe+0x194>)
 800dac0:	3308      	adds	r3, #8
 800dac2:	4935      	ldr	r1, [pc, #212]	@ (800db98 <SHT40AD1B_0_Probe+0x198>)
 800dac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800dac8:	4b2f      	ldr	r3, [pc, #188]	@ (800db88 <SHT40AD1B_0_Probe+0x188>)
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a2d      	ldr	r2, [pc, #180]	@ (800db84 <SHT40AD1B_0_Probe+0x184>)
 800dad0:	6892      	ldr	r2, [r2, #8]
 800dad2:	4610      	mov	r0, r2
 800dad4:	4798      	blx	r3
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dadc:	f06f 0304 	mvn.w	r3, #4
 800dae0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dae2:	e001      	b.n	800dae8 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dae4:	2300      	movs	r3, #0
 800dae6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800dae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daea:	2b00      	cmp	r3, #0
 800daec:	d11e      	bne.n	800db2c <SHT40AD1B_0_Probe+0x12c>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f003 0304 	and.w	r3, r3, #4
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d019      	beq.n	800db2c <SHT40AD1B_0_Probe+0x12c>
 800daf8:	7abb      	ldrb	r3, [r7, #10]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d116      	bne.n	800db2c <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800dafe:	4b24      	ldr	r3, [pc, #144]	@ (800db90 <SHT40AD1B_0_Probe+0x190>)
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	4a24      	ldr	r2, [pc, #144]	@ (800db94 <SHT40AD1B_0_Probe+0x194>)
 800db04:	3308      	adds	r3, #8
 800db06:	4925      	ldr	r1, [pc, #148]	@ (800db9c <SHT40AD1B_0_Probe+0x19c>)
 800db08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800db0c:	4b1e      	ldr	r3, [pc, #120]	@ (800db88 <SHT40AD1B_0_Probe+0x188>)
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a1c      	ldr	r2, [pc, #112]	@ (800db84 <SHT40AD1B_0_Probe+0x184>)
 800db14:	6892      	ldr	r2, [r2, #8]
 800db16:	4610      	mov	r0, r2
 800db18:	4798      	blx	r3
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800db20:	f06f 0304 	mvn.w	r3, #4
 800db24:	647b      	str	r3, [r7, #68]	@ 0x44
 800db26:	e001      	b.n	800db2c <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800db28:	2300      	movs	r3, #0
 800db2a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800db2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d107      	bne.n	800db42 <SHT40AD1B_0_Probe+0x142>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800db3c:	f06f 0304 	mvn.w	r3, #4
 800db40:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800db42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db44:	2b00      	cmp	r3, #0
 800db46:	d107      	bne.n	800db58 <SHT40AD1B_0_Probe+0x158>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f003 0308 	and.w	r3, r3, #8
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800db52:	f06f 0304 	mvn.w	r3, #4
 800db56:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800db58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3748      	adds	r7, #72	@ 0x48
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	0800529d 	.word	0x0800529d
 800db68:	08005301 	.word	0x08005301
 800db6c:	0800546d 	.word	0x0800546d
 800db70:	08005419 	.word	0x08005419
 800db74:	080054c1 	.word	0x080054c1
 800db78:	0800eb7d 	.word	0x0800eb7d
 800db7c:	200014ec 	.word	0x200014ec
 800db80:	20001470 	.word	0x20001470
 800db84:	20001428 	.word	0x20001428
 800db88:	20001464 	.word	0x20001464
 800db8c:	2000022c 	.word	0x2000022c
 800db90:	20000288 	.word	0x20000288
 800db94:	20001434 	.word	0x20001434
 800db98:	20000250 	.word	0x20000250
 800db9c:	2000023c 	.word	0x2000023c

0800dba0 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b08e      	sub	sp, #56	@ 0x38
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	f200 80d4 	bhi.w	800dd66 <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800dbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800dbc4 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800dbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc4:	0800dbd5 	.word	0x0800dbd5
 800dbc8:	0800dc3b 	.word	0x0800dc3b
 800dbcc:	0800dc9f 	.word	0x0800dc9f
 800dbd0:	0800dd03 	.word	0x0800dd03
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800dbd4:	6838      	ldr	r0, [r7, #0]
 800dbd6:	f000 fa67 	bl	800e0a8 <LIS2MDL_0_Probe>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800dbe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbe4:	e101      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800dbe6:	4a83      	ldr	r2, [pc, #524]	@ (800ddf4 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	4981      	ldr	r1, [pc, #516]	@ (800ddf8 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dbf8:	f107 010c 	add.w	r1, r7, #12
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	4798      	blx	r3
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800dc06:	f06f 0306 	mvn.w	r3, #6
 800dc0a:	e0ee      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800dc0c:	7b3b      	ldrb	r3, [r7, #12]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d103      	bne.n	800dc1a <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800dc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc14:	f043 0302 	orr.w	r3, r3, #2
 800dc18:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800dc1a:	7b7b      	ldrb	r3, [r7, #13]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d103      	bne.n	800dc28 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800dc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	f040 809f 	bne.w	800dd6e <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800dc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc32:	f043 0304 	orr.w	r3, r3, #4
 800dc36:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800dc38:	e099      	b.n	800dd6e <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800dc3a:	6838      	ldr	r0, [r7, #0]
 800dc3c:	f000 fadc 	bl	800e1f8 <LSM6DSV16X_0_Probe>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d002      	beq.n	800dc4c <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc4a:	e0ce      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800dc4c:	4a69      	ldr	r2, [pc, #420]	@ (800ddf4 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	4968      	ldr	r1, [pc, #416]	@ (800ddf8 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dc5e:	f107 010c 	add.w	r1, r7, #12
 800dc62:	4610      	mov	r0, r2
 800dc64:	4798      	blx	r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800dc6c:	f06f 0306 	mvn.w	r3, #6
 800dc70:	e0bb      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800dc72:	7b3b      	ldrb	r3, [r7, #12]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d103      	bne.n	800dc80 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800dc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7a:	f043 0302 	orr.w	r3, r3, #2
 800dc7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800dc80:	7b7b      	ldrb	r3, [r7, #13]
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d103      	bne.n	800dc8e <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800dc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc88:	f043 0301 	orr.w	r3, r3, #1
 800dc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800dc8e:	7bbb      	ldrb	r3, [r7, #14]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d16e      	bne.n	800dd72 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800dc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc96:	f043 0304 	orr.w	r3, r3, #4
 800dc9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800dc9c:	e069      	b.n	800dd72 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800dc9e:	6838      	ldr	r0, [r7, #0]
 800dca0:	f000 fb6c 	bl	800e37c <LIS2DUXS12_0_Probe>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d002      	beq.n	800dcb0 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800dcaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcae:	e09c      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800dcb0:	4a50      	ldr	r2, [pc, #320]	@ (800ddf4 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	494f      	ldr	r1, [pc, #316]	@ (800ddf8 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dcc2:	f107 010c 	add.w	r1, r7, #12
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	4798      	blx	r3
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800dcd0:	f06f 0306 	mvn.w	r3, #6
 800dcd4:	e089      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800dcd6:	7b3b      	ldrb	r3, [r7, #12]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d103      	bne.n	800dce4 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800dcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcde:	f043 0302 	orr.w	r3, r3, #2
 800dce2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800dce4:	7b7b      	ldrb	r3, [r7, #13]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d103      	bne.n	800dcf2 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800dcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcec:	f043 0301 	orr.w	r3, r3, #1
 800dcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d13e      	bne.n	800dd76 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	f043 0304 	orr.w	r3, r3, #4
 800dcfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800dd00:	e039      	b.n	800dd76 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800dd02:	6838      	ldr	r0, [r7, #0]
 800dd04:	f000 fbe6 	bl	800e4d4 <LSM6DSO16IS_0_Probe>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800dd0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd12:	e06a      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800dd14:	4a37      	ldr	r2, [pc, #220]	@ (800ddf4 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	4936      	ldr	r1, [pc, #216]	@ (800ddf8 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dd26:	f107 010c 	add.w	r1, r7, #12
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	4798      	blx	r3
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800dd34:	f06f 0306 	mvn.w	r3, #6
 800dd38:	e057      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800dd3a:	7b3b      	ldrb	r3, [r7, #12]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d103      	bne.n	800dd48 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800dd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd42:	f043 0302 	orr.w	r3, r3, #2
 800dd46:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800dd48:	7b7b      	ldrb	r3, [r7, #13]
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d103      	bne.n	800dd56 <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800dd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd50:	f043 0301 	orr.w	r3, r3, #1
 800dd54:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d10e      	bne.n	800dd7a <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800dd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5e:	f043 0304 	orr.w	r3, r3, #4
 800dd62:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800dd64:	e009      	b.n	800dd7a <IKS4A1_MOTION_SENSOR_Init+0x1da>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800dd66:	f06f 0301 	mvn.w	r3, #1
 800dd6a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800dd6c:	e006      	b.n	800dd7c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800dd6e:	bf00      	nop
 800dd70:	e004      	b.n	800dd7c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800dd72:	bf00      	nop
 800dd74:	e002      	b.n	800dd7c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800dd76:	bf00      	nop
 800dd78:	e000      	b.n	800dd7c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800dd7a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800dd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800dd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd84:	e031      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800dd86:	2300      	movs	r3, #0
 800dd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd8a:	e02a      	b.n	800dde2 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd90:	4013      	ands	r3, r2
 800dd92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d11e      	bne.n	800ddd6 <IKS4A1_MOTION_SENSOR_Init+0x236>
 800dd98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d118      	bne.n	800ddd6 <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800dda4:	4a15      	ldr	r2, [pc, #84]	@ (800ddfc <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ddac:	4814      	ldr	r0, [pc, #80]	@ (800de00 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	005b      	lsls	r3, r3, #1
 800ddb4:	4413      	add	r3, r2
 800ddb6:	440b      	add	r3, r1
 800ddb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	490e      	ldr	r1, [pc, #56]	@ (800ddf8 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	4798      	blx	r3
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d002      	beq.n	800ddd6 <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ddd0:	f06f 0304 	mvn.w	r3, #4
 800ddd4:	e009      	b.n	800ddea <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddde:	3301      	adds	r3, #1
 800dde0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d9d1      	bls.n	800dd8c <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800dde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3738      	adds	r7, #56	@ 0x38
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20001570 	.word	0x20001570
 800ddf8:	20001530 	.word	0x20001530
 800ddfc:	200002ac 	.word	0x200002ac
 800de00:	20001540 	.word	0x20001540

0800de04 <IKS4A1_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2b03      	cmp	r3, #3
 800de12:	d903      	bls.n	800de1c <IKS4A1_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800de14:	f06f 0301 	mvn.w	r3, #1
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	e028      	b.n	800de6e <IKS4A1_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800de1c:	4a16      	ldr	r2, [pc, #88]	@ (800de78 <IKS4A1_MOTION_SENSOR_Enable+0x74>)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	4013      	ands	r3, r2
 800de28:	683a      	ldr	r2, [r7, #0]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d11c      	bne.n	800de68 <IKS4A1_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800de2e:	4a13      	ldr	r2, [pc, #76]	@ (800de7c <IKS4A1_MOTION_SENSOR_Enable+0x78>)
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800de36:	4812      	ldr	r0, [pc, #72]	@ (800de80 <IKS4A1_MOTION_SENSOR_Enable+0x7c>)
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	4613      	mov	r3, r2
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	4413      	add	r3, r2
 800de40:	440b      	add	r3, r1
 800de42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	490e      	ldr	r1, [pc, #56]	@ (800de84 <IKS4A1_MOTION_SENSOR_Enable+0x80>)
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800de50:	4610      	mov	r0, r2
 800de52:	4798      	blx	r3
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d003      	beq.n	800de62 <IKS4A1_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800de5a:	f06f 0304 	mvn.w	r3, #4
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	e005      	b.n	800de6e <IKS4A1_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	e002      	b.n	800de6e <IKS4A1_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800de68:	f06f 0301 	mvn.w	r3, #1
 800de6c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800de6e:	68fb      	ldr	r3, [r7, #12]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20001580 	.word	0x20001580
 800de7c:	200002ac 	.word	0x200002ac
 800de80:	20001540 	.word	0x20001540
 800de84:	20001530 	.word	0x20001530

0800de88 <IKS4A1_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b03      	cmp	r3, #3
 800de96:	d903      	bls.n	800dea0 <IKS4A1_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800de98:	f06f 0301 	mvn.w	r3, #1
 800de9c:	60fb      	str	r3, [r7, #12]
 800de9e:	e028      	b.n	800def2 <IKS4A1_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800dea0:	4a16      	ldr	r2, [pc, #88]	@ (800defc <IKS4A1_MOTION_SENSOR_Disable+0x74>)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	4013      	ands	r3, r2
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d11c      	bne.n	800deec <IKS4A1_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800deb2:	4a13      	ldr	r2, [pc, #76]	@ (800df00 <IKS4A1_MOTION_SENSOR_Disable+0x78>)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800deba:	4812      	ldr	r0, [pc, #72]	@ (800df04 <IKS4A1_MOTION_SENSOR_Disable+0x7c>)
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	4613      	mov	r3, r2
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	4413      	add	r3, r2
 800dec4:	440b      	add	r3, r1
 800dec6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	490e      	ldr	r1, [pc, #56]	@ (800df08 <IKS4A1_MOTION_SENSOR_Disable+0x80>)
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ded4:	4610      	mov	r0, r2
 800ded6:	4798      	blx	r3
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d003      	beq.n	800dee6 <IKS4A1_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dede:	f06f 0304 	mvn.w	r3, #4
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	e005      	b.n	800def2 <IKS4A1_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dee6:	2300      	movs	r3, #0
 800dee8:	60fb      	str	r3, [r7, #12]
 800deea:	e002      	b.n	800def2 <IKS4A1_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800deec:	f06f 0301 	mvn.w	r3, #1
 800def0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800def2:	68fb      	ldr	r3, [r7, #12]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	20001580 	.word	0x20001580
 800df00:	200002ac 	.word	0x200002ac
 800df04:	20001540 	.word	0x20001540
 800df08:	20001530 	.word	0x20001530

0800df0c <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d903      	bls.n	800df26 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800df1e:	f06f 0301 	mvn.w	r3, #1
 800df22:	617b      	str	r3, [r7, #20]
 800df24:	e029      	b.n	800df7a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800df26:	4a17      	ldr	r2, [pc, #92]	@ (800df84 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	4013      	ands	r3, r2
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	429a      	cmp	r2, r3
 800df36:	d11d      	bne.n	800df74 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800df38:	4a13      	ldr	r2, [pc, #76]	@ (800df88 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800df40:	4812      	ldr	r0, [pc, #72]	@ (800df8c <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	4613      	mov	r3, r2
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	4413      	add	r3, r2
 800df4a:	440b      	add	r3, r1
 800df4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800df50:	69db      	ldr	r3, [r3, #28]
 800df52:	490f      	ldr	r1, [pc, #60]	@ (800df90 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	4610      	mov	r0, r2
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d003      	beq.n	800df6e <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800df66:	f06f 0304 	mvn.w	r3, #4
 800df6a:	617b      	str	r3, [r7, #20]
 800df6c:	e005      	b.n	800df7a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800df6e:	2300      	movs	r3, #0
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	e002      	b.n	800df7a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800df74:	f06f 0301 	mvn.w	r3, #1
 800df78:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800df7a:	697b      	ldr	r3, [r7, #20]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3718      	adds	r7, #24
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20001580 	.word	0x20001580
 800df88:	200002ac 	.word	0x200002ac
 800df8c:	20001540 	.word	0x20001540
 800df90:	20001530 	.word	0x20001530

0800df94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	d903      	bls.n	800dfb0 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800dfa8:	f06f 0301 	mvn.w	r3, #1
 800dfac:	617b      	str	r3, [r7, #20]
 800dfae:	e02a      	b.n	800e006 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800dfb0:	4a17      	ldr	r2, [pc, #92]	@ (800e010 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	4013      	ands	r3, r2
 800dfbc:	68ba      	ldr	r2, [r7, #8]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d11e      	bne.n	800e000 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800dfc2:	4a14      	ldr	r2, [pc, #80]	@ (800e014 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dfca:	4813      	ldr	r0, [pc, #76]	@ (800e018 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	4413      	add	r3, r2
 800dfd4:	440b      	add	r3, r1
 800dfd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	490f      	ldr	r1, [pc, #60]	@ (800e01c <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dfe4:	ed97 0a01 	vldr	s0, [r7, #4]
 800dfe8:	4610      	mov	r0, r2
 800dfea:	4798      	blx	r3
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d003      	beq.n	800dffa <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dff2:	f06f 0304 	mvn.w	r3, #4
 800dff6:	617b      	str	r3, [r7, #20]
 800dff8:	e005      	b.n	800e006 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	e002      	b.n	800e006 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800e000:	f06f 0301 	mvn.w	r3, #1
 800e004:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800e006:	697b      	ldr	r3, [r7, #20]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20001580 	.word	0x20001580
 800e014:	200002ac 	.word	0x200002ac
 800e018:	20001540 	.word	0x20001540
 800e01c:	20001530 	.word	0x20001530

0800e020 <IKS4A1_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d903      	bls.n	800e03a <IKS4A1_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e032:	f06f 0301 	mvn.w	r3, #1
 800e036:	617b      	str	r3, [r7, #20]
 800e038:	e029      	b.n	800e08e <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800e03a:	4a17      	ldr	r2, [pc, #92]	@ (800e098 <IKS4A1_MOTION_SENSOR_SetFullScale+0x78>)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	4013      	ands	r3, r2
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d11d      	bne.n	800e088 <IKS4A1_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800e04c:	4a13      	ldr	r2, [pc, #76]	@ (800e09c <IKS4A1_MOTION_SENSOR_SetFullScale+0x7c>)
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e054:	4812      	ldr	r0, [pc, #72]	@ (800e0a0 <IKS4A1_MOTION_SENSOR_SetFullScale+0x80>)
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	440b      	add	r3, r1
 800e060:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	490f      	ldr	r1, [pc, #60]	@ (800e0a4 <IKS4A1_MOTION_SENSOR_SetFullScale+0x84>)
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	4610      	mov	r0, r2
 800e072:	4798      	blx	r3
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d003      	beq.n	800e082 <IKS4A1_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e07a:	f06f 0304 	mvn.w	r3, #4
 800e07e:	617b      	str	r3, [r7, #20]
 800e080:	e005      	b.n	800e08e <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e082:	2300      	movs	r3, #0
 800e084:	617b      	str	r3, [r7, #20]
 800e086:	e002      	b.n	800e08e <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800e088:	f06f 0301 	mvn.w	r3, #1
 800e08c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800e08e:	697b      	ldr	r3, [r7, #20]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20001580 	.word	0x20001580
 800e09c:	200002ac 	.word	0x200002ac
 800e0a0:	20001540 	.word	0x20001540
 800e0a4:	20001530 	.word	0x20001530

0800e0a8 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b094      	sub	sp, #80	@ 0x50
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800e0b8:	233d      	movs	r3, #61	@ 0x3d
 800e0ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e0be:	4b40      	ldr	r3, [pc, #256]	@ (800e1c0 <LIS2MDL_0_Probe+0x118>)
 800e0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e0c2:	4b40      	ldr	r3, [pc, #256]	@ (800e1c4 <LIS2MDL_0_Probe+0x11c>)
 800e0c4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e0c6:	4b40      	ldr	r3, [pc, #256]	@ (800e1c8 <LIS2MDL_0_Probe+0x120>)
 800e0c8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e0ca:	4b40      	ldr	r3, [pc, #256]	@ (800e1cc <LIS2MDL_0_Probe+0x124>)
 800e0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e0ce:	4b40      	ldr	r3, [pc, #256]	@ (800e1d0 <LIS2MDL_0_Probe+0x128>)
 800e0d0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e0d2:	4b40      	ldr	r3, [pc, #256]	@ (800e1d4 <LIS2MDL_0_Probe+0x12c>)
 800e0d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800e0d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e0da:	4619      	mov	r1, r3
 800e0dc:	483e      	ldr	r0, [pc, #248]	@ (800e1d8 <LIS2MDL_0_Probe+0x130>)
 800e0de:	f7f8 ff31 	bl	8006f44 <LIS2MDL_RegisterBusIO>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d003      	beq.n	800e0f0 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e0e8:	f06f 0306 	mvn.w	r3, #6
 800e0ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0ee:	e061      	b.n	800e1b4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800e0f0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	4838      	ldr	r0, [pc, #224]	@ (800e1d8 <LIS2MDL_0_Probe+0x130>)
 800e0f8:	f7f9 f840 	bl	800717c <LIS2MDL_ReadID>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e102:	f06f 0306 	mvn.w	r3, #6
 800e106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e108:	e054      	b.n	800e1b4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800e10a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e10e:	2b40      	cmp	r3, #64	@ 0x40
 800e110:	d003      	beq.n	800e11a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e112:	f06f 0306 	mvn.w	r3, #6
 800e116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e118:	e04c      	b.n	800e1b4 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800e11a:	f107 030c 	add.w	r3, r7, #12
 800e11e:	4619      	mov	r1, r3
 800e120:	482d      	ldr	r0, [pc, #180]	@ (800e1d8 <LIS2MDL_0_Probe+0x130>)
 800e122:	f7f9 f851 	bl	80071c8 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e126:	7b7b      	ldrb	r3, [r7, #13]
 800e128:	461a      	mov	r2, r3
 800e12a:	7b3b      	ldrb	r3, [r7, #12]
 800e12c:	005b      	lsls	r3, r3, #1
 800e12e:	431a      	orrs	r2, r3
 800e130:	7bbb      	ldrb	r3, [r7, #14]
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4313      	orrs	r3, r2
 800e136:	4a29      	ldr	r2, [pc, #164]	@ (800e1dc <LIS2MDL_0_Probe+0x134>)
 800e138:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800e13a:	4b29      	ldr	r3, [pc, #164]	@ (800e1e0 <LIS2MDL_0_Probe+0x138>)
 800e13c:	4a26      	ldr	r2, [pc, #152]	@ (800e1d8 <LIS2MDL_0_Probe+0x130>)
 800e13e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800e140:	4b28      	ldr	r3, [pc, #160]	@ (800e1e4 <LIS2MDL_0_Probe+0x13c>)
 800e142:	4a29      	ldr	r2, [pc, #164]	@ (800e1e8 <LIS2MDL_0_Probe+0x140>)
 800e144:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800e146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d11d      	bne.n	800e188 <LIS2MDL_0_Probe+0xe0>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	2b00      	cmp	r3, #0
 800e154:	d018      	beq.n	800e188 <LIS2MDL_0_Probe+0xe0>
 800e156:	7bbb      	ldrb	r3, [r7, #14]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d115      	bne.n	800e188 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e15c:	4b23      	ldr	r3, [pc, #140]	@ (800e1ec <LIS2MDL_0_Probe+0x144>)
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	4a23      	ldr	r2, [pc, #140]	@ (800e1f0 <LIS2MDL_0_Probe+0x148>)
 800e162:	4924      	ldr	r1, [pc, #144]	@ (800e1f4 <LIS2MDL_0_Probe+0x14c>)
 800e164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800e168:	4b1e      	ldr	r3, [pc, #120]	@ (800e1e4 <LIS2MDL_0_Probe+0x13c>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a1c      	ldr	r2, [pc, #112]	@ (800e1e0 <LIS2MDL_0_Probe+0x138>)
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	4610      	mov	r0, r2
 800e174:	4798      	blx	r3
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d003      	beq.n	800e184 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e17c:	f06f 0304 	mvn.w	r3, #4
 800e180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e182:	e001      	b.n	800e188 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e184:	2300      	movs	r3, #0
 800e186:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800e188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d107      	bne.n	800e19e <LIS2MDL_0_Probe+0xf6>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e198:	f06f 0304 	mvn.w	r3, #4
 800e19c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800e19e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d107      	bne.n	800e1b4 <LIS2MDL_0_Probe+0x10c>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e1ae:	f06f 0304 	mvn.w	r3, #4
 800e1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3750      	adds	r7, #80	@ 0x50
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	0800529d 	.word	0x0800529d
 800e1c4:	08005301 	.word	0x08005301
 800e1c8:	080053b5 	.word	0x080053b5
 800e1cc:	08005351 	.word	0x08005351
 800e1d0:	080054c1 	.word	0x080054c1
 800e1d4:	0800eb7d 	.word	0x0800eb7d
 800e1d8:	20001590 	.word	0x20001590
 800e1dc:	20001580 	.word	0x20001580
 800e1e0:	20001530 	.word	0x20001530
 800e1e4:	20001570 	.word	0x20001570
 800e1e8:	20000110 	.word	0x20000110
 800e1ec:	200002ac 	.word	0x200002ac
 800e1f0:	20001540 	.word	0x20001540
 800e1f4:	20000120 	.word	0x20000120

0800e1f8 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b094      	sub	sp, #80	@ 0x50
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800e200:	2300      	movs	r3, #0
 800e202:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800e204:	2300      	movs	r3, #0
 800e206:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800e208:	23d7      	movs	r3, #215	@ 0xd7
 800e20a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e20e:	4b4c      	ldr	r3, [pc, #304]	@ (800e340 <LSM6DSV16X_0_Probe+0x148>)
 800e210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e212:	4b4c      	ldr	r3, [pc, #304]	@ (800e344 <LSM6DSV16X_0_Probe+0x14c>)
 800e214:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e216:	4b4c      	ldr	r3, [pc, #304]	@ (800e348 <LSM6DSV16X_0_Probe+0x150>)
 800e218:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e21a:	4b4c      	ldr	r3, [pc, #304]	@ (800e34c <LSM6DSV16X_0_Probe+0x154>)
 800e21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e21e:	4b4c      	ldr	r3, [pc, #304]	@ (800e350 <LSM6DSV16X_0_Probe+0x158>)
 800e220:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e222:	4b4c      	ldr	r3, [pc, #304]	@ (800e354 <LSM6DSV16X_0_Probe+0x15c>)
 800e224:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800e226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e22a:	4619      	mov	r1, r3
 800e22c:	484a      	ldr	r0, [pc, #296]	@ (800e358 <LSM6DSV16X_0_Probe+0x160>)
 800e22e:	f7fc fad9 	bl	800a7e4 <LSM6DSV16X_RegisterBusIO>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d003      	beq.n	800e240 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e238:	f06f 0306 	mvn.w	r3, #6
 800e23c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e23e:	e079      	b.n	800e334 <LSM6DSV16X_0_Probe+0x13c>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800e240:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e244:	4619      	mov	r1, r3
 800e246:	4844      	ldr	r0, [pc, #272]	@ (800e358 <LSM6DSV16X_0_Probe+0x160>)
 800e248:	f7fc fbf2 	bl	800aa30 <LSM6DSV16X_ReadID>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <LSM6DSV16X_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e252:	f06f 0306 	mvn.w	r3, #6
 800e256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e258:	e06c      	b.n	800e334 <LSM6DSV16X_0_Probe+0x13c>
  }
  else if (id != LSM6DSV16X_ID)
 800e25a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e25e:	2b70      	cmp	r3, #112	@ 0x70
 800e260:	d003      	beq.n	800e26a <LSM6DSV16X_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e262:	f06f 0306 	mvn.w	r3, #6
 800e266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e268:	e064      	b.n	800e334 <LSM6DSV16X_0_Probe+0x13c>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800e26a:	f107 030c 	add.w	r3, r7, #12
 800e26e:	4619      	mov	r1, r3
 800e270:	4839      	ldr	r0, [pc, #228]	@ (800e358 <LSM6DSV16X_0_Probe+0x160>)
 800e272:	f7fc fbf3 	bl	800aa5c <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e276:	7b7b      	ldrb	r3, [r7, #13]
 800e278:	461a      	mov	r2, r3
 800e27a:	7b3b      	ldrb	r3, [r7, #12]
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	431a      	orrs	r2, r3
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4313      	orrs	r3, r2
 800e286:	4a35      	ldr	r2, [pc, #212]	@ (800e35c <LSM6DSV16X_0_Probe+0x164>)
 800e288:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800e28a:	4b35      	ldr	r3, [pc, #212]	@ (800e360 <LSM6DSV16X_0_Probe+0x168>)
 800e28c:	4a32      	ldr	r2, [pc, #200]	@ (800e358 <LSM6DSV16X_0_Probe+0x160>)
 800e28e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800e290:	4b34      	ldr	r3, [pc, #208]	@ (800e364 <LSM6DSV16X_0_Probe+0x16c>)
 800e292:	4a35      	ldr	r2, [pc, #212]	@ (800e368 <LSM6DSV16X_0_Probe+0x170>)
 800e294:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800e296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d11e      	bne.n	800e2da <LSM6DSV16X_0_Probe+0xe2>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d019      	beq.n	800e2da <LSM6DSV16X_0_Probe+0xe2>
 800e2a6:	7b7b      	ldrb	r3, [r7, #13]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d116      	bne.n	800e2da <LSM6DSV16X_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e2ac:	4b2f      	ldr	r3, [pc, #188]	@ (800e36c <LSM6DSV16X_0_Probe+0x174>)
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	4a2f      	ldr	r2, [pc, #188]	@ (800e370 <LSM6DSV16X_0_Probe+0x178>)
 800e2b2:	3303      	adds	r3, #3
 800e2b4:	492f      	ldr	r1, [pc, #188]	@ (800e374 <LSM6DSV16X_0_Probe+0x17c>)
 800e2b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800e2ba:	4b2a      	ldr	r3, [pc, #168]	@ (800e364 <LSM6DSV16X_0_Probe+0x16c>)
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a27      	ldr	r2, [pc, #156]	@ (800e360 <LSM6DSV16X_0_Probe+0x168>)
 800e2c2:	6852      	ldr	r2, [r2, #4]
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d003      	beq.n	800e2d6 <LSM6DSV16X_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e2ce:	f06f 0304 	mvn.w	r3, #4
 800e2d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2d4:	e001      	b.n	800e2da <LSM6DSV16X_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800e2da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d11e      	bne.n	800e31e <LSM6DSV16X_0_Probe+0x126>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d019      	beq.n	800e31e <LSM6DSV16X_0_Probe+0x126>
 800e2ea:	7b3b      	ldrb	r3, [r7, #12]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d116      	bne.n	800e31e <LSM6DSV16X_0_Probe+0x126>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800e36c <LSM6DSV16X_0_Probe+0x174>)
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	4a1e      	ldr	r2, [pc, #120]	@ (800e370 <LSM6DSV16X_0_Probe+0x178>)
 800e2f6:	3303      	adds	r3, #3
 800e2f8:	491f      	ldr	r1, [pc, #124]	@ (800e378 <LSM6DSV16X_0_Probe+0x180>)
 800e2fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800e2fe:	4b19      	ldr	r3, [pc, #100]	@ (800e364 <LSM6DSV16X_0_Probe+0x16c>)
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a16      	ldr	r2, [pc, #88]	@ (800e360 <LSM6DSV16X_0_Probe+0x168>)
 800e306:	6852      	ldr	r2, [r2, #4]
 800e308:	4610      	mov	r0, r2
 800e30a:	4798      	blx	r3
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d003      	beq.n	800e31a <LSM6DSV16X_0_Probe+0x122>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e312:	f06f 0304 	mvn.w	r3, #4
 800e316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e318:	e001      	b.n	800e31e <LSM6DSV16X_0_Probe+0x126>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e31a:	2300      	movs	r3, #0
 800e31c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800e31e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d107      	bne.n	800e334 <LSM6DSV16X_0_Probe+0x13c>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f003 0304 	and.w	r3, r3, #4
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e32e:	f06f 0304 	mvn.w	r3, #4
 800e332:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e336:	4618      	mov	r0, r3
 800e338:	3750      	adds	r7, #80	@ 0x50
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	0800529d 	.word	0x0800529d
 800e344:	08005301 	.word	0x08005301
 800e348:	080053b5 	.word	0x080053b5
 800e34c:	08005351 	.word	0x08005351
 800e350:	080054c1 	.word	0x080054c1
 800e354:	0800eb7d 	.word	0x0800eb7d
 800e358:	200015c4 	.word	0x200015c4
 800e35c:	20001580 	.word	0x20001580
 800e360:	20001530 	.word	0x20001530
 800e364:	20001570 	.word	0x20001570
 800e368:	200001d4 	.word	0x200001d4
 800e36c:	200002ac 	.word	0x200002ac
 800e370:	20001540 	.word	0x20001540
 800e374:	20000208 	.word	0x20000208
 800e378:	200001e4 	.word	0x200001e4

0800e37c <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b094      	sub	sp, #80	@ 0x50
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800e384:	2300      	movs	r3, #0
 800e386:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800e388:	2300      	movs	r3, #0
 800e38a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800e38c:	2333      	movs	r3, #51	@ 0x33
 800e38e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e392:	4b42      	ldr	r3, [pc, #264]	@ (800e49c <LIS2DUXS12_0_Probe+0x120>)
 800e394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e396:	4b42      	ldr	r3, [pc, #264]	@ (800e4a0 <LIS2DUXS12_0_Probe+0x124>)
 800e398:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e39a:	4b42      	ldr	r3, [pc, #264]	@ (800e4a4 <LIS2DUXS12_0_Probe+0x128>)
 800e39c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e39e:	4b42      	ldr	r3, [pc, #264]	@ (800e4a8 <LIS2DUXS12_0_Probe+0x12c>)
 800e3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e3a2:	4b42      	ldr	r3, [pc, #264]	@ (800e4ac <LIS2DUXS12_0_Probe+0x130>)
 800e3a4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e3a6:	4b42      	ldr	r3, [pc, #264]	@ (800e4b0 <LIS2DUXS12_0_Probe+0x134>)
 800e3a8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800e3aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4840      	ldr	r0, [pc, #256]	@ (800e4b4 <LIS2DUXS12_0_Probe+0x138>)
 800e3b2:	f7f7 f9af 	bl	8005714 <LIS2DUXS12_RegisterBusIO>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e3bc:	f06f 0306 	mvn.w	r3, #6
 800e3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3c2:	e065      	b.n	800e490 <LIS2DUXS12_0_Probe+0x114>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800e3c4:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	483a      	ldr	r0, [pc, #232]	@ (800e4b4 <LIS2DUXS12_0_Probe+0x138>)
 800e3cc:	f7f7 faf3 	bl	80059b6 <LIS2DUXS12_ReadID>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <LIS2DUXS12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e3d6:	f06f 0306 	mvn.w	r3, #6
 800e3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3dc:	e058      	b.n	800e490 <LIS2DUXS12_0_Probe+0x114>
  }
  else if (id != LIS2DUXS12_ID)
 800e3de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e3e2:	2b47      	cmp	r3, #71	@ 0x47
 800e3e4:	d003      	beq.n	800e3ee <LIS2DUXS12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e3e6:	f06f 0306 	mvn.w	r3, #6
 800e3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3ec:	e050      	b.n	800e490 <LIS2DUXS12_0_Probe+0x114>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800e3ee:	f107 030c 	add.w	r3, r7, #12
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	482f      	ldr	r0, [pc, #188]	@ (800e4b4 <LIS2DUXS12_0_Probe+0x138>)
 800e3f6:	f7f7 faf9 	bl	80059ec <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e3fa:	7b7b      	ldrb	r3, [r7, #13]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	7b3b      	ldrb	r3, [r7, #12]
 800e400:	005b      	lsls	r3, r3, #1
 800e402:	431a      	orrs	r2, r3
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4313      	orrs	r3, r2
 800e40a:	4a2b      	ldr	r2, [pc, #172]	@ (800e4b8 <LIS2DUXS12_0_Probe+0x13c>)
 800e40c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800e40e:	4b2b      	ldr	r3, [pc, #172]	@ (800e4bc <LIS2DUXS12_0_Probe+0x140>)
 800e410:	4a28      	ldr	r2, [pc, #160]	@ (800e4b4 <LIS2DUXS12_0_Probe+0x138>)
 800e412:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800e414:	4b2a      	ldr	r3, [pc, #168]	@ (800e4c0 <LIS2DUXS12_0_Probe+0x144>)
 800e416:	4a2b      	ldr	r2, [pc, #172]	@ (800e4c4 <LIS2DUXS12_0_Probe+0x148>)
 800e418:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800e41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10a      	bne.n	800e436 <LIS2DUXS12_0_Probe+0xba>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f003 0301 	and.w	r3, r3, #1
 800e426:	2b00      	cmp	r3, #0
 800e428:	d005      	beq.n	800e436 <LIS2DUXS12_0_Probe+0xba>
 800e42a:	7b7b      	ldrb	r3, [r7, #13]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d102      	bne.n	800e436 <LIS2DUXS12_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e430:	f06f 0304 	mvn.w	r3, #4
 800e434:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800e436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d11e      	bne.n	800e47a <LIS2DUXS12_0_Probe+0xfe>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f003 0302 	and.w	r3, r3, #2
 800e442:	2b00      	cmp	r3, #0
 800e444:	d019      	beq.n	800e47a <LIS2DUXS12_0_Probe+0xfe>
 800e446:	7b3b      	ldrb	r3, [r7, #12]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d116      	bne.n	800e47a <LIS2DUXS12_0_Probe+0xfe>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e44c:	4b1e      	ldr	r3, [pc, #120]	@ (800e4c8 <LIS2DUXS12_0_Probe+0x14c>)
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	4a1e      	ldr	r2, [pc, #120]	@ (800e4cc <LIS2DUXS12_0_Probe+0x150>)
 800e452:	3306      	adds	r3, #6
 800e454:	491e      	ldr	r1, [pc, #120]	@ (800e4d0 <LIS2DUXS12_0_Probe+0x154>)
 800e456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800e45a:	4b19      	ldr	r3, [pc, #100]	@ (800e4c0 <LIS2DUXS12_0_Probe+0x144>)
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a16      	ldr	r2, [pc, #88]	@ (800e4bc <LIS2DUXS12_0_Probe+0x140>)
 800e462:	6892      	ldr	r2, [r2, #8]
 800e464:	4610      	mov	r0, r2
 800e466:	4798      	blx	r3
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <LIS2DUXS12_0_Probe+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e46e:	f06f 0304 	mvn.w	r3, #4
 800e472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e474:	e001      	b.n	800e47a <LIS2DUXS12_0_Probe+0xfe>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e476:	2300      	movs	r3, #0
 800e478:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800e47a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d107      	bne.n	800e490 <LIS2DUXS12_0_Probe+0x114>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f003 0304 	and.w	r3, r3, #4
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <LIS2DUXS12_0_Probe+0x114>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e48a:	f06f 0304 	mvn.w	r3, #4
 800e48e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e492:	4618      	mov	r0, r3
 800e494:	3750      	adds	r7, #80	@ 0x50
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	0800529d 	.word	0x0800529d
 800e4a0:	08005301 	.word	0x08005301
 800e4a4:	080053b5 	.word	0x080053b5
 800e4a8:	08005351 	.word	0x08005351
 800e4ac:	080054c1 	.word	0x080054c1
 800e4b0:	0800eb7d 	.word	0x0800eb7d
 800e4b4:	200015fc 	.word	0x200015fc
 800e4b8:	20001580 	.word	0x20001580
 800e4bc:	20001530 	.word	0x20001530
 800e4c0:	20001570 	.word	0x20001570
 800e4c4:	200000dc 	.word	0x200000dc
 800e4c8:	200002ac 	.word	0x200002ac
 800e4cc:	20001540 	.word	0x20001540
 800e4d0:	200000ec 	.word	0x200000ec

0800e4d4 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b094      	sub	sp, #80	@ 0x50
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800e4e4:	23d5      	movs	r3, #213	@ 0xd5
 800e4e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e4ea:	4b4c      	ldr	r3, [pc, #304]	@ (800e61c <LSM6DSO16IS_0_Probe+0x148>)
 800e4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e4ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e620 <LSM6DSO16IS_0_Probe+0x14c>)
 800e4f0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e4f2:	4b4c      	ldr	r3, [pc, #304]	@ (800e624 <LSM6DSO16IS_0_Probe+0x150>)
 800e4f4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e4f6:	4b4c      	ldr	r3, [pc, #304]	@ (800e628 <LSM6DSO16IS_0_Probe+0x154>)
 800e4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e4fa:	4b4c      	ldr	r3, [pc, #304]	@ (800e62c <LSM6DSO16IS_0_Probe+0x158>)
 800e4fc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e4fe:	4b4c      	ldr	r3, [pc, #304]	@ (800e630 <LSM6DSO16IS_0_Probe+0x15c>)
 800e500:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800e502:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e506:	4619      	mov	r1, r3
 800e508:	484a      	ldr	r0, [pc, #296]	@ (800e634 <LSM6DSO16IS_0_Probe+0x160>)
 800e50a:	f7fa fc43 	bl	8008d94 <LSM6DSO16IS_RegisterBusIO>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d003      	beq.n	800e51c <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e514:	f06f 0306 	mvn.w	r3, #6
 800e518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e51a:	e079      	b.n	800e610 <LSM6DSO16IS_0_Probe+0x13c>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800e51c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e520:	4619      	mov	r1, r3
 800e522:	4844      	ldr	r0, [pc, #272]	@ (800e634 <LSM6DSO16IS_0_Probe+0x160>)
 800e524:	f7fa fd34 	bl	8008f90 <LSM6DSO16IS_ReadID>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d003      	beq.n	800e536 <LSM6DSO16IS_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e52e:	f06f 0306 	mvn.w	r3, #6
 800e532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e534:	e06c      	b.n	800e610 <LSM6DSO16IS_0_Probe+0x13c>
  }
  else if (id != LSM6DSO16IS_ID)
 800e536:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e53a:	2b22      	cmp	r3, #34	@ 0x22
 800e53c:	d003      	beq.n	800e546 <LSM6DSO16IS_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e53e:	f06f 0306 	mvn.w	r3, #6
 800e542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e544:	e064      	b.n	800e610 <LSM6DSO16IS_0_Probe+0x13c>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800e546:	f107 030c 	add.w	r3, r7, #12
 800e54a:	4619      	mov	r1, r3
 800e54c:	4839      	ldr	r0, [pc, #228]	@ (800e634 <LSM6DSO16IS_0_Probe+0x160>)
 800e54e:	f7fa fd37 	bl	8008fc0 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e552:	7b7b      	ldrb	r3, [r7, #13]
 800e554:	461a      	mov	r2, r3
 800e556:	7b3b      	ldrb	r3, [r7, #12]
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	431a      	orrs	r2, r3
 800e55c:	7bbb      	ldrb	r3, [r7, #14]
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4313      	orrs	r3, r2
 800e562:	4a35      	ldr	r2, [pc, #212]	@ (800e638 <LSM6DSO16IS_0_Probe+0x164>)
 800e564:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800e566:	4b35      	ldr	r3, [pc, #212]	@ (800e63c <LSM6DSO16IS_0_Probe+0x168>)
 800e568:	4a32      	ldr	r2, [pc, #200]	@ (800e634 <LSM6DSO16IS_0_Probe+0x160>)
 800e56a:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800e56c:	4b34      	ldr	r3, [pc, #208]	@ (800e640 <LSM6DSO16IS_0_Probe+0x16c>)
 800e56e:	4a35      	ldr	r2, [pc, #212]	@ (800e644 <LSM6DSO16IS_0_Probe+0x170>)
 800e570:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800e572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e574:	2b00      	cmp	r3, #0
 800e576:	d11e      	bne.n	800e5b6 <LSM6DSO16IS_0_Probe+0xe2>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d019      	beq.n	800e5b6 <LSM6DSO16IS_0_Probe+0xe2>
 800e582:	7b7b      	ldrb	r3, [r7, #13]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d116      	bne.n	800e5b6 <LSM6DSO16IS_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e588:	4b2f      	ldr	r3, [pc, #188]	@ (800e648 <LSM6DSO16IS_0_Probe+0x174>)
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	4a2f      	ldr	r2, [pc, #188]	@ (800e64c <LSM6DSO16IS_0_Probe+0x178>)
 800e58e:	3309      	adds	r3, #9
 800e590:	492f      	ldr	r1, [pc, #188]	@ (800e650 <LSM6DSO16IS_0_Probe+0x17c>)
 800e592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800e596:	4b2a      	ldr	r3, [pc, #168]	@ (800e640 <LSM6DSO16IS_0_Probe+0x16c>)
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a27      	ldr	r2, [pc, #156]	@ (800e63c <LSM6DSO16IS_0_Probe+0x168>)
 800e59e:	68d2      	ldr	r2, [r2, #12]
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	4798      	blx	r3
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <LSM6DSO16IS_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e5aa:	f06f 0304 	mvn.w	r3, #4
 800e5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5b0:	e001      	b.n	800e5b6 <LSM6DSO16IS_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800e5b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d11e      	bne.n	800e5fa <LSM6DSO16IS_0_Probe+0x126>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f003 0302 	and.w	r3, r3, #2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d019      	beq.n	800e5fa <LSM6DSO16IS_0_Probe+0x126>
 800e5c6:	7b3b      	ldrb	r3, [r7, #12]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d116      	bne.n	800e5fa <LSM6DSO16IS_0_Probe+0x126>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e5cc:	4b1e      	ldr	r3, [pc, #120]	@ (800e648 <LSM6DSO16IS_0_Probe+0x174>)
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	4a1e      	ldr	r2, [pc, #120]	@ (800e64c <LSM6DSO16IS_0_Probe+0x178>)
 800e5d2:	3309      	adds	r3, #9
 800e5d4:	491f      	ldr	r1, [pc, #124]	@ (800e654 <LSM6DSO16IS_0_Probe+0x180>)
 800e5d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800e5da:	4b19      	ldr	r3, [pc, #100]	@ (800e640 <LSM6DSO16IS_0_Probe+0x16c>)
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a16      	ldr	r2, [pc, #88]	@ (800e63c <LSM6DSO16IS_0_Probe+0x168>)
 800e5e2:	68d2      	ldr	r2, [r2, #12]
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	4798      	blx	r3
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <LSM6DSO16IS_0_Probe+0x122>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e5ee:	f06f 0304 	mvn.w	r3, #4
 800e5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5f4:	e001      	b.n	800e5fa <LSM6DSO16IS_0_Probe+0x126>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800e5fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d107      	bne.n	800e610 <LSM6DSO16IS_0_Probe+0x13c>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f003 0304 	and.w	r3, r3, #4
 800e606:	2b00      	cmp	r3, #0
 800e608:	d002      	beq.n	800e610 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e60a:	f06f 0304 	mvn.w	r3, #4
 800e60e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e612:	4618      	mov	r0, r3
 800e614:	3750      	adds	r7, #80	@ 0x50
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	0800529d 	.word	0x0800529d
 800e620:	08005301 	.word	0x08005301
 800e624:	080053b5 	.word	0x080053b5
 800e628:	08005351 	.word	0x08005351
 800e62c:	080054c1 	.word	0x080054c1
 800e630:	0800eb7d 	.word	0x0800eb7d
 800e634:	20001638 	.word	0x20001638
 800e638:	20001580 	.word	0x20001580
 800e63c:	20001530 	.word	0x20001530
 800e640:	20001570 	.word	0x20001570
 800e644:	2000017c 	.word	0x2000017c
 800e648:	200002ac 	.word	0x200002ac
 800e64c:	20001540 	.word	0x20001540
 800e650:	200001b0 	.word	0x200001b0
 800e654:	2000018c 	.word	0x2000018c

0800e658 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	4a04      	ldr	r2, [pc, #16]	@ (800e678 <BSP_LED_Init+0x20>)
 800e666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e66a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	0802687c 	.word	0x0802687c

0800e67c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800e686:	79fb      	ldrb	r3, [r7, #7]
 800e688:	4a06      	ldr	r2, [pc, #24]	@ (800e6a4 <BSP_LED_On+0x28>)
 800e68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e68e:	2120      	movs	r1, #32
 800e690:	2201      	movs	r2, #1
 800e692:	4618      	mov	r0, r3
 800e694:	f001 fad8 	bl	800fc48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200002cc 	.word	0x200002cc

0800e6a8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	4a06      	ldr	r2, [pc, #24]	@ (800e6d0 <BSP_LED_Off+0x28>)
 800e6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6ba:	2120      	movs	r1, #32
 800e6bc:	2200      	movs	r2, #0
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f001 fac2 	bl	800fc48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	200002cc 	.word	0x200002cc

0800e6d4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60bb      	str	r3, [r7, #8]
 800e6de:	4b1c      	ldr	r3, [pc, #112]	@ (800e750 <LED_USER_GPIO_Init+0x7c>)
 800e6e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6e2:	4a1b      	ldr	r2, [pc, #108]	@ (800e750 <LED_USER_GPIO_Init+0x7c>)
 800e6e4:	f043 0301 	orr.w	r3, r3, #1
 800e6e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e6ea:	4b19      	ldr	r3, [pc, #100]	@ (800e750 <LED_USER_GPIO_Init+0x7c>)
 800e6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	60bb      	str	r3, [r7, #8]
 800e6f4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6f6:	f107 030c 	add.w	r3, r7, #12
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	605a      	str	r2, [r3, #4]
 800e700:	609a      	str	r2, [r3, #8]
 800e702:	60da      	str	r2, [r3, #12]
 800e704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e706:	2300      	movs	r3, #0
 800e708:	607b      	str	r3, [r7, #4]
 800e70a:	4b11      	ldr	r3, [pc, #68]	@ (800e750 <LED_USER_GPIO_Init+0x7c>)
 800e70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e70e:	4a10      	ldr	r2, [pc, #64]	@ (800e750 <LED_USER_GPIO_Init+0x7c>)
 800e710:	f043 0301 	orr.w	r3, r3, #1
 800e714:	6313      	str	r3, [r2, #48]	@ 0x30
 800e716:	4b0e      	ldr	r3, [pc, #56]	@ (800e750 <LED_USER_GPIO_Init+0x7c>)
 800e718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e71a:	f003 0301 	and.w	r3, r3, #1
 800e71e:	607b      	str	r3, [r7, #4]
 800e720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800e722:	2200      	movs	r2, #0
 800e724:	2120      	movs	r1, #32
 800e726:	480b      	ldr	r0, [pc, #44]	@ (800e754 <LED_USER_GPIO_Init+0x80>)
 800e728:	f001 fa8e 	bl	800fc48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800e72c:	2320      	movs	r3, #32
 800e72e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e730:	2301      	movs	r3, #1
 800e732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e734:	2300      	movs	r3, #0
 800e736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e738:	2300      	movs	r3, #0
 800e73a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800e73c:	f107 030c 	add.w	r3, r7, #12
 800e740:	4619      	mov	r1, r3
 800e742:	4804      	ldr	r0, [pc, #16]	@ (800e754 <LED_USER_GPIO_Init+0x80>)
 800e744:	f001 f800 	bl	800f748 <HAL_GPIO_Init>

}
 800e748:	bf00      	nop
 800e74a:	3720      	adds	r7, #32
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	40023800 	.word	0x40023800
 800e754:	40020000 	.word	0x40020000

0800e758 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	4603      	mov	r3, r0
 800e760:	460a      	mov	r2, r1
 800e762:	71fb      	strb	r3, [r7, #7]
 800e764:	4613      	mov	r3, r2
 800e766:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800e768:	2300      	movs	r3, #0
 800e76a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	4a1f      	ldr	r2, [pc, #124]	@ (800e7ec <BSP_PB_Init+0x94>)
 800e770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e774:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800e776:	79bb      	ldrb	r3, [r7, #6]
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d132      	bne.n	800e7e2 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	4a1b      	ldr	r2, [pc, #108]	@ (800e7f0 <BSP_PB_Init+0x98>)
 800e782:	441a      	add	r2, r3
 800e784:	79fb      	ldrb	r3, [r7, #7]
 800e786:	491b      	ldr	r1, [pc, #108]	@ (800e7f4 <BSP_PB_Init+0x9c>)
 800e788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e78c:	4619      	mov	r1, r3
 800e78e:	4610      	mov	r0, r2
 800e790:	f000 ffa2 	bl	800f6d8 <HAL_EXTI_GetHandle>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e79a:	f06f 0303 	mvn.w	r3, #3
 800e79e:	60fb      	str	r3, [r7, #12]
 800e7a0:	e01f      	b.n	800e7e2 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	4a12      	ldr	r2, [pc, #72]	@ (800e7f0 <BSP_PB_Init+0x98>)
 800e7a8:	1898      	adds	r0, r3, r2
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	4a12      	ldr	r2, [pc, #72]	@ (800e7f8 <BSP_PB_Init+0xa0>)
 800e7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	f000 ff75 	bl	800f6a4 <HAL_EXTI_RegisterCallback>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d003      	beq.n	800e7c8 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e7c0:	f06f 0303 	mvn.w	r3, #3
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e00c      	b.n	800e7e2 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800e7c8:	2028      	movs	r0, #40	@ 0x28
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	4a0b      	ldr	r2, [pc, #44]	@ (800e7fc <BSP_PB_Init+0xa4>)
 800e7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	f000 faf4 	bl	800edc2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800e7da:	2328      	movs	r3, #40	@ 0x28
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 fb0c 	bl	800edfa <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	08026880 	.word	0x08026880
 800e7f0:	200002d4 	.word	0x200002d4
 800e7f4:	08026884 	.word	0x08026884
 800e7f8:	08026888 	.word	0x08026888
 800e7fc:	0802688c 	.word	0x0802688c

0800e800 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800e80a:	79fb      	ldrb	r3, [r7, #7]
 800e80c:	4a09      	ldr	r2, [pc, #36]	@ (800e834 <BSP_PB_GetState+0x34>)
 800e80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e812:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e816:	4611      	mov	r1, r2
 800e818:	4618      	mov	r0, r3
 800e81a:	f001 f9fd 	bl	800fc18 <HAL_GPIO_ReadPin>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	bf0c      	ite	eq
 800e824:	2301      	moveq	r3, #1
 800e826:	2300      	movne	r3, #0
 800e828:	b2db      	uxtb	r3, r3
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	200002d0 	.word	0x200002d0

0800e838 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800e83c:	2000      	movs	r0, #0
 800e83e:	f7f2 fca3 	bl	8001188 <BSP_PB_Callback>
}
 800e842:	bf00      	nop
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	b088      	sub	sp, #32
 800e84c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e84e:	2300      	movs	r3, #0
 800e850:	60bb      	str	r3, [r7, #8]
 800e852:	4b1a      	ldr	r3, [pc, #104]	@ (800e8bc <BUTTON_USER_GPIO_Init+0x74>)
 800e854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e856:	4a19      	ldr	r2, [pc, #100]	@ (800e8bc <BUTTON_USER_GPIO_Init+0x74>)
 800e858:	f043 0304 	orr.w	r3, r3, #4
 800e85c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e85e:	4b17      	ldr	r3, [pc, #92]	@ (800e8bc <BUTTON_USER_GPIO_Init+0x74>)
 800e860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e862:	f003 0304 	and.w	r3, r3, #4
 800e866:	60bb      	str	r3, [r7, #8]
 800e868:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e86a:	f107 030c 	add.w	r3, r7, #12
 800e86e:	2200      	movs	r2, #0
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	605a      	str	r2, [r3, #4]
 800e874:	609a      	str	r2, [r3, #8]
 800e876:	60da      	str	r2, [r3, #12]
 800e878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e87a:	2300      	movs	r3, #0
 800e87c:	607b      	str	r3, [r7, #4]
 800e87e:	4b0f      	ldr	r3, [pc, #60]	@ (800e8bc <BUTTON_USER_GPIO_Init+0x74>)
 800e880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e882:	4a0e      	ldr	r2, [pc, #56]	@ (800e8bc <BUTTON_USER_GPIO_Init+0x74>)
 800e884:	f043 0304 	orr.w	r3, r3, #4
 800e888:	6313      	str	r3, [r2, #48]	@ 0x30
 800e88a:	4b0c      	ldr	r3, [pc, #48]	@ (800e8bc <BUTTON_USER_GPIO_Init+0x74>)
 800e88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e88e:	f003 0304 	and.w	r3, r3, #4
 800e892:	607b      	str	r3, [r7, #4]
 800e894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800e896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e89a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800e89c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800e8a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800e8a6:	f107 030c 	add.w	r3, r7, #12
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4804      	ldr	r0, [pc, #16]	@ (800e8c0 <BUTTON_USER_GPIO_Init+0x78>)
 800e8ae:	f000 ff4b 	bl	800f748 <HAL_GPIO_Init>

}
 800e8b2:	bf00      	nop
 800e8b4:	3720      	adds	r7, #32
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	40023800 	.word	0x40023800
 800e8c0:	40020800 	.word	0x40020800

0800e8c4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d903      	bls.n	800e8e0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e8d8:	f06f 0301 	mvn.w	r3, #1
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e025      	b.n	800e92c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	79fa      	ldrb	r2, [r7, #7]
 800e8e4:	4914      	ldr	r1, [pc, #80]	@ (800e938 <BSP_COM_Init+0x74>)
 800e8e6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e8ea:	4814      	ldr	r0, [pc, #80]	@ (800e93c <BSP_COM_Init+0x78>)
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	4413      	add	r3, r2
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	4403      	add	r3, r0
 800e8f6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800e8f8:	79fa      	ldrb	r2, [r7, #7]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	00db      	lsls	r3, r3, #3
 800e8fe:	4413      	add	r3, r2
 800e900:	00db      	lsls	r3, r3, #3
 800e902:	4a0e      	ldr	r2, [pc, #56]	@ (800e93c <BSP_COM_Init+0x78>)
 800e904:	4413      	add	r3, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f000 f848 	bl	800e99c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800e90c:	79fa      	ldrb	r2, [r7, #7]
 800e90e:	4613      	mov	r3, r2
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	4413      	add	r3, r2
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	4a09      	ldr	r2, [pc, #36]	@ (800e93c <BSP_COM_Init+0x78>)
 800e918:	4413      	add	r3, r2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 f810 	bl	800e940 <MX_USART2_UART_Init>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d002      	beq.n	800e92c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e926:	f06f 0303 	mvn.w	r3, #3
 800e92a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e92c:	68fb      	ldr	r3, [r7, #12]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	200002dc 	.word	0x200002dc
 800e93c:	20001670 	.word	0x20001670

0800e940 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a12      	ldr	r2, [pc, #72]	@ (800e998 <MX_USART2_UART_Init+0x58>)
 800e950:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 9600;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800e958:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	220c      	movs	r2, #12
 800e970:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f006 fbe0 	bl	8015144 <HAL_UART_Init>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	40004400 	.word	0x40004400

0800e99c <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08a      	sub	sp, #40	@ 0x28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	613b      	str	r3, [r7, #16]
 800e9a8:	4b37      	ldr	r3, [pc, #220]	@ (800ea88 <USART2_MspInit+0xec>)
 800e9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ac:	4a36      	ldr	r2, [pc, #216]	@ (800ea88 <USART2_MspInit+0xec>)
 800e9ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e9b2:	6413      	str	r3, [r2, #64]	@ 0x40
 800e9b4:	4b34      	ldr	r3, [pc, #208]	@ (800ea88 <USART2_MspInit+0xec>)
 800e9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9bc:	613b      	str	r3, [r7, #16]
 800e9be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	4b30      	ldr	r3, [pc, #192]	@ (800ea88 <USART2_MspInit+0xec>)
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9c8:	4a2f      	ldr	r2, [pc, #188]	@ (800ea88 <USART2_MspInit+0xec>)
 800e9ca:	f043 0301 	orr.w	r3, r3, #1
 800e9ce:	6313      	str	r3, [r2, #48]	@ 0x30
 800e9d0:	4b2d      	ldr	r3, [pc, #180]	@ (800ea88 <USART2_MspInit+0xec>)
 800e9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9d4:	f003 0301 	and.w	r3, r3, #1
 800e9d8:	60fb      	str	r3, [r7, #12]
 800e9da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800e9dc:	2304      	movs	r3, #4
 800e9de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9e8:	2303      	movs	r3, #3
 800e9ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800e9ec:	2307      	movs	r3, #7
 800e9ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800e9f0:	f107 0314 	add.w	r3, r7, #20
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4825      	ldr	r0, [pc, #148]	@ (800ea8c <USART2_MspInit+0xf0>)
 800e9f8:	f000 fea6 	bl	800f748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800e9fc:	2308      	movs	r3, #8
 800e9fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea00:	2302      	movs	r3, #2
 800ea02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea04:	2300      	movs	r3, #0
 800ea06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800ea0c:	2307      	movs	r3, #7
 800ea0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800ea10:	f107 0314 	add.w	r3, r7, #20
 800ea14:	4619      	mov	r1, r3
 800ea16:	481d      	ldr	r0, [pc, #116]	@ (800ea8c <USART2_MspInit+0xf0>)
 800ea18:	f000 fe96 	bl	800f748 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Stream5;
 800ea1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea1e:	4a1d      	ldr	r2, [pc, #116]	@ (800ea94 <USART2_MspInit+0xf8>)
 800ea20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800ea22:	4b1b      	ldr	r3, [pc, #108]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ea28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ea2a:	4b19      	ldr	r3, [pc, #100]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ea30:	4b17      	ldr	r3, [pc, #92]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ea36:	4b16      	ldr	r3, [pc, #88]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ea3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ea3e:	4b14      	ldr	r3, [pc, #80]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ea44:	4b12      	ldr	r3, [pc, #72]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800ea4a:	4b11      	ldr	r3, [pc, #68]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ea52:	4b0f      	ldr	r3, [pc, #60]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ea58:	4b0d      	ldr	r3, [pc, #52]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_DMA_Init(&hdma_usart2_rx);
 800ea5e:	480c      	ldr	r0, [pc, #48]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea60:	f000 fa10 	bl	800ee84 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a0a      	ldr	r2, [pc, #40]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea68:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ea6a:	4a09      	ldr	r2, [pc, #36]	@ (800ea90 <USART2_MspInit+0xf4>)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ea70:	2200      	movs	r2, #0
 800ea72:	2100      	movs	r1, #0
 800ea74:	2026      	movs	r0, #38	@ 0x26
 800ea76:	f000 f9a4 	bl	800edc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ea7a:	2026      	movs	r0, #38	@ 0x26
 800ea7c:	f000 f9bd 	bl	800edfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800ea80:	bf00      	nop
 800ea82:	3728      	adds	r7, #40	@ 0x28
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	40023800 	.word	0x40023800
 800ea8c:	40020000 	.word	0x40020000
 800ea90:	200016b8 	.word	0x200016b8
 800ea94:	40026088 	.word	0x40026088

0800ea98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ea9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ead8 <HAL_Init+0x40>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a0d      	ldr	r2, [pc, #52]	@ (800ead8 <HAL_Init+0x40>)
 800eaa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eaa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800eaa8:	4b0b      	ldr	r3, [pc, #44]	@ (800ead8 <HAL_Init+0x40>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a0a      	ldr	r2, [pc, #40]	@ (800ead8 <HAL_Init+0x40>)
 800eaae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800eab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eab4:	4b08      	ldr	r3, [pc, #32]	@ (800ead8 <HAL_Init+0x40>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a07      	ldr	r2, [pc, #28]	@ (800ead8 <HAL_Init+0x40>)
 800eaba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eabe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800eac0:	2003      	movs	r0, #3
 800eac2:	f000 f973 	bl	800edac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800eac6:	2000      	movs	r0, #0
 800eac8:	f000 f808 	bl	800eadc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800eacc:	f7f6 fadc 	bl	8005088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	40023c00 	.word	0x40023c00

0800eadc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800eae4:	4b12      	ldr	r3, [pc, #72]	@ (800eb30 <HAL_InitTick+0x54>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	4b12      	ldr	r3, [pc, #72]	@ (800eb34 <HAL_InitTick+0x58>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	4619      	mov	r1, r3
 800eaee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eaf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800eaf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 f999 	bl	800ee32 <HAL_SYSTICK_Config>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	e00e      	b.n	800eb28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b0f      	cmp	r3, #15
 800eb0e:	d80a      	bhi.n	800eb26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800eb10:	2200      	movs	r2, #0
 800eb12:	6879      	ldr	r1, [r7, #4]
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb18:	f000 f953 	bl	800edc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800eb1c:	4a06      	ldr	r2, [pc, #24]	@ (800eb38 <HAL_InitTick+0x5c>)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e000      	b.n	800eb28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800eb26:	2301      	movs	r3, #1
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	200000d8 	.word	0x200000d8
 800eb34:	200002e4 	.word	0x200002e4
 800eb38:	200002e0 	.word	0x200002e0

0800eb3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800eb40:	4b06      	ldr	r3, [pc, #24]	@ (800eb5c <HAL_IncTick+0x20>)
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	461a      	mov	r2, r3
 800eb46:	4b06      	ldr	r3, [pc, #24]	@ (800eb60 <HAL_IncTick+0x24>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	4a04      	ldr	r2, [pc, #16]	@ (800eb60 <HAL_IncTick+0x24>)
 800eb4e:	6013      	str	r3, [r2, #0]
}
 800eb50:	bf00      	nop
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	200002e4 	.word	0x200002e4
 800eb60:	20001718 	.word	0x20001718

0800eb64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eb64:	b480      	push	{r7}
 800eb66:	af00      	add	r7, sp, #0
  return uwTick;
 800eb68:	4b03      	ldr	r3, [pc, #12]	@ (800eb78 <HAL_GetTick+0x14>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	20001718 	.word	0x20001718

0800eb7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800eb84:	f7ff ffee 	bl	800eb64 <HAL_GetTick>
 800eb88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb94:	d005      	beq.n	800eba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800eb96:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc0 <HAL_Delay+0x44>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800eba2:	bf00      	nop
 800eba4:	f7ff ffde 	bl	800eb64 <HAL_GetTick>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d8f7      	bhi.n	800eba4 <HAL_Delay+0x28>
  {
  }
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	3710      	adds	r7, #16
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	200002e4 	.word	0x200002e4

0800ebc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ebd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ec08 <__NVIC_SetPriorityGrouping+0x44>)
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ebe0:	4013      	ands	r3, r2
 800ebe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ebec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ebf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ebf6:	4a04      	ldr	r2, [pc, #16]	@ (800ec08 <__NVIC_SetPriorityGrouping+0x44>)
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	60d3      	str	r3, [r2, #12]
}
 800ebfc:	bf00      	nop
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	e000ed00 	.word	0xe000ed00

0800ec0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ec10:	4b04      	ldr	r3, [pc, #16]	@ (800ec24 <__NVIC_GetPriorityGrouping+0x18>)
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	0a1b      	lsrs	r3, r3, #8
 800ec16:	f003 0307 	and.w	r3, r3, #7
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr
 800ec24:	e000ed00 	.word	0xe000ed00

0800ec28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ec32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	db0b      	blt.n	800ec52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	f003 021f 	and.w	r2, r3, #31
 800ec40:	4907      	ldr	r1, [pc, #28]	@ (800ec60 <__NVIC_EnableIRQ+0x38>)
 800ec42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec46:	095b      	lsrs	r3, r3, #5
 800ec48:	2001      	movs	r0, #1
 800ec4a:	fa00 f202 	lsl.w	r2, r0, r2
 800ec4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ec52:	bf00      	nop
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	e000e100 	.word	0xe000e100

0800ec64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ec6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	db12      	blt.n	800ec9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ec76:	79fb      	ldrb	r3, [r7, #7]
 800ec78:	f003 021f 	and.w	r2, r3, #31
 800ec7c:	490a      	ldr	r1, [pc, #40]	@ (800eca8 <__NVIC_DisableIRQ+0x44>)
 800ec7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec82:	095b      	lsrs	r3, r3, #5
 800ec84:	2001      	movs	r0, #1
 800ec86:	fa00 f202 	lsl.w	r2, r0, r2
 800ec8a:	3320      	adds	r3, #32
 800ec8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ec90:	f3bf 8f4f 	dsb	sy
}
 800ec94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ec96:	f3bf 8f6f 	isb	sy
}
 800ec9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr
 800eca8:	e000e100 	.word	0xe000e100

0800ecac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	6039      	str	r1, [r7, #0]
 800ecb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ecb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	db0a      	blt.n	800ecd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	490c      	ldr	r1, [pc, #48]	@ (800ecf8 <__NVIC_SetPriority+0x4c>)
 800ecc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecca:	0112      	lsls	r2, r2, #4
 800eccc:	b2d2      	uxtb	r2, r2
 800ecce:	440b      	add	r3, r1
 800ecd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ecd4:	e00a      	b.n	800ecec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	4908      	ldr	r1, [pc, #32]	@ (800ecfc <__NVIC_SetPriority+0x50>)
 800ecdc:	79fb      	ldrb	r3, [r7, #7]
 800ecde:	f003 030f 	and.w	r3, r3, #15
 800ece2:	3b04      	subs	r3, #4
 800ece4:	0112      	lsls	r2, r2, #4
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	440b      	add	r3, r1
 800ecea:	761a      	strb	r2, [r3, #24]
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	e000e100 	.word	0xe000e100
 800ecfc:	e000ed00 	.word	0xe000ed00

0800ed00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b089      	sub	sp, #36	@ 0x24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f003 0307 	and.w	r3, r3, #7
 800ed12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	f1c3 0307 	rsb	r3, r3, #7
 800ed1a:	2b04      	cmp	r3, #4
 800ed1c:	bf28      	it	cs
 800ed1e:	2304      	movcs	r3, #4
 800ed20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	3304      	adds	r3, #4
 800ed26:	2b06      	cmp	r3, #6
 800ed28:	d902      	bls.n	800ed30 <NVIC_EncodePriority+0x30>
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	3b03      	subs	r3, #3
 800ed2e:	e000      	b.n	800ed32 <NVIC_EncodePriority+0x32>
 800ed30:	2300      	movs	r3, #0
 800ed32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ed34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed3e:	43da      	mvns	r2, r3
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	401a      	ands	r2, r3
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ed48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed52:	43d9      	mvns	r1, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ed58:	4313      	orrs	r3, r2
         );
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3724      	adds	r7, #36	@ 0x24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
	...

0800ed68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3b01      	subs	r3, #1
 800ed74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed78:	d301      	bcc.n	800ed7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e00f      	b.n	800ed9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ed7e:	4a0a      	ldr	r2, [pc, #40]	@ (800eda8 <SysTick_Config+0x40>)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	3b01      	subs	r3, #1
 800ed84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ed86:	210f      	movs	r1, #15
 800ed88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed8c:	f7ff ff8e 	bl	800ecac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ed90:	4b05      	ldr	r3, [pc, #20]	@ (800eda8 <SysTick_Config+0x40>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ed96:	4b04      	ldr	r3, [pc, #16]	@ (800eda8 <SysTick_Config+0x40>)
 800ed98:	2207      	movs	r2, #7
 800ed9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	e000e010 	.word	0xe000e010

0800edac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f7ff ff05 	bl	800ebc4 <__NVIC_SetPriorityGrouping>
}
 800edba:	bf00      	nop
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b086      	sub	sp, #24
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	4603      	mov	r3, r0
 800edca:	60b9      	str	r1, [r7, #8]
 800edcc:	607a      	str	r2, [r7, #4]
 800edce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800edd0:	2300      	movs	r3, #0
 800edd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800edd4:	f7ff ff1a 	bl	800ec0c <__NVIC_GetPriorityGrouping>
 800edd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	68b9      	ldr	r1, [r7, #8]
 800edde:	6978      	ldr	r0, [r7, #20]
 800ede0:	f7ff ff8e 	bl	800ed00 <NVIC_EncodePriority>
 800ede4:	4602      	mov	r2, r0
 800ede6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edea:	4611      	mov	r1, r2
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff ff5d 	bl	800ecac <__NVIC_SetPriority>
}
 800edf2:	bf00      	nop
 800edf4:	3718      	adds	r7, #24
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	4603      	mov	r3, r0
 800ee02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ee04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7ff ff0d 	bl	800ec28 <__NVIC_EnableIRQ>
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b082      	sub	sp, #8
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ee20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7ff ff1d 	bl	800ec64 <__NVIC_DisableIRQ>
}
 800ee2a:	bf00      	nop
 800ee2c:	3708      	adds	r7, #8
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff ff94 	bl	800ed68 <SysTick_Config>
 800ee40:	4603      	mov	r3, r0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b082      	sub	sp, #8
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d101      	bne.n	800ee5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	e00e      	b.n	800ee7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	795b      	ldrb	r3, [r3, #5]
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d105      	bne.n	800ee72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7f6 f933 	bl	80050d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2201      	movs	r2, #1
 800ee76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
	...

0800ee84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ee90:	f7ff fe68 	bl	800eb64 <HAL_GetTick>
 800ee94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d101      	bne.n	800eea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e099      	b.n	800efd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f022 0201 	bic.w	r2, r2, #1
 800eebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eec0:	e00f      	b.n	800eee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800eec2:	f7ff fe4f 	bl	800eb64 <HAL_GetTick>
 800eec6:	4602      	mov	r2, r0
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	2b05      	cmp	r3, #5
 800eece:	d908      	bls.n	800eee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2220      	movs	r2, #32
 800eed4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2203      	movs	r2, #3
 800eeda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800eede:	2303      	movs	r3, #3
 800eee0:	e078      	b.n	800efd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f003 0301 	and.w	r3, r3, #1
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1e8      	bne.n	800eec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	4b38      	ldr	r3, [pc, #224]	@ (800efdc <HAL_DMA_Init+0x158>)
 800eefc:	4013      	ands	r3, r2
 800eefe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685a      	ldr	r2, [r3, #4]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ef0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	699b      	ldr	r3, [r3, #24]
 800ef20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6a1b      	ldr	r3, [r3, #32]
 800ef2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef38:	2b04      	cmp	r3, #4
 800ef3a:	d107      	bne.n	800ef4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef44:	4313      	orrs	r3, r2
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	f023 0307 	bic.w	r3, r3, #7
 800ef62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef72:	2b04      	cmp	r3, #4
 800ef74:	d117      	bne.n	800efa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef7a:	697a      	ldr	r2, [r7, #20]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00e      	beq.n	800efa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fb0f 	bl	800f5ac <DMA_CheckFifoParam>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d008      	beq.n	800efa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2240      	movs	r2, #64	@ 0x40
 800ef98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800efa2:	2301      	movs	r3, #1
 800efa4:	e016      	b.n	800efd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	697a      	ldr	r2, [r7, #20]
 800efac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 fac6 	bl	800f540 <DMA_CalcBaseAndBitshift>
 800efb4:	4603      	mov	r3, r0
 800efb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efbc:	223f      	movs	r2, #63	@ 0x3f
 800efbe:	409a      	lsls	r2, r3
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3718      	adds	r7, #24
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	f010803f 	.word	0xf010803f

0800efe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b086      	sub	sp, #24
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800effe:	2b01      	cmp	r3, #1
 800f000:	d101      	bne.n	800f006 <HAL_DMA_Start_IT+0x26>
 800f002:	2302      	movs	r3, #2
 800f004:	e040      	b.n	800f088 <HAL_DMA_Start_IT+0xa8>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b01      	cmp	r3, #1
 800f018:	d12f      	bne.n	800f07a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2202      	movs	r2, #2
 800f01e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2200      	movs	r2, #0
 800f026:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	68b9      	ldr	r1, [r7, #8]
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f000 fa58 	bl	800f4e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f038:	223f      	movs	r2, #63	@ 0x3f
 800f03a:	409a      	lsls	r2, r3
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f042 0216 	orr.w	r2, r2, #22
 800f04e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f054:	2b00      	cmp	r3, #0
 800f056:	d007      	beq.n	800f068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f042 0208 	orr.w	r2, r2, #8
 800f066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f042 0201 	orr.w	r2, r2, #1
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	e005      	b.n	800f086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f082:	2302      	movs	r3, #2
 800f084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f086:	7dfb      	ldrb	r3, [r7, #23]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f09c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f09e:	f7ff fd61 	bl	800eb64 <HAL_GetTick>
 800f0a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d008      	beq.n	800f0c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2280      	movs	r2, #128	@ 0x80
 800f0b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e052      	b.n	800f168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f022 0216 	bic.w	r2, r2, #22
 800f0d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	695a      	ldr	r2, [r3, #20]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f0e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d103      	bne.n	800f0f2 <HAL_DMA_Abort+0x62>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d007      	beq.n	800f102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f022 0208 	bic.w	r2, r2, #8
 800f100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f022 0201 	bic.w	r2, r2, #1
 800f110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f112:	e013      	b.n	800f13c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f114:	f7ff fd26 	bl	800eb64 <HAL_GetTick>
 800f118:	4602      	mov	r2, r0
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	2b05      	cmp	r3, #5
 800f120:	d90c      	bls.n	800f13c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2220      	movs	r2, #32
 800f126:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2203      	movs	r2, #3
 800f12c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800f138:	2303      	movs	r3, #3
 800f13a:	e015      	b.n	800f168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f003 0301 	and.w	r3, r3, #1
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1e4      	bne.n	800f114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f14e:	223f      	movs	r2, #63	@ 0x3f
 800f150:	409a      	lsls	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b02      	cmp	r3, #2
 800f182:	d004      	beq.n	800f18e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2280      	movs	r2, #128	@ 0x80
 800f188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	e00c      	b.n	800f1a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2205      	movs	r2, #5
 800f192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f022 0201 	bic.w	r2, r2, #1
 800f1a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f1c0:	4b8e      	ldr	r3, [pc, #568]	@ (800f3fc <HAL_DMA_IRQHandler+0x248>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a8e      	ldr	r2, [pc, #568]	@ (800f400 <HAL_DMA_IRQHandler+0x24c>)
 800f1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ca:	0a9b      	lsrs	r3, r3, #10
 800f1cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1de:	2208      	movs	r2, #8
 800f1e0:	409a      	lsls	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d01a      	beq.n	800f220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f003 0304 	and.w	r3, r3, #4
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d013      	beq.n	800f220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f022 0204 	bic.w	r2, r2, #4
 800f206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f20c:	2208      	movs	r2, #8
 800f20e:	409a      	lsls	r2, r3
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f218:	f043 0201 	orr.w	r2, r3, #1
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f224:	2201      	movs	r2, #1
 800f226:	409a      	lsls	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4013      	ands	r3, r2
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d012      	beq.n	800f256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00b      	beq.n	800f256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f242:	2201      	movs	r2, #1
 800f244:	409a      	lsls	r2, r3
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f24e:	f043 0202 	orr.w	r2, r3, #2
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f25a:	2204      	movs	r2, #4
 800f25c:	409a      	lsls	r2, r3
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	4013      	ands	r3, r2
 800f262:	2b00      	cmp	r3, #0
 800f264:	d012      	beq.n	800f28c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f003 0302 	and.w	r3, r3, #2
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00b      	beq.n	800f28c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f278:	2204      	movs	r2, #4
 800f27a:	409a      	lsls	r2, r3
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f284:	f043 0204 	orr.w	r2, r3, #4
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f290:	2210      	movs	r2, #16
 800f292:	409a      	lsls	r2, r3
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	4013      	ands	r3, r2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d043      	beq.n	800f324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f003 0308 	and.w	r3, r3, #8
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d03c      	beq.n	800f324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2ae:	2210      	movs	r2, #16
 800f2b0:	409a      	lsls	r2, r3
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d018      	beq.n	800f2f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d108      	bne.n	800f2e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d024      	beq.n	800f324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	4798      	blx	r3
 800f2e2:	e01f      	b.n	800f324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d01b      	beq.n	800f324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	4798      	blx	r3
 800f2f4:	e016      	b.n	800f324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f300:	2b00      	cmp	r3, #0
 800f302:	d107      	bne.n	800f314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f022 0208 	bic.w	r2, r2, #8
 800f312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f328:	2220      	movs	r2, #32
 800f32a:	409a      	lsls	r2, r3
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	4013      	ands	r3, r2
 800f330:	2b00      	cmp	r3, #0
 800f332:	f000 808f 	beq.w	800f454 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 0310 	and.w	r3, r3, #16
 800f340:	2b00      	cmp	r3, #0
 800f342:	f000 8087 	beq.w	800f454 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f34a:	2220      	movs	r2, #32
 800f34c:	409a      	lsls	r2, r3
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b05      	cmp	r3, #5
 800f35c:	d136      	bne.n	800f3cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f022 0216 	bic.w	r2, r2, #22
 800f36c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	695a      	ldr	r2, [r3, #20]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f37c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f382:	2b00      	cmp	r3, #0
 800f384:	d103      	bne.n	800f38e <HAL_DMA_IRQHandler+0x1da>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d007      	beq.n	800f39e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f022 0208 	bic.w	r2, r2, #8
 800f39c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3a2:	223f      	movs	r2, #63	@ 0x3f
 800f3a4:	409a      	lsls	r2, r3
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d07e      	beq.n	800f4c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	4798      	blx	r3
        }
        return;
 800f3ca:	e079      	b.n	800f4c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d01d      	beq.n	800f416 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10d      	bne.n	800f404 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d031      	beq.n	800f454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	4798      	blx	r3
 800f3f8:	e02c      	b.n	800f454 <HAL_DMA_IRQHandler+0x2a0>
 800f3fa:	bf00      	nop
 800f3fc:	200000d8 	.word	0x200000d8
 800f400:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d023      	beq.n	800f454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	4798      	blx	r3
 800f414:	e01e      	b.n	800f454 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10f      	bne.n	800f444 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f022 0210 	bic.w	r2, r2, #16
 800f432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2201      	movs	r2, #1
 800f438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d032      	beq.n	800f4c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b00      	cmp	r3, #0
 800f466:	d022      	beq.n	800f4ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2205      	movs	r2, #5
 800f46c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f022 0201 	bic.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	3301      	adds	r3, #1
 800f484:	60bb      	str	r3, [r7, #8]
 800f486:	697a      	ldr	r2, [r7, #20]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d307      	bcc.n	800f49c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1f2      	bne.n	800f480 <HAL_DMA_IRQHandler+0x2cc>
 800f49a:	e000      	b.n	800f49e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800f49c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d005      	beq.n	800f4c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	4798      	blx	r3
 800f4be:	e000      	b.n	800f4c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800f4c0:	bf00      	nop
    }
  }
}
 800f4c2:	3718      	adds	r7, #24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f4d6:	b2db      	uxtb	r3, r3
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
 800f4f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f500:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	2b40      	cmp	r3, #64	@ 0x40
 800f510:	d108      	bne.n	800f524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f522:	e007      	b.n	800f534 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	60da      	str	r2, [r3, #12]
}
 800f534:	bf00      	nop
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	3b10      	subs	r3, #16
 800f550:	4a14      	ldr	r2, [pc, #80]	@ (800f5a4 <DMA_CalcBaseAndBitshift+0x64>)
 800f552:	fba2 2303 	umull	r2, r3, r2, r3
 800f556:	091b      	lsrs	r3, r3, #4
 800f558:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f55a:	4a13      	ldr	r2, [pc, #76]	@ (800f5a8 <DMA_CalcBaseAndBitshift+0x68>)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4413      	add	r3, r2
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	461a      	mov	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	d909      	bls.n	800f582 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800f576:	f023 0303 	bic.w	r3, r3, #3
 800f57a:	1d1a      	adds	r2, r3, #4
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	659a      	str	r2, [r3, #88]	@ 0x58
 800f580:	e007      	b.n	800f592 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800f58a:	f023 0303 	bic.w	r3, r3, #3
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800f596:	4618      	mov	r0, r3
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	aaaaaaab 	.word	0xaaaaaaab
 800f5a8:	08026890 	.word	0x08026890

0800f5ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d11f      	bne.n	800f606 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2b03      	cmp	r3, #3
 800f5ca:	d856      	bhi.n	800f67a <DMA_CheckFifoParam+0xce>
 800f5cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f5d4 <DMA_CheckFifoParam+0x28>)
 800f5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d2:	bf00      	nop
 800f5d4:	0800f5e5 	.word	0x0800f5e5
 800f5d8:	0800f5f7 	.word	0x0800f5f7
 800f5dc:	0800f5e5 	.word	0x0800f5e5
 800f5e0:	0800f67b 	.word	0x0800f67b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d046      	beq.n	800f67e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f5f4:	e043      	b.n	800f67e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800f5fe:	d140      	bne.n	800f682 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800f600:	2301      	movs	r3, #1
 800f602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f604:	e03d      	b.n	800f682 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	699b      	ldr	r3, [r3, #24]
 800f60a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f60e:	d121      	bne.n	800f654 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	2b03      	cmp	r3, #3
 800f614:	d837      	bhi.n	800f686 <DMA_CheckFifoParam+0xda>
 800f616:	a201      	add	r2, pc, #4	@ (adr r2, 800f61c <DMA_CheckFifoParam+0x70>)
 800f618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61c:	0800f62d 	.word	0x0800f62d
 800f620:	0800f633 	.word	0x0800f633
 800f624:	0800f62d 	.word	0x0800f62d
 800f628:	0800f645 	.word	0x0800f645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f62c:	2301      	movs	r3, #1
 800f62e:	73fb      	strb	r3, [r7, #15]
      break;
 800f630:	e030      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f636:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d025      	beq.n	800f68a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f642:	e022      	b.n	800f68a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f648:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800f64c:	d11f      	bne.n	800f68e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f652:	e01c      	b.n	800f68e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2b02      	cmp	r3, #2
 800f658:	d903      	bls.n	800f662 <DMA_CheckFifoParam+0xb6>
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	d003      	beq.n	800f668 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f660:	e018      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	73fb      	strb	r3, [r7, #15]
      break;
 800f666:	e015      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f66c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00e      	beq.n	800f692 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	73fb      	strb	r3, [r7, #15]
      break;
 800f678:	e00b      	b.n	800f692 <DMA_CheckFifoParam+0xe6>
      break;
 800f67a:	bf00      	nop
 800f67c:	e00a      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      break;
 800f67e:	bf00      	nop
 800f680:	e008      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      break;
 800f682:	bf00      	nop
 800f684:	e006      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      break;
 800f686:	bf00      	nop
 800f688:	e004      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      break;
 800f68a:	bf00      	nop
 800f68c:	e002      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      break;   
 800f68e:	bf00      	nop
 800f690:	e000      	b.n	800f694 <DMA_CheckFifoParam+0xe8>
      break;
 800f692:	bf00      	nop
    }
  } 
  
  return status; 
 800f694:	7bfb      	ldrb	r3, [r7, #15]
}
 800f696:	4618      	mov	r0, r3
 800f698:	3714      	adds	r7, #20
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop

0800f6a4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800f6b6:	7afb      	ldrb	r3, [r7, #11]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d103      	bne.n	800f6c4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	605a      	str	r2, [r3, #4]
      break;
 800f6c2:	e002      	b.n	800f6ca <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	75fb      	strb	r3, [r7, #23]
      break;
 800f6c8:	bf00      	nop
  }

  return status;
 800f6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	371c      	adds	r7, #28
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d101      	bne.n	800f6ec <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e003      	b.n	800f6f4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
  }
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f003 031f 	and.w	r3, r3, #31
 800f710:	2201      	movs	r2, #1
 800f712:	fa02 f303 	lsl.w	r3, r2, r3
 800f716:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800f718:	4b0a      	ldr	r3, [pc, #40]	@ (800f744 <HAL_EXTI_IRQHandler+0x44>)
 800f71a:	695b      	ldr	r3, [r3, #20]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	4013      	ands	r3, r2
 800f720:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d009      	beq.n	800f73c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800f728:	4a06      	ldr	r2, [pc, #24]	@ (800f744 <HAL_EXTI_IRQHandler+0x44>)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d002      	beq.n	800f73c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	4798      	blx	r3
    }
  }
}
 800f73c:	bf00      	nop
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	40013c00 	.word	0x40013c00

0800f748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f748:	b480      	push	{r7}
 800f74a:	b089      	sub	sp, #36	@ 0x24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f752:	2300      	movs	r3, #0
 800f754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f756:	2300      	movs	r3, #0
 800f758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f75a:	2300      	movs	r3, #0
 800f75c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f75e:	2300      	movs	r3, #0
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	e159      	b.n	800fa18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f764:	2201      	movs	r2, #1
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	fa02 f303 	lsl.w	r3, r2, r3
 800f76c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	4013      	ands	r3, r2
 800f776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	f040 8148 	bne.w	800fa12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	f003 0303 	and.w	r3, r3, #3
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d005      	beq.n	800f79a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f796:	2b02      	cmp	r3, #2
 800f798:	d130      	bne.n	800f7fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	005b      	lsls	r3, r3, #1
 800f7a4:	2203      	movs	r2, #3
 800f7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f7aa:	43db      	mvns	r3, r3
 800f7ac:	69ba      	ldr	r2, [r7, #24]
 800f7ae:	4013      	ands	r3, r2
 800f7b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	68da      	ldr	r2, [r3, #12]
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	005b      	lsls	r3, r3, #1
 800f7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f7be:	69ba      	ldr	r2, [r7, #24]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	69ba      	ldr	r2, [r7, #24]
 800f7c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f7d0:	2201      	movs	r2, #1
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f7d8:	43db      	mvns	r3, r3
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	4013      	ands	r3, r2
 800f7de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	091b      	lsrs	r3, r3, #4
 800f7e6:	f003 0201 	and.w	r2, r3, #1
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f7f0:	69ba      	ldr	r2, [r7, #24]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	69ba      	ldr	r2, [r7, #24]
 800f7fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f003 0303 	and.w	r3, r3, #3
 800f804:	2b03      	cmp	r3, #3
 800f806:	d017      	beq.n	800f838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	005b      	lsls	r3, r3, #1
 800f812:	2203      	movs	r2, #3
 800f814:	fa02 f303 	lsl.w	r3, r2, r3
 800f818:	43db      	mvns	r3, r3
 800f81a:	69ba      	ldr	r2, [r7, #24]
 800f81c:	4013      	ands	r3, r2
 800f81e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	689a      	ldr	r2, [r3, #8]
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	005b      	lsls	r3, r3, #1
 800f828:	fa02 f303 	lsl.w	r3, r2, r3
 800f82c:	69ba      	ldr	r2, [r7, #24]
 800f82e:	4313      	orrs	r3, r2
 800f830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	69ba      	ldr	r2, [r7, #24]
 800f836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	f003 0303 	and.w	r3, r3, #3
 800f840:	2b02      	cmp	r3, #2
 800f842:	d123      	bne.n	800f88c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	08da      	lsrs	r2, r3, #3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	3208      	adds	r2, #8
 800f84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	f003 0307 	and.w	r3, r3, #7
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	220f      	movs	r2, #15
 800f85c:	fa02 f303 	lsl.w	r3, r2, r3
 800f860:	43db      	mvns	r3, r3
 800f862:	69ba      	ldr	r2, [r7, #24]
 800f864:	4013      	ands	r3, r2
 800f866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	691a      	ldr	r2, [r3, #16]
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	f003 0307 	and.w	r3, r3, #7
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	fa02 f303 	lsl.w	r3, r2, r3
 800f878:	69ba      	ldr	r2, [r7, #24]
 800f87a:	4313      	orrs	r3, r2
 800f87c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	08da      	lsrs	r2, r3, #3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	3208      	adds	r2, #8
 800f886:	69b9      	ldr	r1, [r7, #24]
 800f888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	2203      	movs	r2, #3
 800f898:	fa02 f303 	lsl.w	r3, r2, r3
 800f89c:	43db      	mvns	r3, r3
 800f89e:	69ba      	ldr	r2, [r7, #24]
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	f003 0203 	and.w	r2, r3, #3
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8b4:	69ba      	ldr	r2, [r7, #24]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	69ba      	ldr	r2, [r7, #24]
 800f8be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f000 80a2 	beq.w	800fa12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	60fb      	str	r3, [r7, #12]
 800f8d2:	4b57      	ldr	r3, [pc, #348]	@ (800fa30 <HAL_GPIO_Init+0x2e8>)
 800f8d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8d6:	4a56      	ldr	r2, [pc, #344]	@ (800fa30 <HAL_GPIO_Init+0x2e8>)
 800f8d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f8dc:	6453      	str	r3, [r2, #68]	@ 0x44
 800f8de:	4b54      	ldr	r3, [pc, #336]	@ (800fa30 <HAL_GPIO_Init+0x2e8>)
 800f8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f8ea:	4a52      	ldr	r2, [pc, #328]	@ (800fa34 <HAL_GPIO_Init+0x2ec>)
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	089b      	lsrs	r3, r3, #2
 800f8f0:	3302      	adds	r3, #2
 800f8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	f003 0303 	and.w	r3, r3, #3
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	220f      	movs	r2, #15
 800f902:	fa02 f303 	lsl.w	r3, r2, r3
 800f906:	43db      	mvns	r3, r3
 800f908:	69ba      	ldr	r2, [r7, #24]
 800f90a:	4013      	ands	r3, r2
 800f90c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a49      	ldr	r2, [pc, #292]	@ (800fa38 <HAL_GPIO_Init+0x2f0>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d019      	beq.n	800f94a <HAL_GPIO_Init+0x202>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a48      	ldr	r2, [pc, #288]	@ (800fa3c <HAL_GPIO_Init+0x2f4>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d013      	beq.n	800f946 <HAL_GPIO_Init+0x1fe>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a47      	ldr	r2, [pc, #284]	@ (800fa40 <HAL_GPIO_Init+0x2f8>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d00d      	beq.n	800f942 <HAL_GPIO_Init+0x1fa>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a46      	ldr	r2, [pc, #280]	@ (800fa44 <HAL_GPIO_Init+0x2fc>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d007      	beq.n	800f93e <HAL_GPIO_Init+0x1f6>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a45      	ldr	r2, [pc, #276]	@ (800fa48 <HAL_GPIO_Init+0x300>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d101      	bne.n	800f93a <HAL_GPIO_Init+0x1f2>
 800f936:	2304      	movs	r3, #4
 800f938:	e008      	b.n	800f94c <HAL_GPIO_Init+0x204>
 800f93a:	2307      	movs	r3, #7
 800f93c:	e006      	b.n	800f94c <HAL_GPIO_Init+0x204>
 800f93e:	2303      	movs	r3, #3
 800f940:	e004      	b.n	800f94c <HAL_GPIO_Init+0x204>
 800f942:	2302      	movs	r3, #2
 800f944:	e002      	b.n	800f94c <HAL_GPIO_Init+0x204>
 800f946:	2301      	movs	r3, #1
 800f948:	e000      	b.n	800f94c <HAL_GPIO_Init+0x204>
 800f94a:	2300      	movs	r3, #0
 800f94c:	69fa      	ldr	r2, [r7, #28]
 800f94e:	f002 0203 	and.w	r2, r2, #3
 800f952:	0092      	lsls	r2, r2, #2
 800f954:	4093      	lsls	r3, r2
 800f956:	69ba      	ldr	r2, [r7, #24]
 800f958:	4313      	orrs	r3, r2
 800f95a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f95c:	4935      	ldr	r1, [pc, #212]	@ (800fa34 <HAL_GPIO_Init+0x2ec>)
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	089b      	lsrs	r3, r3, #2
 800f962:	3302      	adds	r3, #2
 800f964:	69ba      	ldr	r2, [r7, #24]
 800f966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f96a:	4b38      	ldr	r3, [pc, #224]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	43db      	mvns	r3, r3
 800f974:	69ba      	ldr	r2, [r7, #24]
 800f976:	4013      	ands	r3, r2
 800f978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800f986:	69ba      	ldr	r2, [r7, #24]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f98e:	4a2f      	ldr	r2, [pc, #188]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f994:	4b2d      	ldr	r3, [pc, #180]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	43db      	mvns	r3, r3
 800f99e:	69ba      	ldr	r2, [r7, #24]
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d003      	beq.n	800f9b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800f9b0:	69ba      	ldr	r2, [r7, #24]
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f9b8:	4a24      	ldr	r2, [pc, #144]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800f9be:	4b23      	ldr	r3, [pc, #140]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	43db      	mvns	r3, r3
 800f9c8:	69ba      	ldr	r2, [r7, #24]
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d003      	beq.n	800f9e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800f9da:	69ba      	ldr	r2, [r7, #24]
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f9e2:	4a1a      	ldr	r2, [pc, #104]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f9e8:	4b18      	ldr	r3, [pc, #96]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	43db      	mvns	r3, r3
 800f9f2:	69ba      	ldr	r2, [r7, #24]
 800f9f4:	4013      	ands	r3, r2
 800f9f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d003      	beq.n	800fa0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800fa04:	69ba      	ldr	r2, [r7, #24]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fa0c:	4a0f      	ldr	r2, [pc, #60]	@ (800fa4c <HAL_GPIO_Init+0x304>)
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	3301      	adds	r3, #1
 800fa16:	61fb      	str	r3, [r7, #28]
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	2b0f      	cmp	r3, #15
 800fa1c:	f67f aea2 	bls.w	800f764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fa20:	bf00      	nop
 800fa22:	bf00      	nop
 800fa24:	3724      	adds	r7, #36	@ 0x24
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	40023800 	.word	0x40023800
 800fa34:	40013800 	.word	0x40013800
 800fa38:	40020000 	.word	0x40020000
 800fa3c:	40020400 	.word	0x40020400
 800fa40:	40020800 	.word	0x40020800
 800fa44:	40020c00 	.word	0x40020c00
 800fa48:	40021000 	.word	0x40021000
 800fa4c:	40013c00 	.word	0x40013c00

0800fa50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b087      	sub	sp, #28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800fa62:	2300      	movs	r3, #0
 800fa64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fa66:	2300      	movs	r3, #0
 800fa68:	617b      	str	r3, [r7, #20]
 800fa6a:	e0bb      	b.n	800fbe4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	fa02 f303 	lsl.w	r3, r2, r3
 800fa74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800fa76:	683a      	ldr	r2, [r7, #0]
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	f040 80ab 	bne.w	800fbde <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800fa88:	4a5c      	ldr	r2, [pc, #368]	@ (800fbfc <HAL_GPIO_DeInit+0x1ac>)
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	089b      	lsrs	r3, r3, #2
 800fa8e:	3302      	adds	r3, #2
 800fa90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa94:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	f003 0303 	and.w	r3, r3, #3
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	220f      	movs	r2, #15
 800faa0:	fa02 f303 	lsl.w	r3, r2, r3
 800faa4:	68ba      	ldr	r2, [r7, #8]
 800faa6:	4013      	ands	r3, r2
 800faa8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a54      	ldr	r2, [pc, #336]	@ (800fc00 <HAL_GPIO_DeInit+0x1b0>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d019      	beq.n	800fae6 <HAL_GPIO_DeInit+0x96>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a53      	ldr	r2, [pc, #332]	@ (800fc04 <HAL_GPIO_DeInit+0x1b4>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d013      	beq.n	800fae2 <HAL_GPIO_DeInit+0x92>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a52      	ldr	r2, [pc, #328]	@ (800fc08 <HAL_GPIO_DeInit+0x1b8>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d00d      	beq.n	800fade <HAL_GPIO_DeInit+0x8e>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a51      	ldr	r2, [pc, #324]	@ (800fc0c <HAL_GPIO_DeInit+0x1bc>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d007      	beq.n	800fada <HAL_GPIO_DeInit+0x8a>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4a50      	ldr	r2, [pc, #320]	@ (800fc10 <HAL_GPIO_DeInit+0x1c0>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d101      	bne.n	800fad6 <HAL_GPIO_DeInit+0x86>
 800fad2:	2304      	movs	r3, #4
 800fad4:	e008      	b.n	800fae8 <HAL_GPIO_DeInit+0x98>
 800fad6:	2307      	movs	r3, #7
 800fad8:	e006      	b.n	800fae8 <HAL_GPIO_DeInit+0x98>
 800fada:	2303      	movs	r3, #3
 800fadc:	e004      	b.n	800fae8 <HAL_GPIO_DeInit+0x98>
 800fade:	2302      	movs	r3, #2
 800fae0:	e002      	b.n	800fae8 <HAL_GPIO_DeInit+0x98>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <HAL_GPIO_DeInit+0x98>
 800fae6:	2300      	movs	r3, #0
 800fae8:	697a      	ldr	r2, [r7, #20]
 800faea:	f002 0203 	and.w	r2, r2, #3
 800faee:	0092      	lsls	r2, r2, #2
 800faf0:	4093      	lsls	r3, r2
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d132      	bne.n	800fb5e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800faf8:	4b46      	ldr	r3, [pc, #280]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	43db      	mvns	r3, r3
 800fb00:	4944      	ldr	r1, [pc, #272]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb02:	4013      	ands	r3, r2
 800fb04:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800fb06:	4b43      	ldr	r3, [pc, #268]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb08:	685a      	ldr	r2, [r3, #4]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	43db      	mvns	r3, r3
 800fb0e:	4941      	ldr	r1, [pc, #260]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb10:	4013      	ands	r3, r2
 800fb12:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800fb14:	4b3f      	ldr	r3, [pc, #252]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb16:	68da      	ldr	r2, [r3, #12]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	43db      	mvns	r3, r3
 800fb1c:	493d      	ldr	r1, [pc, #244]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb1e:	4013      	ands	r3, r2
 800fb20:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800fb22:	4b3c      	ldr	r3, [pc, #240]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb24:	689a      	ldr	r2, [r3, #8]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	43db      	mvns	r3, r3
 800fb2a:	493a      	ldr	r1, [pc, #232]	@ (800fc14 <HAL_GPIO_DeInit+0x1c4>)
 800fb2c:	4013      	ands	r3, r2
 800fb2e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	f003 0303 	and.w	r3, r3, #3
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	220f      	movs	r2, #15
 800fb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb3e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800fb40:	4a2e      	ldr	r2, [pc, #184]	@ (800fbfc <HAL_GPIO_DeInit+0x1ac>)
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	089b      	lsrs	r3, r3, #2
 800fb46:	3302      	adds	r3, #2
 800fb48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	43da      	mvns	r2, r3
 800fb50:	482a      	ldr	r0, [pc, #168]	@ (800fbfc <HAL_GPIO_DeInit+0x1ac>)
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	089b      	lsrs	r3, r3, #2
 800fb56:	400a      	ands	r2, r1
 800fb58:	3302      	adds	r3, #2
 800fb5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	2103      	movs	r1, #3
 800fb68:	fa01 f303 	lsl.w	r3, r1, r3
 800fb6c:	43db      	mvns	r3, r3
 800fb6e:	401a      	ands	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	08da      	lsrs	r2, r3, #3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3208      	adds	r2, #8
 800fb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	220f      	movs	r2, #15
 800fb8a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb8e:	43db      	mvns	r3, r3
 800fb90:	697a      	ldr	r2, [r7, #20]
 800fb92:	08d2      	lsrs	r2, r2, #3
 800fb94:	4019      	ands	r1, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3208      	adds	r2, #8
 800fb9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68da      	ldr	r2, [r3, #12]
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	005b      	lsls	r3, r3, #1
 800fba6:	2103      	movs	r1, #3
 800fba8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbac:	43db      	mvns	r3, r3
 800fbae:	401a      	ands	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	2101      	movs	r1, #1
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	fa01 f303 	lsl.w	r3, r1, r3
 800fbc0:	43db      	mvns	r3, r3
 800fbc2:	401a      	ands	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	689a      	ldr	r2, [r3, #8]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	005b      	lsls	r3, r3, #1
 800fbd0:	2103      	movs	r1, #3
 800fbd2:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd6:	43db      	mvns	r3, r3
 800fbd8:	401a      	ands	r2, r3
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	617b      	str	r3, [r7, #20]
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2b0f      	cmp	r3, #15
 800fbe8:	f67f af40 	bls.w	800fa6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800fbec:	bf00      	nop
 800fbee:	bf00      	nop
 800fbf0:	371c      	adds	r7, #28
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	40013800 	.word	0x40013800
 800fc00:	40020000 	.word	0x40020000
 800fc04:	40020400 	.word	0x40020400
 800fc08:	40020800 	.word	0x40020800
 800fc0c:	40020c00 	.word	0x40020c00
 800fc10:	40021000 	.word	0x40021000
 800fc14:	40013c00 	.word	0x40013c00

0800fc18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	460b      	mov	r3, r1
 800fc22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	691a      	ldr	r2, [r3, #16]
 800fc28:	887b      	ldrh	r3, [r7, #2]
 800fc2a:	4013      	ands	r3, r2
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800fc30:	2301      	movs	r3, #1
 800fc32:	73fb      	strb	r3, [r7, #15]
 800fc34:	e001      	b.n	800fc3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800fc36:	2300      	movs	r3, #0
 800fc38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	807b      	strh	r3, [r7, #2]
 800fc54:	4613      	mov	r3, r2
 800fc56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fc58:	787b      	ldrb	r3, [r7, #1]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fc5e:	887a      	ldrh	r2, [r7, #2]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800fc64:	e003      	b.n	800fc6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fc66:	887b      	ldrh	r3, [r7, #2]
 800fc68:	041a      	lsls	r2, r3, #16
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	619a      	str	r2, [r3, #24]
}
 800fc6e:	bf00      	nop
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr
	...

0800fc7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e12b      	b.n	800fee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d106      	bne.n	800fca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f95d 	bl	800ff62 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2224      	movs	r2, #36	@ 0x24
 800fcac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f022 0201 	bic.w	r2, r2, #1
 800fcbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fcce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fcde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800fce0:	f003 fe26 	bl	8013930 <HAL_RCC_GetPCLK1Freq>
 800fce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	4a81      	ldr	r2, [pc, #516]	@ (800fef0 <HAL_I2C_Init+0x274>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d807      	bhi.n	800fd00 <HAL_I2C_Init+0x84>
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	4a80      	ldr	r2, [pc, #512]	@ (800fef4 <HAL_I2C_Init+0x278>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	bf94      	ite	ls
 800fcf8:	2301      	movls	r3, #1
 800fcfa:	2300      	movhi	r3, #0
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	e006      	b.n	800fd0e <HAL_I2C_Init+0x92>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4a7d      	ldr	r2, [pc, #500]	@ (800fef8 <HAL_I2C_Init+0x27c>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	bf94      	ite	ls
 800fd08:	2301      	movls	r3, #1
 800fd0a:	2300      	movhi	r3, #0
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800fd12:	2301      	movs	r3, #1
 800fd14:	e0e7      	b.n	800fee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	4a78      	ldr	r2, [pc, #480]	@ (800fefc <HAL_I2C_Init+0x280>)
 800fd1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd1e:	0c9b      	lsrs	r3, r3, #18
 800fd20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	430a      	orrs	r2, r1
 800fd34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	6a1b      	ldr	r3, [r3, #32]
 800fd3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	4a6a      	ldr	r2, [pc, #424]	@ (800fef0 <HAL_I2C_Init+0x274>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d802      	bhi.n	800fd50 <HAL_I2C_Init+0xd4>
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	e009      	b.n	800fd64 <HAL_I2C_Init+0xe8>
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800fd56:	fb02 f303 	mul.w	r3, r2, r3
 800fd5a:	4a69      	ldr	r2, [pc, #420]	@ (800ff00 <HAL_I2C_Init+0x284>)
 800fd5c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd60:	099b      	lsrs	r3, r3, #6
 800fd62:	3301      	adds	r3, #1
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	6812      	ldr	r2, [r2, #0]
 800fd68:	430b      	orrs	r3, r1
 800fd6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	69db      	ldr	r3, [r3, #28]
 800fd72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800fd76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	495c      	ldr	r1, [pc, #368]	@ (800fef0 <HAL_I2C_Init+0x274>)
 800fd80:	428b      	cmp	r3, r1
 800fd82:	d819      	bhi.n	800fdb8 <HAL_I2C_Init+0x13c>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	1e59      	subs	r1, r3, #1
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd92:	1c59      	adds	r1, r3, #1
 800fd94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fd98:	400b      	ands	r3, r1
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00a      	beq.n	800fdb4 <HAL_I2C_Init+0x138>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	1e59      	subs	r1, r3, #1
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	fbb1 f3f3 	udiv	r3, r1, r3
 800fdac:	3301      	adds	r3, #1
 800fdae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdb2:	e051      	b.n	800fe58 <HAL_I2C_Init+0x1dc>
 800fdb4:	2304      	movs	r3, #4
 800fdb6:	e04f      	b.n	800fe58 <HAL_I2C_Init+0x1dc>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d111      	bne.n	800fde4 <HAL_I2C_Init+0x168>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	1e58      	subs	r0, r3, #1
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6859      	ldr	r1, [r3, #4]
 800fdc8:	460b      	mov	r3, r1
 800fdca:	005b      	lsls	r3, r3, #1
 800fdcc:	440b      	add	r3, r1
 800fdce:	fbb0 f3f3 	udiv	r3, r0, r3
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	bf0c      	ite	eq
 800fddc:	2301      	moveq	r3, #1
 800fdde:	2300      	movne	r3, #0
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	e012      	b.n	800fe0a <HAL_I2C_Init+0x18e>
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	1e58      	subs	r0, r3, #1
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6859      	ldr	r1, [r3, #4]
 800fdec:	460b      	mov	r3, r1
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	440b      	add	r3, r1
 800fdf2:	0099      	lsls	r1, r3, #2
 800fdf4:	440b      	add	r3, r1
 800fdf6:	fbb0 f3f3 	udiv	r3, r0, r3
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	bf0c      	ite	eq
 800fe04:	2301      	moveq	r3, #1
 800fe06:	2300      	movne	r3, #0
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <HAL_I2C_Init+0x196>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e022      	b.n	800fe58 <HAL_I2C_Init+0x1dc>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10e      	bne.n	800fe38 <HAL_I2C_Init+0x1bc>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	1e58      	subs	r0, r3, #1
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6859      	ldr	r1, [r3, #4]
 800fe22:	460b      	mov	r3, r1
 800fe24:	005b      	lsls	r3, r3, #1
 800fe26:	440b      	add	r3, r1
 800fe28:	fbb0 f3f3 	udiv	r3, r0, r3
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe36:	e00f      	b.n	800fe58 <HAL_I2C_Init+0x1dc>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	1e58      	subs	r0, r3, #1
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6859      	ldr	r1, [r3, #4]
 800fe40:	460b      	mov	r3, r1
 800fe42:	009b      	lsls	r3, r3, #2
 800fe44:	440b      	add	r3, r1
 800fe46:	0099      	lsls	r1, r3, #2
 800fe48:	440b      	add	r3, r1
 800fe4a:	fbb0 f3f3 	udiv	r3, r0, r3
 800fe4e:	3301      	adds	r3, #1
 800fe50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fe58:	6879      	ldr	r1, [r7, #4]
 800fe5a:	6809      	ldr	r1, [r1, #0]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	69da      	ldr	r2, [r3, #28]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	431a      	orrs	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800fe86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	6911      	ldr	r1, [r2, #16]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	68d2      	ldr	r2, [r2, #12]
 800fe92:	4311      	orrs	r1, r2
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	6812      	ldr	r2, [r2, #0]
 800fe98:	430b      	orrs	r3, r1
 800fe9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	695a      	ldr	r2, [r3, #20]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	699b      	ldr	r3, [r3, #24]
 800feae:	431a      	orrs	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	430a      	orrs	r2, r1
 800feb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f042 0201 	orr.w	r2, r2, #1
 800fec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2220      	movs	r2, #32
 800fed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	000186a0 	.word	0x000186a0
 800fef4:	001e847f 	.word	0x001e847f
 800fef8:	003d08ff 	.word	0x003d08ff
 800fefc:	431bde83 	.word	0x431bde83
 800ff00:	10624dd3 	.word	0x10624dd3

0800ff04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ff12:	2301      	movs	r3, #1
 800ff14:	e021      	b.n	800ff5a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2224      	movs	r2, #36	@ 0x24
 800ff1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f022 0201 	bic.w	r2, r2, #1
 800ff2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f000 f821 	bl	800ff76 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b083      	sub	sp, #12
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800ff6a:	bf00      	nop
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr

0800ff76 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800ff76:	b480      	push	{r7}
 800ff78:	b083      	sub	sp, #12
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800ff7e:	bf00      	nop
 800ff80:	370c      	adds	r7, #12
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b083      	sub	sp, #12
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff9c:	2b80      	cmp	r3, #128	@ 0x80
 800ff9e:	d103      	bne.n	800ffa8 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	611a      	str	r2, [r3, #16]
  }
}
 800ffa8:	bf00      	nop
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b088      	sub	sp, #32
 800ffb8:	af02      	add	r7, sp, #8
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	607a      	str	r2, [r7, #4]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	817b      	strh	r3, [r7, #10]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ffc8:	f7fe fdcc 	bl	800eb64 <HAL_GetTick>
 800ffcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	2b20      	cmp	r3, #32
 800ffd8:	f040 80e0 	bne.w	801019c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	2319      	movs	r3, #25
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	4970      	ldr	r1, [pc, #448]	@ (80101a8 <HAL_I2C_Master_Transmit+0x1f4>)
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f002 fdae 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800fff2:	2302      	movs	r3, #2
 800fff4:	e0d3      	b.n	801019e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d101      	bne.n	8010004 <HAL_I2C_Master_Transmit+0x50>
 8010000:	2302      	movs	r3, #2
 8010002:	e0cc      	b.n	801019e <HAL_I2C_Master_Transmit+0x1ea>
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2201      	movs	r2, #1
 8010008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	2b01      	cmp	r3, #1
 8010018:	d007      	beq.n	801002a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f042 0201 	orr.w	r2, r2, #1
 8010028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2221      	movs	r2, #33	@ 0x21
 801003e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2210      	movs	r2, #16
 8010046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	893a      	ldrh	r2, [r7, #8]
 801005a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010060:	b29a      	uxth	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	4a50      	ldr	r2, [pc, #320]	@ (80101ac <HAL_I2C_Master_Transmit+0x1f8>)
 801006a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801006c:	8979      	ldrh	r1, [r7, #10]
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	6a3a      	ldr	r2, [r7, #32]
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f002 f9f2 	bl	801245c <I2C_MasterRequestWrite>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	e08d      	b.n	801019e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010082:	2300      	movs	r3, #0
 8010084:	613b      	str	r3, [r7, #16]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	695b      	ldr	r3, [r3, #20]
 801008c:	613b      	str	r3, [r7, #16]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	699b      	ldr	r3, [r3, #24]
 8010094:	613b      	str	r3, [r7, #16]
 8010096:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8010098:	e066      	b.n	8010168 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801009a:	697a      	ldr	r2, [r7, #20]
 801009c:	6a39      	ldr	r1, [r7, #32]
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f002 fe6c 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00d      	beq.n	80100c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ae:	2b04      	cmp	r3, #4
 80100b0:	d107      	bne.n	80100c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80100c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80100c2:	2301      	movs	r3, #1
 80100c4:	e06b      	b.n	801019e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ca:	781a      	ldrb	r2, [r3, #0]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d6:	1c5a      	adds	r2, r3, #1
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	3b01      	subs	r3, #1
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100ee:	3b01      	subs	r3, #1
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	695b      	ldr	r3, [r3, #20]
 80100fc:	f003 0304 	and.w	r3, r3, #4
 8010100:	2b04      	cmp	r3, #4
 8010102:	d11b      	bne.n	801013c <HAL_I2C_Master_Transmit+0x188>
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010108:	2b00      	cmp	r3, #0
 801010a:	d017      	beq.n	801013c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010110:	781a      	ldrb	r2, [r3, #0]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010126:	b29b      	uxth	r3, r3
 8010128:	3b01      	subs	r3, #1
 801012a:	b29a      	uxth	r2, r3
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010134:	3b01      	subs	r3, #1
 8010136:	b29a      	uxth	r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801013c:	697a      	ldr	r2, [r7, #20]
 801013e:	6a39      	ldr	r1, [r7, #32]
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f002 fe63 	bl	8012e0c <I2C_WaitOnBTFFlagUntilTimeout>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00d      	beq.n	8010168 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010150:	2b04      	cmp	r3, #4
 8010152:	d107      	bne.n	8010164 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010162:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	e01a      	b.n	801019e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801016c:	2b00      	cmp	r3, #0
 801016e:	d194      	bne.n	801009a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801017e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2220      	movs	r2, #32
 8010184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2200      	movs	r2, #0
 801018c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	e000      	b.n	801019e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801019c:	2302      	movs	r3, #2
  }
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3718      	adds	r7, #24
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	00100002 	.word	0x00100002
 80101ac:	ffff0000 	.word	0xffff0000

080101b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08c      	sub	sp, #48	@ 0x30
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	607a      	str	r2, [r7, #4]
 80101ba:	461a      	mov	r2, r3
 80101bc:	460b      	mov	r3, r1
 80101be:	817b      	strh	r3, [r7, #10]
 80101c0:	4613      	mov	r3, r2
 80101c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80101c4:	f7fe fcce 	bl	800eb64 <HAL_GetTick>
 80101c8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b20      	cmp	r3, #32
 80101d4:	f040 8217 	bne.w	8010606 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	2319      	movs	r3, #25
 80101de:	2201      	movs	r2, #1
 80101e0:	497c      	ldr	r1, [pc, #496]	@ (80103d4 <HAL_I2C_Master_Receive+0x224>)
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f002 fcb0 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80101ee:	2302      	movs	r3, #2
 80101f0:	e20a      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d101      	bne.n	8010200 <HAL_I2C_Master_Receive+0x50>
 80101fc:	2302      	movs	r3, #2
 80101fe:	e203      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2201      	movs	r2, #1
 8010204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b01      	cmp	r3, #1
 8010214:	d007      	beq.n	8010226 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f042 0201 	orr.w	r2, r2, #1
 8010224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2222      	movs	r2, #34	@ 0x22
 801023a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2210      	movs	r2, #16
 8010242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2200      	movs	r2, #0
 801024a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	893a      	ldrh	r2, [r7, #8]
 8010256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801025c:	b29a      	uxth	r2, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4a5c      	ldr	r2, [pc, #368]	@ (80103d8 <HAL_I2C_Master_Receive+0x228>)
 8010266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8010268:	8979      	ldrh	r1, [r7, #10]
 801026a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801026c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f002 f976 	bl	8012560 <I2C_MasterRequestRead>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	e1c4      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010282:	2b00      	cmp	r3, #0
 8010284:	d113      	bne.n	80102ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010286:	2300      	movs	r3, #0
 8010288:	623b      	str	r3, [r7, #32]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	695b      	ldr	r3, [r3, #20]
 8010290:	623b      	str	r3, [r7, #32]
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	699b      	ldr	r3, [r3, #24]
 8010298:	623b      	str	r3, [r7, #32]
 801029a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	e198      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d11b      	bne.n	80102ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80102c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80102c6:	2300      	movs	r3, #0
 80102c8:	61fb      	str	r3, [r7, #28]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	695b      	ldr	r3, [r3, #20]
 80102d0:	61fb      	str	r3, [r7, #28]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	61fb      	str	r3, [r7, #28]
 80102da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102ea:	601a      	str	r2, [r3, #0]
 80102ec:	e178      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d11b      	bne.n	801032e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010316:	2300      	movs	r3, #0
 8010318:	61bb      	str	r3, [r7, #24]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	695b      	ldr	r3, [r3, #20]
 8010320:	61bb      	str	r3, [r7, #24]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	699b      	ldr	r3, [r3, #24]
 8010328:	61bb      	str	r3, [r7, #24]
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	e158      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801033c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801033e:	2300      	movs	r3, #0
 8010340:	617b      	str	r3, [r7, #20]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	695b      	ldr	r3, [r3, #20]
 8010348:	617b      	str	r3, [r7, #20]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	699b      	ldr	r3, [r3, #24]
 8010350:	617b      	str	r3, [r7, #20]
 8010352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8010354:	e144      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801035a:	2b03      	cmp	r3, #3
 801035c:	f200 80f1 	bhi.w	8010542 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010364:	2b01      	cmp	r3, #1
 8010366:	d123      	bne.n	80103b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801036a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f002 fdc7 	bl	8012f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8010378:	2301      	movs	r3, #1
 801037a:	e145      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	691a      	ldr	r2, [r3, #16]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010386:	b2d2      	uxtb	r2, r2
 8010388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010398:	3b01      	subs	r3, #1
 801039a:	b29a      	uxth	r2, r3
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	3b01      	subs	r3, #1
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80103ae:	e117      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d14e      	bne.n	8010456 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80103b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103be:	2200      	movs	r2, #0
 80103c0:	4906      	ldr	r1, [pc, #24]	@ (80103dc <HAL_I2C_Master_Receive+0x22c>)
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f002 fbc0 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d008      	beq.n	80103e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	e11a      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
 80103d2:	bf00      	nop
 80103d4:	00100002 	.word	0x00100002
 80103d8:	ffff0000 	.word	0xffff0000
 80103dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80103ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	691a      	ldr	r2, [r3, #16]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103fa:	b2d2      	uxtb	r2, r2
 80103fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010402:	1c5a      	adds	r2, r3, #1
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801040c:	3b01      	subs	r3, #1
 801040e:	b29a      	uxth	r2, r3
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010418:	b29b      	uxth	r3, r3
 801041a:	3b01      	subs	r3, #1
 801041c:	b29a      	uxth	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	691a      	ldr	r2, [r3, #16]
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801042c:	b2d2      	uxtb	r2, r2
 801042e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010434:	1c5a      	adds	r2, r3, #1
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801043e:	3b01      	subs	r3, #1
 8010440:	b29a      	uxth	r2, r3
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801044a:	b29b      	uxth	r3, r3
 801044c:	3b01      	subs	r3, #1
 801044e:	b29a      	uxth	r2, r3
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010454:	e0c4      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801045c:	2200      	movs	r2, #0
 801045e:	496c      	ldr	r1, [pc, #432]	@ (8010610 <HAL_I2C_Master_Receive+0x460>)
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f002 fb71 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d001      	beq.n	8010470 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801046c:	2301      	movs	r3, #1
 801046e:	e0cb      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801047e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	691a      	ldr	r2, [r3, #16]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801048a:	b2d2      	uxtb	r2, r2
 801048c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010492:	1c5a      	adds	r2, r3, #1
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801049c:	3b01      	subs	r3, #1
 801049e:	b29a      	uxth	r2, r3
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	3b01      	subs	r3, #1
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80104b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b4:	9300      	str	r3, [sp, #0]
 80104b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b8:	2200      	movs	r2, #0
 80104ba:	4955      	ldr	r1, [pc, #340]	@ (8010610 <HAL_I2C_Master_Receive+0x460>)
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f002 fb43 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e09d      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	691a      	ldr	r2, [r3, #16]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e6:	b2d2      	uxtb	r2, r2
 80104e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ee:	1c5a      	adds	r2, r3, #1
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104f8:	3b01      	subs	r3, #1
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010504:	b29b      	uxth	r3, r3
 8010506:	3b01      	subs	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	691a      	ldr	r2, [r3, #16]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010518:	b2d2      	uxtb	r2, r2
 801051a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801052a:	3b01      	subs	r3, #1
 801052c:	b29a      	uxth	r2, r3
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010536:	b29b      	uxth	r3, r3
 8010538:	3b01      	subs	r3, #1
 801053a:	b29a      	uxth	r2, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010540:	e04e      	b.n	80105e0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010544:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f002 fcda 	bl	8012f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d001      	beq.n	8010556 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	e058      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	691a      	ldr	r2, [r3, #16]
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010560:	b2d2      	uxtb	r2, r2
 8010562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010568:	1c5a      	adds	r2, r3, #1
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010572:	3b01      	subs	r3, #1
 8010574:	b29a      	uxth	r2, r3
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801057e:	b29b      	uxth	r3, r3
 8010580:	3b01      	subs	r3, #1
 8010582:	b29a      	uxth	r2, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	695b      	ldr	r3, [r3, #20]
 801058e:	f003 0304 	and.w	r3, r3, #4
 8010592:	2b04      	cmp	r3, #4
 8010594:	d124      	bne.n	80105e0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801059a:	2b03      	cmp	r3, #3
 801059c:	d107      	bne.n	80105ae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80105ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	691a      	ldr	r2, [r3, #16]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b8:	b2d2      	uxtb	r2, r2
 80105ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105c0:	1c5a      	adds	r2, r3, #1
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105ca:	3b01      	subs	r3, #1
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	3b01      	subs	r3, #1
 80105da:	b29a      	uxth	r2, r3
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f47f aeb6 	bne.w	8010356 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2220      	movs	r2, #32
 80105ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2200      	movs	r2, #0
 80105f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8010602:	2300      	movs	r3, #0
 8010604:	e000      	b.n	8010608 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8010606:	2302      	movs	r3, #2
  }
}
 8010608:	4618      	mov	r0, r3
 801060a:	3728      	adds	r7, #40	@ 0x28
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	00010004 	.word	0x00010004

08010614 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b088      	sub	sp, #32
 8010618:	af02      	add	r7, sp, #8
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	4608      	mov	r0, r1
 801061e:	4611      	mov	r1, r2
 8010620:	461a      	mov	r2, r3
 8010622:	4603      	mov	r3, r0
 8010624:	817b      	strh	r3, [r7, #10]
 8010626:	460b      	mov	r3, r1
 8010628:	813b      	strh	r3, [r7, #8]
 801062a:	4613      	mov	r3, r2
 801062c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801062e:	f7fe fa99 	bl	800eb64 <HAL_GetTick>
 8010632:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b20      	cmp	r3, #32
 801063e:	f040 80d9 	bne.w	80107f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	2319      	movs	r3, #25
 8010648:	2201      	movs	r2, #1
 801064a:	496d      	ldr	r1, [pc, #436]	@ (8010800 <HAL_I2C_Mem_Write+0x1ec>)
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f002 fa7b 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d001      	beq.n	801065c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8010658:	2302      	movs	r3, #2
 801065a:	e0cc      	b.n	80107f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010662:	2b01      	cmp	r3, #1
 8010664:	d101      	bne.n	801066a <HAL_I2C_Mem_Write+0x56>
 8010666:	2302      	movs	r3, #2
 8010668:	e0c5      	b.n	80107f6 <HAL_I2C_Mem_Write+0x1e2>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2201      	movs	r2, #1
 801066e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f003 0301 	and.w	r3, r3, #1
 801067c:	2b01      	cmp	r3, #1
 801067e:	d007      	beq.n	8010690 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f042 0201 	orr.w	r2, r2, #1
 801068e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801069e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2221      	movs	r2, #33	@ 0x21
 80106a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2240      	movs	r2, #64	@ 0x40
 80106ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2200      	movs	r2, #0
 80106b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6a3a      	ldr	r2, [r7, #32]
 80106ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	4a4d      	ldr	r2, [pc, #308]	@ (8010804 <HAL_I2C_Mem_Write+0x1f0>)
 80106d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80106d2:	88f8      	ldrh	r0, [r7, #6]
 80106d4:	893a      	ldrh	r2, [r7, #8]
 80106d6:	8979      	ldrh	r1, [r7, #10]
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	9301      	str	r3, [sp, #4]
 80106dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	4603      	mov	r3, r0
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f002 f80a 	bl	80126fc <I2C_RequestMemoryWrite>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d052      	beq.n	8010794 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80106ee:	2301      	movs	r3, #1
 80106f0:	e081      	b.n	80107f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f002 fb40 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00d      	beq.n	801071e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010706:	2b04      	cmp	r3, #4
 8010708:	d107      	bne.n	801071a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801071a:	2301      	movs	r3, #1
 801071c:	e06b      	b.n	80107f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010722:	781a      	ldrb	r2, [r3, #0]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801072e:	1c5a      	adds	r2, r3, #1
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010738:	3b01      	subs	r3, #1
 801073a:	b29a      	uxth	r2, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010744:	b29b      	uxth	r3, r3
 8010746:	3b01      	subs	r3, #1
 8010748:	b29a      	uxth	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	695b      	ldr	r3, [r3, #20]
 8010754:	f003 0304 	and.w	r3, r3, #4
 8010758:	2b04      	cmp	r3, #4
 801075a:	d11b      	bne.n	8010794 <HAL_I2C_Mem_Write+0x180>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010760:	2b00      	cmp	r3, #0
 8010762:	d017      	beq.n	8010794 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010768:	781a      	ldrb	r2, [r3, #0]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801077e:	3b01      	subs	r3, #1
 8010780:	b29a      	uxth	r2, r3
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801078a:	b29b      	uxth	r3, r3
 801078c:	3b01      	subs	r3, #1
 801078e:	b29a      	uxth	r2, r3
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1aa      	bne.n	80106f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801079c:	697a      	ldr	r2, [r7, #20]
 801079e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f002 fb33 	bl	8012e0c <I2C_WaitOnBTFFlagUntilTimeout>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00d      	beq.n	80107c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107b0:	2b04      	cmp	r3, #4
 80107b2:	d107      	bne.n	80107c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80107c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	e016      	b.n	80107f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80107d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2220      	movs	r2, #32
 80107dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	e000      	b.n	80107f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80107f4:	2302      	movs	r3, #2
  }
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3718      	adds	r7, #24
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	00100002 	.word	0x00100002
 8010804:	ffff0000 	.word	0xffff0000

08010808 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b08c      	sub	sp, #48	@ 0x30
 801080c:	af02      	add	r7, sp, #8
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	4608      	mov	r0, r1
 8010812:	4611      	mov	r1, r2
 8010814:	461a      	mov	r2, r3
 8010816:	4603      	mov	r3, r0
 8010818:	817b      	strh	r3, [r7, #10]
 801081a:	460b      	mov	r3, r1
 801081c:	813b      	strh	r3, [r7, #8]
 801081e:	4613      	mov	r3, r2
 8010820:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010822:	f7fe f99f 	bl	800eb64 <HAL_GetTick>
 8010826:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801082e:	b2db      	uxtb	r3, r3
 8010830:	2b20      	cmp	r3, #32
 8010832:	f040 8214 	bne.w	8010c5e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010838:	9300      	str	r3, [sp, #0]
 801083a:	2319      	movs	r3, #25
 801083c:	2201      	movs	r2, #1
 801083e:	497b      	ldr	r1, [pc, #492]	@ (8010a2c <HAL_I2C_Mem_Read+0x224>)
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f002 f981 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 801084c:	2302      	movs	r3, #2
 801084e:	e207      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010856:	2b01      	cmp	r3, #1
 8010858:	d101      	bne.n	801085e <HAL_I2C_Mem_Read+0x56>
 801085a:	2302      	movs	r3, #2
 801085c:	e200      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f003 0301 	and.w	r3, r3, #1
 8010870:	2b01      	cmp	r3, #1
 8010872:	d007      	beq.n	8010884 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f042 0201 	orr.w	r2, r2, #1
 8010882:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010892:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2222      	movs	r2, #34	@ 0x22
 8010898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2240      	movs	r2, #64	@ 0x40
 80108a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2200      	movs	r2, #0
 80108a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80108b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	4a5b      	ldr	r2, [pc, #364]	@ (8010a30 <HAL_I2C_Mem_Read+0x228>)
 80108c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80108c6:	88f8      	ldrh	r0, [r7, #6]
 80108c8:	893a      	ldrh	r2, [r7, #8]
 80108ca:	8979      	ldrh	r1, [r7, #10]
 80108cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ce:	9301      	str	r3, [sp, #4]
 80108d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	4603      	mov	r3, r0
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f001 ffa6 	bl	8012828 <I2C_RequestMemoryRead>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d001      	beq.n	80108e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80108e2:	2301      	movs	r3, #1
 80108e4:	e1bc      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d113      	bne.n	8010916 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80108ee:	2300      	movs	r3, #0
 80108f0:	623b      	str	r3, [r7, #32]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	695b      	ldr	r3, [r3, #20]
 80108f8:	623b      	str	r3, [r7, #32]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	623b      	str	r3, [r7, #32]
 8010902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	e190      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801091a:	2b01      	cmp	r3, #1
 801091c:	d11b      	bne.n	8010956 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801092c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801092e:	2300      	movs	r3, #0
 8010930:	61fb      	str	r3, [r7, #28]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	695b      	ldr	r3, [r3, #20]
 8010938:	61fb      	str	r3, [r7, #28]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	699b      	ldr	r3, [r3, #24]
 8010940:	61fb      	str	r3, [r7, #28]
 8010942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	e170      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801095a:	2b02      	cmp	r3, #2
 801095c:	d11b      	bne.n	8010996 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801096c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	681a      	ldr	r2, [r3, #0]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801097c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801097e:	2300      	movs	r3, #0
 8010980:	61bb      	str	r3, [r7, #24]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	695b      	ldr	r3, [r3, #20]
 8010988:	61bb      	str	r3, [r7, #24]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	61bb      	str	r3, [r7, #24]
 8010992:	69bb      	ldr	r3, [r7, #24]
 8010994:	e150      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010996:	2300      	movs	r3, #0
 8010998:	617b      	str	r3, [r7, #20]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	617b      	str	r3, [r7, #20]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	617b      	str	r3, [r7, #20]
 80109aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80109ac:	e144      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	f200 80f1 	bhi.w	8010b9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d123      	bne.n	8010a08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80109c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f002 fa9b 	bl	8012f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80109d0:	2301      	movs	r3, #1
 80109d2:	e145      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	691a      	ldr	r2, [r3, #16]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109de:	b2d2      	uxtb	r2, r2
 80109e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109f0:	3b01      	subs	r3, #1
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	3b01      	subs	r3, #1
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010a06:	e117      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	d14e      	bne.n	8010aae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a16:	2200      	movs	r2, #0
 8010a18:	4906      	ldr	r1, [pc, #24]	@ (8010a34 <HAL_I2C_Mem_Read+0x22c>)
 8010a1a:	68f8      	ldr	r0, [r7, #12]
 8010a1c:	f002 f894 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d008      	beq.n	8010a38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8010a26:	2301      	movs	r3, #1
 8010a28:	e11a      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
 8010a2a:	bf00      	nop
 8010a2c:	00100002 	.word	0x00100002
 8010a30:	ffff0000 	.word	0xffff0000
 8010a34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	691a      	ldr	r2, [r3, #16]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a52:	b2d2      	uxtb	r2, r2
 8010a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a5a:	1c5a      	adds	r2, r3, #1
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a64:	3b01      	subs	r3, #1
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	3b01      	subs	r3, #1
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	691a      	ldr	r2, [r3, #16]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a84:	b2d2      	uxtb	r2, r2
 8010a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a8c:	1c5a      	adds	r2, r3, #1
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a96:	3b01      	subs	r3, #1
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010aac:	e0c4      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	496c      	ldr	r1, [pc, #432]	@ (8010c68 <HAL_I2C_Mem_Read+0x460>)
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f002 f845 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d001      	beq.n	8010ac8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e0cb      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	691a      	ldr	r2, [r3, #16]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae2:	b2d2      	uxtb	r2, r2
 8010ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aea:	1c5a      	adds	r2, r3, #1
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010af4:	3b01      	subs	r3, #1
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	3b01      	subs	r3, #1
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b10:	2200      	movs	r2, #0
 8010b12:	4955      	ldr	r1, [pc, #340]	@ (8010c68 <HAL_I2C_Mem_Read+0x460>)
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f002 f817 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d001      	beq.n	8010b24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8010b20:	2301      	movs	r3, #1
 8010b22:	e09d      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	691a      	ldr	r2, [r3, #16]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b3e:	b2d2      	uxtb	r2, r2
 8010b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b46:	1c5a      	adds	r2, r3, #1
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b50:	3b01      	subs	r3, #1
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	691a      	ldr	r2, [r3, #16]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b70:	b2d2      	uxtb	r2, r2
 8010b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b78:	1c5a      	adds	r2, r3, #1
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b82:	3b01      	subs	r3, #1
 8010b84:	b29a      	uxth	r2, r3
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	3b01      	subs	r3, #1
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010b98:	e04e      	b.n	8010c38 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f002 f9ae 	bl	8012f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d001      	beq.n	8010bae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8010baa:	2301      	movs	r3, #1
 8010bac:	e058      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	691a      	ldr	r2, [r3, #16]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bb8:	b2d2      	uxtb	r2, r2
 8010bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc0:	1c5a      	adds	r2, r3, #1
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bca:	3b01      	subs	r3, #1
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	695b      	ldr	r3, [r3, #20]
 8010be6:	f003 0304 	and.w	r3, r3, #4
 8010bea:	2b04      	cmp	r3, #4
 8010bec:	d124      	bne.n	8010c38 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d107      	bne.n	8010c06 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010c04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	691a      	ldr	r2, [r3, #16]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c22:	3b01      	subs	r3, #1
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	3b01      	subs	r3, #1
 8010c32:	b29a      	uxth	r2, r3
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f47f aeb6 	bne.w	80109ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2220      	movs	r2, #32
 8010c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e000      	b.n	8010c60 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8010c5e:	2302      	movs	r3, #2
  }
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3728      	adds	r7, #40	@ 0x28
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	00010004 	.word	0x00010004

08010c6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b088      	sub	sp, #32
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8010c74:	2300      	movs	r3, #0
 8010c76:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c84:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010c8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c94:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	2b10      	cmp	r3, #16
 8010c9a:	d003      	beq.n	8010ca4 <HAL_I2C_EV_IRQHandler+0x38>
 8010c9c:	7bfb      	ldrb	r3, [r7, #15]
 8010c9e:	2b40      	cmp	r3, #64	@ 0x40
 8010ca0:	f040 80b1 	bne.w	8010e06 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	695b      	ldr	r3, [r3, #20]
 8010cb2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	f003 0301 	and.w	r3, r3, #1
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10d      	bne.n	8010cda <HAL_I2C_EV_IRQHandler+0x6e>
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8010cc4:	d003      	beq.n	8010cce <HAL_I2C_EV_IRQHandler+0x62>
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8010ccc:	d101      	bne.n	8010cd2 <HAL_I2C_EV_IRQHandler+0x66>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e000      	b.n	8010cd4 <HAL_I2C_EV_IRQHandler+0x68>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	f000 8114 	beq.w	8010f02 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	f003 0301 	and.w	r3, r3, #1
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d00b      	beq.n	8010cfc <HAL_I2C_EV_IRQHandler+0x90>
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d006      	beq.n	8010cfc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f002 f992 	bl	8013018 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 fd94 	bl	8011822 <I2C_Master_SB>
 8010cfa:	e083      	b.n	8010e04 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	f003 0308 	and.w	r3, r3, #8
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d008      	beq.n	8010d18 <HAL_I2C_EV_IRQHandler+0xac>
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d003      	beq.n	8010d18 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 fe0c 	bl	801192e <I2C_Master_ADD10>
 8010d16:	e075      	b.n	8010e04 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	f003 0302 	and.w	r3, r3, #2
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d008      	beq.n	8010d34 <HAL_I2C_EV_IRQHandler+0xc8>
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d003      	beq.n	8010d34 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 fe28 	bl	8011982 <I2C_Master_ADDR>
 8010d32:	e067      	b.n	8010e04 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	f003 0304 	and.w	r3, r3, #4
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d036      	beq.n	8010dac <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	685b      	ldr	r3, [r3, #4]
 8010d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010d4c:	f000 80db 	beq.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00d      	beq.n	8010d76 <HAL_I2C_EV_IRQHandler+0x10a>
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d008      	beq.n	8010d76 <HAL_I2C_EV_IRQHandler+0x10a>
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	f003 0304 	and.w	r3, r3, #4
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d103      	bne.n	8010d76 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f9f0 	bl	8011154 <I2C_MasterTransmit_TXE>
 8010d74:	e046      	b.n	8010e04 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	f003 0304 	and.w	r3, r3, #4
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	f000 80c2 	beq.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f000 80bc 	beq.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010d8e:	7bbb      	ldrb	r3, [r7, #14]
 8010d90:	2b21      	cmp	r3, #33	@ 0x21
 8010d92:	d103      	bne.n	8010d9c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fa79 	bl	801128c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010d9a:	e0b4      	b.n	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8010d9c:	7bfb      	ldrb	r3, [r7, #15]
 8010d9e:	2b40      	cmp	r3, #64	@ 0x40
 8010da0:	f040 80b1 	bne.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 fae7 	bl	8011378 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010daa:	e0ac      	b.n	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010db6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010dba:	f000 80a4 	beq.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00d      	beq.n	8010de4 <HAL_I2C_EV_IRQHandler+0x178>
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d008      	beq.n	8010de4 <HAL_I2C_EV_IRQHandler+0x178>
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	f003 0304 	and.w	r3, r3, #4
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fb63 	bl	80114a8 <I2C_MasterReceive_RXNE>
 8010de2:	e00f      	b.n	8010e04 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f000 808b 	beq.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f000 8085 	beq.w	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 fc1b 	bl	8011638 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010e02:	e080      	b.n	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
 8010e04:	e07f      	b.n	8010f06 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d004      	beq.n	8010e18 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	695b      	ldr	r3, [r3, #20]
 8010e14:	61fb      	str	r3, [r7, #28]
 8010e16:	e007      	b.n	8010e28 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	695b      	ldr	r3, [r3, #20]
 8010e26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	f003 0302 	and.w	r3, r3, #2
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d011      	beq.n	8010e56 <HAL_I2C_EV_IRQHandler+0x1ea>
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00c      	beq.n	8010e56 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d003      	beq.n	8010e4c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	699b      	ldr	r3, [r3, #24]
 8010e4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8010e4c:	69b9      	ldr	r1, [r7, #24]
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 ffe6 	bl	8011e20 <I2C_Slave_ADDR>
 8010e54:	e05a      	b.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	f003 0310 	and.w	r3, r3, #16
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d008      	beq.n	8010e72 <HAL_I2C_EV_IRQHandler+0x206>
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f001 f820 	bl	8011eb0 <I2C_Slave_STOPF>
 8010e70:	e04c      	b.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010e72:	7bbb      	ldrb	r3, [r7, #14]
 8010e74:	2b21      	cmp	r3, #33	@ 0x21
 8010e76:	d002      	beq.n	8010e7e <HAL_I2C_EV_IRQHandler+0x212>
 8010e78:	7bbb      	ldrb	r3, [r7, #14]
 8010e7a:	2b29      	cmp	r3, #41	@ 0x29
 8010e7c:	d120      	bne.n	8010ec0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00d      	beq.n	8010ea4 <HAL_I2C_EV_IRQHandler+0x238>
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d008      	beq.n	8010ea4 <HAL_I2C_EV_IRQHandler+0x238>
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	f003 0304 	and.w	r3, r3, #4
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d103      	bne.n	8010ea4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 ff01 	bl	8011ca4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010ea2:	e032      	b.n	8010f0a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	f003 0304 	and.w	r3, r3, #4
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d02d      	beq.n	8010f0a <HAL_I2C_EV_IRQHandler+0x29e>
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d028      	beq.n	8010f0a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f000 ff30 	bl	8011d1e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010ebe:	e024      	b.n	8010f0a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00d      	beq.n	8010ee6 <HAL_I2C_EV_IRQHandler+0x27a>
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d008      	beq.n	8010ee6 <HAL_I2C_EV_IRQHandler+0x27a>
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	f003 0304 	and.w	r3, r3, #4
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d103      	bne.n	8010ee6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 ff3e 	bl	8011d60 <I2C_SlaveReceive_RXNE>
 8010ee4:	e012      	b.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010ee6:	69fb      	ldr	r3, [r7, #28]
 8010ee8:	f003 0304 	and.w	r3, r3, #4
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00d      	beq.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d008      	beq.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 ff6e 	bl	8011ddc <I2C_SlaveReceive_BTF>
 8010f00:	e004      	b.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8010f02:	bf00      	nop
 8010f04:	e002      	b.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010f06:	bf00      	nop
 8010f08:	e000      	b.n	8010f0c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010f0a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8010f0c:	3720      	adds	r7, #32
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b08a      	sub	sp, #40	@ 0x28
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	695b      	ldr	r3, [r3, #20]
 8010f20:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010f34:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010f36:	6a3b      	ldr	r3, [r7, #32]
 8010f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00d      	beq.n	8010f5c <HAL_I2C_ER_IRQHandler+0x4a>
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d008      	beq.n	8010f5c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4c:	f043 0301 	orr.w	r3, r3, #1
 8010f50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010f5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00d      	beq.n	8010f82 <HAL_I2C_ER_IRQHandler+0x70>
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d008      	beq.n	8010f82 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8010f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f72:	f043 0302 	orr.w	r3, r3, #2
 8010f76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8010f80:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010f82:	6a3b      	ldr	r3, [r7, #32]
 8010f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d03e      	beq.n	801100a <HAL_I2C_ER_IRQHandler+0xf8>
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d039      	beq.n	801100a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8010f96:	7efb      	ldrb	r3, [r7, #27]
 8010f98:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fa8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8010fb0:	7ebb      	ldrb	r3, [r7, #26]
 8010fb2:	2b20      	cmp	r3, #32
 8010fb4:	d112      	bne.n	8010fdc <HAL_I2C_ER_IRQHandler+0xca>
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d10f      	bne.n	8010fdc <HAL_I2C_ER_IRQHandler+0xca>
 8010fbc:	7cfb      	ldrb	r3, [r7, #19]
 8010fbe:	2b21      	cmp	r3, #33	@ 0x21
 8010fc0:	d008      	beq.n	8010fd4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8010fc2:	7cfb      	ldrb	r3, [r7, #19]
 8010fc4:	2b29      	cmp	r3, #41	@ 0x29
 8010fc6:	d005      	beq.n	8010fd4 <HAL_I2C_ER_IRQHandler+0xc2>
 8010fc8:	7cfb      	ldrb	r3, [r7, #19]
 8010fca:	2b28      	cmp	r3, #40	@ 0x28
 8010fcc:	d106      	bne.n	8010fdc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2b21      	cmp	r3, #33	@ 0x21
 8010fd2:	d103      	bne.n	8010fdc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f001 f89b 	bl	8012110 <I2C_Slave_AF>
 8010fda:	e016      	b.n	801100a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010fe4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe8:	f043 0304 	orr.w	r3, r3, #4
 8010fec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010fee:	7efb      	ldrb	r3, [r7, #27]
 8010ff0:	2b10      	cmp	r3, #16
 8010ff2:	d002      	beq.n	8010ffa <HAL_I2C_ER_IRQHandler+0xe8>
 8010ff4:	7efb      	ldrb	r3, [r7, #27]
 8010ff6:	2b40      	cmp	r3, #64	@ 0x40
 8010ff8:	d107      	bne.n	801100a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011008:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00d      	beq.n	8011030 <HAL_I2C_ER_IRQHandler+0x11e>
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801101a:	2b00      	cmp	r3, #0
 801101c:	d008      	beq.n	8011030 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011020:	f043 0308 	orr.w	r3, r3, #8
 8011024:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 801102e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8011030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011032:	2b00      	cmp	r3, #0
 8011034:	d008      	beq.n	8011048 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103c:	431a      	orrs	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f001 f8d8 	bl	80121f8 <I2C_ITError>
  }
}
 8011048:	bf00      	nop
 801104a:	3728      	adds	r7, #40	@ 0x28
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801106c:	bf00      	nop
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr

0801108c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8011094:	bf00      	nop
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
 80110ac:	4613      	mov	r3, r2
 80110ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80110c4:	bf00      	nop
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80110d8:	bf00      	nop
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80110ec:	bf00      	nop
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8011100:	bf00      	nop
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr

0801110c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8011114:	bf00      	nop
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801112e:	b2db      	uxtb	r3, r3
}
 8011130:	4618      	mov	r0, r3
 8011132:	370c      	adds	r7, #12
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8011148:	4618      	mov	r0, r3
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011162:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801116a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011170:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011176:	2b00      	cmp	r3, #0
 8011178:	d150      	bne.n	801121c <I2C_MasterTransmit_TXE+0xc8>
 801117a:	7bfb      	ldrb	r3, [r7, #15]
 801117c:	2b21      	cmp	r3, #33	@ 0x21
 801117e:	d14d      	bne.n	801121c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2b08      	cmp	r3, #8
 8011184:	d01d      	beq.n	80111c2 <I2C_MasterTransmit_TXE+0x6e>
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b20      	cmp	r3, #32
 801118a:	d01a      	beq.n	80111c2 <I2C_MasterTransmit_TXE+0x6e>
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011192:	d016      	beq.n	80111c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	685a      	ldr	r2, [r3, #4]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80111a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2211      	movs	r2, #17
 80111a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2220      	movs	r2, #32
 80111b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f7ff ff48 	bl	8011050 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80111c0:	e060      	b.n	8011284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	685a      	ldr	r2, [r3, #4]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80111d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80111e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2220      	movs	r2, #32
 80111ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	2b40      	cmp	r3, #64	@ 0x40
 80111fa:	d107      	bne.n	801120c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff ff63 	bl	80110d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801120a:	e03b      	b.n	8011284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2200      	movs	r2, #0
 8011210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff ff1b 	bl	8011050 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801121a:	e033      	b.n	8011284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801121c:	7bfb      	ldrb	r3, [r7, #15]
 801121e:	2b21      	cmp	r3, #33	@ 0x21
 8011220:	d005      	beq.n	801122e <I2C_MasterTransmit_TXE+0xda>
 8011222:	7bbb      	ldrb	r3, [r7, #14]
 8011224:	2b40      	cmp	r3, #64	@ 0x40
 8011226:	d12d      	bne.n	8011284 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	2b22      	cmp	r3, #34	@ 0x22
 801122c:	d12a      	bne.n	8011284 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011232:	b29b      	uxth	r3, r3
 8011234:	2b00      	cmp	r3, #0
 8011236:	d108      	bne.n	801124a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	685a      	ldr	r2, [r3, #4]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011246:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8011248:	e01c      	b.n	8011284 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b40      	cmp	r3, #64	@ 0x40
 8011254:	d103      	bne.n	801125e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 f88e 	bl	8011378 <I2C_MemoryTransmit_TXE_BTF>
}
 801125c:	e012      	b.n	8011284 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011262:	781a      	ldrb	r2, [r3, #0]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011278:	b29b      	uxth	r3, r3
 801127a:	3b01      	subs	r3, #1
 801127c:	b29a      	uxth	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8011282:	e7ff      	b.n	8011284 <I2C_MasterTransmit_TXE+0x130>
 8011284:	bf00      	nop
 8011286:	3710      	adds	r7, #16
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011298:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	2b21      	cmp	r3, #33	@ 0x21
 80112a4:	d164      	bne.n	8011370 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d012      	beq.n	80112d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112b4:	781a      	ldrb	r2, [r3, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c0:	1c5a      	adds	r2, r3, #1
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	3b01      	subs	r3, #1
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80112d4:	e04c      	b.n	8011370 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2b08      	cmp	r3, #8
 80112da:	d01d      	beq.n	8011318 <I2C_MasterTransmit_BTF+0x8c>
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2b20      	cmp	r3, #32
 80112e0:	d01a      	beq.n	8011318 <I2C_MasterTransmit_BTF+0x8c>
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80112e8:	d016      	beq.n	8011318 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	685a      	ldr	r2, [r3, #4]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80112f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2211      	movs	r2, #17
 80112fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2220      	movs	r2, #32
 801130c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7ff fe9d 	bl	8011050 <HAL_I2C_MasterTxCpltCallback>
}
 8011316:	e02b      	b.n	8011370 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011326:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011336:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2220      	movs	r2, #32
 8011342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801134c:	b2db      	uxtb	r3, r3
 801134e:	2b40      	cmp	r3, #64	@ 0x40
 8011350:	d107      	bne.n	8011362 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f7ff feb8 	bl	80110d0 <HAL_I2C_MemTxCpltCallback>
}
 8011360:	e006      	b.n	8011370 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7ff fe70 	bl	8011050 <HAL_I2C_MasterTxCpltCallback>
}
 8011370:	bf00      	nop
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011386:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801138c:	2b00      	cmp	r3, #0
 801138e:	d11d      	bne.n	80113cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011394:	2b01      	cmp	r3, #1
 8011396:	d10b      	bne.n	80113b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801139c:	b2da      	uxtb	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113a8:	1c9a      	adds	r2, r3, #2
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80113ae:	e077      	b.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	121b      	asrs	r3, r3, #8
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113c4:	1c5a      	adds	r2, r3, #1
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80113ca:	e069      	b.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d10b      	bne.n	80113ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113d8:	b2da      	uxtb	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113e4:	1c5a      	adds	r2, r3, #1
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80113ea:	e059      	b.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113f0:	2b02      	cmp	r3, #2
 80113f2:	d152      	bne.n	801149a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80113f4:	7bfb      	ldrb	r3, [r7, #15]
 80113f6:	2b22      	cmp	r3, #34	@ 0x22
 80113f8:	d10d      	bne.n	8011416 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011408:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8011414:	e044      	b.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801141a:	b29b      	uxth	r3, r3
 801141c:	2b00      	cmp	r3, #0
 801141e:	d015      	beq.n	801144c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	2b21      	cmp	r3, #33	@ 0x21
 8011424:	d112      	bne.n	801144c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801142a:	781a      	ldrb	r2, [r3, #0]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011436:	1c5a      	adds	r2, r3, #1
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011440:	b29b      	uxth	r3, r3
 8011442:	3b01      	subs	r3, #1
 8011444:	b29a      	uxth	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 801144a:	e029      	b.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011450:	b29b      	uxth	r3, r3
 8011452:	2b00      	cmp	r3, #0
 8011454:	d124      	bne.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8011456:	7bfb      	ldrb	r3, [r7, #15]
 8011458:	2b21      	cmp	r3, #33	@ 0x21
 801145a:	d121      	bne.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801146a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801147a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2220      	movs	r2, #32
 8011486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7ff fe1c 	bl	80110d0 <HAL_I2C_MemTxCpltCallback>
}
 8011498:	e002      	b.n	80114a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7fe fd75 	bl	800ff8a <I2C_Flush_DR>
}
 80114a0:	bf00      	nop
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	2b22      	cmp	r3, #34	@ 0x22
 80114ba:	f040 80b9 	bne.w	8011630 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2b03      	cmp	r3, #3
 80114d0:	d921      	bls.n	8011516 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	691a      	ldr	r2, [r3, #16]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114dc:	b2d2      	uxtb	r2, r2
 80114de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	3b01      	subs	r3, #1
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	2b03      	cmp	r3, #3
 8011500:	f040 8096 	bne.w	8011630 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	685a      	ldr	r2, [r3, #4]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011512:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8011514:	e08c      	b.n	8011630 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801151a:	2b02      	cmp	r3, #2
 801151c:	d07f      	beq.n	801161e <I2C_MasterReceive_RXNE+0x176>
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2b01      	cmp	r3, #1
 8011522:	d002      	beq.n	801152a <I2C_MasterReceive_RXNE+0x82>
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d179      	bne.n	801161e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f001 fcb6 	bl	8012e9c <I2C_WaitOnSTOPRequestThroughIT>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d14c      	bne.n	80115d0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011544:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	685a      	ldr	r2, [r3, #4]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011554:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	691a      	ldr	r2, [r3, #16]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011560:	b2d2      	uxtb	r2, r2
 8011562:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011568:	1c5a      	adds	r2, r3, #1
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011572:	b29b      	uxth	r3, r3
 8011574:	3b01      	subs	r3, #1
 8011576:	b29a      	uxth	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2220      	movs	r2, #32
 8011580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801158a:	b2db      	uxtb	r3, r3
 801158c:	2b40      	cmp	r3, #64	@ 0x40
 801158e:	d10a      	bne.n	80115a6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2200      	movs	r2, #0
 801159c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7ff fda0 	bl	80110e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80115a4:	e044      	b.n	8011630 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2b08      	cmp	r3, #8
 80115b2:	d002      	beq.n	80115ba <I2C_MasterReceive_RXNE+0x112>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b20      	cmp	r3, #32
 80115b8:	d103      	bne.n	80115c2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	631a      	str	r2, [r3, #48]	@ 0x30
 80115c0:	e002      	b.n	80115c8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2212      	movs	r2, #18
 80115c6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7ff fd4b 	bl	8011064 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80115ce:	e02f      	b.n	8011630 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	685a      	ldr	r2, [r3, #4]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80115de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	691a      	ldr	r2, [r3, #16]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115ea:	b2d2      	uxtb	r2, r2
 80115ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f2:	1c5a      	adds	r2, r3, #1
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	3b01      	subs	r3, #1
 8011600:	b29a      	uxth	r2, r3
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2220      	movs	r2, #32
 801160a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff fd6e 	bl	80110f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801161c:	e008      	b.n	8011630 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801162c:	605a      	str	r2, [r3, #4]
}
 801162e:	e7ff      	b.n	8011630 <I2C_MasterReceive_RXNE+0x188>
 8011630:	bf00      	nop
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011644:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801164a:	b29b      	uxth	r3, r3
 801164c:	2b04      	cmp	r3, #4
 801164e:	d11b      	bne.n	8011688 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	685a      	ldr	r2, [r3, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801165e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	691a      	ldr	r2, [r3, #16]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166a:	b2d2      	uxtb	r2, r2
 801166c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801167c:	b29b      	uxth	r3, r3
 801167e:	3b01      	subs	r3, #1
 8011680:	b29a      	uxth	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8011686:	e0c8      	b.n	801181a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801168c:	b29b      	uxth	r3, r3
 801168e:	2b03      	cmp	r3, #3
 8011690:	d129      	bne.n	80116e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	685a      	ldr	r2, [r3, #4]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80116a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b04      	cmp	r3, #4
 80116a6:	d00a      	beq.n	80116be <I2C_MasterReceive_BTF+0x86>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2b02      	cmp	r3, #2
 80116ac:	d007      	beq.n	80116be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80116bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	691a      	ldr	r2, [r3, #16]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c8:	b2d2      	uxtb	r2, r2
 80116ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116d0:	1c5a      	adds	r2, r3, #1
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116da:	b29b      	uxth	r3, r3
 80116dc:	3b01      	subs	r3, #1
 80116de:	b29a      	uxth	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80116e4:	e099      	b.n	801181a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	2b02      	cmp	r3, #2
 80116ee:	f040 8081 	bne.w	80117f4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d002      	beq.n	80116fe <I2C_MasterReceive_BTF+0xc6>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b10      	cmp	r3, #16
 80116fc:	d108      	bne.n	8011710 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	e019      	b.n	8011744 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2b04      	cmp	r3, #4
 8011714:	d002      	beq.n	801171c <I2C_MasterReceive_BTF+0xe4>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b02      	cmp	r3, #2
 801171a:	d108      	bne.n	801172e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801172a:	601a      	str	r2, [r3, #0]
 801172c:	e00a      	b.n	8011744 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b10      	cmp	r3, #16
 8011732:	d007      	beq.n	8011744 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011742:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	691a      	ldr	r2, [r3, #16]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801174e:	b2d2      	uxtb	r2, r2
 8011750:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011756:	1c5a      	adds	r2, r3, #1
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011760:	b29b      	uxth	r3, r3
 8011762:	3b01      	subs	r3, #1
 8011764:	b29a      	uxth	r2, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	691a      	ldr	r2, [r3, #16]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011774:	b2d2      	uxtb	r2, r2
 8011776:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801177c:	1c5a      	adds	r2, r3, #1
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011786:	b29b      	uxth	r3, r3
 8011788:	3b01      	subs	r3, #1
 801178a:	b29a      	uxth	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	685a      	ldr	r2, [r3, #4]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 801179e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2220      	movs	r2, #32
 80117a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	2b40      	cmp	r3, #64	@ 0x40
 80117b2:	d10a      	bne.n	80117ca <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2200      	movs	r2, #0
 80117c0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f7ff fc8e 	bl	80110e4 <HAL_I2C_MemRxCpltCallback>
}
 80117c8:	e027      	b.n	801181a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2b08      	cmp	r3, #8
 80117d6:	d002      	beq.n	80117de <I2C_MasterReceive_BTF+0x1a6>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	2b20      	cmp	r3, #32
 80117dc:	d103      	bne.n	80117e6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80117e4:	e002      	b.n	80117ec <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2212      	movs	r2, #18
 80117ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f7ff fc39 	bl	8011064 <HAL_I2C_MasterRxCpltCallback>
}
 80117f2:	e012      	b.n	801181a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	691a      	ldr	r2, [r3, #16]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117fe:	b2d2      	uxtb	r2, r2
 8011800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011810:	b29b      	uxth	r3, r3
 8011812:	3b01      	subs	r3, #1
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 801181a:	bf00      	nop
 801181c:	3710      	adds	r7, #16
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011822:	b480      	push	{r7}
 8011824:	b083      	sub	sp, #12
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011830:	b2db      	uxtb	r3, r3
 8011832:	2b40      	cmp	r3, #64	@ 0x40
 8011834:	d117      	bne.n	8011866 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801183a:	2b00      	cmp	r3, #0
 801183c:	d109      	bne.n	8011852 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011842:	b2db      	uxtb	r3, r3
 8011844:	461a      	mov	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 801184e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011850:	e067      	b.n	8011922 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011856:	b2db      	uxtb	r3, r3
 8011858:	f043 0301 	orr.w	r3, r3, #1
 801185c:	b2da      	uxtb	r2, r3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	611a      	str	r2, [r3, #16]
}
 8011864:	e05d      	b.n	8011922 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	691b      	ldr	r3, [r3, #16]
 801186a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801186e:	d133      	bne.n	80118d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011876:	b2db      	uxtb	r3, r3
 8011878:	2b21      	cmp	r3, #33	@ 0x21
 801187a:	d109      	bne.n	8011890 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011880:	b2db      	uxtb	r3, r3
 8011882:	461a      	mov	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 801188c:	611a      	str	r2, [r3, #16]
 801188e:	e008      	b.n	80118a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011894:	b2db      	uxtb	r3, r3
 8011896:	f043 0301 	orr.w	r3, r3, #1
 801189a:	b2da      	uxtb	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d004      	beq.n	80118b4 <I2C_Master_SB+0x92>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d108      	bne.n	80118c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d032      	beq.n	8011922 <I2C_Master_SB+0x100>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d02d      	beq.n	8011922 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	685a      	ldr	r2, [r3, #4]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80118d4:	605a      	str	r2, [r3, #4]
}
 80118d6:	e024      	b.n	8011922 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d10e      	bne.n	80118fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	11db      	asrs	r3, r3, #7
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	f003 0306 	and.w	r3, r3, #6
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	f063 030f 	orn	r3, r3, #15
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	611a      	str	r2, [r3, #16]
}
 80118fc:	e011      	b.n	8011922 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011902:	2b01      	cmp	r3, #1
 8011904:	d10d      	bne.n	8011922 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801190a:	b29b      	uxth	r3, r3
 801190c:	11db      	asrs	r3, r3, #7
 801190e:	b2db      	uxtb	r3, r3
 8011910:	f003 0306 	and.w	r3, r3, #6
 8011914:	b2db      	uxtb	r3, r3
 8011916:	f063 030e 	orn	r3, r3, #14
 801191a:	b2da      	uxtb	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	611a      	str	r2, [r3, #16]
}
 8011922:	bf00      	nop
 8011924:	370c      	adds	r7, #12
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr

0801192e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801192e:	b480      	push	{r7}
 8011930:	b083      	sub	sp, #12
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801193a:	b2da      	uxtb	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011946:	2b00      	cmp	r3, #0
 8011948:	d004      	beq.n	8011954 <I2C_Master_ADD10+0x26>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801194e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011950:	2b00      	cmp	r3, #0
 8011952:	d108      	bne.n	8011966 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011958:	2b00      	cmp	r3, #0
 801195a:	d00c      	beq.n	8011976 <I2C_Master_ADD10+0x48>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011962:	2b00      	cmp	r3, #0
 8011964:	d007      	beq.n	8011976 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	685a      	ldr	r2, [r3, #4]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011974:	605a      	str	r2, [r3, #4]
  }
}
 8011976:	bf00      	nop
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr

08011982 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8011982:	b480      	push	{r7}
 8011984:	b091      	sub	sp, #68	@ 0x44
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011990:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011998:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801199e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b22      	cmp	r3, #34	@ 0x22
 80119aa:	f040 8169 	bne.w	8011c80 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d10f      	bne.n	80119d6 <I2C_Master_ADDR+0x54>
 80119b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80119ba:	2b40      	cmp	r3, #64	@ 0x40
 80119bc:	d10b      	bne.n	80119d6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80119be:	2300      	movs	r3, #0
 80119c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	695b      	ldr	r3, [r3, #20]
 80119c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	699b      	ldr	r3, [r3, #24]
 80119d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80119d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d4:	e160      	b.n	8011c98 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d11d      	bne.n	8011a1a <I2C_Master_ADDR+0x98>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	691b      	ldr	r3, [r3, #16]
 80119e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80119e6:	d118      	bne.n	8011a1a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80119e8:	2300      	movs	r3, #0
 80119ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	695b      	ldr	r3, [r3, #20]
 80119f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	699b      	ldr	r3, [r3, #24]
 80119fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011a0c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	651a      	str	r2, [r3, #80]	@ 0x50
 8011a18:	e13e      	b.n	8011c98 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d113      	bne.n	8011a4c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011a24:	2300      	movs	r3, #0
 8011a26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	695b      	ldr	r3, [r3, #20]
 8011a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	699b      	ldr	r3, [r3, #24]
 8011a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011a48:	601a      	str	r2, [r3, #0]
 8011a4a:	e115      	b.n	8011c78 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	2b01      	cmp	r3, #1
 8011a54:	f040 808a 	bne.w	8011b6c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8011a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011a5e:	d137      	bne.n	8011ad0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011a6e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011a7e:	d113      	bne.n	8011aa8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011a8e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011a90:	2300      	movs	r3, #0
 8011a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	695b      	ldr	r3, [r3, #20]
 8011a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	699b      	ldr	r3, [r3, #24]
 8011aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa6:	e0e7      	b.n	8011c78 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	623b      	str	r3, [r7, #32]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	695b      	ldr	r3, [r3, #20]
 8011ab2:	623b      	str	r3, [r7, #32]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	699b      	ldr	r3, [r3, #24]
 8011aba:	623b      	str	r3, [r7, #32]
 8011abc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011acc:	601a      	str	r2, [r3, #0]
 8011ace:	e0d3      	b.n	8011c78 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad2:	2b08      	cmp	r3, #8
 8011ad4:	d02e      	beq.n	8011b34 <I2C_Master_ADDR+0x1b2>
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad8:	2b20      	cmp	r3, #32
 8011ada:	d02b      	beq.n	8011b34 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8011adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ade:	2b12      	cmp	r3, #18
 8011ae0:	d102      	bne.n	8011ae8 <I2C_Master_ADDR+0x166>
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d125      	bne.n	8011b34 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aea:	2b04      	cmp	r3, #4
 8011aec:	d00e      	beq.n	8011b0c <I2C_Master_ADDR+0x18a>
 8011aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af0:	2b02      	cmp	r3, #2
 8011af2:	d00b      	beq.n	8011b0c <I2C_Master_ADDR+0x18a>
 8011af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af6:	2b10      	cmp	r3, #16
 8011af8:	d008      	beq.n	8011b0c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	e007      	b.n	8011b1c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011b1a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	61fb      	str	r3, [r7, #28]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	695b      	ldr	r3, [r3, #20]
 8011b26:	61fb      	str	r3, [r7, #28]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	699b      	ldr	r3, [r3, #24]
 8011b2e:	61fb      	str	r3, [r7, #28]
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	e0a1      	b.n	8011c78 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	681a      	ldr	r2, [r3, #0]
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011b42:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011b44:	2300      	movs	r3, #0
 8011b46:	61bb      	str	r3, [r7, #24]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	695b      	ldr	r3, [r3, #20]
 8011b4e:	61bb      	str	r3, [r7, #24]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	699b      	ldr	r3, [r3, #24]
 8011b56:	61bb      	str	r3, [r7, #24]
 8011b58:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	e085      	b.n	8011c78 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d14d      	bne.n	8011c12 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b78:	2b04      	cmp	r3, #4
 8011b7a:	d016      	beq.n	8011baa <I2C_Master_ADDR+0x228>
 8011b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b7e:	2b02      	cmp	r3, #2
 8011b80:	d013      	beq.n	8011baa <I2C_Master_ADDR+0x228>
 8011b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b84:	2b10      	cmp	r3, #16
 8011b86:	d010      	beq.n	8011baa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011b96:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011ba6:	601a      	str	r2, [r3, #0]
 8011ba8:	e007      	b.n	8011bba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011bb8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bc8:	d117      	bne.n	8011bfa <I2C_Master_ADDR+0x278>
 8011bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011bd0:	d00b      	beq.n	8011bea <I2C_Master_ADDR+0x268>
 8011bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d008      	beq.n	8011bea <I2C_Master_ADDR+0x268>
 8011bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bda:	2b08      	cmp	r3, #8
 8011bdc:	d005      	beq.n	8011bea <I2C_Master_ADDR+0x268>
 8011bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be0:	2b10      	cmp	r3, #16
 8011be2:	d002      	beq.n	8011bea <I2C_Master_ADDR+0x268>
 8011be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be6:	2b20      	cmp	r3, #32
 8011be8:	d107      	bne.n	8011bfa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011bf8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	695b      	ldr	r3, [r3, #20]
 8011c04:	617b      	str	r3, [r7, #20]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	699b      	ldr	r3, [r3, #24]
 8011c0c:	617b      	str	r3, [r7, #20]
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	e032      	b.n	8011c78 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011c20:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011c30:	d117      	bne.n	8011c62 <I2C_Master_ADDR+0x2e0>
 8011c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011c38:	d00b      	beq.n	8011c52 <I2C_Master_ADDR+0x2d0>
 8011c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d008      	beq.n	8011c52 <I2C_Master_ADDR+0x2d0>
 8011c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c42:	2b08      	cmp	r3, #8
 8011c44:	d005      	beq.n	8011c52 <I2C_Master_ADDR+0x2d0>
 8011c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c48:	2b10      	cmp	r3, #16
 8011c4a:	d002      	beq.n	8011c52 <I2C_Master_ADDR+0x2d0>
 8011c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c4e:	2b20      	cmp	r3, #32
 8011c50:	d107      	bne.n	8011c62 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011c60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c62:	2300      	movs	r3, #0
 8011c64:	613b      	str	r3, [r7, #16]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	695b      	ldr	r3, [r3, #20]
 8011c6c:	613b      	str	r3, [r7, #16]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	699b      	ldr	r3, [r3, #24]
 8011c74:	613b      	str	r3, [r7, #16]
 8011c76:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8011c7e:	e00b      	b.n	8011c98 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c80:	2300      	movs	r3, #0
 8011c82:	60fb      	str	r3, [r7, #12]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	695b      	ldr	r3, [r3, #20]
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	699b      	ldr	r3, [r3, #24]
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	68fb      	ldr	r3, [r7, #12]
}
 8011c96:	e7ff      	b.n	8011c98 <I2C_Master_ADDR+0x316>
 8011c98:	bf00      	nop
 8011c9a:	3744      	adds	r7, #68	@ 0x44
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr

08011ca4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011cb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d02b      	beq.n	8011d16 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cc2:	781a      	ldrb	r2, [r3, #0]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cce:	1c5a      	adds	r2, r3, #1
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	3b01      	subs	r3, #1
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d114      	bne.n	8011d16 <I2C_SlaveTransmit_TXE+0x72>
 8011cec:	7bfb      	ldrb	r3, [r7, #15]
 8011cee:	2b29      	cmp	r3, #41	@ 0x29
 8011cf0:	d111      	bne.n	8011d16 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	685a      	ldr	r2, [r3, #4]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011d00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2221      	movs	r2, #33	@ 0x21
 8011d06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2228      	movs	r2, #40	@ 0x28
 8011d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff f9b1 	bl	8011078 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011d16:	bf00      	nop
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011d1e:	b480      	push	{r7}
 8011d20:	b083      	sub	sp, #12
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d011      	beq.n	8011d54 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d34:	781a      	ldrb	r2, [r3, #0]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d40:	1c5a      	adds	r2, r3, #1
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8011d54:	bf00      	nop
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d02c      	beq.n	8011dd4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	691a      	ldr	r2, [r3, #16]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d84:	b2d2      	uxtb	r2, r2
 8011d86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d8c:	1c5a      	adds	r2, r3, #1
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	3b01      	subs	r3, #1
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d114      	bne.n	8011dd4 <I2C_SlaveReceive_RXNE+0x74>
 8011daa:	7bfb      	ldrb	r3, [r7, #15]
 8011dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dae:	d111      	bne.n	8011dd4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	685a      	ldr	r2, [r3, #4]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011dbe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2222      	movs	r2, #34	@ 0x22
 8011dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2228      	movs	r2, #40	@ 0x28
 8011dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7ff f95c 	bl	801108c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011dd4:	bf00      	nop
 8011dd6:	3710      	adds	r7, #16
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d012      	beq.n	8011e14 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	691a      	ldr	r2, [r3, #16]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011df8:	b2d2      	uxtb	r2, r2
 8011dfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e00:	1c5a      	adds	r2, r3, #1
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8011e14:	bf00      	nop
 8011e16:	370c      	adds	r7, #12
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr

08011e20 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8011e3a:	2b28      	cmp	r3, #40	@ 0x28
 8011e3c:	d125      	bne.n	8011e8a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	685a      	ldr	r2, [r3, #4]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011e4c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	f003 0304 	and.w	r3, r3, #4
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d103      	bne.n	8011e6e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	81bb      	strh	r3, [r7, #12]
 8011e6c:	e002      	b.n	8011e74 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	699b      	ldr	r3, [r3, #24]
 8011e72:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8011e7c:	89ba      	ldrh	r2, [r7, #12]
 8011e7e:	7bfb      	ldrb	r3, [r7, #15]
 8011e80:	4619      	mov	r1, r3
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7ff f90c 	bl	80110a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011e88:	e00e      	b.n	8011ea8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	60bb      	str	r3, [r7, #8]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	695b      	ldr	r3, [r3, #20]
 8011e94:	60bb      	str	r3, [r7, #8]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	699b      	ldr	r3, [r3, #24]
 8011e9c:	60bb      	str	r3, [r7, #8]
 8011e9e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8011ea8:	bf00      	nop
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011ebe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011ece:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	60bb      	str	r3, [r7, #8]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	695b      	ldr	r3, [r3, #20]
 8011eda:	60bb      	str	r3, [r7, #8]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f042 0201 	orr.w	r2, r2, #1
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011efc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011f0c:	d172      	bne.n	8011ff4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011f0e:	7bfb      	ldrb	r3, [r7, #15]
 8011f10:	2b22      	cmp	r3, #34	@ 0x22
 8011f12:	d002      	beq.n	8011f1a <I2C_Slave_STOPF+0x6a>
 8011f14:	7bfb      	ldrb	r3, [r7, #15]
 8011f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f18:	d135      	bne.n	8011f86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d005      	beq.n	8011f3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f36:	f043 0204 	orr.w	r2, r3, #4
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	685a      	ldr	r2, [r3, #4]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011f4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fd fab8 	bl	800f4c8 <HAL_DMA_GetState>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d049      	beq.n	8011ff2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f62:	4a69      	ldr	r2, [pc, #420]	@ (8012108 <I2C_Slave_STOPF+0x258>)
 8011f64:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fd f900 	bl	800f170 <HAL_DMA_Abort_IT>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d03d      	beq.n	8011ff2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011f80:	4610      	mov	r0, r2
 8011f82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011f84:	e035      	b.n	8011ff2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d005      	beq.n	8011faa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fa2:	f043 0204 	orr.w	r2, r3, #4
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	685a      	ldr	r2, [r3, #4]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011fb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fd fa82 	bl	800f4c8 <HAL_DMA_GetState>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d014      	beq.n	8011ff4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fce:	4a4e      	ldr	r2, [pc, #312]	@ (8012108 <I2C_Slave_STOPF+0x258>)
 8011fd0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fd f8ca 	bl	800f170 <HAL_DMA_Abort_IT>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d008      	beq.n	8011ff4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011fec:	4610      	mov	r0, r2
 8011fee:	4798      	blx	r3
 8011ff0:	e000      	b.n	8011ff4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011ff2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d03e      	beq.n	801207c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	695b      	ldr	r3, [r3, #20]
 8012004:	f003 0304 	and.w	r3, r3, #4
 8012008:	2b04      	cmp	r3, #4
 801200a:	d112      	bne.n	8012032 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	691a      	ldr	r2, [r3, #16]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012016:	b2d2      	uxtb	r2, r2
 8012018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801201e:	1c5a      	adds	r2, r3, #1
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012028:	b29b      	uxth	r3, r3
 801202a:	3b01      	subs	r3, #1
 801202c:	b29a      	uxth	r2, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	695b      	ldr	r3, [r3, #20]
 8012038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801203c:	2b40      	cmp	r3, #64	@ 0x40
 801203e:	d112      	bne.n	8012066 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	691a      	ldr	r2, [r3, #16]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801204a:	b2d2      	uxtb	r2, r2
 801204c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012052:	1c5a      	adds	r2, r3, #1
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801205c:	b29b      	uxth	r3, r3
 801205e:	3b01      	subs	r3, #1
 8012060:	b29a      	uxth	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801206a:	b29b      	uxth	r3, r3
 801206c:	2b00      	cmp	r3, #0
 801206e:	d005      	beq.n	801207c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012074:	f043 0204 	orr.w	r2, r3, #4
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012080:	2b00      	cmp	r3, #0
 8012082:	d003      	beq.n	801208c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f8b7 	bl	80121f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801208a:	e039      	b.n	8012100 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801208c:	7bfb      	ldrb	r3, [r7, #15]
 801208e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012090:	d109      	bne.n	80120a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2228      	movs	r2, #40	@ 0x28
 801209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f7fe fff3 	bl	801108c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b28      	cmp	r3, #40	@ 0x28
 80120b0:	d111      	bne.n	80120d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	4a15      	ldr	r2, [pc, #84]	@ (801210c <I2C_Slave_STOPF+0x25c>)
 80120b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2220      	movs	r2, #32
 80120c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2200      	movs	r2, #0
 80120ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7fe fff4 	bl	80110bc <HAL_I2C_ListenCpltCallback>
}
 80120d4:	e014      	b.n	8012100 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120da:	2b22      	cmp	r3, #34	@ 0x22
 80120dc:	d002      	beq.n	80120e4 <I2C_Slave_STOPF+0x234>
 80120de:	7bfb      	ldrb	r3, [r7, #15]
 80120e0:	2b22      	cmp	r3, #34	@ 0x22
 80120e2:	d10d      	bne.n	8012100 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2220      	movs	r2, #32
 80120ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2200      	movs	r2, #0
 80120f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7fe ffc6 	bl	801108c <HAL_I2C_SlaveRxCpltCallback>
}
 8012100:	bf00      	nop
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	080129f9 	.word	0x080129f9
 801210c:	ffff0000 	.word	0xffff0000

08012110 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b084      	sub	sp, #16
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801211e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012124:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b08      	cmp	r3, #8
 801212a:	d002      	beq.n	8012132 <I2C_Slave_AF+0x22>
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2b20      	cmp	r3, #32
 8012130:	d129      	bne.n	8012186 <I2C_Slave_AF+0x76>
 8012132:	7bfb      	ldrb	r3, [r7, #15]
 8012134:	2b28      	cmp	r3, #40	@ 0x28
 8012136:	d126      	bne.n	8012186 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	4a2e      	ldr	r2, [pc, #184]	@ (80121f4 <I2C_Slave_AF+0xe4>)
 801213c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	685a      	ldr	r2, [r3, #4]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801214c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012156:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012166:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2220      	movs	r2, #32
 8012172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7fe ff9c 	bl	80110bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8012184:	e031      	b.n	80121ea <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8012186:	7bfb      	ldrb	r3, [r7, #15]
 8012188:	2b21      	cmp	r3, #33	@ 0x21
 801218a:	d129      	bne.n	80121e0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	4a19      	ldr	r2, [pc, #100]	@ (80121f4 <I2C_Slave_AF+0xe4>)
 8012190:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2221      	movs	r2, #33	@ 0x21
 8012196:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2220      	movs	r2, #32
 801219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	685a      	ldr	r2, [r3, #4]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80121b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80121c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80121d0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7fd fed9 	bl	800ff8a <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f7fe ff4d 	bl	8011078 <HAL_I2C_SlaveTxCpltCallback>
}
 80121de:	e004      	b.n	80121ea <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80121e8:	615a      	str	r2, [r3, #20]
}
 80121ea:	bf00      	nop
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	ffff0000 	.word	0xffff0000

080121f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012206:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801220e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8012210:	7bbb      	ldrb	r3, [r7, #14]
 8012212:	2b10      	cmp	r3, #16
 8012214:	d002      	beq.n	801221c <I2C_ITError+0x24>
 8012216:	7bbb      	ldrb	r3, [r7, #14]
 8012218:	2b40      	cmp	r3, #64	@ 0x40
 801221a:	d10a      	bne.n	8012232 <I2C_ITError+0x3a>
 801221c:	7bfb      	ldrb	r3, [r7, #15]
 801221e:	2b22      	cmp	r3, #34	@ 0x22
 8012220:	d107      	bne.n	8012232 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012230:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012232:	7bfb      	ldrb	r3, [r7, #15]
 8012234:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8012238:	2b28      	cmp	r3, #40	@ 0x28
 801223a:	d107      	bne.n	801224c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2228      	movs	r2, #40	@ 0x28
 8012246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801224a:	e015      	b.n	8012278 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801225a:	d00a      	beq.n	8012272 <I2C_ITError+0x7a>
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	2b60      	cmp	r3, #96	@ 0x60
 8012260:	d007      	beq.n	8012272 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2220      	movs	r2, #32
 8012266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012286:	d162      	bne.n	801234e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	685a      	ldr	r2, [r3, #4]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012296:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801229c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d020      	beq.n	80122e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122aa:	4a6a      	ldr	r2, [pc, #424]	@ (8012454 <I2C_ITError+0x25c>)
 80122ac:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7fc ff5c 	bl	800f170 <HAL_DMA_Abort_IT>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	f000 8089 	beq.w	80123d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f022 0201 	bic.w	r2, r2, #1
 80122ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2220      	movs	r2, #32
 80122d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80122e2:	4610      	mov	r0, r2
 80122e4:	4798      	blx	r3
 80122e6:	e074      	b.n	80123d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ec:	4a59      	ldr	r2, [pc, #356]	@ (8012454 <I2C_ITError+0x25c>)
 80122ee:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fc ff3b 	bl	800f170 <HAL_DMA_Abort_IT>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d068      	beq.n	80123d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	695b      	ldr	r3, [r3, #20]
 8012306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801230a:	2b40      	cmp	r3, #64	@ 0x40
 801230c:	d10b      	bne.n	8012326 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	691a      	ldr	r2, [r3, #16]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012318:	b2d2      	uxtb	r2, r2
 801231a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012320:	1c5a      	adds	r2, r3, #1
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f022 0201 	bic.w	r2, r2, #1
 8012334:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2220      	movs	r2, #32
 801233a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8012348:	4610      	mov	r0, r2
 801234a:	4798      	blx	r3
 801234c:	e041      	b.n	80123d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b60      	cmp	r3, #96	@ 0x60
 8012358:	d125      	bne.n	80123a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2220      	movs	r2, #32
 801235e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2200      	movs	r2, #0
 8012366:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	695b      	ldr	r3, [r3, #20]
 801236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012372:	2b40      	cmp	r3, #64	@ 0x40
 8012374:	d10b      	bne.n	801238e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	691a      	ldr	r2, [r3, #16]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012380:	b2d2      	uxtb	r2, r2
 8012382:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012388:	1c5a      	adds	r2, r3, #1
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f022 0201 	bic.w	r2, r2, #1
 801239c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7fe feb4 	bl	801110c <HAL_I2C_AbortCpltCallback>
 80123a4:	e015      	b.n	80123d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	695b      	ldr	r3, [r3, #20]
 80123ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123b0:	2b40      	cmp	r3, #64	@ 0x40
 80123b2:	d10b      	bne.n	80123cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	691a      	ldr	r2, [r3, #16]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123be:	b2d2      	uxtb	r2, r2
 80123c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7fe fe93 	bl	80110f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d10e      	bne.n	8012400 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d109      	bne.n	8012400 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d104      	bne.n	8012400 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d007      	beq.n	8012410 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801240e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012416:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801241c:	f003 0304 	and.w	r3, r3, #4
 8012420:	2b04      	cmp	r3, #4
 8012422:	d113      	bne.n	801244c <I2C_ITError+0x254>
 8012424:	7bfb      	ldrb	r3, [r7, #15]
 8012426:	2b28      	cmp	r3, #40	@ 0x28
 8012428:	d110      	bne.n	801244c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4a0a      	ldr	r2, [pc, #40]	@ (8012458 <I2C_ITError+0x260>)
 801242e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2200      	movs	r2, #0
 8012434:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2220      	movs	r2, #32
 801243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2200      	movs	r2, #0
 8012442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f7fe fe38 	bl	80110bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801244c:	bf00      	nop
 801244e:	3710      	adds	r7, #16
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	080129f9 	.word	0x080129f9
 8012458:	ffff0000 	.word	0xffff0000

0801245c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b088      	sub	sp, #32
 8012460:	af02      	add	r7, sp, #8
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	607a      	str	r2, [r7, #4]
 8012466:	603b      	str	r3, [r7, #0]
 8012468:	460b      	mov	r3, r1
 801246a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012470:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b08      	cmp	r3, #8
 8012476:	d006      	beq.n	8012486 <I2C_MasterRequestWrite+0x2a>
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d003      	beq.n	8012486 <I2C_MasterRequestWrite+0x2a>
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8012484:	d108      	bne.n	8012498 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012494:	601a      	str	r2, [r3, #0]
 8012496:	e00b      	b.n	80124b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801249c:	2b12      	cmp	r3, #18
 801249e:	d107      	bne.n	80124b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80124ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	9300      	str	r3, [sp, #0]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80124bc:	68f8      	ldr	r0, [r7, #12]
 80124be:	f000 fb43 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00d      	beq.n	80124e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80124d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80124d6:	d103      	bne.n	80124e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80124e0:	2303      	movs	r3, #3
 80124e2:	e035      	b.n	8012550 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	691b      	ldr	r3, [r3, #16]
 80124e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80124ec:	d108      	bne.n	8012500 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80124ee:	897b      	ldrh	r3, [r7, #10]
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	461a      	mov	r2, r3
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80124fc:	611a      	str	r2, [r3, #16]
 80124fe:	e01b      	b.n	8012538 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012500:	897b      	ldrh	r3, [r7, #10]
 8012502:	11db      	asrs	r3, r3, #7
 8012504:	b2db      	uxtb	r3, r3
 8012506:	f003 0306 	and.w	r3, r3, #6
 801250a:	b2db      	uxtb	r3, r3
 801250c:	f063 030f 	orn	r3, r3, #15
 8012510:	b2da      	uxtb	r2, r3
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	490e      	ldr	r1, [pc, #56]	@ (8012558 <I2C_MasterRequestWrite+0xfc>)
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f000 fb8c 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801252a:	2301      	movs	r3, #1
 801252c:	e010      	b.n	8012550 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801252e:	897b      	ldrh	r3, [r7, #10]
 8012530:	b2da      	uxtb	r2, r3
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	4907      	ldr	r1, [pc, #28]	@ (801255c <I2C_MasterRequestWrite+0x100>)
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f000 fb7c 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d001      	beq.n	801254e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801254a:	2301      	movs	r3, #1
 801254c:	e000      	b.n	8012550 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	00010008 	.word	0x00010008
 801255c:	00010002 	.word	0x00010002

08012560 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b088      	sub	sp, #32
 8012564:	af02      	add	r7, sp, #8
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	607a      	str	r2, [r7, #4]
 801256a:	603b      	str	r3, [r7, #0]
 801256c:	460b      	mov	r3, r1
 801256e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012574:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012584:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b08      	cmp	r3, #8
 801258a:	d006      	beq.n	801259a <I2C_MasterRequestRead+0x3a>
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	2b01      	cmp	r3, #1
 8012590:	d003      	beq.n	801259a <I2C_MasterRequestRead+0x3a>
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8012598:	d108      	bne.n	80125ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80125a8:	601a      	str	r2, [r3, #0]
 80125aa:	e00b      	b.n	80125c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125b0:	2b11      	cmp	r3, #17
 80125b2:	d107      	bne.n	80125c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80125c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2200      	movs	r2, #0
 80125cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f000 fab9 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00d      	beq.n	80125f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80125e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125ea:	d103      	bne.n	80125f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80125f4:	2303      	movs	r3, #3
 80125f6:	e079      	b.n	80126ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012600:	d108      	bne.n	8012614 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012602:	897b      	ldrh	r3, [r7, #10]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	f043 0301 	orr.w	r3, r3, #1
 801260a:	b2da      	uxtb	r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	611a      	str	r2, [r3, #16]
 8012612:	e05f      	b.n	80126d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012614:	897b      	ldrh	r3, [r7, #10]
 8012616:	11db      	asrs	r3, r3, #7
 8012618:	b2db      	uxtb	r3, r3
 801261a:	f003 0306 	and.w	r3, r3, #6
 801261e:	b2db      	uxtb	r3, r3
 8012620:	f063 030f 	orn	r3, r3, #15
 8012624:	b2da      	uxtb	r2, r3
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	4930      	ldr	r1, [pc, #192]	@ (80126f4 <I2C_MasterRequestRead+0x194>)
 8012632:	68f8      	ldr	r0, [r7, #12]
 8012634:	f000 fb02 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 801263e:	2301      	movs	r3, #1
 8012640:	e054      	b.n	80126ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012642:	897b      	ldrh	r3, [r7, #10]
 8012644:	b2da      	uxtb	r2, r3
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	4929      	ldr	r1, [pc, #164]	@ (80126f8 <I2C_MasterRequestRead+0x198>)
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f000 faf2 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d001      	beq.n	8012662 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801265e:	2301      	movs	r3, #1
 8012660:	e044      	b.n	80126ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012662:	2300      	movs	r3, #0
 8012664:	613b      	str	r3, [r7, #16]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	695b      	ldr	r3, [r3, #20]
 801266c:	613b      	str	r3, [r7, #16]
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	699b      	ldr	r3, [r3, #24]
 8012674:	613b      	str	r3, [r7, #16]
 8012676:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012686:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2200      	movs	r2, #0
 8012690:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8012694:	68f8      	ldr	r0, [r7, #12]
 8012696:	f000 fa57 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d00d      	beq.n	80126bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80126ae:	d103      	bne.n	80126b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126b6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80126b8:	2303      	movs	r3, #3
 80126ba:	e017      	b.n	80126ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80126bc:	897b      	ldrh	r3, [r7, #10]
 80126be:	11db      	asrs	r3, r3, #7
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	f003 0306 	and.w	r3, r3, #6
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	f063 030e 	orn	r3, r3, #14
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	4907      	ldr	r1, [pc, #28]	@ (80126f8 <I2C_MasterRequestRead+0x198>)
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f000 faae 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80126ea:	2300      	movs	r3, #0
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3718      	adds	r7, #24
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	00010008 	.word	0x00010008
 80126f8:	00010002 	.word	0x00010002

080126fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b088      	sub	sp, #32
 8012700:	af02      	add	r7, sp, #8
 8012702:	60f8      	str	r0, [r7, #12]
 8012704:	4608      	mov	r0, r1
 8012706:	4611      	mov	r1, r2
 8012708:	461a      	mov	r2, r3
 801270a:	4603      	mov	r3, r0
 801270c:	817b      	strh	r3, [r7, #10]
 801270e:	460b      	mov	r3, r1
 8012710:	813b      	strh	r3, [r7, #8]
 8012712:	4613      	mov	r3, r2
 8012714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	681a      	ldr	r2, [r3, #0]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	6a3b      	ldr	r3, [r7, #32]
 801272c:	2200      	movs	r2, #0
 801272e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f000 fa08 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00d      	beq.n	801275a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801274c:	d103      	bne.n	8012756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012754:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8012756:	2303      	movs	r3, #3
 8012758:	e05f      	b.n	801281a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801275a:	897b      	ldrh	r3, [r7, #10]
 801275c:	b2db      	uxtb	r3, r3
 801275e:	461a      	mov	r2, r3
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8012768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	6a3a      	ldr	r2, [r7, #32]
 801276e:	492d      	ldr	r1, [pc, #180]	@ (8012824 <I2C_RequestMemoryWrite+0x128>)
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f000 fa63 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d001      	beq.n	8012780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801277c:	2301      	movs	r3, #1
 801277e:	e04c      	b.n	801281a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012780:	2300      	movs	r3, #0
 8012782:	617b      	str	r3, [r7, #20]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	695b      	ldr	r3, [r3, #20]
 801278a:	617b      	str	r3, [r7, #20]
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	699b      	ldr	r3, [r3, #24]
 8012792:	617b      	str	r3, [r7, #20]
 8012794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012798:	6a39      	ldr	r1, [r7, #32]
 801279a:	68f8      	ldr	r0, [r7, #12]
 801279c:	f000 faee 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d00d      	beq.n	80127c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127aa:	2b04      	cmp	r3, #4
 80127ac:	d107      	bne.n	80127be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80127bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	e02b      	b.n	801281a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80127c2:	88fb      	ldrh	r3, [r7, #6]
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	d105      	bne.n	80127d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80127c8:	893b      	ldrh	r3, [r7, #8]
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	611a      	str	r2, [r3, #16]
 80127d2:	e021      	b.n	8012818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80127d4:	893b      	ldrh	r3, [r7, #8]
 80127d6:	0a1b      	lsrs	r3, r3, #8
 80127d8:	b29b      	uxth	r3, r3
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80127e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127e4:	6a39      	ldr	r1, [r7, #32]
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f000 fac8 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00d      	beq.n	801280e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127f6:	2b04      	cmp	r3, #4
 80127f8:	d107      	bne.n	801280a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801280a:	2301      	movs	r3, #1
 801280c:	e005      	b.n	801281a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801280e:	893b      	ldrh	r3, [r7, #8]
 8012810:	b2da      	uxtb	r2, r3
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3718      	adds	r7, #24
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	00010002 	.word	0x00010002

08012828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b088      	sub	sp, #32
 801282c:	af02      	add	r7, sp, #8
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	4608      	mov	r0, r1
 8012832:	4611      	mov	r1, r2
 8012834:	461a      	mov	r2, r3
 8012836:	4603      	mov	r3, r0
 8012838:	817b      	strh	r3, [r7, #10]
 801283a:	460b      	mov	r3, r1
 801283c:	813b      	strh	r3, [r7, #8]
 801283e:	4613      	mov	r3, r2
 8012840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012864:	9300      	str	r3, [sp, #0]
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	2200      	movs	r2, #0
 801286a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f000 f96a 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d00d      	beq.n	8012896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012888:	d103      	bne.n	8012892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012890:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8012892:	2303      	movs	r3, #3
 8012894:	e0aa      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012896:	897b      	ldrh	r3, [r7, #10]
 8012898:	b2db      	uxtb	r3, r3
 801289a:	461a      	mov	r2, r3
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80128a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80128a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a8:	6a3a      	ldr	r2, [r7, #32]
 80128aa:	4952      	ldr	r1, [pc, #328]	@ (80129f4 <I2C_RequestMemoryRead+0x1cc>)
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f000 f9c5 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d001      	beq.n	80128bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80128b8:	2301      	movs	r3, #1
 80128ba:	e097      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80128bc:	2300      	movs	r3, #0
 80128be:	617b      	str	r3, [r7, #20]
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	695b      	ldr	r3, [r3, #20]
 80128c6:	617b      	str	r3, [r7, #20]
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	699b      	ldr	r3, [r3, #24]
 80128ce:	617b      	str	r3, [r7, #20]
 80128d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80128d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128d4:	6a39      	ldr	r1, [r7, #32]
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	f000 fa50 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d00d      	beq.n	80128fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128e6:	2b04      	cmp	r3, #4
 80128e8:	d107      	bne.n	80128fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80128f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e076      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80128fe:	88fb      	ldrh	r3, [r7, #6]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d105      	bne.n	8012910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012904:	893b      	ldrh	r3, [r7, #8]
 8012906:	b2da      	uxtb	r2, r3
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	611a      	str	r2, [r3, #16]
 801290e:	e021      	b.n	8012954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012910:	893b      	ldrh	r3, [r7, #8]
 8012912:	0a1b      	lsrs	r3, r3, #8
 8012914:	b29b      	uxth	r3, r3
 8012916:	b2da      	uxtb	r2, r3
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012920:	6a39      	ldr	r1, [r7, #32]
 8012922:	68f8      	ldr	r0, [r7, #12]
 8012924:	f000 fa2a 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8012928:	4603      	mov	r3, r0
 801292a:	2b00      	cmp	r3, #0
 801292c:	d00d      	beq.n	801294a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012932:	2b04      	cmp	r3, #4
 8012934:	d107      	bne.n	8012946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8012946:	2301      	movs	r3, #1
 8012948:	e050      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801294a:	893b      	ldrh	r3, [r7, #8]
 801294c:	b2da      	uxtb	r2, r3
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012956:	6a39      	ldr	r1, [r7, #32]
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f000 fa0f 	bl	8012d7c <I2C_WaitOnTXEFlagUntilTimeout>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	d00d      	beq.n	8012980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012968:	2b04      	cmp	r3, #4
 801296a:	d107      	bne.n	801297c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801297a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801297c:	2301      	movs	r3, #1
 801297e:	e035      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801298e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	6a3b      	ldr	r3, [r7, #32]
 8012996:	2200      	movs	r2, #0
 8012998:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f000 f8d3 	bl	8012b48 <I2C_WaitOnFlagUntilTimeout>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d00d      	beq.n	80129c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129b6:	d103      	bne.n	80129c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e013      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80129c4:	897b      	ldrh	r3, [r7, #10]
 80129c6:	b2db      	uxtb	r3, r3
 80129c8:	f043 0301 	orr.w	r3, r3, #1
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80129d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d6:	6a3a      	ldr	r2, [r7, #32]
 80129d8:	4906      	ldr	r1, [pc, #24]	@ (80129f4 <I2C_RequestMemoryRead+0x1cc>)
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f000 f92e 	bl	8012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d001      	beq.n	80129ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80129e6:	2301      	movs	r3, #1
 80129e8:	e000      	b.n	80129ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3718      	adds	r7, #24
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	00010002 	.word	0x00010002

080129f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b086      	sub	sp, #24
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012a00:	2300      	movs	r3, #0
 8012a02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012a10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8012a12:	4b4b      	ldr	r3, [pc, #300]	@ (8012b40 <I2C_DMAAbort+0x148>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	08db      	lsrs	r3, r3, #3
 8012a18:	4a4a      	ldr	r2, [pc, #296]	@ (8012b44 <I2C_DMAAbort+0x14c>)
 8012a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a1e:	0a1a      	lsrs	r2, r3, #8
 8012a20:	4613      	mov	r3, r2
 8012a22:	009b      	lsls	r3, r3, #2
 8012a24:	4413      	add	r3, r2
 8012a26:	00da      	lsls	r2, r3, #3
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a36:	f043 0220 	orr.w	r2, r3, #32
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8012a3e:	e00a      	b.n	8012a56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	3b01      	subs	r3, #1
 8012a44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a54:	d0ea      	beq.n	8012a2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d003      	beq.n	8012a66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a62:	2200      	movs	r2, #0
 8012a64:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d003      	beq.n	8012a76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a72:	2200      	movs	r2, #0
 8012a74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012a84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d003      	beq.n	8012a9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a98:	2200      	movs	r2, #0
 8012a9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d003      	beq.n	8012aac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f022 0201 	bic.w	r2, r2, #1
 8012aba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	2b60      	cmp	r3, #96	@ 0x60
 8012ac6:	d10e      	bne.n	8012ae6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	2220      	movs	r2, #32
 8012acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	2200      	movs	r2, #0
 8012adc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012ade:	6978      	ldr	r0, [r7, #20]
 8012ae0:	f7fe fb14 	bl	801110c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012ae4:	e027      	b.n	8012b36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012ae6:	7cfb      	ldrb	r3, [r7, #19]
 8012ae8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8012aec:	2b28      	cmp	r3, #40	@ 0x28
 8012aee:	d117      	bne.n	8012b20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f042 0201 	orr.w	r2, r2, #1
 8012afe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012b0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	2200      	movs	r2, #0
 8012b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2228      	movs	r2, #40	@ 0x28
 8012b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012b1e:	e007      	b.n	8012b30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2220      	movs	r2, #32
 8012b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8012b30:	6978      	ldr	r0, [r7, #20]
 8012b32:	f7fe fae1 	bl	80110f8 <HAL_I2C_ErrorCallback>
}
 8012b36:	bf00      	nop
 8012b38:	3718      	adds	r7, #24
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	200000d8 	.word	0x200000d8
 8012b44:	14f8b589 	.word	0x14f8b589

08012b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	603b      	str	r3, [r7, #0]
 8012b54:	4613      	mov	r3, r2
 8012b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012b58:	e048      	b.n	8012bec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b60:	d044      	beq.n	8012bec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b62:	f7fb ffff 	bl	800eb64 <HAL_GetTick>
 8012b66:	4602      	mov	r2, r0
 8012b68:	69bb      	ldr	r3, [r7, #24]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	683a      	ldr	r2, [r7, #0]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d302      	bcc.n	8012b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d139      	bne.n	8012bec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	0c1b      	lsrs	r3, r3, #16
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	d10d      	bne.n	8012b9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	695b      	ldr	r3, [r3, #20]
 8012b88:	43da      	mvns	r2, r3
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	4013      	ands	r3, r2
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	bf0c      	ite	eq
 8012b94:	2301      	moveq	r3, #1
 8012b96:	2300      	movne	r3, #0
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	e00c      	b.n	8012bb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	699b      	ldr	r3, [r3, #24]
 8012ba4:	43da      	mvns	r2, r3
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	4013      	ands	r3, r2
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	bf0c      	ite	eq
 8012bb0:	2301      	moveq	r3, #1
 8012bb2:	2300      	movne	r3, #0
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	79fb      	ldrb	r3, [r7, #7]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d116      	bne.n	8012bec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012bd8:	f043 0220 	orr.w	r2, r3, #32
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	2200      	movs	r2, #0
 8012be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012be8:	2301      	movs	r3, #1
 8012bea:	e023      	b.n	8012c34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	0c1b      	lsrs	r3, r3, #16
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d10d      	bne.n	8012c12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	695b      	ldr	r3, [r3, #20]
 8012bfc:	43da      	mvns	r2, r3
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	4013      	ands	r3, r2
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	bf0c      	ite	eq
 8012c08:	2301      	moveq	r3, #1
 8012c0a:	2300      	movne	r3, #0
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	461a      	mov	r2, r3
 8012c10:	e00c      	b.n	8012c2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	699b      	ldr	r3, [r3, #24]
 8012c18:	43da      	mvns	r2, r3
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	4013      	ands	r3, r2
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	bf0c      	ite	eq
 8012c24:	2301      	moveq	r3, #1
 8012c26:	2300      	movne	r3, #0
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	79fb      	ldrb	r3, [r7, #7]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d093      	beq.n	8012b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012c32:	2300      	movs	r3, #0
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3710      	adds	r7, #16
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b084      	sub	sp, #16
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	607a      	str	r2, [r7, #4]
 8012c48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012c4a:	e071      	b.n	8012d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	695b      	ldr	r3, [r3, #20]
 8012c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012c5a:	d123      	bne.n	8012ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012c6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2220      	movs	r2, #32
 8012c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2200      	movs	r2, #0
 8012c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c90:	f043 0204 	orr.w	r2, r3, #4
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e067      	b.n	8012d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012caa:	d041      	beq.n	8012d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012cac:	f7fb ff5a 	bl	800eb64 <HAL_GetTick>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d302      	bcc.n	8012cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d136      	bne.n	8012d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	0c1b      	lsrs	r3, r3, #16
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d10c      	bne.n	8012ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	695b      	ldr	r3, [r3, #20]
 8012cd2:	43da      	mvns	r2, r3
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	4013      	ands	r3, r2
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	bf14      	ite	ne
 8012cde:	2301      	movne	r3, #1
 8012ce0:	2300      	moveq	r3, #0
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	e00b      	b.n	8012cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	699b      	ldr	r3, [r3, #24]
 8012cec:	43da      	mvns	r2, r3
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	4013      	ands	r3, r2
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	bf14      	ite	ne
 8012cf8:	2301      	movne	r3, #1
 8012cfa:	2300      	moveq	r3, #0
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d016      	beq.n	8012d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	2200      	movs	r2, #0
 8012d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2220      	movs	r2, #32
 8012d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2200      	movs	r2, #0
 8012d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d1c:	f043 0220 	orr.w	r2, r3, #32
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2200      	movs	r2, #0
 8012d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	e021      	b.n	8012d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	0c1b      	lsrs	r3, r3, #16
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d10c      	bne.n	8012d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	695b      	ldr	r3, [r3, #20]
 8012d40:	43da      	mvns	r2, r3
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	4013      	ands	r3, r2
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	bf14      	ite	ne
 8012d4c:	2301      	movne	r3, #1
 8012d4e:	2300      	moveq	r3, #0
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	e00b      	b.n	8012d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	699b      	ldr	r3, [r3, #24]
 8012d5a:	43da      	mvns	r2, r3
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	4013      	ands	r3, r2
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	bf14      	ite	ne
 8012d66:	2301      	movne	r3, #1
 8012d68:	2300      	moveq	r3, #0
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	f47f af6d 	bne.w	8012c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8012d72:	2300      	movs	r3, #0
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3710      	adds	r7, #16
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012d88:	e034      	b.n	8012df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f000 f915 	bl	8012fba <I2C_IsAcknowledgeFailed>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d001      	beq.n	8012d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012d96:	2301      	movs	r3, #1
 8012d98:	e034      	b.n	8012e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012da0:	d028      	beq.n	8012df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012da2:	f7fb fedf 	bl	800eb64 <HAL_GetTick>
 8012da6:	4602      	mov	r2, r0
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	1ad3      	subs	r3, r2, r3
 8012dac:	68ba      	ldr	r2, [r7, #8]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d302      	bcc.n	8012db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d11d      	bne.n	8012df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012dc2:	2b80      	cmp	r3, #128	@ 0x80
 8012dc4:	d016      	beq.n	8012df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2220      	movs	r2, #32
 8012dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012de0:	f043 0220 	orr.w	r2, r3, #32
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2200      	movs	r2, #0
 8012dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e007      	b.n	8012e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	695b      	ldr	r3, [r3, #20]
 8012dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012dfe:	2b80      	cmp	r3, #128	@ 0x80
 8012e00:	d1c3      	bne.n	8012d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012e02:	2300      	movs	r3, #0
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012e18:	e034      	b.n	8012e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012e1a:	68f8      	ldr	r0, [r7, #12]
 8012e1c:	f000 f8cd 	bl	8012fba <I2C_IsAcknowledgeFailed>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d001      	beq.n	8012e2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012e26:	2301      	movs	r3, #1
 8012e28:	e034      	b.n	8012e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e30:	d028      	beq.n	8012e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012e32:	f7fb fe97 	bl	800eb64 <HAL_GetTick>
 8012e36:	4602      	mov	r2, r0
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	68ba      	ldr	r2, [r7, #8]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d302      	bcc.n	8012e48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d11d      	bne.n	8012e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	695b      	ldr	r3, [r3, #20]
 8012e4e:	f003 0304 	and.w	r3, r3, #4
 8012e52:	2b04      	cmp	r3, #4
 8012e54:	d016      	beq.n	8012e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2220      	movs	r2, #32
 8012e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2200      	movs	r2, #0
 8012e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e70:	f043 0220 	orr.w	r2, r3, #32
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012e80:	2301      	movs	r3, #1
 8012e82:	e007      	b.n	8012e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	695b      	ldr	r3, [r3, #20]
 8012e8a:	f003 0304 	and.w	r3, r3, #4
 8012e8e:	2b04      	cmp	r3, #4
 8012e90:	d1c3      	bne.n	8012e1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012e92:	2300      	movs	r3, #0
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3710      	adds	r7, #16
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8012ea8:	4b13      	ldr	r3, [pc, #76]	@ (8012ef8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	08db      	lsrs	r3, r3, #3
 8012eae:	4a13      	ldr	r2, [pc, #76]	@ (8012efc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8012eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8012eb4:	0a1a      	lsrs	r2, r3, #8
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	3b01      	subs	r3, #1
 8012ec2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d107      	bne.n	8012eda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ece:	f043 0220 	orr.w	r2, r3, #32
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e008      	b.n	8012eec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ee8:	d0e9      	beq.n	8012ebe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8012eea:	2300      	movs	r3, #0
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3714      	adds	r7, #20
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	200000d8 	.word	0x200000d8
 8012efc:	14f8b589 	.word	0x14f8b589

08012f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012f0c:	e049      	b.n	8012fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	695b      	ldr	r3, [r3, #20]
 8012f14:	f003 0310 	and.w	r3, r3, #16
 8012f18:	2b10      	cmp	r3, #16
 8012f1a:	d119      	bne.n	8012f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f06f 0210 	mvn.w	r2, #16
 8012f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2220      	movs	r2, #32
 8012f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2200      	movs	r2, #0
 8012f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2200      	movs	r2, #0
 8012f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e030      	b.n	8012fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012f50:	f7fb fe08 	bl	800eb64 <HAL_GetTick>
 8012f54:	4602      	mov	r2, r0
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d302      	bcc.n	8012f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d11d      	bne.n	8012fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	695b      	ldr	r3, [r3, #20]
 8012f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f70:	2b40      	cmp	r3, #64	@ 0x40
 8012f72:	d016      	beq.n	8012fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2200      	movs	r2, #0
 8012f78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2220      	movs	r2, #32
 8012f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2200      	movs	r2, #0
 8012f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f8e:	f043 0220 	orr.w	r2, r3, #32
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	e007      	b.n	8012fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	695b      	ldr	r3, [r3, #20]
 8012fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fac:	2b40      	cmp	r3, #64	@ 0x40
 8012fae:	d1ae      	bne.n	8012f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b083      	sub	sp, #12
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	695b      	ldr	r3, [r3, #20]
 8012fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012fd0:	d11b      	bne.n	801300a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012fda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2220      	movs	r2, #32
 8012fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ff6:	f043 0204 	orr.w	r2, r3, #4
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2200      	movs	r2, #0
 8013002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8013006:	2301      	movs	r3, #1
 8013008:	e000      	b.n	801300c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	370c      	adds	r7, #12
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr

08013018 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013024:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8013028:	d103      	bne.n	8013032 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2201      	movs	r2, #1
 801302e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8013030:	e007      	b.n	8013042 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013036:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 801303a:	d102      	bne.n	8013042 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2208      	movs	r2, #8
 8013040:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8013042:	bf00      	nop
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
	...

08013050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d101      	bne.n	8013062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801305e:	2301      	movs	r3, #1
 8013060:	e267      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	f003 0301 	and.w	r3, r3, #1
 801306a:	2b00      	cmp	r3, #0
 801306c:	d075      	beq.n	801315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801306e:	4b88      	ldr	r3, [pc, #544]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	f003 030c 	and.w	r3, r3, #12
 8013076:	2b04      	cmp	r3, #4
 8013078:	d00c      	beq.n	8013094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801307a:	4b85      	ldr	r3, [pc, #532]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 801307c:	689b      	ldr	r3, [r3, #8]
 801307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013082:	2b08      	cmp	r3, #8
 8013084:	d112      	bne.n	80130ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013086:	4b82      	ldr	r3, [pc, #520]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801308e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013092:	d10b      	bne.n	80130ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013094:	4b7e      	ldr	r3, [pc, #504]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801309c:	2b00      	cmp	r3, #0
 801309e:	d05b      	beq.n	8013158 <HAL_RCC_OscConfig+0x108>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d157      	bne.n	8013158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80130a8:	2301      	movs	r3, #1
 80130aa:	e242      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130b4:	d106      	bne.n	80130c4 <HAL_RCC_OscConfig+0x74>
 80130b6:	4b76      	ldr	r3, [pc, #472]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a75      	ldr	r2, [pc, #468]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80130c0:	6013      	str	r3, [r2, #0]
 80130c2:	e01d      	b.n	8013100 <HAL_RCC_OscConfig+0xb0>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80130cc:	d10c      	bne.n	80130e8 <HAL_RCC_OscConfig+0x98>
 80130ce:	4b70      	ldr	r3, [pc, #448]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	4a6f      	ldr	r2, [pc, #444]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80130d8:	6013      	str	r3, [r2, #0]
 80130da:	4b6d      	ldr	r3, [pc, #436]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	4a6c      	ldr	r2, [pc, #432]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80130e4:	6013      	str	r3, [r2, #0]
 80130e6:	e00b      	b.n	8013100 <HAL_RCC_OscConfig+0xb0>
 80130e8:	4b69      	ldr	r3, [pc, #420]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	4a68      	ldr	r2, [pc, #416]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80130f2:	6013      	str	r3, [r2, #0]
 80130f4:	4b66      	ldr	r3, [pc, #408]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4a65      	ldr	r2, [pc, #404]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80130fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80130fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d013      	beq.n	8013130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013108:	f7fb fd2c 	bl	800eb64 <HAL_GetTick>
 801310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801310e:	e008      	b.n	8013122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013110:	f7fb fd28 	bl	800eb64 <HAL_GetTick>
 8013114:	4602      	mov	r2, r0
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	1ad3      	subs	r3, r2, r3
 801311a:	2b64      	cmp	r3, #100	@ 0x64
 801311c:	d901      	bls.n	8013122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801311e:	2303      	movs	r3, #3
 8013120:	e207      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013122:	4b5b      	ldr	r3, [pc, #364]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801312a:	2b00      	cmp	r3, #0
 801312c:	d0f0      	beq.n	8013110 <HAL_RCC_OscConfig+0xc0>
 801312e:	e014      	b.n	801315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013130:	f7fb fd18 	bl	800eb64 <HAL_GetTick>
 8013134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013136:	e008      	b.n	801314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013138:	f7fb fd14 	bl	800eb64 <HAL_GetTick>
 801313c:	4602      	mov	r2, r0
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	2b64      	cmp	r3, #100	@ 0x64
 8013144:	d901      	bls.n	801314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013146:	2303      	movs	r3, #3
 8013148:	e1f3      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801314a:	4b51      	ldr	r3, [pc, #324]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013152:	2b00      	cmp	r3, #0
 8013154:	d1f0      	bne.n	8013138 <HAL_RCC_OscConfig+0xe8>
 8013156:	e000      	b.n	801315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f003 0302 	and.w	r3, r3, #2
 8013162:	2b00      	cmp	r3, #0
 8013164:	d063      	beq.n	801322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013166:	4b4a      	ldr	r3, [pc, #296]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013168:	689b      	ldr	r3, [r3, #8]
 801316a:	f003 030c 	and.w	r3, r3, #12
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00b      	beq.n	801318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013172:	4b47      	ldr	r3, [pc, #284]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013174:	689b      	ldr	r3, [r3, #8]
 8013176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801317a:	2b08      	cmp	r3, #8
 801317c:	d11c      	bne.n	80131b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801317e:	4b44      	ldr	r3, [pc, #272]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013186:	2b00      	cmp	r3, #0
 8013188:	d116      	bne.n	80131b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801318a:	4b41      	ldr	r3, [pc, #260]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f003 0302 	and.w	r3, r3, #2
 8013192:	2b00      	cmp	r3, #0
 8013194:	d005      	beq.n	80131a2 <HAL_RCC_OscConfig+0x152>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d001      	beq.n	80131a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801319e:	2301      	movs	r3, #1
 80131a0:	e1c7      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80131a2:	4b3b      	ldr	r3, [pc, #236]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	691b      	ldr	r3, [r3, #16]
 80131ae:	00db      	lsls	r3, r3, #3
 80131b0:	4937      	ldr	r1, [pc, #220]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80131b2:	4313      	orrs	r3, r2
 80131b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80131b6:	e03a      	b.n	801322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d020      	beq.n	8013202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80131c0:	4b34      	ldr	r3, [pc, #208]	@ (8013294 <HAL_RCC_OscConfig+0x244>)
 80131c2:	2201      	movs	r2, #1
 80131c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80131c6:	f7fb fccd 	bl	800eb64 <HAL_GetTick>
 80131ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80131cc:	e008      	b.n	80131e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80131ce:	f7fb fcc9 	bl	800eb64 <HAL_GetTick>
 80131d2:	4602      	mov	r2, r0
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	1ad3      	subs	r3, r2, r3
 80131d8:	2b02      	cmp	r3, #2
 80131da:	d901      	bls.n	80131e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80131dc:	2303      	movs	r3, #3
 80131de:	e1a8      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80131e0:	4b2b      	ldr	r3, [pc, #172]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f003 0302 	and.w	r3, r3, #2
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d0f0      	beq.n	80131ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80131ec:	4b28      	ldr	r3, [pc, #160]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	691b      	ldr	r3, [r3, #16]
 80131f8:	00db      	lsls	r3, r3, #3
 80131fa:	4925      	ldr	r1, [pc, #148]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 80131fc:	4313      	orrs	r3, r2
 80131fe:	600b      	str	r3, [r1, #0]
 8013200:	e015      	b.n	801322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013202:	4b24      	ldr	r3, [pc, #144]	@ (8013294 <HAL_RCC_OscConfig+0x244>)
 8013204:	2200      	movs	r2, #0
 8013206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013208:	f7fb fcac 	bl	800eb64 <HAL_GetTick>
 801320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801320e:	e008      	b.n	8013222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013210:	f7fb fca8 	bl	800eb64 <HAL_GetTick>
 8013214:	4602      	mov	r2, r0
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	1ad3      	subs	r3, r2, r3
 801321a:	2b02      	cmp	r3, #2
 801321c:	d901      	bls.n	8013222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801321e:	2303      	movs	r3, #3
 8013220:	e187      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013222:	4b1b      	ldr	r3, [pc, #108]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f003 0302 	and.w	r3, r3, #2
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1f0      	bne.n	8013210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f003 0308 	and.w	r3, r3, #8
 8013236:	2b00      	cmp	r3, #0
 8013238:	d036      	beq.n	80132a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	695b      	ldr	r3, [r3, #20]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d016      	beq.n	8013270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013242:	4b15      	ldr	r3, [pc, #84]	@ (8013298 <HAL_RCC_OscConfig+0x248>)
 8013244:	2201      	movs	r2, #1
 8013246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013248:	f7fb fc8c 	bl	800eb64 <HAL_GetTick>
 801324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801324e:	e008      	b.n	8013262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013250:	f7fb fc88 	bl	800eb64 <HAL_GetTick>
 8013254:	4602      	mov	r2, r0
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	2b02      	cmp	r3, #2
 801325c:	d901      	bls.n	8013262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801325e:	2303      	movs	r3, #3
 8013260:	e167      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013262:	4b0b      	ldr	r3, [pc, #44]	@ (8013290 <HAL_RCC_OscConfig+0x240>)
 8013264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013266:	f003 0302 	and.w	r3, r3, #2
 801326a:	2b00      	cmp	r3, #0
 801326c:	d0f0      	beq.n	8013250 <HAL_RCC_OscConfig+0x200>
 801326e:	e01b      	b.n	80132a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013270:	4b09      	ldr	r3, [pc, #36]	@ (8013298 <HAL_RCC_OscConfig+0x248>)
 8013272:	2200      	movs	r2, #0
 8013274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013276:	f7fb fc75 	bl	800eb64 <HAL_GetTick>
 801327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801327c:	e00e      	b.n	801329c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801327e:	f7fb fc71 	bl	800eb64 <HAL_GetTick>
 8013282:	4602      	mov	r2, r0
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	1ad3      	subs	r3, r2, r3
 8013288:	2b02      	cmp	r3, #2
 801328a:	d907      	bls.n	801329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801328c:	2303      	movs	r3, #3
 801328e:	e150      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
 8013290:	40023800 	.word	0x40023800
 8013294:	42470000 	.word	0x42470000
 8013298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801329c:	4b88      	ldr	r3, [pc, #544]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801329e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132a0:	f003 0302 	and.w	r3, r3, #2
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1ea      	bne.n	801327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f003 0304 	and.w	r3, r3, #4
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	f000 8097 	beq.w	80133e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80132b6:	2300      	movs	r3, #0
 80132b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80132ba:	4b81      	ldr	r3, [pc, #516]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80132bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d10f      	bne.n	80132e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80132c6:	2300      	movs	r3, #0
 80132c8:	60bb      	str	r3, [r7, #8]
 80132ca:	4b7d      	ldr	r3, [pc, #500]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80132cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132ce:	4a7c      	ldr	r2, [pc, #496]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80132d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80132d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80132d6:	4b7a      	ldr	r3, [pc, #488]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80132d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80132de:	60bb      	str	r3, [r7, #8]
 80132e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80132e2:	2301      	movs	r3, #1
 80132e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80132e6:	4b77      	ldr	r3, [pc, #476]	@ (80134c4 <HAL_RCC_OscConfig+0x474>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d118      	bne.n	8013324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80132f2:	4b74      	ldr	r3, [pc, #464]	@ (80134c4 <HAL_RCC_OscConfig+0x474>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	4a73      	ldr	r2, [pc, #460]	@ (80134c4 <HAL_RCC_OscConfig+0x474>)
 80132f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80132fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80132fe:	f7fb fc31 	bl	800eb64 <HAL_GetTick>
 8013302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013304:	e008      	b.n	8013318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013306:	f7fb fc2d 	bl	800eb64 <HAL_GetTick>
 801330a:	4602      	mov	r2, r0
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	1ad3      	subs	r3, r2, r3
 8013310:	2b02      	cmp	r3, #2
 8013312:	d901      	bls.n	8013318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013314:	2303      	movs	r3, #3
 8013316:	e10c      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013318:	4b6a      	ldr	r3, [pc, #424]	@ (80134c4 <HAL_RCC_OscConfig+0x474>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013320:	2b00      	cmp	r3, #0
 8013322:	d0f0      	beq.n	8013306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d106      	bne.n	801333a <HAL_RCC_OscConfig+0x2ea>
 801332c:	4b64      	ldr	r3, [pc, #400]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013330:	4a63      	ldr	r2, [pc, #396]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013332:	f043 0301 	orr.w	r3, r3, #1
 8013336:	6713      	str	r3, [r2, #112]	@ 0x70
 8013338:	e01c      	b.n	8013374 <HAL_RCC_OscConfig+0x324>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	689b      	ldr	r3, [r3, #8]
 801333e:	2b05      	cmp	r3, #5
 8013340:	d10c      	bne.n	801335c <HAL_RCC_OscConfig+0x30c>
 8013342:	4b5f      	ldr	r3, [pc, #380]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013346:	4a5e      	ldr	r2, [pc, #376]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013348:	f043 0304 	orr.w	r3, r3, #4
 801334c:	6713      	str	r3, [r2, #112]	@ 0x70
 801334e:	4b5c      	ldr	r3, [pc, #368]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013352:	4a5b      	ldr	r2, [pc, #364]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013354:	f043 0301 	orr.w	r3, r3, #1
 8013358:	6713      	str	r3, [r2, #112]	@ 0x70
 801335a:	e00b      	b.n	8013374 <HAL_RCC_OscConfig+0x324>
 801335c:	4b58      	ldr	r3, [pc, #352]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013360:	4a57      	ldr	r2, [pc, #348]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013362:	f023 0301 	bic.w	r3, r3, #1
 8013366:	6713      	str	r3, [r2, #112]	@ 0x70
 8013368:	4b55      	ldr	r3, [pc, #340]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801336c:	4a54      	ldr	r2, [pc, #336]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801336e:	f023 0304 	bic.w	r3, r3, #4
 8013372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	689b      	ldr	r3, [r3, #8]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d015      	beq.n	80133a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801337c:	f7fb fbf2 	bl	800eb64 <HAL_GetTick>
 8013380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013382:	e00a      	b.n	801339a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013384:	f7fb fbee 	bl	800eb64 <HAL_GetTick>
 8013388:	4602      	mov	r2, r0
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	1ad3      	subs	r3, r2, r3
 801338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013392:	4293      	cmp	r3, r2
 8013394:	d901      	bls.n	801339a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013396:	2303      	movs	r3, #3
 8013398:	e0cb      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801339a:	4b49      	ldr	r3, [pc, #292]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801339e:	f003 0302 	and.w	r3, r3, #2
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d0ee      	beq.n	8013384 <HAL_RCC_OscConfig+0x334>
 80133a6:	e014      	b.n	80133d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80133a8:	f7fb fbdc 	bl	800eb64 <HAL_GetTick>
 80133ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133ae:	e00a      	b.n	80133c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133b0:	f7fb fbd8 	bl	800eb64 <HAL_GetTick>
 80133b4:	4602      	mov	r2, r0
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	1ad3      	subs	r3, r2, r3
 80133ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80133be:	4293      	cmp	r3, r2
 80133c0:	d901      	bls.n	80133c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80133c2:	2303      	movs	r3, #3
 80133c4:	e0b5      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133c6:	4b3e      	ldr	r3, [pc, #248]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80133c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133ca:	f003 0302 	and.w	r3, r3, #2
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1ee      	bne.n	80133b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80133d2:	7dfb      	ldrb	r3, [r7, #23]
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d105      	bne.n	80133e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80133d8:	4b39      	ldr	r3, [pc, #228]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80133da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133dc:	4a38      	ldr	r2, [pc, #224]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80133de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80133e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	699b      	ldr	r3, [r3, #24]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f000 80a1 	beq.w	8013530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80133ee:	4b34      	ldr	r3, [pc, #208]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80133f0:	689b      	ldr	r3, [r3, #8]
 80133f2:	f003 030c 	and.w	r3, r3, #12
 80133f6:	2b08      	cmp	r3, #8
 80133f8:	d05c      	beq.n	80134b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	699b      	ldr	r3, [r3, #24]
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d141      	bne.n	8013486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013402:	4b31      	ldr	r3, [pc, #196]	@ (80134c8 <HAL_RCC_OscConfig+0x478>)
 8013404:	2200      	movs	r2, #0
 8013406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013408:	f7fb fbac 	bl	800eb64 <HAL_GetTick>
 801340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801340e:	e008      	b.n	8013422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013410:	f7fb fba8 	bl	800eb64 <HAL_GetTick>
 8013414:	4602      	mov	r2, r0
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	1ad3      	subs	r3, r2, r3
 801341a:	2b02      	cmp	r3, #2
 801341c:	d901      	bls.n	8013422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801341e:	2303      	movs	r3, #3
 8013420:	e087      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013422:	4b27      	ldr	r3, [pc, #156]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801342a:	2b00      	cmp	r3, #0
 801342c:	d1f0      	bne.n	8013410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	69da      	ldr	r2, [r3, #28]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6a1b      	ldr	r3, [r3, #32]
 8013436:	431a      	orrs	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801343c:	019b      	lsls	r3, r3, #6
 801343e:	431a      	orrs	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013444:	085b      	lsrs	r3, r3, #1
 8013446:	3b01      	subs	r3, #1
 8013448:	041b      	lsls	r3, r3, #16
 801344a:	431a      	orrs	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013450:	061b      	lsls	r3, r3, #24
 8013452:	491b      	ldr	r1, [pc, #108]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 8013454:	4313      	orrs	r3, r2
 8013456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013458:	4b1b      	ldr	r3, [pc, #108]	@ (80134c8 <HAL_RCC_OscConfig+0x478>)
 801345a:	2201      	movs	r2, #1
 801345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801345e:	f7fb fb81 	bl	800eb64 <HAL_GetTick>
 8013462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013464:	e008      	b.n	8013478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013466:	f7fb fb7d 	bl	800eb64 <HAL_GetTick>
 801346a:	4602      	mov	r2, r0
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	1ad3      	subs	r3, r2, r3
 8013470:	2b02      	cmp	r3, #2
 8013472:	d901      	bls.n	8013478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013474:	2303      	movs	r3, #3
 8013476:	e05c      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013478:	4b11      	ldr	r3, [pc, #68]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013480:	2b00      	cmp	r3, #0
 8013482:	d0f0      	beq.n	8013466 <HAL_RCC_OscConfig+0x416>
 8013484:	e054      	b.n	8013530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013486:	4b10      	ldr	r3, [pc, #64]	@ (80134c8 <HAL_RCC_OscConfig+0x478>)
 8013488:	2200      	movs	r2, #0
 801348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801348c:	f7fb fb6a 	bl	800eb64 <HAL_GetTick>
 8013490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013492:	e008      	b.n	80134a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013494:	f7fb fb66 	bl	800eb64 <HAL_GetTick>
 8013498:	4602      	mov	r2, r0
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	2b02      	cmp	r3, #2
 80134a0:	d901      	bls.n	80134a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80134a2:	2303      	movs	r3, #3
 80134a4:	e045      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80134a6:	4b06      	ldr	r3, [pc, #24]	@ (80134c0 <HAL_RCC_OscConfig+0x470>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d1f0      	bne.n	8013494 <HAL_RCC_OscConfig+0x444>
 80134b2:	e03d      	b.n	8013530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	699b      	ldr	r3, [r3, #24]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d107      	bne.n	80134cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80134bc:	2301      	movs	r3, #1
 80134be:	e038      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
 80134c0:	40023800 	.word	0x40023800
 80134c4:	40007000 	.word	0x40007000
 80134c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80134cc:	4b1b      	ldr	r3, [pc, #108]	@ (801353c <HAL_RCC_OscConfig+0x4ec>)
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	699b      	ldr	r3, [r3, #24]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d028      	beq.n	801352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d121      	bne.n	801352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d11a      	bne.n	801352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80134f6:	68fa      	ldr	r2, [r7, #12]
 80134f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80134fc:	4013      	ands	r3, r2
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013504:	4293      	cmp	r3, r2
 8013506:	d111      	bne.n	801352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013512:	085b      	lsrs	r3, r3, #1
 8013514:	3b01      	subs	r3, #1
 8013516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013518:	429a      	cmp	r2, r3
 801351a:	d107      	bne.n	801352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013528:	429a      	cmp	r2, r3
 801352a:	d001      	beq.n	8013530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801352c:	2301      	movs	r3, #1
 801352e:	e000      	b.n	8013532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	40023800 	.word	0x40023800

08013540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013550:	2301      	movs	r3, #1
 8013552:	e0cc      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013554:	4b68      	ldr	r3, [pc, #416]	@ (80136f8 <HAL_RCC_ClockConfig+0x1b8>)
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f003 0307 	and.w	r3, r3, #7
 801355c:	683a      	ldr	r2, [r7, #0]
 801355e:	429a      	cmp	r2, r3
 8013560:	d90c      	bls.n	801357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013562:	4b65      	ldr	r3, [pc, #404]	@ (80136f8 <HAL_RCC_ClockConfig+0x1b8>)
 8013564:	683a      	ldr	r2, [r7, #0]
 8013566:	b2d2      	uxtb	r2, r2
 8013568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801356a:	4b63      	ldr	r3, [pc, #396]	@ (80136f8 <HAL_RCC_ClockConfig+0x1b8>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f003 0307 	and.w	r3, r3, #7
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	429a      	cmp	r2, r3
 8013576:	d001      	beq.n	801357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013578:	2301      	movs	r3, #1
 801357a:	e0b8      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f003 0302 	and.w	r3, r3, #2
 8013584:	2b00      	cmp	r3, #0
 8013586:	d020      	beq.n	80135ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f003 0304 	and.w	r3, r3, #4
 8013590:	2b00      	cmp	r3, #0
 8013592:	d005      	beq.n	80135a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013594:	4b59      	ldr	r3, [pc, #356]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 8013596:	689b      	ldr	r3, [r3, #8]
 8013598:	4a58      	ldr	r2, [pc, #352]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 801359a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f003 0308 	and.w	r3, r3, #8
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d005      	beq.n	80135b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80135ac:	4b53      	ldr	r3, [pc, #332]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80135ae:	689b      	ldr	r3, [r3, #8]
 80135b0:	4a52      	ldr	r2, [pc, #328]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80135b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80135b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80135b8:	4b50      	ldr	r3, [pc, #320]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	689b      	ldr	r3, [r3, #8]
 80135c4:	494d      	ldr	r1, [pc, #308]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80135c6:	4313      	orrs	r3, r2
 80135c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f003 0301 	and.w	r3, r3, #1
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d044      	beq.n	8013660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d107      	bne.n	80135ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80135de:	4b47      	ldr	r3, [pc, #284]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d119      	bne.n	801361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80135ea:	2301      	movs	r3, #1
 80135ec:	e07f      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	2b02      	cmp	r3, #2
 80135f4:	d003      	beq.n	80135fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80135fa:	2b03      	cmp	r3, #3
 80135fc:	d107      	bne.n	801360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80135fe:	4b3f      	ldr	r3, [pc, #252]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013606:	2b00      	cmp	r3, #0
 8013608:	d109      	bne.n	801361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801360a:	2301      	movs	r3, #1
 801360c:	e06f      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801360e:	4b3b      	ldr	r3, [pc, #236]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f003 0302 	and.w	r3, r3, #2
 8013616:	2b00      	cmp	r3, #0
 8013618:	d101      	bne.n	801361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801361a:	2301      	movs	r3, #1
 801361c:	e067      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801361e:	4b37      	ldr	r3, [pc, #220]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	f023 0203 	bic.w	r2, r3, #3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	4934      	ldr	r1, [pc, #208]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 801362c:	4313      	orrs	r3, r2
 801362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013630:	f7fb fa98 	bl	800eb64 <HAL_GetTick>
 8013634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013636:	e00a      	b.n	801364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013638:	f7fb fa94 	bl	800eb64 <HAL_GetTick>
 801363c:	4602      	mov	r2, r0
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	1ad3      	subs	r3, r2, r3
 8013642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013646:	4293      	cmp	r3, r2
 8013648:	d901      	bls.n	801364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801364a:	2303      	movs	r3, #3
 801364c:	e04f      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801364e:	4b2b      	ldr	r3, [pc, #172]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	f003 020c 	and.w	r2, r3, #12
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	429a      	cmp	r2, r3
 801365e:	d1eb      	bne.n	8013638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013660:	4b25      	ldr	r3, [pc, #148]	@ (80136f8 <HAL_RCC_ClockConfig+0x1b8>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f003 0307 	and.w	r3, r3, #7
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	429a      	cmp	r2, r3
 801366c:	d20c      	bcs.n	8013688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801366e:	4b22      	ldr	r3, [pc, #136]	@ (80136f8 <HAL_RCC_ClockConfig+0x1b8>)
 8013670:	683a      	ldr	r2, [r7, #0]
 8013672:	b2d2      	uxtb	r2, r2
 8013674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013676:	4b20      	ldr	r3, [pc, #128]	@ (80136f8 <HAL_RCC_ClockConfig+0x1b8>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f003 0307 	and.w	r3, r3, #7
 801367e:	683a      	ldr	r2, [r7, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d001      	beq.n	8013688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013684:	2301      	movs	r3, #1
 8013686:	e032      	b.n	80136ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	f003 0304 	and.w	r3, r3, #4
 8013690:	2b00      	cmp	r3, #0
 8013692:	d008      	beq.n	80136a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013694:	4b19      	ldr	r3, [pc, #100]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	68db      	ldr	r3, [r3, #12]
 80136a0:	4916      	ldr	r1, [pc, #88]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80136a2:	4313      	orrs	r3, r2
 80136a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f003 0308 	and.w	r3, r3, #8
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d009      	beq.n	80136c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80136b2:	4b12      	ldr	r3, [pc, #72]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80136b4:	689b      	ldr	r3, [r3, #8]
 80136b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	691b      	ldr	r3, [r3, #16]
 80136be:	00db      	lsls	r3, r3, #3
 80136c0:	490e      	ldr	r1, [pc, #56]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80136c2:	4313      	orrs	r3, r2
 80136c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80136c6:	f000 f821 	bl	801370c <HAL_RCC_GetSysClockFreq>
 80136ca:	4602      	mov	r2, r0
 80136cc:	4b0b      	ldr	r3, [pc, #44]	@ (80136fc <HAL_RCC_ClockConfig+0x1bc>)
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	091b      	lsrs	r3, r3, #4
 80136d2:	f003 030f 	and.w	r3, r3, #15
 80136d6:	490a      	ldr	r1, [pc, #40]	@ (8013700 <HAL_RCC_ClockConfig+0x1c0>)
 80136d8:	5ccb      	ldrb	r3, [r1, r3]
 80136da:	fa22 f303 	lsr.w	r3, r2, r3
 80136de:	4a09      	ldr	r2, [pc, #36]	@ (8013704 <HAL_RCC_ClockConfig+0x1c4>)
 80136e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80136e2:	4b09      	ldr	r3, [pc, #36]	@ (8013708 <HAL_RCC_ClockConfig+0x1c8>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fb f9f8 	bl	800eadc <HAL_InitTick>

  return HAL_OK;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	40023c00 	.word	0x40023c00
 80136fc:	40023800 	.word	0x40023800
 8013700:	08026864 	.word	0x08026864
 8013704:	200000d8 	.word	0x200000d8
 8013708:	200002e0 	.word	0x200002e0

0801370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013710:	b094      	sub	sp, #80	@ 0x50
 8013712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013714:	2300      	movs	r3, #0
 8013716:	647b      	str	r3, [r7, #68]	@ 0x44
 8013718:	2300      	movs	r3, #0
 801371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801371c:	2300      	movs	r3, #0
 801371e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8013720:	2300      	movs	r3, #0
 8013722:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013724:	4b79      	ldr	r3, [pc, #484]	@ (801390c <HAL_RCC_GetSysClockFreq+0x200>)
 8013726:	689b      	ldr	r3, [r3, #8]
 8013728:	f003 030c 	and.w	r3, r3, #12
 801372c:	2b08      	cmp	r3, #8
 801372e:	d00d      	beq.n	801374c <HAL_RCC_GetSysClockFreq+0x40>
 8013730:	2b08      	cmp	r3, #8
 8013732:	f200 80e1 	bhi.w	80138f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8013736:	2b00      	cmp	r3, #0
 8013738:	d002      	beq.n	8013740 <HAL_RCC_GetSysClockFreq+0x34>
 801373a:	2b04      	cmp	r3, #4
 801373c:	d003      	beq.n	8013746 <HAL_RCC_GetSysClockFreq+0x3a>
 801373e:	e0db      	b.n	80138f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013740:	4b73      	ldr	r3, [pc, #460]	@ (8013910 <HAL_RCC_GetSysClockFreq+0x204>)
 8013742:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8013744:	e0db      	b.n	80138fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013746:	4b73      	ldr	r3, [pc, #460]	@ (8013914 <HAL_RCC_GetSysClockFreq+0x208>)
 8013748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801374a:	e0d8      	b.n	80138fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801374c:	4b6f      	ldr	r3, [pc, #444]	@ (801390c <HAL_RCC_GetSysClockFreq+0x200>)
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013754:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013756:	4b6d      	ldr	r3, [pc, #436]	@ (801390c <HAL_RCC_GetSysClockFreq+0x200>)
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801375e:	2b00      	cmp	r3, #0
 8013760:	d063      	beq.n	801382a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013762:	4b6a      	ldr	r3, [pc, #424]	@ (801390c <HAL_RCC_GetSysClockFreq+0x200>)
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	099b      	lsrs	r3, r3, #6
 8013768:	2200      	movs	r2, #0
 801376a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801376c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013774:	633b      	str	r3, [r7, #48]	@ 0x30
 8013776:	2300      	movs	r3, #0
 8013778:	637b      	str	r3, [r7, #52]	@ 0x34
 801377a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801377e:	4622      	mov	r2, r4
 8013780:	462b      	mov	r3, r5
 8013782:	f04f 0000 	mov.w	r0, #0
 8013786:	f04f 0100 	mov.w	r1, #0
 801378a:	0159      	lsls	r1, r3, #5
 801378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013790:	0150      	lsls	r0, r2, #5
 8013792:	4602      	mov	r2, r0
 8013794:	460b      	mov	r3, r1
 8013796:	4621      	mov	r1, r4
 8013798:	1a51      	subs	r1, r2, r1
 801379a:	6139      	str	r1, [r7, #16]
 801379c:	4629      	mov	r1, r5
 801379e:	eb63 0301 	sbc.w	r3, r3, r1
 80137a2:	617b      	str	r3, [r7, #20]
 80137a4:	f04f 0200 	mov.w	r2, #0
 80137a8:	f04f 0300 	mov.w	r3, #0
 80137ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80137b0:	4659      	mov	r1, fp
 80137b2:	018b      	lsls	r3, r1, #6
 80137b4:	4651      	mov	r1, sl
 80137b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80137ba:	4651      	mov	r1, sl
 80137bc:	018a      	lsls	r2, r1, #6
 80137be:	4651      	mov	r1, sl
 80137c0:	ebb2 0801 	subs.w	r8, r2, r1
 80137c4:	4659      	mov	r1, fp
 80137c6:	eb63 0901 	sbc.w	r9, r3, r1
 80137ca:	f04f 0200 	mov.w	r2, #0
 80137ce:	f04f 0300 	mov.w	r3, #0
 80137d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80137d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80137da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80137de:	4690      	mov	r8, r2
 80137e0:	4699      	mov	r9, r3
 80137e2:	4623      	mov	r3, r4
 80137e4:	eb18 0303 	adds.w	r3, r8, r3
 80137e8:	60bb      	str	r3, [r7, #8]
 80137ea:	462b      	mov	r3, r5
 80137ec:	eb49 0303 	adc.w	r3, r9, r3
 80137f0:	60fb      	str	r3, [r7, #12]
 80137f2:	f04f 0200 	mov.w	r2, #0
 80137f6:	f04f 0300 	mov.w	r3, #0
 80137fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80137fe:	4629      	mov	r1, r5
 8013800:	024b      	lsls	r3, r1, #9
 8013802:	4621      	mov	r1, r4
 8013804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8013808:	4621      	mov	r1, r4
 801380a:	024a      	lsls	r2, r1, #9
 801380c:	4610      	mov	r0, r2
 801380e:	4619      	mov	r1, r3
 8013810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013812:	2200      	movs	r2, #0
 8013814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801381c:	f7ed fa14 	bl	8000c48 <__aeabi_uldivmod>
 8013820:	4602      	mov	r2, r0
 8013822:	460b      	mov	r3, r1
 8013824:	4613      	mov	r3, r2
 8013826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013828:	e058      	b.n	80138dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801382a:	4b38      	ldr	r3, [pc, #224]	@ (801390c <HAL_RCC_GetSysClockFreq+0x200>)
 801382c:	685b      	ldr	r3, [r3, #4]
 801382e:	099b      	lsrs	r3, r3, #6
 8013830:	2200      	movs	r2, #0
 8013832:	4618      	mov	r0, r3
 8013834:	4611      	mov	r1, r2
 8013836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801383a:	623b      	str	r3, [r7, #32]
 801383c:	2300      	movs	r3, #0
 801383e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013844:	4642      	mov	r2, r8
 8013846:	464b      	mov	r3, r9
 8013848:	f04f 0000 	mov.w	r0, #0
 801384c:	f04f 0100 	mov.w	r1, #0
 8013850:	0159      	lsls	r1, r3, #5
 8013852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013856:	0150      	lsls	r0, r2, #5
 8013858:	4602      	mov	r2, r0
 801385a:	460b      	mov	r3, r1
 801385c:	4641      	mov	r1, r8
 801385e:	ebb2 0a01 	subs.w	sl, r2, r1
 8013862:	4649      	mov	r1, r9
 8013864:	eb63 0b01 	sbc.w	fp, r3, r1
 8013868:	f04f 0200 	mov.w	r2, #0
 801386c:	f04f 0300 	mov.w	r3, #0
 8013870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8013874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8013878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801387c:	ebb2 040a 	subs.w	r4, r2, sl
 8013880:	eb63 050b 	sbc.w	r5, r3, fp
 8013884:	f04f 0200 	mov.w	r2, #0
 8013888:	f04f 0300 	mov.w	r3, #0
 801388c:	00eb      	lsls	r3, r5, #3
 801388e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013892:	00e2      	lsls	r2, r4, #3
 8013894:	4614      	mov	r4, r2
 8013896:	461d      	mov	r5, r3
 8013898:	4643      	mov	r3, r8
 801389a:	18e3      	adds	r3, r4, r3
 801389c:	603b      	str	r3, [r7, #0]
 801389e:	464b      	mov	r3, r9
 80138a0:	eb45 0303 	adc.w	r3, r5, r3
 80138a4:	607b      	str	r3, [r7, #4]
 80138a6:	f04f 0200 	mov.w	r2, #0
 80138aa:	f04f 0300 	mov.w	r3, #0
 80138ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80138b2:	4629      	mov	r1, r5
 80138b4:	028b      	lsls	r3, r1, #10
 80138b6:	4621      	mov	r1, r4
 80138b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80138bc:	4621      	mov	r1, r4
 80138be:	028a      	lsls	r2, r1, #10
 80138c0:	4610      	mov	r0, r2
 80138c2:	4619      	mov	r1, r3
 80138c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138c6:	2200      	movs	r2, #0
 80138c8:	61bb      	str	r3, [r7, #24]
 80138ca:	61fa      	str	r2, [r7, #28]
 80138cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80138d0:	f7ed f9ba 	bl	8000c48 <__aeabi_uldivmod>
 80138d4:	4602      	mov	r2, r0
 80138d6:	460b      	mov	r3, r1
 80138d8:	4613      	mov	r3, r2
 80138da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80138dc:	4b0b      	ldr	r3, [pc, #44]	@ (801390c <HAL_RCC_GetSysClockFreq+0x200>)
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	0c1b      	lsrs	r3, r3, #16
 80138e2:	f003 0303 	and.w	r3, r3, #3
 80138e6:	3301      	adds	r3, #1
 80138e8:	005b      	lsls	r3, r3, #1
 80138ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80138ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80138ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80138f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80138f6:	e002      	b.n	80138fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80138f8:	4b05      	ldr	r3, [pc, #20]	@ (8013910 <HAL_RCC_GetSysClockFreq+0x204>)
 80138fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80138fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80138fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8013900:	4618      	mov	r0, r3
 8013902:	3750      	adds	r7, #80	@ 0x50
 8013904:	46bd      	mov	sp, r7
 8013906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801390a:	bf00      	nop
 801390c:	40023800 	.word	0x40023800
 8013910:	00f42400 	.word	0x00f42400
 8013914:	007a1200 	.word	0x007a1200

08013918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013918:	b480      	push	{r7}
 801391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801391c:	4b03      	ldr	r3, [pc, #12]	@ (801392c <HAL_RCC_GetHCLKFreq+0x14>)
 801391e:	681b      	ldr	r3, [r3, #0]
}
 8013920:	4618      	mov	r0, r3
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	200000d8 	.word	0x200000d8

08013930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013934:	f7ff fff0 	bl	8013918 <HAL_RCC_GetHCLKFreq>
 8013938:	4602      	mov	r2, r0
 801393a:	4b05      	ldr	r3, [pc, #20]	@ (8013950 <HAL_RCC_GetPCLK1Freq+0x20>)
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	0a9b      	lsrs	r3, r3, #10
 8013940:	f003 0307 	and.w	r3, r3, #7
 8013944:	4903      	ldr	r1, [pc, #12]	@ (8013954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013946:	5ccb      	ldrb	r3, [r1, r3]
 8013948:	fa22 f303 	lsr.w	r3, r2, r3
}
 801394c:	4618      	mov	r0, r3
 801394e:	bd80      	pop	{r7, pc}
 8013950:	40023800 	.word	0x40023800
 8013954:	08026874 	.word	0x08026874

08013958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801395c:	f7ff ffdc 	bl	8013918 <HAL_RCC_GetHCLKFreq>
 8013960:	4602      	mov	r2, r0
 8013962:	4b05      	ldr	r3, [pc, #20]	@ (8013978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013964:	689b      	ldr	r3, [r3, #8]
 8013966:	0b5b      	lsrs	r3, r3, #13
 8013968:	f003 0307 	and.w	r3, r3, #7
 801396c:	4903      	ldr	r1, [pc, #12]	@ (801397c <HAL_RCC_GetPCLK2Freq+0x24>)
 801396e:	5ccb      	ldrb	r3, [r1, r3]
 8013970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013974:	4618      	mov	r0, r3
 8013976:	bd80      	pop	{r7, pc}
 8013978:	40023800 	.word	0x40023800
 801397c:	08026874 	.word	0x08026874

08013980 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013988:	2300      	movs	r3, #0
 801398a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 801398c:	2300      	movs	r3, #0
 801398e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f003 0301 	and.w	r3, r3, #1
 8013998:	2b00      	cmp	r3, #0
 801399a:	d105      	bne.n	80139a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d038      	beq.n	8013a1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80139a8:	4b68      	ldr	r3, [pc, #416]	@ (8013b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80139ae:	f7fb f8d9 	bl	800eb64 <HAL_GetTick>
 80139b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80139b4:	e008      	b.n	80139c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80139b6:	f7fb f8d5 	bl	800eb64 <HAL_GetTick>
 80139ba:	4602      	mov	r2, r0
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	1ad3      	subs	r3, r2, r3
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d901      	bls.n	80139c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80139c4:	2303      	movs	r3, #3
 80139c6:	e0bd      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80139c8:	4b61      	ldr	r3, [pc, #388]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d1f0      	bne.n	80139b6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	685a      	ldr	r2, [r3, #4]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	689b      	ldr	r3, [r3, #8]
 80139dc:	019b      	lsls	r3, r3, #6
 80139de:	431a      	orrs	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	071b      	lsls	r3, r3, #28
 80139e6:	495a      	ldr	r1, [pc, #360]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80139e8:	4313      	orrs	r3, r2
 80139ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80139ee:	4b57      	ldr	r3, [pc, #348]	@ (8013b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80139f0:	2201      	movs	r2, #1
 80139f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80139f4:	f7fb f8b6 	bl	800eb64 <HAL_GetTick>
 80139f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80139fa:	e008      	b.n	8013a0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80139fc:	f7fb f8b2 	bl	800eb64 <HAL_GetTick>
 8013a00:	4602      	mov	r2, r0
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	1ad3      	subs	r3, r2, r3
 8013a06:	2b02      	cmp	r3, #2
 8013a08:	d901      	bls.n	8013a0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013a0a:	2303      	movs	r3, #3
 8013a0c:	e09a      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013a0e:	4b50      	ldr	r3, [pc, #320]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d0f0      	beq.n	80139fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f003 0302 	and.w	r3, r3, #2
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f000 8083 	beq.w	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013a28:	2300      	movs	r3, #0
 8013a2a:	60fb      	str	r3, [r7, #12]
 8013a2c:	4b48      	ldr	r3, [pc, #288]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a30:	4a47      	ldr	r2, [pc, #284]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8013a38:	4b45      	ldr	r3, [pc, #276]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013a40:	60fb      	str	r3, [r7, #12]
 8013a42:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013a44:	4b43      	ldr	r3, [pc, #268]	@ (8013b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	4a42      	ldr	r2, [pc, #264]	@ (8013b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013a4e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013a50:	f7fb f888 	bl	800eb64 <HAL_GetTick>
 8013a54:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013a56:	e008      	b.n	8013a6a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8013a58:	f7fb f884 	bl	800eb64 <HAL_GetTick>
 8013a5c:	4602      	mov	r2, r0
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	1ad3      	subs	r3, r2, r3
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	d901      	bls.n	8013a6a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8013a66:	2303      	movs	r3, #3
 8013a68:	e06c      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8013b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d0f0      	beq.n	8013a58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013a76:	4b36      	ldr	r3, [pc, #216]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013a7e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d02f      	beq.n	8013ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	691b      	ldr	r3, [r3, #16]
 8013a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013a8e:	693a      	ldr	r2, [r7, #16]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d028      	beq.n	8013ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013a94:	4b2e      	ldr	r3, [pc, #184]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013a9c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8013b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8013b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013aaa:	4a29      	ldr	r2, [pc, #164]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013ab0:	4b27      	ldr	r3, [pc, #156]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ab4:	f003 0301 	and.w	r3, r3, #1
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d114      	bne.n	8013ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013abc:	f7fb f852 	bl	800eb64 <HAL_GetTick>
 8013ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ac2:	e00a      	b.n	8013ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013ac4:	f7fb f84e 	bl	800eb64 <HAL_GetTick>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	1ad3      	subs	r3, r2, r3
 8013ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	d901      	bls.n	8013ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8013ad6:	2303      	movs	r3, #3
 8013ad8:	e034      	b.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ada:	4b1d      	ldr	r3, [pc, #116]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ade:	f003 0302 	and.w	r3, r3, #2
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d0ee      	beq.n	8013ac4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	691b      	ldr	r3, [r3, #16]
 8013aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013af2:	d10d      	bne.n	8013b10 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8013af4:	4b16      	ldr	r3, [pc, #88]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013af6:	689b      	ldr	r3, [r3, #8]
 8013af8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	691b      	ldr	r3, [r3, #16]
 8013b00:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013b08:	4911      	ldr	r1, [pc, #68]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	608b      	str	r3, [r1, #8]
 8013b0e:	e005      	b.n	8013b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8013b10:	4b0f      	ldr	r3, [pc, #60]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013b12:	689b      	ldr	r3, [r3, #8]
 8013b14:	4a0e      	ldr	r2, [pc, #56]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013b16:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8013b1a:	6093      	str	r3, [r2, #8]
 8013b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013b1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	691b      	ldr	r3, [r3, #16]
 8013b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013b28:	4909      	ldr	r1, [pc, #36]	@ (8013b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	f003 0308 	and.w	r3, r3, #8
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d003      	beq.n	8013b42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	7d1a      	ldrb	r2, [r3, #20]
 8013b3e:	4b07      	ldr	r3, [pc, #28]	@ (8013b5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8013b40:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8013b42:	2300      	movs	r3, #0
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3718      	adds	r7, #24
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	42470068 	.word	0x42470068
 8013b50:	40023800 	.word	0x40023800
 8013b54:	40007000 	.word	0x40007000
 8013b58:	42470e40 	.word	0x42470e40
 8013b5c:	424711e0 	.word	0x424711e0

08013b60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013b68:	2301      	movs	r3, #1
 8013b6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d101      	bne.n	8013b76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8013b72:	2301      	movs	r3, #1
 8013b74:	e073      	b.n	8013c5e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	7f5b      	ldrb	r3, [r3, #29]
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d105      	bne.n	8013b8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8013b86:	6878      	ldr	r0, [r7, #4]
 8013b88:	f7f1 fac8 	bl	800511c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2202      	movs	r2, #2
 8013b90:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	f003 0310 	and.w	r3, r3, #16
 8013b9c:	2b10      	cmp	r3, #16
 8013b9e:	d055      	beq.n	8013c4c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	22ca      	movs	r2, #202	@ 0xca
 8013ba6:	625a      	str	r2, [r3, #36]	@ 0x24
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2253      	movs	r2, #83	@ 0x53
 8013bae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f000 fa49 	bl	8014048 <RTC_EnterInitMode>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8013bba:	7bfb      	ldrb	r3, [r7, #15]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d12c      	bne.n	8013c1a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	689b      	ldr	r3, [r3, #8]
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	6812      	ldr	r2, [r2, #0]
 8013bca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013bd2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	6899      	ldr	r1, [r3, #8]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	685a      	ldr	r2, [r3, #4]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	691b      	ldr	r3, [r3, #16]
 8013be2:	431a      	orrs	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	695b      	ldr	r3, [r3, #20]
 8013be8:	431a      	orrs	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	430a      	orrs	r2, r1
 8013bf0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	687a      	ldr	r2, [r7, #4]
 8013bf8:	68d2      	ldr	r2, [r2, #12]
 8013bfa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	6919      	ldr	r1, [r3, #16]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	041a      	lsls	r2, r3, #16
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	430a      	orrs	r2, r1
 8013c0e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 fa50 	bl	80140b6 <RTC_ExitInitMode>
 8013c16:	4603      	mov	r3, r0
 8013c18:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8013c1a:	7bfb      	ldrb	r3, [r7, #15]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d110      	bne.n	8013c42 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013c2e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	699a      	ldr	r2, [r3, #24]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	430a      	orrs	r2, r1
 8013c40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	22ff      	movs	r2, #255	@ 0xff
 8013c48:	625a      	str	r2, [r3, #36]	@ 0x24
 8013c4a:	e001      	b.n	8013c50 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8013c50:	7bfb      	ldrb	r3, [r7, #15]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d102      	bne.n	8013c5c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2201      	movs	r2, #1
 8013c5a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8013c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013c66:	b590      	push	{r4, r7, lr}
 8013c68:	b087      	sub	sp, #28
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	60f8      	str	r0, [r7, #12]
 8013c6e:	60b9      	str	r1, [r7, #8]
 8013c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013c72:	2300      	movs	r3, #0
 8013c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	7f1b      	ldrb	r3, [r3, #28]
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d101      	bne.n	8013c82 <HAL_RTC_SetTime+0x1c>
 8013c7e:	2302      	movs	r3, #2
 8013c80:	e087      	b.n	8013d92 <HAL_RTC_SetTime+0x12c>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2201      	movs	r2, #1
 8013c86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2202      	movs	r2, #2
 8013c8c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d126      	bne.n	8013ce2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	689b      	ldr	r3, [r3, #8]
 8013c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d102      	bne.n	8013ca8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	4618      	mov	r0, r3
 8013cae:	f000 fa27 	bl	8014100 <RTC_ByteToBcd2>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	785b      	ldrb	r3, [r3, #1]
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f000 fa20 	bl	8014100 <RTC_ByteToBcd2>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013cc4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	789b      	ldrb	r3, [r3, #2]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f000 fa18 	bl	8014100 <RTC_ByteToBcd2>
 8013cd0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013cd2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	78db      	ldrb	r3, [r3, #3]
 8013cda:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	617b      	str	r3, [r7, #20]
 8013ce0:	e018      	b.n	8013d14 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	689b      	ldr	r3, [r3, #8]
 8013ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d102      	bne.n	8013cf6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	785b      	ldrb	r3, [r3, #1]
 8013d00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013d02:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8013d04:	68ba      	ldr	r2, [r7, #8]
 8013d06:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013d08:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	78db      	ldrb	r3, [r3, #3]
 8013d0e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013d10:	4313      	orrs	r3, r2
 8013d12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	22ca      	movs	r2, #202	@ 0xca
 8013d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2253      	movs	r2, #83	@ 0x53
 8013d22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f000 f98f 	bl	8014048 <RTC_EnterInitMode>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8013d2e:	7cfb      	ldrb	r3, [r7, #19]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d120      	bne.n	8013d76 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8013d3e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8013d42:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	689a      	ldr	r2, [r3, #8]
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013d52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	6899      	ldr	r1, [r3, #8]
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	68da      	ldr	r2, [r3, #12]
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	691b      	ldr	r3, [r3, #16]
 8013d62:	431a      	orrs	r2, r3
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	430a      	orrs	r2, r1
 8013d6a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f000 f9a2 	bl	80140b6 <RTC_ExitInitMode>
 8013d72:	4603      	mov	r3, r0
 8013d74:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8013d76:	7cfb      	ldrb	r3, [r7, #19]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d102      	bne.n	8013d82 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	22ff      	movs	r2, #255	@ 0xff
 8013d88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	771a      	strb	r2, [r3, #28]

  return status;
 8013d90:	7cfb      	ldrb	r3, [r7, #19]
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	371c      	adds	r7, #28
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd90      	pop	{r4, r7, pc}

08013d9a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b086      	sub	sp, #24
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	60f8      	str	r0, [r7, #12]
 8013da2:	60b9      	str	r1, [r7, #8]
 8013da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013da6:	2300      	movs	r3, #0
 8013da8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	691b      	ldr	r3, [r3, #16]
 8013dba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8013dcc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8013dd0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	0c1b      	lsrs	r3, r3, #16
 8013dd6:	b2db      	uxtb	r3, r3
 8013dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ddc:	b2da      	uxtb	r2, r3
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	0a1b      	lsrs	r3, r3, #8
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013dfa:	b2da      	uxtb	r2, r3
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	0d9b      	lsrs	r3, r3, #22
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	f003 0301 	and.w	r3, r3, #1
 8013e0a:	b2da      	uxtb	r2, r3
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d11a      	bne.n	8013e4c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f000 f98e 	bl	801413c <RTC_Bcd2ToByte>
 8013e20:	4603      	mov	r3, r0
 8013e22:	461a      	mov	r2, r3
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	785b      	ldrb	r3, [r3, #1]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f000 f985 	bl	801413c <RTC_Bcd2ToByte>
 8013e32:	4603      	mov	r3, r0
 8013e34:	461a      	mov	r2, r3
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	789b      	ldrb	r3, [r3, #2]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f000 f97c 	bl	801413c <RTC_Bcd2ToByte>
 8013e44:	4603      	mov	r3, r0
 8013e46:	461a      	mov	r2, r3
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8013e4c:	2300      	movs	r3, #0
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3718      	adds	r7, #24
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}

08013e56 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013e56:	b590      	push	{r4, r7, lr}
 8013e58:	b087      	sub	sp, #28
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	60f8      	str	r0, [r7, #12]
 8013e5e:	60b9      	str	r1, [r7, #8]
 8013e60:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8013e62:	2300      	movs	r3, #0
 8013e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	7f1b      	ldrb	r3, [r3, #28]
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d101      	bne.n	8013e72 <HAL_RTC_SetDate+0x1c>
 8013e6e:	2302      	movs	r3, #2
 8013e70:	e071      	b.n	8013f56 <HAL_RTC_SetDate+0x100>
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2201      	movs	r2, #1
 8013e76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2202      	movs	r2, #2
 8013e7c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d10e      	bne.n	8013ea2 <HAL_RTC_SetDate+0x4c>
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	785b      	ldrb	r3, [r3, #1]
 8013e88:	f003 0310 	and.w	r3, r3, #16
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d008      	beq.n	8013ea2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	785b      	ldrb	r3, [r3, #1]
 8013e94:	f023 0310 	bic.w	r3, r3, #16
 8013e98:	b2db      	uxtb	r3, r3
 8013e9a:	330a      	adds	r3, #10
 8013e9c:	b2da      	uxtb	r2, r3
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d11c      	bne.n	8013ee2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	78db      	ldrb	r3, [r3, #3]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f000 f927 	bl	8014100 <RTC_ByteToBcd2>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	785b      	ldrb	r3, [r3, #1]
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f000 f920 	bl	8014100 <RTC_ByteToBcd2>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013ec4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	789b      	ldrb	r3, [r3, #2]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f000 f918 	bl	8014100 <RTC_ByteToBcd2>
 8013ed0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013ed2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013edc:	4313      	orrs	r3, r2
 8013ede:	617b      	str	r3, [r7, #20]
 8013ee0:	e00e      	b.n	8013f00 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	78db      	ldrb	r3, [r3, #3]
 8013ee6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	785b      	ldrb	r3, [r3, #1]
 8013eec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013eee:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8013ef0:	68ba      	ldr	r2, [r7, #8]
 8013ef2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013ef4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013efc:	4313      	orrs	r3, r2
 8013efe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	22ca      	movs	r2, #202	@ 0xca
 8013f06:	625a      	str	r2, [r3, #36]	@ 0x24
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	2253      	movs	r2, #83	@ 0x53
 8013f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013f10:	68f8      	ldr	r0, [r7, #12]
 8013f12:	f000 f899 	bl	8014048 <RTC_EnterInitMode>
 8013f16:	4603      	mov	r3, r0
 8013f18:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8013f1a:	7cfb      	ldrb	r3, [r7, #19]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d10c      	bne.n	8013f3a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013f2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013f2e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f000 f8c0 	bl	80140b6 <RTC_ExitInitMode>
 8013f36:	4603      	mov	r3, r0
 8013f38:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8013f3a:	7cfb      	ldrb	r3, [r7, #19]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d102      	bne.n	8013f46 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2201      	movs	r2, #1
 8013f44:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	22ff      	movs	r2, #255	@ 0xff
 8013f4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2200      	movs	r2, #0
 8013f52:	771a      	strb	r2, [r3, #28]

  return status;
 8013f54:	7cfb      	ldrb	r3, [r7, #19]
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	371c      	adds	r7, #28
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd90      	pop	{r4, r7, pc}

08013f5e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b086      	sub	sp, #24
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	60f8      	str	r0, [r7, #12]
 8013f66:	60b9      	str	r1, [r7, #8]
 8013f68:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013f78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013f7c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	0c1b      	lsrs	r3, r3, #16
 8013f82:	b2da      	uxtb	r2, r3
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	0a1b      	lsrs	r3, r3, #8
 8013f8c:	b2db      	uxtb	r3, r3
 8013f8e:	f003 031f 	and.w	r3, r3, #31
 8013f92:	b2da      	uxtb	r2, r3
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013fa0:	b2da      	uxtb	r2, r3
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	0b5b      	lsrs	r3, r3, #13
 8013faa:	b2db      	uxtb	r3, r3
 8013fac:	f003 0307 	and.w	r3, r3, #7
 8013fb0:	b2da      	uxtb	r2, r3
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d11a      	bne.n	8013ff2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	78db      	ldrb	r3, [r3, #3]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f000 f8bb 	bl	801413c <RTC_Bcd2ToByte>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	461a      	mov	r2, r3
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	785b      	ldrb	r3, [r3, #1]
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f000 f8b2 	bl	801413c <RTC_Bcd2ToByte>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	461a      	mov	r2, r3
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	789b      	ldrb	r3, [r3, #2]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f000 f8a9 	bl	801413c <RTC_Bcd2ToByte>
 8013fea:	4603      	mov	r3, r0
 8013fec:	461a      	mov	r2, r3
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3718      	adds	r7, #24
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b084      	sub	sp, #16
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014004:	2300      	movs	r3, #0
 8014006:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4a0d      	ldr	r2, [pc, #52]	@ (8014044 <HAL_RTC_WaitForSynchro+0x48>)
 801400e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014010:	f7fa fda8 	bl	800eb64 <HAL_GetTick>
 8014014:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014016:	e009      	b.n	801402c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014018:	f7fa fda4 	bl	800eb64 <HAL_GetTick>
 801401c:	4602      	mov	r2, r0
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014026:	d901      	bls.n	801402c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8014028:	2303      	movs	r3, #3
 801402a:	e007      	b.n	801403c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	f003 0320 	and.w	r3, r3, #32
 8014036:	2b00      	cmp	r3, #0
 8014038:	d0ee      	beq.n	8014018 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 801403a:	2300      	movs	r3, #0
}
 801403c:	4618      	mov	r0, r3
 801403e:	3710      	adds	r7, #16
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}
 8014044:	00013f5f 	.word	0x00013f5f

08014048 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014050:	2300      	movs	r3, #0
 8014052:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014054:	2300      	movs	r3, #0
 8014056:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014062:	2b00      	cmp	r3, #0
 8014064:	d122      	bne.n	80140ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	68da      	ldr	r2, [r3, #12]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014074:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014076:	f7fa fd75 	bl	800eb64 <HAL_GetTick>
 801407a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801407c:	e00c      	b.n	8014098 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801407e:	f7fa fd71 	bl	800eb64 <HAL_GetTick>
 8014082:	4602      	mov	r2, r0
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	1ad3      	subs	r3, r2, r3
 8014088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801408c:	d904      	bls.n	8014098 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2204      	movs	r2, #4
 8014092:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8014094:	2301      	movs	r3, #1
 8014096:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d102      	bne.n	80140ac <RTC_EnterInitMode+0x64>
 80140a6:	7bfb      	ldrb	r3, [r7, #15]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d1e8      	bne.n	801407e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3710      	adds	r7, #16
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}

080140b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	b084      	sub	sp, #16
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80140be:	2300      	movs	r3, #0
 80140c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	68da      	ldr	r2, [r3, #12]
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80140d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	689b      	ldr	r3, [r3, #8]
 80140d8:	f003 0320 	and.w	r3, r3, #32
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d10a      	bne.n	80140f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7ff ff8b 	bl	8013ffc <HAL_RTC_WaitForSynchro>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d004      	beq.n	80140f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2204      	movs	r2, #4
 80140f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80140f2:	2301      	movs	r3, #1
 80140f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80140f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3710      	adds	r7, #16
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8014100:	b480      	push	{r7}
 8014102:	b085      	sub	sp, #20
 8014104:	af00      	add	r7, sp, #0
 8014106:	4603      	mov	r3, r0
 8014108:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801410a:	2300      	movs	r3, #0
 801410c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801410e:	e005      	b.n	801411c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	3301      	adds	r3, #1
 8014114:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	3b0a      	subs	r3, #10
 801411a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 801411c:	79fb      	ldrb	r3, [r7, #7]
 801411e:	2b09      	cmp	r3, #9
 8014120:	d8f6      	bhi.n	8014110 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	b2db      	uxtb	r3, r3
 8014126:	011b      	lsls	r3, r3, #4
 8014128:	b2da      	uxtb	r2, r3
 801412a:	79fb      	ldrb	r3, [r7, #7]
 801412c:	4313      	orrs	r3, r2
 801412e:	b2db      	uxtb	r3, r3
}
 8014130:	4618      	mov	r0, r3
 8014132:	3714      	adds	r7, #20
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr

0801413c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	4603      	mov	r3, r0
 8014144:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8014146:	2300      	movs	r3, #0
 8014148:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801414a:	79fb      	ldrb	r3, [r7, #7]
 801414c:	091b      	lsrs	r3, r3, #4
 801414e:	b2db      	uxtb	r3, r3
 8014150:	461a      	mov	r2, r3
 8014152:	4613      	mov	r3, r2
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	4413      	add	r3, r2
 8014158:	005b      	lsls	r3, r3, #1
 801415a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	b2da      	uxtb	r2, r3
 8014160:	79fb      	ldrb	r3, [r7, #7]
 8014162:	f003 030f 	and.w	r3, r3, #15
 8014166:	b2db      	uxtb	r3, r3
 8014168:	4413      	add	r3, r2
 801416a:	b2db      	uxtb	r3, r3
}
 801416c:	4618      	mov	r0, r3
 801416e:	3714      	adds	r7, #20
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr

08014178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d101      	bne.n	801418a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014186:	2301      	movs	r3, #1
 8014188:	e041      	b.n	801420e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014190:	b2db      	uxtb	r3, r3
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f7f0 ffe8 	bl	8005174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2202      	movs	r2, #2
 80141a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	3304      	adds	r3, #4
 80141b4:	4619      	mov	r1, r3
 80141b6:	4610      	mov	r0, r2
 80141b8:	f000 fc6a 	bl	8014a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2201      	movs	r2, #1
 80141c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2201      	movs	r2, #1
 80141c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2201      	movs	r2, #1
 80141d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2201      	movs	r2, #1
 80141e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	2201      	movs	r2, #1
 80141e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2201      	movs	r2, #1
 80141f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2201      	movs	r2, #1
 80141f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2201      	movs	r2, #1
 8014200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2201      	movs	r2, #1
 8014208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801420c:	2300      	movs	r3, #0
}
 801420e:	4618      	mov	r0, r3
 8014210:	3708      	adds	r7, #8
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
	...

08014218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014218:	b480      	push	{r7}
 801421a:	b085      	sub	sp, #20
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014226:	b2db      	uxtb	r3, r3
 8014228:	2b01      	cmp	r3, #1
 801422a:	d001      	beq.n	8014230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801422c:	2301      	movs	r3, #1
 801422e:	e044      	b.n	80142ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2202      	movs	r2, #2
 8014234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	68da      	ldr	r2, [r3, #12]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	f042 0201 	orr.w	r2, r2, #1
 8014246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	4a1e      	ldr	r2, [pc, #120]	@ (80142c8 <HAL_TIM_Base_Start_IT+0xb0>)
 801424e:	4293      	cmp	r3, r2
 8014250:	d018      	beq.n	8014284 <HAL_TIM_Base_Start_IT+0x6c>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801425a:	d013      	beq.n	8014284 <HAL_TIM_Base_Start_IT+0x6c>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	4a1a      	ldr	r2, [pc, #104]	@ (80142cc <HAL_TIM_Base_Start_IT+0xb4>)
 8014262:	4293      	cmp	r3, r2
 8014264:	d00e      	beq.n	8014284 <HAL_TIM_Base_Start_IT+0x6c>
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	4a19      	ldr	r2, [pc, #100]	@ (80142d0 <HAL_TIM_Base_Start_IT+0xb8>)
 801426c:	4293      	cmp	r3, r2
 801426e:	d009      	beq.n	8014284 <HAL_TIM_Base_Start_IT+0x6c>
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4a17      	ldr	r2, [pc, #92]	@ (80142d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d004      	beq.n	8014284 <HAL_TIM_Base_Start_IT+0x6c>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	4a16      	ldr	r2, [pc, #88]	@ (80142d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8014280:	4293      	cmp	r3, r2
 8014282:	d111      	bne.n	80142a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	689b      	ldr	r3, [r3, #8]
 801428a:	f003 0307 	and.w	r3, r3, #7
 801428e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2b06      	cmp	r3, #6
 8014294:	d010      	beq.n	80142b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f042 0201 	orr.w	r2, r2, #1
 80142a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142a6:	e007      	b.n	80142b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	681a      	ldr	r2, [r3, #0]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f042 0201 	orr.w	r2, r2, #1
 80142b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80142b8:	2300      	movs	r3, #0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop
 80142c8:	40010000 	.word	0x40010000
 80142cc:	40000400 	.word	0x40000400
 80142d0:	40000800 	.word	0x40000800
 80142d4:	40000c00 	.word	0x40000c00
 80142d8:	40014000 	.word	0x40014000

080142dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80142dc:	b480      	push	{r7}
 80142de:	b083      	sub	sp, #12
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	68da      	ldr	r2, [r3, #12]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	f022 0201 	bic.w	r2, r2, #1
 80142f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	6a1a      	ldr	r2, [r3, #32]
 80142fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80142fe:	4013      	ands	r3, r2
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10f      	bne.n	8014324 <HAL_TIM_Base_Stop_IT+0x48>
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	6a1a      	ldr	r2, [r3, #32]
 801430a:	f240 4344 	movw	r3, #1092	@ 0x444
 801430e:	4013      	ands	r3, r2
 8014310:	2b00      	cmp	r3, #0
 8014312:	d107      	bne.n	8014324 <HAL_TIM_Base_Stop_IT+0x48>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	f022 0201 	bic.w	r2, r2, #1
 8014322:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2201      	movs	r2, #1
 8014328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 801432c:	2300      	movs	r3, #0
}
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b082      	sub	sp, #8
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014348:	2301      	movs	r3, #1
 801434a:	e041      	b.n	80143d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014352:	b2db      	uxtb	r3, r3
 8014354:	2b00      	cmp	r3, #0
 8014356:	d106      	bne.n	8014366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2200      	movs	r2, #0
 801435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 f839 	bl	80143d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2202      	movs	r2, #2
 801436a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	3304      	adds	r3, #4
 8014376:	4619      	mov	r1, r3
 8014378:	4610      	mov	r0, r2
 801437a:	f000 fb89 	bl	8014a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2201      	movs	r2, #1
 8014382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2201      	movs	r2, #1
 801438a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2201      	movs	r2, #1
 8014392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2201      	movs	r2, #1
 801439a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2201      	movs	r2, #1
 80143a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2201      	movs	r2, #1
 80143aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2201      	movs	r2, #1
 80143b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2201      	movs	r2, #1
 80143ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2201      	movs	r2, #1
 80143c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2201      	movs	r2, #1
 80143ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80143ce:	2300      	movs	r3, #0
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3708      	adds	r7, #8
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80143e0:	bf00      	nop
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d109      	bne.n	8014410 <HAL_TIM_PWM_Start+0x24>
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014402:	b2db      	uxtb	r3, r3
 8014404:	2b01      	cmp	r3, #1
 8014406:	bf14      	ite	ne
 8014408:	2301      	movne	r3, #1
 801440a:	2300      	moveq	r3, #0
 801440c:	b2db      	uxtb	r3, r3
 801440e:	e022      	b.n	8014456 <HAL_TIM_PWM_Start+0x6a>
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	2b04      	cmp	r3, #4
 8014414:	d109      	bne.n	801442a <HAL_TIM_PWM_Start+0x3e>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801441c:	b2db      	uxtb	r3, r3
 801441e:	2b01      	cmp	r3, #1
 8014420:	bf14      	ite	ne
 8014422:	2301      	movne	r3, #1
 8014424:	2300      	moveq	r3, #0
 8014426:	b2db      	uxtb	r3, r3
 8014428:	e015      	b.n	8014456 <HAL_TIM_PWM_Start+0x6a>
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	2b08      	cmp	r3, #8
 801442e:	d109      	bne.n	8014444 <HAL_TIM_PWM_Start+0x58>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014436:	b2db      	uxtb	r3, r3
 8014438:	2b01      	cmp	r3, #1
 801443a:	bf14      	ite	ne
 801443c:	2301      	movne	r3, #1
 801443e:	2300      	moveq	r3, #0
 8014440:	b2db      	uxtb	r3, r3
 8014442:	e008      	b.n	8014456 <HAL_TIM_PWM_Start+0x6a>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b01      	cmp	r3, #1
 801444e:	bf14      	ite	ne
 8014450:	2301      	movne	r3, #1
 8014452:	2300      	moveq	r3, #0
 8014454:	b2db      	uxtb	r3, r3
 8014456:	2b00      	cmp	r3, #0
 8014458:	d001      	beq.n	801445e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801445a:	2301      	movs	r3, #1
 801445c:	e068      	b.n	8014530 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d104      	bne.n	801446e <HAL_TIM_PWM_Start+0x82>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2202      	movs	r2, #2
 8014468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801446c:	e013      	b.n	8014496 <HAL_TIM_PWM_Start+0xaa>
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	2b04      	cmp	r3, #4
 8014472:	d104      	bne.n	801447e <HAL_TIM_PWM_Start+0x92>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2202      	movs	r2, #2
 8014478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801447c:	e00b      	b.n	8014496 <HAL_TIM_PWM_Start+0xaa>
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	2b08      	cmp	r3, #8
 8014482:	d104      	bne.n	801448e <HAL_TIM_PWM_Start+0xa2>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2202      	movs	r2, #2
 8014488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801448c:	e003      	b.n	8014496 <HAL_TIM_PWM_Start+0xaa>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2202      	movs	r2, #2
 8014492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2201      	movs	r2, #1
 801449c:	6839      	ldr	r1, [r7, #0]
 801449e:	4618      	mov	r0, r3
 80144a0:	f000 fda8 	bl	8014ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4a23      	ldr	r2, [pc, #140]	@ (8014538 <HAL_TIM_PWM_Start+0x14c>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d107      	bne.n	80144be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80144bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	4a1d      	ldr	r2, [pc, #116]	@ (8014538 <HAL_TIM_PWM_Start+0x14c>)
 80144c4:	4293      	cmp	r3, r2
 80144c6:	d018      	beq.n	80144fa <HAL_TIM_PWM_Start+0x10e>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80144d0:	d013      	beq.n	80144fa <HAL_TIM_PWM_Start+0x10e>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	4a19      	ldr	r2, [pc, #100]	@ (801453c <HAL_TIM_PWM_Start+0x150>)
 80144d8:	4293      	cmp	r3, r2
 80144da:	d00e      	beq.n	80144fa <HAL_TIM_PWM_Start+0x10e>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a17      	ldr	r2, [pc, #92]	@ (8014540 <HAL_TIM_PWM_Start+0x154>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d009      	beq.n	80144fa <HAL_TIM_PWM_Start+0x10e>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a16      	ldr	r2, [pc, #88]	@ (8014544 <HAL_TIM_PWM_Start+0x158>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d004      	beq.n	80144fa <HAL_TIM_PWM_Start+0x10e>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a14      	ldr	r2, [pc, #80]	@ (8014548 <HAL_TIM_PWM_Start+0x15c>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d111      	bne.n	801451e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	689b      	ldr	r3, [r3, #8]
 8014500:	f003 0307 	and.w	r3, r3, #7
 8014504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2b06      	cmp	r3, #6
 801450a:	d010      	beq.n	801452e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	681a      	ldr	r2, [r3, #0]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	f042 0201 	orr.w	r2, r2, #1
 801451a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801451c:	e007      	b.n	801452e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	681a      	ldr	r2, [r3, #0]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	f042 0201 	orr.w	r2, r2, #1
 801452c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801452e:	2300      	movs	r3, #0
}
 8014530:	4618      	mov	r0, r3
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	40010000 	.word	0x40010000
 801453c:	40000400 	.word	0x40000400
 8014540:	40000800 	.word	0x40000800
 8014544:	40000c00 	.word	0x40000c00
 8014548:	40014000 	.word	0x40014000

0801454c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	691b      	ldr	r3, [r3, #16]
 8014562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	f003 0302 	and.w	r3, r3, #2
 801456a:	2b00      	cmp	r3, #0
 801456c:	d020      	beq.n	80145b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f003 0302 	and.w	r3, r3, #2
 8014574:	2b00      	cmp	r3, #0
 8014576:	d01b      	beq.n	80145b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f06f 0202 	mvn.w	r2, #2
 8014580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2201      	movs	r2, #1
 8014586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	699b      	ldr	r3, [r3, #24]
 801458e:	f003 0303 	and.w	r3, r3, #3
 8014592:	2b00      	cmp	r3, #0
 8014594:	d003      	beq.n	801459e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 fa5b 	bl	8014a52 <HAL_TIM_IC_CaptureCallback>
 801459c:	e005      	b.n	80145aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fa4d 	bl	8014a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 fa5e 	bl	8014a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2200      	movs	r2, #0
 80145ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	f003 0304 	and.w	r3, r3, #4
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d020      	beq.n	80145fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	f003 0304 	and.w	r3, r3, #4
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d01b      	beq.n	80145fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f06f 0204 	mvn.w	r2, #4
 80145cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2202      	movs	r2, #2
 80145d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	699b      	ldr	r3, [r3, #24]
 80145da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d003      	beq.n	80145ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fa35 	bl	8014a52 <HAL_TIM_IC_CaptureCallback>
 80145e8:	e005      	b.n	80145f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 fa27 	bl	8014a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f000 fa38 	bl	8014a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2200      	movs	r2, #0
 80145fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	f003 0308 	and.w	r3, r3, #8
 8014602:	2b00      	cmp	r3, #0
 8014604:	d020      	beq.n	8014648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	f003 0308 	and.w	r3, r3, #8
 801460c:	2b00      	cmp	r3, #0
 801460e:	d01b      	beq.n	8014648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f06f 0208 	mvn.w	r2, #8
 8014618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2204      	movs	r2, #4
 801461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	69db      	ldr	r3, [r3, #28]
 8014626:	f003 0303 	and.w	r3, r3, #3
 801462a:	2b00      	cmp	r3, #0
 801462c:	d003      	beq.n	8014636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f000 fa0f 	bl	8014a52 <HAL_TIM_IC_CaptureCallback>
 8014634:	e005      	b.n	8014642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 fa01 	bl	8014a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 fa12 	bl	8014a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2200      	movs	r2, #0
 8014646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	f003 0310 	and.w	r3, r3, #16
 801464e:	2b00      	cmp	r3, #0
 8014650:	d020      	beq.n	8014694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	f003 0310 	and.w	r3, r3, #16
 8014658:	2b00      	cmp	r3, #0
 801465a:	d01b      	beq.n	8014694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	f06f 0210 	mvn.w	r2, #16
 8014664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2208      	movs	r2, #8
 801466a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	69db      	ldr	r3, [r3, #28]
 8014672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014676:	2b00      	cmp	r3, #0
 8014678:	d003      	beq.n	8014682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f000 f9e9 	bl	8014a52 <HAL_TIM_IC_CaptureCallback>
 8014680:	e005      	b.n	801468e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 f9db 	bl	8014a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f000 f9ec 	bl	8014a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2200      	movs	r2, #0
 8014692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	f003 0301 	and.w	r3, r3, #1
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00c      	beq.n	80146b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f003 0301 	and.w	r3, r3, #1
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d007      	beq.n	80146b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f06f 0201 	mvn.w	r2, #1
 80146b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ec fc40 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d00c      	beq.n	80146dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d007      	beq.n	80146dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80146d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 fd2a 	bl	8015130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d00c      	beq.n	8014700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d007      	beq.n	8014700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80146f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f9bd 	bl	8014a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	f003 0320 	and.w	r3, r3, #32
 8014706:	2b00      	cmp	r3, #0
 8014708:	d00c      	beq.n	8014724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f003 0320 	and.w	r3, r3, #32
 8014710:	2b00      	cmp	r3, #0
 8014712:	d007      	beq.n	8014724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f06f 0220 	mvn.w	r2, #32
 801471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f000 fcfc 	bl	801511c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014724:	bf00      	nop
 8014726:	3710      	adds	r7, #16
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014738:	2300      	movs	r3, #0
 801473a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014742:	2b01      	cmp	r3, #1
 8014744:	d101      	bne.n	801474a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014746:	2302      	movs	r3, #2
 8014748:	e0ae      	b.n	80148a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	2201      	movs	r2, #1
 801474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2b0c      	cmp	r3, #12
 8014756:	f200 809f 	bhi.w	8014898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801475a:	a201      	add	r2, pc, #4	@ (adr r2, 8014760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014760:	08014795 	.word	0x08014795
 8014764:	08014899 	.word	0x08014899
 8014768:	08014899 	.word	0x08014899
 801476c:	08014899 	.word	0x08014899
 8014770:	080147d5 	.word	0x080147d5
 8014774:	08014899 	.word	0x08014899
 8014778:	08014899 	.word	0x08014899
 801477c:	08014899 	.word	0x08014899
 8014780:	08014817 	.word	0x08014817
 8014784:	08014899 	.word	0x08014899
 8014788:	08014899 	.word	0x08014899
 801478c:	08014899 	.word	0x08014899
 8014790:	08014857 	.word	0x08014857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	68b9      	ldr	r1, [r7, #8]
 801479a:	4618      	mov	r0, r3
 801479c:	f000 fa04 	bl	8014ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	699a      	ldr	r2, [r3, #24]
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	f042 0208 	orr.w	r2, r2, #8
 80147ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	699a      	ldr	r2, [r3, #24]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f022 0204 	bic.w	r2, r2, #4
 80147be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	6999      	ldr	r1, [r3, #24]
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	691a      	ldr	r2, [r3, #16]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	430a      	orrs	r2, r1
 80147d0:	619a      	str	r2, [r3, #24]
      break;
 80147d2:	e064      	b.n	801489e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	68b9      	ldr	r1, [r7, #8]
 80147da:	4618      	mov	r0, r3
 80147dc:	f000 fa4a 	bl	8014c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	699a      	ldr	r2, [r3, #24]
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80147ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	699a      	ldr	r2, [r3, #24]
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80147fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	6999      	ldr	r1, [r3, #24]
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	691b      	ldr	r3, [r3, #16]
 801480a:	021a      	lsls	r2, r3, #8
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	430a      	orrs	r2, r1
 8014812:	619a      	str	r2, [r3, #24]
      break;
 8014814:	e043      	b.n	801489e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	68b9      	ldr	r1, [r7, #8]
 801481c:	4618      	mov	r0, r3
 801481e:	f000 fa95 	bl	8014d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	69da      	ldr	r2, [r3, #28]
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f042 0208 	orr.w	r2, r2, #8
 8014830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	69da      	ldr	r2, [r3, #28]
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	f022 0204 	bic.w	r2, r2, #4
 8014840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	69d9      	ldr	r1, [r3, #28]
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	691a      	ldr	r2, [r3, #16]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	430a      	orrs	r2, r1
 8014852:	61da      	str	r2, [r3, #28]
      break;
 8014854:	e023      	b.n	801489e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	68b9      	ldr	r1, [r7, #8]
 801485c:	4618      	mov	r0, r3
 801485e:	f000 fadf 	bl	8014e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	69da      	ldr	r2, [r3, #28]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	69da      	ldr	r2, [r3, #28]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8014880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	69d9      	ldr	r1, [r3, #28]
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	691b      	ldr	r3, [r3, #16]
 801488c:	021a      	lsls	r2, r3, #8
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	430a      	orrs	r2, r1
 8014894:	61da      	str	r2, [r3, #28]
      break;
 8014896:	e002      	b.n	801489e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014898:	2301      	movs	r3, #1
 801489a:	75fb      	strb	r3, [r7, #23]
      break;
 801489c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2200      	movs	r2, #0
 80148a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80148a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3718      	adds	r7, #24
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80148ba:	2300      	movs	r3, #0
 80148bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80148c4:	2b01      	cmp	r3, #1
 80148c6:	d101      	bne.n	80148cc <HAL_TIM_ConfigClockSource+0x1c>
 80148c8:	2302      	movs	r3, #2
 80148ca:	e0b4      	b.n	8014a36 <HAL_TIM_ConfigClockSource+0x186>
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2201      	movs	r2, #1
 80148d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2202      	movs	r2, #2
 80148d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	689b      	ldr	r3, [r3, #8]
 80148e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80148ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80148f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	68ba      	ldr	r2, [r7, #8]
 80148fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014904:	d03e      	beq.n	8014984 <HAL_TIM_ConfigClockSource+0xd4>
 8014906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801490a:	f200 8087 	bhi.w	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 801490e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014912:	f000 8086 	beq.w	8014a22 <HAL_TIM_ConfigClockSource+0x172>
 8014916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801491a:	d87f      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 801491c:	2b70      	cmp	r3, #112	@ 0x70
 801491e:	d01a      	beq.n	8014956 <HAL_TIM_ConfigClockSource+0xa6>
 8014920:	2b70      	cmp	r3, #112	@ 0x70
 8014922:	d87b      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 8014924:	2b60      	cmp	r3, #96	@ 0x60
 8014926:	d050      	beq.n	80149ca <HAL_TIM_ConfigClockSource+0x11a>
 8014928:	2b60      	cmp	r3, #96	@ 0x60
 801492a:	d877      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 801492c:	2b50      	cmp	r3, #80	@ 0x50
 801492e:	d03c      	beq.n	80149aa <HAL_TIM_ConfigClockSource+0xfa>
 8014930:	2b50      	cmp	r3, #80	@ 0x50
 8014932:	d873      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 8014934:	2b40      	cmp	r3, #64	@ 0x40
 8014936:	d058      	beq.n	80149ea <HAL_TIM_ConfigClockSource+0x13a>
 8014938:	2b40      	cmp	r3, #64	@ 0x40
 801493a:	d86f      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 801493c:	2b30      	cmp	r3, #48	@ 0x30
 801493e:	d064      	beq.n	8014a0a <HAL_TIM_ConfigClockSource+0x15a>
 8014940:	2b30      	cmp	r3, #48	@ 0x30
 8014942:	d86b      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 8014944:	2b20      	cmp	r3, #32
 8014946:	d060      	beq.n	8014a0a <HAL_TIM_ConfigClockSource+0x15a>
 8014948:	2b20      	cmp	r3, #32
 801494a:	d867      	bhi.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
 801494c:	2b00      	cmp	r3, #0
 801494e:	d05c      	beq.n	8014a0a <HAL_TIM_ConfigClockSource+0x15a>
 8014950:	2b10      	cmp	r3, #16
 8014952:	d05a      	beq.n	8014a0a <HAL_TIM_ConfigClockSource+0x15a>
 8014954:	e062      	b.n	8014a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014966:	f000 fb25 	bl	8014fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	689b      	ldr	r3, [r3, #8]
 8014970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8014978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	609a      	str	r2, [r3, #8]
      break;
 8014982:	e04f      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014994:	f000 fb0e 	bl	8014fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	689a      	ldr	r2, [r3, #8]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80149a6:	609a      	str	r2, [r3, #8]
      break;
 80149a8:	e03c      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80149b6:	461a      	mov	r2, r3
 80149b8:	f000 fa82 	bl	8014ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2150      	movs	r1, #80	@ 0x50
 80149c2:	4618      	mov	r0, r3
 80149c4:	f000 fadb 	bl	8014f7e <TIM_ITRx_SetConfig>
      break;
 80149c8:	e02c      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80149d6:	461a      	mov	r2, r3
 80149d8:	f000 faa1 	bl	8014f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	2160      	movs	r1, #96	@ 0x60
 80149e2:	4618      	mov	r0, r3
 80149e4:	f000 facb 	bl	8014f7e <TIM_ITRx_SetConfig>
      break;
 80149e8:	e01c      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80149f6:	461a      	mov	r2, r3
 80149f8:	f000 fa62 	bl	8014ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2140      	movs	r1, #64	@ 0x40
 8014a02:	4618      	mov	r0, r3
 8014a04:	f000 fabb 	bl	8014f7e <TIM_ITRx_SetConfig>
      break;
 8014a08:	e00c      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681a      	ldr	r2, [r3, #0]
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	4619      	mov	r1, r3
 8014a14:	4610      	mov	r0, r2
 8014a16:	f000 fab2 	bl	8014f7e <TIM_ITRx_SetConfig>
      break;
 8014a1a:	e003      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8014a20:	e000      	b.n	8014a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2201      	movs	r2, #1
 8014a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8014a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}

08014a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014a3e:	b480      	push	{r7}
 8014a40:	b083      	sub	sp, #12
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014a46:	bf00      	nop
 8014a48:	370c      	adds	r7, #12
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a50:	4770      	bx	lr

08014a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014a52:	b480      	push	{r7}
 8014a54:	b083      	sub	sp, #12
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014a5a:	bf00      	nop
 8014a5c:	370c      	adds	r7, #12
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr

08014a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014a66:	b480      	push	{r7}
 8014a68:	b083      	sub	sp, #12
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014a6e:	bf00      	nop
 8014a70:	370c      	adds	r7, #12
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr

08014a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014a7a:	b480      	push	{r7}
 8014a7c:	b083      	sub	sp, #12
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014a82:	bf00      	nop
 8014a84:	370c      	adds	r7, #12
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr
	...

08014a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b085      	sub	sp, #20
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	4a3a      	ldr	r2, [pc, #232]	@ (8014b8c <TIM_Base_SetConfig+0xfc>)
 8014aa4:	4293      	cmp	r3, r2
 8014aa6:	d00f      	beq.n	8014ac8 <TIM_Base_SetConfig+0x38>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014aae:	d00b      	beq.n	8014ac8 <TIM_Base_SetConfig+0x38>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	4a37      	ldr	r2, [pc, #220]	@ (8014b90 <TIM_Base_SetConfig+0x100>)
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	d007      	beq.n	8014ac8 <TIM_Base_SetConfig+0x38>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	4a36      	ldr	r2, [pc, #216]	@ (8014b94 <TIM_Base_SetConfig+0x104>)
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d003      	beq.n	8014ac8 <TIM_Base_SetConfig+0x38>
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4a35      	ldr	r2, [pc, #212]	@ (8014b98 <TIM_Base_SetConfig+0x108>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d108      	bne.n	8014ada <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	4313      	orrs	r3, r2
 8014ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4a2b      	ldr	r2, [pc, #172]	@ (8014b8c <TIM_Base_SetConfig+0xfc>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d01b      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014ae8:	d017      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	4a28      	ldr	r2, [pc, #160]	@ (8014b90 <TIM_Base_SetConfig+0x100>)
 8014aee:	4293      	cmp	r3, r2
 8014af0:	d013      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	4a27      	ldr	r2, [pc, #156]	@ (8014b94 <TIM_Base_SetConfig+0x104>)
 8014af6:	4293      	cmp	r3, r2
 8014af8:	d00f      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4a26      	ldr	r2, [pc, #152]	@ (8014b98 <TIM_Base_SetConfig+0x108>)
 8014afe:	4293      	cmp	r3, r2
 8014b00:	d00b      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	4a25      	ldr	r2, [pc, #148]	@ (8014b9c <TIM_Base_SetConfig+0x10c>)
 8014b06:	4293      	cmp	r3, r2
 8014b08:	d007      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	4a24      	ldr	r2, [pc, #144]	@ (8014ba0 <TIM_Base_SetConfig+0x110>)
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	d003      	beq.n	8014b1a <TIM_Base_SetConfig+0x8a>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4a23      	ldr	r2, [pc, #140]	@ (8014ba4 <TIM_Base_SetConfig+0x114>)
 8014b16:	4293      	cmp	r3, r2
 8014b18:	d108      	bne.n	8014b2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	4313      	orrs	r3, r2
 8014b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	695b      	ldr	r3, [r3, #20]
 8014b36:	4313      	orrs	r3, r2
 8014b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	689a      	ldr	r2, [r3, #8]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	4a0e      	ldr	r2, [pc, #56]	@ (8014b8c <TIM_Base_SetConfig+0xfc>)
 8014b54:	4293      	cmp	r3, r2
 8014b56:	d103      	bne.n	8014b60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	691a      	ldr	r2, [r3, #16]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2201      	movs	r2, #1
 8014b64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	691b      	ldr	r3, [r3, #16]
 8014b6a:	f003 0301 	and.w	r3, r3, #1
 8014b6e:	2b01      	cmp	r3, #1
 8014b70:	d105      	bne.n	8014b7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	691b      	ldr	r3, [r3, #16]
 8014b76:	f023 0201 	bic.w	r2, r3, #1
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	611a      	str	r2, [r3, #16]
  }
}
 8014b7e:	bf00      	nop
 8014b80:	3714      	adds	r7, #20
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr
 8014b8a:	bf00      	nop
 8014b8c:	40010000 	.word	0x40010000
 8014b90:	40000400 	.word	0x40000400
 8014b94:	40000800 	.word	0x40000800
 8014b98:	40000c00 	.word	0x40000c00
 8014b9c:	40014000 	.word	0x40014000
 8014ba0:	40014400 	.word	0x40014400
 8014ba4:	40014800 	.word	0x40014800

08014ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014ba8:	b480      	push	{r7}
 8014baa:	b087      	sub	sp, #28
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6a1b      	ldr	r3, [r3, #32]
 8014bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6a1b      	ldr	r3, [r3, #32]
 8014bbc:	f023 0201 	bic.w	r2, r3, #1
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	699b      	ldr	r3, [r3, #24]
 8014bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f023 0303 	bic.w	r3, r3, #3
 8014bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	68fa      	ldr	r2, [r7, #12]
 8014be6:	4313      	orrs	r3, r2
 8014be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	f023 0302 	bic.w	r3, r3, #2
 8014bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	689b      	ldr	r3, [r3, #8]
 8014bf6:	697a      	ldr	r2, [r7, #20]
 8014bf8:	4313      	orrs	r3, r2
 8014bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8014c70 <TIM_OC1_SetConfig+0xc8>)
 8014c00:	4293      	cmp	r3, r2
 8014c02:	d10c      	bne.n	8014c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	f023 0308 	bic.w	r3, r3, #8
 8014c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	697a      	ldr	r2, [r7, #20]
 8014c12:	4313      	orrs	r3, r2
 8014c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	f023 0304 	bic.w	r3, r3, #4
 8014c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	4a13      	ldr	r2, [pc, #76]	@ (8014c70 <TIM_OC1_SetConfig+0xc8>)
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d111      	bne.n	8014c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	695b      	ldr	r3, [r3, #20]
 8014c3a:	693a      	ldr	r2, [r7, #16]
 8014c3c:	4313      	orrs	r3, r2
 8014c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	699b      	ldr	r3, [r3, #24]
 8014c44:	693a      	ldr	r2, [r7, #16]
 8014c46:	4313      	orrs	r3, r2
 8014c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	693a      	ldr	r2, [r7, #16]
 8014c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	68fa      	ldr	r2, [r7, #12]
 8014c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	685a      	ldr	r2, [r3, #4]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	697a      	ldr	r2, [r7, #20]
 8014c62:	621a      	str	r2, [r3, #32]
}
 8014c64:	bf00      	nop
 8014c66:	371c      	adds	r7, #28
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr
 8014c70:	40010000 	.word	0x40010000

08014c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b087      	sub	sp, #28
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6a1b      	ldr	r3, [r3, #32]
 8014c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6a1b      	ldr	r3, [r3, #32]
 8014c88:	f023 0210 	bic.w	r2, r3, #16
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	699b      	ldr	r3, [r3, #24]
 8014c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	021b      	lsls	r3, r3, #8
 8014cb2:	68fa      	ldr	r2, [r7, #12]
 8014cb4:	4313      	orrs	r3, r2
 8014cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	f023 0320 	bic.w	r3, r3, #32
 8014cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	689b      	ldr	r3, [r3, #8]
 8014cc4:	011b      	lsls	r3, r3, #4
 8014cc6:	697a      	ldr	r2, [r7, #20]
 8014cc8:	4313      	orrs	r3, r2
 8014cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	4a1e      	ldr	r2, [pc, #120]	@ (8014d48 <TIM_OC2_SetConfig+0xd4>)
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d10d      	bne.n	8014cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	011b      	lsls	r3, r3, #4
 8014ce2:	697a      	ldr	r2, [r7, #20]
 8014ce4:	4313      	orrs	r3, r2
 8014ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	4a15      	ldr	r2, [pc, #84]	@ (8014d48 <TIM_OC2_SetConfig+0xd4>)
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	d113      	bne.n	8014d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	695b      	ldr	r3, [r3, #20]
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	693a      	ldr	r2, [r7, #16]
 8014d10:	4313      	orrs	r3, r2
 8014d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	699b      	ldr	r3, [r3, #24]
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	693a      	ldr	r2, [r7, #16]
 8014d1c:	4313      	orrs	r3, r2
 8014d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	693a      	ldr	r2, [r7, #16]
 8014d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	685a      	ldr	r2, [r3, #4]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	697a      	ldr	r2, [r7, #20]
 8014d38:	621a      	str	r2, [r3, #32]
}
 8014d3a:	bf00      	nop
 8014d3c:	371c      	adds	r7, #28
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr
 8014d46:	bf00      	nop
 8014d48:	40010000 	.word	0x40010000

08014d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b087      	sub	sp, #28
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	6a1b      	ldr	r3, [r3, #32]
 8014d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6a1b      	ldr	r3, [r3, #32]
 8014d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	69db      	ldr	r3, [r3, #28]
 8014d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	f023 0303 	bic.w	r3, r3, #3
 8014d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	68fa      	ldr	r2, [r7, #12]
 8014d8a:	4313      	orrs	r3, r2
 8014d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	021b      	lsls	r3, r3, #8
 8014d9c:	697a      	ldr	r2, [r7, #20]
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	4a1d      	ldr	r2, [pc, #116]	@ (8014e1c <TIM_OC3_SetConfig+0xd0>)
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d10d      	bne.n	8014dc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	021b      	lsls	r3, r3, #8
 8014db8:	697a      	ldr	r2, [r7, #20]
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	4a14      	ldr	r2, [pc, #80]	@ (8014e1c <TIM_OC3_SetConfig+0xd0>)
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	d113      	bne.n	8014df6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014dde:	683b      	ldr	r3, [r7, #0]
 8014de0:	695b      	ldr	r3, [r3, #20]
 8014de2:	011b      	lsls	r3, r3, #4
 8014de4:	693a      	ldr	r2, [r7, #16]
 8014de6:	4313      	orrs	r3, r2
 8014de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	699b      	ldr	r3, [r3, #24]
 8014dee:	011b      	lsls	r3, r3, #4
 8014df0:	693a      	ldr	r2, [r7, #16]
 8014df2:	4313      	orrs	r3, r2
 8014df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	693a      	ldr	r2, [r7, #16]
 8014dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	685a      	ldr	r2, [r3, #4]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	697a      	ldr	r2, [r7, #20]
 8014e0e:	621a      	str	r2, [r3, #32]
}
 8014e10:	bf00      	nop
 8014e12:	371c      	adds	r7, #28
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr
 8014e1c:	40010000 	.word	0x40010000

08014e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014e20:	b480      	push	{r7}
 8014e22:	b087      	sub	sp, #28
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6a1b      	ldr	r3, [r3, #32]
 8014e2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6a1b      	ldr	r3, [r3, #32]
 8014e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	69db      	ldr	r3, [r3, #28]
 8014e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	021b      	lsls	r3, r3, #8
 8014e5e:	68fa      	ldr	r2, [r7, #12]
 8014e60:	4313      	orrs	r3, r2
 8014e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	689b      	ldr	r3, [r3, #8]
 8014e70:	031b      	lsls	r3, r3, #12
 8014e72:	693a      	ldr	r2, [r7, #16]
 8014e74:	4313      	orrs	r3, r2
 8014e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	4a10      	ldr	r2, [pc, #64]	@ (8014ebc <TIM_OC4_SetConfig+0x9c>)
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	d109      	bne.n	8014e94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8014e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	695b      	ldr	r3, [r3, #20]
 8014e8c:	019b      	lsls	r3, r3, #6
 8014e8e:	697a      	ldr	r2, [r7, #20]
 8014e90:	4313      	orrs	r3, r2
 8014e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	697a      	ldr	r2, [r7, #20]
 8014e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	68fa      	ldr	r2, [r7, #12]
 8014e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	685a      	ldr	r2, [r3, #4]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	693a      	ldr	r2, [r7, #16]
 8014eac:	621a      	str	r2, [r3, #32]
}
 8014eae:	bf00      	nop
 8014eb0:	371c      	adds	r7, #28
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr
 8014eba:	bf00      	nop
 8014ebc:	40010000 	.word	0x40010000

08014ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b087      	sub	sp, #28
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	60b9      	str	r1, [r7, #8]
 8014eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	6a1b      	ldr	r3, [r3, #32]
 8014ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	6a1b      	ldr	r3, [r3, #32]
 8014ed6:	f023 0201 	bic.w	r2, r3, #1
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	699b      	ldr	r3, [r3, #24]
 8014ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	011b      	lsls	r3, r3, #4
 8014ef0:	693a      	ldr	r2, [r7, #16]
 8014ef2:	4313      	orrs	r3, r2
 8014ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	f023 030a 	bic.w	r3, r3, #10
 8014efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014efe:	697a      	ldr	r2, [r7, #20]
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	4313      	orrs	r3, r2
 8014f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	693a      	ldr	r2, [r7, #16]
 8014f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	697a      	ldr	r2, [r7, #20]
 8014f10:	621a      	str	r2, [r3, #32]
}
 8014f12:	bf00      	nop
 8014f14:	371c      	adds	r7, #28
 8014f16:	46bd      	mov	sp, r7
 8014f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1c:	4770      	bx	lr

08014f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014f1e:	b480      	push	{r7}
 8014f20:	b087      	sub	sp, #28
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	60f8      	str	r0, [r7, #12]
 8014f26:	60b9      	str	r1, [r7, #8]
 8014f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	6a1b      	ldr	r3, [r3, #32]
 8014f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	6a1b      	ldr	r3, [r3, #32]
 8014f34:	f023 0210 	bic.w	r2, r3, #16
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	699b      	ldr	r3, [r3, #24]
 8014f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	031b      	lsls	r3, r3, #12
 8014f4e:	693a      	ldr	r2, [r7, #16]
 8014f50:	4313      	orrs	r3, r2
 8014f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	011b      	lsls	r3, r3, #4
 8014f60:	697a      	ldr	r2, [r7, #20]
 8014f62:	4313      	orrs	r3, r2
 8014f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	693a      	ldr	r2, [r7, #16]
 8014f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	697a      	ldr	r2, [r7, #20]
 8014f70:	621a      	str	r2, [r3, #32]
}
 8014f72:	bf00      	nop
 8014f74:	371c      	adds	r7, #28
 8014f76:	46bd      	mov	sp, r7
 8014f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7c:	4770      	bx	lr

08014f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014f7e:	b480      	push	{r7}
 8014f80:	b085      	sub	sp, #20
 8014f82:	af00      	add	r7, sp, #0
 8014f84:	6078      	str	r0, [r7, #4]
 8014f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	689b      	ldr	r3, [r3, #8]
 8014f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014f96:	683a      	ldr	r2, [r7, #0]
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	4313      	orrs	r3, r2
 8014f9c:	f043 0307 	orr.w	r3, r3, #7
 8014fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	68fa      	ldr	r2, [r7, #12]
 8014fa6:	609a      	str	r2, [r3, #8]
}
 8014fa8:	bf00      	nop
 8014faa:	3714      	adds	r7, #20
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b087      	sub	sp, #28
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	689b      	ldr	r3, [r3, #8]
 8014fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	021a      	lsls	r2, r3, #8
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	431a      	orrs	r2, r3
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	4313      	orrs	r3, r2
 8014fdc:	697a      	ldr	r2, [r7, #20]
 8014fde:	4313      	orrs	r3, r2
 8014fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	697a      	ldr	r2, [r7, #20]
 8014fe6:	609a      	str	r2, [r3, #8]
}
 8014fe8:	bf00      	nop
 8014fea:	371c      	adds	r7, #28
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b087      	sub	sp, #28
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	f003 031f 	and.w	r3, r3, #31
 8015006:	2201      	movs	r2, #1
 8015008:	fa02 f303 	lsl.w	r3, r2, r3
 801500c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6a1a      	ldr	r2, [r3, #32]
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	43db      	mvns	r3, r3
 8015016:	401a      	ands	r2, r3
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	6a1a      	ldr	r2, [r3, #32]
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	f003 031f 	and.w	r3, r3, #31
 8015026:	6879      	ldr	r1, [r7, #4]
 8015028:	fa01 f303 	lsl.w	r3, r1, r3
 801502c:	431a      	orrs	r2, r3
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	621a      	str	r2, [r3, #32]
}
 8015032:	bf00      	nop
 8015034:	371c      	adds	r7, #28
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr
	...

08015040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015040:	b480      	push	{r7}
 8015042:	b085      	sub	sp, #20
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015050:	2b01      	cmp	r3, #1
 8015052:	d101      	bne.n	8015058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015054:	2302      	movs	r3, #2
 8015056:	e050      	b.n	80150fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2202      	movs	r2, #2
 8015064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	689b      	ldr	r3, [r3, #8]
 8015076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801507e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	68fa      	ldr	r2, [r7, #12]
 8015086:	4313      	orrs	r3, r2
 8015088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	68fa      	ldr	r2, [r7, #12]
 8015090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4a1c      	ldr	r2, [pc, #112]	@ (8015108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8015098:	4293      	cmp	r3, r2
 801509a:	d018      	beq.n	80150ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80150a4:	d013      	beq.n	80150ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4a18      	ldr	r2, [pc, #96]	@ (801510c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80150ac:	4293      	cmp	r3, r2
 80150ae:	d00e      	beq.n	80150ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4a16      	ldr	r2, [pc, #88]	@ (8015110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d009      	beq.n	80150ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	4a15      	ldr	r2, [pc, #84]	@ (8015114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80150c0:	4293      	cmp	r3, r2
 80150c2:	d004      	beq.n	80150ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4a13      	ldr	r2, [pc, #76]	@ (8015118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80150ca:	4293      	cmp	r3, r2
 80150cc:	d10c      	bne.n	80150e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80150d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	68ba      	ldr	r2, [r7, #8]
 80150dc:	4313      	orrs	r3, r2
 80150de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2201      	movs	r2, #1
 80150ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2200      	movs	r2, #0
 80150f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80150f8:	2300      	movs	r3, #0
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3714      	adds	r7, #20
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	40010000 	.word	0x40010000
 801510c:	40000400 	.word	0x40000400
 8015110:	40000800 	.word	0x40000800
 8015114:	40000c00 	.word	0x40000c00
 8015118:	40014000 	.word	0x40014000

0801511c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801511c:	b480      	push	{r7}
 801511e:	b083      	sub	sp, #12
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015124:	bf00      	nop
 8015126:	370c      	adds	r7, #12
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr

08015130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015130:	b480      	push	{r7}
 8015132:	b083      	sub	sp, #12
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015138:	bf00      	nop
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr

08015144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d101      	bne.n	8015156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015152:	2301      	movs	r3, #1
 8015154:	e042      	b.n	80151dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801515c:	b2db      	uxtb	r3, r3
 801515e:	2b00      	cmp	r3, #0
 8015160:	d106      	bne.n	8015170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2200      	movs	r2, #0
 8015166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 f83a 	bl	80151e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2224      	movs	r2, #36	@ 0x24
 8015174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	68da      	ldr	r2, [r3, #12]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8015186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f000 ff63 	bl	8016054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	691a      	ldr	r2, [r3, #16]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801519c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	695a      	ldr	r2, [r3, #20]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80151ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	68da      	ldr	r2, [r3, #12]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80151bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2200      	movs	r2, #0
 80151c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2220      	movs	r2, #32
 80151c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2220      	movs	r2, #32
 80151d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2200      	movs	r2, #0
 80151d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80151da:	2300      	movs	r3, #0
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b083      	sub	sp, #12
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80151ec:	bf00      	nop
 80151ee:	370c      	adds	r7, #12
 80151f0:	46bd      	mov	sp, r7
 80151f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f6:	4770      	bx	lr

080151f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b08a      	sub	sp, #40	@ 0x28
 80151fc:	af02      	add	r7, sp, #8
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	603b      	str	r3, [r7, #0]
 8015204:	4613      	mov	r3, r2
 8015206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015208:	2300      	movs	r3, #0
 801520a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015212:	b2db      	uxtb	r3, r3
 8015214:	2b20      	cmp	r3, #32
 8015216:	d175      	bne.n	8015304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d002      	beq.n	8015224 <HAL_UART_Transmit+0x2c>
 801521e:	88fb      	ldrh	r3, [r7, #6]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d101      	bne.n	8015228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015224:	2301      	movs	r3, #1
 8015226:	e06e      	b.n	8015306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2200      	movs	r2, #0
 801522c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2221      	movs	r2, #33	@ 0x21
 8015232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015236:	f7f9 fc95 	bl	800eb64 <HAL_GetTick>
 801523a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	88fa      	ldrh	r2, [r7, #6]
 8015240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	88fa      	ldrh	r2, [r7, #6]
 8015246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	689b      	ldr	r3, [r3, #8]
 801524c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015250:	d108      	bne.n	8015264 <HAL_UART_Transmit+0x6c>
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	691b      	ldr	r3, [r3, #16]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d104      	bne.n	8015264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801525a:	2300      	movs	r3, #0
 801525c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	61bb      	str	r3, [r7, #24]
 8015262:	e003      	b.n	801526c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015268:	2300      	movs	r3, #0
 801526a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801526c:	e02e      	b.n	80152cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	9300      	str	r3, [sp, #0]
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	2200      	movs	r2, #0
 8015276:	2180      	movs	r1, #128	@ 0x80
 8015278:	68f8      	ldr	r0, [r7, #12]
 801527a:	f000 fc31 	bl	8015ae0 <UART_WaitOnFlagUntilTimeout>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d005      	beq.n	8015290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	2220      	movs	r2, #32
 8015288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 801528c:	2303      	movs	r3, #3
 801528e:	e03a      	b.n	8015306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d10b      	bne.n	80152ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	461a      	mov	r2, r3
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80152a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	3302      	adds	r3, #2
 80152aa:	61bb      	str	r3, [r7, #24]
 80152ac:	e007      	b.n	80152be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	781a      	ldrb	r2, [r3, #0]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	3301      	adds	r3, #1
 80152bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	3b01      	subs	r3, #1
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d1cb      	bne.n	801526e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	9300      	str	r3, [sp, #0]
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	2200      	movs	r2, #0
 80152de:	2140      	movs	r1, #64	@ 0x40
 80152e0:	68f8      	ldr	r0, [r7, #12]
 80152e2:	f000 fbfd 	bl	8015ae0 <UART_WaitOnFlagUntilTimeout>
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d005      	beq.n	80152f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	2220      	movs	r2, #32
 80152f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80152f4:	2303      	movs	r3, #3
 80152f6:	e006      	b.n	8015306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2220      	movs	r2, #32
 80152fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8015300:	2300      	movs	r3, #0
 8015302:	e000      	b.n	8015306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8015304:	2302      	movs	r3, #2
  }
}
 8015306:	4618      	mov	r0, r3
 8015308:	3720      	adds	r7, #32
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b084      	sub	sp, #16
 8015312:	af00      	add	r7, sp, #0
 8015314:	60f8      	str	r0, [r7, #12]
 8015316:	60b9      	str	r1, [r7, #8]
 8015318:	4613      	mov	r3, r2
 801531a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015322:	b2db      	uxtb	r3, r3
 8015324:	2b20      	cmp	r3, #32
 8015326:	d112      	bne.n	801534e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <HAL_UART_Receive_DMA+0x26>
 801532e:	88fb      	ldrh	r3, [r7, #6]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d101      	bne.n	8015338 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015334:	2301      	movs	r3, #1
 8015336:	e00b      	b.n	8015350 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2200      	movs	r2, #0
 801533c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801533e:	88fb      	ldrh	r3, [r7, #6]
 8015340:	461a      	mov	r2, r3
 8015342:	68b9      	ldr	r1, [r7, #8]
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f000 fc25 	bl	8015b94 <UART_Start_Receive_DMA>
 801534a:	4603      	mov	r3, r0
 801534c:	e000      	b.n	8015350 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 801534e:	2302      	movs	r3, #2
  }
}
 8015350:	4618      	mov	r0, r3
 8015352:	3710      	adds	r7, #16
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b0ba      	sub	sp, #232	@ 0xe8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	68db      	ldr	r3, [r3, #12]
 8015370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	695b      	ldr	r3, [r3, #20]
 801537a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801537e:	2300      	movs	r3, #0
 8015380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8015384:	2300      	movs	r3, #0
 8015386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801538e:	f003 030f 	and.w	r3, r3, #15
 8015392:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8015396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801539a:	2b00      	cmp	r3, #0
 801539c:	d10f      	bne.n	80153be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80153a2:	f003 0320 	and.w	r3, r3, #32
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d009      	beq.n	80153be <HAL_UART_IRQHandler+0x66>
 80153aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80153ae:	f003 0320 	and.w	r3, r3, #32
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d003      	beq.n	80153be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 fd8d 	bl	8015ed6 <UART_Receive_IT>
      return;
 80153bc:	e25b      	b.n	8015876 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80153be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	f000 80de 	beq.w	8015584 <HAL_UART_IRQHandler+0x22c>
 80153c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80153cc:	f003 0301 	and.w	r3, r3, #1
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d106      	bne.n	80153e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80153d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80153d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f000 80d1 	beq.w	8015584 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80153e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80153e6:	f003 0301 	and.w	r3, r3, #1
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00b      	beq.n	8015406 <HAL_UART_IRQHandler+0xae>
 80153ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80153f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d005      	beq.n	8015406 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153fe:	f043 0201 	orr.w	r2, r3, #1
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801540a:	f003 0304 	and.w	r3, r3, #4
 801540e:	2b00      	cmp	r3, #0
 8015410:	d00b      	beq.n	801542a <HAL_UART_IRQHandler+0xd2>
 8015412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015416:	f003 0301 	and.w	r3, r3, #1
 801541a:	2b00      	cmp	r3, #0
 801541c:	d005      	beq.n	801542a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015422:	f043 0202 	orr.w	r2, r3, #2
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801542e:	f003 0302 	and.w	r3, r3, #2
 8015432:	2b00      	cmp	r3, #0
 8015434:	d00b      	beq.n	801544e <HAL_UART_IRQHandler+0xf6>
 8015436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801543a:	f003 0301 	and.w	r3, r3, #1
 801543e:	2b00      	cmp	r3, #0
 8015440:	d005      	beq.n	801544e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015446:	f043 0204 	orr.w	r2, r3, #4
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015452:	f003 0308 	and.w	r3, r3, #8
 8015456:	2b00      	cmp	r3, #0
 8015458:	d011      	beq.n	801547e <HAL_UART_IRQHandler+0x126>
 801545a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801545e:	f003 0320 	and.w	r3, r3, #32
 8015462:	2b00      	cmp	r3, #0
 8015464:	d105      	bne.n	8015472 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8015466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801546a:	f003 0301 	and.w	r3, r3, #1
 801546e:	2b00      	cmp	r3, #0
 8015470:	d005      	beq.n	801547e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015476:	f043 0208 	orr.w	r2, r3, #8
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015482:	2b00      	cmp	r3, #0
 8015484:	f000 81f2 	beq.w	801586c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8015488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801548c:	f003 0320 	and.w	r3, r3, #32
 8015490:	2b00      	cmp	r3, #0
 8015492:	d008      	beq.n	80154a6 <HAL_UART_IRQHandler+0x14e>
 8015494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015498:	f003 0320 	and.w	r3, r3, #32
 801549c:	2b00      	cmp	r3, #0
 801549e:	d002      	beq.n	80154a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f000 fd18 	bl	8015ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	695b      	ldr	r3, [r3, #20]
 80154ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80154b0:	2b40      	cmp	r3, #64	@ 0x40
 80154b2:	bf0c      	ite	eq
 80154b4:	2301      	moveq	r3, #1
 80154b6:	2300      	movne	r3, #0
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154c2:	f003 0308 	and.w	r3, r3, #8
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d103      	bne.n	80154d2 <HAL_UART_IRQHandler+0x17a>
 80154ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d04f      	beq.n	8015572 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 fc20 	bl	8015d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	695b      	ldr	r3, [r3, #20]
 80154de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80154e2:	2b40      	cmp	r3, #64	@ 0x40
 80154e4:	d141      	bne.n	801556a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	3314      	adds	r3, #20
 80154ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80154f4:	e853 3f00 	ldrex	r3, [r3]
 80154f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80154fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	3314      	adds	r3, #20
 801550e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8015512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8015516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801551a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801551e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8015522:	e841 2300 	strex	r3, r2, [r1]
 8015526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801552a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801552e:	2b00      	cmp	r3, #0
 8015530:	d1d9      	bne.n	80154e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015536:	2b00      	cmp	r3, #0
 8015538:	d013      	beq.n	8015562 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801553e:	4a7e      	ldr	r2, [pc, #504]	@ (8015738 <HAL_UART_IRQHandler+0x3e0>)
 8015540:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015546:	4618      	mov	r0, r3
 8015548:	f7f9 fe12 	bl	800f170 <HAL_DMA_Abort_IT>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d016      	beq.n	8015580 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801555c:	4610      	mov	r0, r2
 801555e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015560:	e00e      	b.n	8015580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f000 f9a8 	bl	80158b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015568:	e00a      	b.n	8015580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f000 f9a4 	bl	80158b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015570:	e006      	b.n	8015580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f000 f9a0 	bl	80158b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2200      	movs	r2, #0
 801557c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 801557e:	e175      	b.n	801586c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015580:	bf00      	nop
    return;
 8015582:	e173      	b.n	801586c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015588:	2b01      	cmp	r3, #1
 801558a:	f040 814f 	bne.w	801582c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015592:	f003 0310 	and.w	r3, r3, #16
 8015596:	2b00      	cmp	r3, #0
 8015598:	f000 8148 	beq.w	801582c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80155a0:	f003 0310 	and.w	r3, r3, #16
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f000 8141 	beq.w	801582c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80155aa:	2300      	movs	r3, #0
 80155ac:	60bb      	str	r3, [r7, #8]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	60bb      	str	r3, [r7, #8]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	685b      	ldr	r3, [r3, #4]
 80155bc:	60bb      	str	r3, [r7, #8]
 80155be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	695b      	ldr	r3, [r3, #20]
 80155c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80155ca:	2b40      	cmp	r3, #64	@ 0x40
 80155cc:	f040 80b6 	bne.w	801573c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	685b      	ldr	r3, [r3, #4]
 80155d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80155dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f000 8145 	beq.w	8015870 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80155ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80155ee:	429a      	cmp	r2, r3
 80155f0:	f080 813e 	bcs.w	8015870 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80155fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015600:	69db      	ldr	r3, [r3, #28]
 8015602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015606:	f000 8088 	beq.w	801571a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	330c      	adds	r3, #12
 8015610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015618:	e853 3f00 	ldrex	r3, [r3]
 801561c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8015620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	330c      	adds	r3, #12
 8015632:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8015636:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801563a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801563e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8015642:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8015646:	e841 2300 	strex	r3, r2, [r1]
 801564a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801564e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015652:	2b00      	cmp	r3, #0
 8015654:	d1d9      	bne.n	801560a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	3314      	adds	r3, #20
 801565c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801565e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015660:	e853 3f00 	ldrex	r3, [r3]
 8015664:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8015666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015668:	f023 0301 	bic.w	r3, r3, #1
 801566c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	3314      	adds	r3, #20
 8015676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801567a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801567e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015680:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8015682:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8015686:	e841 2300 	strex	r3, r2, [r1]
 801568a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801568c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1e1      	bne.n	8015656 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	3314      	adds	r3, #20
 8015698:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801569a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801569c:	e853 3f00 	ldrex	r3, [r3]
 80156a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80156a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80156a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80156a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	3314      	adds	r3, #20
 80156b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80156b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80156b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80156bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80156be:	e841 2300 	strex	r3, r2, [r1]
 80156c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80156c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d1e3      	bne.n	8015692 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2220      	movs	r2, #32
 80156ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2200      	movs	r2, #0
 80156d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	330c      	adds	r3, #12
 80156de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156e2:	e853 3f00 	ldrex	r3, [r3]
 80156e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80156e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156ea:	f023 0310 	bic.w	r3, r3, #16
 80156ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	330c      	adds	r3, #12
 80156f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80156fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80156fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015700:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015702:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015704:	e841 2300 	strex	r3, r2, [r1]
 8015708:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801570a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1e3      	bne.n	80156d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015714:	4618      	mov	r0, r3
 8015716:	f7f9 fcbb 	bl	800f090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2202      	movs	r2, #2
 801571e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8015728:	b29b      	uxth	r3, r3
 801572a:	1ad3      	subs	r3, r2, r3
 801572c:	b29b      	uxth	r3, r3
 801572e:	4619      	mov	r1, r3
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f000 f8cb 	bl	80158cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015736:	e09b      	b.n	8015870 <HAL_UART_IRQHandler+0x518>
 8015738:	08015ddf 	.word	0x08015ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8015744:	b29b      	uxth	r3, r3
 8015746:	1ad3      	subs	r3, r2, r3
 8015748:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8015750:	b29b      	uxth	r3, r3
 8015752:	2b00      	cmp	r3, #0
 8015754:	f000 808e 	beq.w	8015874 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8015758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801575c:	2b00      	cmp	r3, #0
 801575e:	f000 8089 	beq.w	8015874 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	330c      	adds	r3, #12
 8015768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801576c:	e853 3f00 	ldrex	r3, [r3]
 8015770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	330c      	adds	r3, #12
 8015782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8015786:	647a      	str	r2, [r7, #68]	@ 0x44
 8015788:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801578a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801578c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801578e:	e841 2300 	strex	r3, r2, [r1]
 8015792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015796:	2b00      	cmp	r3, #0
 8015798:	d1e3      	bne.n	8015762 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	3314      	adds	r3, #20
 80157a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157a4:	e853 3f00 	ldrex	r3, [r3]
 80157a8:	623b      	str	r3, [r7, #32]
   return(result);
 80157aa:	6a3b      	ldr	r3, [r7, #32]
 80157ac:	f023 0301 	bic.w	r3, r3, #1
 80157b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	3314      	adds	r3, #20
 80157ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80157be:	633a      	str	r2, [r7, #48]	@ 0x30
 80157c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80157c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80157c6:	e841 2300 	strex	r3, r2, [r1]
 80157ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80157cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1e3      	bne.n	801579a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2220      	movs	r2, #32
 80157d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	330c      	adds	r3, #12
 80157e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	e853 3f00 	ldrex	r3, [r3]
 80157ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f023 0310 	bic.w	r3, r3, #16
 80157f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	330c      	adds	r3, #12
 8015800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8015804:	61fa      	str	r2, [r7, #28]
 8015806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015808:	69b9      	ldr	r1, [r7, #24]
 801580a:	69fa      	ldr	r2, [r7, #28]
 801580c:	e841 2300 	strex	r3, r2, [r1]
 8015810:	617b      	str	r3, [r7, #20]
   return(result);
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d1e3      	bne.n	80157e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2202      	movs	r2, #2
 801581c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801581e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8015822:	4619      	mov	r1, r3
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f000 f851 	bl	80158cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801582a:	e023      	b.n	8015874 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015834:	2b00      	cmp	r3, #0
 8015836:	d009      	beq.n	801584c <HAL_UART_IRQHandler+0x4f4>
 8015838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801583c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015840:	2b00      	cmp	r3, #0
 8015842:	d003      	beq.n	801584c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f000 fade 	bl	8015e06 <UART_Transmit_IT>
    return;
 801584a:	e014      	b.n	8015876 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015854:	2b00      	cmp	r3, #0
 8015856:	d00e      	beq.n	8015876 <HAL_UART_IRQHandler+0x51e>
 8015858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015860:	2b00      	cmp	r3, #0
 8015862:	d008      	beq.n	8015876 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f000 fb1e 	bl	8015ea6 <UART_EndTransmit_IT>
    return;
 801586a:	e004      	b.n	8015876 <HAL_UART_IRQHandler+0x51e>
    return;
 801586c:	bf00      	nop
 801586e:	e002      	b.n	8015876 <HAL_UART_IRQHandler+0x51e>
      return;
 8015870:	bf00      	nop
 8015872:	e000      	b.n	8015876 <HAL_UART_IRQHandler+0x51e>
      return;
 8015874:	bf00      	nop
  }
}
 8015876:	37e8      	adds	r7, #232	@ 0xe8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801587c:	b480      	push	{r7}
 801587e:	b083      	sub	sp, #12
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8015884:	bf00      	nop
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8015898:	bf00      	nop
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b083      	sub	sp, #12
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80158ac:	bf00      	nop
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr

080158b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80158c0:	bf00      	nop
 80158c2:	370c      	adds	r7, #12
 80158c4:	46bd      	mov	sp, r7
 80158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ca:	4770      	bx	lr

080158cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	460b      	mov	r3, r1
 80158d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80158d8:	bf00      	nop
 80158da:	370c      	adds	r7, #12
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr

080158e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b09c      	sub	sp, #112	@ 0x70
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d172      	bne.n	80159e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8015900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015902:	2200      	movs	r2, #0
 8015904:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	330c      	adds	r3, #12
 801590c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801590e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015910:	e853 3f00 	ldrex	r3, [r3]
 8015914:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801591c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801591e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	330c      	adds	r3, #12
 8015924:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015926:	65ba      	str	r2, [r7, #88]	@ 0x58
 8015928:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801592a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801592c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801592e:	e841 2300 	strex	r3, r2, [r1]
 8015932:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015936:	2b00      	cmp	r3, #0
 8015938:	d1e5      	bne.n	8015906 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801593a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	3314      	adds	r3, #20
 8015940:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015944:	e853 3f00 	ldrex	r3, [r3]
 8015948:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801594c:	f023 0301 	bic.w	r3, r3, #1
 8015950:	667b      	str	r3, [r7, #100]	@ 0x64
 8015952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	3314      	adds	r3, #20
 8015958:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801595a:	647a      	str	r2, [r7, #68]	@ 0x44
 801595c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801595e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015962:	e841 2300 	strex	r3, r2, [r1]
 8015966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801596a:	2b00      	cmp	r3, #0
 801596c:	d1e5      	bne.n	801593a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801596e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	3314      	adds	r3, #20
 8015974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015978:	e853 3f00 	ldrex	r3, [r3]
 801597c:	623b      	str	r3, [r7, #32]
   return(result);
 801597e:	6a3b      	ldr	r3, [r7, #32]
 8015980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015984:	663b      	str	r3, [r7, #96]	@ 0x60
 8015986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	3314      	adds	r3, #20
 801598c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801598e:	633a      	str	r2, [r7, #48]	@ 0x30
 8015990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015996:	e841 2300 	strex	r3, r2, [r1]
 801599a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d1e5      	bne.n	801596e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80159a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159a4:	2220      	movs	r2, #32
 80159a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80159aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159ae:	2b01      	cmp	r3, #1
 80159b0:	d119      	bne.n	80159e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80159b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	330c      	adds	r3, #12
 80159b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	e853 3f00 	ldrex	r3, [r3]
 80159c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	f023 0310 	bic.w	r3, r3, #16
 80159c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80159ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	330c      	adds	r3, #12
 80159d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80159d2:	61fa      	str	r2, [r7, #28]
 80159d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159d6:	69b9      	ldr	r1, [r7, #24]
 80159d8:	69fa      	ldr	r2, [r7, #28]
 80159da:	e841 2300 	strex	r3, r2, [r1]
 80159de:	617b      	str	r3, [r7, #20]
   return(result);
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1e5      	bne.n	80159b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80159e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159e8:	2200      	movs	r2, #0
 80159ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80159ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	d106      	bne.n	8015a02 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80159f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80159f8:	4619      	mov	r1, r3
 80159fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80159fc:	f7ff ff66 	bl	80158cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015a00:	e002      	b.n	8015a08 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8015a02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015a04:	f7ff ff44 	bl	8015890 <HAL_UART_RxCpltCallback>
}
 8015a08:	bf00      	nop
 8015a0a:	3770      	adds	r7, #112	@ 0x70
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b084      	sub	sp, #16
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2201      	movs	r2, #1
 8015a22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a28:	2b01      	cmp	r3, #1
 8015a2a:	d108      	bne.n	8015a3e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8015a30:	085b      	lsrs	r3, r3, #1
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	4619      	mov	r1, r3
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f7ff ff48 	bl	80158cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015a3c:	e002      	b.n	8015a44 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8015a3e:	68f8      	ldr	r0, [r7, #12]
 8015a40:	f7ff ff30 	bl	80158a4 <HAL_UART_RxHalfCpltCallback>
}
 8015a44:	bf00      	nop
 8015a46:	3710      	adds	r7, #16
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}

08015a4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b084      	sub	sp, #16
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015a54:	2300      	movs	r3, #0
 8015a56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015a5e:	68bb      	ldr	r3, [r7, #8]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	695b      	ldr	r3, [r3, #20]
 8015a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015a68:	2b80      	cmp	r3, #128	@ 0x80
 8015a6a:	bf0c      	ite	eq
 8015a6c:	2301      	moveq	r3, #1
 8015a6e:	2300      	movne	r3, #0
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	2b21      	cmp	r3, #33	@ 0x21
 8015a7e:	d108      	bne.n	8015a92 <UART_DMAError+0x46>
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d005      	beq.n	8015a92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8015a8c:	68b8      	ldr	r0, [r7, #8]
 8015a8e:	f000 f91b 	bl	8015cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	695b      	ldr	r3, [r3, #20]
 8015a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a9c:	2b40      	cmp	r3, #64	@ 0x40
 8015a9e:	bf0c      	ite	eq
 8015aa0:	2301      	moveq	r3, #1
 8015aa2:	2300      	movne	r3, #0
 8015aa4:	b2db      	uxtb	r3, r3
 8015aa6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015aae:	b2db      	uxtb	r3, r3
 8015ab0:	2b22      	cmp	r3, #34	@ 0x22
 8015ab2:	d108      	bne.n	8015ac6 <UART_DMAError+0x7a>
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d005      	beq.n	8015ac6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	2200      	movs	r2, #0
 8015abe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8015ac0:	68b8      	ldr	r0, [r7, #8]
 8015ac2:	f000 f929 	bl	8015d18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015aca:	f043 0210 	orr.w	r2, r3, #16
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015ad2:	68b8      	ldr	r0, [r7, #8]
 8015ad4:	f7ff fef0 	bl	80158b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015ad8:	bf00      	nop
 8015ada:	3710      	adds	r7, #16
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b086      	sub	sp, #24
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	603b      	str	r3, [r7, #0]
 8015aec:	4613      	mov	r3, r2
 8015aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015af0:	e03b      	b.n	8015b6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015af2:	6a3b      	ldr	r3, [r7, #32]
 8015af4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015af8:	d037      	beq.n	8015b6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015afa:	f7f9 f833 	bl	800eb64 <HAL_GetTick>
 8015afe:	4602      	mov	r2, r0
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	1ad3      	subs	r3, r2, r3
 8015b04:	6a3a      	ldr	r2, [r7, #32]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d302      	bcc.n	8015b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8015b0a:	6a3b      	ldr	r3, [r7, #32]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d101      	bne.n	8015b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015b10:	2303      	movs	r3, #3
 8015b12:	e03a      	b.n	8015b8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	68db      	ldr	r3, [r3, #12]
 8015b1a:	f003 0304 	and.w	r3, r3, #4
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d023      	beq.n	8015b6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	2b80      	cmp	r3, #128	@ 0x80
 8015b26:	d020      	beq.n	8015b6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	2b40      	cmp	r3, #64	@ 0x40
 8015b2c:	d01d      	beq.n	8015b6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	f003 0308 	and.w	r3, r3, #8
 8015b38:	2b08      	cmp	r3, #8
 8015b3a:	d116      	bne.n	8015b6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	617b      	str	r3, [r7, #20]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	617b      	str	r3, [r7, #20]
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	617b      	str	r3, [r7, #20]
 8015b50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015b52:	68f8      	ldr	r0, [r7, #12]
 8015b54:	f000 f8e0 	bl	8015d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2208      	movs	r2, #8
 8015b5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2200      	movs	r2, #0
 8015b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8015b66:	2301      	movs	r3, #1
 8015b68:	e00f      	b.n	8015b8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	4013      	ands	r3, r2
 8015b74:	68ba      	ldr	r2, [r7, #8]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	bf0c      	ite	eq
 8015b7a:	2301      	moveq	r3, #1
 8015b7c:	2300      	movne	r3, #0
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	461a      	mov	r2, r3
 8015b82:	79fb      	ldrb	r3, [r7, #7]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d0b4      	beq.n	8015af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015b88:	2300      	movs	r3, #0
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3718      	adds	r7, #24
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
	...

08015b94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b098      	sub	sp, #96	@ 0x60
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	60b9      	str	r1, [r7, #8]
 8015b9e:	4613      	mov	r3, r2
 8015ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8015ba2:	68ba      	ldr	r2, [r7, #8]
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	88fa      	ldrh	r2, [r7, #6]
 8015bac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2222      	movs	r2, #34	@ 0x22
 8015bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8015cbc <UART_Start_Receive_DMA+0x128>)
 8015bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8015cc0 <UART_Start_Receive_DMA+0x12c>)
 8015bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8015cc4 <UART_Start_Receive_DMA+0x130>)
 8015bd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bd8:	2200      	movs	r2, #0
 8015bda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8015bdc:	f107 0308 	add.w	r3, r7, #8
 8015be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	3304      	adds	r3, #4
 8015bec:	4619      	mov	r1, r3
 8015bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	88fb      	ldrh	r3, [r7, #6]
 8015bf4:	f7f9 f9f4 	bl	800efe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	613b      	str	r3, [r7, #16]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	613b      	str	r3, [r7, #16]
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	685b      	ldr	r3, [r3, #4]
 8015c0a:	613b      	str	r3, [r7, #16]
 8015c0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	691b      	ldr	r3, [r3, #16]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d019      	beq.n	8015c4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	330c      	adds	r3, #12
 8015c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c20:	e853 3f00 	ldrex	r3, [r3]
 8015c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	330c      	adds	r3, #12
 8015c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015c36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8015c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015c3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015c3e:	e841 2300 	strex	r3, r2, [r1]
 8015c42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8015c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d1e5      	bne.n	8015c16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	3314      	adds	r3, #20
 8015c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c54:	e853 3f00 	ldrex	r3, [r3]
 8015c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c5c:	f043 0301 	orr.w	r3, r3, #1
 8015c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	3314      	adds	r3, #20
 8015c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015c6a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8015c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015c72:	e841 2300 	strex	r3, r2, [r1]
 8015c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d1e5      	bne.n	8015c4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	3314      	adds	r3, #20
 8015c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	e853 3f00 	ldrex	r3, [r3]
 8015c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c94:	653b      	str	r3, [r7, #80]	@ 0x50
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	3314      	adds	r3, #20
 8015c9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015c9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8015ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ca2:	6a39      	ldr	r1, [r7, #32]
 8015ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ca6:	e841 2300 	strex	r3, r2, [r1]
 8015caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d1e5      	bne.n	8015c7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8015cb2:	2300      	movs	r3, #0
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3760      	adds	r7, #96	@ 0x60
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	080158e5 	.word	0x080158e5
 8015cc0:	08015a11 	.word	0x08015a11
 8015cc4:	08015a4d 	.word	0x08015a4d

08015cc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015cc8:	b480      	push	{r7}
 8015cca:	b089      	sub	sp, #36	@ 0x24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	330c      	adds	r3, #12
 8015cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	e853 3f00 	ldrex	r3, [r3]
 8015cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015ce6:	61fb      	str	r3, [r7, #28]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	330c      	adds	r3, #12
 8015cee:	69fa      	ldr	r2, [r7, #28]
 8015cf0:	61ba      	str	r2, [r7, #24]
 8015cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cf4:	6979      	ldr	r1, [r7, #20]
 8015cf6:	69ba      	ldr	r2, [r7, #24]
 8015cf8:	e841 2300 	strex	r3, r2, [r1]
 8015cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d1e5      	bne.n	8015cd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2220      	movs	r2, #32
 8015d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8015d0c:	bf00      	nop
 8015d0e:	3724      	adds	r7, #36	@ 0x24
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr

08015d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015d18:	b480      	push	{r7}
 8015d1a:	b095      	sub	sp, #84	@ 0x54
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	330c      	adds	r3, #12
 8015d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d2a:	e853 3f00 	ldrex	r3, [r3]
 8015d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	330c      	adds	r3, #12
 8015d3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015d40:	643a      	str	r2, [r7, #64]	@ 0x40
 8015d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015d48:	e841 2300 	strex	r3, r2, [r1]
 8015d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d1e5      	bne.n	8015d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	3314      	adds	r3, #20
 8015d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d5c:	6a3b      	ldr	r3, [r7, #32]
 8015d5e:	e853 3f00 	ldrex	r3, [r3]
 8015d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	f023 0301 	bic.w	r3, r3, #1
 8015d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	3314      	adds	r3, #20
 8015d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d7c:	e841 2300 	strex	r3, r2, [r1]
 8015d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d1e5      	bne.n	8015d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d119      	bne.n	8015dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	330c      	adds	r3, #12
 8015d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	e853 3f00 	ldrex	r3, [r3]
 8015d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015da0:	68bb      	ldr	r3, [r7, #8]
 8015da2:	f023 0310 	bic.w	r3, r3, #16
 8015da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	330c      	adds	r3, #12
 8015dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015db0:	61ba      	str	r2, [r7, #24]
 8015db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015db4:	6979      	ldr	r1, [r7, #20]
 8015db6:	69ba      	ldr	r2, [r7, #24]
 8015db8:	e841 2300 	strex	r3, r2, [r1]
 8015dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d1e5      	bne.n	8015d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2220      	movs	r2, #32
 8015dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8015dd2:	bf00      	nop
 8015dd4:	3754      	adds	r7, #84	@ 0x54
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ddc:	4770      	bx	lr

08015dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b084      	sub	sp, #16
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2200      	movs	r2, #0
 8015df0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2200      	movs	r2, #0
 8015df6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015df8:	68f8      	ldr	r0, [r7, #12]
 8015dfa:	f7ff fd5d 	bl	80158b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015dfe:	bf00      	nop
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8015e06:	b480      	push	{r7}
 8015e08:	b085      	sub	sp, #20
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	2b21      	cmp	r3, #33	@ 0x21
 8015e18:	d13e      	bne.n	8015e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	689b      	ldr	r3, [r3, #8]
 8015e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015e22:	d114      	bne.n	8015e4e <UART_Transmit_IT+0x48>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	691b      	ldr	r3, [r3, #16]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d110      	bne.n	8015e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6a1b      	ldr	r3, [r3, #32]
 8015e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	881b      	ldrh	r3, [r3, #0]
 8015e36:	461a      	mov	r2, r3
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6a1b      	ldr	r3, [r3, #32]
 8015e46:	1c9a      	adds	r2, r3, #2
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	621a      	str	r2, [r3, #32]
 8015e4c:	e008      	b.n	8015e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6a1b      	ldr	r3, [r3, #32]
 8015e52:	1c59      	adds	r1, r3, #1
 8015e54:	687a      	ldr	r2, [r7, #4]
 8015e56:	6211      	str	r1, [r2, #32]
 8015e58:	781a      	ldrb	r2, [r3, #0]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8015e64:	b29b      	uxth	r3, r3
 8015e66:	3b01      	subs	r3, #1
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d10f      	bne.n	8015e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	68da      	ldr	r2, [r3, #12]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	68da      	ldr	r2, [r3, #12]
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8015e94:	2300      	movs	r3, #0
 8015e96:	e000      	b.n	8015e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8015e98:	2302      	movs	r3, #2
  }
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3714      	adds	r7, #20
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr

08015ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015ea6:	b580      	push	{r7, lr}
 8015ea8:	b082      	sub	sp, #8
 8015eaa:	af00      	add	r7, sp, #0
 8015eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	68da      	ldr	r2, [r3, #12]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2220      	movs	r2, #32
 8015ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7ff fcd8 	bl	801587c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8015ecc:	2300      	movs	r3, #0
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3708      	adds	r7, #8
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}

08015ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8015ed6:	b580      	push	{r7, lr}
 8015ed8:	b08c      	sub	sp, #48	@ 0x30
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	2b22      	cmp	r3, #34	@ 0x22
 8015ee8:	f040 80ae 	bne.w	8016048 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	689b      	ldr	r3, [r3, #8]
 8015ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015ef4:	d117      	bne.n	8015f26 <UART_Receive_IT+0x50>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	691b      	ldr	r3, [r3, #16]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d113      	bne.n	8015f26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8015efe:	2300      	movs	r3, #0
 8015f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f14:	b29a      	uxth	r2, r3
 8015f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f1e:	1c9a      	adds	r2, r3, #2
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	629a      	str	r2, [r3, #40]	@ 0x28
 8015f24:	e026      	b.n	8015f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015f38:	d007      	beq.n	8015f4a <UART_Receive_IT+0x74>
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	689b      	ldr	r3, [r3, #8]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d10a      	bne.n	8015f58 <UART_Receive_IT+0x82>
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	691b      	ldr	r3, [r3, #16]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d106      	bne.n	8015f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	685b      	ldr	r3, [r3, #4]
 8015f50:	b2da      	uxtb	r2, r3
 8015f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f54:	701a      	strb	r2, [r3, #0]
 8015f56:	e008      	b.n	8015f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f64:	b2da      	uxtb	r2, r3
 8015f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f6e:	1c5a      	adds	r2, r3, #1
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	3b01      	subs	r3, #1
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	4619      	mov	r1, r3
 8015f82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d15d      	bne.n	8016044 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	68da      	ldr	r2, [r3, #12]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	f022 0220 	bic.w	r2, r2, #32
 8015f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	68da      	ldr	r2, [r3, #12]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8015fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	695a      	ldr	r2, [r3, #20]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f022 0201 	bic.w	r2, r2, #1
 8015fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2220      	movs	r2, #32
 8015fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	d135      	bne.n	801603a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	330c      	adds	r3, #12
 8015fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	e853 3f00 	ldrex	r3, [r3]
 8015fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	f023 0310 	bic.w	r3, r3, #16
 8015fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	330c      	adds	r3, #12
 8015ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ff4:	623a      	str	r2, [r7, #32]
 8015ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ff8:	69f9      	ldr	r1, [r7, #28]
 8015ffa:	6a3a      	ldr	r2, [r7, #32]
 8015ffc:	e841 2300 	strex	r3, r2, [r1]
 8016000:	61bb      	str	r3, [r7, #24]
   return(result);
 8016002:	69bb      	ldr	r3, [r7, #24]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d1e5      	bne.n	8015fd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	f003 0310 	and.w	r3, r3, #16
 8016012:	2b10      	cmp	r3, #16
 8016014:	d10a      	bne.n	801602c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016016:	2300      	movs	r3, #0
 8016018:	60fb      	str	r3, [r7, #12]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	60fb      	str	r3, [r7, #12]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	60fb      	str	r3, [r7, #12]
 801602a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016030:	4619      	mov	r1, r3
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7ff fc4a 	bl	80158cc <HAL_UARTEx_RxEventCallback>
 8016038:	e002      	b.n	8016040 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f7ff fc28 	bl	8015890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8016040:	2300      	movs	r3, #0
 8016042:	e002      	b.n	801604a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8016044:	2300      	movs	r3, #0
 8016046:	e000      	b.n	801604a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8016048:	2302      	movs	r3, #2
  }
}
 801604a:	4618      	mov	r0, r3
 801604c:	3730      	adds	r7, #48	@ 0x30
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
	...

08016054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016058:	b0c0      	sub	sp, #256	@ 0x100
 801605a:	af00      	add	r7, sp, #0
 801605c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	691b      	ldr	r3, [r3, #16]
 8016068:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016070:	68d9      	ldr	r1, [r3, #12]
 8016072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	ea40 0301 	orr.w	r3, r0, r1
 801607c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016082:	689a      	ldr	r2, [r3, #8]
 8016084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016088:	691b      	ldr	r3, [r3, #16]
 801608a:	431a      	orrs	r2, r3
 801608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016090:	695b      	ldr	r3, [r3, #20]
 8016092:	431a      	orrs	r2, r3
 8016094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016098:	69db      	ldr	r3, [r3, #28]
 801609a:	4313      	orrs	r3, r2
 801609c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80160a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	68db      	ldr	r3, [r3, #12]
 80160a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80160ac:	f021 010c 	bic.w	r1, r1, #12
 80160b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80160ba:	430b      	orrs	r3, r1
 80160bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80160be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	695b      	ldr	r3, [r3, #20]
 80160c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80160ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160ce:	6999      	ldr	r1, [r3, #24]
 80160d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160d4:	681a      	ldr	r2, [r3, #0]
 80160d6:	ea40 0301 	orr.w	r3, r0, r1
 80160da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80160dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	4b8f      	ldr	r3, [pc, #572]	@ (8016320 <UART_SetConfig+0x2cc>)
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d005      	beq.n	80160f4 <UART_SetConfig+0xa0>
 80160e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	4b8d      	ldr	r3, [pc, #564]	@ (8016324 <UART_SetConfig+0x2d0>)
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d104      	bne.n	80160fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80160f4:	f7fd fc30 	bl	8013958 <HAL_RCC_GetPCLK2Freq>
 80160f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80160fc:	e003      	b.n	8016106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80160fe:	f7fd fc17 	bl	8013930 <HAL_RCC_GetPCLK1Freq>
 8016102:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801610a:	69db      	ldr	r3, [r3, #28]
 801610c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016110:	f040 810c 	bne.w	801632c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016118:	2200      	movs	r2, #0
 801611a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801611e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8016122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8016126:	4622      	mov	r2, r4
 8016128:	462b      	mov	r3, r5
 801612a:	1891      	adds	r1, r2, r2
 801612c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801612e:	415b      	adcs	r3, r3
 8016130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016136:	4621      	mov	r1, r4
 8016138:	eb12 0801 	adds.w	r8, r2, r1
 801613c:	4629      	mov	r1, r5
 801613e:	eb43 0901 	adc.w	r9, r3, r1
 8016142:	f04f 0200 	mov.w	r2, #0
 8016146:	f04f 0300 	mov.w	r3, #0
 801614a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801614e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016156:	4690      	mov	r8, r2
 8016158:	4699      	mov	r9, r3
 801615a:	4623      	mov	r3, r4
 801615c:	eb18 0303 	adds.w	r3, r8, r3
 8016160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8016164:	462b      	mov	r3, r5
 8016166:	eb49 0303 	adc.w	r3, r9, r3
 801616a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	2200      	movs	r2, #0
 8016176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801617a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801617e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8016182:	460b      	mov	r3, r1
 8016184:	18db      	adds	r3, r3, r3
 8016186:	653b      	str	r3, [r7, #80]	@ 0x50
 8016188:	4613      	mov	r3, r2
 801618a:	eb42 0303 	adc.w	r3, r2, r3
 801618e:	657b      	str	r3, [r7, #84]	@ 0x54
 8016190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8016194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8016198:	f7ea fd56 	bl	8000c48 <__aeabi_uldivmod>
 801619c:	4602      	mov	r2, r0
 801619e:	460b      	mov	r3, r1
 80161a0:	4b61      	ldr	r3, [pc, #388]	@ (8016328 <UART_SetConfig+0x2d4>)
 80161a2:	fba3 2302 	umull	r2, r3, r3, r2
 80161a6:	095b      	lsrs	r3, r3, #5
 80161a8:	011c      	lsls	r4, r3, #4
 80161aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80161ae:	2200      	movs	r2, #0
 80161b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80161b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80161b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80161bc:	4642      	mov	r2, r8
 80161be:	464b      	mov	r3, r9
 80161c0:	1891      	adds	r1, r2, r2
 80161c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80161c4:	415b      	adcs	r3, r3
 80161c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80161c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80161cc:	4641      	mov	r1, r8
 80161ce:	eb12 0a01 	adds.w	sl, r2, r1
 80161d2:	4649      	mov	r1, r9
 80161d4:	eb43 0b01 	adc.w	fp, r3, r1
 80161d8:	f04f 0200 	mov.w	r2, #0
 80161dc:	f04f 0300 	mov.w	r3, #0
 80161e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80161e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80161e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80161ec:	4692      	mov	sl, r2
 80161ee:	469b      	mov	fp, r3
 80161f0:	4643      	mov	r3, r8
 80161f2:	eb1a 0303 	adds.w	r3, sl, r3
 80161f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80161fa:	464b      	mov	r3, r9
 80161fc:	eb4b 0303 	adc.w	r3, fp, r3
 8016200:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8016204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	2200      	movs	r2, #0
 801620c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8016210:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8016214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8016218:	460b      	mov	r3, r1
 801621a:	18db      	adds	r3, r3, r3
 801621c:	643b      	str	r3, [r7, #64]	@ 0x40
 801621e:	4613      	mov	r3, r2
 8016220:	eb42 0303 	adc.w	r3, r2, r3
 8016224:	647b      	str	r3, [r7, #68]	@ 0x44
 8016226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801622a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801622e:	f7ea fd0b 	bl	8000c48 <__aeabi_uldivmod>
 8016232:	4602      	mov	r2, r0
 8016234:	460b      	mov	r3, r1
 8016236:	4611      	mov	r1, r2
 8016238:	4b3b      	ldr	r3, [pc, #236]	@ (8016328 <UART_SetConfig+0x2d4>)
 801623a:	fba3 2301 	umull	r2, r3, r3, r1
 801623e:	095b      	lsrs	r3, r3, #5
 8016240:	2264      	movs	r2, #100	@ 0x64
 8016242:	fb02 f303 	mul.w	r3, r2, r3
 8016246:	1acb      	subs	r3, r1, r3
 8016248:	00db      	lsls	r3, r3, #3
 801624a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801624e:	4b36      	ldr	r3, [pc, #216]	@ (8016328 <UART_SetConfig+0x2d4>)
 8016250:	fba3 2302 	umull	r2, r3, r3, r2
 8016254:	095b      	lsrs	r3, r3, #5
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801625c:	441c      	add	r4, r3
 801625e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016262:	2200      	movs	r2, #0
 8016264:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016268:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801626c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8016270:	4642      	mov	r2, r8
 8016272:	464b      	mov	r3, r9
 8016274:	1891      	adds	r1, r2, r2
 8016276:	63b9      	str	r1, [r7, #56]	@ 0x38
 8016278:	415b      	adcs	r3, r3
 801627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801627c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8016280:	4641      	mov	r1, r8
 8016282:	1851      	adds	r1, r2, r1
 8016284:	6339      	str	r1, [r7, #48]	@ 0x30
 8016286:	4649      	mov	r1, r9
 8016288:	414b      	adcs	r3, r1
 801628a:	637b      	str	r3, [r7, #52]	@ 0x34
 801628c:	f04f 0200 	mov.w	r2, #0
 8016290:	f04f 0300 	mov.w	r3, #0
 8016294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8016298:	4659      	mov	r1, fp
 801629a:	00cb      	lsls	r3, r1, #3
 801629c:	4651      	mov	r1, sl
 801629e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80162a2:	4651      	mov	r1, sl
 80162a4:	00ca      	lsls	r2, r1, #3
 80162a6:	4610      	mov	r0, r2
 80162a8:	4619      	mov	r1, r3
 80162aa:	4603      	mov	r3, r0
 80162ac:	4642      	mov	r2, r8
 80162ae:	189b      	adds	r3, r3, r2
 80162b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80162b4:	464b      	mov	r3, r9
 80162b6:	460a      	mov	r2, r1
 80162b8:	eb42 0303 	adc.w	r3, r2, r3
 80162bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80162c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80162cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80162d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80162d4:	460b      	mov	r3, r1
 80162d6:	18db      	adds	r3, r3, r3
 80162d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80162da:	4613      	mov	r3, r2
 80162dc:	eb42 0303 	adc.w	r3, r2, r3
 80162e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80162e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80162ea:	f7ea fcad 	bl	8000c48 <__aeabi_uldivmod>
 80162ee:	4602      	mov	r2, r0
 80162f0:	460b      	mov	r3, r1
 80162f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016328 <UART_SetConfig+0x2d4>)
 80162f4:	fba3 1302 	umull	r1, r3, r3, r2
 80162f8:	095b      	lsrs	r3, r3, #5
 80162fa:	2164      	movs	r1, #100	@ 0x64
 80162fc:	fb01 f303 	mul.w	r3, r1, r3
 8016300:	1ad3      	subs	r3, r2, r3
 8016302:	00db      	lsls	r3, r3, #3
 8016304:	3332      	adds	r3, #50	@ 0x32
 8016306:	4a08      	ldr	r2, [pc, #32]	@ (8016328 <UART_SetConfig+0x2d4>)
 8016308:	fba2 2303 	umull	r2, r3, r2, r3
 801630c:	095b      	lsrs	r3, r3, #5
 801630e:	f003 0207 	and.w	r2, r3, #7
 8016312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	4422      	add	r2, r4
 801631a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801631c:	e106      	b.n	801652c <UART_SetConfig+0x4d8>
 801631e:	bf00      	nop
 8016320:	40011000 	.word	0x40011000
 8016324:	40011400 	.word	0x40011400
 8016328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801632c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016330:	2200      	movs	r2, #0
 8016332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016336:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801633a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801633e:	4642      	mov	r2, r8
 8016340:	464b      	mov	r3, r9
 8016342:	1891      	adds	r1, r2, r2
 8016344:	6239      	str	r1, [r7, #32]
 8016346:	415b      	adcs	r3, r3
 8016348:	627b      	str	r3, [r7, #36]	@ 0x24
 801634a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801634e:	4641      	mov	r1, r8
 8016350:	1854      	adds	r4, r2, r1
 8016352:	4649      	mov	r1, r9
 8016354:	eb43 0501 	adc.w	r5, r3, r1
 8016358:	f04f 0200 	mov.w	r2, #0
 801635c:	f04f 0300 	mov.w	r3, #0
 8016360:	00eb      	lsls	r3, r5, #3
 8016362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016366:	00e2      	lsls	r2, r4, #3
 8016368:	4614      	mov	r4, r2
 801636a:	461d      	mov	r5, r3
 801636c:	4643      	mov	r3, r8
 801636e:	18e3      	adds	r3, r4, r3
 8016370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8016374:	464b      	mov	r3, r9
 8016376:	eb45 0303 	adc.w	r3, r5, r3
 801637a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	2200      	movs	r2, #0
 8016386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801638a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801638e:	f04f 0200 	mov.w	r2, #0
 8016392:	f04f 0300 	mov.w	r3, #0
 8016396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801639a:	4629      	mov	r1, r5
 801639c:	008b      	lsls	r3, r1, #2
 801639e:	4621      	mov	r1, r4
 80163a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80163a4:	4621      	mov	r1, r4
 80163a6:	008a      	lsls	r2, r1, #2
 80163a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80163ac:	f7ea fc4c 	bl	8000c48 <__aeabi_uldivmod>
 80163b0:	4602      	mov	r2, r0
 80163b2:	460b      	mov	r3, r1
 80163b4:	4b60      	ldr	r3, [pc, #384]	@ (8016538 <UART_SetConfig+0x4e4>)
 80163b6:	fba3 2302 	umull	r2, r3, r3, r2
 80163ba:	095b      	lsrs	r3, r3, #5
 80163bc:	011c      	lsls	r4, r3, #4
 80163be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80163c2:	2200      	movs	r2, #0
 80163c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80163c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80163cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80163d0:	4642      	mov	r2, r8
 80163d2:	464b      	mov	r3, r9
 80163d4:	1891      	adds	r1, r2, r2
 80163d6:	61b9      	str	r1, [r7, #24]
 80163d8:	415b      	adcs	r3, r3
 80163da:	61fb      	str	r3, [r7, #28]
 80163dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80163e0:	4641      	mov	r1, r8
 80163e2:	1851      	adds	r1, r2, r1
 80163e4:	6139      	str	r1, [r7, #16]
 80163e6:	4649      	mov	r1, r9
 80163e8:	414b      	adcs	r3, r1
 80163ea:	617b      	str	r3, [r7, #20]
 80163ec:	f04f 0200 	mov.w	r2, #0
 80163f0:	f04f 0300 	mov.w	r3, #0
 80163f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80163f8:	4659      	mov	r1, fp
 80163fa:	00cb      	lsls	r3, r1, #3
 80163fc:	4651      	mov	r1, sl
 80163fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016402:	4651      	mov	r1, sl
 8016404:	00ca      	lsls	r2, r1, #3
 8016406:	4610      	mov	r0, r2
 8016408:	4619      	mov	r1, r3
 801640a:	4603      	mov	r3, r0
 801640c:	4642      	mov	r2, r8
 801640e:	189b      	adds	r3, r3, r2
 8016410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016414:	464b      	mov	r3, r9
 8016416:	460a      	mov	r2, r1
 8016418:	eb42 0303 	adc.w	r3, r2, r3
 801641c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	2200      	movs	r2, #0
 8016428:	67bb      	str	r3, [r7, #120]	@ 0x78
 801642a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801642c:	f04f 0200 	mov.w	r2, #0
 8016430:	f04f 0300 	mov.w	r3, #0
 8016434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8016438:	4649      	mov	r1, r9
 801643a:	008b      	lsls	r3, r1, #2
 801643c:	4641      	mov	r1, r8
 801643e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016442:	4641      	mov	r1, r8
 8016444:	008a      	lsls	r2, r1, #2
 8016446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801644a:	f7ea fbfd 	bl	8000c48 <__aeabi_uldivmod>
 801644e:	4602      	mov	r2, r0
 8016450:	460b      	mov	r3, r1
 8016452:	4611      	mov	r1, r2
 8016454:	4b38      	ldr	r3, [pc, #224]	@ (8016538 <UART_SetConfig+0x4e4>)
 8016456:	fba3 2301 	umull	r2, r3, r3, r1
 801645a:	095b      	lsrs	r3, r3, #5
 801645c:	2264      	movs	r2, #100	@ 0x64
 801645e:	fb02 f303 	mul.w	r3, r2, r3
 8016462:	1acb      	subs	r3, r1, r3
 8016464:	011b      	lsls	r3, r3, #4
 8016466:	3332      	adds	r3, #50	@ 0x32
 8016468:	4a33      	ldr	r2, [pc, #204]	@ (8016538 <UART_SetConfig+0x4e4>)
 801646a:	fba2 2303 	umull	r2, r3, r2, r3
 801646e:	095b      	lsrs	r3, r3, #5
 8016470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016474:	441c      	add	r4, r3
 8016476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801647a:	2200      	movs	r2, #0
 801647c:	673b      	str	r3, [r7, #112]	@ 0x70
 801647e:	677a      	str	r2, [r7, #116]	@ 0x74
 8016480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8016484:	4642      	mov	r2, r8
 8016486:	464b      	mov	r3, r9
 8016488:	1891      	adds	r1, r2, r2
 801648a:	60b9      	str	r1, [r7, #8]
 801648c:	415b      	adcs	r3, r3
 801648e:	60fb      	str	r3, [r7, #12]
 8016490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016494:	4641      	mov	r1, r8
 8016496:	1851      	adds	r1, r2, r1
 8016498:	6039      	str	r1, [r7, #0]
 801649a:	4649      	mov	r1, r9
 801649c:	414b      	adcs	r3, r1
 801649e:	607b      	str	r3, [r7, #4]
 80164a0:	f04f 0200 	mov.w	r2, #0
 80164a4:	f04f 0300 	mov.w	r3, #0
 80164a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80164ac:	4659      	mov	r1, fp
 80164ae:	00cb      	lsls	r3, r1, #3
 80164b0:	4651      	mov	r1, sl
 80164b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80164b6:	4651      	mov	r1, sl
 80164b8:	00ca      	lsls	r2, r1, #3
 80164ba:	4610      	mov	r0, r2
 80164bc:	4619      	mov	r1, r3
 80164be:	4603      	mov	r3, r0
 80164c0:	4642      	mov	r2, r8
 80164c2:	189b      	adds	r3, r3, r2
 80164c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80164c6:	464b      	mov	r3, r9
 80164c8:	460a      	mov	r2, r1
 80164ca:	eb42 0303 	adc.w	r3, r2, r3
 80164ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80164d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80164da:	667a      	str	r2, [r7, #100]	@ 0x64
 80164dc:	f04f 0200 	mov.w	r2, #0
 80164e0:	f04f 0300 	mov.w	r3, #0
 80164e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80164e8:	4649      	mov	r1, r9
 80164ea:	008b      	lsls	r3, r1, #2
 80164ec:	4641      	mov	r1, r8
 80164ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80164f2:	4641      	mov	r1, r8
 80164f4:	008a      	lsls	r2, r1, #2
 80164f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80164fa:	f7ea fba5 	bl	8000c48 <__aeabi_uldivmod>
 80164fe:	4602      	mov	r2, r0
 8016500:	460b      	mov	r3, r1
 8016502:	4b0d      	ldr	r3, [pc, #52]	@ (8016538 <UART_SetConfig+0x4e4>)
 8016504:	fba3 1302 	umull	r1, r3, r3, r2
 8016508:	095b      	lsrs	r3, r3, #5
 801650a:	2164      	movs	r1, #100	@ 0x64
 801650c:	fb01 f303 	mul.w	r3, r1, r3
 8016510:	1ad3      	subs	r3, r2, r3
 8016512:	011b      	lsls	r3, r3, #4
 8016514:	3332      	adds	r3, #50	@ 0x32
 8016516:	4a08      	ldr	r2, [pc, #32]	@ (8016538 <UART_SetConfig+0x4e4>)
 8016518:	fba2 2303 	umull	r2, r3, r2, r3
 801651c:	095b      	lsrs	r3, r3, #5
 801651e:	f003 020f 	and.w	r2, r3, #15
 8016522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	4422      	add	r2, r4
 801652a:	609a      	str	r2, [r3, #8]
}
 801652c:	bf00      	nop
 801652e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8016532:	46bd      	mov	sp, r7
 8016534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016538:	51eb851f 	.word	0x51eb851f

0801653c <UART_ReceivedMSG>:
  * @brief  Check if a message is received via UART
  * @param  Msg the pointer to the message to be received
  * @retval 1 if a complete message is found, 0 otherwise
  */
int UART_ReceivedMSG(TMsg *Msg)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b08a      	sub	sp, #40	@ 0x28
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8016544:	2300      	movs	r3, #0
 8016546:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8016548:	4b54      	ldr	r3, [pc, #336]	@ (801669c <UART_ReceivedMSG+0x160>)
 801654a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801654c:	4618      	mov	r0, r3
 801654e:	f000 f8df 	bl	8016710 <Get_DMA_Flag_Status>
 8016552:	4603      	mov	r3, r0
 8016554:	2b00      	cmp	r3, #0
 8016556:	f040 809c 	bne.w	8016692 <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 801655a:	4b50      	ldr	r3, [pc, #320]	@ (801669c <UART_ReceivedMSG+0x160>)
 801655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801655e:	4618      	mov	r0, r3
 8016560:	f000 fab8 	bl	8016ad4 <Get_DMA_Counter>
 8016564:	4603      	mov	r3, r0
 8016566:	b29b      	uxth	r3, r3
 8016568:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801656c:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 801656e:	4b4c      	ldr	r3, [pc, #304]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 8016570:	889b      	ldrh	r3, [r3, #4]
 8016572:	8bba      	ldrh	r2, [r7, #28]
 8016574:	429a      	cmp	r2, r3
 8016576:	d305      	bcc.n	8016584 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8016578:	4b49      	ldr	r3, [pc, #292]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 801657a:	889b      	ldrh	r3, [r3, #4]
 801657c:	8bba      	ldrh	r2, [r7, #28]
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	843b      	strh	r3, [r7, #32]
 8016582:	e007      	b.n	8016594 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8016584:	4b46      	ldr	r3, [pc, #280]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 8016586:	889b      	ldrh	r3, [r3, #4]
 8016588:	8bba      	ldrh	r2, [r7, #28]
 801658a:	1ad3      	subs	r3, r2, r3
 801658c:	b29b      	uxth	r3, r3
 801658e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8016592:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8016594:	4b42      	ldr	r3, [pc, #264]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 8016596:	889b      	ldrh	r3, [r3, #4]
 8016598:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (k = 0; k < length; k++)
 801659a:	2300      	movs	r3, #0
 801659c:	847b      	strh	r3, [r7, #34]	@ 0x22
 801659e:	e06d      	b.n	801667c <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 80165a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165a2:	4a40      	ldr	r2, [pc, #256]	@ (80166a4 <UART_ReceivedMSG+0x168>)
 80165a4:	5cd3      	ldrb	r3, [r2, r3]
 80165a6:	76fb      	strb	r3, [r7, #27]
      j++;
 80165a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165aa:	3301      	adds	r3, #1
 80165ac:	84bb      	strh	r3, [r7, #36]	@ 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 80165ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80165b4:	d301      	bcc.n	80165ba <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 80165ba:	7efb      	ldrb	r3, [r7, #27]
 80165bc:	2bf0      	cmp	r3, #240	@ 0xf0
 80165be:	d15a      	bne.n	8016676 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 80165c0:	4b37      	ldr	r3, [pc, #220]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 80165c2:	889b      	ldrh	r3, [r3, #4]
 80165c4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        for (i = 0; i < k; i += inc)
 80165c6:	2300      	movs	r3, #0
 80165c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80165ca:	e03a      	b.n	8016642 <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 80165cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165ce:	3301      	adds	r3, #1
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165d6:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80165d8:	8bfb      	ldrh	r3, [r7, #30]
 80165da:	2bff      	cmp	r3, #255	@ 0xff
 80165dc:	d904      	bls.n	80165e8 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80165de:	4a30      	ldr	r2, [pc, #192]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 80165e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165e2:	8093      	strh	r3, [r2, #4]
            return 0;
 80165e4:	2300      	movs	r3, #0
 80165e6:	e055      	b.n	8016694 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 80165e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165ea:	4a2e      	ldr	r2, [pc, #184]	@ (80166a4 <UART_ReceivedMSG+0x168>)
 80165ec:	5cd3      	ldrb	r3, [r2, r3]
 80165ee:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 80165f0:	8b3b      	ldrh	r3, [r7, #24]
 80165f2:	4a2c      	ldr	r2, [pc, #176]	@ (80166a4 <UART_ReceivedMSG+0x168>)
 80165f4:	5cd3      	ldrb	r3, [r2, r3]
 80165f6:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 80165f8:	8bfb      	ldrh	r3, [r7, #30]
 80165fa:	687a      	ldr	r2, [r7, #4]
 80165fc:	4413      	add	r3, r2
 80165fe:	3304      	adds	r3, #4
 8016600:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 8016602:	7db9      	ldrb	r1, [r7, #22]
 8016604:	7dfb      	ldrb	r3, [r7, #23]
 8016606:	693a      	ldr	r2, [r7, #16]
 8016608:	4618      	mov	r0, r3
 801660a:	f001 f90f 	bl	801782c <ReverseByteStuffCopyByte2>
 801660e:	4603      	mov	r3, r0
 8016610:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8016612:	7bfb      	ldrb	r3, [r7, #15]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d104      	bne.n	8016622 <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8016618:	4a21      	ldr	r2, [pc, #132]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 801661a:	8b3b      	ldrh	r3, [r7, #24]
 801661c:	8093      	strh	r3, [r2, #4]
            return 0;
 801661e:	2300      	movs	r3, #0
 8016620:	e038      	b.n	8016694 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8016622:	7bfb      	ldrb	r3, [r7, #15]
 8016624:	b29a      	uxth	r2, r3
 8016626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016628:	4413      	add	r3, r2
 801662a:	b29b      	uxth	r3, r3
 801662c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016630:	84bb      	strh	r3, [r7, #36]	@ 0x24
          source++;
 8016632:	8bfb      	ldrh	r3, [r7, #30]
 8016634:	3301      	adds	r3, #1
 8016636:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8016638:	7bfb      	ldrb	r3, [r7, #15]
 801663a:	b29a      	uxth	r2, r3
 801663c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801663e:	4413      	add	r3, r2
 8016640:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016642:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016644:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016646:	429a      	cmp	r2, r3
 8016648:	d3c0      	bcc.n	80165cc <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 801664a:	8bfa      	ldrh	r2, [r7, #30]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8016650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016652:	3301      	adds	r3, #1
 8016654:	b29b      	uxth	r3, r3
 8016656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801665a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        UartEngine.StartOfMsg = j;
 801665c:	4a10      	ldr	r2, [pc, #64]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 801665e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016660:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f001 f933 	bl	80178ce <CHK_CheckAndRemove>
 8016668:	4603      	mov	r3, r0
 801666a:	2b00      	cmp	r3, #0
 801666c:	bf14      	ite	ne
 801666e:	2301      	movne	r3, #1
 8016670:	2300      	moveq	r3, #0
 8016672:	b2db      	uxtb	r3, r3
 8016674:	e00e      	b.n	8016694 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8016676:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016678:	3301      	adds	r3, #1
 801667a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801667c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801667e:	8c3b      	ldrh	r3, [r7, #32]
 8016680:	429a      	cmp	r2, r3
 8016682:	d38d      	bcc.n	80165a0 <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8016684:	8c3b      	ldrh	r3, [r7, #32]
 8016686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801668a:	d902      	bls.n	8016692 <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 801668c:	4a04      	ldr	r2, [pc, #16]	@ (80166a0 <UART_ReceivedMSG+0x164>)
 801668e:	8bbb      	ldrh	r3, [r7, #28]
 8016690:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8016692:	2300      	movs	r3, #0
}
 8016694:	4618      	mov	r0, r3
 8016696:	3728      	adds	r7, #40	@ 0x28
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}
 801669c:	20001670 	.word	0x20001670
 80166a0:	2000191c 	.word	0x2000191c
 80166a4:	2000171c 	.word	0x2000171c

080166a8 <UART_SendMsg>:
  * @brief  Send a message via UART
  * @param  Msg the pointer to the message to be sent
  * @retval None
  */
void UART_SendMsg(TMsg *Msg)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b084      	sub	sp, #16
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f001 f8e2 	bl	801787a <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80166b6:	6879      	ldr	r1, [r7, #4]
 80166b8:	4807      	ldr	r0, [pc, #28]	@ (80166d8 <UART_SendMsg+0x30>)
 80166ba:	f001 f889 	bl	80177d0 <ByteStuffCopy>
 80166be:	4603      	mov	r3, r0
 80166c0:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80166c2:	89fa      	ldrh	r2, [r7, #14]
 80166c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80166c8:	4903      	ldr	r1, [pc, #12]	@ (80166d8 <UART_SendMsg+0x30>)
 80166ca:	4804      	ldr	r0, [pc, #16]	@ (80166dc <UART_SendMsg+0x34>)
 80166cc:	f7fe fd94 	bl	80151f8 <HAL_UART_Transmit>
}
 80166d0:	bf00      	nop
 80166d2:	3710      	adds	r7, #16
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	20001924 	.word	0x20001924
 80166dc:	20001670 	.word	0x20001670

080166e0 <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 80166e4:	4b08      	ldr	r3, [pc, #32]	@ (8016708 <UART_StartReceiveMsg+0x28>)
 80166e6:	4a09      	ldr	r2, [pc, #36]	@ (801670c <UART_StartReceiveMsg+0x2c>)
 80166e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 80166ea:	4b07      	ldr	r3, [pc, #28]	@ (8016708 <UART_StartReceiveMsg+0x28>)
 80166ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 80166f2:	4b05      	ldr	r3, [pc, #20]	@ (8016708 <UART_StartReceiveMsg+0x28>)
 80166f4:	2200      	movs	r2, #0
 80166f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 80166f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166fc:	4903      	ldr	r1, [pc, #12]	@ (801670c <UART_StartReceiveMsg+0x2c>)
 80166fe:	4802      	ldr	r0, [pc, #8]	@ (8016708 <UART_StartReceiveMsg+0x28>)
 8016700:	f7fe fe05 	bl	801530e <HAL_UART_Receive_DMA>
}
 8016704:	bf00      	nop
 8016706:	bd80      	pop	{r7, pc}
 8016708:	20001670 	.word	0x20001670
 801670c:	2000171c 	.word	0x2000171c

08016710 <Get_DMA_Flag_Status>:
  * @brief  Get the DMA Stream pending flags
  * @param  handle_dma DMA handle
  * @retval The state of FLAG (SET or RESET)
  */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8016710:	b480      	push	{r7}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	461a      	mov	r2, r3
 801671e:	4b8c      	ldr	r3, [pc, #560]	@ (8016950 <Get_DMA_Flag_Status+0x240>)
 8016720:	429a      	cmp	r2, r3
 8016722:	d961      	bls.n	80167e8 <Get_DMA_Flag_Status+0xd8>
 8016724:	4b8b      	ldr	r3, [pc, #556]	@ (8016954 <Get_DMA_Flag_Status+0x244>)
 8016726:	685a      	ldr	r2, [r3, #4]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	498a      	ldr	r1, [pc, #552]	@ (8016958 <Get_DMA_Flag_Status+0x248>)
 801672e:	428b      	cmp	r3, r1
 8016730:	d057      	beq.n	80167e2 <Get_DMA_Flag_Status+0xd2>
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	4989      	ldr	r1, [pc, #548]	@ (801695c <Get_DMA_Flag_Status+0x24c>)
 8016738:	428b      	cmp	r3, r1
 801673a:	d050      	beq.n	80167de <Get_DMA_Flag_Status+0xce>
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4987      	ldr	r1, [pc, #540]	@ (8016960 <Get_DMA_Flag_Status+0x250>)
 8016742:	428b      	cmp	r3, r1
 8016744:	d049      	beq.n	80167da <Get_DMA_Flag_Status+0xca>
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	4986      	ldr	r1, [pc, #536]	@ (8016964 <Get_DMA_Flag_Status+0x254>)
 801674c:	428b      	cmp	r3, r1
 801674e:	d042      	beq.n	80167d6 <Get_DMA_Flag_Status+0xc6>
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	4984      	ldr	r1, [pc, #528]	@ (8016968 <Get_DMA_Flag_Status+0x258>)
 8016756:	428b      	cmp	r3, r1
 8016758:	d03a      	beq.n	80167d0 <Get_DMA_Flag_Status+0xc0>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	4983      	ldr	r1, [pc, #524]	@ (801696c <Get_DMA_Flag_Status+0x25c>)
 8016760:	428b      	cmp	r3, r1
 8016762:	d032      	beq.n	80167ca <Get_DMA_Flag_Status+0xba>
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	4981      	ldr	r1, [pc, #516]	@ (8016970 <Get_DMA_Flag_Status+0x260>)
 801676a:	428b      	cmp	r3, r1
 801676c:	d02a      	beq.n	80167c4 <Get_DMA_Flag_Status+0xb4>
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	4980      	ldr	r1, [pc, #512]	@ (8016974 <Get_DMA_Flag_Status+0x264>)
 8016774:	428b      	cmp	r3, r1
 8016776:	d022      	beq.n	80167be <Get_DMA_Flag_Status+0xae>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	497e      	ldr	r1, [pc, #504]	@ (8016978 <Get_DMA_Flag_Status+0x268>)
 801677e:	428b      	cmp	r3, r1
 8016780:	d01a      	beq.n	80167b8 <Get_DMA_Flag_Status+0xa8>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	497d      	ldr	r1, [pc, #500]	@ (801697c <Get_DMA_Flag_Status+0x26c>)
 8016788:	428b      	cmp	r3, r1
 801678a:	d012      	beq.n	80167b2 <Get_DMA_Flag_Status+0xa2>
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	497b      	ldr	r1, [pc, #492]	@ (8016980 <Get_DMA_Flag_Status+0x270>)
 8016792:	428b      	cmp	r3, r1
 8016794:	d00a      	beq.n	80167ac <Get_DMA_Flag_Status+0x9c>
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	497a      	ldr	r1, [pc, #488]	@ (8016984 <Get_DMA_Flag_Status+0x274>)
 801679c:	428b      	cmp	r3, r1
 801679e:	d102      	bne.n	80167a6 <Get_DMA_Flag_Status+0x96>
 80167a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80167a4:	e01e      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80167aa:	e01b      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80167b0:	e018      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167b2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80167b6:	e015      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80167bc:	e012      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167c2:	e00f      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167c8:	e00c      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167ce:	e009      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167d4:	e006      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167d6:	2308      	movs	r3, #8
 80167d8:	e004      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167da:	2308      	movs	r3, #8
 80167dc:	e002      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167de:	2308      	movs	r3, #8
 80167e0:	e000      	b.n	80167e4 <Get_DMA_Flag_Status+0xd4>
 80167e2:	2308      	movs	r3, #8
 80167e4:	4013      	ands	r3, r2
 80167e6:	e154      	b.n	8016a92 <Get_DMA_Flag_Status+0x382>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	461a      	mov	r2, r3
 80167ee:	4b66      	ldr	r3, [pc, #408]	@ (8016988 <Get_DMA_Flag_Status+0x278>)
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d961      	bls.n	80168b8 <Get_DMA_Flag_Status+0x1a8>
 80167f4:	4b57      	ldr	r3, [pc, #348]	@ (8016954 <Get_DMA_Flag_Status+0x244>)
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	4956      	ldr	r1, [pc, #344]	@ (8016958 <Get_DMA_Flag_Status+0x248>)
 80167fe:	428b      	cmp	r3, r1
 8016800:	d057      	beq.n	80168b2 <Get_DMA_Flag_Status+0x1a2>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	4955      	ldr	r1, [pc, #340]	@ (801695c <Get_DMA_Flag_Status+0x24c>)
 8016808:	428b      	cmp	r3, r1
 801680a:	d050      	beq.n	80168ae <Get_DMA_Flag_Status+0x19e>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4953      	ldr	r1, [pc, #332]	@ (8016960 <Get_DMA_Flag_Status+0x250>)
 8016812:	428b      	cmp	r3, r1
 8016814:	d049      	beq.n	80168aa <Get_DMA_Flag_Status+0x19a>
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	4952      	ldr	r1, [pc, #328]	@ (8016964 <Get_DMA_Flag_Status+0x254>)
 801681c:	428b      	cmp	r3, r1
 801681e:	d042      	beq.n	80168a6 <Get_DMA_Flag_Status+0x196>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	4950      	ldr	r1, [pc, #320]	@ (8016968 <Get_DMA_Flag_Status+0x258>)
 8016826:	428b      	cmp	r3, r1
 8016828:	d03a      	beq.n	80168a0 <Get_DMA_Flag_Status+0x190>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	494f      	ldr	r1, [pc, #316]	@ (801696c <Get_DMA_Flag_Status+0x25c>)
 8016830:	428b      	cmp	r3, r1
 8016832:	d032      	beq.n	801689a <Get_DMA_Flag_Status+0x18a>
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	494d      	ldr	r1, [pc, #308]	@ (8016970 <Get_DMA_Flag_Status+0x260>)
 801683a:	428b      	cmp	r3, r1
 801683c:	d02a      	beq.n	8016894 <Get_DMA_Flag_Status+0x184>
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	494c      	ldr	r1, [pc, #304]	@ (8016974 <Get_DMA_Flag_Status+0x264>)
 8016844:	428b      	cmp	r3, r1
 8016846:	d022      	beq.n	801688e <Get_DMA_Flag_Status+0x17e>
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	494a      	ldr	r1, [pc, #296]	@ (8016978 <Get_DMA_Flag_Status+0x268>)
 801684e:	428b      	cmp	r3, r1
 8016850:	d01a      	beq.n	8016888 <Get_DMA_Flag_Status+0x178>
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	4949      	ldr	r1, [pc, #292]	@ (801697c <Get_DMA_Flag_Status+0x26c>)
 8016858:	428b      	cmp	r3, r1
 801685a:	d012      	beq.n	8016882 <Get_DMA_Flag_Status+0x172>
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4947      	ldr	r1, [pc, #284]	@ (8016980 <Get_DMA_Flag_Status+0x270>)
 8016862:	428b      	cmp	r3, r1
 8016864:	d00a      	beq.n	801687c <Get_DMA_Flag_Status+0x16c>
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	4946      	ldr	r1, [pc, #280]	@ (8016984 <Get_DMA_Flag_Status+0x274>)
 801686c:	428b      	cmp	r3, r1
 801686e:	d102      	bne.n	8016876 <Get_DMA_Flag_Status+0x166>
 8016870:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016874:	e01e      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 8016876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801687a:	e01b      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 801687c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016880:	e018      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 8016882:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016886:	e015      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 8016888:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801688c:	e012      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 801688e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016892:	e00f      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 8016894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016898:	e00c      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 801689a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801689e:	e009      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 80168a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80168a4:	e006      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 80168a6:	2308      	movs	r3, #8
 80168a8:	e004      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 80168aa:	2308      	movs	r3, #8
 80168ac:	e002      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 80168ae:	2308      	movs	r3, #8
 80168b0:	e000      	b.n	80168b4 <Get_DMA_Flag_Status+0x1a4>
 80168b2:	2308      	movs	r3, #8
 80168b4:	4013      	ands	r3, r2
 80168b6:	e0ec      	b.n	8016a92 <Get_DMA_Flag_Status+0x382>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	461a      	mov	r2, r3
 80168be:	4b33      	ldr	r3, [pc, #204]	@ (801698c <Get_DMA_Flag_Status+0x27c>)
 80168c0:	429a      	cmp	r2, r3
 80168c2:	f240 8085 	bls.w	80169d0 <Get_DMA_Flag_Status+0x2c0>
 80168c6:	4b32      	ldr	r3, [pc, #200]	@ (8016990 <Get_DMA_Flag_Status+0x280>)
 80168c8:	685a      	ldr	r2, [r3, #4]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	4922      	ldr	r1, [pc, #136]	@ (8016958 <Get_DMA_Flag_Status+0x248>)
 80168d0:	428b      	cmp	r3, r1
 80168d2:	d07a      	beq.n	80169ca <Get_DMA_Flag_Status+0x2ba>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	4920      	ldr	r1, [pc, #128]	@ (801695c <Get_DMA_Flag_Status+0x24c>)
 80168da:	428b      	cmp	r3, r1
 80168dc:	d073      	beq.n	80169c6 <Get_DMA_Flag_Status+0x2b6>
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	491f      	ldr	r1, [pc, #124]	@ (8016960 <Get_DMA_Flag_Status+0x250>)
 80168e4:	428b      	cmp	r3, r1
 80168e6:	d06c      	beq.n	80169c2 <Get_DMA_Flag_Status+0x2b2>
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	491d      	ldr	r1, [pc, #116]	@ (8016964 <Get_DMA_Flag_Status+0x254>)
 80168ee:	428b      	cmp	r3, r1
 80168f0:	d065      	beq.n	80169be <Get_DMA_Flag_Status+0x2ae>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	491c      	ldr	r1, [pc, #112]	@ (8016968 <Get_DMA_Flag_Status+0x258>)
 80168f8:	428b      	cmp	r3, r1
 80168fa:	d05d      	beq.n	80169b8 <Get_DMA_Flag_Status+0x2a8>
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	491a      	ldr	r1, [pc, #104]	@ (801696c <Get_DMA_Flag_Status+0x25c>)
 8016902:	428b      	cmp	r3, r1
 8016904:	d055      	beq.n	80169b2 <Get_DMA_Flag_Status+0x2a2>
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	4919      	ldr	r1, [pc, #100]	@ (8016970 <Get_DMA_Flag_Status+0x260>)
 801690c:	428b      	cmp	r3, r1
 801690e:	d04d      	beq.n	80169ac <Get_DMA_Flag_Status+0x29c>
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4917      	ldr	r1, [pc, #92]	@ (8016974 <Get_DMA_Flag_Status+0x264>)
 8016916:	428b      	cmp	r3, r1
 8016918:	d045      	beq.n	80169a6 <Get_DMA_Flag_Status+0x296>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	4916      	ldr	r1, [pc, #88]	@ (8016978 <Get_DMA_Flag_Status+0x268>)
 8016920:	428b      	cmp	r3, r1
 8016922:	d03d      	beq.n	80169a0 <Get_DMA_Flag_Status+0x290>
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	4914      	ldr	r1, [pc, #80]	@ (801697c <Get_DMA_Flag_Status+0x26c>)
 801692a:	428b      	cmp	r3, r1
 801692c:	d035      	beq.n	801699a <Get_DMA_Flag_Status+0x28a>
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	4913      	ldr	r1, [pc, #76]	@ (8016980 <Get_DMA_Flag_Status+0x270>)
 8016934:	428b      	cmp	r3, r1
 8016936:	d02d      	beq.n	8016994 <Get_DMA_Flag_Status+0x284>
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	4911      	ldr	r1, [pc, #68]	@ (8016984 <Get_DMA_Flag_Status+0x274>)
 801693e:	428b      	cmp	r3, r1
 8016940:	d102      	bne.n	8016948 <Get_DMA_Flag_Status+0x238>
 8016942:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016946:	e041      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 8016948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801694c:	e03e      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 801694e:	bf00      	nop
 8016950:	40026458 	.word	0x40026458
 8016954:	40026400 	.word	0x40026400
 8016958:	40026010 	.word	0x40026010
 801695c:	40026410 	.word	0x40026410
 8016960:	40026070 	.word	0x40026070
 8016964:	40026470 	.word	0x40026470
 8016968:	40026028 	.word	0x40026028
 801696c:	40026428 	.word	0x40026428
 8016970:	40026088 	.word	0x40026088
 8016974:	40026488 	.word	0x40026488
 8016978:	40026040 	.word	0x40026040
 801697c:	40026440 	.word	0x40026440
 8016980:	400260a0 	.word	0x400260a0
 8016984:	400264a0 	.word	0x400264a0
 8016988:	400260b8 	.word	0x400260b8
 801698c:	40026058 	.word	0x40026058
 8016990:	40026000 	.word	0x40026000
 8016994:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016998:	e018      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 801699a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801699e:	e015      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80169a4:	e012      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80169aa:	e00f      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80169b0:	e00c      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80169b6:	e009      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80169bc:	e006      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169be:	2308      	movs	r3, #8
 80169c0:	e004      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169c2:	2308      	movs	r3, #8
 80169c4:	e002      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169c6:	2308      	movs	r3, #8
 80169c8:	e000      	b.n	80169cc <Get_DMA_Flag_Status+0x2bc>
 80169ca:	2308      	movs	r3, #8
 80169cc:	4013      	ands	r3, r2
 80169ce:	e060      	b.n	8016a92 <Get_DMA_Flag_Status+0x382>
 80169d0:	4b33      	ldr	r3, [pc, #204]	@ (8016aa0 <Get_DMA_Flag_Status+0x390>)
 80169d2:	681a      	ldr	r2, [r3, #0]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	4932      	ldr	r1, [pc, #200]	@ (8016aa4 <Get_DMA_Flag_Status+0x394>)
 80169da:	428b      	cmp	r3, r1
 80169dc:	d057      	beq.n	8016a8e <Get_DMA_Flag_Status+0x37e>
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	4931      	ldr	r1, [pc, #196]	@ (8016aa8 <Get_DMA_Flag_Status+0x398>)
 80169e4:	428b      	cmp	r3, r1
 80169e6:	d050      	beq.n	8016a8a <Get_DMA_Flag_Status+0x37a>
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	492f      	ldr	r1, [pc, #188]	@ (8016aac <Get_DMA_Flag_Status+0x39c>)
 80169ee:	428b      	cmp	r3, r1
 80169f0:	d049      	beq.n	8016a86 <Get_DMA_Flag_Status+0x376>
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	492e      	ldr	r1, [pc, #184]	@ (8016ab0 <Get_DMA_Flag_Status+0x3a0>)
 80169f8:	428b      	cmp	r3, r1
 80169fa:	d042      	beq.n	8016a82 <Get_DMA_Flag_Status+0x372>
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	492c      	ldr	r1, [pc, #176]	@ (8016ab4 <Get_DMA_Flag_Status+0x3a4>)
 8016a02:	428b      	cmp	r3, r1
 8016a04:	d03a      	beq.n	8016a7c <Get_DMA_Flag_Status+0x36c>
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	492b      	ldr	r1, [pc, #172]	@ (8016ab8 <Get_DMA_Flag_Status+0x3a8>)
 8016a0c:	428b      	cmp	r3, r1
 8016a0e:	d032      	beq.n	8016a76 <Get_DMA_Flag_Status+0x366>
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	4929      	ldr	r1, [pc, #164]	@ (8016abc <Get_DMA_Flag_Status+0x3ac>)
 8016a16:	428b      	cmp	r3, r1
 8016a18:	d02a      	beq.n	8016a70 <Get_DMA_Flag_Status+0x360>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	4928      	ldr	r1, [pc, #160]	@ (8016ac0 <Get_DMA_Flag_Status+0x3b0>)
 8016a20:	428b      	cmp	r3, r1
 8016a22:	d022      	beq.n	8016a6a <Get_DMA_Flag_Status+0x35a>
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	4926      	ldr	r1, [pc, #152]	@ (8016ac4 <Get_DMA_Flag_Status+0x3b4>)
 8016a2a:	428b      	cmp	r3, r1
 8016a2c:	d01a      	beq.n	8016a64 <Get_DMA_Flag_Status+0x354>
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	4925      	ldr	r1, [pc, #148]	@ (8016ac8 <Get_DMA_Flag_Status+0x3b8>)
 8016a34:	428b      	cmp	r3, r1
 8016a36:	d012      	beq.n	8016a5e <Get_DMA_Flag_Status+0x34e>
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4923      	ldr	r1, [pc, #140]	@ (8016acc <Get_DMA_Flag_Status+0x3bc>)
 8016a3e:	428b      	cmp	r3, r1
 8016a40:	d00a      	beq.n	8016a58 <Get_DMA_Flag_Status+0x348>
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	4922      	ldr	r1, [pc, #136]	@ (8016ad0 <Get_DMA_Flag_Status+0x3c0>)
 8016a48:	428b      	cmp	r3, r1
 8016a4a:	d102      	bne.n	8016a52 <Get_DMA_Flag_Status+0x342>
 8016a4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016a50:	e01e      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016a56:	e01b      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016a5c:	e018      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a5e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016a62:	e015      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016a68:	e012      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016a6e:	e00f      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016a74:	e00c      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016a7a:	e009      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016a80:	e006      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a82:	2308      	movs	r3, #8
 8016a84:	e004      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a86:	2308      	movs	r3, #8
 8016a88:	e002      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a8a:	2308      	movs	r3, #8
 8016a8c:	e000      	b.n	8016a90 <Get_DMA_Flag_Status+0x380>
 8016a8e:	2308      	movs	r3, #8
 8016a90:	4013      	ands	r3, r2
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	370c      	adds	r7, #12
 8016a96:	46bd      	mov	sp, r7
 8016a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9c:	4770      	bx	lr
 8016a9e:	bf00      	nop
 8016aa0:	40026000 	.word	0x40026000
 8016aa4:	40026010 	.word	0x40026010
 8016aa8:	40026410 	.word	0x40026410
 8016aac:	40026070 	.word	0x40026070
 8016ab0:	40026470 	.word	0x40026470
 8016ab4:	40026028 	.word	0x40026028
 8016ab8:	40026428 	.word	0x40026428
 8016abc:	40026088 	.word	0x40026088
 8016ac0:	40026488 	.word	0x40026488
 8016ac4:	40026040 	.word	0x40026040
 8016ac8:	40026440 	.word	0x40026440
 8016acc:	400260a0 	.word	0x400260a0
 8016ad0:	400264a0 	.word	0x400264a0

08016ad4 <Get_DMA_Counter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
  * @param  handle_dma DMA handle
  * @retval The number of remaining data units in the current DMA Stream transfer
  */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b083      	sub	sp, #12
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	685b      	ldr	r3, [r3, #4]
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	370c      	adds	r7, #12
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr

08016aee <BUILD_REPLY_HEADER>:
  * @brief  Build the reply header
  * @param  Msg the pointer to the message to be built
  * @retval None
  */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8016aee:	b480      	push	{r7}
 8016af0:	b083      	sub	sp, #12
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	795a      	ldrb	r2, [r3, #5]
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	2232      	movs	r2, #50	@ 0x32
 8016b02:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	799b      	ldrb	r3, [r3, #6]
 8016b08:	3b80      	subs	r3, #128	@ 0x80
 8016b0a:	b2da      	uxtb	r2, r3
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	719a      	strb	r2, [r3, #6]
}
 8016b10:	bf00      	nop
 8016b12:	370c      	adds	r7, #12
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr

08016b1c <INIT_STREAMING_HEADER>:
  * @brief  Initialize the streaming header
  * @param  Msg the pointer to the header to be initialized
  * @retval None
  */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b083      	sub	sp, #12
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8016b24:	4b09      	ldr	r3, [pc, #36]	@ (8016b4c <INIT_STREAMING_HEADER+0x30>)
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	b2da      	uxtb	r2, r3
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2232      	movs	r2, #50	@ 0x32
 8016b32:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2208      	movs	r2, #8
 8016b38:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	2203      	movs	r2, #3
 8016b3e:	601a      	str	r2, [r3, #0]
}
 8016b40:	bf00      	nop
 8016b42:	370c      	adds	r7, #12
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr
 8016b4c:	200002e5 	.word	0x200002e5

08016b50 <HandleMSG>:
  */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b098      	sub	sp, #96	@ 0x60
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8016b58:	2301      	movs	r3, #1
 8016b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d801      	bhi.n	8016b6c <HandleMSG+0x1c>
  {
    return 0;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	e36f      	b.n	801724c <HandleMSG+0x6fc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	791b      	ldrb	r3, [r3, #4]
 8016b70:	2b32      	cmp	r3, #50	@ 0x32
 8016b72:	d001      	beq.n	8016b78 <HandleMSG+0x28>
  {
    return 0;
 8016b74:	2300      	movs	r3, #0
 8016b76:	e369      	b.n	801724c <HandleMSG+0x6fc>
  }

  switch (Msg->Data[2])   /* CMD */
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	799b      	ldrb	r3, [r3, #6]
 8016b7c:	2b12      	cmp	r3, #18
 8016b7e:	dc6b      	bgt.n	8016c58 <HandleMSG+0x108>
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	dc3d      	bgt.n	8016c00 <HandleMSG+0xb0>
 8016b84:	e35e      	b.n	8017244 <HandleMSG+0x6f4>
 8016b86:	3b60      	subs	r3, #96	@ 0x60
 8016b88:	2b1a      	cmp	r3, #26
 8016b8a:	f200 835b 	bhi.w	8017244 <HandleMSG+0x6f4>
 8016b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8016b94 <HandleMSG+0x44>)
 8016b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b94:	08016cfb 	.word	0x08016cfb
 8016b98:	08017245 	.word	0x08017245
 8016b9c:	08016d29 	.word	0x08016d29
 8016ba0:	08017245 	.word	0x08017245
 8016ba4:	08017245 	.word	0x08017245
 8016ba8:	08017245 	.word	0x08017245
 8016bac:	08017245 	.word	0x08017245
 8016bb0:	08017245 	.word	0x08017245
 8016bb4:	08017245 	.word	0x08017245
 8016bb8:	08017245 	.word	0x08017245
 8016bbc:	08017245 	.word	0x08017245
 8016bc0:	08017245 	.word	0x08017245
 8016bc4:	08017245 	.word	0x08017245
 8016bc8:	08017245 	.word	0x08017245
 8016bcc:	08017245 	.word	0x08017245
 8016bd0:	08017245 	.word	0x08017245
 8016bd4:	08017245 	.word	0x08017245
 8016bd8:	08017245 	.word	0x08017245
 8016bdc:	08017245 	.word	0x08017245
 8016be0:	08017245 	.word	0x08017245
 8016be4:	08017245 	.word	0x08017245
 8016be8:	08017245 	.word	0x08017245
 8016bec:	08016d57 	.word	0x08016d57
 8016bf0:	08017245 	.word	0x08017245
 8016bf4:	08017245 	.word	0x08017245
 8016bf8:	08017245 	.word	0x08017245
 8016bfc:	08016d85 	.word	0x08016d85
 8016c00:	3b01      	subs	r3, #1
 8016c02:	2b11      	cmp	r3, #17
 8016c04:	f200 831e 	bhi.w	8017244 <HandleMSG+0x6f4>
 8016c08:	a201      	add	r2, pc, #4	@ (adr r2, 8016c10 <HandleMSG+0xc0>)
 8016c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c0e:	bf00      	nop
 8016c10:	08016c65 	.word	0x08016c65
 8016c14:	08016c9f 	.word	0x08016c9f
 8016c18:	08017245 	.word	0x08017245
 8016c1c:	08017245 	.word	0x08017245
 8016c20:	08017245 	.word	0x08017245
 8016c24:	08017245 	.word	0x08017245
 8016c28:	08017209 	.word	0x08017209
 8016c2c:	08016db3 	.word	0x08016db3
 8016c30:	08016e59 	.word	0x08016e59
 8016c34:	08017245 	.word	0x08017245
 8016c38:	08017245 	.word	0x08017245
 8016c3c:	08016ea3 	.word	0x08016ea3
 8016c40:	08017245 	.word	0x08017245
 8016c44:	08016c85 	.word	0x08016c85
 8016c48:	08017245 	.word	0x08017245
 8016c4c:	08016ee9 	.word	0x08016ee9
 8016c50:	08017159 	.word	0x08017159
 8016c54:	080171a7 	.word	0x080171a7
 8016c58:	2b7a      	cmp	r3, #122	@ 0x7a
 8016c5a:	f300 82f3 	bgt.w	8017244 <HandleMSG+0x6f4>
 8016c5e:	2b60      	cmp	r3, #96	@ 0x60
 8016c60:	da91      	bge.n	8016b86 <HandleMSG+0x36>
 8016c62:	e2ef      	b.n	8017244 <HandleMSG+0x6f4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b03      	cmp	r3, #3
 8016c6a:	d001      	beq.n	8016c70 <HandleMSG+0x120>
      {
        return 0;
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	e2ed      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f7ff ff3c 	bl	8016aee <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	2203      	movs	r2, #3
 8016c7a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f7ff fd13 	bl	80166a8 <UART_SendMsg>
      break;
 8016c82:	e2e2      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2b03      	cmp	r3, #3
 8016c8a:	d001      	beq.n	8016c90 <HandleMSG+0x140>
      {
        return 0;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	e2dd      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7ff ff2c 	bl	8016aee <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2203      	movs	r2, #3
 8016c9a:	601a      	str	r2, [r3, #0]
      break;
 8016c9c:	e2d5      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	2b03      	cmp	r3, #3
 8016ca4:	d001      	beq.n	8016caa <HandleMSG+0x15a>
      {
        return 0;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e2d0      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f7ff ff1f 	bl	8016aee <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 8016cb0:	f107 020c 	add.w	r2, r7, #12
 8016cb4:	f107 0310 	add.w	r3, r7, #16
 8016cb8:	4611      	mov	r1, r2
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f000 fb22 	bl	8017304 <Get_PresentationString>

      i = 0;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
      while (i < ps_len)
 8016cc4:	e00d      	b.n	8016ce2 <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 8016cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016cc8:	3303      	adds	r3, #3
 8016cca:	f107 0110 	add.w	r1, r7, #16
 8016cce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016cd0:	440a      	add	r2, r1
 8016cd2:	7811      	ldrb	r1, [r2, #0]
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	4413      	add	r3, r2
 8016cd8:	460a      	mov	r2, r1
 8016cda:	711a      	strb	r2, [r3, #4]
        i++;
 8016cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016cde:	3301      	adds	r3, #1
 8016ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
      while (i < ps_len)
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d3ed      	bcc.n	8016cc6 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 8016cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016cec:	1cda      	adds	r2, r3, #3
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f7ff fcd8 	bl	80166a8 <UART_SendMsg>
      break;
 8016cf8:	e2a7      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2b02      	cmp	r3, #2
 8016d00:	d801      	bhi.n	8016d06 <HandleMSG+0x1b6>
      {
        return 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	e2a2      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	f7ff fef1 	bl	8016aee <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	3307      	adds	r3, #7
 8016d10:	2204      	movs	r2, #4
 8016d12:	2109      	movs	r1, #9
 8016d14:	4618      	mov	r0, r3
 8016d16:	f000 fe2a 	bl	801796e <Serialize_s32>
      Msg->Len = 3 + 4;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2207      	movs	r2, #7
 8016d1e:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f7ff fcc1 	bl	80166a8 <UART_SendMsg>
      break;
 8016d26:	e290      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	2b02      	cmp	r3, #2
 8016d2e:	d801      	bhi.n	8016d34 <HandleMSG+0x1e4>
      {
        return 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	e28b      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7ff feda 	bl	8016aee <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	3307      	adds	r3, #7
 8016d3e:	2204      	movs	r2, #4
 8016d40:	2105      	movs	r1, #5
 8016d42:	4618      	mov	r0, r3
 8016d44:	f000 fe13 	bl	801796e <Serialize_s32>
      Msg->Len = 3 + 4;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2207      	movs	r2, #7
 8016d4c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	f7ff fcaa 	bl	80166a8 <UART_SendMsg>
      break;
 8016d54:	e279      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	2b02      	cmp	r3, #2
 8016d5c:	d801      	bhi.n	8016d62 <HandleMSG+0x212>
      {
        return 0;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	e274      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016d62:	6878      	ldr	r0, [r7, #4]
 8016d64:	f7ff fec3 	bl	8016aee <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	3307      	adds	r3, #7
 8016d6c:	2204      	movs	r2, #4
 8016d6e:	211f      	movs	r1, #31
 8016d70:	4618      	mov	r0, r3
 8016d72:	f000 fdfc 	bl	801796e <Serialize_s32>
      Msg->Len = 3 + 4;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	2207      	movs	r2, #7
 8016d7a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7ff fc93 	bl	80166a8 <UART_SendMsg>
      break;
 8016d82:	e262      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	2b02      	cmp	r3, #2
 8016d8a:	d801      	bhi.n	8016d90 <HandleMSG+0x240>
      {
        return 0;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	e25d      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f7ff feac 	bl	8016aee <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	3307      	adds	r3, #7
 8016d9a:	2204      	movs	r2, #4
 8016d9c:	2103      	movs	r1, #3
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f000 fde5 	bl	801796e <Serialize_s32>
      Msg->Len = 3 + 4;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2207      	movs	r2, #7
 8016da8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f7ff fc7c 	bl	80166a8 <UART_SendMsg>
      break;
 8016db0:	e24b      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2b02      	cmp	r3, #2
 8016db8:	d801      	bhi.n	8016dbe <HandleMSG+0x26e>
      {
        return 0;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	e246      	b.n	801724c <HandleMSG+0x6fc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	3307      	adds	r3, #7
 8016dc2:	2104      	movs	r1, #4
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f000 fdac 	bl	8017922 <Deserialize>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8016f04 <HandleMSG+0x3b4>)
 8016dce:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8016dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8016f04 <HandleMSG+0x3b4>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	f003 0301 	and.w	r3, r3, #1
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d101      	bne.n	8016de0 <HandleMSG+0x290>
      {
        BSP_SENSOR_PRESS_Enable();
 8016ddc:	f000 fb16 	bl	801740c <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8016de0:	4b48      	ldr	r3, [pc, #288]	@ (8016f04 <HandleMSG+0x3b4>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	f003 0302 	and.w	r3, r3, #2
 8016de8:	2b02      	cmp	r3, #2
 8016dea:	d101      	bne.n	8016df0 <HandleMSG+0x2a0>
      {
        BSP_SENSOR_TEMP_Enable();
 8016dec:	f000 fb16 	bl	801741c <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8016df0:	4b44      	ldr	r3, [pc, #272]	@ (8016f04 <HandleMSG+0x3b4>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	f003 0304 	and.w	r3, r3, #4
 8016df8:	2b04      	cmp	r3, #4
 8016dfa:	d101      	bne.n	8016e00 <HandleMSG+0x2b0>
      {
        BSP_SENSOR_HUM_Enable();
 8016dfc:	f000 fb16 	bl	801742c <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8016e00:	4b40      	ldr	r3, [pc, #256]	@ (8016f04 <HandleMSG+0x3b4>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f003 0310 	and.w	r3, r3, #16
 8016e08:	2b10      	cmp	r3, #16
 8016e0a:	d101      	bne.n	8016e10 <HandleMSG+0x2c0>
      {
        BSP_SENSOR_ACC_Enable();
 8016e0c:	f000 fae6 	bl	80173dc <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8016e10:	4b3c      	ldr	r3, [pc, #240]	@ (8016f04 <HandleMSG+0x3b4>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	f003 0320 	and.w	r3, r3, #32
 8016e18:	2b20      	cmp	r3, #32
 8016e1a:	d101      	bne.n	8016e20 <HandleMSG+0x2d0>
      {
        BSP_SENSOR_GYR_Enable();
 8016e1c:	f000 fae6 	bl	80173ec <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8016e20:	4b38      	ldr	r3, [pc, #224]	@ (8016f04 <HandleMSG+0x3b4>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e28:	2b40      	cmp	r3, #64	@ 0x40
 8016e2a:	d101      	bne.n	8016e30 <HandleMSG+0x2e0>
      {
        BSP_SENSOR_MAG_Enable();
 8016e2c:	f000 fae6 	bl	80173fc <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8016e30:	4835      	ldr	r0, [pc, #212]	@ (8016f08 <HandleMSG+0x3b8>)
 8016e32:	f7fd f9f1 	bl	8014218 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8016e36:	4b35      	ldr	r3, [pc, #212]	@ (8016f0c <HandleMSG+0x3bc>)
 8016e38:	2201      	movs	r2, #1
 8016e3a:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	795a      	ldrb	r2, [r3, #5]
 8016e40:	4b33      	ldr	r3, [pc, #204]	@ (8016f10 <HandleMSG+0x3c0>)
 8016e42:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f7ff fe52 	bl	8016aee <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2203      	movs	r2, #3
 8016e4e:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f7ff fc29 	bl	80166a8 <UART_SendMsg>
      break;
 8016e56:	e1f8      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	2b02      	cmp	r3, #2
 8016e5e:	d801      	bhi.n	8016e64 <HandleMSG+0x314>
      {
        return 0;
 8016e60:	2300      	movs	r3, #0
 8016e62:	e1f3      	b.n	801724c <HandleMSG+0x6fc>
      }

      DataLoggerActive = 0;
 8016e64:	4b29      	ldr	r3, [pc, #164]	@ (8016f0c <HandleMSG+0x3bc>)
 8016e66:	2200      	movs	r2, #0
 8016e68:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8016e6a:	4827      	ldr	r0, [pc, #156]	@ (8016f08 <HandleMSG+0x3b8>)
 8016e6c:	f7fd fa36 	bl	80142dc <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 8016e70:	f000 fae4 	bl	801743c <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 8016e74:	f000 faea 	bl	801744c <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 8016e78:	f000 faf0 	bl	801745c <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 8016e7c:	f000 faf6 	bl	801746c <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 8016e80:	f000 fafc 	bl	801747c <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 8016e84:	f000 fb02 	bl	801748c <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 8016e88:	4b1e      	ldr	r3, [pc, #120]	@ (8016f04 <HandleMSG+0x3b4>)
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 8016e8e:	4b21      	ldr	r3, [pc, #132]	@ (8016f14 <HandleMSG+0x3c4>)
 8016e90:	2200      	movs	r2, #0
 8016e92:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f7ff fe2a 	bl	8016aee <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f7ff fc04 	bl	80166a8 <UART_SendMsg>
      break;
 8016ea0:	e1d3      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	2b02      	cmp	r3, #2
 8016ea8:	d801      	bhi.n	8016eae <HandleMSG+0x35e>
      {
        return 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	e1ce      	b.n	801724c <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7ff fe1d 	bl	8016aee <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2203      	movs	r2, #3
 8016eb8:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	79d8      	ldrb	r0, [r3, #7]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	7a19      	ldrb	r1, [r3, #8]
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	7a5b      	ldrb	r3, [r3, #9]
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	f000 f9f2 	bl	80172b0 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	7a98      	ldrb	r0, [r3, #10]
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	7ad9      	ldrb	r1, [r3, #11]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	7b1a      	ldrb	r2, [r3, #12]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	7b5b      	ldrb	r3, [r3, #13]
 8016edc:	f000 f9be 	bl	801725c <RTC_DateRegulate>
      UART_SendMsg(Msg);
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f7ff fbe1 	bl	80166a8 <UART_SendMsg>
      break;
 8016ee6:	e1b0      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	2b36      	cmp	r3, #54	@ 0x36
 8016eee:	d801      	bhi.n	8016ef4 <HandleMSG+0x3a4>
      {
        return 0;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	e1ab      	b.n	801724c <HandleMSG+0x6fc>
      }

      msg_offset = 4;
 8016ef4:	2304      	movs	r3, #4
 8016ef6:	657b      	str	r3, [r7, #84]	@ 0x54
      msg_count = (uint32_t)Msg->Data[3];
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	79db      	ldrb	r3, [r3, #7]
 8016efc:	653b      	str	r3, [r7, #80]	@ 0x50

      for (i = 0; i < msg_count; i++)
 8016efe:	2300      	movs	r3, #0
 8016f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016f02:	e11a      	b.n	801713a <HandleMSG+0x5ea>
 8016f04:	20000bc8 	.word	0x20000bc8
 8016f08:	20000ea8 	.word	0x20000ea8
 8016f0c:	20000bc5 	.word	0x20000bc5
 8016f10:	200002e5 	.word	0x200002e5
 8016f14:	20000bf5 	.word	0x20000bf5
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8016f18:	4ba6      	ldr	r3, [pc, #664]	@ (80171b4 <HandleMSG+0x664>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2234      	movs	r2, #52	@ 0x34
 8016f1e:	fb02 f303 	mul.w	r3, r2, r3
 8016f22:	4aa5      	ldr	r2, [pc, #660]	@ (80171b8 <HandleMSG+0x668>)
 8016f24:	4413      	add	r3, r2
 8016f26:	6879      	ldr	r1, [r7, #4]
 8016f28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016f2a:	440a      	add	r2, r1
 8016f2c:	3204      	adds	r2, #4
 8016f2e:	7812      	ldrb	r2, [r2, #0]
 8016f30:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 8016f32:	4ba0      	ldr	r3, [pc, #640]	@ (80171b4 <HandleMSG+0x664>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2234      	movs	r2, #52	@ 0x34
 8016f38:	fb02 f303 	mul.w	r3, r2, r3
 8016f3c:	4a9e      	ldr	r2, [pc, #632]	@ (80171b8 <HandleMSG+0x668>)
 8016f3e:	4413      	add	r3, r2
 8016f40:	3301      	adds	r3, #1
 8016f42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016f44:	3201      	adds	r2, #1
 8016f46:	6879      	ldr	r1, [r7, #4]
 8016f48:	440a      	add	r2, r1
 8016f4a:	3204      	adds	r2, #4
 8016f4c:	7812      	ldrb	r2, [r2, #0]
 8016f4e:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 8016f50:	4b98      	ldr	r3, [pc, #608]	@ (80171b4 <HandleMSG+0x664>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	2234      	movs	r2, #52	@ 0x34
 8016f56:	fb02 f303 	mul.w	r3, r2, r3
 8016f5a:	4a97      	ldr	r2, [pc, #604]	@ (80171b8 <HandleMSG+0x668>)
 8016f5c:	4413      	add	r3, r2
 8016f5e:	3302      	adds	r3, #2
 8016f60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016f62:	3202      	adds	r2, #2
 8016f64:	6879      	ldr	r1, [r7, #4]
 8016f66:	440a      	add	r2, r1
 8016f68:	3204      	adds	r2, #4
 8016f6a:	7812      	ldrb	r2, [r2, #0]
 8016f6c:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 8016f6e:	4b91      	ldr	r3, [pc, #580]	@ (80171b4 <HandleMSG+0x664>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2234      	movs	r2, #52	@ 0x34
 8016f74:	fb02 f303 	mul.w	r3, r2, r3
 8016f78:	4a8f      	ldr	r2, [pc, #572]	@ (80171b8 <HandleMSG+0x668>)
 8016f7a:	4413      	add	r3, r2
 8016f7c:	3303      	adds	r3, #3
 8016f7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016f80:	3203      	adds	r2, #3
 8016f82:	6879      	ldr	r1, [r7, #4]
 8016f84:	440a      	add	r2, r1
 8016f86:	3204      	adds	r2, #4
 8016f88:	7812      	ldrb	r2, [r2, #0]
 8016f8a:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8016f8c:	4b89      	ldr	r3, [pc, #548]	@ (80171b4 <HandleMSG+0x664>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2234      	movs	r2, #52	@ 0x34
 8016f92:	fb02 f303 	mul.w	r3, r2, r3
 8016f96:	4a88      	ldr	r2, [pc, #544]	@ (80171b8 <HandleMSG+0x668>)
 8016f98:	4413      	add	r3, r2
 8016f9a:	3304      	adds	r3, #4
 8016f9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016f9e:	3204      	adds	r2, #4
 8016fa0:	6879      	ldr	r1, [r7, #4]
 8016fa2:	440a      	add	r2, r1
 8016fa4:	3204      	adds	r2, #4
 8016fa6:	6812      	ldr	r2, [r2, #0]
 8016fa8:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 8016faa:	4b82      	ldr	r3, [pc, #520]	@ (80171b4 <HandleMSG+0x664>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	2234      	movs	r2, #52	@ 0x34
 8016fb0:	fb02 f303 	mul.w	r3, r2, r3
 8016fb4:	3308      	adds	r3, #8
 8016fb6:	4a80      	ldr	r2, [pc, #512]	@ (80171b8 <HandleMSG+0x668>)
 8016fb8:	4413      	add	r3, r2
 8016fba:	3304      	adds	r3, #4
 8016fbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016fbe:	3208      	adds	r2, #8
 8016fc0:	6879      	ldr	r1, [r7, #4]
 8016fc2:	440a      	add	r2, r1
 8016fc4:	3204      	adds	r2, #4
 8016fc6:	6812      	ldr	r2, [r2, #0]
 8016fc8:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 8016fca:	4b7a      	ldr	r3, [pc, #488]	@ (80171b4 <HandleMSG+0x664>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	2234      	movs	r2, #52	@ 0x34
 8016fd0:	fb02 f303 	mul.w	r3, r2, r3
 8016fd4:	3308      	adds	r3, #8
 8016fd6:	4a78      	ldr	r2, [pc, #480]	@ (80171b8 <HandleMSG+0x668>)
 8016fd8:	4413      	add	r3, r2
 8016fda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016fdc:	320c      	adds	r2, #12
 8016fde:	6879      	ldr	r1, [r7, #4]
 8016fe0:	440a      	add	r2, r1
 8016fe2:	3204      	adds	r2, #4
 8016fe4:	6812      	ldr	r2, [r2, #0]
 8016fe6:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 8016fe8:	4b72      	ldr	r3, [pc, #456]	@ (80171b4 <HandleMSG+0x664>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2234      	movs	r2, #52	@ 0x34
 8016fee:	fb02 f303 	mul.w	r3, r2, r3
 8016ff2:	3310      	adds	r3, #16
 8016ff4:	4a70      	ldr	r2, [pc, #448]	@ (80171b8 <HandleMSG+0x668>)
 8016ff6:	4413      	add	r3, r2
 8016ff8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016ffa:	3210      	adds	r2, #16
 8016ffc:	6879      	ldr	r1, [r7, #4]
 8016ffe:	440a      	add	r2, r1
 8017000:	3204      	adds	r2, #4
 8017002:	6812      	ldr	r2, [r2, #0]
 8017004:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 8017006:	4b6b      	ldr	r3, [pc, #428]	@ (80171b4 <HandleMSG+0x664>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2234      	movs	r2, #52	@ 0x34
 801700c:	fb02 f303 	mul.w	r3, r2, r3
 8017010:	3310      	adds	r3, #16
 8017012:	4a69      	ldr	r2, [pc, #420]	@ (80171b8 <HandleMSG+0x668>)
 8017014:	4413      	add	r3, r2
 8017016:	3304      	adds	r3, #4
 8017018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801701a:	3214      	adds	r2, #20
 801701c:	6879      	ldr	r1, [r7, #4]
 801701e:	440a      	add	r2, r1
 8017020:	3204      	adds	r2, #4
 8017022:	6812      	ldr	r2, [r2, #0]
 8017024:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 8017026:	4b63      	ldr	r3, [pc, #396]	@ (80171b4 <HandleMSG+0x664>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2234      	movs	r2, #52	@ 0x34
 801702c:	fb02 f303 	mul.w	r3, r2, r3
 8017030:	3318      	adds	r3, #24
 8017032:	4a61      	ldr	r2, [pc, #388]	@ (80171b8 <HandleMSG+0x668>)
 8017034:	4413      	add	r3, r2
 8017036:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017038:	3218      	adds	r2, #24
 801703a:	6879      	ldr	r1, [r7, #4]
 801703c:	440a      	add	r2, r1
 801703e:	3204      	adds	r2, #4
 8017040:	6812      	ldr	r2, [r2, #0]
 8017042:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 8017044:	4b5b      	ldr	r3, [pc, #364]	@ (80171b4 <HandleMSG+0x664>)
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	2234      	movs	r2, #52	@ 0x34
 801704a:	fb02 f303 	mul.w	r3, r2, r3
 801704e:	3318      	adds	r3, #24
 8017050:	4a59      	ldr	r2, [pc, #356]	@ (80171b8 <HandleMSG+0x668>)
 8017052:	4413      	add	r3, r2
 8017054:	3304      	adds	r3, #4
 8017056:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017058:	321c      	adds	r2, #28
 801705a:	6879      	ldr	r1, [r7, #4]
 801705c:	440a      	add	r2, r1
 801705e:	3204      	adds	r2, #4
 8017060:	6812      	ldr	r2, [r2, #0]
 8017062:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 8017064:	4b53      	ldr	r3, [pc, #332]	@ (80171b4 <HandleMSG+0x664>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	2234      	movs	r2, #52	@ 0x34
 801706a:	fb02 f303 	mul.w	r3, r2, r3
 801706e:	3320      	adds	r3, #32
 8017070:	4a51      	ldr	r2, [pc, #324]	@ (80171b8 <HandleMSG+0x668>)
 8017072:	4413      	add	r3, r2
 8017074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017076:	3220      	adds	r2, #32
 8017078:	6879      	ldr	r1, [r7, #4]
 801707a:	440a      	add	r2, r1
 801707c:	3204      	adds	r2, #4
 801707e:	6812      	ldr	r2, [r2, #0]
 8017080:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 8017082:	4b4c      	ldr	r3, [pc, #304]	@ (80171b4 <HandleMSG+0x664>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	2234      	movs	r2, #52	@ 0x34
 8017088:	fb02 f303 	mul.w	r3, r2, r3
 801708c:	3320      	adds	r3, #32
 801708e:	4a4a      	ldr	r2, [pc, #296]	@ (80171b8 <HandleMSG+0x668>)
 8017090:	4413      	add	r3, r2
 8017092:	3304      	adds	r3, #4
 8017094:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017096:	3224      	adds	r2, #36	@ 0x24
 8017098:	6879      	ldr	r1, [r7, #4]
 801709a:	440a      	add	r2, r1
 801709c:	3204      	adds	r2, #4
 801709e:	6812      	ldr	r2, [r2, #0]
 80170a0:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 80170a2:	4b44      	ldr	r3, [pc, #272]	@ (80171b4 <HandleMSG+0x664>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2234      	movs	r2, #52	@ 0x34
 80170a8:	fb02 f303 	mul.w	r3, r2, r3
 80170ac:	3328      	adds	r3, #40	@ 0x28
 80170ae:	4a42      	ldr	r2, [pc, #264]	@ (80171b8 <HandleMSG+0x668>)
 80170b0:	4413      	add	r3, r2
 80170b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80170b4:	3228      	adds	r2, #40	@ 0x28
 80170b6:	6879      	ldr	r1, [r7, #4]
 80170b8:	440a      	add	r2, r1
 80170ba:	3204      	adds	r2, #4
 80170bc:	6812      	ldr	r2, [r2, #0]
 80170be:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 80170c0:	4b3c      	ldr	r3, [pc, #240]	@ (80171b4 <HandleMSG+0x664>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2234      	movs	r2, #52	@ 0x34
 80170c6:	fb02 f303 	mul.w	r3, r2, r3
 80170ca:	3328      	adds	r3, #40	@ 0x28
 80170cc:	4a3a      	ldr	r2, [pc, #232]	@ (80171b8 <HandleMSG+0x668>)
 80170ce:	4413      	add	r3, r2
 80170d0:	3304      	adds	r3, #4
 80170d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80170d4:	322c      	adds	r2, #44	@ 0x2c
 80170d6:	6879      	ldr	r1, [r7, #4]
 80170d8:	440a      	add	r2, r1
 80170da:	3204      	adds	r2, #4
 80170dc:	6812      	ldr	r2, [r2, #0]
 80170de:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 80170e0:	4b34      	ldr	r3, [pc, #208]	@ (80171b4 <HandleMSG+0x664>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2234      	movs	r2, #52	@ 0x34
 80170e6:	fb02 f303 	mul.w	r3, r2, r3
 80170ea:	3330      	adds	r3, #48	@ 0x30
 80170ec:	4a32      	ldr	r2, [pc, #200]	@ (80171b8 <HandleMSG+0x668>)
 80170ee:	4413      	add	r3, r2
 80170f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80170f2:	3230      	adds	r2, #48	@ 0x30
 80170f4:	6879      	ldr	r1, [r7, #4]
 80170f6:	440a      	add	r2, r1
 80170f8:	3204      	adds	r2, #4
 80170fa:	6812      	ldr	r2, [r2, #0]
 80170fc:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 80170fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017100:	3334      	adds	r3, #52	@ 0x34
 8017102:	657b      	str	r3, [r7, #84]	@ 0x54

        OfflineDataCount++;
 8017104:	4b2d      	ldr	r3, [pc, #180]	@ (80171bc <HandleMSG+0x66c>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	3301      	adds	r3, #1
 801710a:	4a2c      	ldr	r2, [pc, #176]	@ (80171bc <HandleMSG+0x66c>)
 801710c:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 801710e:	4b2b      	ldr	r3, [pc, #172]	@ (80171bc <HandleMSG+0x66c>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	2b08      	cmp	r3, #8
 8017114:	dd02      	ble.n	801711c <HandleMSG+0x5cc>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 8017116:	4b29      	ldr	r3, [pc, #164]	@ (80171bc <HandleMSG+0x66c>)
 8017118:	2208      	movs	r2, #8
 801711a:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 801711c:	4b25      	ldr	r3, [pc, #148]	@ (80171b4 <HandleMSG+0x664>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	3301      	adds	r3, #1
 8017122:	4a24      	ldr	r2, [pc, #144]	@ (80171b4 <HandleMSG+0x664>)
 8017124:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 8017126:	4b23      	ldr	r3, [pc, #140]	@ (80171b4 <HandleMSG+0x664>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	2b07      	cmp	r3, #7
 801712c:	dd02      	ble.n	8017134 <HandleMSG+0x5e4>
        {
          OfflineDataWriteIndex = 0;
 801712e:	4b21      	ldr	r3, [pc, #132]	@ (80171b4 <HandleMSG+0x664>)
 8017130:	2200      	movs	r2, #0
 8017132:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8017134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017136:	3301      	adds	r3, #1
 8017138:	65bb      	str	r3, [r7, #88]	@ 0x58
 801713a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801713c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801713e:	429a      	cmp	r2, r3
 8017140:	f4ff aeea 	bcc.w	8016f18 <HandleMSG+0x3c8>
        }
      }

      SensorReadRequest = 1;
 8017144:	4b1e      	ldr	r3, [pc, #120]	@ (80171c0 <HandleMSG+0x670>)
 8017146:	2201      	movs	r2, #1
 8017148:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 801714a:	6878      	ldr	r0, [r7, #4]
 801714c:	f7ff fccf 	bl	8016aee <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2203      	movs	r2, #3
 8017154:	601a      	str	r2, [r3, #0]
      break;
 8017156:	e078      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	2b03      	cmp	r3, #3
 801715e:	d801      	bhi.n	8017164 <HandleMSG+0x614>
      {
        return 0;
 8017160:	2300      	movs	r3, #0
 8017162:	e073      	b.n	801724c <HandleMSG+0x6fc>
      }

      if (Msg->Data[3] == 1U)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	79db      	ldrb	r3, [r3, #7]
 8017168:	2b01      	cmp	r3, #1
 801716a:	d10e      	bne.n	801718a <HandleMSG+0x63a>
      {
        UseOfflineData = 1U;
 801716c:	4b15      	ldr	r3, [pc, #84]	@ (80171c4 <HandleMSG+0x674>)
 801716e:	2201      	movs	r2, #1
 8017170:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 8017172:	4b15      	ldr	r3, [pc, #84]	@ (80171c8 <HandleMSG+0x678>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	4a15      	ldr	r2, [pc, #84]	@ (80171cc <HandleMSG+0x67c>)
 8017178:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 801717a:	4b13      	ldr	r3, [pc, #76]	@ (80171c8 <HandleMSG+0x678>)
 801717c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017180:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8017182:	4813      	ldr	r0, [pc, #76]	@ (80171d0 <HandleMSG+0x680>)
 8017184:	f7fd f8aa 	bl	80142dc <HAL_TIM_Base_Stop_IT>
 8017188:	e006      	b.n	8017198 <HandleMSG+0x648>
      }
      else
      {
        UseOfflineData = 0U;
 801718a:	4b0e      	ldr	r3, [pc, #56]	@ (80171c4 <HandleMSG+0x674>)
 801718c:	2200      	movs	r2, #0
 801718e:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8017190:	4b0e      	ldr	r3, [pc, #56]	@ (80171cc <HandleMSG+0x67c>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	4a0c      	ldr	r2, [pc, #48]	@ (80171c8 <HandleMSG+0x678>)
 8017196:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7ff fca8 	bl	8016aee <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	f7ff fa82 	bl	80166a8 <UART_SendMsg>
      break;
 80171a4:	e051      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2b02      	cmp	r3, #2
 80171ac:	d812      	bhi.n	80171d4 <HandleMSG+0x684>
      {
        return 0;
 80171ae:	2300      	movs	r3, #0
 80171b0:	e04c      	b.n	801724c <HandleMSG+0x6fc>
 80171b2:	bf00      	nop
 80171b4:	20000d9c 	.word	0x20000d9c
 80171b8:	20000bf8 	.word	0x20000bf8
 80171bc:	20000da0 	.word	0x20000da0
 80171c0:	20000bf4 	.word	0x20000bf4
 80171c4:	20000bf5 	.word	0x20000bf5
 80171c8:	20000bc8 	.word	0x20000bc8
 80171cc:	20001b24 	.word	0x20001b24
 80171d0:	20000ea8 	.word	0x20000ea8
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	3307      	adds	r3, #7
 80171d8:	4a1e      	ldr	r2, [pc, #120]	@ (8017254 <HandleMSG+0x704>)
 80171da:	6812      	ldr	r2, [r2, #0]
 80171dc:	4611      	mov	r1, r2
 80171de:	2204      	movs	r2, #4
 80171e0:	4618      	mov	r0, r3
 80171e2:	f000 fbc4 	bl	801796e <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	330b      	adds	r3, #11
 80171ea:	2201      	movs	r2, #1
 80171ec:	2130      	movs	r1, #48	@ 0x30
 80171ee:	4618      	mov	r0, r3
 80171f0:	f000 fbbd 	bl	801796e <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f7ff fc7a 	bl	8016aee <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	2208      	movs	r2, #8
 80171fe:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f7ff fa51 	bl	80166a8 <UART_SendMsg>
      break;
 8017206:	e020      	b.n	801724a <HandleMSG+0x6fa>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	2b02      	cmp	r3, #2
 801720e:	d801      	bhi.n	8017214 <HandleMSG+0x6c4>
      {
        return 0;
 8017210:	2300      	movs	r3, #0
 8017212:	e01b      	b.n	801724c <HandleMSG+0x6fc>
      }

      Enabled6X = Msg->Data[3];
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	79da      	ldrb	r2, [r3, #7]
 8017218:	4b0f      	ldr	r3, [pc, #60]	@ (8017258 <HandleMSG+0x708>)
 801721a:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 801721c:	4b0e      	ldr	r3, [pc, #56]	@ (8017258 <HandleMSG+0x708>)
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	2b01      	cmp	r3, #1
 8017222:	d104      	bne.n	801722e <HandleMSG+0x6de>
      {
        MotionFX_manager_stop_9X();
 8017224:	f000 fa68 	bl	80176f8 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 8017228:	f000 fa48 	bl	80176bc <MotionFX_manager_start_6X>
 801722c:	e003      	b.n	8017236 <HandleMSG+0x6e6>
      }
      else
      {
        MotionFX_manager_stop_6X();
 801722e:	f000 fa4f 	bl	80176d0 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 8017232:	f000 fa57 	bl	80176e4 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f7ff fc59 	bl	8016aee <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 801723c:	6878      	ldr	r0, [r7, #4]
 801723e:	f7ff fa33 	bl	80166a8 <UART_SendMsg>
      break;
 8017242:	e002      	b.n	801724a <HandleMSG+0x6fa>

    default:
      ret = 0;
 8017244:	2300      	movs	r3, #0
 8017246:	65fb      	str	r3, [r7, #92]	@ 0x5c
      break;
 8017248:	bf00      	nop
  }

  return ret;
 801724a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801724c:	4618      	mov	r0, r3
 801724e:	3760      	adds	r7, #96	@ 0x60
 8017250:	46bd      	mov	sp, r7
 8017252:	bd80      	pop	{r7, pc}
 8017254:	20000004 	.word	0x20000004
 8017258:	20000da4 	.word	0x20000da4

0801725c <RTC_DateRegulate>:
  * @param  d the day value to be set
  * @param  dw the day-week value to be set
  * @retval None
  */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 801725c:	b590      	push	{r4, r7, lr}
 801725e:	b085      	sub	sp, #20
 8017260:	af00      	add	r7, sp, #0
 8017262:	4604      	mov	r4, r0
 8017264:	4608      	mov	r0, r1
 8017266:	4611      	mov	r1, r2
 8017268:	461a      	mov	r2, r3
 801726a:	4623      	mov	r3, r4
 801726c:	71fb      	strb	r3, [r7, #7]
 801726e:	4603      	mov	r3, r0
 8017270:	71bb      	strb	r3, [r7, #6]
 8017272:	460b      	mov	r3, r1
 8017274:	717b      	strb	r3, [r7, #5]
 8017276:	4613      	mov	r3, r2
 8017278:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 801727a:	79fb      	ldrb	r3, [r7, #7]
 801727c:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 801727e:	79bb      	ldrb	r3, [r7, #6]
 8017280:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 8017282:	797b      	ldrb	r3, [r7, #5]
 8017284:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 8017286:	793b      	ldrb	r3, [r7, #4]
 8017288:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 801728a:	f107 030c 	add.w	r3, r7, #12
 801728e:	2200      	movs	r2, #0
 8017290:	4619      	mov	r1, r3
 8017292:	4806      	ldr	r0, [pc, #24]	@ (80172ac <RTC_DateRegulate+0x50>)
 8017294:	f7fc fddf 	bl	8013e56 <HAL_RTC_SetDate>
 8017298:	4603      	mov	r3, r0
 801729a:	2b00      	cmp	r3, #0
 801729c:	d001      	beq.n	80172a2 <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 801729e:	f7ed feed 	bl	800507c <Error_Handler>
  }
}
 80172a2:	bf00      	nop
 80172a4:	3714      	adds	r7, #20
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd90      	pop	{r4, r7, pc}
 80172aa:	bf00      	nop
 80172ac:	20000df8 	.word	0x20000df8

080172b0 <RTC_TimeRegulate>:
  * @param  mm the minute value to be set
  * @param  ss the second value to be set
  * @retval None
  */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b088      	sub	sp, #32
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	4603      	mov	r3, r0
 80172b8:	71fb      	strb	r3, [r7, #7]
 80172ba:	460b      	mov	r3, r1
 80172bc:	71bb      	strb	r3, [r7, #6]
 80172be:	4613      	mov	r3, r2
 80172c0:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 80172c2:	79fb      	ldrb	r3, [r7, #7]
 80172c4:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 80172c6:	79bb      	ldrb	r3, [r7, #6]
 80172c8:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 80172ca:	797b      	ldrb	r3, [r7, #5]
 80172cc:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 80172ce:	2300      	movs	r3, #0
 80172d0:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 80172d2:	2300      	movs	r3, #0
 80172d4:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80172d6:	2300      	movs	r3, #0
 80172d8:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80172da:	2300      	movs	r3, #0
 80172dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 80172de:	f107 030c 	add.w	r3, r7, #12
 80172e2:	2200      	movs	r2, #0
 80172e4:	4619      	mov	r1, r3
 80172e6:	4806      	ldr	r0, [pc, #24]	@ (8017300 <RTC_TimeRegulate+0x50>)
 80172e8:	f7fc fcbd 	bl	8013c66 <HAL_RTC_SetTime>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d001      	beq.n	80172f6 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80172f2:	f7ed fec3 	bl	800507c <Error_Handler>
  }
}
 80172f6:	bf00      	nop
 80172f8:	3720      	adds	r7, #32
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	20000df8 	.word	0x20000df8

08017304 <Get_PresentationString>:
  * @param  PresentationString the Presentation string
  * @param  Length the length of Presentation string
  * @retval None
  */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 8017304:	b5b0      	push	{r4, r5, r7, lr}
 8017306:	b09e      	sub	sp, #120	@ 0x78
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 801730e:	230d      	movs	r3, #13
 8017310:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 8017314:	2300      	movs	r3, #0
 8017316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 8017318:	4b17      	ldr	r3, [pc, #92]	@ (8017378 <Get_PresentationString+0x74>)
 801731a:	f107 0408 	add.w	r4, r7, #8
 801731e:	461d      	mov	r5, r3
 8017320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017328:	682b      	ldr	r3, [r5, #0]
 801732a:	6023      	str	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 801732c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8017330:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017334:	4611      	mov	r1, r2
 8017336:	4618      	mov	r0, r3
 8017338:	f000 f9e8 	bl	801770c <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0 resp. ST InfraredXX v1.0.0 resp. ST EnvXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 801733c:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8017340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017342:	429a      	cmp	r2, r3
 8017344:	da06      	bge.n	8017354 <Get_PresentationString+0x50>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 8017346:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801734a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801734e:	4413      	add	r3, r2
 8017350:	677b      	str	r3, [r7, #116]	@ 0x74
 8017352:	e002      	b.n	801735a <Get_PresentationString+0x56>
  }
  else
  {
    lib_version_num = lib_version_string;
 8017354:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017358:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 801735a:	f107 0208 	add.w	r2, r7, #8
 801735e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017360:	2140      	movs	r1, #64	@ 0x40
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f00a f960 	bl	8021628 <sniprintf>
 8017368:	4603      	mov	r3, r0
 801736a:	461a      	mov	r2, r3
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	601a      	str	r2, [r3, #0]
}
 8017370:	bf00      	nop
 8017372:	3778      	adds	r7, #120	@ 0x78
 8017374:	46bd      	mov	sp, r7
 8017376:	bdb0      	pop	{r4, r5, r7, pc}
 8017378:	080267e0 	.word	0x080267e0

0801737c <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO);
 8017380:	2102      	movs	r1, #2
 8017382:	2001      	movs	r0, #1
 8017384:	f7f6 fc0c 	bl	800dba0 <IKS4A1_MOTION_SENSOR_Init>
}
 8017388:	bf00      	nop
 801738a:	bd80      	pop	{r7, pc}

0801738c <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_GYRO);
 8017390:	2101      	movs	r1, #1
 8017392:	2001      	movs	r0, #1
 8017394:	f7f6 fc04 	bl	800dba0 <IKS4A1_MOTION_SENSOR_Init>
}
 8017398:	bf00      	nop
 801739a:	bd80      	pop	{r7, pc}

0801739c <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 80173a0:	2104      	movs	r1, #4
 80173a2:	2000      	movs	r0, #0
 80173a4:	f7f6 fbfc 	bl	800dba0 <IKS4A1_MOTION_SENSOR_Init>
}
 80173a8:	bf00      	nop
 80173aa:	bd80      	pop	{r7, pc}

080173ac <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_PRESSURE);
 80173b0:	2102      	movs	r1, #2
 80173b2:	2001      	movs	r0, #1
 80173b4:	f7f5 ffce 	bl	800d354 <IKS4A1_ENV_SENSOR_Init>
}
 80173b8:	bf00      	nop
 80173ba:	bd80      	pop	{r7, pc}

080173bc <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 80173c0:	2101      	movs	r1, #1
 80173c2:	2000      	movs	r0, #0
 80173c4:	f7f5 ffc6 	bl	800d354 <IKS4A1_ENV_SENSOR_Init>
}
 80173c8:	bf00      	nop
 80173ca:	bd80      	pop	{r7, pc}

080173cc <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_HUMIDITY);
 80173d0:	2104      	movs	r1, #4
 80173d2:	2002      	movs	r0, #2
 80173d4:	f7f5 ffbe 	bl	800d354 <IKS4A1_ENV_SENSOR_Init>
}
 80173d8:	bf00      	nop
 80173da:	bd80      	pop	{r7, pc}

080173dc <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Enable(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO);
 80173e0:	2102      	movs	r1, #2
 80173e2:	2001      	movs	r0, #1
 80173e4:	f7f6 fd0e 	bl	800de04 <IKS4A1_MOTION_SENSOR_Enable>
}
 80173e8:	bf00      	nop
 80173ea:	bd80      	pop	{r7, pc}

080173ec <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Enable(IKS4A1_LSM6DSV16X_0, MOTION_GYRO);
 80173f0:	2101      	movs	r1, #1
 80173f2:	2001      	movs	r0, #1
 80173f4:	f7f6 fd06 	bl	800de04 <IKS4A1_MOTION_SENSOR_Enable>
}
 80173f8:	bf00      	nop
 80173fa:	bd80      	pop	{r7, pc}

080173fc <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Enable(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8017400:	2104      	movs	r1, #4
 8017402:	2000      	movs	r0, #0
 8017404:	f7f6 fcfe 	bl	800de04 <IKS4A1_MOTION_SENSOR_Enable>
}
 8017408:	bf00      	nop
 801740a:	bd80      	pop	{r7, pc}

0801740c <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Enable(IKS4A1_LPS22DF_0, ENV_PRESSURE);
 8017410:	2102      	movs	r1, #2
 8017412:	2001      	movs	r0, #1
 8017414:	f7f6 f8ac 	bl	800d570 <IKS4A1_ENV_SENSOR_Enable>
}
 8017418:	bf00      	nop
 801741a:	bd80      	pop	{r7, pc}

0801741c <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Enable(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8017420:	2101      	movs	r1, #1
 8017422:	2000      	movs	r0, #0
 8017424:	f7f6 f8a4 	bl	800d570 <IKS4A1_ENV_SENSOR_Enable>
}
 8017428:	bf00      	nop
 801742a:	bd80      	pop	{r7, pc}

0801742c <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Enable(IKS4A1_SHT40AD1B_0, ENV_HUMIDITY);
 8017430:	2104      	movs	r1, #4
 8017432:	2002      	movs	r0, #2
 8017434:	f7f6 f89c 	bl	800d570 <IKS4A1_ENV_SENSOR_Enable>
}
 8017438:	bf00      	nop
 801743a:	bd80      	pop	{r7, pc}

0801743c <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Disable(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO);
 8017440:	2102      	movs	r1, #2
 8017442:	2001      	movs	r0, #1
 8017444:	f7f6 fd20 	bl	800de88 <IKS4A1_MOTION_SENSOR_Disable>
}
 8017448:	bf00      	nop
 801744a:	bd80      	pop	{r7, pc}

0801744c <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Disable(IKS4A1_LSM6DSV16X_0, MOTION_GYRO);
 8017450:	2101      	movs	r1, #1
 8017452:	2001      	movs	r0, #1
 8017454:	f7f6 fd18 	bl	800de88 <IKS4A1_MOTION_SENSOR_Disable>
}
 8017458:	bf00      	nop
 801745a:	bd80      	pop	{r7, pc}

0801745c <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Disable(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8017460:	2104      	movs	r1, #4
 8017462:	2000      	movs	r0, #0
 8017464:	f7f6 fd10 	bl	800de88 <IKS4A1_MOTION_SENSOR_Disable>
}
 8017468:	bf00      	nop
 801746a:	bd80      	pop	{r7, pc}

0801746c <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Disable(IKS4A1_LPS22DF_0, ENV_PRESSURE);
 8017470:	2102      	movs	r1, #2
 8017472:	2001      	movs	r0, #1
 8017474:	f7f6 f8bc 	bl	800d5f0 <IKS4A1_ENV_SENSOR_Disable>
}
 8017478:	bf00      	nop
 801747a:	bd80      	pop	{r7, pc}

0801747c <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Disable(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8017480:	2101      	movs	r1, #1
 8017482:	2000      	movs	r0, #0
 8017484:	f7f6 f8b4 	bl	800d5f0 <IKS4A1_ENV_SENSOR_Disable>
}
 8017488:	bf00      	nop
 801748a:	bd80      	pop	{r7, pc}

0801748c <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Disable(IKS4A1_SHT40AD1B_0, ENV_HUMIDITY);
 8017490:	2104      	movs	r1, #4
 8017492:	2002      	movs	r0, #2
 8017494:	f7f6 f8ac 	bl	800d5f0 <IKS4A1_ENV_SENSOR_Disable>
}
 8017498:	bf00      	nop
 801749a:	bd80      	pop	{r7, pc}

0801749c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, Axes);
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	2102      	movs	r1, #2
 80174a8:	2001      	movs	r0, #1
 80174aa:	f7f6 fd2f 	bl	800df0c <IKS4A1_MOTION_SENSOR_GetAxes>
}
 80174ae:	bf00      	nop
 80174b0:	3708      	adds	r7, #8
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 80174b6:	b580      	push	{r7, lr}
 80174b8:	b082      	sub	sp, #8
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LSM6DSV16X_0, MOTION_GYRO, Axes);
 80174be:	687a      	ldr	r2, [r7, #4]
 80174c0:	2101      	movs	r1, #1
 80174c2:	2001      	movs	r0, #1
 80174c4:	f7f6 fd22 	bl	800df0c <IKS4A1_MOTION_SENSOR_GetAxes>
}
 80174c8:	bf00      	nop
 80174ca:	3708      	adds	r7, #8
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b082      	sub	sp, #8
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LIS2MDL_0, MOTION_MAGNETO, Axes);
 80174d8:	687a      	ldr	r2, [r7, #4]
 80174da:	2104      	movs	r1, #4
 80174dc:	2000      	movs	r0, #0
 80174de:	f7f6 fd15 	bl	800df0c <IKS4A1_MOTION_SENSOR_GetAxes>
}
 80174e2:	bf00      	nop
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}

080174ea <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b082      	sub	sp, #8
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_ENV_SENSOR_GetValue(IKS4A1_STTS22H_0, ENV_TEMPERATURE, Value);
 80174f2:	687a      	ldr	r2, [r7, #4]
 80174f4:	2101      	movs	r1, #1
 80174f6:	2000      	movs	r0, #0
 80174f8:	f7f6 f8ba 	bl	800d670 <IKS4A1_ENV_SENSOR_GetValue>
}
 80174fc:	bf00      	nop
 80174fe:	3708      	adds	r7, #8
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}

08017504 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_ENV_SENSOR_GetValue(IKS4A1_SHT40AD1B_0, ENV_HUMIDITY, Value);
 801750c:	687a      	ldr	r2, [r7, #4]
 801750e:	2104      	movs	r1, #4
 8017510:	2002      	movs	r0, #2
 8017512:	f7f6 f8ad 	bl	800d670 <IKS4A1_ENV_SENSOR_GetValue>
}
 8017516:	bf00      	nop
 8017518:	3708      	adds	r7, #8
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 801751e:	b580      	push	{r7, lr}
 8017520:	b082      	sub	sp, #8
 8017522:	af00      	add	r7, sp, #0
 8017524:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_SetOutputDataRate(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, Odr);
 8017528:	ed97 0a01 	vldr	s0, [r7, #4]
 801752c:	2102      	movs	r1, #2
 801752e:	2001      	movs	r0, #1
 8017530:	f7f6 fd30 	bl	800df94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
}
 8017534:	bf00      	nop
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_SetFullScale(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, Fullscale);
 8017544:	687a      	ldr	r2, [r7, #4]
 8017546:	2102      	movs	r1, #2
 8017548:	2001      	movs	r0, #1
 801754a:	f7f6 fd69 	bl	800e020 <IKS4A1_MOTION_SENSOR_SetFullScale>
}
 801754e:	bf00      	nop
 8017550:	3708      	adds	r7, #8
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}

08017556 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8017556:	b480      	push	{r7}
 8017558:	b083      	sub	sp, #12
 801755a:	af00      	add	r7, sp, #0
 801755c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2273      	movs	r2, #115	@ 0x73
 8017562:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	3301      	adds	r3, #1
 8017568:	2265      	movs	r2, #101	@ 0x65
 801756a:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	3302      	adds	r3, #2
 8017570:	2275      	movs	r2, #117	@ 0x75
 8017572:	701a      	strb	r2, [r3, #0]
}
 8017574:	bf00      	nop
 8017576:	370c      	adds	r7, #12
 8017578:	46bd      	mov	sp, r7
 801757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757e:	4770      	bx	lr

08017580 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8017580:	b480      	push	{r7}
 8017582:	b083      	sub	sp, #12
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2273      	movs	r2, #115	@ 0x73
 801758c:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	3301      	adds	r3, #1
 8017592:	2265      	movs	r2, #101	@ 0x65
 8017594:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	3302      	adds	r3, #2
 801759a:	2275      	movs	r2, #117	@ 0x75
 801759c:	701a      	strb	r2, [r3, #0]
}
 801759e:	bf00      	nop
 80175a0:	370c      	adds	r7, #12
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr

080175aa <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 80175aa:	b480      	push	{r7}
 80175ac:	b083      	sub	sp, #12
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	226e      	movs	r2, #110	@ 0x6e
 80175b6:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	3301      	adds	r3, #1
 80175bc:	2265      	movs	r2, #101	@ 0x65
 80175be:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	3302      	adds	r3, #2
 80175c4:	2275      	movs	r2, #117	@ 0x75
 80175c6:	701a      	strb	r2, [r3, #0]
}
 80175c8:	bf00      	nop
 80175ca:	370c      	adds	r7, #12
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 80175d8:	f009 fa2a 	bl	8020a30 <MotionFX_GetStateSize>
 80175dc:	4603      	mov	r3, r0
 80175de:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 80175e2:	d901      	bls.n	80175e8 <MotionFX_manager_init+0x14>
    Error_Handler();
 80175e4:	f7ed fd4a 	bl	800507c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 80175e8:	4821      	ldr	r0, [pc, #132]	@ (8017670 <MotionFX_manager_init+0x9c>)
 80175ea:	f009 fa25 	bl	8020a38 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 80175ee:	4b21      	ldr	r3, [pc, #132]	@ (8017674 <MotionFX_manager_init+0xa0>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	4619      	mov	r1, r3
 80175f4:	481e      	ldr	r0, [pc, #120]	@ (8017670 <MotionFX_manager_init+0x9c>)
 80175f6:	f009 fb25 	bl	8020c44 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 80175fa:	4b1e      	ldr	r3, [pc, #120]	@ (8017674 <MotionFX_manager_init+0xa0>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	331d      	adds	r3, #29
 8017600:	4618      	mov	r0, r3
 8017602:	f7ff ffa8 	bl	8017556 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8017606:	4b1b      	ldr	r3, [pc, #108]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	3321      	adds	r3, #33	@ 0x21
 801760c:	4618      	mov	r0, r3
 801760e:	f7ff ffb7 	bl	8017580 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8017612:	4b18      	ldr	r3, [pc, #96]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	3325      	adds	r3, #37	@ 0x25
 8017618:	4618      	mov	r0, r3
 801761a:	f7ff ffc6 	bl	80175aa <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 801761e:	4b15      	ldr	r3, [pc, #84]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	4a15      	ldr	r2, [pc, #84]	@ (8017678 <MotionFX_manager_init+0xa4>)
 8017624:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8017626:	4b13      	ldr	r3, [pc, #76]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	4a14      	ldr	r2, [pc, #80]	@ (801767c <MotionFX_manager_init+0xa8>)
 801762c:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 801762e:	4b11      	ldr	r3, [pc, #68]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	4a13      	ldr	r2, [pc, #76]	@ (8017680 <MotionFX_manager_init+0xac>)
 8017634:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8017636:	4b0f      	ldr	r3, [pc, #60]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	2201      	movs	r2, #1
 801763c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  ipKnobs->LMode = 1;
 8017640:	4b0c      	ldr	r3, [pc, #48]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	2201      	movs	r2, #1
 8017646:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8017648:	4b0a      	ldr	r3, [pc, #40]	@ (8017674 <MotionFX_manager_init+0xa0>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2201      	movs	r2, #1
 801764e:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8017650:	4b08      	ldr	r3, [pc, #32]	@ (8017674 <MotionFX_manager_init+0xa0>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	4619      	mov	r1, r3
 8017656:	4806      	ldr	r0, [pc, #24]	@ (8017670 <MotionFX_manager_init+0x9c>)
 8017658:	f009 faa8 	bl	8020bac <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 801765c:	2100      	movs	r1, #0
 801765e:	4804      	ldr	r0, [pc, #16]	@ (8017670 <MotionFX_manager_init+0x9c>)
 8017660:	f009 fb2e 	bl	8020cc0 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8017664:	2100      	movs	r1, #0
 8017666:	4802      	ldr	r0, [pc, #8]	@ (8017670 <MotionFX_manager_init+0x9c>)
 8017668:	f009 fb4a 	bl	8020d00 <MotionFX_enable_9X>
}
 801766c:	bf00      	nop
 801766e:	bd80      	pop	{r7, pc}
 8017670:	20001b58 	.word	0x20001b58
 8017674:	200002e8 	.word	0x200002e8
 8017678:	3ac88a48 	.word	0x3ac88a48
 801767c:	3b83126f 	.word	0x3b83126f
 8017680:	3b449ba6 	.word	0x3b449ba6

08017684 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b086      	sub	sp, #24
 8017688:	af02      	add	r7, sp, #8
 801768a:	60f8      	str	r0, [r7, #12]
 801768c:	60b9      	str	r1, [r7, #8]
 801768e:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8017692:	1d3b      	adds	r3, r7, #4
 8017694:	68fa      	ldr	r2, [r7, #12]
 8017696:	68b9      	ldr	r1, [r7, #8]
 8017698:	4807      	ldr	r0, [pc, #28]	@ (80176b8 <MotionFX_manager_run+0x34>)
 801769a:	f009 fb61 	bl	8020d60 <MotionFX_propagate>
  MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 801769e:	1d3b      	adds	r3, r7, #4
 80176a0:	2200      	movs	r2, #0
 80176a2:	9200      	str	r2, [sp, #0]
 80176a4:	68fa      	ldr	r2, [r7, #12]
 80176a6:	68b9      	ldr	r1, [r7, #8]
 80176a8:	4803      	ldr	r0, [pc, #12]	@ (80176b8 <MotionFX_manager_run+0x34>)
 80176aa:	f009 fb49 	bl	8020d40 <MotionFX_update>
}
 80176ae:	bf00      	nop
 80176b0:	3710      	adds	r7, #16
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}
 80176b6:	bf00      	nop
 80176b8:	20001b58 	.word	0x20001b58

080176bc <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80176c0:	2101      	movs	r1, #1
 80176c2:	4802      	ldr	r0, [pc, #8]	@ (80176cc <MotionFX_manager_start_6X+0x10>)
 80176c4:	f009 fafc 	bl	8020cc0 <MotionFX_enable_6X>
}
 80176c8:	bf00      	nop
 80176ca:	bd80      	pop	{r7, pc}
 80176cc:	20001b58 	.word	0x20001b58

080176d0 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80176d4:	2100      	movs	r1, #0
 80176d6:	4802      	ldr	r0, [pc, #8]	@ (80176e0 <MotionFX_manager_stop_6X+0x10>)
 80176d8:	f009 faf2 	bl	8020cc0 <MotionFX_enable_6X>
}
 80176dc:	bf00      	nop
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	20001b58 	.word	0x20001b58

080176e4 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80176e8:	2101      	movs	r1, #1
 80176ea:	4802      	ldr	r0, [pc, #8]	@ (80176f4 <MotionFX_manager_start_9X+0x10>)
 80176ec:	f009 fb08 	bl	8020d00 <MotionFX_enable_9X>
}
 80176f0:	bf00      	nop
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	20001b58 	.word	0x20001b58

080176f8 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80176fc:	2100      	movs	r1, #0
 80176fe:	4802      	ldr	r0, [pc, #8]	@ (8017708 <MotionFX_manager_stop_9X+0x10>)
 8017700:	f009 fafe 	bl	8020d00 <MotionFX_enable_9X>
}
 8017704:	bf00      	nop
 8017706:	bd80      	pop	{r7, pc}
 8017708:	20001b58 	.word	0x20001b58

0801770c <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f009 ff5a 	bl	80215d0 <MotionFX_GetLibVersion>
 801771c:	4603      	mov	r3, r0
 801771e:	461a      	mov	r2, r3
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	601a      	str	r2, [r3, #0]
}
 8017724:	bf00      	nop
 8017726:	3708      	adds	r7, #8
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}

0801772c <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f009 fcf2 	bl	8021120 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 801773c:	6838      	ldr	r0, [r7, #0]
 801773e:	f009 ff01 	bl	8021544 <MotionFX_MagCal_getParams>
}
 8017742:	bf00      	nop
 8017744:	3708      	adds	r7, #8
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}

0801774a <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 801774a:	b580      	push	{r7, lr}
 801774c:	b082      	sub	sp, #8
 801774e:	af00      	add	r7, sp, #0
 8017750:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8017752:	2101      	movs	r1, #1
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f009 fc53 	bl	8021000 <MotionFX_MagCal_init>
}
 801775a:	bf00      	nop
 801775c:	3708      	adds	r7, #8
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8017762:	b580      	push	{r7, lr}
 8017764:	b082      	sub	sp, #8
 8017766:	af00      	add	r7, sp, #0
 8017768:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 801776a:	2100      	movs	r1, #0
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	f009 fc47 	bl	8021000 <MotionFX_MagCal_init>
}
 8017772:	bf00      	nop
 8017774:	3708      	adds	r7, #8
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}

0801777a <ByteStuffCopyByte>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 801777a:	b480      	push	{r7}
 801777c:	b085      	sub	sp, #20
 801777e:	af00      	add	r7, sp, #0
 8017780:	6078      	str	r0, [r7, #4]
 8017782:	460b      	mov	r3, r1
 8017784:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8017786:	2302      	movs	r3, #2
 8017788:	60fb      	str	r3, [r7, #12]

  switch (Source)
 801778a:	78fb      	ldrb	r3, [r7, #3]
 801778c:	2bf0      	cmp	r3, #240	@ 0xf0
 801778e:	d002      	beq.n	8017796 <ByteStuffCopyByte+0x1c>
 8017790:	2bf1      	cmp	r3, #241	@ 0xf1
 8017792:	d008      	beq.n	80177a6 <ByteStuffCopyByte+0x2c>
 8017794:	e00f      	b.n	80177b6 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	22f1      	movs	r2, #241	@ 0xf1
 801779a:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	3301      	adds	r3, #1
 80177a0:	22f2      	movs	r2, #242	@ 0xf2
 80177a2:	701a      	strb	r2, [r3, #0]
      break;
 80177a4:	e00d      	b.n	80177c2 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	22f1      	movs	r2, #241	@ 0xf1
 80177aa:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	3301      	adds	r3, #1
 80177b0:	22f1      	movs	r2, #241	@ 0xf1
 80177b2:	701a      	strb	r2, [r3, #0]
      break;
 80177b4:	e005      	b.n	80177c2 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	78fa      	ldrb	r2, [r7, #3]
 80177ba:	701a      	strb	r2, [r3, #0]
      ret = 1;
 80177bc:	2301      	movs	r3, #1
 80177be:	60fb      	str	r3, [r7, #12]
      break;
 80177c0:	bf00      	nop
  }

  return ret;
 80177c2:	68fb      	ldr	r3, [r7, #12]
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	3714      	adds	r7, #20
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr

080177d0 <ByteStuffCopy>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b084      	sub	sp, #16
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
 80177d8:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 80177da:	2300      	movs	r3, #0
 80177dc:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 80177de:	2300      	movs	r3, #0
 80177e0:	60fb      	str	r3, [r7, #12]
 80177e2:	e011      	b.n	8017808 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	18d0      	adds	r0, r2, r3
 80177ea:	683a      	ldr	r2, [r7, #0]
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	4413      	add	r3, r2
 80177f0:	3304      	adds	r3, #4
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	4619      	mov	r1, r3
 80177f6:	f7ff ffc0 	bl	801777a <ByteStuffCopyByte>
 80177fa:	4602      	mov	r2, r0
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	4413      	add	r3, r2
 8017800:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	3301      	adds	r3, #1
 8017806:	60fb      	str	r3, [r7, #12]
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	68fa      	ldr	r2, [r7, #12]
 801780e:	429a      	cmp	r2, r3
 8017810:	d3e8      	bcc.n	80177e4 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8017812:	68bb      	ldr	r3, [r7, #8]
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	4413      	add	r3, r2
 8017818:	22f0      	movs	r2, #240	@ 0xf0
 801781a:	701a      	strb	r2, [r3, #0]
  count++;
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	3301      	adds	r3, #1
 8017820:	60bb      	str	r3, [r7, #8]
  return count;
 8017822:	68bb      	ldr	r3, [r7, #8]
}
 8017824:	4618      	mov	r0, r3
 8017826:	3710      	adds	r7, #16
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}

0801782c <ReverseByteStuffCopyByte2>:
  * @param  Source1 input data
  * @param  Dest the destination data
  * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
  */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	4603      	mov	r3, r0
 8017834:	603a      	str	r2, [r7, #0]
 8017836:	71fb      	strb	r3, [r7, #7]
 8017838:	460b      	mov	r3, r1
 801783a:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 801783c:	79fb      	ldrb	r3, [r7, #7]
 801783e:	2bf1      	cmp	r3, #241	@ 0xf1
 8017840:	d111      	bne.n	8017866 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 8017842:	79bb      	ldrb	r3, [r7, #6]
 8017844:	2bf1      	cmp	r3, #241	@ 0xf1
 8017846:	d104      	bne.n	8017852 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	22f1      	movs	r2, #241	@ 0xf1
 801784c:	701a      	strb	r2, [r3, #0]
      return 2;
 801784e:	2302      	movs	r3, #2
 8017850:	e00d      	b.n	801786e <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 8017852:	79bb      	ldrb	r3, [r7, #6]
 8017854:	2bf2      	cmp	r3, #242	@ 0xf2
 8017856:	d104      	bne.n	8017862 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	22f0      	movs	r2, #240	@ 0xf0
 801785c:	701a      	strb	r2, [r3, #0]
      return 2;
 801785e:	2302      	movs	r3, #2
 8017860:	e005      	b.n	801786e <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8017862:	2300      	movs	r3, #0
 8017864:	e003      	b.n	801786e <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	79fa      	ldrb	r2, [r7, #7]
 801786a:	701a      	strb	r2, [r3, #0]
    return 1;
 801786c:	2301      	movs	r3, #1
  }
}
 801786e:	4618      	mov	r0, r3
 8017870:	370c      	adds	r7, #12
 8017872:	46bd      	mov	sp, r7
 8017874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017878:	4770      	bx	lr

0801787a <CHK_ComputeAndAdd>:
  * @brief  Compute and add checksum
  * @param  Msg pointer to the message
  * @retval None
  */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 801787a:	b480      	push	{r7}
 801787c:	b085      	sub	sp, #20
 801787e:	af00      	add	r7, sp, #0
 8017880:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8017882:	2300      	movs	r3, #0
 8017884:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8017886:	2300      	movs	r3, #0
 8017888:	60bb      	str	r3, [r7, #8]
 801788a:	e00a      	b.n	80178a2 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 801788c:	687a      	ldr	r2, [r7, #4]
 801788e:	68bb      	ldr	r3, [r7, #8]
 8017890:	4413      	add	r3, r2
 8017892:	3304      	adds	r3, #4
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	7bfa      	ldrb	r2, [r7, #15]
 8017898:	1ad3      	subs	r3, r2, r3
 801789a:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	3301      	adds	r3, #1
 80178a0:	60bb      	str	r3, [r7, #8]
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	68ba      	ldr	r2, [r7, #8]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d3ef      	bcc.n	801788c <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 80178ac:	687a      	ldr	r2, [r7, #4]
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	4413      	add	r3, r2
 80178b2:	3304      	adds	r3, #4
 80178b4:	7bfa      	ldrb	r2, [r7, #15]
 80178b6:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	1c5a      	adds	r2, r3, #1
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	601a      	str	r2, [r3, #0]
}
 80178c2:	bf00      	nop
 80178c4:	3714      	adds	r7, #20
 80178c6:	46bd      	mov	sp, r7
 80178c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178cc:	4770      	bx	lr

080178ce <CHK_CheckAndRemove>:
  * @brief  Compute and remove checksum
  * @param  Msg pointer to the message
  * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
  */
int CHK_CheckAndRemove(TMsg *Msg)
{
 80178ce:	b480      	push	{r7}
 80178d0:	b085      	sub	sp, #20
 80178d2:	af00      	add	r7, sp, #0
 80178d4:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 80178da:	2300      	movs	r3, #0
 80178dc:	60bb      	str	r3, [r7, #8]
 80178de:	e00a      	b.n	80178f6 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	4413      	add	r3, r2
 80178e6:	3304      	adds	r3, #4
 80178e8:	781a      	ldrb	r2, [r3, #0]
 80178ea:	7bfb      	ldrb	r3, [r7, #15]
 80178ec:	4413      	add	r3, r2
 80178ee:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	3301      	adds	r3, #1
 80178f4:	60bb      	str	r3, [r7, #8]
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	68ba      	ldr	r2, [r7, #8]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d3ef      	bcc.n	80178e0 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	1e5a      	subs	r2, r3, #1
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 801790a:	7bfb      	ldrb	r3, [r7, #15]
 801790c:	2b00      	cmp	r3, #0
 801790e:	bf0c      	ite	eq
 8017910:	2301      	moveq	r3, #1
 8017912:	2300      	movne	r3, #0
 8017914:	b2db      	uxtb	r3, r3
}
 8017916:	4618      	mov	r0, r3
 8017918:	3714      	adds	r7, #20
 801791a:	46bd      	mov	sp, r7
 801791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017920:	4770      	bx	lr

08017922 <Deserialize>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval Rebuild unsigned int variable
  */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 8017922:	b480      	push	{r7}
 8017924:	b085      	sub	sp, #20
 8017926:	af00      	add	r7, sp, #0
 8017928:	6078      	str	r0, [r7, #4]
 801792a:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	3b01      	subs	r3, #1
 8017930:	603b      	str	r3, [r7, #0]
 8017932:	687a      	ldr	r2, [r7, #4]
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	4413      	add	r3, r2
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 801793c:	e00d      	b.n	801795a <Deserialize+0x38>
  {
    app <<= 8;
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	021b      	lsls	r3, r3, #8
 8017942:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	3b01      	subs	r3, #1
 8017948:	603b      	str	r3, [r7, #0]
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	4413      	add	r3, r2
 8017950:	781b      	ldrb	r3, [r3, #0]
 8017952:	461a      	mov	r2, r3
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	4413      	add	r3, r2
 8017958:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d1ee      	bne.n	801793e <Deserialize+0x1c>
  }

  return app;
 8017960:	68fb      	ldr	r3, [r7, #12]
}
 8017962:	4618      	mov	r0, r3
 8017964:	3714      	adds	r7, #20
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr

0801796e <Serialize_s32>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval None
  */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 801796e:	b480      	push	{r7}
 8017970:	b087      	sub	sp, #28
 8017972:	af00      	add	r7, sp, #0
 8017974:	60f8      	str	r0, [r7, #12]
 8017976:	60b9      	str	r1, [r7, #8]
 8017978:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 801797a:	2300      	movs	r3, #0
 801797c:	617b      	str	r3, [r7, #20]
 801797e:	e00f      	b.n	80179a0 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8017984:	68fa      	ldr	r2, [r7, #12]
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	4413      	add	r3, r2
 801798a:	693a      	ldr	r2, [r7, #16]
 801798c:	b2d2      	uxtb	r2, r2
 801798e:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	0a1b      	lsrs	r3, r3, #8
 8017994:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	3301      	adds	r3, #1
 801799e:	617b      	str	r3, [r7, #20]
 80179a0:	697a      	ldr	r2, [r7, #20]
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d3eb      	bcc.n	8017980 <Serialize_s32+0x12>
  }
}
 80179a8:	bf00      	nop
 80179aa:	bf00      	nop
 80179ac:	371c      	adds	r7, #28
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr
	...

080179b8 <DataHist_parameters>:
 80179b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80179be:	f8dd c018 	ldr.w	ip, [sp, #24]
 80179c2:	7020      	strb	r0, [r4, #0]
 80179c4:	6808      	ldr	r0, [r1, #0]
 80179c6:	6060      	str	r0, [r4, #4]
 80179c8:	6848      	ldr	r0, [r1, #4]
 80179ca:	60a0      	str	r0, [r4, #8]
 80179cc:	6888      	ldr	r0, [r1, #8]
 80179ce:	60e0      	str	r0, [r4, #12]
 80179d0:	68c8      	ldr	r0, [r1, #12]
 80179d2:	6120      	str	r0, [r4, #16]
 80179d4:	6908      	ldr	r0, [r1, #16]
 80179d6:	6160      	str	r0, [r4, #20]
 80179d8:	6948      	ldr	r0, [r1, #20]
 80179da:	61a0      	str	r0, [r4, #24]
 80179dc:	6988      	ldr	r0, [r1, #24]
 80179de:	61e0      	str	r0, [r4, #28]
 80179e0:	69c8      	ldr	r0, [r1, #28]
 80179e2:	6220      	str	r0, [r4, #32]
 80179e4:	6a09      	ldr	r1, [r1, #32]
 80179e6:	6261      	str	r1, [r4, #36]	@ 0x24
 80179e8:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 80179ec:	8811      	ldrh	r1, [r2, #0]
 80179ee:	edd2 7a01 	vldr	s15, [r2, #4]
 80179f2:	8521      	strh	r1, [r4, #40]	@ 0x28
 80179f4:	f102 0e80 	add.w	lr, r2, #128	@ 0x80
 80179f8:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 80179fc:	2700      	movs	r7, #0
 80179fe:	f1ae 0278 	sub.w	r2, lr, #120	@ 0x78
 8017a02:	4641      	mov	r1, r8
 8017a04:	f852 0b04 	ldr.w	r0, [r2], #4
 8017a08:	f841 0b04 	str.w	r0, [r1], #4
 8017a0c:	4572      	cmp	r2, lr
 8017a0e:	d1f9      	bne.n	8017a04 <DataHist_parameters+0x4c>
 8017a10:	371e      	adds	r7, #30
 8017a12:	2f5a      	cmp	r7, #90	@ 0x5a
 8017a14:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 8017a18:	f102 0e78 	add.w	lr, r2, #120	@ 0x78
 8017a1c:	d1ef      	bne.n	80179fe <DataHist_parameters+0x46>
 8017a1e:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 8017a22:	881a      	ldrh	r2, [r3, #0]
 8017a24:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8017a28:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 8017a2c:	f103 0e80 	add.w	lr, r3, #128	@ 0x80
 8017a30:	f504 77d0 	add.w	r7, r4, #416	@ 0x1a0
 8017a34:	2000      	movs	r0, #0
 8017a36:	f1ae 0378 	sub.w	r3, lr, #120	@ 0x78
 8017a3a:	463a      	mov	r2, r7
 8017a3c:	f853 1b04 	ldr.w	r1, [r3], #4
 8017a40:	f842 1b04 	str.w	r1, [r2], #4
 8017a44:	4573      	cmp	r3, lr
 8017a46:	d1f9      	bne.n	8017a3c <DataHist_parameters+0x84>
 8017a48:	301e      	adds	r0, #30
 8017a4a:	285a      	cmp	r0, #90	@ 0x5a
 8017a4c:	f107 0778 	add.w	r7, r7, #120	@ 0x78
 8017a50:	f103 0e78 	add.w	lr, r3, #120	@ 0x78
 8017a54:	d1ef      	bne.n	8017a36 <DataHist_parameters+0x7e>
 8017a56:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 8017a5a:	f8bc 3000 	ldrh.w	r3, [ip]
 8017a5e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8017a62:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 8017a66:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 8017a6a:	f504 7e44 	add.w	lr, r4, #784	@ 0x310
 8017a6e:	2000      	movs	r0, #0
 8017a70:	f1ac 0378 	sub.w	r3, ip, #120	@ 0x78
 8017a74:	4672      	mov	r2, lr
 8017a76:	f853 1b04 	ldr.w	r1, [r3], #4
 8017a7a:	f842 1b04 	str.w	r1, [r2], #4
 8017a7e:	4563      	cmp	r3, ip
 8017a80:	d1f9      	bne.n	8017a76 <DataHist_parameters+0xbe>
 8017a82:	301e      	adds	r0, #30
 8017a84:	285a      	cmp	r0, #90	@ 0x5a
 8017a86:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 8017a8a:	f103 0c78 	add.w	ip, r3, #120	@ 0x78
 8017a8e:	d1ef      	bne.n	8017a70 <DataHist_parameters+0xb8>
 8017a90:	f8c4 730c 	str.w	r7, [r4, #780]	@ 0x30c
 8017a94:	8833      	ldrh	r3, [r6, #0]
 8017a96:	6877      	ldr	r7, [r6, #4]
 8017a98:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 8017a9c:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 8017aa0:	f504 6c90 	add.w	ip, r4, #1152	@ 0x480
 8017aa4:	2600      	movs	r6, #0
 8017aa6:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 8017aaa:	4662      	mov	r2, ip
 8017aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8017ab0:	f842 1b04 	str.w	r1, [r2], #4
 8017ab4:	4283      	cmp	r3, r0
 8017ab6:	d1f9      	bne.n	8017aac <DataHist_parameters+0xf4>
 8017ab8:	361e      	adds	r6, #30
 8017aba:	2e5a      	cmp	r6, #90	@ 0x5a
 8017abc:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 8017ac0:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8017ac4:	d1ef      	bne.n	8017aa6 <DataHist_parameters+0xee>
 8017ac6:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8017aca:	69aa      	ldr	r2, [r5, #24]
 8017acc:	605f      	str	r7, [r3, #4]
 8017ace:	f504 63bd 	add.w	r3, r4, #1512	@ 0x5e8
 8017ad2:	7829      	ldrb	r1, [r5, #0]
 8017ad4:	f884 15e8 	strb.w	r1, [r4, #1512]	@ 0x5e8
 8017ad8:	619a      	str	r2, [r3, #24]
 8017ada:	6869      	ldr	r1, [r5, #4]
 8017adc:	6059      	str	r1, [r3, #4]
 8017ade:	f504 62be 	add.w	r2, r4, #1520	@ 0x5f0
 8017ae2:	68a9      	ldr	r1, [r5, #8]
 8017ae4:	6011      	str	r1, [r2, #0]
 8017ae6:	f204 52f4 	addw	r2, r4, #1524	@ 0x5f4
 8017aea:	68e9      	ldr	r1, [r5, #12]
 8017aec:	6011      	str	r1, [r2, #0]
 8017aee:	f504 62bf 	add.w	r2, r4, #1528	@ 0x5f8
 8017af2:	6929      	ldr	r1, [r5, #16]
 8017af4:	6011      	str	r1, [r2, #0]
 8017af6:	f204 52fc 	addw	r2, r4, #1532	@ 0x5fc
 8017afa:	6969      	ldr	r1, [r5, #20]
 8017afc:	6011      	str	r1, [r2, #0]
 8017afe:	69e9      	ldr	r1, [r5, #28]
 8017b00:	61d9      	str	r1, [r3, #28]
 8017b02:	f504 62c1 	add.w	r2, r4, #1544	@ 0x608
 8017b06:	6a2b      	ldr	r3, [r5, #32]
 8017b08:	6013      	str	r3, [r2, #0]
 8017b0a:	f204 630c 	addw	r3, r4, #1548	@ 0x60c
 8017b0e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017b10:	601a      	str	r2, [r3, #0]
 8017b12:	f504 63c2 	add.w	r3, r4, #1552	@ 0x610
 8017b16:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8017b18:	601a      	str	r2, [r3, #0]
 8017b1a:	f204 6414 	addw	r4, r4, #1556	@ 0x614
 8017b1e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017b20:	6023      	str	r3, [r4, #0]
 8017b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b26:	bf00      	nop

08017b28 <rotVect>:
 8017b28:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8017b2c:	ed92 7a01 	vldr	s14, [r2, #4]
 8017b30:	ed92 6a00 	vldr	s12, [r2]
 8017b34:	ee07 3a90 	vmov	s15, r3
 8017b38:	f991 3000 	ldrsb.w	r3, [r1]
 8017b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b40:	ee06 3a90 	vmov	s13, r3
 8017b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017b48:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8017b4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017b50:	ee07 3a10 	vmov	s14, r3
 8017b54:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017b58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b5c:	edd2 6a02 	vldr	s13, [r2, #8]
 8017b60:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017b64:	edc0 7a00 	vstr	s15, [r0]
 8017b68:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8017b6c:	ed92 7a01 	vldr	s14, [r2, #4]
 8017b70:	ed92 6a00 	vldr	s12, [r2]
 8017b74:	ee07 3a90 	vmov	s15, r3
 8017b78:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8017b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b80:	ee06 3a90 	vmov	s13, r3
 8017b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017b88:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8017b8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017b90:	ee07 3a10 	vmov	s14, r3
 8017b94:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017b98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b9c:	edd2 6a02 	vldr	s13, [r2, #8]
 8017ba0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017ba4:	edc0 7a01 	vstr	s15, [r0, #4]
 8017ba8:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8017bac:	ed92 7a01 	vldr	s14, [r2, #4]
 8017bb0:	ed92 6a00 	vldr	s12, [r2]
 8017bb4:	ee07 3a90 	vmov	s15, r3
 8017bb8:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8017bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bc0:	ee06 3a90 	vmov	s13, r3
 8017bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017bcc:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8017bd0:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017bd4:	ee07 3a10 	vmov	s14, r3
 8017bd8:	edd2 6a02 	vldr	s13, [r2, #8]
 8017bdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017be0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017be4:	edc0 7a02 	vstr	s15, [r0, #8]
 8017be8:	4770      	bx	lr
 8017bea:	bf00      	nop

08017bec <findAxis>:
 8017bec:	f990 3000 	ldrsb.w	r3, [r0]
 8017bf0:	2b01      	cmp	r3, #1
 8017bf2:	d027      	beq.n	8017c44 <findAxis+0x58>
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	d00e      	beq.n	8017c16 <findAxis+0x2a>
 8017bf8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d053      	beq.n	8017ca8 <findAxis+0xbc>
 8017c00:	3301      	adds	r3, #1
 8017c02:	d048      	beq.n	8017c96 <findAxis+0xaa>
 8017c04:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8017c08:	2b01      	cmp	r3, #1
 8017c0a:	d053      	beq.n	8017cb4 <findAxis+0xc8>
 8017c0c:	3301      	adds	r3, #1
 8017c0e:	d104      	bne.n	8017c1a <findAxis+0x2e>
 8017c10:	2364      	movs	r3, #100	@ 0x64
 8017c12:	700b      	strb	r3, [r1, #0]
 8017c14:	e001      	b.n	8017c1a <findAxis+0x2e>
 8017c16:	2377      	movs	r3, #119	@ 0x77
 8017c18:	700b      	strb	r3, [r1, #0]
 8017c1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	d016      	beq.n	8017c50 <findAxis+0x64>
 8017c22:	3301      	adds	r3, #1
 8017c24:	d02e      	beq.n	8017c84 <findAxis+0x98>
 8017c26:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8017c2a:	2b01      	cmp	r3, #1
 8017c2c:	d039      	beq.n	8017ca2 <findAxis+0xb6>
 8017c2e:	3301      	adds	r3, #1
 8017c30:	d034      	beq.n	8017c9c <findAxis+0xb0>
 8017c32:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8017c36:	2b01      	cmp	r3, #1
 8017c38:	d03f      	beq.n	8017cba <findAxis+0xce>
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	d10a      	bne.n	8017c54 <findAxis+0x68>
 8017c3e:	2364      	movs	r3, #100	@ 0x64
 8017c40:	704b      	strb	r3, [r1, #1]
 8017c42:	e007      	b.n	8017c54 <findAxis+0x68>
 8017c44:	2365      	movs	r3, #101	@ 0x65
 8017c46:	700b      	strb	r3, [r1, #0]
 8017c48:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	d1e8      	bne.n	8017c22 <findAxis+0x36>
 8017c50:	2365      	movs	r3, #101	@ 0x65
 8017c52:	704b      	strb	r3, [r1, #1]
 8017c54:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	d010      	beq.n	8017c7e <findAxis+0x92>
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	d014      	beq.n	8017c8a <findAxis+0x9e>
 8017c60:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8017c64:	2b01      	cmp	r3, #1
 8017c66:	d022      	beq.n	8017cae <findAxis+0xc2>
 8017c68:	3301      	adds	r3, #1
 8017c6a:	d011      	beq.n	8017c90 <findAxis+0xa4>
 8017c6c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017c70:	2b01      	cmp	r3, #1
 8017c72:	d025      	beq.n	8017cc0 <findAxis+0xd4>
 8017c74:	3301      	adds	r3, #1
 8017c76:	bf04      	itt	eq
 8017c78:	2364      	moveq	r3, #100	@ 0x64
 8017c7a:	708b      	strbeq	r3, [r1, #2]
 8017c7c:	4770      	bx	lr
 8017c7e:	2365      	movs	r3, #101	@ 0x65
 8017c80:	708b      	strb	r3, [r1, #2]
 8017c82:	4770      	bx	lr
 8017c84:	2377      	movs	r3, #119	@ 0x77
 8017c86:	704b      	strb	r3, [r1, #1]
 8017c88:	e7e4      	b.n	8017c54 <findAxis+0x68>
 8017c8a:	2377      	movs	r3, #119	@ 0x77
 8017c8c:	708b      	strb	r3, [r1, #2]
 8017c8e:	4770      	bx	lr
 8017c90:	2373      	movs	r3, #115	@ 0x73
 8017c92:	708b      	strb	r3, [r1, #2]
 8017c94:	4770      	bx	lr
 8017c96:	2373      	movs	r3, #115	@ 0x73
 8017c98:	700b      	strb	r3, [r1, #0]
 8017c9a:	e7be      	b.n	8017c1a <findAxis+0x2e>
 8017c9c:	2373      	movs	r3, #115	@ 0x73
 8017c9e:	704b      	strb	r3, [r1, #1]
 8017ca0:	e7d8      	b.n	8017c54 <findAxis+0x68>
 8017ca2:	236e      	movs	r3, #110	@ 0x6e
 8017ca4:	704b      	strb	r3, [r1, #1]
 8017ca6:	e7d5      	b.n	8017c54 <findAxis+0x68>
 8017ca8:	236e      	movs	r3, #110	@ 0x6e
 8017caa:	700b      	strb	r3, [r1, #0]
 8017cac:	e7b5      	b.n	8017c1a <findAxis+0x2e>
 8017cae:	236e      	movs	r3, #110	@ 0x6e
 8017cb0:	708b      	strb	r3, [r1, #2]
 8017cb2:	4770      	bx	lr
 8017cb4:	2375      	movs	r3, #117	@ 0x75
 8017cb6:	700b      	strb	r3, [r1, #0]
 8017cb8:	e7af      	b.n	8017c1a <findAxis+0x2e>
 8017cba:	2375      	movs	r3, #117	@ 0x75
 8017cbc:	704b      	strb	r3, [r1, #1]
 8017cbe:	e7c9      	b.n	8017c54 <findAxis+0x68>
 8017cc0:	2375      	movs	r3, #117	@ 0x75
 8017cc2:	708b      	strb	r3, [r1, #2]
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop

08017cc8 <findDirection>:
 8017cc8:	b5d0      	push	{r4, r6, r7, lr}
 8017cca:	ed2d 8b04 	vpush	{d8-d9}
 8017cce:	eef0 8ac0 	vabs.f32	s17, s0
 8017cd2:	eeb0 8ae0 	vabs.f32	s16, s1
 8017cd6:	eef4 8ac8 	vcmpe.f32	s17, s16
 8017cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cde:	4604      	mov	r4, r0
 8017ce0:	eeb0 9ac1 	vabs.f32	s18, s2
 8017ce4:	dd36      	ble.n	8017d54 <findDirection+0x8c>
 8017ce6:	eef4 8ac9 	vcmpe.f32	s17, s18
 8017cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cee:	dd31      	ble.n	8017d54 <findDirection+0x8c>
 8017cf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf8:	ee18 0a90 	vmov	r0, s17
 8017cfc:	f340 8094 	ble.w	8017e28 <findDirection+0x160>
 8017d00:	f7e8 fc22 	bl	8000548 <__aeabi_f2d>
 8017d04:	4606      	mov	r6, r0
 8017d06:	ee18 0a10 	vmov	r0, s16
 8017d0a:	460f      	mov	r7, r1
 8017d0c:	f7e8 fc1c 	bl	8000548 <__aeabi_f2d>
 8017d10:	a387      	add	r3, pc, #540	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d16:	f7e8 fc6f 	bl	80005f8 <__aeabi_dmul>
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	460b      	mov	r3, r1
 8017d1e:	4630      	mov	r0, r6
 8017d20:	4639      	mov	r1, r7
 8017d22:	f7e8 fef9 	bl	8000b18 <__aeabi_dcmpgt>
 8017d26:	b188      	cbz	r0, 8017d4c <findDirection+0x84>
 8017d28:	ee19 0a10 	vmov	r0, s18
 8017d2c:	f7e8 fc0c 	bl	8000548 <__aeabi_f2d>
 8017d30:	a37f      	add	r3, pc, #508	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d36:	f7e8 fc5f 	bl	80005f8 <__aeabi_dmul>
 8017d3a:	4602      	mov	r2, r0
 8017d3c:	460b      	mov	r3, r1
 8017d3e:	4630      	mov	r0, r6
 8017d40:	4639      	mov	r1, r7
 8017d42:	f7e8 fee9 	bl	8000b18 <__aeabi_dcmpgt>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	bf18      	it	ne
 8017d4a:	2404      	movne	r4, #4
 8017d4c:	ecbd 8b04 	vpop	{d8-d9}
 8017d50:	4620      	mov	r0, r4
 8017d52:	bdd0      	pop	{r4, r6, r7, pc}
 8017d54:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8017d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d5c:	dd32      	ble.n	8017dc4 <findDirection+0xfc>
 8017d5e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8017d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d66:	ee18 0a10 	vmov	r0, s16
 8017d6a:	f340 8086 	ble.w	8017e7a <findDirection+0x1b2>
 8017d6e:	f7e8 fbeb 	bl	8000548 <__aeabi_f2d>
 8017d72:	4606      	mov	r6, r0
 8017d74:	ee18 0a90 	vmov	r0, s17
 8017d78:	460f      	mov	r7, r1
 8017d7a:	f7e8 fbe5 	bl	8000548 <__aeabi_f2d>
 8017d7e:	a36c      	add	r3, pc, #432	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d84:	f7e8 fc38 	bl	80005f8 <__aeabi_dmul>
 8017d88:	4602      	mov	r2, r0
 8017d8a:	460b      	mov	r3, r1
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	4639      	mov	r1, r7
 8017d90:	f7e8 fec2 	bl	8000b18 <__aeabi_dcmpgt>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d0d9      	beq.n	8017d4c <findDirection+0x84>
 8017d98:	ee19 0a10 	vmov	r0, s18
 8017d9c:	f7e8 fbd4 	bl	8000548 <__aeabi_f2d>
 8017da0:	a363      	add	r3, pc, #396	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da6:	f7e8 fc27 	bl	80005f8 <__aeabi_dmul>
 8017daa:	4602      	mov	r2, r0
 8017dac:	460b      	mov	r3, r1
 8017dae:	4630      	mov	r0, r6
 8017db0:	4639      	mov	r1, r7
 8017db2:	f7e8 feb1 	bl	8000b18 <__aeabi_dcmpgt>
 8017db6:	ecbd 8b04 	vpop	{d8-d9}
 8017dba:	2800      	cmp	r0, #0
 8017dbc:	bf18      	it	ne
 8017dbe:	2401      	movne	r4, #1
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	bdd0      	pop	{r4, r6, r7, pc}
 8017dc4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8017dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dcc:	ee19 0a10 	vmov	r0, s18
 8017dd0:	dd7f      	ble.n	8017ed2 <findDirection+0x20a>
 8017dd2:	f7e8 fbb9 	bl	8000548 <__aeabi_f2d>
 8017dd6:	4606      	mov	r6, r0
 8017dd8:	ee18 0a10 	vmov	r0, s16
 8017ddc:	460f      	mov	r7, r1
 8017dde:	f7e8 fbb3 	bl	8000548 <__aeabi_f2d>
 8017de2:	a353      	add	r3, pc, #332	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017de8:	f7e8 fc06 	bl	80005f8 <__aeabi_dmul>
 8017dec:	4602      	mov	r2, r0
 8017dee:	460b      	mov	r3, r1
 8017df0:	4630      	mov	r0, r6
 8017df2:	4639      	mov	r1, r7
 8017df4:	f7e8 fe90 	bl	8000b18 <__aeabi_dcmpgt>
 8017df8:	2800      	cmp	r0, #0
 8017dfa:	d0a7      	beq.n	8017d4c <findDirection+0x84>
 8017dfc:	ee18 0a90 	vmov	r0, s17
 8017e00:	f7e8 fba2 	bl	8000548 <__aeabi_f2d>
 8017e04:	a34a      	add	r3, pc, #296	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e0a:	f7e8 fbf5 	bl	80005f8 <__aeabi_dmul>
 8017e0e:	4602      	mov	r2, r0
 8017e10:	460b      	mov	r3, r1
 8017e12:	4630      	mov	r0, r6
 8017e14:	4639      	mov	r1, r7
 8017e16:	f7e8 fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 8017e1a:	ecbd 8b04 	vpop	{d8-d9}
 8017e1e:	2800      	cmp	r0, #0
 8017e20:	bf18      	it	ne
 8017e22:	2400      	movne	r4, #0
 8017e24:	4620      	mov	r0, r4
 8017e26:	bdd0      	pop	{r4, r6, r7, pc}
 8017e28:	f7e8 fb8e 	bl	8000548 <__aeabi_f2d>
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	ee18 0a10 	vmov	r0, s16
 8017e32:	460f      	mov	r7, r1
 8017e34:	f7e8 fb88 	bl	8000548 <__aeabi_f2d>
 8017e38:	a33d      	add	r3, pc, #244	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e3e:	f7e8 fbdb 	bl	80005f8 <__aeabi_dmul>
 8017e42:	4602      	mov	r2, r0
 8017e44:	460b      	mov	r3, r1
 8017e46:	4630      	mov	r0, r6
 8017e48:	4639      	mov	r1, r7
 8017e4a:	f7e8 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8017e4e:	2800      	cmp	r0, #0
 8017e50:	f43f af7c 	beq.w	8017d4c <findDirection+0x84>
 8017e54:	ee19 0a10 	vmov	r0, s18
 8017e58:	f7e8 fb76 	bl	8000548 <__aeabi_f2d>
 8017e5c:	a334      	add	r3, pc, #208	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e62:	f7e8 fbc9 	bl	80005f8 <__aeabi_dmul>
 8017e66:	4602      	mov	r2, r0
 8017e68:	460b      	mov	r3, r1
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	4639      	mov	r1, r7
 8017e6e:	f7e8 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 8017e72:	2800      	cmp	r0, #0
 8017e74:	bf18      	it	ne
 8017e76:	2405      	movne	r4, #5
 8017e78:	e768      	b.n	8017d4c <findDirection+0x84>
 8017e7a:	f7e8 fb65 	bl	8000548 <__aeabi_f2d>
 8017e7e:	4606      	mov	r6, r0
 8017e80:	ee18 0a90 	vmov	r0, s17
 8017e84:	460f      	mov	r7, r1
 8017e86:	f7e8 fb5f 	bl	8000548 <__aeabi_f2d>
 8017e8a:	a329      	add	r3, pc, #164	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e90:	f7e8 fbb2 	bl	80005f8 <__aeabi_dmul>
 8017e94:	4602      	mov	r2, r0
 8017e96:	460b      	mov	r3, r1
 8017e98:	4630      	mov	r0, r6
 8017e9a:	4639      	mov	r1, r7
 8017e9c:	f7e8 fe3c 	bl	8000b18 <__aeabi_dcmpgt>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	f43f af53 	beq.w	8017d4c <findDirection+0x84>
 8017ea6:	ee19 0a10 	vmov	r0, s18
 8017eaa:	f7e8 fb4d 	bl	8000548 <__aeabi_f2d>
 8017eae:	a320      	add	r3, pc, #128	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eb4:	f7e8 fba0 	bl	80005f8 <__aeabi_dmul>
 8017eb8:	4602      	mov	r2, r0
 8017eba:	460b      	mov	r3, r1
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	4639      	mov	r1, r7
 8017ec0:	f7e8 fe2a 	bl	8000b18 <__aeabi_dcmpgt>
 8017ec4:	ecbd 8b04 	vpop	{d8-d9}
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	bf18      	it	ne
 8017ecc:	2403      	movne	r4, #3
 8017ece:	4620      	mov	r0, r4
 8017ed0:	bdd0      	pop	{r4, r6, r7, pc}
 8017ed2:	f7e8 fb39 	bl	8000548 <__aeabi_f2d>
 8017ed6:	4606      	mov	r6, r0
 8017ed8:	ee18 0a10 	vmov	r0, s16
 8017edc:	460f      	mov	r7, r1
 8017ede:	f7e8 fb33 	bl	8000548 <__aeabi_f2d>
 8017ee2:	a313      	add	r3, pc, #76	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee8:	f7e8 fb86 	bl	80005f8 <__aeabi_dmul>
 8017eec:	4602      	mov	r2, r0
 8017eee:	460b      	mov	r3, r1
 8017ef0:	4630      	mov	r0, r6
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	f7e8 fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	f43f af27 	beq.w	8017d4c <findDirection+0x84>
 8017efe:	ee18 0a90 	vmov	r0, s17
 8017f02:	f7e8 fb21 	bl	8000548 <__aeabi_f2d>
 8017f06:	a30a      	add	r3, pc, #40	@ (adr r3, 8017f30 <findDirection+0x268>)
 8017f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0c:	f7e8 fb74 	bl	80005f8 <__aeabi_dmul>
 8017f10:	4602      	mov	r2, r0
 8017f12:	460b      	mov	r3, r1
 8017f14:	4630      	mov	r0, r6
 8017f16:	4639      	mov	r1, r7
 8017f18:	f7e8 fdfe 	bl	8000b18 <__aeabi_dcmpgt>
 8017f1c:	ecbd 8b04 	vpop	{d8-d9}
 8017f20:	2800      	cmp	r0, #0
 8017f22:	bf18      	it	ne
 8017f24:	2402      	movne	r4, #2
 8017f26:	4620      	mov	r0, r4
 8017f28:	bdd0      	pop	{r4, r6, r7, pc}
 8017f2a:	bf00      	nop
 8017f2c:	f3af 8000 	nop.w
 8017f30:	e0000000 	.word	0xe0000000
 8017f34:	3ff6b851 	.word	0x3ff6b851

08017f38 <updateOrientation>:
 8017f38:	2300      	movs	r3, #0
 8017f3a:	6003      	str	r3, [r0, #0]
 8017f3c:	6043      	str	r3, [r0, #4]
 8017f3e:	7203      	strb	r3, [r0, #8]
 8017f40:	f891 c000 	ldrb.w	ip, [r1]
 8017f44:	784a      	ldrb	r2, [r1, #1]
 8017f46:	f1ac 0342 	sub.w	r3, ip, #66	@ 0x42
 8017f4a:	2b17      	cmp	r3, #23
 8017f4c:	bf98      	it	ls
 8017f4e:	f10c 0c20 	addls.w	ip, ip, #32
 8017f52:	f1a2 0342 	sub.w	r3, r2, #66	@ 0x42
 8017f56:	bf98      	it	ls
 8017f58:	fa5f fc8c 	uxtbls.w	ip, ip
 8017f5c:	2b17      	cmp	r3, #23
 8017f5e:	788b      	ldrb	r3, [r1, #2]
 8017f60:	bf98      	it	ls
 8017f62:	3220      	addls	r2, #32
 8017f64:	f1a3 0142 	sub.w	r1, r3, #66	@ 0x42
 8017f68:	bf98      	it	ls
 8017f6a:	b2d2      	uxtbls	r2, r2
 8017f6c:	2917      	cmp	r1, #23
 8017f6e:	bf98      	it	ls
 8017f70:	3320      	addls	r3, #32
 8017f72:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 8017f76:	bf98      	it	ls
 8017f78:	b2db      	uxtbls	r3, r3
 8017f7a:	f1bc 0f13 	cmp.w	ip, #19
 8017f7e:	d80d      	bhi.n	8017f9c <updateOrientation+0x64>
 8017f80:	e8df f00c 	tbb	[pc, ip]
 8017f84:	0c0c0a32 	.word	0x0c0c0a32
 8017f88:	0c0c0c0c 	.word	0x0c0c0c0c
 8017f8c:	0c350c0c 	.word	0x0c350c0c
 8017f90:	380c0c0c 	.word	0x380c0c0c
 8017f94:	3e0c3b0c 	.word	0x3e0c3b0c
 8017f98:	2101      	movs	r1, #1
 8017f9a:	7001      	strb	r1, [r0, #0]
 8017f9c:	3a64      	subs	r2, #100	@ 0x64
 8017f9e:	2a13      	cmp	r2, #19
 8017fa0:	d80d      	bhi.n	8017fbe <updateOrientation+0x86>
 8017fa2:	e8df f002 	tbb	[pc, r2]
 8017fa6:	0a30      	.short	0x0a30
 8017fa8:	0c0c0c0c 	.word	0x0c0c0c0c
 8017fac:	0c0c0c0c 	.word	0x0c0c0c0c
 8017fb0:	0c0c0c33 	.word	0x0c0c0c33
 8017fb4:	390c360c 	.word	0x390c360c
 8017fb8:	3c0c      	.short	0x3c0c
 8017fba:	2201      	movs	r2, #1
 8017fbc:	7042      	strb	r2, [r0, #1]
 8017fbe:	3b64      	subs	r3, #100	@ 0x64
 8017fc0:	2b13      	cmp	r3, #19
 8017fc2:	d80d      	bhi.n	8017fe0 <updateOrientation+0xa8>
 8017fc4:	e8df f003 	tbb	[pc, r3]
 8017fc8:	0c0c2e0a 	.word	0x0c0c2e0a
 8017fcc:	0c0c0c0c 	.word	0x0c0c0c0c
 8017fd0:	0c310c0c 	.word	0x0c310c0c
 8017fd4:	340c0c0c 	.word	0x340c0c0c
 8017fd8:	0d0c370c 	.word	0x0d0c370c
 8017fdc:	23ff      	movs	r3, #255	@ 0xff
 8017fde:	7203      	strb	r3, [r0, #8]
 8017fe0:	4770      	bx	lr
 8017fe2:	23ff      	movs	r3, #255	@ 0xff
 8017fe4:	7083      	strb	r3, [r0, #2]
 8017fe6:	4770      	bx	lr
 8017fe8:	21ff      	movs	r1, #255	@ 0xff
 8017fea:	7181      	strb	r1, [r0, #6]
 8017fec:	e7d6      	b.n	8017f9c <updateOrientation+0x64>
 8017fee:	2101      	movs	r1, #1
 8017ff0:	70c1      	strb	r1, [r0, #3]
 8017ff2:	e7d3      	b.n	8017f9c <updateOrientation+0x64>
 8017ff4:	21ff      	movs	r1, #255	@ 0xff
 8017ff6:	70c1      	strb	r1, [r0, #3]
 8017ff8:	e7d0      	b.n	8017f9c <updateOrientation+0x64>
 8017ffa:	2101      	movs	r1, #1
 8017ffc:	7181      	strb	r1, [r0, #6]
 8017ffe:	e7cd      	b.n	8017f9c <updateOrientation+0x64>
 8018000:	21ff      	movs	r1, #255	@ 0xff
 8018002:	7001      	strb	r1, [r0, #0]
 8018004:	e7ca      	b.n	8017f9c <updateOrientation+0x64>
 8018006:	22ff      	movs	r2, #255	@ 0xff
 8018008:	71c2      	strb	r2, [r0, #7]
 801800a:	e7d8      	b.n	8017fbe <updateOrientation+0x86>
 801800c:	2201      	movs	r2, #1
 801800e:	7102      	strb	r2, [r0, #4]
 8018010:	e7d5      	b.n	8017fbe <updateOrientation+0x86>
 8018012:	22ff      	movs	r2, #255	@ 0xff
 8018014:	7102      	strb	r2, [r0, #4]
 8018016:	e7d2      	b.n	8017fbe <updateOrientation+0x86>
 8018018:	2201      	movs	r2, #1
 801801a:	71c2      	strb	r2, [r0, #7]
 801801c:	e7cf      	b.n	8017fbe <updateOrientation+0x86>
 801801e:	22ff      	movs	r2, #255	@ 0xff
 8018020:	7042      	strb	r2, [r0, #1]
 8018022:	e7cc      	b.n	8017fbe <updateOrientation+0x86>
 8018024:	2301      	movs	r3, #1
 8018026:	7083      	strb	r3, [r0, #2]
 8018028:	4770      	bx	lr
 801802a:	2301      	movs	r3, #1
 801802c:	7143      	strb	r3, [r0, #5]
 801802e:	4770      	bx	lr
 8018030:	23ff      	movs	r3, #255	@ 0xff
 8018032:	7143      	strb	r3, [r0, #5]
 8018034:	4770      	bx	lr
 8018036:	2301      	movs	r3, #1
 8018038:	7203      	strb	r3, [r0, #8]
 801803a:	4770      	bx	lr

0801803c <qmult>:
 801803c:	ed91 2a03 	vldr	s4, [r1, #12]
 8018040:	ed90 3a01 	vldr	s6, [r0, #4]
 8018044:	edd0 5a02 	vldr	s11, [r0, #8]
 8018048:	edd1 4a01 	vldr	s9, [r1, #4]
 801804c:	ed90 4a00 	vldr	s8, [r0]
 8018050:	ed91 5a02 	vldr	s10, [r1, #8]
 8018054:	edd1 3a00 	vldr	s7, [r1]
 8018058:	edd0 2a03 	vldr	s5, [r0, #12]
 801805c:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8018060:	ee62 6a03 	vmul.f32	s13, s4, s6
 8018064:	ee22 7a25 	vmul.f32	s14, s4, s11
 8018068:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 801806c:	eea4 6a02 	vfma.f32	s12, s8, s4
 8018070:	eee4 6a05 	vfma.f32	s13, s8, s10
 8018074:	eea3 7a23 	vfma.f32	s14, s6, s7
 8018078:	eee4 7a63 	vfms.f32	s15, s8, s7
 801807c:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8018080:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8018084:	eea5 7a22 	vfma.f32	s14, s10, s5
 8018088:	eee2 7a22 	vfma.f32	s15, s4, s5
 801808c:	eea3 6a45 	vfms.f32	s12, s6, s10
 8018090:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8018094:	eea4 7a64 	vfms.f32	s14, s8, s9
 8018098:	eee5 7a65 	vfms.f32	s15, s10, s11
 801809c:	ed82 6a00 	vstr	s12, [r2]
 80180a0:	edc2 6a01 	vstr	s13, [r2, #4]
 80180a4:	ed82 7a02 	vstr	s14, [r2, #8]
 80180a8:	edc2 7a03 	vstr	s15, [r2, #12]
 80180ac:	4770      	bx	lr
 80180ae:	bf00      	nop

080180b0 <dataDerivative5>:
 80180b0:	ed90 7a01 	vldr	s14, [r0, #4]
 80180b4:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 80180b8:	edd0 6a04 	vldr	s13, [r0, #16]
 80180bc:	ed90 6a00 	vldr	s12, [r0]
 80180c0:	ed90 4a02 	vldr	s8, [r0, #8]
 80180c4:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 80180c8:	eeb8 5a00 	vmov.f32	s10, #128	@ 0xc0000000 -2.0
 80180cc:	eee7 7a05 	vfma.f32	s15, s14, s10
 80180d0:	ed90 7a03 	vldr	s14, [r0, #12]
 80180d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80180d8:	edd0 6a0b 	vldr	s13, [r0, #44]	@ 0x2c
 80180dc:	ee96 7a05 	vfnms.f32	s14, s12, s10
 80180e0:	eee4 6a05 	vfma.f32	s13, s8, s10
 80180e4:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 80180e8:	ed90 5a0c 	vldr	s10, [r0, #48]	@ 0x30
 80180ec:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80180f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80180f4:	ee37 7a24 	vadd.f32	s14, s14, s9
 80180f8:	eeb0 6a66 	vmov.f32	s12, s13
 80180fc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018138 <dataDerivative5+0x88>
 8018100:	eea5 7a25 	vfma.f32	s14, s10, s11
 8018104:	ee60 6a26 	vmul.f32	s13, s0, s13
 8018108:	ed90 5a05 	vldr	s10, [r0, #20]
 801810c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018110:	ee36 6a45 	vsub.f32	s12, s12, s10
 8018114:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 8018118:	ee27 7a26 	vmul.f32	s14, s14, s13
 801811c:	eea5 6a25 	vfma.f32	s12, s10, s11
 8018120:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8018124:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018128:	eea7 0a07 	vfma.f32	s0, s14, s14
 801812c:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8018130:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018134:	4770      	bx	lr
 8018136:	bf00      	nop
 8018138:	3dcccccd 	.word	0x3dcccccd

0801813c <b_dcm2q>:
 801813c:	ed90 5a08 	vldr	s10, [r0, #32]
 8018140:	edd0 7a00 	vldr	s15, [r0]
 8018144:	edd0 6a04 	vldr	s13, [r0, #16]
 8018148:	ee37 7a85 	vadd.f32	s14, s15, s10
 801814c:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8018150:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018154:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8018158:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801815c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018160:	bfc5      	ittet	gt
 8018162:	eeb7 6a00 	vmovgt.f32	s12, #112	@ 0x3f800000  1.0
 8018166:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 801816a:	eddf 5a43 	vldrle	s11, [pc, #268]	@ 8018278 <b_dcm2q+0x13c>
 801816e:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 8018172:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8018176:	ee35 6a47 	vsub.f32	s12, s10, s14
 801817a:	ee35 7a07 	vadd.f32	s14, s10, s14
 801817e:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8018182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018186:	bfc5      	ittet	gt
 8018188:	eef7 4a00 	vmovgt.f32	s9, #112	@ 0x3f800000  1.0
 801818c:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8018190:	ed9f 6a39 	vldrle	s12, [pc, #228]	@ 8018278 <b_dcm2q+0x13c>
 8018194:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8018198:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 801819c:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80181a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a4:	dd5b      	ble.n	801825e <b_dcm2q+0x122>
 80181a6:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 80181aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80181ae:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80181b2:	eef1 4ac7 	vsqrt.f32	s9, s14
 80181b6:	ee64 4a84 	vmul.f32	s9, s9, s8
 80181ba:	ee76 6a85 	vadd.f32	s13, s13, s10
 80181be:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80181c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80181c6:	edd0 6a07 	vldr	s13, [r0, #28]
 80181ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d2:	bf85      	ittet	hi
 80181d4:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 80181d8:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 80181dc:	ed9f 7a26 	vldrls	s14, [pc, #152]	@ 8018278 <b_dcm2q+0x13c>
 80181e0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 80181e4:	edd0 7a05 	vldr	s15, [r0, #20]
 80181e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80181ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80181f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f4:	d43c      	bmi.n	8018270 <b_dcm2q+0x134>
 80181f6:	bfd8      	it	le
 80181f8:	ee27 7a27 	vmulle.f32	s14, s14, s15
 80181fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018204:	ed81 7a00 	vstr	s14, [r1]
 8018208:	edd0 7a06 	vldr	s15, [r0, #24]
 801820c:	ed90 7a02 	vldr	s14, [r0, #8]
 8018210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821c:	d425      	bmi.n	801826a <b_dcm2q+0x12e>
 801821e:	bfd8      	it	le
 8018220:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8018224:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018228:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801822c:	edc1 5a01 	vstr	s11, [r1, #4]
 8018230:	edd0 7a01 	vldr	s15, [r0, #4]
 8018234:	ed90 7a03 	vldr	s14, [r0, #12]
 8018238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801823c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018244:	d40e      	bmi.n	8018264 <b_dcm2q+0x128>
 8018246:	bfd8      	it	le
 8018248:	ee26 6a27 	vmulle.f32	s12, s12, s15
 801824c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018250:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018254:	edc1 4a03 	vstr	s9, [r1, #12]
 8018258:	ed81 6a02 	vstr	s12, [r1, #8]
 801825c:	4770      	bx	lr
 801825e:	eddf 4a06 	vldr	s9, [pc, #24]	@ 8018278 <b_dcm2q+0x13c>
 8018262:	e7aa      	b.n	80181ba <b_dcm2q+0x7e>
 8018264:	eeb1 6a46 	vneg.f32	s12, s12
 8018268:	e7f0      	b.n	801824c <b_dcm2q+0x110>
 801826a:	eef1 5a65 	vneg.f32	s11, s11
 801826e:	e7d9      	b.n	8018224 <b_dcm2q+0xe8>
 8018270:	eeb1 7a47 	vneg.f32	s14, s14
 8018274:	e7c2      	b.n	80181fc <b_dcm2q+0xc0>
 8018276:	bf00      	nop
 8018278:	00000000 	.word	0x00000000

0801827c <getRotationMatrix>:
 801827c:	b538      	push	{r3, r4, r5, lr}
 801827e:	4613      	mov	r3, r2
 8018280:	4605      	mov	r5, r0
 8018282:	460c      	mov	r4, r1
 8018284:	4618      	mov	r0, r3
 8018286:	2224      	movs	r2, #36	@ 0x24
 8018288:	2100      	movs	r1, #0
 801828a:	f009 fa01 	bl	8021690 <memset>
 801828e:	edd5 5a00 	vldr	s11, [r5]
 8018292:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 80183b8 <getRotationMatrix+0x13c>
 8018296:	edc0 5a02 	vstr	s11, [r0, #8]
 801829a:	edd5 4a01 	vldr	s9, [r5, #4]
 801829e:	edc0 4a05 	vstr	s9, [r0, #20]
 80182a2:	ed95 5a02 	vldr	s10, [r5, #8]
 80182a6:	ed80 5a08 	vstr	s10, [r0, #32]
 80182aa:	ed94 4a02 	vldr	s8, [r4, #8]
 80182ae:	edd4 3a01 	vldr	s7, [r4, #4]
 80182b2:	ed94 6a00 	vldr	s12, [r4]
 80182b6:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 80182ba:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 80182be:	eee3 6a85 	vfma.f32	s13, s7, s10
 80182c2:	4603      	mov	r3, r0
 80182c4:	eee6 7a24 	vfma.f32	s15, s12, s9
 80182c8:	ee25 7a46 	vnmul.f32	s14, s10, s12
 80182cc:	eeb0 6ae6 	vabs.f32	s12, s13
 80182d0:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80182d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182d8:	eea4 7a25 	vfma.f32	s14, s8, s11
 80182dc:	bfdc      	itt	le
 80182de:	ee86 4a83 	vdivle.f32	s8, s13, s6
 80182e2:	eeb0 6a43 	vmovle.f32	s12, s6
 80182e6:	eef0 3ac7 	vabs.f32	s7, s14
 80182ea:	eeb4 6ae3 	vcmpe.f32	s12, s7
 80182ee:	bfd4      	ite	le
 80182f0:	ee24 4a04 	vmulle.f32	s8, s8, s8
 80182f4:	eeb7 4a00 	vmovgt.f32	s8, #112	@ 0x3f800000  1.0
 80182f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182fc:	ed80 7a03 	vstr	s14, [r0, #12]
 8018300:	edc0 7a06 	vstr	s15, [r0, #24]
 8018304:	d43f      	bmi.n	8018386 <getRotationMatrix+0x10a>
 8018306:	eec7 3a06 	vdiv.f32	s7, s14, s12
 801830a:	eea3 4aa3 	vfma.f32	s8, s7, s7
 801830e:	eeb0 3a44 	vmov.f32	s6, s8
 8018312:	eeb0 4ae7 	vabs.f32	s8, s15
 8018316:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801831e:	d543      	bpl.n	80183a8 <getRotationMatrix+0x12c>
 8018320:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8018324:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8018328:	ee62 2aa2 	vmul.f32	s5, s5, s5
 801832c:	eeb0 6a44 	vmov.f32	s12, s8
 8018330:	eee3 3a22 	vfma.f32	s7, s6, s5
 8018334:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8018338:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801833c:	ee24 6a06 	vmul.f32	s12, s8, s12
 8018340:	ee83 4a86 	vdiv.f32	s8, s7, s12
 8018344:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018348:	ee67 7a84 	vmul.f32	s15, s15, s8
 801834c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018350:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8018354:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8018358:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 801835c:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8018360:	eef0 4a44 	vmov.f32	s9, s8
 8018364:	eee6 4a85 	vfma.f32	s9, s13, s10
 8018368:	eea7 6a25 	vfma.f32	s12, s14, s11
 801836c:	edc3 6a00 	vstr	s13, [r3]
 8018370:	ed83 7a03 	vstr	s14, [r3, #12]
 8018374:	edc3 7a06 	vstr	s15, [r3, #24]
 8018378:	edc3 3a01 	vstr	s7, [r3, #4]
 801837c:	edc3 4a04 	vstr	s9, [r3, #16]
 8018380:	ed83 6a07 	vstr	s12, [r3, #28]
 8018384:	bd38      	pop	{r3, r4, r5, pc}
 8018386:	eec6 2a23 	vdiv.f32	s5, s12, s7
 801838a:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 801838e:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8018392:	eeb0 6a63 	vmov.f32	s12, s7
 8018396:	eea4 3a22 	vfma.f32	s6, s8, s5
 801839a:	eeb0 4ae7 	vabs.f32	s8, s15
 801839e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80183a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a6:	d4bb      	bmi.n	8018320 <getRotationMatrix+0xa4>
 80183a8:	ee87 4a86 	vdiv.f32	s8, s15, s12
 80183ac:	eef0 3a43 	vmov.f32	s7, s6
 80183b0:	eee4 3a04 	vfma.f32	s7, s8, s8
 80183b4:	e7be      	b.n	8018334 <getRotationMatrix+0xb8>
 80183b6:	bf00      	nop
 80183b8:	00000000 	.word	0x00000000

080183bc <kf_update>:
 80183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c0:	ed2d 8b10 	vpush	{d8-d15}
 80183c4:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 80183c8:	3901      	subs	r1, #1
 80183ca:	f8dd 4490 	ldr.w	r4, [sp, #1168]	@ 0x490
 80183ce:	9303      	str	r3, [sp, #12]
 80183d0:	ed94 2a00 	vldr	s4, [r4]
 80183d4:	edd4 2a01 	vldr	s5, [r4, #4]
 80183d8:	ed94 3a02 	vldr	s6, [r4, #8]
 80183dc:	edd4 3a03 	vldr	s7, [r4, #12]
 80183e0:	ed94 4a04 	vldr	s8, [r4, #16]
 80183e4:	edd4 4a05 	vldr	s9, [r4, #20]
 80183e8:	ed94 5a06 	vldr	s10, [r4, #24]
 80183ec:	edd4 5a07 	vldr	s11, [r4, #28]
 80183f0:	ed94 6a08 	vldr	s12, [r4, #32]
 80183f4:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 80183f8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80183fc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018400:	ed9f 8a1c 	vldr	s16, [pc, #112]	@ 8018474 <kf_update+0xb8>
 8018404:	9104      	str	r1, [sp, #16]
 8018406:	ab0b      	add	r3, sp, #44	@ 0x2c
 8018408:	ee22 2a02 	vmul.f32	s4, s4, s4
 801840c:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8018410:	ee23 3a03 	vmul.f32	s6, s6, s6
 8018414:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8018418:	ee24 4a04 	vmul.f32	s8, s8, s8
 801841c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8018420:	ee25 5a05 	vmul.f32	s10, s10, s10
 8018424:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8018428:	ee26 6a06 	vmul.f32	s12, s12, s12
 801842c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018430:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018434:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018438:	9302      	str	r3, [sp, #8]
 801843a:	2300      	movs	r3, #0
 801843c:	4606      	mov	r6, r0
 801843e:	9200      	str	r2, [sp, #0]
 8018440:	ed8d 2a0b 	vstr	s4, [sp, #44]	@ 0x2c
 8018444:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
 8018448:	ed8d 3a0d 	vstr	s6, [sp, #52]	@ 0x34
 801844c:	edcd 3a0e 	vstr	s7, [sp, #56]	@ 0x38
 8018450:	ed8d 4a0f 	vstr	s8, [sp, #60]	@ 0x3c
 8018454:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 8018458:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
 801845c:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8018460:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8018464:	edcd 6a14 	vstr	s13, [sp, #80]	@ 0x50
 8018468:	ed8d 7a15 	vstr	s14, [sp, #84]	@ 0x54
 801846c:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 8018470:	9301      	str	r3, [sp, #4]
 8018472:	e010      	b.n	8018496 <kf_update+0xda>
 8018474:	00000000 	.word	0x00000000
 8018478:	9a00      	ldr	r2, [sp, #0]
 801847a:	9b01      	ldr	r3, [sp, #4]
 801847c:	3204      	adds	r2, #4
 801847e:	9200      	str	r2, [sp, #0]
 8018480:	9a02      	ldr	r2, [sp, #8]
 8018482:	3204      	adds	r2, #4
 8018484:	9202      	str	r2, [sp, #8]
 8018486:	9a03      	ldr	r2, [sp, #12]
 8018488:	3301      	adds	r3, #1
 801848a:	3204      	adds	r2, #4
 801848c:	2b0c      	cmp	r3, #12
 801848e:	9301      	str	r3, [sp, #4]
 8018490:	9203      	str	r2, [sp, #12]
 8018492:	f000 857b 	beq.w	8018f8c <kf_update+0xbd0>
 8018496:	9a04      	ldr	r2, [sp, #16]
 8018498:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801849c:	9204      	str	r2, [sp, #16]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d0ea      	beq.n	8018478 <kf_update+0xbc>
 80184a2:	9a03      	ldr	r2, [sp, #12]
 80184a4:	ed8d 8a17 	vstr	s16, [sp, #92]	@ 0x5c
 80184a8:	f106 0328 	add.w	r3, r6, #40	@ 0x28
 80184ac:	ac17      	add	r4, sp, #92	@ 0x5c
 80184ae:	edd2 da00 	vldr	s27, [r2]
 80184b2:	ed92 ea0c 	vldr	s28, [r2, #48]	@ 0x30
 80184b6:	edd2 ea18 	vldr	s29, [r2, #96]	@ 0x60
 80184ba:	ed92 fa24 	vldr	s30, [r2, #144]	@ 0x90
 80184be:	edd2 fa30 	vldr	s31, [r2, #192]	@ 0xc0
 80184c2:	edd2 6a3c 	vldr	s13, [r2, #240]	@ 0xf0
 80184c6:	ed92 6a48 	vldr	s12, [r2, #288]	@ 0x120
 80184ca:	edd2 5a54 	vldr	s11, [r2, #336]	@ 0x150
 80184ce:	ed92 5a60 	vldr	s10, [r2, #384]	@ 0x180
 80184d2:	9305      	str	r3, [sp, #20]
 80184d4:	ed8d 8a18 	vstr	s16, [sp, #96]	@ 0x60
 80184d8:	ed8d 8a19 	vstr	s16, [sp, #100]	@ 0x64
 80184dc:	ed8d 8a1a 	vstr	s16, [sp, #104]	@ 0x68
 80184e0:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 80184e4:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 80184e8:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 80184ec:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 80184f0:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 80184f4:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 80184f8:	4622      	mov	r2, r4
 80184fa:	ecb3 7a01 	vldmia	r3!, {s14}
 80184fe:	ecf2 7a01 	vldmia	r2!, {s15}
 8018502:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801850a:	d006      	beq.n	801851a <kf_update+0x15e>
 801850c:	eef5 da40 	vcmp.f32	s27, #0.0
 8018510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018514:	bf18      	it	ne
 8018516:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 801851a:	ed93 7a08 	vldr	s14, [r3, #32]
 801851e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018526:	d006      	beq.n	8018536 <kf_update+0x17a>
 8018528:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801852c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018530:	bf18      	it	ne
 8018532:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8018536:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 801853a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018542:	d006      	beq.n	8018552 <kf_update+0x196>
 8018544:	eef5 ea40 	vcmp.f32	s29, #0.0
 8018548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801854c:	bf18      	it	ne
 801854e:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8018552:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8018556:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801855a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801855e:	d006      	beq.n	801856e <kf_update+0x1b2>
 8018560:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8018564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018568:	bf18      	it	ne
 801856a:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 801856e:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8018572:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801857a:	d006      	beq.n	801858a <kf_update+0x1ce>
 801857c:	eef5 fa40 	vcmp.f32	s31, #0.0
 8018580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018584:	bf18      	it	ne
 8018586:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801858a:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 801858e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018596:	d006      	beq.n	80185a6 <kf_update+0x1ea>
 8018598:	eef5 6a40 	vcmp.f32	s13, #0.0
 801859c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a0:	bf18      	it	ne
 80185a2:	eee7 7a26 	vfmane.f32	s15, s14, s13
 80185a6:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 80185aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80185ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b2:	d006      	beq.n	80185c2 <kf_update+0x206>
 80185b4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80185b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185bc:	bf18      	it	ne
 80185be:	eee7 7a06 	vfmane.f32	s15, s14, s12
 80185c2:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 80185c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80185ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ce:	d006      	beq.n	80185de <kf_update+0x222>
 80185d0:	eef5 5a40 	vcmp.f32	s11, #0.0
 80185d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d8:	bf18      	it	ne
 80185da:	eee7 7a25 	vfmane.f32	s15, s14, s11
 80185de:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 80185e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80185e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ea:	d006      	beq.n	80185fa <kf_update+0x23e>
 80185ec:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80185f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f4:	bf18      	it	ne
 80185f6:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80185fa:	4299      	cmp	r1, r3
 80185fc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8018600:	f47f af7b 	bne.w	80184fa <kf_update+0x13e>
 8018604:	eef5 da40 	vcmp.f32	s27, #0.0
 8018608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801860c:	eddd ba17 	vldr	s23, [sp, #92]	@ 0x5c
 8018610:	f040 8492 	bne.w	8018f38 <kf_update+0xb7c>
 8018614:	eef0 7a6d 	vmov.f32	s15, s27
 8018618:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801861c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018620:	ed9d ca18 	vldr	s24, [sp, #96]	@ 0x60
 8018624:	d006      	beq.n	8018634 <kf_update+0x278>
 8018626:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801862e:	bf18      	it	ne
 8018630:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 8018634:	eef5 ea40 	vcmp.f32	s29, #0.0
 8018638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801863c:	ed9d aa19 	vldr	s20, [sp, #100]	@ 0x64
 8018640:	d006      	beq.n	8018650 <kf_update+0x294>
 8018642:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8018646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801864a:	bf18      	it	ne
 801864c:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8018650:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8018654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018658:	ed9d da1a 	vldr	s26, [sp, #104]	@ 0x68
 801865c:	d006      	beq.n	801866c <kf_update+0x2b0>
 801865e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8018662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018666:	bf18      	it	ne
 8018668:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 801866c:	eef5 fa40 	vcmp.f32	s31, #0.0
 8018670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018674:	eddd ca1b 	vldr	s25, [sp, #108]	@ 0x6c
 8018678:	d006      	beq.n	8018688 <kf_update+0x2cc>
 801867a:	eef5 ca40 	vcmp.f32	s25, #0.0
 801867e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018682:	bf18      	it	ne
 8018684:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8018688:	eef5 6a40 	vcmp.f32	s13, #0.0
 801868c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018690:	ed9d ba1c 	vldr	s22, [sp, #112]	@ 0x70
 8018694:	d006      	beq.n	80186a4 <kf_update+0x2e8>
 8018696:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869e:	bf18      	it	ne
 80186a0:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 80186a4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80186a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ac:	eddd aa1d 	vldr	s21, [sp, #116]	@ 0x74
 80186b0:	d006      	beq.n	80186c0 <kf_update+0x304>
 80186b2:	eef5 aa40 	vcmp.f32	s21, #0.0
 80186b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ba:	bf18      	it	ne
 80186bc:	eeea 7a86 	vfmane.f32	s15, s21, s12
 80186c0:	eef5 5a40 	vcmp.f32	s11, #0.0
 80186c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186c8:	eddd 9a1e 	vldr	s19, [sp, #120]	@ 0x78
 80186cc:	d006      	beq.n	80186dc <kf_update+0x320>
 80186ce:	eef5 9a40 	vcmp.f32	s19, #0.0
 80186d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186d6:	bf18      	it	ne
 80186d8:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 80186dc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80186e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e4:	ed9d 9a1f 	vldr	s18, [sp, #124]	@ 0x7c
 80186e8:	d006      	beq.n	80186f8 <kf_update+0x33c>
 80186ea:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80186ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186f2:	bf18      	it	ne
 80186f4:	eee9 7a05 	vfmane.f32	s15, s18, s10
 80186f8:	9b02      	ldr	r3, [sp, #8]
 80186fa:	ed93 7a00 	vldr	s14, [r3]
 80186fe:	9b01      	ldr	r3, [sp, #4]
 8018700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018704:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8018708:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 801870c:	2b05      	cmp	r3, #5
 801870e:	ee6b ba87 	vmul.f32	s23, s23, s14
 8018712:	ee2c ca07 	vmul.f32	s24, s24, s14
 8018716:	ee2a aa07 	vmul.f32	s20, s20, s14
 801871a:	ee2d da07 	vmul.f32	s26, s26, s14
 801871e:	ee67 ca2c 	vmul.f32	s25, s14, s25
 8018722:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8018726:	ee67 aa2a 	vmul.f32	s21, s14, s21
 801872a:	ee69 9a87 	vmul.f32	s19, s19, s14
 801872e:	ee29 9a07 	vmul.f32	s18, s18, s14
 8018732:	edcd ba17 	vstr	s23, [sp, #92]	@ 0x5c
 8018736:	ed8d ca18 	vstr	s24, [sp, #96]	@ 0x60
 801873a:	ed8d aa19 	vstr	s20, [sp, #100]	@ 0x64
 801873e:	ed8d da1a 	vstr	s26, [sp, #104]	@ 0x68
 8018742:	edcd ca1b 	vstr	s25, [sp, #108]	@ 0x6c
 8018746:	ed8d ba1c 	vstr	s22, [sp, #112]	@ 0x70
 801874a:	edcd aa1d 	vstr	s21, [sp, #116]	@ 0x74
 801874e:	edcd 9a1e 	vstr	s19, [sp, #120]	@ 0x78
 8018752:	ed8d 9a1f 	vstr	s18, [sp, #124]	@ 0x7c
 8018756:	f340 83eb 	ble.w	8018f30 <kf_update+0xb74>
 801875a:	eef5 da40 	vcmp.f32	s27, #0.0
 801875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018762:	f000 8456 	beq.w	8019012 <kf_update+0xc56>
 8018766:	edd6 7a01 	vldr	s15, [r6, #4]
 801876a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018772:	f040 8477 	bne.w	8019064 <kf_update+0xca8>
 8018776:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801877e:	d008      	beq.n	8018792 <kf_update+0x3d6>
 8018780:	ed96 7a02 	vldr	s14, [r6, #8]
 8018784:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801878c:	bf18      	it	ne
 801878e:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8018792:	eef5 ea40 	vcmp.f32	s29, #0.0
 8018796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879a:	d008      	beq.n	80187ae <kf_update+0x3f2>
 801879c:	ed96 7a03 	vldr	s14, [r6, #12]
 80187a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80187a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a8:	bf18      	it	ne
 80187aa:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 80187ae:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80187b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b6:	d008      	beq.n	80187ca <kf_update+0x40e>
 80187b8:	ed96 7a04 	vldr	s14, [r6, #16]
 80187bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80187c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c4:	bf18      	it	ne
 80187c6:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80187ca:	eef5 fa40 	vcmp.f32	s31, #0.0
 80187ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d2:	d008      	beq.n	80187e6 <kf_update+0x42a>
 80187d4:	ed96 7a05 	vldr	s14, [r6, #20]
 80187d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80187dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e0:	bf18      	it	ne
 80187e2:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 80187e6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80187ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ee:	d008      	beq.n	8018802 <kf_update+0x446>
 80187f0:	ed96 7a06 	vldr	s14, [r6, #24]
 80187f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80187f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fc:	bf18      	it	ne
 80187fe:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8018802:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801880a:	d008      	beq.n	801881e <kf_update+0x462>
 801880c:	ed96 7a07 	vldr	s14, [r6, #28]
 8018810:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018818:	bf18      	it	ne
 801881a:	eee7 7a06 	vfmane.f32	s15, s14, s12
 801881e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8018822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018826:	d008      	beq.n	801883a <kf_update+0x47e>
 8018828:	ed96 7a08 	vldr	s14, [r6, #32]
 801882c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018834:	bf18      	it	ne
 8018836:	eee7 7a25 	vfmane.f32	s15, s14, s11
 801883a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018842:	d008      	beq.n	8018856 <kf_update+0x49a>
 8018844:	ed96 7a09 	vldr	s14, [r6, #36]	@ 0x24
 8018848:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018850:	bf18      	it	ne
 8018852:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8018856:	9b00      	ldr	r3, [sp, #0]
 8018858:	edd3 8a00 	vldr	s17, [r3]
 801885c:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8018860:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8018864:	2100      	movs	r1, #0
 8018866:	a868      	add	r0, sp, #416	@ 0x1a0
 8018868:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
 801886c:	edcd 5a08 	vstr	s11, [sp, #32]
 8018870:	ed8d 6a07 	vstr	s12, [sp, #28]
 8018874:	edcd 6a06 	vstr	s13, [sp, #24]
 8018878:	f008 ff0a 	bl	8021690 <memset>
 801887c:	ab68      	add	r3, sp, #416	@ 0x1a0
 801887e:	ed9d 5a09 	vldr	s10, [sp, #36]	@ 0x24
 8018882:	eddd 5a08 	vldr	s11, [sp, #32]
 8018886:	ed9d 6a07 	vldr	s12, [sp, #28]
 801888a:	eddd 6a06 	vldr	s13, [sp, #24]
 801888e:	a971      	add	r1, sp, #452	@ 0x1c4
 8018890:	461a      	mov	r2, r3
 8018892:	ecf4 7a01 	vldmia	r4!, {s15}
 8018896:	eef5 7a40 	vcmp.f32	s15, #0.0
 801889a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801889e:	d062      	beq.n	8018966 <kf_update+0x5aa>
 80188a0:	eef5 da40 	vcmp.f32	s27, #0.0
 80188a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a8:	d005      	beq.n	80188b6 <kf_update+0x4fa>
 80188aa:	ed92 7a00 	vldr	s14, [r2]
 80188ae:	eea7 7aad 	vfma.f32	s14, s15, s27
 80188b2:	ed82 7a00 	vstr	s14, [r2]
 80188b6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80188ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188be:	d005      	beq.n	80188cc <kf_update+0x510>
 80188c0:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 80188c4:	eea7 7a8e 	vfma.f32	s14, s15, s28
 80188c8:	ed82 7a09 	vstr	s14, [r2, #36]	@ 0x24
 80188cc:	eef5 ea40 	vcmp.f32	s29, #0.0
 80188d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d4:	d005      	beq.n	80188e2 <kf_update+0x526>
 80188d6:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 80188da:	eea7 7aae 	vfma.f32	s14, s15, s29
 80188de:	ed82 7a12 	vstr	s14, [r2, #72]	@ 0x48
 80188e2:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80188e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ea:	d005      	beq.n	80188f8 <kf_update+0x53c>
 80188ec:	ed92 7a1b 	vldr	s14, [r2, #108]	@ 0x6c
 80188f0:	eea7 7a8f 	vfma.f32	s14, s15, s30
 80188f4:	ed82 7a1b 	vstr	s14, [r2, #108]	@ 0x6c
 80188f8:	eef5 fa40 	vcmp.f32	s31, #0.0
 80188fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018900:	d005      	beq.n	801890e <kf_update+0x552>
 8018902:	ed92 7a24 	vldr	s14, [r2, #144]	@ 0x90
 8018906:	eea7 7aaf 	vfma.f32	s14, s15, s31
 801890a:	ed82 7a24 	vstr	s14, [r2, #144]	@ 0x90
 801890e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018916:	d005      	beq.n	8018924 <kf_update+0x568>
 8018918:	ed92 7a2d 	vldr	s14, [r2, #180]	@ 0xb4
 801891c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018920:	ed82 7a2d 	vstr	s14, [r2, #180]	@ 0xb4
 8018924:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801892c:	d005      	beq.n	801893a <kf_update+0x57e>
 801892e:	ed92 7a36 	vldr	s14, [r2, #216]	@ 0xd8
 8018932:	eea7 7a86 	vfma.f32	s14, s15, s12
 8018936:	ed82 7a36 	vstr	s14, [r2, #216]	@ 0xd8
 801893a:	eef5 5a40 	vcmp.f32	s11, #0.0
 801893e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018942:	d005      	beq.n	8018950 <kf_update+0x594>
 8018944:	ed92 7a3f 	vldr	s14, [r2, #252]	@ 0xfc
 8018948:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801894c:	ed82 7a3f 	vstr	s14, [r2, #252]	@ 0xfc
 8018950:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8018954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018958:	d005      	beq.n	8018966 <kf_update+0x5aa>
 801895a:	ed92 7a48 	vldr	s14, [r2, #288]	@ 0x120
 801895e:	eea7 7a85 	vfma.f32	s14, s15, s10
 8018962:	ed82 7a48 	vstr	s14, [r2, #288]	@ 0x120
 8018966:	3204      	adds	r2, #4
 8018968:	4291      	cmp	r1, r2
 801896a:	d192      	bne.n	8018892 <kf_update+0x4d6>
 801896c:	afb9      	add	r7, sp, #740	@ 0x2e4
 801896e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018972:	a868      	add	r0, sp, #416	@ 0x1a0
 8018974:	463a      	mov	r2, r7
 8018976:	f04f 0b02 	mov.w	fp, #2
 801897a:	f04f 0e03 	mov.w	lr, #3
 801897e:	f04f 0c04 	mov.w	ip, #4
 8018982:	f04f 0a05 	mov.w	sl, #5
 8018986:	f04f 0906 	mov.w	r9, #6
 801898a:	f04f 0807 	mov.w	r8, #7
 801898e:	2408      	movs	r4, #8
 8018990:	2100      	movs	r1, #0
 8018992:	9306      	str	r3, [sp, #24]
 8018994:	e07b      	b.n	8018a8e <kf_update+0x6d2>
 8018996:	edd0 7a00 	vldr	s15, [r0]
 801899a:	ed82 8a01 	vstr	s16, [r2, #4]
 801899e:	eef1 7a67 	vneg.f32	s15, s15
 80189a2:	2901      	cmp	r1, #1
 80189a4:	edc0 7a00 	vstr	s15, [r0]
 80189a8:	f1a4 0507 	sub.w	r5, r4, #7
 80189ac:	f000 8110 	beq.w	8018bd0 <kf_update+0x814>
 80189b0:	ab68      	add	r3, sp, #416	@ 0x1a0
 80189b2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80189b6:	edd5 7a00 	vldr	s15, [r5]
 80189ba:	ed82 8a02 	vstr	s16, [r2, #8]
 80189be:	eef1 7a67 	vneg.f32	s15, s15
 80189c2:	2902      	cmp	r1, #2
 80189c4:	edc5 7a00 	vstr	s15, [r5]
 80189c8:	f000 80ef 	beq.w	8018baa <kf_update+0x7ee>
 80189cc:	ab68      	add	r3, sp, #416	@ 0x1a0
 80189ce:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80189d2:	edd5 7a00 	vldr	s15, [r5]
 80189d6:	ed82 8a03 	vstr	s16, [r2, #12]
 80189da:	eef1 7a67 	vneg.f32	s15, s15
 80189de:	2903      	cmp	r1, #3
 80189e0:	edc5 7a00 	vstr	s15, [r5]
 80189e4:	d176      	bne.n	8018ad4 <kf_update+0x718>
 80189e6:	edd0 7a03 	vldr	s15, [r0, #12]
 80189ea:	ed82 8a04 	vstr	s16, [r2, #16]
 80189ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80189f2:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 80189f6:	edc0 7a03 	vstr	s15, [r0, #12]
 80189fa:	edd5 7a00 	vldr	s15, [r5]
 80189fe:	ed82 8a05 	vstr	s16, [r2, #20]
 8018a02:	eef1 7a67 	vneg.f32	s15, s15
 8018a06:	edc5 7a00 	vstr	s15, [r5]
 8018a0a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8018a0e:	edd5 7a00 	vldr	s15, [r5]
 8018a12:	ed82 8a06 	vstr	s16, [r2, #24]
 8018a16:	eef1 7a67 	vneg.f32	s15, s15
 8018a1a:	edc5 7a00 	vstr	s15, [r5]
 8018a1e:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018a20:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8018a24:	edd5 7a00 	vldr	s15, [r5]
 8018a28:	ed82 8a07 	vstr	s16, [r2, #28]
 8018a2c:	eef1 7a67 	vneg.f32	s15, s15
 8018a30:	2907      	cmp	r1, #7
 8018a32:	edc5 7a00 	vstr	s15, [r5]
 8018a36:	f040 80a4 	bne.w	8018b82 <kf_update+0x7c6>
 8018a3a:	edd0 7a07 	vldr	s15, [r0, #28]
 8018a3e:	ed82 8a08 	vstr	s16, [r2, #32]
 8018a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a46:	edc0 7a07 	vstr	s15, [r0, #28]
 8018a4a:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018a4c:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8018a50:	edd5 7a00 	vldr	s15, [r5]
 8018a54:	00a5      	lsls	r5, r4, #2
 8018a56:	eef1 7a67 	vneg.f32	s15, s15
 8018a5a:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018a5c:	3101      	adds	r1, #1
 8018a5e:	441d      	add	r5, r3
 8018a60:	2909      	cmp	r1, #9
 8018a62:	edc5 7a00 	vstr	s15, [r5]
 8018a66:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8018a6a:	f104 0409 	add.w	r4, r4, #9
 8018a6e:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8018a72:	f108 0809 	add.w	r8, r8, #9
 8018a76:	f109 0909 	add.w	r9, r9, #9
 8018a7a:	f10a 0a09 	add.w	sl, sl, #9
 8018a7e:	f10c 0c09 	add.w	ip, ip, #9
 8018a82:	f10e 0e09 	add.w	lr, lr, #9
 8018a86:	f10b 0b09 	add.w	fp, fp, #9
 8018a8a:	f000 80d2 	beq.w	8018c32 <kf_update+0x876>
 8018a8e:	ed82 8a00 	vstr	s16, [r2]
 8018a92:	2900      	cmp	r1, #0
 8018a94:	f47f af7f 	bne.w	8018996 <kf_update+0x5da>
 8018a98:	eddd 7a68 	vldr	s15, [sp, #416]	@ 0x1a0
 8018a9c:	ed82 8a01 	vstr	s16, [r2, #4]
 8018aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018aa4:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018aa6:	1fe5      	subs	r5, r4, #7
 8018aa8:	edc0 7a00 	vstr	s15, [r0]
 8018aac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8018ab0:	edd5 7a00 	vldr	s15, [r5]
 8018ab4:	ed82 8a02 	vstr	s16, [r2, #8]
 8018ab8:	eef1 7a67 	vneg.f32	s15, s15
 8018abc:	edc5 7a00 	vstr	s15, [r5]
 8018ac0:	ed82 8a03 	vstr	s16, [r2, #12]
 8018ac4:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8018ac8:	edd5 7a00 	vldr	s15, [r5]
 8018acc:	eef1 7a67 	vneg.f32	s15, s15
 8018ad0:	edc5 7a00 	vstr	s15, [r5]
 8018ad4:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018ad6:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8018ada:	edd5 7a00 	vldr	s15, [r5]
 8018ade:	ed82 8a04 	vstr	s16, [r2, #16]
 8018ae2:	eef1 7a67 	vneg.f32	s15, s15
 8018ae6:	2904      	cmp	r1, #4
 8018ae8:	edc5 7a00 	vstr	s15, [r5]
 8018aec:	d02d      	beq.n	8018b4a <kf_update+0x78e>
 8018aee:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018af0:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8018af4:	edd5 7a00 	vldr	s15, [r5]
 8018af8:	ed82 8a05 	vstr	s16, [r2, #20]
 8018afc:	eef1 7a67 	vneg.f32	s15, s15
 8018b00:	2905      	cmp	r1, #5
 8018b02:	edc5 7a00 	vstr	s15, [r5]
 8018b06:	d077      	beq.n	8018bf8 <kf_update+0x83c>
 8018b08:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018b0a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8018b0e:	edd5 7a00 	vldr	s15, [r5]
 8018b12:	ed82 8a06 	vstr	s16, [r2, #24]
 8018b16:	eef1 7a67 	vneg.f32	s15, s15
 8018b1a:	2906      	cmp	r1, #6
 8018b1c:	edc5 7a00 	vstr	s15, [r5]
 8018b20:	f47f af7d 	bne.w	8018a1e <kf_update+0x662>
 8018b24:	edd0 7a06 	vldr	s15, [r0, #24]
 8018b28:	ed82 8a07 	vstr	s16, [r2, #28]
 8018b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b30:	ed82 8a08 	vstr	s16, [r2, #32]
 8018b34:	edc0 7a06 	vstr	s15, [r0, #24]
 8018b38:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8018b3c:	edd5 7a00 	vldr	s15, [r5]
 8018b40:	eef1 7a67 	vneg.f32	s15, s15
 8018b44:	edc5 7a00 	vstr	s15, [r5]
 8018b48:	e77f      	b.n	8018a4a <kf_update+0x68e>
 8018b4a:	edd0 7a04 	vldr	s15, [r0, #16]
 8018b4e:	ed82 8a05 	vstr	s16, [r2, #20]
 8018b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b56:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8018b5a:	edc0 7a04 	vstr	s15, [r0, #16]
 8018b5e:	edd5 7a00 	vldr	s15, [r5]
 8018b62:	ed82 8a06 	vstr	s16, [r2, #24]
 8018b66:	eef1 7a67 	vneg.f32	s15, s15
 8018b6a:	edc5 7a00 	vstr	s15, [r5]
 8018b6e:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8018b72:	edd5 7a00 	vldr	s15, [r5]
 8018b76:	ed82 8a07 	vstr	s16, [r2, #28]
 8018b7a:	eef1 7a67 	vneg.f32	s15, s15
 8018b7e:	edc5 7a00 	vstr	s15, [r5]
 8018b82:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018b84:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8018b88:	edd5 7a00 	vldr	s15, [r5]
 8018b8c:	ed82 8a08 	vstr	s16, [r2, #32]
 8018b90:	eef1 7a67 	vneg.f32	s15, s15
 8018b94:	2908      	cmp	r1, #8
 8018b96:	edc5 7a00 	vstr	s15, [r5]
 8018b9a:	f47f af56 	bne.w	8018a4a <kf_update+0x68e>
 8018b9e:	edd0 7a08 	vldr	s15, [r0, #32]
 8018ba2:	00a5      	lsls	r5, r4, #2
 8018ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ba8:	e757      	b.n	8018a5a <kf_update+0x69e>
 8018baa:	edd0 7a02 	vldr	s15, [r0, #8]
 8018bae:	ed82 8a03 	vstr	s16, [r2, #12]
 8018bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bb6:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8018bba:	edc0 7a02 	vstr	s15, [r0, #8]
 8018bbe:	edd5 7a00 	vldr	s15, [r5]
 8018bc2:	ed82 8a04 	vstr	s16, [r2, #16]
 8018bc6:	eef1 7a67 	vneg.f32	s15, s15
 8018bca:	edc5 7a00 	vstr	s15, [r5]
 8018bce:	e78e      	b.n	8018aee <kf_update+0x732>
 8018bd0:	edd0 7a01 	vldr	s15, [r0, #4]
 8018bd4:	ed82 8a02 	vstr	s16, [r2, #8]
 8018bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bdc:	ab68      	add	r3, sp, #416	@ 0x1a0
 8018bde:	ed82 8a03 	vstr	s16, [r2, #12]
 8018be2:	edc0 7a01 	vstr	s15, [r0, #4]
 8018be6:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8018bea:	edd5 7a00 	vldr	s15, [r5]
 8018bee:	eef1 7a67 	vneg.f32	s15, s15
 8018bf2:	edc5 7a00 	vstr	s15, [r5]
 8018bf6:	e76d      	b.n	8018ad4 <kf_update+0x718>
 8018bf8:	edd0 7a05 	vldr	s15, [r0, #20]
 8018bfc:	ed82 8a06 	vstr	s16, [r2, #24]
 8018c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c04:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8018c08:	edc0 7a05 	vstr	s15, [r0, #20]
 8018c0c:	edd5 7a00 	vldr	s15, [r5]
 8018c10:	ed82 8a07 	vstr	s16, [r2, #28]
 8018c14:	eef1 7a67 	vneg.f32	s15, s15
 8018c18:	edc5 7a00 	vstr	s15, [r5]
 8018c1c:	ed82 8a08 	vstr	s16, [r2, #32]
 8018c20:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8018c24:	edd5 7a00 	vldr	s15, [r5]
 8018c28:	eef1 7a67 	vneg.f32	s15, s15
 8018c2c:	edc5 7a00 	vstr	s15, [r5]
 8018c30:	e70b      	b.n	8018a4a <kf_update+0x68e>
 8018c32:	9b06      	ldr	r3, [sp, #24]
 8018c34:	2400      	movs	r4, #0
 8018c36:	f506 70a2 	add.w	r0, r6, #324	@ 0x144
 8018c3a:	ecf3 3a01 	vldmia	r3!, {s7}
 8018c3e:	ed93 4a08 	vldr	s8, [r3, #32]
 8018c42:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
 8018c46:	ed93 5a1a 	vldr	s10, [r3, #104]	@ 0x68
 8018c4a:	edd3 5a23 	vldr	s11, [r3, #140]	@ 0x8c
 8018c4e:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 8018c52:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 8018c56:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8018c5a:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8018c5e:	4632      	mov	r2, r6
 8018c60:	4639      	mov	r1, r7
 8018c62:	eef5 3a40 	vcmp.f32	s7, #0.0
 8018c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c6a:	d00c      	beq.n	8018c86 <kf_update+0x8ca>
 8018c6c:	ed92 3a0a 	vldr	s6, [r2, #40]	@ 0x28
 8018c70:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c78:	d005      	beq.n	8018c86 <kf_update+0x8ca>
 8018c7a:	edd1 2a00 	vldr	s5, [r1]
 8018c7e:	eee3 2a83 	vfma.f32	s5, s7, s6
 8018c82:	edc1 2a00 	vstr	s5, [r1]
 8018c86:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8018c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8e:	d00c      	beq.n	8018caa <kf_update+0x8ee>
 8018c90:	ed92 3a0b 	vldr	s6, [r2, #44]	@ 0x2c
 8018c94:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c9c:	d005      	beq.n	8018caa <kf_update+0x8ee>
 8018c9e:	edd1 2a00 	vldr	s5, [r1]
 8018ca2:	eee4 2a03 	vfma.f32	s5, s8, s6
 8018ca6:	edc1 2a00 	vstr	s5, [r1]
 8018caa:	eef5 4a40 	vcmp.f32	s9, #0.0
 8018cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cb2:	d00c      	beq.n	8018cce <kf_update+0x912>
 8018cb4:	ed92 3a0c 	vldr	s6, [r2, #48]	@ 0x30
 8018cb8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cc0:	d005      	beq.n	8018cce <kf_update+0x912>
 8018cc2:	edd1 2a00 	vldr	s5, [r1]
 8018cc6:	eee4 2a83 	vfma.f32	s5, s9, s6
 8018cca:	edc1 2a00 	vstr	s5, [r1]
 8018cce:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8018cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd6:	d00c      	beq.n	8018cf2 <kf_update+0x936>
 8018cd8:	ed92 3a0d 	vldr	s6, [r2, #52]	@ 0x34
 8018cdc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce4:	d005      	beq.n	8018cf2 <kf_update+0x936>
 8018ce6:	edd1 2a00 	vldr	s5, [r1]
 8018cea:	eee5 2a03 	vfma.f32	s5, s10, s6
 8018cee:	edc1 2a00 	vstr	s5, [r1]
 8018cf2:	eef5 5a40 	vcmp.f32	s11, #0.0
 8018cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfa:	d00c      	beq.n	8018d16 <kf_update+0x95a>
 8018cfc:	ed92 3a0e 	vldr	s6, [r2, #56]	@ 0x38
 8018d00:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d08:	d005      	beq.n	8018d16 <kf_update+0x95a>
 8018d0a:	edd1 2a00 	vldr	s5, [r1]
 8018d0e:	eee5 2a83 	vfma.f32	s5, s11, s6
 8018d12:	edc1 2a00 	vstr	s5, [r1]
 8018d16:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1e:	d00c      	beq.n	8018d3a <kf_update+0x97e>
 8018d20:	ed92 3a0f 	vldr	s6, [r2, #60]	@ 0x3c
 8018d24:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d2c:	d005      	beq.n	8018d3a <kf_update+0x97e>
 8018d2e:	edd1 2a00 	vldr	s5, [r1]
 8018d32:	eee6 2a03 	vfma.f32	s5, s12, s6
 8018d36:	edc1 2a00 	vstr	s5, [r1]
 8018d3a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d42:	d00c      	beq.n	8018d5e <kf_update+0x9a2>
 8018d44:	ed92 3a10 	vldr	s6, [r2, #64]	@ 0x40
 8018d48:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d50:	d005      	beq.n	8018d5e <kf_update+0x9a2>
 8018d52:	edd1 2a00 	vldr	s5, [r1]
 8018d56:	eee6 2a83 	vfma.f32	s5, s13, s6
 8018d5a:	edc1 2a00 	vstr	s5, [r1]
 8018d5e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d66:	d00c      	beq.n	8018d82 <kf_update+0x9c6>
 8018d68:	ed92 3a11 	vldr	s6, [r2, #68]	@ 0x44
 8018d6c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d74:	d005      	beq.n	8018d82 <kf_update+0x9c6>
 8018d76:	edd1 2a00 	vldr	s5, [r1]
 8018d7a:	eee7 2a03 	vfma.f32	s5, s14, s6
 8018d7e:	edc1 2a00 	vstr	s5, [r1]
 8018d82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8a:	d00c      	beq.n	8018da6 <kf_update+0x9ea>
 8018d8c:	ed92 3a12 	vldr	s6, [r2, #72]	@ 0x48
 8018d90:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8018d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d98:	d005      	beq.n	8018da6 <kf_update+0x9ea>
 8018d9a:	edd1 2a00 	vldr	s5, [r1]
 8018d9e:	eee7 2a83 	vfma.f32	s5, s15, s6
 8018da2:	edc1 2a00 	vstr	s5, [r1]
 8018da6:	3224      	adds	r2, #36	@ 0x24
 8018da8:	4282      	cmp	r2, r0
 8018daa:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8018dae:	f47f af58 	bne.w	8018c62 <kf_update+0x8a6>
 8018db2:	3401      	adds	r4, #1
 8018db4:	2c09      	cmp	r4, #9
 8018db6:	f107 0704 	add.w	r7, r7, #4
 8018dba:	f47f af3e 	bne.w	8018c3a <kf_update+0x87e>
 8018dbe:	9805      	ldr	r0, [sp, #20]
 8018dc0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8018dc4:	a9b9      	add	r1, sp, #740	@ 0x2e4
 8018dc6:	f008 fc97 	bl	80216f8 <memcpy>
 8018dca:	eef5 ba40 	vcmp.f32	s23, #0.0
 8018dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd2:	d05f      	beq.n	8018e94 <kf_update+0xad8>
 8018dd4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ddc:	d05a      	beq.n	8018e94 <kf_update+0xad8>
 8018dde:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8018de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de6:	ee68 baab 	vmul.f32	s23, s17, s23
 8018dea:	f000 812c 	beq.w	8019046 <kf_update+0xc8a>
 8018dee:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8018df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df6:	ee2c ca28 	vmul.f32	s24, s24, s17
 8018dfa:	f000 8121 	beq.w	8019040 <kf_update+0xc84>
 8018dfe:	eeb5 da40 	vcmp.f32	s26, #0.0
 8018e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e06:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8018e0a:	f000 8114 	beq.w	8019036 <kf_update+0xc7a>
 8018e0e:	eef5 ca40 	vcmp.f32	s25, #0.0
 8018e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e16:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8018e1a:	eeb0 aa4c 	vmov.f32	s20, s24
 8018e1e:	f040 812f 	bne.w	8019080 <kf_update+0xcc4>
 8018e22:	eef0 ca47 	vmov.f32	s25, s14
 8018e26:	eeb0 da67 	vmov.f32	s26, s15
 8018e2a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8018e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e32:	d065      	beq.n	8018f00 <kf_update+0xb44>
 8018e34:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e3c:	f000 80f0 	beq.w	8019020 <kf_update+0xc64>
 8018e40:	eef0 7a48 	vmov.f32	s15, s16
 8018e44:	eef5 aa40 	vcmp.f32	s21, #0.0
 8018e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e4c:	ee28 7a8b 	vmul.f32	s14, s17, s22
 8018e50:	d17d      	bne.n	8018f4e <kf_update+0xb92>
 8018e52:	eef0 aa47 	vmov.f32	s21, s14
 8018e56:	eeb0 ba67 	vmov.f32	s22, s15
 8018e5a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8018e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e62:	f000 8082 	beq.w	8018f6a <kf_update+0xbae>
 8018e66:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6e:	f000 80da 	beq.w	8019026 <kf_update+0xc6a>
 8018e72:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e7a:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8018e7e:	eef0 7a48 	vmov.f32	s15, s16
 8018e82:	f040 812a 	bne.w	80190da <kf_update+0xd1e>
 8018e86:	eef0 8a49 	vmov.f32	s17, s18
 8018e8a:	eef0 9a67 	vmov.f32	s19, s15
 8018e8e:	eeb0 9a47 	vmov.f32	s18, s14
 8018e92:	e086      	b.n	8018fa2 <kf_update+0xbe6>
 8018e94:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8018e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e9c:	d005      	beq.n	8018eaa <kf_update+0xaee>
 8018e9e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea6:	f040 80f9 	bne.w	801909c <kf_update+0xce0>
 8018eaa:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8018eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eb2:	d071      	beq.n	8018f98 <kf_update+0xbdc>
 8018eb4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ebc:	f040 8116 	bne.w	80190ec <kf_update+0xd30>
 8018ec0:	eeb0 aa68 	vmov.f32	s20, s17
 8018ec4:	eef0 ba68 	vmov.f32	s23, s17
 8018ec8:	eeb5 da40 	vcmp.f32	s26, #0.0
 8018ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed0:	d007      	beq.n	8018ee2 <kf_update+0xb26>
 8018ed2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eda:	f040 80c7 	bne.w	801906c <kf_update+0xcb0>
 8018ede:	eeb0 da68 	vmov.f32	s26, s17
 8018ee2:	eef5 ca40 	vcmp.f32	s25, #0.0
 8018ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eea:	d09e      	beq.n	8018e2a <kf_update+0xa6e>
 8018eec:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef4:	f040 80f7 	bne.w	80190e6 <kf_update+0xd2a>
 8018ef8:	eeb0 ba68 	vmov.f32	s22, s17
 8018efc:	eef0 ca68 	vmov.f32	s25, s17
 8018f00:	eef5 aa40 	vcmp.f32	s21, #0.0
 8018f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f08:	d0a7      	beq.n	8018e5a <kf_update+0xa9e>
 8018f0a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f12:	f040 80ce 	bne.w	80190b2 <kf_update+0xcf6>
 8018f16:	eef5 9a40 	vcmp.f32	s19, #0.0
 8018f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f1e:	f000 8087 	beq.w	8019030 <kf_update+0xc74>
 8018f22:	eeb0 9a68 	vmov.f32	s18, s17
 8018f26:	eef0 9a68 	vmov.f32	s19, s17
 8018f2a:	eef0 aa68 	vmov.f32	s21, s17
 8018f2e:	e038      	b.n	8018fa2 <kf_update+0xbe6>
 8018f30:	9b00      	ldr	r3, [sp, #0]
 8018f32:	edd3 8a00 	vldr	s17, [r3]
 8018f36:	e493      	b.n	8018860 <kf_update+0x4a4>
 8018f38:	eef5 ba40 	vcmp.f32	s23, #0.0
 8018f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f40:	bf14      	ite	ne
 8018f42:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 8018f46:	eef0 7a6b 	vmoveq.f32	s15, s23
 8018f4a:	f7ff bb65 	b.w	8018618 <kf_update+0x25c>
 8018f4e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8018f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f56:	eeb0 ba67 	vmov.f32	s22, s15
 8018f5a:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8018f5e:	f040 80b2 	bne.w	80190c6 <kf_update+0xd0a>
 8018f62:	eef0 9a67 	vmov.f32	s19, s15
 8018f66:	eef0 aa47 	vmov.f32	s21, s14
 8018f6a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f72:	d014      	beq.n	8018f9e <kf_update+0xbe2>
 8018f74:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f7c:	d04d      	beq.n	801901a <kf_update+0xc5e>
 8018f7e:	eeb0 7a48 	vmov.f32	s14, s16
 8018f82:	ee68 8a89 	vmul.f32	s17, s17, s18
 8018f86:	eeb0 9a47 	vmov.f32	s18, s14
 8018f8a:	e00a      	b.n	8018fa2 <kf_update+0xbe6>
 8018f8c:	f20d 4d2c 	addw	sp, sp, #1068	@ 0x42c
 8018f90:	ecbd 8b10 	vpop	{d8-d15}
 8018f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f98:	eef0 ba4a 	vmov.f32	s23, s20
 8018f9c:	e794      	b.n	8018ec8 <kf_update+0xb0c>
 8018f9e:	eef0 8a49 	vmov.f32	s17, s18
 8018fa2:	edd6 3a01 	vldr	s7, [r6, #4]
 8018fa6:	ed96 4a02 	vldr	s8, [r6, #8]
 8018faa:	edd6 4a03 	vldr	s9, [r6, #12]
 8018fae:	ed96 5a04 	vldr	s10, [r6, #16]
 8018fb2:	edd6 5a05 	vldr	s11, [r6, #20]
 8018fb6:	ed96 6a06 	vldr	s12, [r6, #24]
 8018fba:	edd6 6a07 	vldr	s13, [r6, #28]
 8018fbe:	ed96 7a08 	vldr	s14, [r6, #32]
 8018fc2:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 8018fc6:	ee73 baab 	vadd.f32	s23, s7, s23
 8018fca:	ee34 aa0a 	vadd.f32	s20, s8, s20
 8018fce:	ee34 da8d 	vadd.f32	s26, s9, s26
 8018fd2:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8018fd6:	ee35 ba8b 	vadd.f32	s22, s11, s22
 8018fda:	ee76 aa2a 	vadd.f32	s21, s12, s21
 8018fde:	ee76 9aa9 	vadd.f32	s19, s13, s19
 8018fe2:	ee37 9a09 	vadd.f32	s18, s14, s18
 8018fe6:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8018fea:	edc6 ba01 	vstr	s23, [r6, #4]
 8018fee:	ed86 aa02 	vstr	s20, [r6, #8]
 8018ff2:	ed86 da03 	vstr	s26, [r6, #12]
 8018ff6:	edc6 ca04 	vstr	s25, [r6, #16]
 8018ffa:	ed86 ba05 	vstr	s22, [r6, #20]
 8018ffe:	edc6 aa06 	vstr	s21, [r6, #24]
 8019002:	edc6 9a07 	vstr	s19, [r6, #28]
 8019006:	ed86 9a08 	vstr	s18, [r6, #32]
 801900a:	edc6 8a09 	vstr	s17, [r6, #36]	@ 0x24
 801900e:	f7ff ba33 	b.w	8018478 <kf_update+0xbc>
 8019012:	eef0 7a6d 	vmov.f32	s15, s27
 8019016:	f7ff bbae 	b.w	8018776 <kf_update+0x3ba>
 801901a:	eeb0 9a68 	vmov.f32	s18, s17
 801901e:	e7c0      	b.n	8018fa2 <kf_update+0xbe6>
 8019020:	eeb0 ba68 	vmov.f32	s22, s17
 8019024:	e76c      	b.n	8018f00 <kf_update+0xb44>
 8019026:	eeb0 9a68 	vmov.f32	s18, s17
 801902a:	eef0 9a68 	vmov.f32	s19, s17
 801902e:	e7b8      	b.n	8018fa2 <kf_update+0xbe6>
 8019030:	eef0 aa69 	vmov.f32	s21, s19
 8019034:	e799      	b.n	8018f6a <kf_update+0xbae>
 8019036:	eeb0 da67 	vmov.f32	s26, s15
 801903a:	eeb0 aa4c 	vmov.f32	s20, s24
 801903e:	e750      	b.n	8018ee2 <kf_update+0xb26>
 8019040:	eeb0 aa4c 	vmov.f32	s20, s24
 8019044:	e740      	b.n	8018ec8 <kf_update+0xb0c>
 8019046:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801904a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801904e:	f43f af3b 	beq.w	8018ec8 <kf_update+0xb0c>
 8019052:	eeb5 da40 	vcmp.f32	s26, #0.0
 8019056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905a:	ee68 7a8a 	vmul.f32	s15, s17, s20
 801905e:	f47f aed6 	bne.w	8018e0e <kf_update+0xa52>
 8019062:	e7e8      	b.n	8019036 <kf_update+0xc7a>
 8019064:	ee67 7aad 	vmul.f32	s15, s15, s27
 8019068:	f7ff bb85 	b.w	8018776 <kf_update+0x3ba>
 801906c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8019070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019074:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8019078:	eef0 7a48 	vmov.f32	s15, s16
 801907c:	f43f aed1 	beq.w	8018e22 <kf_update+0xa66>
 8019080:	eeb0 da67 	vmov.f32	s26, s15
 8019084:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8019088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801908c:	ee68 7aac 	vmul.f32	s15, s17, s25
 8019090:	d126      	bne.n	80190e0 <kf_update+0xd24>
 8019092:	eeb0 ba67 	vmov.f32	s22, s15
 8019096:	eef0 ca47 	vmov.f32	s25, s14
 801909a:	e731      	b.n	8018f00 <kf_update+0xb44>
 801909c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80190a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a4:	ee2c ca28 	vmul.f32	s24, s24, s17
 80190a8:	eef0 ba48 	vmov.f32	s23, s16
 80190ac:	f47f aea7 	bne.w	8018dfe <kf_update+0xa42>
 80190b0:	e7c6      	b.n	8019040 <kf_update+0xc84>
 80190b2:	eef5 9a40 	vcmp.f32	s19, #0.0
 80190b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ba:	ee68 7aaa 	vmul.f32	s15, s17, s21
 80190be:	eeb0 7a48 	vmov.f32	s14, s16
 80190c2:	f43f af4e 	beq.w	8018f62 <kf_update+0xba6>
 80190c6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80190ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ce:	eef0 aa47 	vmov.f32	s21, s14
 80190d2:	ee28 7aa9 	vmul.f32	s14, s17, s19
 80190d6:	f43f aed6 	beq.w	8018e86 <kf_update+0xaca>
 80190da:	eef0 9a67 	vmov.f32	s19, s15
 80190de:	e750      	b.n	8018f82 <kf_update+0xbc6>
 80190e0:	eef0 ca47 	vmov.f32	s25, s14
 80190e4:	e6ae      	b.n	8018e44 <kf_update+0xa88>
 80190e6:	eeb0 7a48 	vmov.f32	s14, s16
 80190ea:	e7cb      	b.n	8019084 <kf_update+0xcc8>
 80190ec:	ed9f ca06 	vldr	s24, [pc, #24]	@ 8019108 <kf_update+0xd4c>
 80190f0:	eeb5 da40 	vcmp.f32	s26, #0.0
 80190f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f8:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80190fc:	eef0 ba4c 	vmov.f32	s23, s24
 8019100:	f47f ae85 	bne.w	8018e0e <kf_update+0xa52>
 8019104:	e797      	b.n	8019036 <kf_update+0xc7a>
 8019106:	bf00      	nop
 8019108:	00000000 	.word	0x00000000

0801910c <q2hpr>:
 801910c:	b510      	push	{r4, lr}
 801910e:	ed90 7a00 	vldr	s14, [r0]
 8019112:	edd0 6a01 	vldr	s13, [r0, #4]
 8019116:	edd0 7a02 	vldr	s15, [r0, #8]
 801911a:	edd0 4a03 	vldr	s9, [r0, #12]
 801911e:	ed2d 8b0a 	vpush	{d8-d12}
 8019122:	ee27 0a26 	vmul.f32	s0, s14, s13
 8019126:	ee27 5a27 	vmul.f32	s10, s14, s15
 801912a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801912e:	ee67 0a07 	vmul.f32	s1, s14, s14
 8019132:	ee26 aaa6 	vmul.f32	s20, s13, s13
 8019136:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801913a:	ee27 7a24 	vmul.f32	s14, s14, s9
 801913e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8019142:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019146:	ee70 9aa0 	vadd.f32	s19, s1, s1
 801914a:	ee3a aa0a 	vadd.f32	s20, s20, s20
 801914e:	ee36 ba06 	vadd.f32	s22, s12, s12
 8019152:	ee70 aa00 	vadd.f32	s21, s0, s0
 8019156:	ee35 ca05 	vadd.f32	s24, s10, s10
 801915a:	ee77 8a07 	vadd.f32	s17, s14, s14
 801915e:	ee75 baa5 	vadd.f32	s23, s11, s11
 8019162:	ee36 9aa6 	vadd.f32	s18, s13, s13
 8019166:	ee37 8aa7 	vadd.f32	s16, s15, s15
 801916a:	460c      	mov	r4, r1
 801916c:	bb8a      	cbnz	r2, 80191d2 <q2hpr+0xc6>
 801916e:	ee79 0a8b 	vadd.f32	s1, s19, s22
 8019172:	eeb7 ba00 	vmov.f32	s22, #112	@ 0x3f800000  1.0
 8019176:	ee7b 0a60 	vsub.f32	s1, s22, s1
 801917a:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 801917e:	f009 f94b 	bl	8022418 <atan2f>
 8019182:	eeb0 8a40 	vmov.f32	s16, s0
 8019186:	ed84 8a00 	vstr	s16, [r4]
 801918a:	ee38 0aab 	vadd.f32	s0, s17, s23
 801918e:	f009 f917 	bl	80223c0 <asinf>
 8019192:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8019196:	eef0 8a40 	vmov.f32	s17, s0
 801919a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 801919e:	ee3c 0a49 	vsub.f32	s0, s24, s18
 80191a2:	f009 f939 	bl	8022418 <atan2f>
 80191a6:	eef1 8a68 	vneg.f32	s17, s17
 80191aa:	eeb0 9a40 	vmov.f32	s18, s0
 80191ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80191b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191b6:	ed84 9a02 	vstr	s18, [r4, #8]
 80191ba:	edc4 8a01 	vstr	s17, [r4, #4]
 80191be:	d505      	bpl.n	80191cc <q2hpr+0xc0>
 80191c0:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8019218 <q2hpr+0x10c>
 80191c4:	ee38 8a00 	vadd.f32	s16, s16, s0
 80191c8:	ed84 8a00 	vstr	s16, [r4]
 80191cc:	ecbd 8b0a 	vpop	{d8-d12}
 80191d0:	bd10      	pop	{r4, pc}
 80191d2:	ee3c 0a49 	vsub.f32	s0, s24, s18
 80191d6:	f009 f8f3 	bl	80223c0 <asinf>
 80191da:	ee79 0a8a 	vadd.f32	s1, s19, s20
 80191de:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 80191e2:	ee79 0ae0 	vsub.f32	s1, s19, s1
 80191e6:	eeb0 9a40 	vmov.f32	s18, s0
 80191ea:	ee38 0aab 	vadd.f32	s0, s17, s23
 80191ee:	f009 f913 	bl	8022418 <atan2f>
 80191f2:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 80191f6:	eef0 8a40 	vmov.f32	s17, s0
 80191fa:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80191fe:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8019202:	eeb1 0a40 	vneg.f32	s0, s0
 8019206:	f009 f907 	bl	8022418 <atan2f>
 801920a:	eef1 8a68 	vneg.f32	s17, s17
 801920e:	eeb0 8a40 	vmov.f32	s16, s0
 8019212:	ed84 0a00 	vstr	s0, [r4]
 8019216:	e7ca      	b.n	80191ae <q2hpr+0xa2>
 8019218:	40c90fdb 	.word	0x40c90fdb

0801921c <llEvaluate.constprop.0>:
 801921c:	ed92 7a00 	vldr	s14, [r2]
 8019220:	edd0 7a00 	vldr	s15, [r0]
 8019224:	edd0 1a04 	vldr	s3, [r0, #16]
 8019228:	ed92 6a01 	vldr	s12, [r2, #4]
 801922c:	ed90 3a05 	vldr	s6, [r0, #20]
 8019230:	ed90 2a08 	vldr	s4, [r0, #32]
 8019234:	edd0 2a0c 	vldr	s5, [r0, #48]	@ 0x30
 8019238:	edd0 3a09 	vldr	s7, [r0, #36]	@ 0x24
 801923c:	edd0 4a0a 	vldr	s9, [r0, #40]	@ 0x28
 8019240:	ed90 4a0d 	vldr	s8, [r0, #52]	@ 0x34
 8019244:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 8019248:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
 801924c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019254:	b085      	sub	sp, #20
 8019256:	f10d 0810 	add.w	r8, sp, #16
 801925a:	2404      	movs	r4, #4
 801925c:	f101 0c10 	add.w	ip, r1, #16
 8019260:	2c04      	cmp	r4, #4
 8019262:	4606      	mov	r6, r0
 8019264:	f04f 0703 	mov.w	r7, #3
 8019268:	f04f 0502 	mov.w	r5, #2
 801926c:	ed92 7a02 	vldr	s14, [r2, #8]
 8019270:	edd2 7a03 	vldr	s15, [r2, #12]
 8019274:	edcd 6a00 	vstr	s13, [sp]
 8019278:	eea1 6ae6 	vfms.f32	s12, s3, s13
 801927c:	b263      	sxtb	r3, r4
 801927e:	eea6 7ac2 	vfms.f32	s14, s13, s4
 8019282:	eee6 7ae2 	vfms.f32	s15, s13, s5
 8019286:	eec6 6a03 	vdiv.f32	s13, s12, s6
 801928a:	eea6 7ae3 	vfms.f32	s14, s13, s7
 801928e:	eee6 7ac4 	vfms.f32	s15, s13, s8
 8019292:	edcd 6a01 	vstr	s13, [sp, #4]
 8019296:	eec7 6a24 	vdiv.f32	s13, s14, s9
 801929a:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801929e:	edcd 6a02 	vstr	s13, [sp, #8]
 80192a2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80192a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80192aa:	ed78 7a01 	vldmdb	r8!, {s15}
 80192ae:	ed6c 7a01 	vstmdb	ip!, {s15}
 80192b2:	d02a      	beq.n	801930a <llEvaluate.constprop.0+0xee>
 80192b4:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 80192b8:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 80192bc:	eb01 0983 	add.w	r9, r1, r3, lsl #2
 80192c0:	4472      	add	r2, lr
 80192c2:	edd2 6a00 	vldr	s13, [r2]
 80192c6:	ed99 7a00 	vldr	s14, [r9]
 80192ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80192ce:	3301      	adds	r3, #1
 80192d0:	b2da      	uxtb	r2, r3
 80192d2:	2a04      	cmp	r2, #4
 80192d4:	b25b      	sxtb	r3, r3
 80192d6:	edcc 7a00 	vstr	s15, [ip]
 80192da:	d1ed      	bne.n	80192b8 <llEvaluate.constprop.0+0x9c>
 80192dc:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 80192e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80192e4:	2dff      	cmp	r5, #255	@ 0xff
 80192e6:	ed8c 7a00 	vstr	s14, [ip]
 80192ea:	d015      	beq.n	8019318 <llEvaluate.constprop.0+0xfc>
 80192ec:	3c01      	subs	r4, #1
 80192ee:	b2e4      	uxtb	r4, r4
 80192f0:	ed78 7a01 	vldmdb	r8!, {s15}
 80192f4:	3d01      	subs	r5, #1
 80192f6:	2c04      	cmp	r4, #4
 80192f8:	b2ed      	uxtb	r5, r5
 80192fa:	f1a6 0614 	sub.w	r6, r6, #20
 80192fe:	f107 37ff 	add.w	r7, r7, #4294967295	@ 0xffffffff
 8019302:	b263      	sxtb	r3, r4
 8019304:	ed6c 7a01 	vstmdb	ip!, {s15}
 8019308:	d1d4      	bne.n	80192b4 <llEvaluate.constprop.0+0x98>
 801930a:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 801930e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019312:	ed8c 7a00 	vstr	s14, [ip]
 8019316:	e7e9      	b.n	80192ec <llEvaluate.constprop.0+0xd0>
 8019318:	b005      	add	sp, #20
 801931a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801931e:	bf00      	nop

08019320 <getMagStats.constprop.0>:
 8019320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019324:	4d74      	ldr	r5, [pc, #464]	@ (80194f8 <getMagStats.constprop.0+0x1d8>)
 8019326:	2400      	movs	r4, #0
 8019328:	601c      	str	r4, [r3, #0]
 801932a:	6014      	str	r4, [r2, #0]
 801932c:	f895 40a1 	ldrb.w	r4, [r5, #161]	@ 0xa1
 8019330:	f995 60a2 	ldrsb.w	r6, [r5, #162]	@ 0xa2
 8019334:	4684      	mov	ip, r0
 8019336:	f895 00a0 	ldrb.w	r0, [r5, #160]	@ 0xa0
 801933a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801933e:	42a0      	cmp	r0, r4
 8019340:	eec7 5a80 	vdiv.f32	s11, s15, s0
 8019344:	f106 0601 	add.w	r6, r6, #1
 8019348:	f000 80c9 	beq.w	80194de <getMagStats.constprop.0+0x1be>
 801934c:	1a36      	subs	r6, r6, r0
 801934e:	fb96 fef4 	sdiv	lr, r6, r4
 8019352:	fb04 661e 	mls	r6, r4, lr, r6
 8019356:	2e00      	cmp	r6, #0
 8019358:	bfb8      	it	lt
 801935a:	1936      	addlt	r6, r6, r4
 801935c:	fa0f fe86 	sxth.w	lr, r6
 8019360:	ee04 0a90 	vmov	s9, r0
 8019364:	ed9f 5a65 	vldr	s10, [pc, #404]	@ 80194fc <getMagStats.constprop.0+0x1dc>
 8019368:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 801936c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8019370:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8019374:	2800      	cmp	r0, #0
 8019376:	f000 80bc 	beq.w	80194f2 <getMagStats.constprop.0+0x1d2>
 801937a:	3801      	subs	r0, #1
 801937c:	fa5e f980 	uxtab	r9, lr, r0
 8019380:	ed9f 3a5f 	vldr	s6, [pc, #380]	@ 8019500 <getMagStats.constprop.0+0x1e0>
 8019384:	f8bc 8000 	ldrh.w	r8, [ip]
 8019388:	f8bc 7002 	ldrh.w	r7, [ip, #2]
 801938c:	f8bc 6004 	ldrh.w	r6, [ip, #4]
 8019390:	2000      	movs	r0, #0
 8019392:	e003      	b.n	801939c <getMagStats.constprop.0+0x7c>
 8019394:	ed92 3a00 	vldr	s6, [r2]
 8019398:	f10e 0e01 	add.w	lr, lr, #1
 801939c:	fb9e fcf4 	sdiv	ip, lr, r4
 80193a0:	fb04 ec1c 	mls	ip, r4, ip, lr
 80193a4:	fa5f fc8c 	uxtb.w	ip, ip
 80193a8:	f10c 0c04 	add.w	ip, ip, #4
 80193ac:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80193b0:	edd1 3a00 	vldr	s7, [r1]
 80193b4:	f8bc a0a2 	ldrh.w	sl, [ip, #162]	@ 0xa2
 80193b8:	f8bc b0a4 	ldrh.w	fp, [ip, #164]	@ 0xa4
 80193bc:	f8bc c0a6 	ldrh.w	ip, [ip, #166]	@ 0xa6
 80193c0:	ed91 4a04 	vldr	s8, [r1, #16]
 80193c4:	ed91 6a08 	vldr	s12, [r1, #32]
 80193c8:	ebaa 0a08 	sub.w	sl, sl, r8
 80193cc:	ebab 0b07 	sub.w	fp, fp, r7
 80193d0:	fa0f fa8a 	sxth.w	sl, sl
 80193d4:	ee07 aa10 	vmov	s14, sl
 80193d8:	fa0f fa8b 	sxth.w	sl, fp
 80193dc:	ee06 aa90 	vmov	s13, sl
 80193e0:	ebac 0c06 	sub.w	ip, ip, r6
 80193e4:	fa0f fc8c 	sxth.w	ip, ip
 80193e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80193ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80193f0:	ee07 ca90 	vmov	s15, ip
 80193f4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80193f8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80193fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019400:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019404:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8019408:	ee67 7a86 	vmul.f32	s15, s15, s12
 801940c:	ee16 ca90 	vmov	ip, s13
 8019410:	ee17 aa10 	vmov	sl, s14
 8019414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019418:	fb1c fc0c 	smulbb	ip, ip, ip
 801941c:	fa0f fa8a 	sxth.w	sl, sl
 8019420:	fb0a ca0a 	mla	sl, sl, sl, ip
 8019424:	ee17 ca90 	vmov	ip, s15
 8019428:	fa0f fc8c 	sxth.w	ip, ip
 801942c:	fb0c ac0c 	mla	ip, ip, ip, sl
 8019430:	ee07 ca90 	vmov	s15, ip
 8019434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019438:	f100 0b01 	add.w	fp, r0, #1
 801943c:	eef1 6ae7 	vsqrt.f32	s13, s15
 8019440:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8019444:	ee17 ca90 	vmov	ip, s15
 8019448:	fa0f fc8c 	sxth.w	ip, ip
 801944c:	ee07 ca10 	vmov	s14, ip
 8019450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019454:	ee77 7a45 	vsub.f32	s15, s14, s10
 8019458:	ee37 7a03 	vadd.f32	s14, s14, s6
 801945c:	eef0 7ae7 	vabs.f32	s15, s15
 8019460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019464:	ed82 7a00 	vstr	s14, [r2]
 8019468:	ee17 ca90 	vmov	ip, s15
 801946c:	fa0f fc8c 	sxth.w	ip, ip
 8019470:	fb0c fa0c 	mul.w	sl, ip, ip
 8019474:	ee07 aa90 	vmov	s15, sl
 8019478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801947c:	ee07 ca90 	vmov	s15, ip
 8019480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019484:	eef4 5ae7 	vcmpe.f32	s11, s15
 8019488:	edd3 7a00 	vldr	s15, [r3]
 801948c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019494:	bf48      	it	mi
 8019496:	fa5f f08b 	uxtbmi.w	r0, fp
 801949a:	45f1      	cmp	r9, lr
 801949c:	edc3 7a00 	vstr	s15, [r3]
 80194a0:	f47f af78 	bne.w	8019394 <getMagStats.constprop.0+0x74>
 80194a4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80194a8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8019504 <getMagStats.constprop.0+0x1e4>
 80194ac:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 80194b0:	eef1 7ae6 	vsqrt.f32	s15, s13
 80194b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80194b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80194bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c0:	bfb8      	it	lt
 80194c2:	eef0 7a47 	vmovlt.f32	s15, s14
 80194c6:	edc3 7a00 	vstr	s15, [r3]
 80194ca:	edd2 7a00 	vldr	s15, [r2]
 80194ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80194d2:	eec0 7a24 	vdiv.f32	s15, s0, s9
 80194d6:	edc2 7a00 	vstr	s15, [r2]
 80194da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194de:	fb96 fef0 	sdiv	lr, r6, r0
 80194e2:	fb00 661e 	mls	r6, r0, lr, r6
 80194e6:	ee04 0a90 	vmov	s9, r0
 80194ea:	fa0f fe86 	sxth.w	lr, r6
 80194ee:	4604      	mov	r4, r0
 80194f0:	e738      	b.n	8019364 <getMagStats.constprop.0+0x44>
 80194f2:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8019500 <getMagStats.constprop.0+0x1e0>
 80194f6:	e7d5      	b.n	80194a4 <getMagStats.constprop.0+0x184>
 80194f8:	2000036c 	.word	0x2000036c
 80194fc:	423c0000 	.word	0x423c0000
 8019500:	00000000 	.word	0x00000000
 8019504:	3f59999a 	.word	0x3f59999a

08019508 <MEMS_updateMagBufferIndex.constprop.0>:
 8019508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801950c:	4e6e      	ldr	r6, [pc, #440]	@ (80196c8 <MEMS_updateMagBufferIndex.constprop.0+0x1c0>)
 801950e:	2300      	movs	r3, #0
 8019510:	ed2d 8b02 	vpush	{d8}
 8019514:	f896 20a0 	ldrb.w	r2, [r6, #160]	@ 0xa0
 8019518:	f896 80a1 	ldrb.w	r8, [r6, #161]	@ 0xa1
 801951c:	e9c6 332a 	strd	r3, r3, [r6, #168]	@ 0xa8
 8019520:	e9c6 332c 	strd	r3, r3, [r6, #176]	@ 0xb0
 8019524:	e9c6 332e 	strd	r3, r3, [r6, #184]	@ 0xb8
 8019528:	f996 30a2 	ldrsb.w	r3, [r6, #162]	@ 0xa2
 801952c:	4542      	cmp	r2, r8
 801952e:	b089      	sub	sp, #36	@ 0x24
 8019530:	4682      	mov	sl, r0
 8019532:	f103 0301 	add.w	r3, r3, #1
 8019536:	f000 80c0 	beq.w	80196ba <MEMS_updateMagBufferIndex.constprop.0+0x1b2>
 801953a:	1a9b      	subs	r3, r3, r2
 801953c:	fb93 f5f8 	sdiv	r5, r3, r8
 8019540:	fb08 3315 	mls	r3, r8, r5, r3
 8019544:	2b00      	cmp	r3, #0
 8019546:	bfb8      	it	lt
 8019548:	4443      	addlt	r3, r8
 801954a:	b21d      	sxth	r5, r3
 801954c:	b93a      	cbnz	r2, 801955e <MEMS_updateMagBufferIndex.constprop.0+0x56>
 801954e:	23ff      	movs	r3, #255	@ 0xff
 8019550:	f886 30a2 	strb.w	r3, [r6, #162]	@ 0xa2
 8019554:	b009      	add	sp, #36	@ 0x24
 8019556:	ecbd 8b02 	vpop	{d8}
 801955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801955e:	f04f 0900 	mov.w	r9, #0
 8019562:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019566:	1953      	adds	r3, r2, r5
 8019568:	ee87 8a80 	vdiv.f32	s16, s15, s0
 801956c:	e9cd 9902 	strd	r9, r9, [sp, #8]
 8019570:	e9cd 9904 	strd	r9, r9, [sp, #16]
 8019574:	9307      	str	r3, [sp, #28]
 8019576:	f8cd 9018 	str.w	r9, [sp, #24]
 801957a:	2701      	movs	r7, #1
 801957c:	e01b      	b.n	80195b6 <MEMS_updateMagBufferIndex.constprop.0+0xae>
 801957e:	9a06      	ldr	r2, [sp, #24]
 8019580:	3c20      	subs	r4, #32
 8019582:	fa07 f404 	lsl.w	r4, r7, r4
 8019586:	4322      	orrs	r2, r4
 8019588:	f1bb 0f1f 	cmp.w	fp, #31
 801958c:	9206      	str	r2, [sp, #24]
 801958e:	d971      	bls.n	8019674 <MEMS_updateMagBufferIndex.constprop.0+0x16c>
 8019590:	9904      	ldr	r1, [sp, #16]
 8019592:	f1ab 0220 	sub.w	r2, fp, #32
 8019596:	fa07 f202 	lsl.w	r2, r7, r2
 801959a:	4311      	orrs	r1, r2
 801959c:	2b1f      	cmp	r3, #31
 801959e:	9104      	str	r1, [sp, #16]
 80195a0:	d96f      	bls.n	8019682 <MEMS_updateMagBufferIndex.constprop.0+0x17a>
 80195a2:	9a02      	ldr	r2, [sp, #8]
 80195a4:	3b20      	subs	r3, #32
 80195a6:	fa07 f303 	lsl.w	r3, r7, r3
 80195aa:	431a      	orrs	r2, r3
 80195ac:	9b07      	ldr	r3, [sp, #28]
 80195ae:	9202      	str	r2, [sp, #8]
 80195b0:	3501      	adds	r5, #1
 80195b2:	42ab      	cmp	r3, r5
 80195b4:	d06d      	beq.n	8019692 <MEMS_updateMagBufferIndex.constprop.0+0x18a>
 80195b6:	fb95 f3f8 	sdiv	r3, r5, r8
 80195ba:	fb08 5313 	mls	r3, r8, r3, r5
 80195be:	b2db      	uxtb	r3, r3
 80195c0:	f103 0b04 	add.w	fp, r3, #4
 80195c4:	eb06 02cb 	add.w	r2, r6, fp, lsl #3
 80195c8:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	@ 0xa2
 80195cc:	fb92 f0fa 	sdiv	r0, r2, sl
 80195d0:	fb0a 2210 	mls	r2, sl, r0, r2
 80195d4:	2a00      	cmp	r2, #0
 80195d6:	bfb8      	it	lt
 80195d8:	4452      	addlt	r2, sl
 80195da:	b213      	sxth	r3, r2
 80195dc:	ee00 3a10 	vmov	s0, r3
 80195e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80195e4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80195e8:	f009 f9c2 	bl	8022970 <roundf>
 80195ec:	eb06 02cb 	add.w	r2, r6, fp, lsl #3
 80195f0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80195f4:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	@ 0xa4
 80195f8:	fb92 f0fa 	sdiv	r0, r2, sl
 80195fc:	fb0a 2210 	mls	r2, sl, r0, r2
 8019600:	2a00      	cmp	r2, #0
 8019602:	bfb8      	it	lt
 8019604:	4452      	addlt	r2, sl
 8019606:	b213      	sxth	r3, r2
 8019608:	ee00 3a10 	vmov	s0, r3
 801960c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019610:	edcd 7a01 	vstr	s15, [sp, #4]
 8019614:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019618:	f009 f9aa 	bl	8022970 <roundf>
 801961c:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 8019620:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019624:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8019628:	fb93 f2fa 	sdiv	r2, r3, sl
 801962c:	fb0a 3312 	mls	r3, sl, r2, r3
 8019630:	2b00      	cmp	r3, #0
 8019632:	bfb8      	it	lt
 8019634:	4453      	addlt	r3, sl
 8019636:	b21b      	sxth	r3, r3
 8019638:	ee00 3a10 	vmov	s0, r3
 801963c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019640:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8019644:	edcd 7a01 	vstr	s15, [sp, #4]
 8019648:	ee20 0a08 	vmul.f32	s0, s0, s16
 801964c:	f009 f990 	bl	8022970 <roundf>
 8019650:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019654:	f89d b004 	ldrb.w	fp, [sp, #4]
 8019658:	edcd 7a01 	vstr	s15, [sp, #4]
 801965c:	2c1f      	cmp	r4, #31
 801965e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019662:	d88c      	bhi.n	801957e <MEMS_updateMagBufferIndex.constprop.0+0x76>
 8019664:	9a05      	ldr	r2, [sp, #20]
 8019666:	fa07 f404 	lsl.w	r4, r7, r4
 801966a:	4322      	orrs	r2, r4
 801966c:	f1bb 0f1f 	cmp.w	fp, #31
 8019670:	9205      	str	r2, [sp, #20]
 8019672:	d88d      	bhi.n	8019590 <MEMS_updateMagBufferIndex.constprop.0+0x88>
 8019674:	9903      	ldr	r1, [sp, #12]
 8019676:	fa07 f20b 	lsl.w	r2, r7, fp
 801967a:	4311      	orrs	r1, r2
 801967c:	2b1f      	cmp	r3, #31
 801967e:	9103      	str	r1, [sp, #12]
 8019680:	d88f      	bhi.n	80195a2 <MEMS_updateMagBufferIndex.constprop.0+0x9a>
 8019682:	fa07 f303 	lsl.w	r3, r7, r3
 8019686:	ea49 0903 	orr.w	r9, r9, r3
 801968a:	9b07      	ldr	r3, [sp, #28]
 801968c:	3501      	adds	r5, #1
 801968e:	42ab      	cmp	r3, r5
 8019690:	d191      	bne.n	80195b6 <MEMS_updateMagBufferIndex.constprop.0+0xae>
 8019692:	9b06      	ldr	r3, [sp, #24]
 8019694:	f8c6 30a8 	str.w	r3, [r6, #168]	@ 0xa8
 8019698:	9b05      	ldr	r3, [sp, #20]
 801969a:	f8c6 30ac 	str.w	r3, [r6, #172]	@ 0xac
 801969e:	9b04      	ldr	r3, [sp, #16]
 80196a0:	f8c6 30b0 	str.w	r3, [r6, #176]	@ 0xb0
 80196a4:	9b03      	ldr	r3, [sp, #12]
 80196a6:	f8c6 30b4 	str.w	r3, [r6, #180]	@ 0xb4
 80196aa:	9b02      	ldr	r3, [sp, #8]
 80196ac:	e9c6 932e 	strd	r9, r3, [r6, #184]	@ 0xb8
 80196b0:	b009      	add	sp, #36	@ 0x24
 80196b2:	ecbd 8b02 	vpop	{d8}
 80196b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ba:	fb93 f5f2 	sdiv	r5, r3, r2
 80196be:	fb02 3315 	mls	r3, r2, r5, r3
 80196c2:	4690      	mov	r8, r2
 80196c4:	b21d      	sxth	r5, r3
 80196c6:	e741      	b.n	801954c <MEMS_updateMagBufferIndex.constprop.0+0x44>
 80196c8:	2000036c 	.word	0x2000036c

080196cc <output_update>:
 80196cc:	edd0 7a01 	vldr	s15, [r0, #4]
 80196d0:	edd0 5a00 	vldr	s11, [r0]
 80196d4:	edd0 6a02 	vldr	s13, [r0, #8]
 80196d8:	ed90 5a03 	vldr	s10, [r0, #12]
 80196dc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80196e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196e4:	ee27 7aa6 	vmul.f32	s14, s15, s13
 80196e8:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80196ec:	4615      	mov	r5, r2
 80196ee:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80196f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80196f6:	eea5 7a85 	vfma.f32	s14, s11, s10
 80196fa:	460f      	mov	r7, r1
 80196fc:	461e      	mov	r6, r3
 80196fe:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8019702:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019706:	ee36 6a06 	vadd.f32	s12, s12, s12
 801970a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801970e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8019712:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019716:	ee37 7a07 	vadd.f32	s14, s14, s14
 801971a:	ee35 5ac6 	vsub.f32	s10, s11, s12
 801971e:	2a00      	cmp	r2, #0
 8019720:	d145      	bne.n	80197ae <output_update+0xe2>
 8019722:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019726:	eeb1 7a47 	vneg.f32	s14, s14
 801972a:	ed83 7a00 	vstr	s14, [r3]
 801972e:	edc3 7a01 	vstr	s15, [r3, #4]
 8019732:	ed83 5a02 	vstr	s10, [r3, #8]
 8019736:	4629      	mov	r1, r5
 8019738:	4604      	mov	r4, r0
 801973a:	f7ff fce7 	bl	801910c <q2hpr>
 801973e:	ed95 7a01 	vldr	s14, [r5, #4]
 8019742:	edd5 7a02 	vldr	s15, [r5, #8]
 8019746:	edd5 6a00 	vldr	s13, [r5]
 801974a:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 8019858 <output_update+0x18c>
 801974e:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8019752:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8019756:	ee66 6a86 	vmul.f32	s13, s13, s12
 801975a:	ed85 7a01 	vstr	s14, [r5, #4]
 801975e:	edc5 6a00 	vstr	s13, [r5]
 8019762:	edc5 7a02 	vstr	s15, [r5, #8]
 8019766:	ed97 7a01 	vldr	s14, [r7, #4]
 801976a:	edd6 7a00 	vldr	s15, [r6]
 801976e:	6823      	ldr	r3, [r4, #0]
 8019770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019774:	edc8 7a00 	vstr	s15, [r8]
 8019778:	ed97 7a00 	vldr	s14, [r7]
 801977c:	edd6 7a01 	vldr	s15, [r6, #4]
 8019780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019784:	edc8 7a01 	vstr	s15, [r8, #4]
 8019788:	edd6 7a02 	vldr	s15, [r6, #8]
 801978c:	ed97 7a02 	vldr	s14, [r7, #8]
 8019790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019794:	edc8 7a02 	vstr	s15, [r8, #8]
 8019798:	edd4 7a02 	vldr	s15, [r4, #8]
 801979c:	6862      	ldr	r2, [r4, #4]
 801979e:	6022      	str	r2, [r4, #0]
 80197a0:	eef1 7a67 	vneg.f32	s15, s15
 80197a4:	6063      	str	r3, [r4, #4]
 80197a6:	edc4 7a02 	vstr	s15, [r4, #8]
 80197aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ae:	2a01      	cmp	r2, #1
 80197b0:	d015      	beq.n	80197de <output_update+0x112>
 80197b2:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8019858 <output_update+0x18c>
 80197b6:	edd5 6a00 	vldr	s13, [r5]
 80197ba:	ed95 7a01 	vldr	s14, [r5, #4]
 80197be:	edd5 7a02 	vldr	s15, [r5, #8]
 80197c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80197c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80197ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80197ce:	edc5 6a00 	vstr	s13, [r5]
 80197d2:	ed85 7a01 	vstr	s14, [r5, #4]
 80197d6:	edc5 7a02 	vstr	s15, [r5, #8]
 80197da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80197e2:	ee36 6a65 	vsub.f32	s12, s12, s11
 80197e6:	eeb1 7a47 	vneg.f32	s14, s14
 80197ea:	edc3 7a00 	vstr	s15, [r3]
 80197ee:	ed83 7a01 	vstr	s14, [r3, #4]
 80197f2:	ed83 6a02 	vstr	s12, [r3, #8]
 80197f6:	4629      	mov	r1, r5
 80197f8:	f7ff fc88 	bl	801910c <q2hpr>
 80197fc:	edd5 6a00 	vldr	s13, [r5]
 8019800:	ed95 7a01 	vldr	s14, [r5, #4]
 8019804:	edd5 7a02 	vldr	s15, [r5, #8]
 8019808:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019858 <output_update+0x18c>
 801980c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019810:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019814:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019818:	ed85 7a01 	vstr	s14, [r5, #4]
 801981c:	edc5 6a00 	vstr	s13, [r5]
 8019820:	edc5 7a02 	vstr	s15, [r5, #8]
 8019824:	ed97 7a00 	vldr	s14, [r7]
 8019828:	edd6 7a00 	vldr	s15, [r6]
 801982c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019830:	edc8 7a00 	vstr	s15, [r8]
 8019834:	ed97 7a01 	vldr	s14, [r7, #4]
 8019838:	edd6 7a01 	vldr	s15, [r6, #4]
 801983c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019840:	edc8 7a01 	vstr	s15, [r8, #4]
 8019844:	edd6 7a02 	vldr	s15, [r6, #8]
 8019848:	ed97 7a02 	vldr	s14, [r7, #8]
 801984c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019850:	edc8 7a02 	vstr	s15, [r8, #8]
 8019854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019858:	42652ee1 	.word	0x42652ee1
 801985c:	00000000 	.word	0x00000000

08019860 <MFX_emptyAttitude>:
 8019860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019864:	ed2d 8b02 	vpush	{d8}
 8019868:	4fe9      	ldr	r7, [pc, #932]	@ (8019c10 <MFX_emptyAttitude+0x3b0>)
 801986a:	eddf 8aea 	vldr	s17, [pc, #936]	@ 8019c14 <MFX_emptyAttitude+0x3b4>
 801986e:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 8019872:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 8019876:	f04f 0800 	mov.w	r8, #0
 801987a:	46bc      	mov	ip, r7
 801987c:	e9c4 8800 	strd	r8, r8, [r4]
 8019880:	f83c 3b04 	ldrh.w	r3, [ip], #4
 8019884:	f8c4 8008 	str.w	r8, [r4, #8]
 8019888:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 801988c:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 8019890:	4681      	mov	r9, r0
 8019892:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 8019896:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 801989a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801989e:	0c1b      	lsrs	r3, r3, #16
 80198a0:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 80198a4:	ab2b      	add	r3, sp, #172	@ 0xac
 80198a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198aa:	ab2e      	add	r3, sp, #184	@ 0xb8
 80198ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198b0:	ab31      	add	r3, sp, #196	@ 0xc4
 80198b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198b6:	ab34      	add	r3, sp, #208	@ 0xd0
 80198b8:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80198bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198c0:	ab37      	add	r3, sp, #220	@ 0xdc
 80198c2:	edcd 8a08 	vstr	s17, [sp, #32]
 80198c6:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 80198ca:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 80198ce:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 80198d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198d6:	ab3a      	add	r3, sp, #232	@ 0xe8
 80198d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198e0:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 80198e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80198e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80198ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80198f0:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 80198f4:	f8dc 3000 	ldr.w	r3, [ip]
 80198f8:	f8ce 3000 	str.w	r3, [lr]
 80198fc:	462a      	mov	r2, r5
 80198fe:	4641      	mov	r1, r8
 8019900:	4620      	mov	r0, r4
 8019902:	f007 fec5 	bl	8021690 <memset>
 8019906:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 801990a:	462a      	mov	r2, r5
 801990c:	4621      	mov	r1, r4
 801990e:	a840      	add	r0, sp, #256	@ 0x100
 8019910:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 8019914:	f007 fef0 	bl	80216f8 <memcpy>
 8019918:	462a      	mov	r2, r5
 801991a:	4641      	mov	r1, r8
 801991c:	4620      	mov	r0, r4
 801991e:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 8019922:	f007 feb5 	bl	8021690 <memset>
 8019926:	462a      	mov	r2, r5
 8019928:	4621      	mov	r1, r4
 801992a:	a89c      	add	r0, sp, #624	@ 0x270
 801992c:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 8019930:	f007 fee2 	bl	80216f8 <memcpy>
 8019934:	462a      	mov	r2, r5
 8019936:	4641      	mov	r1, r8
 8019938:	4620      	mov	r0, r4
 801993a:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 801993e:	f007 fea7 	bl	8021690 <memset>
 8019942:	462a      	mov	r2, r5
 8019944:	4621      	mov	r1, r4
 8019946:	a8f8      	add	r0, sp, #992	@ 0x3e0
 8019948:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 801994c:	f007 fed4 	bl	80216f8 <memcpy>
 8019950:	462a      	mov	r2, r5
 8019952:	4641      	mov	r1, r8
 8019954:	4620      	mov	r0, r4
 8019956:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 801995a:	f007 fe99 	bl	8021690 <memset>
 801995e:	462a      	mov	r2, r5
 8019960:	4621      	mov	r1, r4
 8019962:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 8019966:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 801996a:	f007 fec5 	bl	80216f8 <memcpy>
 801996e:	f04f 0301 	mov.w	r3, #1
 8019972:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8019976:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 801997a:	4ba7      	ldr	r3, [pc, #668]	@ (8019c18 <MFX_emptyAttitude+0x3b8>)
 801997c:	9320      	str	r3, [sp, #128]	@ 0x80
 801997e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019980:	ae0c      	add	r6, sp, #48	@ 0x30
 8019982:	46b3      	mov	fp, r6
 8019984:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019986:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801998a:	e9c4 8800 	strd	r8, r8, [r4]
 801998e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8019992:	f8c4 8010 	str.w	r8, [r4, #16]
 8019996:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 801999a:	46a6      	mov	lr, r4
 801999c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80199a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80199a4:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 80199a8:	682d      	ldr	r5, [r5, #0]
 80199aa:	f8cc 5000 	str.w	r5, [ip]
 80199ae:	af21      	add	r7, sp, #132	@ 0x84
 80199b0:	ed8a 8a01 	vstr	s16, [sl, #4]
 80199b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80199b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80199b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80199bc:	abf6      	add	r3, sp, #984	@ 0x3d8
 80199be:	9300      	str	r3, [sp, #0]
 80199c0:	aa3e      	add	r2, sp, #248	@ 0xf8
 80199c2:	f8c7 8000 	str.w	r8, [r7]
 80199c6:	ab9a      	add	r3, sp, #616	@ 0x268
 80199c8:	a911      	add	r1, sp, #68	@ 0x44
 80199ca:	9403      	str	r4, [sp, #12]
 80199cc:	2001      	movs	r0, #1
 80199ce:	f7fd fff3 	bl	80179b8 <DataHist_parameters>
 80199d2:	4b92      	ldr	r3, [pc, #584]	@ (8019c1c <MFX_emptyAttitude+0x3bc>)
 80199d4:	f8c9 3018 	str.w	r3, [r9, #24]
 80199d8:	4b91      	ldr	r3, [pc, #580]	@ (8019c20 <MFX_emptyAttitude+0x3c0>)
 80199da:	f8c9 301c 	str.w	r3, [r9, #28]
 80199de:	4b91      	ldr	r3, [pc, #580]	@ (8019c24 <MFX_emptyAttitude+0x3c4>)
 80199e0:	f8c9 3020 	str.w	r3, [r9, #32]
 80199e4:	4b90      	ldr	r3, [pc, #576]	@ (8019c28 <MFX_emptyAttitude+0x3c8>)
 80199e6:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 80199ea:	ae2b      	add	r6, sp, #172	@ 0xac
 80199ec:	4b8f      	ldr	r3, [pc, #572]	@ (8019c2c <MFX_emptyAttitude+0x3cc>)
 80199ee:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 80199f2:	ce07      	ldmia	r6!, {r0, r1, r2}
 80199f4:	4b8e      	ldr	r3, [pc, #568]	@ (8019c30 <MFX_emptyAttitude+0x3d0>)
 80199f6:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 80199fa:	4b8e      	ldr	r3, [pc, #568]	@ (8019c34 <MFX_emptyAttitude+0x3d4>)
 80199fc:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 8019a00:	4b8d      	ldr	r3, [pc, #564]	@ (8019c38 <MFX_emptyAttitude+0x3d8>)
 8019a02:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 8019a06:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8019a0a:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 8019a0e:	ad2e      	add	r5, sp, #184	@ 0xb8
 8019a10:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 8019a14:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8019a18:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 8019a1c:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 8019a20:	cd07      	ldmia	r5!, {r0, r1, r2}
 8019a22:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 8019a26:	f240 1301 	movw	r3, #257	@ 0x101
 8019a2a:	ed9f 6b77 	vldr	d6, [pc, #476]	@ 8019c08 <MFX_emptyAttitude+0x3a8>
 8019a2e:	f8a9 3000 	strh.w	r3, [r9]
 8019a32:	f8a9 3004 	strh.w	r3, [r9, #4]
 8019a36:	4b81      	ldr	r3, [pc, #516]	@ (8019c3c <MFX_emptyAttitude+0x3dc>)
 8019a38:	f8c9 300c 	str.w	r3, [r9, #12]
 8019a3c:	4b80      	ldr	r3, [pc, #512]	@ (8019c40 <MFX_emptyAttitude+0x3e0>)
 8019a3e:	f8c9 3014 	str.w	r3, [r9, #20]
 8019a42:	f509 7346 	add.w	r3, r9, #792	@ 0x318
 8019a46:	9304      	str	r3, [sp, #16]
 8019a48:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 8019a4c:	ed89 6b16 	vstr	d6, [r9, #88]	@ 0x58
 8019a50:	ed89 6b18 	vstr	d6, [r9, #96]	@ 0x60
 8019a54:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 8019a58:	f8a9 8002 	strh.w	r8, [r9, #2]
 8019a5c:	ed89 8a02 	vstr	s16, [r9, #8]
 8019a60:	ed89 8a04 	vstr	s16, [r9, #16]
 8019a64:	ed89 6b1a 	vstr	d6, [r9, #104]	@ 0x68
 8019a68:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 8019a6c:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 8019a70:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8019a74:	f10d 0bd0 	add.w	fp, sp, #208	@ 0xd0
 8019a78:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 8019a7c:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 8019a80:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 8019a84:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8019a88:	af37      	add	r7, sp, #220	@ 0xdc
 8019a8a:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 8019a8e:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 8019a92:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 8019a96:	cf07      	ldmia	r7!, {r0, r1, r2}
 8019a98:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 8019a9c:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 8019aa0:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 8019aa4:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 8019aa8:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8019aac:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8019c44 <MFX_emptyAttitude+0x3e4>
 8019ab0:	ed9f 5a65 	vldr	s10, [pc, #404]	@ 8019c48 <MFX_emptyAttitude+0x3e8>
 8019ab4:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8019c4c <MFX_emptyAttitude+0x3ec>
 8019ab8:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 8019abc:	f44f 1c48 	mov.w	ip, #3276800	@ 0x320000
 8019ac0:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8019ac4:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 8019ac8:	ed89 5a65 	vstr	s10, [r9, #404]	@ 0x194
 8019acc:	edc9 5a66 	vstr	s11, [r9, #408]	@ 0x198
 8019ad0:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 8019ad4:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 8019ad8:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 8019adc:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 8019ae0:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 8019ae4:	f04f 0101 	mov.w	r1, #1
 8019ae8:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 8019aec:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 8019af0:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 8019af4:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 8019af8:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 8019afc:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 8019b00:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 8019b04:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 8019b08:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 8019b0c:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 8019b10:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 8019b14:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 8019b18:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 8019b1c:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 8019b20:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 8019b24:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 8019b28:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 8019b2c:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 8019b30:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 8019b34:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 8019b38:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 8019b3c:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 8019b40:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 8019b44:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 8019b48:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 8019b4c:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 8019b50:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 8019b54:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 8019b58:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 8019b5c:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 8019b60:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 8019b64:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 8019b68:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 8019b6c:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 8019b70:	f8c9 c1a0 	str.w	ip, [r9, #416]	@ 0x1a0
 8019b74:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 8019b78:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 8019b7c:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 8019b80:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 8019b84:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 8019b88:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 8019b8c:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 8019b90:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 8019b94:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 8019b98:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 8019b9c:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 8019ba0:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 8019ba4:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 8019ba8:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 8019bac:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 8019bb0:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 8019bb4:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 8019bb8:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 8019bbc:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 8019bc0:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 8019bc4:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 8019bc8:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 8019bcc:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 8019bd0:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 8019bd4:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 8019bd8:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 8019bdc:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 8019be0:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 8019be4:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 8019be8:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 8019bec:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 8019bf0:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 8019bf4:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 8019bf8:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 8019bfc:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 8019c00:	e026      	b.n	8019c50 <MFX_emptyAttitude+0x3f0>
 8019c02:	bf00      	nop
 8019c04:	f3af 8000 	nop.w
	...
 8019c10:	08026804 	.word	0x08026804
 8019c14:	00000000 	.word	0x00000000
 8019c18:	40a00000 	.word	0x40a00000
 8019c1c:	3a9d4952 	.word	0x3a9d4952
 8019c20:	3ac49ba6 	.word	0x3ac49ba6
 8019c24:	3b03126f 	.word	0x3b03126f
 8019c28:	3a83126f 	.word	0x3a83126f
 8019c2c:	3f639581 	.word	0x3f639581
 8019c30:	402ab021 	.word	0x402ab021
 8019c34:	3f13f7cf 	.word	0x3f13f7cf
 8019c38:	3f2ac083 	.word	0x3f2ac083
 8019c3c:	01010100 	.word	0x01010100
 8019c40:	41200000 	.word	0x41200000
 8019c44:	447a0000 	.word	0x447a0000
 8019c48:	3f4ccccd 	.word	0x3f4ccccd
 8019c4c:	3f333333 	.word	0x3f333333
 8019c50:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 8019c54:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 8019c58:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 8019c5c:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 8019c60:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 8019c64:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 8019c68:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 8019c6c:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 8019c70:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 8019c74:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 8019c78:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 8019c7c:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 8019c80:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 8019c84:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 8019c88:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 8019c8c:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 8019c90:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 8019c94:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 8019c98:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 8019c9c:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 8019ca0:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 8019ca4:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 8019ca8:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 8019cac:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 8019cb0:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 8019cb4:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 8019cb8:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 8019cbc:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 8019cc0:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 8019cc4:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 8019cc8:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 8019ccc:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 8019cd0:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 8019cd4:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 8019cd8:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 8019cdc:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 8019ce0:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 8019ce4:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 8019ce8:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 8019cec:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 8019cf0:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 8019cf4:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 8019cf8:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 8019cfc:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 8019d00:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 8019d04:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 8019d08:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 8019d0c:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 8019d10:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 8019d14:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 8019d18:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 8019d1c:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 8019d20:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 8019d24:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 8019d28:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 8019d2c:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 8019d30:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 8019d34:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 8019d38:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 8019d3c:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 8019d40:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 8019d44:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 8019d48:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 8019d4c:	9a04      	ldr	r2, [sp, #16]
 8019d4e:	f889 11ac 	strb.w	r1, [r9, #428]	@ 0x1ac
 8019d52:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 8019d56:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 8019d5a:	9203      	str	r2, [sp, #12]
 8019d5c:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 8019d60:	9202      	str	r2, [sp, #8]
 8019d62:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 8019d66:	9201      	str	r2, [sp, #4]
 8019d68:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 8019d6c:	9200      	str	r2, [sp, #0]
 8019d6e:	7820      	ldrb	r0, [r4, #0]
 8019d70:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 8019d74:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 8019d78:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 8019d7c:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 8019d80:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 8019d84:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 8019d88:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 8019d8c:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 8019d90:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 8019d94:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 8019d98:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 8019d9c:	f7fd fe0c 	bl	80179b8 <DataHist_parameters>
 8019da0:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 8019da4:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 8019da8:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 8019dac:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 8019db0:	f10d 0c20 	add.w	ip, sp, #32
 8019db4:	9304      	str	r3, [sp, #16]
 8019db6:	9205      	str	r2, [sp, #20]
 8019db8:	9106      	str	r1, [sp, #24]
 8019dba:	9007      	str	r0, [sp, #28]
 8019dbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019dc0:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 8019dc4:	9b04      	ldr	r3, [sp, #16]
 8019dc6:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 8019dca:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 8019dce:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 8019dd2:	9906      	ldr	r1, [sp, #24]
 8019dd4:	9a05      	ldr	r2, [sp, #20]
 8019dd6:	9807      	ldr	r0, [sp, #28]
 8019dd8:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 8019ddc:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 8019de0:	edcb 8a00 	vstr	s17, [fp]
 8019de4:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 8019de8:	edca 8a00 	vstr	s17, [sl]
 8019dec:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 8019df0:	edc3 8a00 	vstr	s17, [r3]
 8019df4:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 8019df8:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 8019dfc:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 8019e00:	230a      	movs	r3, #10
 8019e02:	edc2 8a00 	vstr	s17, [r2]
 8019e06:	edc7 8a00 	vstr	s17, [r7]
 8019e0a:	edc6 8a00 	vstr	s17, [r6]
 8019e0e:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 8019e12:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 8019e16:	edc5 8a00 	vstr	s17, [r5]
 8019e1a:	ed84 8a00 	vstr	s16, [r4]
 8019e1e:	edc1 8a00 	vstr	s17, [r1]
 8019e22:	edc0 8a00 	vstr	s17, [r0]
 8019e26:	edce 8a00 	vstr	s17, [lr]
 8019e2a:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 8019e2e:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 8019e32:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 8019e36:	ecbd 8b02 	vpop	{d8}
 8019e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e3e:	bf00      	nop

08019e40 <MEMS_runMagCal.constprop.0>:
 8019e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e44:	f8df b4b4 	ldr.w	fp, [pc, #1204]	@ 801a2fc <MEMS_runMagCal.constprop.0+0x4bc>
 8019e48:	ed2d 8b0c 	vpush	{d8-d13}
 8019e4c:	f8bb 5008 	ldrh.w	r5, [fp, #8]
 8019e50:	2d82      	cmp	r5, #130	@ 0x82
 8019e52:	f2ad 5d4c 	subw	sp, sp, #1356	@ 0x54c
 8019e56:	f240 823b 	bls.w	801a2d0 <MEMS_runMagCal.constprop.0+0x490>
 8019e5a:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8019e5e:	f8db 100c 	ldr.w	r1, [fp, #12]
 8019e62:	1e6b      	subs	r3, r5, #1
 8019e64:	fb02 1113 	mls	r1, r2, r3, r1
 8019e68:	2381      	movs	r3, #129	@ 0x81
 8019e6a:	fb12 1303 	smlabb	r3, r2, r3, r1
 8019e6e:	f105 067e 	add.w	r6, r5, #126	@ 0x7e
 8019e72:	9303      	str	r3, [sp, #12]
 8019e74:	2382      	movs	r3, #130	@ 0x82
 8019e76:	9102      	str	r1, [sp, #8]
 8019e78:	b2f6      	uxtb	r6, r6
 8019e7a:	9301      	str	r3, [sp, #4]
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f8db 4010 	ldr.w	r4, [fp, #16]
 8019e82:	2300      	movs	r3, #0
 8019e84:	f50d 7a9c 	add.w	sl, sp, #312	@ 0x138
 8019e88:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8019e8c:	f814 7033 	ldrb.w	r7, [r4, r3, lsl #3]
 8019e90:	f80a 7033 	strb.w	r7, [sl, r3, lsl #3]
 8019e94:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 8019e98:	3301      	adds	r3, #1
 8019e9a:	f8d1 c002 	ldr.w	ip, [r1, #2]
 8019e9e:	88cf      	ldrh	r7, [r1, #6]
 8019ea0:	f8c2 c002 	str.w	ip, [r2, #2]
 8019ea4:	b2d9      	uxtb	r1, r3
 8019ea6:	4281      	cmp	r1, r0
 8019ea8:	80d7      	strh	r7, [r2, #6]
 8019eaa:	460b      	mov	r3, r1
 8019eac:	d3ec      	bcc.n	8019e88 <MEMS_runMagCal.constprop.0+0x48>
 8019eae:	2d82      	cmp	r5, #130	@ 0x82
 8019eb0:	bf86      	itte	hi
 8019eb2:	f1a5 0382 	subhi.w	r3, r5, #130	@ 0x82
 8019eb6:	b29b      	uxthhi	r3, r3
 8019eb8:	2300      	movls	r3, #0
 8019eba:	f8ab 3008 	strh.w	r3, [fp, #8]
 8019ebe:	b1c6      	cbz	r6, 8019ef2 <MEMS_runMagCal.constprop.0+0xb2>
 8019ec0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019ec4:	3e01      	subs	r6, #1
 8019ec6:	f103 050a 	add.w	r5, r3, #10
 8019eca:	b2f6      	uxtb	r6, r6
 8019ecc:	2700      	movs	r7, #0
 8019ece:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8019ed2:	3302      	adds	r3, #2
 8019ed4:	f893 440e 	ldrb.w	r4, [r3, #1038]	@ 0x40e
 8019ed8:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8019edc:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	@ 0x414
 8019ee0:	f803 4c02 	strb.w	r4, [r3, #-2]
 8019ee4:	6019      	str	r1, [r3, #0]
 8019ee6:	809a      	strh	r2, [r3, #4]
 8019ee8:	f883 740e 	strb.w	r7, [r3, #1038]	@ 0x40e
 8019eec:	3308      	adds	r3, #8
 8019eee:	42ab      	cmp	r3, r5
 8019ef0:	d1f0      	bne.n	8019ed4 <MEMS_runMagCal.constprop.0+0x94>
 8019ef2:	9a03      	ldr	r2, [sp, #12]
 8019ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019ef8:	f8cb 204c 	str.w	r2, [fp, #76]	@ 0x4c
 8019efc:	f502 31c3 	add.w	r1, r2, #99840	@ 0x18600
 8019f00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019f04:	31a0      	adds	r1, #160	@ 0xa0
 8019f06:	fb03 f202 	mul.w	r2, r3, r2
 8019f0a:	4291      	cmp	r1, r2
 8019f0c:	f080 8202 	bcs.w	801a314 <MEMS_runMagCal.constprop.0+0x4d4>
 8019f10:	3b00      	subs	r3, #0
 8019f12:	bf18      	it	ne
 8019f14:	2301      	movne	r3, #1
 8019f16:	e9cb 3306 	strd	r3, r3, [fp, #24]
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 8019f20:	f8cb 3020 	str.w	r3, [fp, #32]
 8019f24:	2300      	movs	r3, #0
 8019f26:	e9cb 332a 	strd	r3, r3, [fp, #168]	@ 0xa8
 8019f2a:	e9cb 332c 	strd	r3, r3, [fp, #176]	@ 0xb0
 8019f2e:	e9cb 332e 	strd	r3, r3, [fp, #184]	@ 0xb8
 8019f32:	23ff      	movs	r3, #255	@ 0xff
 8019f34:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 8019f38:	f04f 2380 	mov.w	r3, #2147516416	@ 0x80008000
 8019f3c:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019f40:	932e      	str	r3, [sp, #184]	@ 0xb8
 8019f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019f46:	ed9f 7aea 	vldr	s14, [pc, #936]	@ 801a2f0 <MEMS_runMagCal.constprop.0+0x4b0>
 8019f4a:	ed9b 8a01 	vldr	s16, [fp, #4]
 8019f4e:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
 8019f52:	fa1f f888 	uxth.w	r8, r8
 8019f56:	f06f 2380 	mvn.w	r3, #2147516416	@ 0x80008000
 8019f5a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019f5e:	933e      	str	r3, [sp, #248]	@ 0xf8
 8019f60:	2100      	movs	r1, #0
 8019f62:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019f66:	f1b8 0f03 	cmp.w	r8, #3
 8019f6a:	ed9b 6a1f 	vldr	s12, [fp, #124]	@ 0x7c
 8019f6e:	eddb 5a1c 	vldr	s11, [fp, #112]	@ 0x70
 8019f72:	ed9b 5a23 	vldr	s10, [fp, #140]	@ 0x8c
 8019f76:	eddb 4a1d 	vldr	s9, [fp, #116]	@ 0x74
 8019f7a:	ed9b 4a27 	vldr	s8, [fp, #156]	@ 0x9c
 8019f7e:	eddb 3a1e 	vldr	s7, [fp, #120]	@ 0x78
 8019f82:	f8ad 30fc 	strh.w	r3, [sp, #252]	@ 0xfc
 8019f86:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8019f8a:	46c6      	mov	lr, r8
 8019f8c:	4652      	mov	r2, sl
 8019f8e:	bf28      	it	cs
 8019f90:	f04f 0e03 	movcs.w	lr, #3
 8019f94:	460b      	mov	r3, r1
 8019f96:	eef0 7a47 	vmov.f32	s15, s14
 8019f9a:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8019f9e:	7814      	ldrb	r4, [r2, #0]
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	b29b      	uxth	r3, r3
 8019fa4:	2c00      	cmp	r4, #0
 8019fa6:	d052      	beq.n	801a04e <MEMS_runMagCal.constprop.0+0x20e>
 8019fa8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8019fac:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8019fb0:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 8019fb4:	f9bd 60b8 	ldrsh.w	r6, [sp, #184]	@ 0xb8
 8019fb8:	f9bd 70f8 	ldrsh.w	r7, [sp, #248]	@ 0xf8
 8019fbc:	ee07 ca10 	vmov	s14, ip
 8019fc0:	ee06 4a90 	vmov	s13, r4
 8019fc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fc8:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
 8019fcc:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019fd0:	ee33 3a65 	vsub.f32	s6, s6, s11
 8019fd4:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019fd8:	42a6      	cmp	r6, r4
 8019fda:	ee23 3a06 	vmul.f32	s6, s6, s12
 8019fde:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019fe2:	ee06 5a90 	vmov	s13, r5
 8019fe6:	bfb8      	it	lt
 8019fe8:	4626      	movlt	r6, r4
 8019fea:	42bc      	cmp	r4, r7
 8019fec:	bfa8      	it	ge
 8019fee:	463c      	movge	r4, r7
 8019ff0:	eea3 7a03 	vfma.f32	s14, s6, s6
 8019ff4:	f9bd 70ba 	ldrsh.w	r7, [sp, #186]	@ 0xba
 8019ff8:	f8ad 40f8 	strh.w	r4, [sp, #248]	@ 0xf8
 8019ffc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a000:	f9bd 40fa 	ldrsh.w	r4, [sp, #250]	@ 0xfa
 801a004:	f8ad 60b8 	strh.w	r6, [sp, #184]	@ 0xb8
 801a008:	4567      	cmp	r7, ip
 801a00a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801a00e:	bfb8      	it	lt
 801a010:	4667      	movlt	r7, ip
 801a012:	4564      	cmp	r4, ip
 801a014:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	@ 0xbc
 801a018:	f8ad 70ba 	strh.w	r7, [sp, #186]	@ 0xba
 801a01c:	bfa8      	it	ge
 801a01e:	4664      	movge	r4, ip
 801a020:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a024:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a028:	f8ad 40fa 	strh.w	r4, [sp, #250]	@ 0xfa
 801a02c:	f9bd 40fc 	ldrsh.w	r4, [sp, #252]	@ 0xfc
 801a030:	42ae      	cmp	r6, r5
 801a032:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801a036:	bfb8      	it	lt
 801a038:	462e      	movlt	r6, r5
 801a03a:	42ac      	cmp	r4, r5
 801a03c:	f101 0101 	add.w	r1, r1, #1
 801a040:	bfa8      	it	ge
 801a042:	462c      	movge	r4, r5
 801a044:	f8ad 60bc 	strh.w	r6, [sp, #188]	@ 0xbc
 801a048:	f8ad 40fc 	strh.w	r4, [sp, #252]	@ 0xfc
 801a04c:	b249      	sxtb	r1, r1
 801a04e:	4573      	cmp	r3, lr
 801a050:	f102 0208 	add.w	r2, r2, #8
 801a054:	d9a3      	bls.n	8019f9e <MEMS_runMagCal.constprop.0+0x15e>
 801a056:	4283      	cmp	r3, r0
 801a058:	f080 856e 	bcs.w	801ab38 <MEMS_runMagCal.constprop.0+0xcf8>
 801a05c:	eba8 0803 	sub.w	r8, r8, r3
 801a060:	fa13 f888 	uxtah	r8, r3, r8
 801a064:	f10a 0708 	add.w	r7, sl, #8
 801a068:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a06c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 801a070:	f04f 0c00 	mov.w	ip, #0
 801a074:	781a      	ldrb	r2, [r3, #0]
 801a076:	1c4d      	adds	r5, r1, #1
 801a078:	2a00      	cmp	r2, #0
 801a07a:	f000 8096 	beq.w	801a1aa <MEMS_runMagCal.constprop.0+0x36a>
 801a07e:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801a082:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 801a086:	f933 6c16 	ldrsh.w	r6, [r3, #-22]
 801a08a:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 801a08e:	f933 1c1e 	ldrsh.w	r1, [r3, #-30]
 801a092:	f933 ec1a 	ldrsh.w	lr, [r3, #-26]
 801a096:	1a61      	subs	r1, r4, r1
 801a098:	ee06 0a90 	vmov	s13, r0
 801a09c:	1b92      	subs	r2, r2, r6
 801a09e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801a0a2:	ee03 4a10 	vmov	s6, r4
 801a0a6:	ee07 2a10 	vmov	s14, r2
 801a0aa:	f933 6c14 	ldrsh.w	r6, [r3, #-20]
 801a0ae:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 801a0b2:	f933 1c1c 	ldrsh.w	r1, [r3, #-28]
 801a0b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a0ba:	1a41      	subs	r1, r0, r1
 801a0bc:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 801a0c0:	1b92      	subs	r2, r2, r6
 801a0c2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a0c6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801a0ca:	ee03 2a10 	vmov	s6, r2
 801a0ce:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801a0d2:	f933 2c12 	ldrsh.w	r2, [r3, #-18]
 801a0d6:	f9bd 60f8 	ldrsh.w	r6, [sp, #248]	@ 0xf8
 801a0da:	ee72 2ae5 	vsub.f32	s5, s5, s11
 801a0de:	ee66 6a85 	vmul.f32	s13, s13, s10
 801a0e2:	1a8a      	subs	r2, r1, r2
 801a0e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a0e8:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	@ 0xb8
 801a0ec:	ee62 2a86 	vmul.f32	s5, s5, s12
 801a0f0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801a0f4:	42a1      	cmp	r1, r4
 801a0f6:	eee2 6aa2 	vfma.f32	s13, s5, s5
 801a0fa:	bfb8      	it	lt
 801a0fc:	4621      	movlt	r1, r4
 801a0fe:	f8ad 10b8 	strh.w	r1, [sp, #184]	@ 0xb8
 801a102:	eeb0 7ac7 	vabs.f32	s14, s14
 801a106:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a10a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a10e:	b269      	sxtb	r1, r5
 801a110:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801a114:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a118:	42b4      	cmp	r4, r6
 801a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a11e:	eeb0 3ac3 	vabs.f32	s6, s6
 801a122:	ee06 5a90 	vmov	s13, r5
 801a126:	eba5 0e0e 	sub.w	lr, r5, lr
 801a12a:	bfa8      	it	ge
 801a12c:	4634      	movge	r4, r6
 801a12e:	ee37 7a03 	vadd.f32	s14, s14, s6
 801a132:	f9bd 60ba 	ldrsh.w	r6, [sp, #186]	@ 0xba
 801a136:	f8ad 40f8 	strh.w	r4, [sp, #248]	@ 0xf8
 801a13a:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 801a13e:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
 801a142:	ee06 2a90 	vmov	s13, r2
 801a146:	4286      	cmp	r6, r0
 801a148:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a14c:	4632      	mov	r2, r6
 801a14e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a152:	bfb8      	it	lt
 801a154:	4602      	movlt	r2, r0
 801a156:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a15a:	f8ad 20ba 	strh.w	r2, [sp, #186]	@ 0xba
 801a15e:	f9bd 20fa 	ldrsh.w	r2, [sp, #250]	@ 0xfa
 801a162:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	@ 0xbc
 801a166:	eef0 6ae6 	vabs.f32	s13, s13
 801a16a:	4290      	cmp	r0, r2
 801a16c:	ee33 3a63 	vsub.f32	s6, s6, s7
 801a170:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a174:	bfa8      	it	ge
 801a176:	4610      	movge	r0, r2
 801a178:	f9bd 20fc 	ldrsh.w	r2, [sp, #252]	@ 0xfc
 801a17c:	f8ad 00fa 	strh.w	r0, [sp, #250]	@ 0xfa
 801a180:	42ae      	cmp	r6, r5
 801a182:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a186:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a18a:	bfb8      	it	lt
 801a18c:	462e      	movlt	r6, r5
 801a18e:	4295      	cmp	r5, r2
 801a190:	bfa8      	it	ge
 801a192:	4615      	movge	r5, r2
 801a194:	eee3 7a03 	vfma.f32	s15, s6, s6
 801a198:	f8ad 60bc 	strh.w	r6, [sp, #188]	@ 0xbc
 801a19c:	f8ad 50fc 	strh.w	r5, [sp, #252]	@ 0xfc
 801a1a0:	ee17 2a10 	vmov	r2, s14
 801a1a4:	4594      	cmp	ip, r2
 801a1a6:	bf38      	it	cc
 801a1a8:	4694      	movcc	ip, r2
 801a1aa:	3308      	adds	r3, #8
 801a1ac:	429f      	cmp	r7, r3
 801a1ae:	f47f af61 	bne.w	801a074 <MEMS_runMagCal.constprop.0+0x234>
 801a1b2:	2900      	cmp	r1, #0
 801a1b4:	f000 833e 	beq.w	801a834 <MEMS_runMagCal.constprop.0+0x9f4>
 801a1b8:	f9bd 00b8 	ldrsh.w	r0, [sp, #184]	@ 0xb8
 801a1bc:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 801a1c0:	f280 80b3 	bge.w	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a1c4:	f9bd 20f8 	ldrsh.w	r2, [sp, #248]	@ 0xf8
 801a1c8:	f512 4f80 	cmn.w	r2, #16384	@ 0x4000
 801a1cc:	f2c0 80ad 	blt.w	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a1d0:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	@ 0xba
 801a1d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a1d8:	f280 80a7 	bge.w	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a1dc:	f9bd 60fa 	ldrsh.w	r6, [sp, #250]	@ 0xfa
 801a1e0:	f516 4f80 	cmn.w	r6, #16384	@ 0x4000
 801a1e4:	f2c0 80a1 	blt.w	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a1e8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	@ 0xbc
 801a1ec:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 801a1f0:	f280 809b 	bge.w	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a1f4:	f9bd 50fc 	ldrsh.w	r5, [sp, #252]	@ 0xfc
 801a1f8:	f515 4f80 	cmn.w	r5, #16384	@ 0x4000
 801a1fc:	f2c0 8095 	blt.w	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a200:	ee07 1a10 	vmov	s14, r1
 801a204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a208:	1a80      	subs	r0, r0, r2
 801a20a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a20e:	1b9a      	subs	r2, r3, r6
 801a210:	4290      	cmp	r0, r2
 801a212:	4603      	mov	r3, r0
 801a214:	eba4 0105 	sub.w	r1, r4, r5
 801a218:	bfb8      	it	lt
 801a21a:	4613      	movlt	r3, r2
 801a21c:	428b      	cmp	r3, r1
 801a21e:	bfb8      	it	lt
 801a220:	460b      	movlt	r3, r1
 801a222:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801a2f4 <MEMS_runMagCal.constprop.0+0x4b4>
 801a226:	eef1 7ae6 	vsqrt.f32	s15, s13
 801a22a:	ee06 3a90 	vmov	s13, r3
 801a22e:	ee28 7a87 	vmul.f32	s14, s17, s14
 801a232:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a236:	ee68 7a27 	vmul.f32	s15, s16, s15
 801a23a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a242:	d472      	bmi.n	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a244:	ee07 ca10 	vmov	s14, ip
 801a248:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a24c:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 801a2f8 <MEMS_runMagCal.constprop.0+0x4b8>
 801a250:	ee27 7a08 	vmul.f32	s14, s14, s16
 801a254:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a25c:	dc65      	bgt.n	801a32a <MEMS_runMagCal.constprop.0+0x4ea>
 801a25e:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 801a262:	ee28 6a86 	vmul.f32	s12, s17, s12
 801a266:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801a26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a26e:	f300 875c 	bgt.w	801b12a <MEMS_runMagCal.constprop.0+0x12ea>
 801a272:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801a276:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a27a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a282:	f340 832c 	ble.w	801a8de <MEMS_runMagCal.constprop.0+0xa9e>
 801a286:	ee07 0a10 	vmov	s14, r0
 801a28a:	ee36 6a06 	vadd.f32	s12, s12, s12
 801a28e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a292:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a29a:	f340 8320 	ble.w	801a8de <MEMS_runMagCal.constprop.0+0xa9e>
 801a29e:	ee07 2a10 	vmov	s14, r2
 801a2a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2a6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ae:	f140 8316 	bpl.w	801a8de <MEMS_runMagCal.constprop.0+0xa9e>
 801a2b2:	ee07 1a10 	vmov	s14, r1
 801a2b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2ba:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2c2:	bf4c      	ite	mi
 801a2c4:	2301      	movmi	r3, #1
 801a2c6:	2300      	movpl	r3, #0
 801a2c8:	9308      	str	r3, [sp, #32]
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	9304      	str	r3, [sp, #16]
 801a2ce:	e309      	b.n	801a8e4 <MEMS_runMagCal.constprop.0+0xaa4>
 801a2d0:	f8db 100c 	ldr.w	r1, [fp, #12]
 801a2d4:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 801a2d8:	9103      	str	r1, [sp, #12]
 801a2da:	1e6b      	subs	r3, r5, #1
 801a2dc:	fb02 1313 	mls	r3, r2, r3, r1
 801a2e0:	9501      	str	r5, [sp, #4]
 801a2e2:	9302      	str	r3, [sp, #8]
 801a2e4:	2d00      	cmp	r5, #0
 801a2e6:	f000 82f0 	beq.w	801a8ca <MEMS_runMagCal.constprop.0+0xa8a>
 801a2ea:	4628      	mov	r0, r5
 801a2ec:	2600      	movs	r6, #0
 801a2ee:	e5c6      	b.n	8019e7e <MEMS_runMagCal.constprop.0+0x3e>
 801a2f0:	00000000 	.word	0x00000000
 801a2f4:	43020000 	.word	0x43020000
 801a2f8:	447a0000 	.word	0x447a0000
 801a2fc:	2000036c 	.word	0x2000036c
 801a300:	4423d666 	.word	0x4423d666
 801a304:	42c80000 	.word	0x42c80000
 801a308:	427c0000 	.word	0x427c0000
 801a30c:	3f666666 	.word	0x3f666666
 801a310:	3eaaaaab 	.word	0x3eaaaaab
 801a314:	f8db 20a4 	ldr.w	r2, [fp, #164]	@ 0xa4
 801a318:	4291      	cmp	r1, r2
 801a31a:	f4ff adf9 	bcc.w	8019f10 <MEMS_runMagCal.constprop.0+0xd0>
 801a31e:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 801a322:	2b00      	cmp	r3, #0
 801a324:	f47f ae08 	bne.w	8019f38 <MEMS_runMagCal.constprop.0+0xf8>
 801a328:	e5fc      	b.n	8019f24 <MEMS_runMagCal.constprop.0+0xe4>
 801a32a:	f04f 0902 	mov.w	r9, #2
 801a32e:	2300      	movs	r3, #0
 801a330:	9308      	str	r3, [sp, #32]
 801a332:	9304      	str	r3, [sp, #16]
 801a334:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 801a300 <MEMS_runMagCal.constprop.0+0x4c0>
 801a338:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a340:	f140 826c 	bpl.w	801a81c <MEMS_runMagCal.constprop.0+0x9dc>
 801a344:	ed1f 0a11 	vldr	s0, [pc, #-68]	@ 801a304 <MEMS_runMagCal.constprop.0+0x4c4>
 801a348:	f89b 406c 	ldrb.w	r4, [fp, #108]	@ 0x6c
 801a34c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a350:	2c01      	cmp	r4, #1
 801a352:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 801a356:	d911      	bls.n	801a37c <MEMS_runMagCal.constprop.0+0x53c>
 801a358:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a35c:	ee17 3a90 	vmov	r3, s15
 801a360:	b29b      	uxth	r3, r3
 801a362:	2bc7      	cmp	r3, #199	@ 0xc7
 801a364:	f201 8085 	bhi.w	801b472 <MEMS_runMagCal.constprop.0+0x1632>
 801a368:	2400      	movs	r4, #0
 801a36a:	23ff      	movs	r3, #255	@ 0xff
 801a36c:	f88b 406c 	strb.w	r4, [fp, #108]	@ 0x6c
 801a370:	f88b 40a0 	strb.w	r4, [fp, #160]	@ 0xa0
 801a374:	f88b 4054 	strb.w	r4, [fp, #84]	@ 0x54
 801a378:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 801a37c:	f1b9 0f00 	cmp.w	r9, #0
 801a380:	f040 823d 	bne.w	801a7fe <MEMS_runMagCal.constprop.0+0x9be>
 801a384:	f99b 3026 	ldrsb.w	r3, [fp, #38]	@ 0x26
 801a388:	2b00      	cmp	r3, #0
 801a38a:	f2c0 83b2 	blt.w	801aaf2 <MEMS_runMagCal.constprop.0+0xcb2>
 801a38e:	f89b 7025 	ldrb.w	r7, [fp, #37]	@ 0x25
 801a392:	3301      	adds	r3, #1
 801a394:	fbb3 f2f7 	udiv	r2, r3, r7
 801a398:	fb07 3312 	mls	r3, r7, r2, r3
 801a39c:	b25b      	sxtb	r3, r3
 801a39e:	461e      	mov	r6, r3
 801a3a0:	f89b 5024 	ldrb.w	r5, [fp, #36]	@ 0x24
 801a3a4:	f88b 3026 	strb.w	r3, [fp, #38]	@ 0x26
 801a3a8:	3501      	adds	r5, #1
 801a3aa:	42bd      	cmp	r5, r7
 801a3ac:	bfa8      	it	ge
 801a3ae:	463d      	movge	r5, r7
 801a3b0:	fa5f f885 	uxtb.w	r8, r5
 801a3b4:	f88b 8024 	strb.w	r8, [fp, #36]	@ 0x24
 801a3b8:	f008 fada 	bl	8022970 <roundf>
 801a3bc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801a3c0:	eb0b 0346 	add.w	r3, fp, r6, lsl #1
 801a3c4:	ee10 2a10 	vmov	r2, s0
 801a3c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 801a3ca:	f1b9 0f00 	cmp.w	r9, #0
 801a3ce:	f040 8216 	bne.w	801a7fe <MEMS_runMagCal.constprop.0+0x9be>
 801a3d2:	f8db 1020 	ldr.w	r1, [fp, #32]
 801a3d6:	b129      	cbz	r1, 801a3e4 <MEMS_runMagCal.constprop.0+0x5a4>
 801a3d8:	9a03      	ldr	r2, [sp, #12]
 801a3da:	f501 6396 	add.w	r3, r1, #1200	@ 0x4b0
 801a3de:	4293      	cmp	r3, r2
 801a3e0:	f200 8216 	bhi.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801a3e4:	9b04      	ldr	r3, [sp, #16]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	f040 8212 	bne.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801a3ec:	1ea3      	subs	r3, r4, #2
 801a3ee:	2b01      	cmp	r3, #1
 801a3f0:	f240 822f 	bls.w	801a852 <MEMS_runMagCal.constprop.0+0xa12>
 801a3f4:	eef0 9a08 	vmov.f32	s19, #8	@ 0x40400000  3.0
 801a3f8:	ee68 9aa9 	vmul.f32	s19, s17, s19
 801a3fc:	ed5f 7a3e 	vldr	s15, [pc, #-248]	@ 801a308 <MEMS_runMagCal.constprop.0+0x4c8>
 801a400:	f8db 20a4 	ldr.w	r2, [fp, #164]	@ 0xa4
 801a404:	9903      	ldr	r1, [sp, #12]
 801a406:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801a40a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a40e:	ee17 3a90 	vmov	r3, s15
 801a412:	fa1f f983 	uxth.w	r9, r3
 801a416:	f502 531c 	add.w	r3, r2, #9984	@ 0x2700
 801a41a:	3310      	adds	r3, #16
 801a41c:	428b      	cmp	r3, r1
 801a41e:	f080 820b 	bcs.w	801a838 <MEMS_runMagCal.constprop.0+0x9f8>
 801a422:	f242 3328 	movw	r3, #9000	@ 0x2328
 801a426:	4299      	cmp	r1, r3
 801a428:	f89b 60a0 	ldrb.w	r6, [fp, #160]	@ 0xa0
 801a42c:	f89b 00a1 	ldrb.w	r0, [fp, #161]	@ 0xa1
 801a430:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801a434:	bf1a      	itte	ne
 801a436:	f5a1 550c 	subne.w	r5, r1, #8960	@ 0x2300
 801a43a:	3d28      	subne	r5, #40	@ 0x28
 801a43c:	2500      	moveq	r5, #0
 801a43e:	4286      	cmp	r6, r0
 801a440:	f000 86dd 	beq.w	801b1fe <MEMS_runMagCal.constprop.0+0x13be>
 801a444:	1c59      	adds	r1, r3, #1
 801a446:	1b89      	subs	r1, r1, r6
 801a448:	fb91 f3f0 	sdiv	r3, r1, r0
 801a44c:	fb00 1113 	mls	r1, r0, r3, r1
 801a450:	2900      	cmp	r1, #0
 801a452:	bfb8      	it	lt
 801a454:	1809      	addlt	r1, r1, r0
 801a456:	b209      	sxth	r1, r1
 801a458:	b346      	cbz	r6, 801a4ac <MEMS_runMagCal.constprop.0+0x66c>
 801a45a:	1b52      	subs	r2, r2, r5
 801a45c:	f8dd c010 	ldr.w	ip, [sp, #16]
 801a460:	b294      	uxth	r4, r2
 801a462:	1877      	adds	r7, r6, r1
 801a464:	e002      	b.n	801a46c <MEMS_runMagCal.constprop.0+0x62c>
 801a466:	3101      	adds	r1, #1
 801a468:	428f      	cmp	r7, r1
 801a46a:	d019      	beq.n	801a4a0 <MEMS_runMagCal.constprop.0+0x660>
 801a46c:	fb91 f3f0 	sdiv	r3, r1, r0
 801a470:	fb00 1313 	mls	r3, r0, r3, r1
 801a474:	b2db      	uxtb	r3, r3
 801a476:	3304      	adds	r3, #4
 801a478:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801a47c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 801a480:	4422      	add	r2, r4
 801a482:	b212      	sxth	r2, r2
 801a484:	2a00      	cmp	r2, #0
 801a486:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801a48a:	daec      	bge.n	801a466 <MEMS_runMagCal.constprop.0+0x626>
 801a48c:	1e73      	subs	r3, r6, #1
 801a48e:	2e00      	cmp	r6, #0
 801a490:	f000 832c 	beq.w	801aaec <MEMS_runMagCal.constprop.0+0xcac>
 801a494:	3101      	adds	r1, #1
 801a496:	428f      	cmp	r7, r1
 801a498:	b2de      	uxtb	r6, r3
 801a49a:	f04f 0c01 	mov.w	ip, #1
 801a49e:	d1e5      	bne.n	801a46c <MEMS_runMagCal.constprop.0+0x62c>
 801a4a0:	f1bc 0f01 	cmp.w	ip, #1
 801a4a4:	f88b 60a0 	strb.w	r6, [fp, #160]	@ 0xa0
 801a4a8:	f000 8693 	beq.w	801b1d2 <MEMS_runMagCal.constprop.0+0x1392>
 801a4ac:	f8cb 50a4 	str.w	r5, [fp, #164]	@ 0xa4
 801a4b0:	2e00      	cmp	r6, #0
 801a4b2:	f000 81c7 	beq.w	801a844 <MEMS_runMagCal.constprop.0+0xa04>
 801a4b6:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801a4ba:	9a02      	ldr	r2, [sp, #8]
 801a4bc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801a4c0:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 801a4c4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 801a4c8:	3308      	adds	r3, #8
 801a4ca:	442b      	add	r3, r5
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	f0c0 8689 	bcc.w	801b1e4 <MEMS_runMagCal.constprop.0+0x13a4>
 801a4d2:	9b08      	ldr	r3, [sp, #32]
 801a4d4:	b923      	cbnz	r3, 801a4e0 <MEMS_runMagCal.constprop.0+0x6a0>
 801a4d6:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 801a4da:	2b0a      	cmp	r3, #10
 801a4dc:	f240 81b6 	bls.w	801a84c <MEMS_runMagCal.constprop.0+0xa0c>
 801a4e0:	ee29 aaa9 	vmul.f32	s20, s19, s19
 801a4e4:	ed5f 6a77 	vldr	s13, [pc, #-476]	@ 801a30c <MEMS_runMagCal.constprop.0+0x4cc>
 801a4e8:	ed5f 7a77 	vldr	s15, [pc, #-476]	@ 801a310 <MEMS_runMagCal.constprop.0+0x4d0>
 801a4ec:	9b04      	ldr	r3, [sp, #16]
 801a4ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801a4f0:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 801a4f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	ee2a aa26 	vmul.f32	s20, s20, s13
 801a4fe:	ee29 9a89 	vmul.f32	s18, s19, s18
 801a502:	ee68 8a87 	vmul.f32	s17, s17, s14
 801a506:	ee28 8a27 	vmul.f32	s16, s16, s15
 801a50a:	4617      	mov	r7, r2
 801a50c:	f81a 1037 	ldrb.w	r1, [sl, r7, lsl #3]
 801a510:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 801a514:	2900      	cmp	r1, #0
 801a516:	f000 8250 	beq.w	801a9ba <MEMS_runMagCal.constprop.0+0xb7a>
 801a51a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801a51e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 801a522:	ee07 4a90 	vmov	s15, r4
 801a526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a52a:	eef0 7ae7 	vabs.f32	s15, s15
 801a52e:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a536:	f100 8226 	bmi.w	801a986 <MEMS_runMagCal.constprop.0+0xb46>
 801a53a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801a53e:	f89b 00a0 	ldrb.w	r0, [fp, #160]	@ 0xa0
 801a542:	2800      	cmp	r0, #0
 801a544:	f000 823b 	beq.w	801a9be <MEMS_runMagCal.constprop.0+0xb7e>
 801a548:	f9bb 33ba 	ldrsh.w	r3, [fp, #954]	@ 0x3ba
 801a54c:	1b9b      	subs	r3, r3, r6
 801a54e:	fb03 f203 	mul.w	r2, r3, r3
 801a552:	f9bb 33b8 	ldrsh.w	r3, [fp, #952]	@ 0x3b8
 801a556:	1b1b      	subs	r3, r3, r4
 801a558:	fb03 2203 	mla	r2, r3, r3, r2
 801a55c:	f9bb 33bc 	ldrsh.w	r3, [fp, #956]	@ 0x3bc
 801a560:	eba3 0308 	sub.w	r3, r3, r8
 801a564:	fb03 2303 	mla	r3, r3, r3, r2
 801a568:	ee07 3a90 	vmov	s15, r3
 801a56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a570:	eeb4 aae7 	vcmpe.f32	s20, s15
 801a574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a578:	f300 821f 	bgt.w	801a9ba <MEMS_runMagCal.constprop.0+0xb7a>
 801a57c:	fb94 f3f9 	sdiv	r3, r4, r9
 801a580:	fb09 4313 	mls	r3, r9, r3, r4
 801a584:	2b00      	cmp	r3, #0
 801a586:	bfb8      	it	lt
 801a588:	444b      	addlt	r3, r9
 801a58a:	b21b      	sxth	r3, r3
 801a58c:	ee00 3a10 	vmov	s0, r3
 801a590:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a594:	9006      	str	r0, [sp, #24]
 801a596:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a59a:	f008 f9e9 	bl	8022970 <roundf>
 801a59e:	fb96 f3f9 	sdiv	r3, r6, r9
 801a5a2:	fb09 6313 	mls	r3, r9, r3, r6
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	bfb8      	it	lt
 801a5aa:	444b      	addlt	r3, r9
 801a5ac:	b21b      	sxth	r3, r3
 801a5ae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a5b2:	ee00 3a10 	vmov	s0, r3
 801a5b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a5ba:	edcd 7a05 	vstr	s15, [sp, #20]
 801a5be:	9806      	ldr	r0, [sp, #24]
 801a5c0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801a5c4:	9205      	str	r2, [sp, #20]
 801a5c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a5ca:	9007      	str	r0, [sp, #28]
 801a5cc:	f008 f9d0 	bl	8022970 <roundf>
 801a5d0:	fb98 f3f9 	sdiv	r3, r8, r9
 801a5d4:	fb09 8313 	mls	r3, r9, r3, r8
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	bfb8      	it	lt
 801a5dc:	444b      	addlt	r3, r9
 801a5de:	b21b      	sxth	r3, r3
 801a5e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a5e4:	ee00 3a10 	vmov	s0, r3
 801a5e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a5ec:	edcd 7a06 	vstr	s15, [sp, #24]
 801a5f0:	9807      	ldr	r0, [sp, #28]
 801a5f2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801a5f6:	9206      	str	r2, [sp, #24]
 801a5f8:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a5fc:	9009      	str	r0, [sp, #36]	@ 0x24
 801a5fe:	f008 f9b7 	bl	8022970 <roundf>
 801a602:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a606:	e9db 322a 	ldrd	r3, r2, [fp, #168]	@ 0xa8
 801a60a:	edcd 7a07 	vstr	s15, [sp, #28]
 801a60e:	f89d 101c 	ldrb.w	r1, [sp, #28]
 801a612:	9107      	str	r1, [sp, #28]
 801a614:	9905      	ldr	r1, [sp, #20]
 801a616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a618:	291f      	cmp	r1, #31
 801a61a:	f240 8261 	bls.w	801aae0 <MEMS_runMagCal.constprop.0+0xca0>
 801a61e:	f1a1 0220 	sub.w	r2, r1, #32
 801a622:	2101      	movs	r1, #1
 801a624:	fa01 f202 	lsl.w	r2, r1, r2
 801a628:	401a      	ands	r2, r3
 801a62a:	9d06      	ldr	r5, [sp, #24]
 801a62c:	2d1f      	cmp	r5, #31
 801a62e:	e9db 312c 	ldrd	r3, r1, [fp, #176]	@ 0xb0
 801a632:	f240 8243 	bls.w	801aabc <MEMS_runMagCal.constprop.0+0xc7c>
 801a636:	f1a5 0120 	sub.w	r1, r5, #32
 801a63a:	2501      	movs	r5, #1
 801a63c:	fa05 f101 	lsl.w	r1, r5, r1
 801a640:	ea01 0c03 	and.w	ip, r1, r3
 801a644:	9907      	ldr	r1, [sp, #28]
 801a646:	291f      	cmp	r1, #31
 801a648:	e9db 532e 	ldrd	r5, r3, [fp, #184]	@ 0xb8
 801a64c:	f240 8242 	bls.w	801aad4 <MEMS_runMagCal.constprop.0+0xc94>
 801a650:	f1a1 0520 	sub.w	r5, r1, #32
 801a654:	2101      	movs	r1, #1
 801a656:	fa01 f505 	lsl.w	r5, r1, r5
 801a65a:	402b      	ands	r3, r5
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	f040 8144 	bne.w	801a8ea <MEMS_runMagCal.constprop.0+0xaaa>
 801a662:	ea52 030c 	orrs.w	r3, r2, ip
 801a666:	f040 8144 	bne.w	801a8f2 <MEMS_runMagCal.constprop.0+0xab2>
 801a66a:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801a66e:	f89b 20a1 	ldrb.w	r2, [fp, #161]	@ 0xa1
 801a672:	9209      	str	r2, [sp, #36]	@ 0x24
 801a674:	3301      	adds	r3, #1
 801a676:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a678:	4694      	mov	ip, r2
 801a67a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a67c:	fb91 f2fc 	sdiv	r2, r1, ip
 801a680:	fb0c 1212 	mls	r2, ip, r2, r1
 801a684:	b252      	sxtb	r2, r2
 801a686:	f88b 20a2 	strb.w	r2, [fp, #162]	@ 0xa2
 801a68a:	3204      	adds	r2, #4
 801a68c:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
 801a690:	1c43      	adds	r3, r0, #1
 801a692:	f8db 20a4 	ldr.w	r2, [fp, #164]	@ 0xa4
 801a696:	9802      	ldr	r0, [sp, #8]
 801a698:	f8ab 43b8 	strh.w	r4, [fp, #952]	@ 0x3b8
 801a69c:	1a80      	subs	r0, r0, r2
 801a69e:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801a6a2:	f8ab 63ba 	strh.w	r6, [fp, #954]	@ 0x3ba
 801a6a6:	b2bf      	uxth	r7, r7
 801a6a8:	4563      	cmp	r3, ip
 801a6aa:	fb12 0207 	smlabb	r2, r2, r7, r0
 801a6ae:	bfa8      	it	ge
 801a6b0:	4663      	movge	r3, ip
 801a6b2:	f8a1 20a0 	strh.w	r2, [r1, #160]	@ 0xa0
 801a6b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a6b8:	f8ab 83bc 	strh.w	r8, [fp, #956]	@ 0x3bc
 801a6bc:	b2db      	uxtb	r3, r3
 801a6be:	4293      	cmp	r3, r2
 801a6c0:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 801a6c4:	f8a1 40a2 	strh.w	r4, [r1, #162]	@ 0xa2
 801a6c8:	f8a1 60a4 	strh.w	r6, [r1, #164]	@ 0xa4
 801a6cc:	f8a1 80a6 	strh.w	r8, [r1, #166]	@ 0xa6
 801a6d0:	f000 859e 	beq.w	801b210 <MEMS_runMagCal.constprop.0+0x13d0>
 801a6d4:	9b05      	ldr	r3, [sp, #20]
 801a6d6:	2b1f      	cmp	r3, #31
 801a6d8:	f240 853b 	bls.w	801b152 <MEMS_runMagCal.constprop.0+0x1312>
 801a6dc:	2201      	movs	r2, #1
 801a6de:	3b20      	subs	r3, #32
 801a6e0:	fa02 f303 	lsl.w	r3, r2, r3
 801a6e4:	f8db 20a8 	ldr.w	r2, [fp, #168]	@ 0xa8
 801a6e8:	4313      	orrs	r3, r2
 801a6ea:	f8cb 30a8 	str.w	r3, [fp, #168]	@ 0xa8
 801a6ee:	9b06      	ldr	r3, [sp, #24]
 801a6f0:	2b1f      	cmp	r3, #31
 801a6f2:	f240 8524 	bls.w	801b13e <MEMS_runMagCal.constprop.0+0x12fe>
 801a6f6:	2201      	movs	r2, #1
 801a6f8:	3b20      	subs	r3, #32
 801a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 801a6fe:	f8db 20b0 	ldr.w	r2, [fp, #176]	@ 0xb0
 801a702:	4313      	orrs	r3, r2
 801a704:	f8cb 30b0 	str.w	r3, [fp, #176]	@ 0xb0
 801a708:	9b07      	ldr	r3, [sp, #28]
 801a70a:	2b1f      	cmp	r3, #31
 801a70c:	f240 8513 	bls.w	801b136 <MEMS_runMagCal.constprop.0+0x12f6>
 801a710:	3b20      	subs	r3, #32
 801a712:	2201      	movs	r2, #1
 801a714:	fa02 f303 	lsl.w	r3, r2, r3
 801a718:	f8db 20bc 	ldr.w	r2, [fp, #188]	@ 0xbc
 801a71c:	4313      	orrs	r3, r2
 801a71e:	f8cb 30bc 	str.w	r3, [fp, #188]	@ 0xbc
 801a722:	2301      	movs	r3, #1
 801a724:	930a      	str	r3, [sp, #40]	@ 0x28
 801a726:	9b01      	ldr	r3, [sp, #4]
 801a728:	3701      	adds	r7, #1
 801a72a:	b23f      	sxth	r7, r7
 801a72c:	429f      	cmp	r7, r3
 801a72e:	463a      	mov	r2, r7
 801a730:	f6ff aeec 	blt.w	801a50c <MEMS_runMagCal.constprop.0+0x6cc>
 801a734:	f89b 3014 	ldrb.w	r3, [fp, #20]
 801a738:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a73a:	431a      	orrs	r2, r3
 801a73c:	b2d3      	uxtb	r3, r2
 801a73e:	f88b 3014 	strb.w	r3, [fp, #20]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d064      	beq.n	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801a746:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 801a74a:	9305      	str	r3, [sp, #20]
 801a74c:	2b19      	cmp	r3, #25
 801a74e:	d95f      	bls.n	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801a750:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a754:	9306      	str	r3, [sp, #24]
 801a756:	b123      	cbz	r3, 801a762 <MEMS_runMagCal.constprop.0+0x922>
 801a758:	f8db 3018 	ldr.w	r3, [fp, #24]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	f040 850c 	bne.w	801b17a <MEMS_runMagCal.constprop.0+0x133a>
 801a762:	9b08      	ldr	r3, [sp, #32]
 801a764:	2b00      	cmp	r3, #0
 801a766:	f040 855a 	bne.w	801b21e <MEMS_runMagCal.constprop.0+0x13de>
 801a76a:	f8db 20b0 	ldr.w	r2, [fp, #176]	@ 0xb0
 801a76e:	9904      	ldr	r1, [sp, #16]
 801a770:	9202      	str	r2, [sp, #8]
 801a772:	2300      	movs	r3, #0
 801a774:	f8db 20bc 	ldr.w	r2, [fp, #188]	@ 0xbc
 801a778:	eddb 8a01 	vldr	s17, [fp, #4]
 801a77c:	9325      	str	r3, [sp, #148]	@ 0x94
 801a77e:	e9cd 3321 	strd	r3, r3, [sp, #132]	@ 0x84
 801a782:	e9cd 3323 	strd	r3, r3, [sp, #140]	@ 0x8c
 801a786:	e9db ea2a 	ldrd	lr, sl, [fp, #168]	@ 0xa8
 801a78a:	e9db 982d 	ldrd	r9, r8, [fp, #180]	@ 0xb4
 801a78e:	9201      	str	r2, [sp, #4]
 801a790:	460c      	mov	r4, r1
 801a792:	4608      	mov	r0, r1
 801a794:	2601      	movs	r6, #1
 801a796:	e014      	b.n	801a7c2 <MEMS_runMagCal.constprop.0+0x982>
 801a798:	9d02      	ldr	r5, [sp, #8]
 801a79a:	4015      	ands	r5, r2
 801a79c:	2d00      	cmp	r5, #0
 801a79e:	bf18      	it	ne
 801a7a0:	3001      	addne	r0, #1
 801a7a2:	9d01      	ldr	r5, [sp, #4]
 801a7a4:	402a      	ands	r2, r5
 801a7a6:	f1bc 0f00 	cmp.w	ip, #0
 801a7aa:	bf18      	it	ne
 801a7ac:	3101      	addne	r1, #1
 801a7ae:	2a00      	cmp	r2, #0
 801a7b0:	bf18      	it	ne
 801a7b2:	3401      	addne	r4, #1
 801a7b4:	2f3f      	cmp	r7, #63	@ 0x3f
 801a7b6:	b2c9      	uxtb	r1, r1
 801a7b8:	b2c0      	uxtb	r0, r0
 801a7ba:	b2e4      	uxtb	r4, r4
 801a7bc:	f000 81c8 	beq.w	801ab50 <MEMS_runMagCal.constprop.0+0xd10>
 801a7c0:	3301      	adds	r3, #1
 801a7c2:	f1a3 0220 	sub.w	r2, r3, #32
 801a7c6:	fa06 f202 	lsl.w	r2, r6, r2
 801a7ca:	2b1f      	cmp	r3, #31
 801a7cc:	ea0e 0c02 	and.w	ip, lr, r2
 801a7d0:	b2df      	uxtb	r7, r3
 801a7d2:	fa06 f503 	lsl.w	r5, r6, r3
 801a7d6:	d8df      	bhi.n	801a798 <MEMS_runMagCal.constprop.0+0x958>
 801a7d8:	ea0a 0205 	and.w	r2, sl, r5
 801a7dc:	2a00      	cmp	r2, #0
 801a7de:	bf18      	it	ne
 801a7e0:	3101      	addne	r1, #1
 801a7e2:	ea09 0205 	and.w	r2, r9, r5
 801a7e6:	ea05 0508 	and.w	r5, r5, r8
 801a7ea:	2a00      	cmp	r2, #0
 801a7ec:	bf18      	it	ne
 801a7ee:	3001      	addne	r0, #1
 801a7f0:	2d00      	cmp	r5, #0
 801a7f2:	bf18      	it	ne
 801a7f4:	3401      	addne	r4, #1
 801a7f6:	b2c9      	uxtb	r1, r1
 801a7f8:	b2c0      	uxtb	r0, r0
 801a7fa:	b2e4      	uxtb	r4, r4
 801a7fc:	e7e0      	b.n	801a7c0 <MEMS_runMagCal.constprop.0+0x980>
 801a7fe:	9903      	ldr	r1, [sp, #12]
 801a800:	f8cb 1020 	str.w	r1, [fp, #32]
 801a804:	2200      	movs	r2, #0
 801a806:	23ff      	movs	r3, #255	@ 0xff
 801a808:	f88b 20a0 	strb.w	r2, [fp, #160]	@ 0xa0
 801a80c:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 801a810:	f20d 5d4c 	addw	sp, sp, #1356	@ 0x54c
 801a814:	ecbd 8b0c 	vpop	{d8-d13}
 801a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a81c:	f89b 406c 	ldrb.w	r4, [fp, #108]	@ 0x6c
 801a820:	eddf 7ac7 	vldr	s15, [pc, #796]	@ 801ab40 <MEMS_runMagCal.constprop.0+0xd00>
 801a824:	2c01      	cmp	r4, #1
 801a826:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
 801a82a:	eeb0 0a67 	vmov.f32	s0, s15
 801a82e:	f63f ad9b 	bhi.w	801a368 <MEMS_runMagCal.constprop.0+0x528>
 801a832:	e5a3      	b.n	801a37c <MEMS_runMagCal.constprop.0+0x53c>
 801a834:	4689      	mov	r9, r1
 801a836:	e57a      	b.n	801a32e <MEMS_runMagCal.constprop.0+0x4ee>
 801a838:	f89b 60a0 	ldrb.w	r6, [fp, #160]	@ 0xa0
 801a83c:	4615      	mov	r5, r2
 801a83e:	2e00      	cmp	r6, #0
 801a840:	f47f ae39 	bne.w	801a4b6 <MEMS_runMagCal.constprop.0+0x676>
 801a844:	9b08      	ldr	r3, [sp, #32]
 801a846:	2b00      	cmp	r3, #0
 801a848:	f47f ae4a 	bne.w	801a4e0 <MEMS_runMagCal.constprop.0+0x6a0>
 801a84c:	9b04      	ldr	r3, [sp, #16]
 801a84e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a850:	e770      	b.n	801a734 <MEMS_runMagCal.constprop.0+0x8f4>
 801a852:	45b8      	cmp	r8, r7
 801a854:	f000 8510 	beq.w	801b278 <MEMS_runMagCal.constprop.0+0x1438>
 801a858:	2c03      	cmp	r4, #3
 801a85a:	f47f adcb 	bne.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801a85e:	ee07 1a90 	vmov	s15, r1
 801a862:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 801ab44 <MEMS_runMagCal.constprop.0+0xd04>
 801a866:	ed9b 7a06 	vldr	s14, [fp, #24]
 801a86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a86e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a872:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a87e:	f77f adb9 	ble.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801a882:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a886:	2b00      	cmp	r3, #0
 801a888:	f43f adb4 	beq.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801a88c:	eddd 7a03 	vldr	s15, [sp, #12]
 801a890:	330a      	adds	r3, #10
 801a892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a896:	ee07 3a90 	vmov	s15, r3
 801a89a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a8a2:	eef4 6ae7 	vcmpe.f32	s13, s15
 801a8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8aa:	f77f ada3 	ble.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801a8ae:	f89b 3015 	ldrb.w	r3, [fp, #21]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	f47f ad9e 	bne.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801a8b8:	f89b 3054 	ldrb.w	r3, [fp, #84]	@ 0x54
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d0a7      	beq.n	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801a8c0:	f89b 305c 	ldrb.w	r3, [fp, #92]	@ 0x5c
 801a8c4:	2bff      	cmp	r3, #255	@ 0xff
 801a8c6:	d1a3      	bne.n	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801a8c8:	e594      	b.n	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801a8ca:	f8ab 5008 	strh.w	r5, [fp, #8]
 801a8ce:	f8cb 104c 	str.w	r1, [fp, #76]	@ 0x4c
 801a8d2:	f20d 5d4c 	addw	sp, sp, #1356	@ 0x54c
 801a8d6:	ecbd 8b0c 	vpop	{d8-d13}
 801a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8de:	2300      	movs	r3, #0
 801a8e0:	9308      	str	r3, [sp, #32]
 801a8e2:	9304      	str	r3, [sp, #16]
 801a8e4:	f04f 0900 	mov.w	r9, #0
 801a8e8:	e524      	b.n	801a334 <MEMS_runMagCal.constprop.0+0x4f4>
 801a8ea:	b112      	cbz	r2, 801a8f2 <MEMS_runMagCal.constprop.0+0xab2>
 801a8ec:	f1bc 0f00 	cmp.w	ip, #0
 801a8f0:	d163      	bne.n	801a9ba <MEMS_runMagCal.constprop.0+0xb7a>
 801a8f2:	f89b 30a1 	ldrb.w	r3, [fp, #161]	@ 0xa1
 801a8f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	4290      	cmp	r0, r2
 801a8fc:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801a900:	f000 8431 	beq.w	801b166 <MEMS_runMagCal.constprop.0+0x1326>
 801a904:	3301      	adds	r3, #1
 801a906:	4611      	mov	r1, r2
 801a908:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a90a:	1a1b      	subs	r3, r3, r0
 801a90c:	fb93 f2f2 	sdiv	r2, r3, r2
 801a910:	fb01 3212 	mls	r2, r1, r2, r3
 801a914:	2a00      	cmp	r2, #0
 801a916:	bfbc      	itt	lt
 801a918:	460b      	movlt	r3, r1
 801a91a:	18d2      	addlt	r2, r2, r3
 801a91c:	468c      	mov	ip, r1
 801a91e:	b212      	sxth	r2, r2
 801a920:	eb00 0e02 	add.w	lr, r0, r2
 801a924:	fb92 f3fc 	sdiv	r3, r2, ip
 801a928:	fb0c 2313 	mls	r3, ip, r3, r2
 801a92c:	b2db      	uxtb	r3, r3
 801a92e:	3304      	adds	r3, #4
 801a930:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801a934:	3201      	adds	r2, #1
 801a936:	f9b3 50a2 	ldrsh.w	r5, [r3, #162]	@ 0xa2
 801a93a:	f9b3 10a4 	ldrsh.w	r1, [r3, #164]	@ 0xa4
 801a93e:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 801a942:	1b65      	subs	r5, r4, r5
 801a944:	1a71      	subs	r1, r6, r1
 801a946:	ee07 5a90 	vmov	s15, r5
 801a94a:	ee06 1a90 	vmov	s13, r1
 801a94e:	eba8 0303 	sub.w	r3, r8, r3
 801a952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a956:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a95a:	ee07 3a10 	vmov	s14, r3
 801a95e:	eef0 7ae7 	vabs.f32	s15, s15
 801a962:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a966:	eef0 6ae6 	vabs.f32	s13, s13
 801a96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a96e:	eeb0 7ac7 	vabs.f32	s14, s14
 801a972:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a976:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801a97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a97e:	dc1c      	bgt.n	801a9ba <MEMS_runMagCal.constprop.0+0xb7a>
 801a980:	4596      	cmp	lr, r2
 801a982:	d1cf      	bne.n	801a924 <MEMS_runMagCal.constprop.0+0xae4>
 801a984:	e679      	b.n	801a67a <MEMS_runMagCal.constprop.0+0x83a>
 801a986:	ee07 6a90 	vmov	s15, r6
 801a98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a98e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801a992:	eef0 7ae7 	vabs.f32	s15, s15
 801a996:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a99e:	f77f adce 	ble.w	801a53e <MEMS_runMagCal.constprop.0+0x6fe>
 801a9a2:	ee07 8a90 	vmov	s15, r8
 801a9a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9aa:	eef0 7ae7 	vabs.f32	s15, s15
 801a9ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9b6:	f77f adc2 	ble.w	801a53e <MEMS_runMagCal.constprop.0+0x6fe>
 801a9ba:	b2bf      	uxth	r7, r7
 801a9bc:	e6b3      	b.n	801a726 <MEMS_runMagCal.constprop.0+0x8e6>
 801a9be:	f04f 0301 	mov.w	r3, #1
 801a9c2:	9902      	ldr	r1, [sp, #8]
 801a9c4:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 801a9c8:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 801a9cc:	f8ab 40c2 	strh.w	r4, [fp, #194]	@ 0xc2
 801a9d0:	fb02 1203 	mla	r2, r2, r3, r1
 801a9d4:	f8ab 43b8 	strh.w	r4, [fp, #952]	@ 0x3b8
 801a9d8:	fb94 f3f9 	sdiv	r3, r4, r9
 801a9dc:	fb09 4413 	mls	r4, r9, r3, r4
 801a9e0:	2c00      	cmp	r4, #0
 801a9e2:	bfb8      	it	lt
 801a9e4:	444c      	addlt	r4, r9
 801a9e6:	b224      	sxth	r4, r4
 801a9e8:	ee07 4a90 	vmov	s15, r4
 801a9ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a9f0:	f88b 00a2 	strb.w	r0, [fp, #162]	@ 0xa2
 801a9f4:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a9f8:	f8ab 00c0 	strh.w	r0, [fp, #192]	@ 0xc0
 801a9fc:	f8cb 20a4 	str.w	r2, [fp, #164]	@ 0xa4
 801aa00:	f8ab 60c4 	strh.w	r6, [fp, #196]	@ 0xc4
 801aa04:	f8ab 63ba 	strh.w	r6, [fp, #954]	@ 0x3ba
 801aa08:	f8ab 80c6 	strh.w	r8, [fp, #198]	@ 0xc6
 801aa0c:	f8ab 83bc 	strh.w	r8, [fp, #956]	@ 0x3bc
 801aa10:	f007 ffae 	bl	8022970 <roundf>
 801aa14:	fb96 f3f9 	sdiv	r3, r6, r9
 801aa18:	fb09 6613 	mls	r6, r9, r3, r6
 801aa1c:	2e00      	cmp	r6, #0
 801aa1e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801aa22:	bfb8      	it	lt
 801aa24:	444e      	addlt	r6, r9
 801aa26:	b236      	sxth	r6, r6
 801aa28:	edcd 7a05 	vstr	s15, [sp, #20]
 801aa2c:	ee07 6a90 	vmov	s15, r6
 801aa30:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801aa34:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801aa38:	ee20 0a08 	vmul.f32	s0, s0, s16
 801aa3c:	f007 ff98 	bl	8022970 <roundf>
 801aa40:	fb98 f3f9 	sdiv	r3, r8, r9
 801aa44:	fb09 8813 	mls	r8, r9, r3, r8
 801aa48:	f1b8 0f00 	cmp.w	r8, #0
 801aa4c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801aa50:	bfb8      	it	lt
 801aa52:	44c8      	addlt	r8, r9
 801aa54:	fa0f f888 	sxth.w	r8, r8
 801aa58:	edcd 7a05 	vstr	s15, [sp, #20]
 801aa5c:	ee07 8a90 	vmov	s15, r8
 801aa60:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801aa64:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801aa68:	ee20 0a08 	vmul.f32	s0, s0, s16
 801aa6c:	f007 ff80 	bl	8022970 <roundf>
 801aa70:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801aa74:	2c1f      	cmp	r4, #31
 801aa76:	edcd 7a05 	vstr	s15, [sp, #20]
 801aa7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801aa7e:	d952      	bls.n	801ab26 <MEMS_runMagCal.constprop.0+0xce6>
 801aa80:	2101      	movs	r1, #1
 801aa82:	f1a4 0220 	sub.w	r2, r4, #32
 801aa86:	fa01 f202 	lsl.w	r2, r1, r2
 801aa8a:	f8db 10a8 	ldr.w	r1, [fp, #168]	@ 0xa8
 801aa8e:	430a      	orrs	r2, r1
 801aa90:	f8cb 20a8 	str.w	r2, [fp, #168]	@ 0xa8
 801aa94:	2d1f      	cmp	r5, #31
 801aa96:	d93d      	bls.n	801ab14 <MEMS_runMagCal.constprop.0+0xcd4>
 801aa98:	2101      	movs	r1, #1
 801aa9a:	f1a5 0220 	sub.w	r2, r5, #32
 801aa9e:	fa01 f202 	lsl.w	r2, r1, r2
 801aaa2:	f8db 10b0 	ldr.w	r1, [fp, #176]	@ 0xb0
 801aaa6:	430a      	orrs	r2, r1
 801aaa8:	f8cb 20b0 	str.w	r2, [fp, #176]	@ 0xb0
 801aaac:	2b1f      	cmp	r3, #31
 801aaae:	d925      	bls.n	801aafc <MEMS_runMagCal.constprop.0+0xcbc>
 801aab0:	3b20      	subs	r3, #32
 801aab2:	2201      	movs	r2, #1
 801aab4:	fa02 f303 	lsl.w	r3, r2, r3
 801aab8:	b2bf      	uxth	r7, r7
 801aaba:	e62d      	b.n	801a718 <MEMS_runMagCal.constprop.0+0x8d8>
 801aabc:	462b      	mov	r3, r5
 801aabe:	2501      	movs	r5, #1
 801aac0:	fa05 f303 	lsl.w	r3, r5, r3
 801aac4:	ea01 0c03 	and.w	ip, r1, r3
 801aac8:	9907      	ldr	r1, [sp, #28]
 801aaca:	291f      	cmp	r1, #31
 801aacc:	e9db 532e 	ldrd	r5, r3, [fp, #184]	@ 0xb8
 801aad0:	f63f adbe 	bhi.w	801a650 <MEMS_runMagCal.constprop.0+0x810>
 801aad4:	460b      	mov	r3, r1
 801aad6:	2101      	movs	r1, #1
 801aad8:	fa01 f303 	lsl.w	r3, r1, r3
 801aadc:	402b      	ands	r3, r5
 801aade:	e5bd      	b.n	801a65c <MEMS_runMagCal.constprop.0+0x81c>
 801aae0:	460b      	mov	r3, r1
 801aae2:	2101      	movs	r1, #1
 801aae4:	fa01 f303 	lsl.w	r3, r1, r3
 801aae8:	401a      	ands	r2, r3
 801aaea:	e59e      	b.n	801a62a <MEMS_runMagCal.constprop.0+0x7ea>
 801aaec:	f04f 0c01 	mov.w	ip, #1
 801aaf0:	e4b9      	b.n	801a466 <MEMS_runMagCal.constprop.0+0x626>
 801aaf2:	2600      	movs	r6, #0
 801aaf4:	f89b 7025 	ldrb.w	r7, [fp, #37]	@ 0x25
 801aaf8:	4633      	mov	r3, r6
 801aafa:	e451      	b.n	801a3a0 <MEMS_runMagCal.constprop.0+0x560>
 801aafc:	2201      	movs	r2, #1
 801aafe:	fa02 f303 	lsl.w	r3, r2, r3
 801ab02:	b2bf      	uxth	r7, r7
 801ab04:	f8db 20b8 	ldr.w	r2, [fp, #184]	@ 0xb8
 801ab08:	4313      	orrs	r3, r2
 801ab0a:	f8cb 30b8 	str.w	r3, [fp, #184]	@ 0xb8
 801ab0e:	2301      	movs	r3, #1
 801ab10:	930a      	str	r3, [sp, #40]	@ 0x28
 801ab12:	e608      	b.n	801a726 <MEMS_runMagCal.constprop.0+0x8e6>
 801ab14:	2201      	movs	r2, #1
 801ab16:	fa02 f505 	lsl.w	r5, r2, r5
 801ab1a:	f8db 20b4 	ldr.w	r2, [fp, #180]	@ 0xb4
 801ab1e:	4315      	orrs	r5, r2
 801ab20:	f8cb 50b4 	str.w	r5, [fp, #180]	@ 0xb4
 801ab24:	e7c2      	b.n	801aaac <MEMS_runMagCal.constprop.0+0xc6c>
 801ab26:	2201      	movs	r2, #1
 801ab28:	fa02 f404 	lsl.w	r4, r2, r4
 801ab2c:	f8db 20ac 	ldr.w	r2, [fp, #172]	@ 0xac
 801ab30:	4314      	orrs	r4, r2
 801ab32:	f8cb 40ac 	str.w	r4, [fp, #172]	@ 0xac
 801ab36:	e7ad      	b.n	801aa94 <MEMS_runMagCal.constprop.0+0xc54>
 801ab38:	f04f 0c00 	mov.w	ip, #0
 801ab3c:	f7ff bb39 	b.w	801a1b2 <MEMS_runMagCal.constprop.0+0x372>
 801ab40:	477fff00 	.word	0x477fff00
 801ab44:	3a83126f 	.word	0x3a83126f
 801ab48:	42340000 	.word	0x42340000
 801ab4c:	3faccccd 	.word	0x3faccccd
 801ab50:	2905      	cmp	r1, #5
 801ab52:	f240 82e5 	bls.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801ab56:	2805      	cmp	r0, #5
 801ab58:	f240 82e2 	bls.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801ab5c:	2c05      	cmp	r4, #5
 801ab5e:	f240 82df 	bls.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801ab62:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801ab66:	9301      	str	r3, [sp, #4]
 801ab68:	f89b a0a1 	ldrb.w	sl, [fp, #161]	@ 0xa1
 801ab6c:	9b05      	ldr	r3, [sp, #20]
 801ab6e:	4553      	cmp	r3, sl
 801ab70:	9b01      	ldr	r3, [sp, #4]
 801ab72:	f103 0501 	add.w	r5, r3, #1
 801ab76:	9b05      	ldr	r3, [sp, #20]
 801ab78:	f000 8405 	beq.w	801b386 <MEMS_runMagCal.constprop.0+0x1546>
 801ab7c:	1aea      	subs	r2, r5, r3
 801ab7e:	fb92 f3fa 	sdiv	r3, r2, sl
 801ab82:	fb0a 2213 	mls	r2, sl, r3, r2
 801ab86:	2a00      	cmp	r2, #0
 801ab88:	bfb8      	it	lt
 801ab8a:	4452      	addlt	r2, sl
 801ab8c:	46d1      	mov	r9, sl
 801ab8e:	b212      	sxth	r2, r2
 801ab90:	f102 0315 	add.w	r3, r2, #21
 801ab94:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801ab98:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 801ab9c:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 801aba0:	f9b3 701e 	ldrsh.w	r7, [r3, #30]
 801aba4:	9b05      	ldr	r3, [sp, #20]
 801aba6:	4638      	mov	r0, r7
 801aba8:	eb03 0802 	add.w	r8, r3, r2
 801abac:	4664      	mov	r4, ip
 801abae:	468e      	mov	lr, r1
 801abb0:	fb92 f3f9 	sdiv	r3, r2, r9
 801abb4:	fb09 2313 	mls	r3, r9, r3, r2
 801abb8:	b2db      	uxtb	r3, r3
 801abba:	3315      	adds	r3, #21
 801abbc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801abc0:	3201      	adds	r2, #1
 801abc2:	f9b3 601a 	ldrsh.w	r6, [r3, #26]
 801abc6:	42b1      	cmp	r1, r6
 801abc8:	bfb8      	it	lt
 801abca:	4631      	movlt	r1, r6
 801abcc:	45b6      	cmp	lr, r6
 801abce:	bfa8      	it	ge
 801abd0:	46b6      	movge	lr, r6
 801abd2:	f9b3 601c 	ldrsh.w	r6, [r3, #28]
 801abd6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801abda:	45b4      	cmp	ip, r6
 801abdc:	bfb8      	it	lt
 801abde:	46b4      	movlt	ip, r6
 801abe0:	42b4      	cmp	r4, r6
 801abe2:	bfa8      	it	ge
 801abe4:	4634      	movge	r4, r6
 801abe6:	429f      	cmp	r7, r3
 801abe8:	bfb8      	it	lt
 801abea:	461f      	movlt	r7, r3
 801abec:	4298      	cmp	r0, r3
 801abee:	bfa8      	it	ge
 801abf0:	4618      	movge	r0, r3
 801abf2:	4542      	cmp	r2, r8
 801abf4:	d1dc      	bne.n	801abb0 <MEMS_runMagCal.constprop.0+0xd70>
 801abf6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801abfa:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 801abfe:	eba1 010e 	sub.w	r1, r1, lr
 801ac02:	b209      	sxth	r1, r1
 801ac04:	ebac 0404 	sub.w	r4, ip, r4
 801ac08:	1a38      	subs	r0, r7, r0
 801ac0a:	b224      	sxth	r4, r4
 801ac0c:	b200      	sxth	r0, r0
 801ac0e:	ed5f 7a32 	vldr	s15, [pc, #-200]	@ 801ab48 <MEMS_runMagCal.constprop.0+0xd08>
 801ac12:	ee06 1a90 	vmov	s13, r1
 801ac16:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ac1a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801ac1e:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801ac22:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ac26:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801ac2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac2e:	f300 838c 	bgt.w	801b34a <MEMS_runMagCal.constprop.0+0x150a>
 801ac32:	ee06 4a90 	vmov	s13, r4
 801ac36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ac3a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac42:	f100 8382 	bmi.w	801b34a <MEMS_runMagCal.constprop.0+0x150a>
 801ac46:	ee05 0a90 	vmov	s11, r0
 801ac4a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ac4e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801ac52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac56:	f100 8378 	bmi.w	801b34a <MEMS_runMagCal.constprop.0+0x150a>
 801ac5a:	428c      	cmp	r4, r1
 801ac5c:	4623      	mov	r3, r4
 801ac5e:	bfb8      	it	lt
 801ac60:	460b      	movlt	r3, r1
 801ac62:	4283      	cmp	r3, r0
 801ac64:	bfb8      	it	lt
 801ac66:	4603      	movlt	r3, r0
 801ac68:	ee08 3a10 	vmov	s16, r3
 801ac6c:	4288      	cmp	r0, r1
 801ac6e:	f89b 306c 	ldrb.w	r3, [fp, #108]	@ 0x6c
 801ac72:	9301      	str	r3, [sp, #4]
 801ac74:	4602      	mov	r2, r0
 801ac76:	ee18 3a10 	vmov	r3, s16
 801ac7a:	bfa8      	it	ge
 801ac7c:	460a      	movge	r2, r1
 801ac7e:	42a2      	cmp	r2, r4
 801ac80:	bfa8      	it	ge
 801ac82:	4622      	movge	r2, r4
 801ac84:	428b      	cmp	r3, r1
 801ac86:	f89b 6054 	ldrb.w	r6, [fp, #84]	@ 0x54
 801ac8a:	f300 83d2 	bgt.w	801b432 <MEMS_runMagCal.constprop.0+0x15f2>
 801ac8e:	4613      	mov	r3, r2
 801ac90:	ee18 1a10 	vmov	r1, s16
 801ac94:	42a1      	cmp	r1, r4
 801ac96:	dd02      	ble.n	801ac9e <MEMS_runMagCal.constprop.0+0xe5e>
 801ac98:	42a2      	cmp	r2, r4
 801ac9a:	bfb8      	it	lt
 801ac9c:	4623      	movlt	r3, r4
 801ac9e:	ee18 1a10 	vmov	r1, s16
 801aca2:	4288      	cmp	r0, r1
 801aca4:	da02      	bge.n	801acac <MEMS_runMagCal.constprop.0+0xe6c>
 801aca6:	4290      	cmp	r0, r2
 801aca8:	bfc8      	it	gt
 801acaa:	4603      	movgt	r3, r0
 801acac:	9901      	ldr	r1, [sp, #4]
 801acae:	4331      	orrs	r1, r6
 801acb0:	f040 8384 	bne.w	801b3bc <MEMS_runMagCal.constprop.0+0x157c>
 801acb4:	eef4 7ac6 	vcmpe.f32	s15, s12
 801acb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acbc:	f300 83d6 	bgt.w	801b46c <MEMS_runMagCal.constprop.0+0x162c>
 801acc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 801acc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acc8:	f300 83d0 	bgt.w	801b46c <MEMS_runMagCal.constprop.0+0x162c>
 801accc:	eef4 7ae5 	vcmpe.f32	s15, s11
 801acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acd4:	bfcc      	ite	gt
 801acd6:	f04f 0801 	movgt.w	r8, #1
 801acda:	f04f 0800 	movle.w	r8, #0
 801acde:	ed1f 7a65 	vldr	s14, [pc, #-404]	@ 801ab4c <MEMS_runMagCal.constprop.0+0xd0c>
 801ace2:	eeb8 5ac8 	vcvt.f32.s32	s10, s16
 801ace6:	ee27 7a87 	vmul.f32	s14, s15, s14
 801acea:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acf2:	f2c0 81fd 	blt.w	801b0f0 <MEMS_runMagCal.constprop.0+0x12b0>
 801acf6:	ee07 3a10 	vmov	s14, r3
 801acfa:	eeb7 5a02 	vmov.f32	s10, #114	@ 0x3f900000  1.125
 801acfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad02:	ee27 5a85 	vmul.f32	s10, s15, s10
 801ad06:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801ad0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad0e:	f2c0 81ef 	blt.w	801b0f0 <MEMS_runMagCal.constprop.0+0x12b0>
 801ad12:	ee18 3a10 	vmov	r3, s16
 801ad16:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801ad1a:	f280 81e9 	bge.w	801b0f0 <MEMS_runMagCal.constprop.0+0x12b0>
 801ad1e:	ee07 2a10 	vmov	s14, r2
 801ad22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad26:	eeb7 5a04 	vmov.f32	s10, #116	@ 0x3fa00000  1.250
 801ad2a:	ee27 7a05 	vmul.f32	s14, s14, s10
 801ad2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ad32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad36:	f140 81db 	bpl.w	801b0f0 <MEMS_runMagCal.constprop.0+0x12b0>
 801ad3a:	9b05      	ldr	r3, [sp, #20]
 801ad3c:	4553      	cmp	r3, sl
 801ad3e:	f001 82bb 	beq.w	801c2b8 <MEMS_runMagCal.constprop.0+0x2478>
 801ad42:	1aef      	subs	r7, r5, r3
 801ad44:	fb97 f3f9 	sdiv	r3, r7, r9
 801ad48:	fb09 7713 	mls	r7, r9, r3, r7
 801ad4c:	2f00      	cmp	r7, #0
 801ad4e:	bfb8      	it	lt
 801ad50:	4457      	addlt	r7, sl
 801ad52:	b23f      	sxth	r7, r7
 801ad54:	f8dd e010 	ldr.w	lr, [sp, #16]
 801ad58:	b27f      	sxtb	r7, r7
 801ad5a:	f1c7 0301 	rsb	r3, r7, #1
 801ad5e:	46f4      	mov	ip, lr
 801ad60:	9302      	str	r3, [sp, #8]
 801ad62:	463a      	mov	r2, r7
 801ad64:	3701      	adds	r7, #1
 801ad66:	fb92 f3f9 	sdiv	r3, r2, r9
 801ad6a:	fb09 2213 	mls	r2, r9, r3, r2
 801ad6e:	b255      	sxtb	r5, r2
 801ad70:	fb97 f3f9 	sdiv	r3, r7, r9
 801ad74:	fb09 7313 	mls	r3, r9, r3, r7
 801ad78:	2d00      	cmp	r5, #0
 801ad7a:	b25b      	sxtb	r3, r3
 801ad7c:	f103 0304 	add.w	r3, r3, #4
 801ad80:	bfbc      	itt	lt
 801ad82:	4452      	addlt	r2, sl
 801ad84:	b255      	sxtblt	r5, r2
 801ad86:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 801ad8a:	3504      	adds	r5, #4
 801ad8c:	f9b2 10a2 	ldrsh.w	r1, [r2, #162]	@ 0xa2
 801ad90:	eb0b 02c5 	add.w	r2, fp, r5, lsl #3
 801ad94:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	@ 0xa2
 801ad98:	1a8c      	subs	r4, r1, r2
 801ad9a:	bf44      	itt	mi
 801ad9c:	1a52      	submi	r2, r2, r1
 801ad9e:	b214      	sxthmi	r4, r2
 801ada0:	eb0b 01c5 	add.w	r1, fp, r5, lsl #3
 801ada4:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 801ada8:	f9b1 10a4 	ldrsh.w	r1, [r1, #164]	@ 0xa4
 801adac:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	@ 0xa4
 801adb0:	bf58      	it	pl
 801adb2:	b224      	sxthpl	r4, r4
 801adb4:	1a50      	subs	r0, r2, r1
 801adb6:	bf48      	it	mi
 801adb8:	1a8a      	submi	r2, r1, r2
 801adba:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801adbe:	bf58      	it	pl
 801adc0:	b202      	sxthpl	r2, r0
 801adc2:	f9b1 00a6 	ldrsh.w	r0, [r1, #166]	@ 0xa6
 801adc6:	eb0b 01c5 	add.w	r1, fp, r5, lsl #3
 801adca:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801adce:	f9b1 10a6 	ldrsh.w	r1, [r1, #166]	@ 0xa6
 801add2:	bf48      	it	mi
 801add4:	b212      	sxthmi	r2, r2
 801add6:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 801adda:	1a46      	subs	r6, r0, r1
 801addc:	bf44      	itt	mi
 801adde:	1a09      	submi	r1, r1, r0
 801ade0:	b208      	sxthmi	r0, r1
 801ade2:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	@ 0xa0
 801ade6:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	@ 0xa0
 801adea:	eba1 0103 	sub.w	r1, r1, r3
 801adee:	b209      	sxth	r1, r1
 801adf0:	bf58      	it	pl
 801adf2:	b230      	sxthpl	r0, r6
 801adf4:	2900      	cmp	r1, #0
 801adf6:	dd20      	ble.n	801ae3a <MEMS_runMagCal.constprop.0+0xffa>
 801adf8:	1913      	adds	r3, r2, r4
 801adfa:	ee07 1a90 	vmov	s15, r1
 801adfe:	4403      	add	r3, r0
 801ae00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ae04:	fb02 f303 	mul.w	r3, r2, r3
 801ae08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ae0c:	ee07 3a90 	vmov	s15, r3
 801ae10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae14:	f10e 0e01 	add.w	lr, lr, #1
 801ae18:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801ae1c:	fa5f fe8e 	uxtb.w	lr, lr
 801ae20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801ae24:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801ae28:	ee17 3a90 	vmov	r3, s15
 801ae2c:	b21b      	sxth	r3, r3
 801ae2e:	2b96      	cmp	r3, #150	@ 0x96
 801ae30:	bfc4      	itt	gt
 801ae32:	f10c 0c01 	addgt.w	ip, ip, #1
 801ae36:	fa5f fc8c 	uxtbgt.w	ip, ip
 801ae3a:	9b02      	ldr	r3, [sp, #8]
 801ae3c:	9a05      	ldr	r2, [sp, #20]
 801ae3e:	443b      	add	r3, r7
 801ae40:	b2db      	uxtb	r3, r3
 801ae42:	429a      	cmp	r2, r3
 801ae44:	d88d      	bhi.n	801ad62 <MEMS_runMagCal.constprop.0+0xf22>
 801ae46:	fa0f fc8c 	sxth.w	ip, ip
 801ae4a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ae4e:	45f4      	cmp	ip, lr
 801ae50:	f340 8166 	ble.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801ae54:	9b08      	ldr	r3, [sp, #32]
 801ae56:	b923      	cbnz	r3, 801ae62 <MEMS_runMagCal.constprop.0+0x1022>
 801ae58:	9b01      	ldr	r3, [sp, #4]
 801ae5a:	3b02      	subs	r3, #2
 801ae5c:	2b01      	cmp	r3, #1
 801ae5e:	f240 842e 	bls.w	801b6be <MEMS_runMagCal.constprop.0+0x187e>
 801ae62:	2220      	movs	r2, #32
 801ae64:	2100      	movs	r1, #0
 801ae66:	a826      	add	r0, sp, #152	@ 0x98
 801ae68:	f006 fc12 	bl	8021690 <memset>
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	f89b 40a0 	ldrb.w	r4, [fp, #160]	@ 0xa0
 801ae72:	f89b 20a1 	ldrb.w	r2, [fp, #161]	@ 0xa1
 801ae76:	9314      	str	r3, [sp, #80]	@ 0x50
 801ae78:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
 801ae7c:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801ae80:	4294      	cmp	r4, r2
 801ae82:	f103 0301 	add.w	r3, r3, #1
 801ae86:	f000 82fb 	beq.w	801b480 <MEMS_runMagCal.constprop.0+0x1640>
 801ae8a:	1b1b      	subs	r3, r3, r4
 801ae8c:	fb93 f1f2 	sdiv	r1, r3, r2
 801ae90:	fb02 3311 	mls	r3, r2, r1, r3
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	bfb8      	it	lt
 801ae98:	189b      	addlt	r3, r3, r2
 801ae9a:	b21b      	sxth	r3, r3
 801ae9c:	2c00      	cmp	r4, #0
 801ae9e:	f000 82f6 	beq.w	801b48e <MEMS_runMagCal.constprop.0+0x164e>
 801aea2:	ed9f 6aeb 	vldr	s12, [pc, #940]	@ 801b250 <MEMS_runMagCal.constprop.0+0x1410>
 801aea6:	461d      	mov	r5, r3
 801aea8:	eef0 9a46 	vmov.f32	s19, s12
 801aeac:	eeb0 aa46 	vmov.f32	s20, s12
 801aeb0:	18e0      	adds	r0, r4, r3
 801aeb2:	fb95 f1f2 	sdiv	r1, r5, r2
 801aeb6:	fb02 5111 	mls	r1, r2, r1, r5
 801aeba:	b2c9      	uxtb	r1, r1
 801aebc:	3104      	adds	r1, #4
 801aebe:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 801aec2:	3501      	adds	r5, #1
 801aec4:	f9b1 60a2 	ldrsh.w	r6, [r1, #162]	@ 0xa2
 801aec8:	ee07 6a90 	vmov	s15, r6
 801aecc:	f9b1 60a4 	ldrsh.w	r6, [r1, #164]	@ 0xa4
 801aed0:	f9b1 10a6 	ldrsh.w	r1, [r1, #166]	@ 0xa6
 801aed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aed8:	ee07 6a10 	vmov	s14, r6
 801aedc:	ee3a aa27 	vadd.f32	s20, s20, s15
 801aee0:	ee07 1a90 	vmov	s15, r1
 801aee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeec:	4285      	cmp	r5, r0
 801aeee:	ee79 9a87 	vadd.f32	s19, s19, s14
 801aef2:	ee36 6a27 	vadd.f32	s12, s12, s15
 801aef6:	d1dc      	bne.n	801aeb2 <MEMS_runMagCal.constprop.0+0x1072>
 801aef8:	ee07 4a90 	vmov	s15, r4
 801aefc:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 801af00:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801af04:	eec7 aa8b 	vdiv.f32	s21, s15, s22
 801af08:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 801b250 <MEMS_runMagCal.constprop.0+0x1410>
 801af0c:	ed8d aa12 	vstr	s20, [sp, #72]	@ 0x48
 801af10:	edcd 9a13 	vstr	s19, [sp, #76]	@ 0x4c
 801af14:	ee2a aa8a 	vmul.f32	s20, s21, s20
 801af18:	ee6a 9aa9 	vmul.f32	s19, s21, s19
 801af1c:	ee6a aa86 	vmul.f32	s21, s21, s12
 801af20:	eef0 4a47 	vmov.f32	s9, s14
 801af24:	eef0 6a47 	vmov.f32	s13, s14
 801af28:	eeb0 4a47 	vmov.f32	s8, s14
 801af2c:	eef0 ba47 	vmov.f32	s23, s14
 801af30:	eef0 7a47 	vmov.f32	s15, s14
 801af34:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 801af38:	fb93 f1f2 	sdiv	r1, r3, r2
 801af3c:	fb02 3111 	mls	r1, r2, r1, r3
 801af40:	b2c9      	uxtb	r1, r1
 801af42:	3104      	adds	r1, #4
 801af44:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 801af48:	3301      	adds	r3, #1
 801af4a:	f9b1 50a2 	ldrsh.w	r5, [r1, #162]	@ 0xa2
 801af4e:	ee05 5a10 	vmov	s10, r5
 801af52:	f9b1 50a4 	ldrsh.w	r5, [r1, #164]	@ 0xa4
 801af56:	f9b1 10a6 	ldrsh.w	r1, [r1, #166]	@ 0xa6
 801af5a:	ee05 5a90 	vmov	s11, r5
 801af5e:	ee06 1a10 	vmov	s12, r1
 801af62:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801af66:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801af6a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801af6e:	ee35 5a4a 	vsub.f32	s10, s10, s20
 801af72:	ee75 5ae9 	vsub.f32	s11, s11, s19
 801af76:	ee36 6a6a 	vsub.f32	s12, s12, s21
 801af7a:	4283      	cmp	r3, r0
 801af7c:	eee5 ba05 	vfma.f32	s23, s10, s10
 801af80:	eea5 4a25 	vfma.f32	s8, s10, s11
 801af84:	eee5 6a06 	vfma.f32	s13, s10, s12
 801af88:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801af8c:	eee5 4a86 	vfma.f32	s9, s11, s12
 801af90:	eea6 7a06 	vfma.f32	s14, s12, s12
 801af94:	d1d0      	bne.n	801af38 <MEMS_runMagCal.constprop.0+0x10f8>
 801af96:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801af9a:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 801b270 <MEMS_runMagCal.constprop.0+0x1430>
 801af9e:	eee4 5a04 	vfma.f32	s11, s8, s8
 801afa2:	eee4 5aa4 	vfma.f32	s11, s9, s9
 801afa6:	eef4 5ac6 	vcmpe.f32	s11, s12
 801afaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afae:	d46f      	bmi.n	801b090 <MEMS_runMagCal.constprop.0+0x1250>
 801afb0:	ee7b caa7 	vadd.f32	s25, s23, s15
 801afb4:	ed9f daa5 	vldr	s26, [pc, #660]	@ 801b24c <MEMS_runMagCal.constprop.0+0x140c>
 801afb8:	ee7c ca87 	vadd.f32	s25, s25, s14
 801afbc:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 801afc0:	ee6c ca8d 	vmul.f32	s25, s25, s26
 801afc4:	ee77 7aec 	vsub.f32	s15, s15, s25
 801afc8:	ee7b baec 	vsub.f32	s23, s23, s25
 801afcc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801afd0:	ee37 7a6c 	vsub.f32	s14, s14, s25
 801afd4:	eeab 6aab 	vfma.f32	s12, s23, s23
 801afd8:	eea5 6aa3 	vfma.f32	s12, s11, s7
 801afdc:	eddf 5a94 	vldr	s11, [pc, #592]	@ 801b230 <MEMS_runMagCal.constprop.0+0x13f0>
 801afe0:	eea7 6a07 	vfma.f32	s12, s14, s14
 801afe4:	ee26 6a25 	vmul.f32	s12, s12, s11
 801afe8:	eeb1 cac6 	vsqrt.f32	s24, s12
 801afec:	eec7 5a0c 	vdiv.f32	s11, s14, s24
 801aff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801aff4:	ee87 6a0c 	vdiv.f32	s12, s14, s24
 801aff8:	ee8b 3a8c 	vdiv.f32	s6, s23, s24
 801affc:	ee66 6a26 	vmul.f32	s13, s12, s13
 801b000:	ee27 5a86 	vmul.f32	s10, s15, s12
 801b004:	ee26 7a04 	vmul.f32	s14, s12, s8
 801b008:	ee66 7ac5 	vnmul.f32	s15, s13, s10
 801b00c:	ee26 6a24 	vmul.f32	s12, s12, s9
 801b010:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b014:	ee66 4a46 	vnmul.f32	s9, s12, s12
 801b018:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b01c:	eee5 4a85 	vfma.f32	s9, s11, s10
 801b020:	ee67 5a65 	vnmul.f32	s11, s14, s11
 801b024:	eee4 7a83 	vfma.f32	s15, s9, s6
 801b028:	eee6 5a26 	vfma.f32	s11, s12, s13
 801b02c:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 801b030:	eee5 7a87 	vfma.f32	s15, s11, s14
 801b034:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b03c:	f241 8138 	bls.w	801c2b0 <MEMS_runMagCal.constprop.0+0x2470>
 801b040:	eef4 7ae3 	vcmpe.f32	s15, s7
 801b044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b048:	f281 812e 	bge.w	801c2a8 <MEMS_runMagCal.constprop.0+0x2468>
 801b04c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801b050:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b054:	f007 f988 	bl	8022368 <acosf>
 801b058:	ee20 da0d 	vmul.f32	s26, s0, s26
 801b05c:	eeb0 0a4d 	vmov.f32	s0, s26
 801b060:	f007 f9dc 	bl	802241c <cosf>
 801b064:	ee3c ca0c 	vadd.f32	s24, s24, s24
 801b068:	eddf 7a72 	vldr	s15, [pc, #456]	@ 801b234 <MEMS_runMagCal.constprop.0+0x13f4>
 801b06c:	eef0 ba6c 	vmov.f32	s23, s25
 801b070:	eee0 ba0c 	vfma.f32	s23, s0, s24
 801b074:	ee3d 0a27 	vadd.f32	s0, s26, s15
 801b078:	f007 f9d0 	bl	802241c <cosf>
 801b07c:	eeb0 7a6c 	vmov.f32	s14, s25
 801b080:	eea0 7a0c 	vfma.f32	s14, s0, s24
 801b084:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 801b088:	ee7b 7a87 	vadd.f32	s15, s23, s14
 801b08c:	eedc 7aa6 	vfnms.f32	s15, s25, s13
 801b090:	eeb0 5aeb 	vabs.f32	s10, s23
 801b094:	eeb0 6ae7 	vabs.f32	s12, s15
 801b098:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801b09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0a0:	bf8c      	ite	hi
 801b0a2:	eef0 5a45 	vmovhi.f32	s11, s10
 801b0a6:	eef0 5a46 	vmovls.f32	s11, s12
 801b0aa:	eef0 6ac7 	vabs.f32	s13, s14
 801b0ae:	eef4 5ae6 	vcmpe.f32	s11, s13
 801b0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b6:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801b0ba:	bf88      	it	hi
 801b0bc:	eef0 5a66 	vmovhi.f32	s11, s13
 801b0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0c4:	bfb8      	it	lt
 801b0c6:	eeb0 6a45 	vmovlt.f32	s12, s10
 801b0ca:	eef4 6ac6 	vcmpe.f32	s13, s12
 801b0ce:	eeb3 5a09 	vmov.f32	s10, #57	@ 0x41c80000  25.0
 801b0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0d6:	ee25 5a85 	vmul.f32	s10, s11, s10
 801b0da:	bfb8      	it	lt
 801b0dc:	eef0 6a46 	vmovlt.f32	s13, s12
 801b0e0:	eef4 6ac5 	vcmpe.f32	s13, s10
 801b0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0e8:	f340 81eb 	ble.w	801b4c2 <MEMS_runMagCal.constprop.0+0x1682>
 801b0ec:	f000 bf27 	b.w	801bf3e <MEMS_runMagCal.constprop.0+0x20fe>
 801b0f0:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801b0f4:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b0f8:	eef4 7ac6 	vcmpe.f32	s15, s12
 801b0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b100:	dc0e      	bgt.n	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801b102:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b106:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b10e:	dc07      	bgt.n	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801b110:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b114:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b11c:	f77f ae0d 	ble.w	801ad3a <MEMS_runMagCal.constprop.0+0xefa>
 801b120:	2300      	movs	r3, #0
 801b122:	f88b 3014 	strb.w	r3, [fp, #20]
 801b126:	f7ff bb73 	b.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801b12a:	2300      	movs	r3, #0
 801b12c:	9308      	str	r3, [sp, #32]
 801b12e:	2301      	movs	r3, #1
 801b130:	9304      	str	r3, [sp, #16]
 801b132:	f7ff bbd7 	b.w	801a8e4 <MEMS_runMagCal.constprop.0+0xaa4>
 801b136:	2201      	movs	r2, #1
 801b138:	fa02 f303 	lsl.w	r3, r2, r3
 801b13c:	e4e2      	b.n	801ab04 <MEMS_runMagCal.constprop.0+0xcc4>
 801b13e:	2201      	movs	r2, #1
 801b140:	fa02 f303 	lsl.w	r3, r2, r3
 801b144:	f8db 20b4 	ldr.w	r2, [fp, #180]	@ 0xb4
 801b148:	4313      	orrs	r3, r2
 801b14a:	f8cb 30b4 	str.w	r3, [fp, #180]	@ 0xb4
 801b14e:	f7ff badb 	b.w	801a708 <MEMS_runMagCal.constprop.0+0x8c8>
 801b152:	2201      	movs	r2, #1
 801b154:	fa02 f303 	lsl.w	r3, r2, r3
 801b158:	f8db 20ac 	ldr.w	r2, [fp, #172]	@ 0xac
 801b15c:	4313      	orrs	r3, r2
 801b15e:	f8cb 30ac 	str.w	r3, [fp, #172]	@ 0xac
 801b162:	f7ff bac4 	b.w	801a6ee <MEMS_runMagCal.constprop.0+0x8ae>
 801b166:	3301      	adds	r3, #1
 801b168:	fb93 f2f0 	sdiv	r2, r3, r0
 801b16c:	fb00 3212 	mls	r2, r0, r2, r3
 801b170:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b172:	b212      	sxth	r2, r2
 801b174:	4684      	mov	ip, r0
 801b176:	f7ff bbd3 	b.w	801a920 <MEMS_runMagCal.constprop.0+0xae0>
 801b17a:	ee07 3a90 	vmov	s15, r3
 801b17e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b182:	eddd 7a03 	vldr	s15, [sp, #12]
 801b186:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801b238 <MEMS_runMagCal.constprop.0+0x13f8>
 801b18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b18e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 801b192:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b196:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b19a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1a2:	f63f aade 	bhi.w	801a762 <MEMS_runMagCal.constprop.0+0x922>
 801b1a6:	9b08      	ldr	r3, [sp, #32]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	f43f ab31 	beq.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801b1ae:	ed9d 7a06 	vldr	s14, [sp, #24]
 801b1b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b1b6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 801b1ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1be:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1c6:	bf4c      	ite	mi
 801b1c8:	2301      	movmi	r3, #1
 801b1ca:	2300      	movpl	r3, #0
 801b1cc:	9308      	str	r3, [sp, #32]
 801b1ce:	f7ff bacc 	b.w	801a76a <MEMS_runMagCal.constprop.0+0x92a>
 801b1d2:	eeb0 0a69 	vmov.f32	s0, s19
 801b1d6:	4648      	mov	r0, r9
 801b1d8:	f7fe f996 	bl	8019508 <MEMS_updateMagBufferIndex.constprop.0>
 801b1dc:	f89b 60a0 	ldrb.w	r6, [fp, #160]	@ 0xa0
 801b1e0:	f7ff b964 	b.w	801a4ac <MEMS_runMagCal.constprop.0+0x66c>
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 801b1ea:	eeb0 0a69 	vmov.f32	s0, s19
 801b1ee:	23ff      	movs	r3, #255	@ 0xff
 801b1f0:	4648      	mov	r0, r9
 801b1f2:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 801b1f6:	f7fe f987 	bl	8019508 <MEMS_updateMagBufferIndex.constprop.0>
 801b1fa:	f7ff b96a 	b.w	801a4d2 <MEMS_runMagCal.constprop.0+0x692>
 801b1fe:	3301      	adds	r3, #1
 801b200:	fb93 f1f6 	sdiv	r1, r3, r6
 801b204:	fb06 3311 	mls	r3, r6, r1, r3
 801b208:	b219      	sxth	r1, r3
 801b20a:	4630      	mov	r0, r6
 801b20c:	f7ff b924 	b.w	801a458 <MEMS_runMagCal.constprop.0+0x618>
 801b210:	eeb0 0a69 	vmov.f32	s0, s19
 801b214:	4648      	mov	r0, r9
 801b216:	f7fe f977 	bl	8019508 <MEMS_updateMagBufferIndex.constprop.0>
 801b21a:	f7ff ba5b 	b.w	801a6d4 <MEMS_runMagCal.constprop.0+0x894>
 801b21e:	eddd 7a03 	vldr	s15, [sp, #12]
 801b222:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 801b238 <MEMS_runMagCal.constprop.0+0x13f8>
 801b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b22a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b22e:	e7be      	b.n	801b1ae <MEMS_runMagCal.constprop.0+0x136e>
 801b230:	3e2aaaab 	.word	0x3e2aaaab
 801b234:	40060a92 	.word	0x40060a92
 801b238:	3a83126f 	.word	0x3a83126f
 801b23c:	3c23d70a 	.word	0x3c23d70a
 801b240:	4b095440 	.word	0x4b095440
 801b244:	471c4000 	.word	0x471c4000
 801b248:	481c4000 	.word	0x481c4000
 801b24c:	3eaaaaab 	.word	0x3eaaaaab
 801b250:	00000000 	.word	0x00000000
 801b254:	7f800000 	.word	0x7f800000
 801b258:	42960000 	.word	0x42960000
 801b25c:	430d0000 	.word	0x430d0000
 801b260:	41966667 	.word	0x41966667
 801b264:	433c0000 	.word	0x433c0000
 801b268:	3c2e4c41 	.word	0x3c2e4c41
 801b26c:	423c0000 	.word	0x423c0000
 801b270:	358637bd 	.word	0x358637bd
 801b274:	3dcccccd 	.word	0x3dcccccd
 801b278:	ed5f 6a0b 	vldr	s13, [pc, #-44]	@ 801b250 <MEMS_runMagCal.constprop.0+0x1410>
 801b27c:	1c73      	adds	r3, r6, #1
 801b27e:	edcd 6a0c 	vstr	s13, [sp, #48]	@ 0x30
 801b282:	ae0d      	add	r6, sp, #52	@ 0x34
 801b284:	fb93 f2f7 	sdiv	r2, r3, r7
 801b288:	fa1f fe87 	uxth.w	lr, r7
 801b28c:	fb07 3312 	mls	r3, r7, r2, r3
 801b290:	edc6 6a00 	vstr	s13, [r6]
 801b294:	2f00      	cmp	r7, #0
 801b296:	f000 80e2 	beq.w	801b45e <MEMS_runMagCal.constprop.0+0x161e>
 801b29a:	b29b      	uxth	r3, r3
 801b29c:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 801b2a0:	1c58      	adds	r0, r3, #1
 801b2a2:	eeb0 6a66 	vmov.f32	s12, s13
 801b2a6:	fa10 fe8e 	uxtah	lr, r0, lr
 801b2aa:	f241 2c5c 	movw	ip, #4700	@ 0x125c
 801b2ae:	e000      	b.n	801b2b2 <MEMS_runMagCal.constprop.0+0x1472>
 801b2b0:	3001      	adds	r0, #1
 801b2b2:	fbb3 f2f7 	udiv	r2, r3, r7
 801b2b6:	fb07 3312 	mls	r3, r7, r2, r3
 801b2ba:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801b2be:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b2c0:	4562      	cmp	r2, ip
 801b2c2:	f5a2 5392 	sub.w	r3, r2, #4672	@ 0x1240
 801b2c6:	f1a3 031c 	sub.w	r3, r3, #28
 801b2ca:	bf98      	it	ls
 801b2cc:	ebac 0302 	subls.w	r3, ip, r2
 801b2d0:	ee07 2a90 	vmov	s15, r2
 801b2d4:	b29b      	uxth	r3, r3
 801b2d6:	fb03 f303 	mul.w	r3, r3, r3
 801b2da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b2de:	ee07 3a90 	vmov	s15, r3
 801b2e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2e6:	4586      	cmp	lr, r0
 801b2e8:	ee36 6a07 	vadd.f32	s12, s12, s14
 801b2ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	d1dd      	bne.n	801b2b0 <MEMS_runMagCal.constprop.0+0x1470>
 801b2f4:	ee07 5a90 	vmov	s15, r5
 801b2f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2fc:	ed5f 5a31 	vldr	s11, [pc, #-196]	@ 801b23c <MEMS_runMagCal.constprop.0+0x13fc>
 801b300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b304:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b308:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b30c:	ed1f 6a34 	vldr	s12, [pc, #-208]	@ 801b240 <MEMS_runMagCal.constprop.0+0x1400>
 801b310:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b314:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b318:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b320:	edcd 6a0c 	vstr	s13, [sp, #48]	@ 0x30
 801b324:	edc6 7a00 	vstr	s15, [r6]
 801b328:	dd35      	ble.n	801b396 <MEMS_runMagCal.constprop.0+0x1556>
 801b32a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801b248 <MEMS_runMagCal.constprop.0+0x1408>
 801b32e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b332:	2302      	movs	r3, #2
 801b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b338:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 801b33c:	f77f a85a 	ble.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801b340:	2301      	movs	r3, #1
 801b342:	f88b 3015 	strb.w	r3, [fp, #21]
 801b346:	f7ff b855 	b.w	801a3f4 <MEMS_runMagCal.constprop.0+0x5b4>
 801b34a:	9b01      	ldr	r3, [sp, #4]
 801b34c:	f8db 20a4 	ldr.w	r2, [fp, #164]	@ 0xa4
 801b350:	f8db 1020 	ldr.w	r1, [fp, #32]
 801b354:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801b358:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 801b35c:	4413      	add	r3, r2
 801b35e:	4299      	cmp	r1, r3
 801b360:	f4bf aede 	bcs.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801b364:	9906      	ldr	r1, [sp, #24]
 801b366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b36a:	fb03 f101 	mul.w	r1, r3, r1
 801b36e:	460b      	mov	r3, r1
 801b370:	3364      	adds	r3, #100	@ 0x64
 801b372:	4293      	cmp	r3, r2
 801b374:	bf38      	it	cc
 801b376:	4613      	movcc	r3, r2
 801b378:	2200      	movs	r2, #0
 801b37a:	f8cb 3020 	str.w	r3, [fp, #32]
 801b37e:	f88b 2014 	strb.w	r2, [fp, #20]
 801b382:	f7ff ba45 	b.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801b386:	fb95 f2f3 	sdiv	r2, r5, r3
 801b38a:	fb03 5212 	mls	r2, r3, r2, r5
 801b38e:	b212      	sxth	r2, r2
 801b390:	4699      	mov	r9, r3
 801b392:	f7ff bbfd 	b.w	801ab90 <MEMS_runMagCal.constprop.0+0xd50>
 801b396:	ed5f 7a55 	vldr	s15, [pc, #-340]	@ 801b244 <MEMS_runMagCal.constprop.0+0x1404>
 801b39a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3a2:	ed5f 7a57 	vldr	s15, [pc, #-348]	@ 801b248 <MEMS_runMagCal.constprop.0+0x1408>
 801b3a6:	d449      	bmi.n	801b43c <MEMS_runMagCal.constprop.0+0x15fc>
 801b3a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3b0:	bfc4      	itt	gt
 801b3b2:	2301      	movgt	r3, #1
 801b3b4:	f88b 3015 	strbgt.w	r3, [fp, #21]
 801b3b8:	f7ff ba4e 	b.w	801a858 <MEMS_runMagCal.constprop.0+0xa18>
 801b3bc:	ed9b 5a23 	vldr	s10, [fp, #140]	@ 0x8c
 801b3c0:	ed9b 7a1f 	vldr	s14, [fp, #124]	@ 0x7c
 801b3c4:	eddb 4a27 	vldr	s9, [fp, #156]	@ 0x9c
 801b3c8:	ee37 7a05 	vadd.f32	s14, s14, s10
 801b3cc:	ed1f 5a61 	vldr	s10, [pc, #-388]	@ 801b24c <MEMS_runMagCal.constprop.0+0x140c>
 801b3d0:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b3d4:	eef7 4a02 	vmov.f32	s9, #114	@ 0x3f900000  1.125
 801b3d8:	ee27 7a05 	vmul.f32	s14, s14, s10
 801b3dc:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 801b3e0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801b3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3e8:	bf88      	it	hi
 801b3ea:	eeb0 7a64 	vmovhi.f32	s14, s9
 801b3ee:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801b3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3f6:	bfb8      	it	lt
 801b3f8:	eeb0 7a45 	vmovlt.f32	s14, s10
 801b3fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b400:	eef4 7ac6 	vcmpe.f32	s15, s12
 801b404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b408:	f73f ae8a 	bgt.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801b40c:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b410:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b418:	f73f ae82 	bgt.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801b41c:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b420:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b428:	f73f ae7a 	bgt.w	801b120 <MEMS_runMagCal.constprop.0+0x12e0>
 801b42c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b430:	e483      	b.n	801ad3a <MEMS_runMagCal.constprop.0+0xefa>
 801b432:	4291      	cmp	r1, r2
 801b434:	460b      	mov	r3, r1
 801b436:	bfb8      	it	lt
 801b438:	4613      	movlt	r3, r2
 801b43a:	e429      	b.n	801ac90 <MEMS_runMagCal.constprop.0+0xe50>
 801b43c:	2303      	movs	r3, #3
 801b43e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b446:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 801b44a:	f04f 0300 	mov.w	r3, #0
 801b44e:	f88b 3015 	strb.w	r3, [fp, #21]
 801b452:	bfc4      	itt	gt
 801b454:	2301      	movgt	r3, #1
 801b456:	f88b 3015 	strbgt.w	r3, [fp, #21]
 801b45a:	f7ff ba00 	b.w	801a85e <MEMS_runMagCal.constprop.0+0xa1e>
 801b45e:	2303      	movs	r3, #3
 801b460:	f88b e015 	strb.w	lr, [fp, #21]
 801b464:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 801b468:	f7ff b9f9 	b.w	801a85e <MEMS_runMagCal.constprop.0+0xa1e>
 801b46c:	f04f 0801 	mov.w	r8, #1
 801b470:	e435      	b.n	801acde <MEMS_runMagCal.constprop.0+0xe9e>
 801b472:	f644 42f4 	movw	r2, #19700	@ 0x4cf4
 801b476:	4293      	cmp	r3, r2
 801b478:	f67e af80 	bls.w	801a37c <MEMS_runMagCal.constprop.0+0x53c>
 801b47c:	f7fe bf74 	b.w	801a368 <MEMS_runMagCal.constprop.0+0x528>
 801b480:	fb93 f2f4 	sdiv	r2, r3, r4
 801b484:	fb04 3312 	mls	r3, r4, r2, r3
 801b488:	b21b      	sxth	r3, r3
 801b48a:	4622      	mov	r2, r4
 801b48c:	e506      	b.n	801ae9c <MEMS_runMagCal.constprop.0+0x105c>
 801b48e:	ed1f ba90 	vldr	s22, [pc, #-576]	@ 801b250 <MEMS_runMagCal.constprop.0+0x1410>
 801b492:	ed5f 7a90 	vldr	s15, [pc, #-576]	@ 801b254 <MEMS_runMagCal.constprop.0+0x1414>
 801b496:	ed9d aa12 	vldr	s20, [sp, #72]	@ 0x48
 801b49a:	eddd 9a13 	vldr	s19, [sp, #76]	@ 0x4c
 801b49e:	eddd aa14 	vldr	s21, [sp, #80]	@ 0x50
 801b4a2:	ee2a aa27 	vmul.f32	s20, s20, s15
 801b4a6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801b4aa:	ee6a aaa7 	vmul.f32	s21, s21, s15
 801b4ae:	eef0 ba4b 	vmov.f32	s23, s22
 801b4b2:	eeb0 7a4b 	vmov.f32	s14, s22
 801b4b6:	eef0 6a4b 	vmov.f32	s13, s22
 801b4ba:	eef0 5a4b 	vmov.f32	s11, s22
 801b4be:	eef0 7a4b 	vmov.f32	s15, s22
 801b4c2:	eeb3 6a04 	vmov.f32	s12, #52	@ 0x41a00000  20.0
 801b4c6:	ee65 5a86 	vmul.f32	s11, s11, s12
 801b4ca:	eef4 5ae6 	vcmpe.f32	s11, s13
 801b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d2:	d502      	bpl.n	801b4da <MEMS_runMagCal.constprop.0+0x169a>
 801b4d4:	2c22      	cmp	r4, #34	@ 0x22
 801b4d6:	f240 8532 	bls.w	801bf3e <MEMS_runMagCal.constprop.0+0x20fe>
 801b4da:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b4de:	ed1f 7aa2 	vldr	s14, [pc, #-648]	@ 801b258 <MEMS_runMagCal.constprop.0+0x1418>
 801b4e2:	ee77 baab 	vadd.f32	s23, s15, s23
 801b4e6:	eecb 6a8b 	vdiv.f32	s13, s23, s22
 801b4ea:	eef1 7ae6 	vsqrt.f32	s15, s13
 801b4ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801b4f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4fa:	f300 8520 	bgt.w	801bf3e <MEMS_runMagCal.constprop.0+0x20fe>
 801b4fe:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 801b502:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b50a:	f100 8518 	bmi.w	801bf3e <MEMS_runMagCal.constprop.0+0x20fe>
 801b50e:	ed1f 7aad 	vldr	s14, [pc, #-692]	@ 801b25c <MEMS_runMagCal.constprop.0+0x141c>
 801b512:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801b516:	2300      	movs	r3, #0
 801b518:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 801b51c:	932d      	str	r3, [sp, #180]	@ 0xb4
 801b51e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b522:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b52a:	d408      	bmi.n	801b53e <MEMS_runMagCal.constprop.0+0x16fe>
 801b52c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b530:	ee17 3a90 	vmov	r3, s15
 801b534:	b21b      	sxth	r3, r3
 801b536:	ee08 3a10 	vmov	s16, r3
 801b53a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b53e:	ed1f 7ab5 	vldr	s14, [pc, #-724]	@ 801b26c <MEMS_runMagCal.constprop.0+0x142c>
 801b542:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801b546:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b54e:	dc08      	bgt.n	801b562 <MEMS_runMagCal.constprop.0+0x1722>
 801b550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b554:	ee17 3a90 	vmov	r3, s15
 801b558:	b21b      	sxth	r3, r3
 801b55a:	ee08 3a10 	vmov	s16, r3
 801b55e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b562:	ee28 8a28 	vmul.f32	s16, s16, s17
 801b566:	ed5f 7ac2 	vldr	s15, [pc, #-776]	@ 801b260 <MEMS_runMagCal.constprop.0+0x1420>
 801b56a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b572:	f340 8663 	ble.w	801c23c <MEMS_runMagCal.constprop.0+0x23fc>
 801b576:	ed5f 7ac5 	vldr	s15, [pc, #-788]	@ 801b264 <MEMS_runMagCal.constprop.0+0x1424>
 801b57a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b582:	f140 865b 	bpl.w	801c23c <MEMS_runMagCal.constprop.0+0x23fc>
 801b586:	ed1f 7ac8 	vldr	s14, [pc, #-800]	@ 801b268 <MEMS_runMagCal.constprop.0+0x1428>
 801b58a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b58e:	eee8 7a07 	vfma.f32	s15, s16, s14
 801b592:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801b596:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b59a:	ed1f 7acc 	vldr	s14, [pc, #-816]	@ 801b26c <MEMS_runMagCal.constprop.0+0x142c>
 801b59e:	9d04      	ldr	r5, [sp, #16]
 801b5a0:	ed1f 8acd 	vldr	s16, [pc, #-820]	@ 801b270 <MEMS_runMagCal.constprop.0+0x1430>
 801b5a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b5a8:	ee28 aa8a 	vmul.f32	s20, s17, s20
 801b5ac:	ee68 9aa9 	vmul.f32	s19, s17, s19
 801b5b0:	ee68 aaaa 	vmul.f32	s21, s17, s21
 801b5b4:	ed8d aa26 	vstr	s20, [sp, #152]	@ 0x98
 801b5b8:	edcd 9a27 	vstr	s19, [sp, #156]	@ 0x9c
 801b5bc:	edcd aa28 	vstr	s21, [sp, #160]	@ 0xa0
 801b5c0:	edcd 7a29 	vstr	s15, [sp, #164]	@ 0xa4
 801b5c4:	edcd 7a2c 	vstr	s15, [sp, #176]	@ 0xb0
 801b5c8:	462c      	mov	r4, r5
 801b5ca:	2600      	movs	r6, #0
 801b5cc:	2240      	movs	r2, #64	@ 0x40
 801b5ce:	4631      	mov	r1, r6
 801b5d0:	a82e      	add	r0, sp, #184	@ 0xb8
 801b5d2:	e9cd 6619 	strd	r6, r6, [sp, #100]	@ 0x64
 801b5d6:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
 801b5da:	e9cd 6615 	strd	r6, r6, [sp, #84]	@ 0x54
 801b5de:	e9cd 6617 	strd	r6, r6, [sp, #92]	@ 0x5c
 801b5e2:	f006 f855 	bl	8021690 <memset>
 801b5e6:	4631      	mov	r1, r6
 801b5e8:	2240      	movs	r2, #64	@ 0x40
 801b5ea:	a83e      	add	r0, sp, #248	@ 0xf8
 801b5ec:	f006 f850 	bl	8021690 <memset>
 801b5f0:	ed9d 5a29 	vldr	s10, [sp, #164]	@ 0xa4
 801b5f4:	ed5f 7ae1 	vldr	s15, [pc, #-900]	@ 801b274 <MEMS_runMagCal.constprop.0+0x1434>
 801b5f8:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801b5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b600:	f100 824d 	bmi.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801b604:	f89b 20a0 	ldrb.w	r2, [fp, #160]	@ 0xa0
 801b608:	f89b 10a1 	ldrb.w	r1, [fp, #161]	@ 0xa1
 801b60c:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 801b610:	428a      	cmp	r2, r1
 801b612:	f103 0301 	add.w	r3, r3, #1
 801b616:	f000 8122 	beq.w	801b85e <MEMS_runMagCal.constprop.0+0x1a1e>
 801b61a:	1a9b      	subs	r3, r3, r2
 801b61c:	fb93 f0f1 	sdiv	r0, r3, r1
 801b620:	fb01 3310 	mls	r3, r1, r0, r3
 801b624:	2b00      	cmp	r3, #0
 801b626:	bfb8      	it	lt
 801b628:	185b      	addlt	r3, r3, r1
 801b62a:	b21b      	sxth	r3, r3
 801b62c:	2a00      	cmp	r2, #0
 801b62e:	f000 80fa 	beq.w	801b826 <MEMS_runMagCal.constprop.0+0x19e6>
 801b632:	eddd 2a26 	vldr	s5, [sp, #152]	@ 0x98
 801b636:	ed9d 3a27 	vldr	s6, [sp, #156]	@ 0x9c
 801b63a:	eddd 3a28 	vldr	s7, [sp, #160]	@ 0xa0
 801b63e:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 801b86c <MEMS_runMagCal.constprop.0+0x1a2c>
 801b642:	441a      	add	r2, r3
 801b644:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 801b648:	fb93 f0f1 	sdiv	r0, r3, r1
 801b64c:	fb01 3010 	mls	r0, r1, r0, r3
 801b650:	b2c0      	uxtb	r0, r0
 801b652:	3004      	adds	r0, #4
 801b654:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 801b658:	f9b0 60a4 	ldrsh.w	r6, [r0, #164]	@ 0xa4
 801b65c:	ee07 6a90 	vmov	s15, r6
 801b660:	f9b0 60a2 	ldrsh.w	r6, [r0, #162]	@ 0xa2
 801b664:	f9b0 00a6 	ldrsh.w	r0, [r0, #166]	@ 0xa6
 801b668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b66c:	ee06 6a10 	vmov	s12, r6
 801b670:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801b674:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801b678:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801b67c:	ee26 6a28 	vmul.f32	s12, s12, s17
 801b680:	ee06 0a90 	vmov	s13, r0
 801b684:	ee76 5a62 	vsub.f32	s11, s12, s5
 801b688:	ee27 7a07 	vmul.f32	s14, s14, s14
 801b68c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b690:	eea5 7aa5 	vfma.f32	s14, s11, s11
 801b694:	ee66 6aa8 	vmul.f32	s13, s13, s17
 801b698:	ee73 7a67 	vsub.f32	s15, s6, s15
 801b69c:	ee73 9ae6 	vsub.f32	s19, s7, s13
 801b6a0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801b6a4:	ee32 6ac6 	vsub.f32	s12, s5, s12
 801b6a8:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801b6ac:	eeb4 7ac2 	vcmpe.f32	s14, s4
 801b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b4:	d54d      	bpl.n	801b752 <MEMS_runMagCal.constprop.0+0x1912>
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	4293      	cmp	r3, r2
 801b6ba:	d1c5      	bne.n	801b648 <MEMS_runMagCal.constprop.0+0x1808>
 801b6bc:	e0b3      	b.n	801b826 <MEMS_runMagCal.constprop.0+0x19e6>
 801b6be:	ed9b 0a1c 	vldr	s0, [fp, #112]	@ 0x70
 801b6c2:	f007 f955 	bl	8022970 <roundf>
 801b6c6:	eef0 7a40 	vmov.f32	s15, s0
 801b6ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b6ce:	ae10      	add	r6, sp, #64	@ 0x40
 801b6d0:	ee17 3a90 	vmov	r3, s15
 801b6d4:	ed9b 0a1d 	vldr	s0, [fp, #116]	@ 0x74
 801b6d8:	8033      	strh	r3, [r6, #0]
 801b6da:	f007 f949 	bl	8022970 <roundf>
 801b6de:	eef0 7a40 	vmov.f32	s15, s0
 801b6e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b6e6:	ed9b 0a1e 	vldr	s0, [fp, #120]	@ 0x78
 801b6ea:	ee17 3a90 	vmov	r3, s15
 801b6ee:	8073      	strh	r3, [r6, #2]
 801b6f0:	f007 f93e 	bl	8022970 <roundf>
 801b6f4:	eef0 7a40 	vmov.f32	s15, s0
 801b6f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b6fc:	495c      	ldr	r1, [pc, #368]	@ (801b870 <MEMS_runMagCal.constprop.0+0x1a30>)
 801b6fe:	ee17 3a90 	vmov	r3, s15
 801b702:	eeb0 0a68 	vmov.f32	s0, s17
 801b706:	80b3      	strh	r3, [r6, #4]
 801b708:	aa0f      	add	r2, sp, #60	@ 0x3c
 801b70a:	ab0e      	add	r3, sp, #56	@ 0x38
 801b70c:	4630      	mov	r0, r6
 801b70e:	f7fd fe07 	bl	8019320 <getMagStats.constprop.0>
 801b712:	ed93 7a00 	vldr	s14, [r3]
 801b716:	eddf 7a57 	vldr	s15, [pc, #348]	@ 801b874 <MEMS_runMagCal.constprop.0+0x1a34>
 801b71a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b722:	d511      	bpl.n	801b748 <MEMS_runMagCal.constprop.0+0x1908>
 801b724:	b980      	cbnz	r0, 801b748 <MEMS_runMagCal.constprop.0+0x1908>
 801b726:	f89b 3054 	ldrb.w	r3, [fp, #84]	@ 0x54
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	f000 85cb 	beq.w	801c2c6 <MEMS_runMagCal.constprop.0+0x2486>
 801b730:	f89b 305d 	ldrb.w	r3, [fp, #93]	@ 0x5d
 801b734:	ee07 3a90 	vmov	s15, r3
 801b738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b73c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801b740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b744:	f300 85bf 	bgt.w	801c2c6 <MEMS_runMagCal.constprop.0+0x2486>
 801b748:	2300      	movs	r3, #0
 801b74a:	6033      	str	r3, [r6, #0]
 801b74c:	80b3      	strh	r3, [r6, #4]
 801b74e:	f7ff bb88 	b.w	801ae62 <MEMS_runMagCal.constprop.0+0x1022>
 801b752:	eef1 5ac7 	vsqrt.f32	s11, s14
 801b756:	3301      	adds	r3, #1
 801b758:	429a      	cmp	r2, r3
 801b75a:	ed9d 7a30 	vldr	s14, [sp, #192]	@ 0xc0
 801b75e:	eddd 1a31 	vldr	s3, [sp, #196]	@ 0xc4
 801b762:	eddd 4a2f 	vldr	s9, [sp, #188]	@ 0xbc
 801b766:	ed9d 1a2e 	vldr	s2, [sp, #184]	@ 0xb8
 801b76a:	ed9d 0a19 	vldr	s0, [sp, #100]	@ 0x64
 801b76e:	eddd 0a1a 	vldr	s1, [sp, #104]	@ 0x68
 801b772:	eec4 6a25 	vdiv.f32	s13, s8, s11
 801b776:	ee26 6a26 	vmul.f32	s12, s12, s13
 801b77a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b77e:	ee69 6aa6 	vmul.f32	s13, s19, s13
 801b782:	ee71 1ac6 	vsub.f32	s3, s3, s12
 801b786:	eea6 7a26 	vfma.f32	s14, s12, s13
 801b78a:	edcd 1a31 	vstr	s3, [sp, #196]	@ 0xc4
 801b78e:	ed8d 7a30 	vstr	s14, [sp, #192]	@ 0xc0
 801b792:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801b796:	eddd 1a38 	vldr	s3, [sp, #224]	@ 0xe0
 801b79a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801b79e:	eee6 4a27 	vfma.f32	s9, s12, s15
 801b7a2:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801b7a6:	ed9d 7a35 	vldr	s14, [sp, #212]	@ 0xd4
 801b7aa:	edcd 4a2f 	vstr	s9, [sp, #188]	@ 0xbc
 801b7ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b7b2:	eee6 1aa6 	vfma.f32	s3, s13, s13
 801b7b6:	ed8d 7a35 	vstr	s14, [sp, #212]	@ 0xd4
 801b7ba:	ed9d 7a39 	vldr	s14, [sp, #228]	@ 0xe4
 801b7be:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801b7c2:	edcd 1a38 	vstr	s3, [sp, #224]	@ 0xe0
 801b7c6:	eea6 1a06 	vfma.f32	s2, s12, s12
 801b7ca:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b7ce:	eddd 1a1c 	vldr	s3, [sp, #112]	@ 0x70
 801b7d2:	ed8d 7a39 	vstr	s14, [sp, #228]	@ 0xe4
 801b7d6:	ee35 7ac5 	vsub.f32	s14, s11, s10
 801b7da:	eee7 4aa6 	vfma.f32	s9, s15, s13
 801b7de:	ee71 1a87 	vadd.f32	s3, s3, s14
 801b7e2:	ed8d 1a2e 	vstr	s2, [sp, #184]	@ 0xb8
 801b7e6:	ee35 7a65 	vsub.f32	s14, s10, s11
 801b7ea:	ed9d 1a1b 	vldr	s2, [sp, #108]	@ 0x6c
 801b7ee:	edcd 4a34 	vstr	s9, [sp, #208]	@ 0xd0
 801b7f2:	eea7 0a06 	vfma.f32	s0, s14, s12
 801b7f6:	eef0 5a60 	vmov.f32	s11, s1
 801b7fa:	eeb0 6a41 	vmov.f32	s12, s2
 801b7fe:	eee7 5a27 	vfma.f32	s11, s14, s15
 801b802:	eddd 4a3d 	vldr	s9, [sp, #244]	@ 0xf4
 801b806:	ed8d 0a19 	vstr	s0, [sp, #100]	@ 0x64
 801b80a:	eea7 6a26 	vfma.f32	s12, s14, s13
 801b80e:	ee74 7a84 	vadd.f32	s15, s9, s8
 801b812:	edcd 5a1a 	vstr	s11, [sp, #104]	@ 0x68
 801b816:	ed8d 6a1b 	vstr	s12, [sp, #108]	@ 0x6c
 801b81a:	edcd 1a1c 	vstr	s3, [sp, #112]	@ 0x70
 801b81e:	edcd 7a3d 	vstr	s15, [sp, #244]	@ 0xf4
 801b822:	f47f af11 	bne.w	801b648 <MEMS_runMagCal.constprop.0+0x1808>
 801b826:	2201      	movs	r2, #1
 801b828:	4629      	mov	r1, r5
 801b82a:	4613      	mov	r3, r2
 801b82c:	00af      	lsls	r7, r5, #2
 801b82e:	18fe      	adds	r6, r7, r3
 801b830:	a82e      	add	r0, sp, #184	@ 0xb8
 801b832:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801b836:	f10d 0cb8 	add.w	ip, sp, #184	@ 0xb8
 801b83a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801b83e:	3301      	adds	r3, #1
 801b840:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 801b844:	b2db      	uxtb	r3, r3
 801b846:	6836      	ldr	r6, [r6, #0]
 801b848:	6006      	str	r6, [r0, #0]
 801b84a:	2b04      	cmp	r3, #4
 801b84c:	d1ef      	bne.n	801b82e <MEMS_runMagCal.constprop.0+0x19ee>
 801b84e:	1c53      	adds	r3, r2, #1
 801b850:	b2db      	uxtb	r3, r3
 801b852:	2b04      	cmp	r3, #4
 801b854:	d01c      	beq.n	801b890 <MEMS_runMagCal.constprop.0+0x1a50>
 801b856:	4611      	mov	r1, r2
 801b858:	0097      	lsls	r7, r2, #2
 801b85a:	461a      	mov	r2, r3
 801b85c:	e7e7      	b.n	801b82e <MEMS_runMagCal.constprop.0+0x19ee>
 801b85e:	fb93 f0f2 	sdiv	r0, r3, r2
 801b862:	fb02 3310 	mls	r3, r2, r0, r3
 801b866:	b21b      	sxth	r3, r3
 801b868:	e6e0      	b.n	801b62c <MEMS_runMagCal.constprop.0+0x17ec>
 801b86a:	bf00      	nop
 801b86c:	2b8cbccb 	.word	0x2b8cbccb
 801b870:	200003e8 	.word	0x200003e8
 801b874:	3ff4cccd 	.word	0x3ff4cccd
 801b878:	3e99999a 	.word	0x3e99999a
 801b87c:	3f666666 	.word	0x3f666666
 801b880:	00000000 	.word	0x00000000
 801b884:	41f00001 	.word	0x41f00001
 801b888:	400ccccd 	.word	0x400ccccd
 801b88c:	3dcccccd 	.word	0x3dcccccd
 801b890:	2240      	movs	r2, #64	@ 0x40
 801b892:	2100      	movs	r1, #0
 801b894:	a83e      	add	r0, sp, #248	@ 0xf8
 801b896:	f005 fefb 	bl	8021690 <memset>
 801b89a:	a82e      	add	r0, sp, #184	@ 0xb8
 801b89c:	ab3e      	add	r3, sp, #248	@ 0xf8
 801b89e:	4602      	mov	r2, r0
 801b8a0:	2100      	movs	r1, #0
 801b8a2:	b24e      	sxtb	r6, r1
 801b8a4:	2900      	cmp	r1, #0
 801b8a6:	f000 852e 	beq.w	801c306 <MEMS_runMagCal.constprop.0+0x24c6>
 801b8aa:	eddd 7a3e 	vldr	s15, [sp, #248]	@ 0xf8
 801b8ae:	eeb0 7ae7 	vabs.f32	s14, s15
 801b8b2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801b8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ba:	f100 80f0 	bmi.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801b8be:	ed90 7a00 	vldr	s14, [r0]
 801b8c2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801b8c6:	2e01      	cmp	r6, #1
 801b8c8:	ed83 6a00 	vstr	s12, [r3]
 801b8cc:	eddd 7a42 	vldr	s15, [sp, #264]	@ 0x108
 801b8d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b8d4:	f000 8507 	beq.w	801c2e6 <MEMS_runMagCal.constprop.0+0x24a6>
 801b8d8:	eddd 6a43 	vldr	s13, [sp, #268]	@ 0x10c
 801b8dc:	eeb0 7ae6 	vabs.f32	s14, s13
 801b8e0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8e8:	f100 80d9 	bmi.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801b8ec:	ed90 7a01 	vldr	s14, [r0, #4]
 801b8f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b8f4:	2e02      	cmp	r6, #2
 801b8f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801b8fa:	edc3 7a01 	vstr	s15, [r3, #4]
 801b8fe:	ed9d 7a47 	vldr	s14, [sp, #284]	@ 0x11c
 801b902:	eddd 6a46 	vldr	s13, [sp, #280]	@ 0x118
 801b906:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b90a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801b90e:	f000 8513 	beq.w	801c338 <MEMS_runMagCal.constprop.0+0x24f8>
 801b912:	ed9d 5a48 	vldr	s10, [sp, #288]	@ 0x120
 801b916:	eef0 6ac5 	vabs.f32	s13, s10
 801b91a:	eef4 6ac8 	vcmpe.f32	s13, s16
 801b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b922:	f100 80bc 	bmi.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801b926:	edd0 5a02 	vldr	s11, [r0, #8]
 801b92a:	edd2 6a00 	vldr	s13, [r2]
 801b92e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801b932:	eec7 5a05 	vdiv.f32	s11, s14, s10
 801b936:	edc3 5a02 	vstr	s11, [r3, #8]
 801b93a:	ed9d 7a4b 	vldr	s14, [sp, #300]	@ 0x12c
 801b93e:	ed9d 5a4a 	vldr	s10, [sp, #296]	@ 0x128
 801b942:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b946:	ed9d 7a4c 	vldr	s14, [sp, #304]	@ 0x130
 801b94a:	eee5 7a06 	vfma.f32	s15, s10, s12
 801b94e:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b952:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b95a:	f340 80a0 	ble.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801b95e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b962:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801b966:	ed83 7a03 	vstr	s14, [r3, #12]
 801b96a:	3101      	adds	r1, #1
 801b96c:	2904      	cmp	r1, #4
 801b96e:	f100 0010 	add.w	r0, r0, #16
 801b972:	f103 0310 	add.w	r3, r3, #16
 801b976:	f102 0214 	add.w	r2, r2, #20
 801b97a:	d192      	bne.n	801b8a2 <MEMS_runMagCal.constprop.0+0x1a62>
 801b97c:	aa19      	add	r2, sp, #100	@ 0x64
 801b97e:	a915      	add	r1, sp, #84	@ 0x54
 801b980:	a83e      	add	r0, sp, #248	@ 0xf8
 801b982:	f7fd fc4b 	bl	801921c <llEvaluate.constprop.0>
 801b986:	ed5f 9a3f 	vldr	s19, [pc, #-252]	@ 801b88c <MEMS_runMagCal.constprop.0+0x1a4c>
 801b98a:	f10d 0a64 	add.w	sl, sp, #100	@ 0x64
 801b98e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
 801b992:	2603      	movs	r6, #3
 801b994:	2700      	movs	r7, #0
 801b996:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 801b99a:	e9cd 7719 	strd	r7, r7, [sp, #100]	@ 0x64
 801b99e:	e9cd 771b 	strd	r7, r7, [sp, #108]	@ 0x6c
 801b9a2:	aa19      	add	r2, sp, #100	@ 0x64
 801b9a4:	ecaa 1a01 	vstmia	sl!, {s2}
 801b9a8:	a91d      	add	r1, sp, #116	@ 0x74
 801b9aa:	a83e      	add	r0, sp, #248	@ 0xf8
 801b9ac:	f7fd fc36 	bl	801921c <llEvaluate.constprop.0>
 801b9b0:	ecb9 7a01 	vldmia	r9!, {s14}
 801b9b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9bc:	f340 848f 	ble.w	801c2de <MEMS_runMagCal.constprop.0+0x249e>
 801b9c0:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b9c4:	eef4 9ae7 	vcmpe.f32	s19, s15
 801b9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9cc:	bfb8      	it	lt
 801b9ce:	eef0 9a67 	vmovlt.f32	s19, s15
 801b9d2:	3e01      	subs	r6, #1
 801b9d4:	f016 06ff 	ands.w	r6, r6, #255	@ 0xff
 801b9d8:	d1df      	bne.n	801b99a <MEMS_runMagCal.constprop.0+0x1b5a>
 801b9da:	ed9d 6a29 	vldr	s12, [sp, #164]	@ 0xa4
 801b9de:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 801b9e2:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 801b9e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b9ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9f2:	d501      	bpl.n	801b9f8 <MEMS_runMagCal.constprop.0+0x1bb8>
 801b9f4:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 801b9f8:	ed9d 3a15 	vldr	s6, [sp, #84]	@ 0x54
 801b9fc:	eddd 3a16 	vldr	s7, [sp, #88]	@ 0x58
 801ba00:	ed9d 4a17 	vldr	s8, [sp, #92]	@ 0x5c
 801ba04:	eddd 5a28 	vldr	s11, [sp, #160]	@ 0xa0
 801ba08:	eddd 4a26 	vldr	s9, [sp, #152]	@ 0x98
 801ba0c:	ed9d 5a27 	vldr	s10, [sp, #156]	@ 0x9c
 801ba10:	eeb0 7ae3 	vabs.f32	s14, s7
 801ba14:	eef0 7ac3 	vabs.f32	s15, s6
 801ba18:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ba1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba20:	bfb8      	it	lt
 801ba22:	eef0 7a47 	vmovlt.f32	s15, s14
 801ba26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba2a:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 801b880 <MEMS_runMagCal.constprop.0+0x1a40>
 801ba2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba32:	bfb8      	it	lt
 801ba34:	eef0 7a47 	vmovlt.f32	s15, s14
 801ba38:	eef0 6ac4 	vabs.f32	s13, s8
 801ba3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 801ba40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba44:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 801ba48:	ee75 5a84 	vadd.f32	s11, s11, s8
 801ba4c:	ed1f 4a76 	vldr	s8, [pc, #-472]	@ 801b878 <MEMS_runMagCal.constprop.0+0x1a38>
 801ba50:	edcd 5a28 	vstr	s11, [sp, #160]	@ 0xa0
 801ba54:	bfb8      	it	lt
 801ba56:	eef0 6a67 	vmovlt.f32	s13, s15
 801ba5a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801ba5e:	ee35 5a23 	vadd.f32	s10, s10, s7
 801ba62:	ee37 6a06 	vadd.f32	s12, s14, s12
 801ba66:	eef4 6ac4 	vcmpe.f32	s13, s8
 801ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba6e:	edcd 4a26 	vstr	s9, [sp, #152]	@ 0x98
 801ba72:	ed8d 5a27 	vstr	s10, [sp, #156]	@ 0x9c
 801ba76:	ed8d 6a29 	vstr	s12, [sp, #164]	@ 0xa4
 801ba7a:	eef0 7ac7 	vabs.f32	s15, s14
 801ba7e:	d508      	bpl.n	801ba92 <MEMS_runMagCal.constprop.0+0x1c52>
 801ba80:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 801b87c <MEMS_runMagCal.constprop.0+0x1a3c>
 801ba84:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ba88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba8c:	d501      	bpl.n	801ba92 <MEMS_runMagCal.constprop.0+0x1c52>
 801ba8e:	2c01      	cmp	r4, #1
 801ba90:	d80b      	bhi.n	801baaa <MEMS_runMagCal.constprop.0+0x1c6a>
 801ba92:	3401      	adds	r4, #1
 801ba94:	b2e4      	uxtb	r4, r4
 801ba96:	2c05      	cmp	r4, #5
 801ba98:	f47f ad97 	bne.w	801b5ca <MEMS_runMagCal.constprop.0+0x178a>
 801ba9c:	e005      	b.n	801baaa <MEMS_runMagCal.constprop.0+0x1c6a>
 801ba9e:	ed5f 9a88 	vldr	s19, [pc, #-544]	@ 801b880 <MEMS_runMagCal.constprop.0+0x1a40>
 801baa2:	ed5f 6a88 	vldr	s13, [pc, #-544]	@ 801b884 <MEMS_runMagCal.constprop.0+0x1a44>
 801baa6:	eef0 7a69 	vmov.f32	s15, s19
 801baaa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801baae:	eef4 6ac7 	vcmpe.f32	s13, s14
 801bab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bab6:	dc10      	bgt.n	801bada <MEMS_runMagCal.constprop.0+0x1c9a>
 801bab8:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 801b888 <MEMS_runMagCal.constprop.0+0x1a48>
 801babc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bac4:	dc09      	bgt.n	801bada <MEMS_runMagCal.constprop.0+0x1c9a>
 801bac6:	ed9d 8a29 	vldr	s16, [sp, #164]	@ 0xa4
 801baca:	ed5f 7a90 	vldr	s15, [pc, #-576]	@ 801b88c <MEMS_runMagCal.constprop.0+0x1a4c>
 801bace:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bad6:	f200 83b5 	bhi.w	801c244 <MEMS_runMagCal.constprop.0+0x2404>
 801bada:	4be8      	ldr	r3, [pc, #928]	@ (801be7c <MEMS_runMagCal.constprop.0+0x203c>)
 801badc:	eddf 9ae8 	vldr	s19, [pc, #928]	@ 801be80 <MEMS_runMagCal.constprop.0+0x2040>
 801bae0:	931d      	str	r3, [sp, #116]	@ 0x74
 801bae2:	932c      	str	r3, [sp, #176]	@ 0xb0
 801bae4:	eddf 6ae7 	vldr	s13, [pc, #924]	@ 801be84 <MEMS_runMagCal.constprop.0+0x2044>
 801bae8:	ed9d 7a29 	vldr	s14, [sp, #164]	@ 0xa4
 801baec:	ed9d 6a26 	vldr	s12, [sp, #152]	@ 0x98
 801baf0:	eddd 5a2c 	vldr	s11, [sp, #176]	@ 0xb0
 801baf4:	ed9d 5a1d 	vldr	s10, [sp, #116]	@ 0x74
 801baf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bafc:	2300      	movs	r3, #0
 801bafe:	e9cd 333f 	strd	r3, r3, [sp, #252]	@ 0xfc
 801bb02:	e9cd 3343 	strd	r3, r3, [sp, #268]	@ 0x10c
 801bb06:	9341      	str	r3, [sp, #260]	@ 0x104
 801bb08:	9345      	str	r3, [sp, #276]	@ 0x114
 801bb0a:	eddd 6a27 	vldr	s13, [sp, #156]	@ 0x9c
 801bb0e:	ed9d 7a28 	vldr	s14, [sp, #160]	@ 0xa0
 801bb12:	edcd 7a3e 	vstr	s15, [sp, #248]	@ 0xf8
 801bb16:	ee26 6a09 	vmul.f32	s12, s12, s18
 801bb1a:	ee66 6a89 	vmul.f32	s13, s13, s18
 801bb1e:	ee27 7a09 	vmul.f32	s14, s14, s18
 801bb22:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb2a:	ed8d 6a2e 	vstr	s12, [sp, #184]	@ 0xb8
 801bb2e:	edcd 6a2f 	vstr	s13, [sp, #188]	@ 0xbc
 801bb32:	ed8d 7a30 	vstr	s14, [sp, #192]	@ 0xc0
 801bb36:	edcd 7a42 	vstr	s15, [sp, #264]	@ 0x108
 801bb3a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801bb3e:	f100 837a 	bmi.w	801c236 <MEMS_runMagCal.constprop.0+0x23f6>
 801bb42:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801bb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb4a:	f100 8374 	bmi.w	801c236 <MEMS_runMagCal.constprop.0+0x23f6>
 801bb4e:	ee85 7a25 	vdiv.f32	s14, s10, s11
 801bb52:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801bb56:	ee38 8a47 	vsub.f32	s16, s16, s14
 801bb5a:	eddf 6acb 	vldr	s13, [pc, #812]	@ 801be88 <MEMS_runMagCal.constprop.0+0x2048>
 801bb5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bb62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801bb66:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb6e:	eeb0 7ac7 	vabs.f32	s14, s14
 801bb72:	dd0c      	ble.n	801bb8e <MEMS_runMagCal.constprop.0+0x1d4e>
 801bb74:	ed9f 6ac5 	vldr	s12, [pc, #788]	@ 801be8c <MEMS_runMagCal.constprop.0+0x204c>
 801bb78:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 801be90 <MEMS_runMagCal.constprop.0+0x2050>
 801bb7c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801bb80:	eef0 7ae7 	vabs.f32	s15, s15
 801bb84:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb8c:	d407      	bmi.n	801bb9e <MEMS_runMagCal.constprop.0+0x1d5e>
 801bb8e:	eddf 7ac1 	vldr	s15, [pc, #772]	@ 801be94 <MEMS_runMagCal.constprop.0+0x2054>
 801bb92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb9a:	f280 81bb 	bge.w	801bf14 <MEMS_runMagCal.constprop.0+0x20d4>
 801bb9e:	eddf 7abe 	vldr	s15, [pc, #760]	@ 801be98 <MEMS_runMagCal.constprop.0+0x2058>
 801bba2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbaa:	f100 81b3 	bmi.w	801bf14 <MEMS_runMagCal.constprop.0+0x20d4>
 801bbae:	ae10      	add	r6, sp, #64	@ 0x40
 801bbb0:	af2e      	add	r7, sp, #184	@ 0xb8
 801bbb2:	4635      	mov	r5, r6
 801bbb4:	2403      	movs	r4, #3
 801bbb6:	ecb7 0a01 	vldmia	r7!, {s0}
 801bbba:	f006 fed9 	bl	8022970 <roundf>
 801bbbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bbc2:	3c01      	subs	r4, #1
 801bbc4:	ee10 3a10 	vmov	r3, s0
 801bbc8:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 801bbcc:	f825 3b02 	strh.w	r3, [r5], #2
 801bbd0:	d1f1      	bne.n	801bbb6 <MEMS_runMagCal.constprop.0+0x1d76>
 801bbd2:	eddd 7a03 	vldr	s15, [sp, #12]
 801bbd6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801bbda:	eddf 7ab6 	vldr	s15, [pc, #728]	@ 801beb4 <MEMS_runMagCal.constprop.0+0x2074>
 801bbde:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bbe2:	f006 fec5 	bl	8022970 <roundf>
 801bbe6:	eef0 7a40 	vmov.f32	s15, s0
 801bbea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bbee:	ab0e      	add	r3, sp, #56	@ 0x38
 801bbf0:	eeb0 0a68 	vmov.f32	s0, s17
 801bbf4:	aa0f      	add	r2, sp, #60	@ 0x3c
 801bbf6:	a93e      	add	r1, sp, #248	@ 0xf8
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	edcb 7a06 	vstr	s15, [fp, #24]
 801bbfe:	f7fd fb8f 	bl	8019320 <getMagStats.constprop.0>
 801bc02:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 801bc06:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 801be9c <MEMS_runMagCal.constprop.0+0x205c>
 801bc0a:	f89b 50a0 	ldrb.w	r5, [fp, #160]	@ 0xa0
 801bc0e:	ee07 0a90 	vmov	s15, r0
 801bc12:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801bc16:	005b      	lsls	r3, r3, #1
 801bc18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bc1c:	ee07 3a90 	vmov	s15, r3
 801bc20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bc28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc30:	dc0e      	bgt.n	801bc50 <MEMS_runMagCal.constprop.0+0x1e10>
 801bc32:	ed9d 7a0e 	vldr	s14, [sp, #56]	@ 0x38
 801bc36:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801bc3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc42:	bfc3      	ittte	gt
 801bc44:	f89b 4054 	ldrbgt.w	r4, [fp, #84]	@ 0x54
 801bc48:	fab4 f484 	clzgt	r4, r4
 801bc4c:	0964      	lsrgt	r4, r4, #5
 801bc4e:	2401      	movle	r4, #1
 801bc50:	ee29 0a29 	vmul.f32	s0, s18, s19
 801bc54:	f8db a018 	ldr.w	sl, [fp, #24]
 801bc58:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
 801bc5c:	f006 fe88 	bl	8022970 <roundf>
 801bc60:	ed9f 6a8f 	vldr	s12, [pc, #572]	@ 801bea0 <MEMS_runMagCal.constprop.0+0x2060>
 801bc64:	eddd 7a3e 	vldr	s15, [sp, #248]	@ 0xf8
 801bc68:	eddd 6a42 	vldr	s13, [sp, #264]	@ 0x108
 801bc6c:	ed9d 7a46 	vldr	s14, [sp, #280]	@ 0x118
 801bc70:	6830      	ldr	r0, [r6, #0]
 801bc72:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
 801bc76:	f8cd 008a 	str.w	r0, [sp, #138]	@ 0x8a
 801bc7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bc7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 801bc82:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bc86:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 801bc8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bc8e:	ee16 3a10 	vmov	r3, s12
 801bc92:	f88d 3089 	strb.w	r3, [sp, #137]	@ 0x89
 801bc96:	88b3      	ldrh	r3, [r6, #4]
 801bc98:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
 801bc9c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801bca0:	ee17 3a90 	vmov	r3, s15
 801bca4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801bca8:	b29e      	uxth	r6, r3
 801bcaa:	ee16 3a90 	vmov	r3, s13
 801bcae:	fa1f f983 	uxth.w	r9, r3
 801bcb2:	ee17 3a10 	vmov	r3, s14
 801bcb6:	f1b8 0f01 	cmp.w	r8, #1
 801bcba:	b29f      	uxth	r7, r3
 801bcbc:	f8ad 6090 	strh.w	r6, [sp, #144]	@ 0x90
 801bcc0:	f8ad 9092 	strh.w	r9, [sp, #146]	@ 0x92
 801bcc4:	f8ad 7094 	strh.w	r7, [sp, #148]	@ 0x94
 801bcc8:	f000 82b3 	beq.w	801c232 <MEMS_runMagCal.constprop.0+0x23f2>
 801bccc:	ee29 0a28 	vmul.f32	s0, s18, s17
 801bcd0:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801bcd4:	f006 fe4c 	bl	8022970 <roundf>
 801bcd8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801bcdc:	edcd 7a01 	vstr	s15, [sp, #4]
 801bce0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801bce4:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
 801bce8:	2300      	movs	r3, #0
 801bcea:	f88b 3014 	strb.w	r3, [fp, #20]
 801bcee:	2c00      	cmp	r4, #0
 801bcf0:	f43e ad8e 	beq.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801bcf4:	f89b 2054 	ldrb.w	r2, [fp, #84]	@ 0x54
 801bcf8:	f88b 3015 	strb.w	r3, [fp, #21]
 801bcfc:	2a00      	cmp	r2, #0
 801bcfe:	f040 8131 	bne.w	801bf64 <MEMS_runMagCal.constprop.0+0x2124>
 801bd02:	ed9b 0a01 	vldr	s0, [fp, #4]
 801bd06:	ae0d      	add	r6, sp, #52	@ 0x34
 801bd08:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 801bd0c:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 801bd10:	f8bd 2092 	ldrh.w	r2, [sp, #146]	@ 0x92
 801bd14:	4f63      	ldr	r7, [pc, #396]	@ (801bea4 <MEMS_runMagCal.constprop.0+0x2064>)
 801bd16:	eddf 7a68 	vldr	s15, [pc, #416]	@ 801beb8 <MEMS_runMagCal.constprop.0+0x2078>
 801bd1a:	f8cb a01c 	str.w	sl, [fp, #28]
 801bd1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801bd22:	fb00 f303 	mul.w	r3, r0, r3
 801bd26:	ee06 3a10 	vmov	s12, r3
 801bd2a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	@ 0x8a
 801bd2e:	ee03 3a90 	vmov	s7, r3
 801bd32:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801bd36:	ee04 3a10 	vmov	s8, r3
 801bd3a:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	@ 0x8e
 801bd3e:	fb00 f101 	mul.w	r1, r0, r1
 801bd42:	ee04 3a90 	vmov	s9, r3
 801bd46:	fb00 f202 	mul.w	r2, r0, r2
 801bd4a:	23ff      	movs	r3, #255	@ 0xff
 801bd4c:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 801bd50:	ee05 1a90 	vmov	s11, r1
 801bd54:	ee05 2a10 	vmov	s10, r2
 801bd58:	f88b 3026 	strb.w	r3, [fp, #38]	@ 0x26
 801bd5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bd62:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801bd66:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bd6a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bd6e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801bd72:	ee25 5a27 	vmul.f32	s10, s10, s15
 801bd76:	ee26 6a27 	vmul.f32	s12, s12, s15
 801bd7a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801bd7e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801bd82:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801bd86:	f04f 0e01 	mov.w	lr, #1
 801bd8a:	f8dc 3000 	ldr.w	r3, [ip]
 801bd8e:	603b      	str	r3, [r7, #0]
 801bd90:	edcb 5a1f 	vstr	s11, [fp, #124]	@ 0x7c
 801bd94:	ed8b 5a23 	vstr	s10, [fp, #140]	@ 0x8c
 801bd98:	ed8b 6a27 	vstr	s12, [fp, #156]	@ 0x9c
 801bd9c:	f88b e054 	strb.w	lr, [fp, #84]	@ 0x54
 801bda0:	f88b e06d 	strb.w	lr, [fp, #109]	@ 0x6d
 801bda4:	edcb 3a1c 	vstr	s7, [fp, #112]	@ 0x70
 801bda8:	ed8b 4a1d 	vstr	s8, [fp, #116]	@ 0x74
 801bdac:	edcb 4a1e 	vstr	s9, [fp, #120]	@ 0x78
 801bdb0:	2d00      	cmp	r5, #0
 801bdb2:	f000 8237 	beq.w	801c224 <MEMS_runMagCal.constprop.0+0x23e4>
 801bdb6:	ed9f 3a3c 	vldr	s6, [pc, #240]	@ 801bea8 <MEMS_runMagCal.constprop.0+0x2068>
 801bdba:	f89b 0025 	ldrb.w	r0, [fp, #37]	@ 0x25
 801bdbe:	f89b 70a1 	ldrb.w	r7, [fp, #161]	@ 0xa1
 801bdc2:	2100      	movs	r1, #0
 801bdc4:	ee20 3a03 	vmul.f32	s6, s0, s6
 801bdc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bdcc:	460b      	mov	r3, r1
 801bdce:	fb93 fcf7 	sdiv	ip, r3, r7
 801bdd2:	fb07 331c 	mls	r3, r7, ip, r3
 801bdd6:	b2db      	uxtb	r3, r3
 801bdd8:	3315      	adds	r3, #21
 801bdda:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801bdde:	3201      	adds	r2, #1
 801bde0:	fb92 fcf0 	sdiv	ip, r2, r0
 801bde4:	fb00 221c 	mls	r2, r0, ip, r2
 801bde8:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 801bdec:	ee07 ca90 	vmov	s15, ip
 801bdf0:	f9b3 c01a 	ldrsh.w	ip, [r3, #26]
 801bdf4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bdf8:	ee06 ca90 	vmov	s13, ip
 801bdfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be00:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be04:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801be08:	ee07 3a10 	vmov	s14, r3
 801be0c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801be10:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801be14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801be18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be1c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801be20:	ee37 7a64 	vsub.f32	s14, s14, s9
 801be24:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801be28:	3101      	adds	r1, #1
 801be2a:	b252      	sxtb	r2, r2
 801be2c:	ee27 7a06 	vmul.f32	s14, s14, s12
 801be30:	b209      	sxth	r1, r1
 801be32:	eee7 7a07 	vfma.f32	s15, s14, s14
 801be36:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 801be3a:	42a9      	cmp	r1, r5
 801be3c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801be40:	ee67 7a03 	vmul.f32	s15, s14, s6
 801be44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801be48:	ee17 ca90 	vmov	ip, s15
 801be4c:	f8a3 c028 	strh.w	ip, [r3, #40]	@ 0x28
 801be50:	460b      	mov	r3, r1
 801be52:	dbbc      	blt.n	801bdce <MEMS_runMagCal.constprop.0+0x1f8e>
 801be54:	f88b 2026 	strb.w	r2, [fp, #38]	@ 0x26
 801be58:	42a8      	cmp	r0, r5
 801be5a:	bf28      	it	cs
 801be5c:	4628      	movcs	r0, r5
 801be5e:	f88b 0024 	strb.w	r0, [fp, #36]	@ 0x24
 801be62:	aa0c      	add	r2, sp, #48	@ 0x30
 801be64:	4911      	ldr	r1, [pc, #68]	@ (801beac <MEMS_runMagCal.constprop.0+0x206c>)
 801be66:	f10d 008a 	add.w	r0, sp, #138	@ 0x8a
 801be6a:	4633      	mov	r3, r6
 801be6c:	f7fd fa58 	bl	8019320 <getMagStats.constprop.0>
 801be70:	eddf 6a04 	vldr	s13, [pc, #16]	@ 801be84 <MEMS_runMagCal.constprop.0+0x2044>
 801be74:	edd2 7a00 	vldr	s15, [r2]
 801be78:	e020      	b.n	801bebc <MEMS_runMagCal.constprop.0+0x207c>
 801be7a:	bf00      	nop
 801be7c:	423c0000 	.word	0x423c0000
 801be80:	41f00001 	.word	0x41f00001
 801be84:	423c0000 	.word	0x423c0000
 801be88:	3ee66666 	.word	0x3ee66666
 801be8c:	3f8ccccd 	.word	0x3f8ccccd
 801be90:	3f266666 	.word	0x3f266666
 801be94:	3eb33333 	.word	0x3eb33333
 801be98:	3f19999a 	.word	0x3f19999a
 801be9c:	3c23d70a 	.word	0x3c23d70a
 801bea0:	447a0000 	.word	0x447a0000
 801bea4:	200003c4 	.word	0x200003c4
 801bea8:	42c80000 	.word	0x42c80000
 801beac:	200003e8 	.word	0x200003e8
 801beb0:	433d0000 	.word	0x433d0000
 801beb4:	3a83126f 	.word	0x3a83126f
 801beb8:	358637bd 	.word	0x358637bd
 801bebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bec0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801bec4:	eef0 7ae7 	vabs.f32	s15, s15
 801bec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801becc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bed0:	edd6 6a00 	vldr	s13, [r6]
 801bed4:	d505      	bpl.n	801bee2 <MEMS_runMagCal.constprop.0+0x20a2>
 801bed6:	eef4 6ac7 	vcmpe.f32	s13, s14
 801beda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bede:	f100 81a4 	bmi.w	801c22a <MEMS_runMagCal.constprop.0+0x23ea>
 801bee2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801bee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801beea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beee:	d505      	bpl.n	801befc <MEMS_runMagCal.constprop.0+0x20bc>
 801bef0:	eef4 6a47 	vcmp.f32	s13, s14
 801bef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bef8:	bf48      	it	mi
 801befa:	2402      	movmi	r4, #2
 801befc:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801bf00:	f88b 406c 	strb.w	r4, [fp, #108]	@ 0x6c
 801bf04:	2bc8      	cmp	r3, #200	@ 0xc8
 801bf06:	f67e ac83 	bls.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801bf0a:	2302      	movs	r3, #2
 801bf0c:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 801bf10:	f7fe bc7e 	b.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801bf14:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 801beb0 <MEMS_runMagCal.constprop.0+0x2070>
 801bf18:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 801bf1c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801bf20:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801bf24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bf28:	ee87 0a28 	vdiv.f32	s0, s14, s17
 801bf2c:	ee17 2a90 	vmov	r2, s15
 801bf30:	b290      	uxth	r0, r2
 801bf32:	b113      	cbz	r3, 801bf3a <MEMS_runMagCal.constprop.0+0x20fa>
 801bf34:	3b01      	subs	r3, #1
 801bf36:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 801bf3a:	f7fd fae5 	bl	8019508 <MEMS_updateMagBufferIndex.constprop.0>
 801bf3e:	eddd 7a03 	vldr	s15, [sp, #12]
 801bf42:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801bf46:	ed5f 7a25 	vldr	s15, [pc, #-148]	@ 801beb4 <MEMS_runMagCal.constprop.0+0x2074>
 801bf4a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bf4e:	f006 fd0f 	bl	8022970 <roundf>
 801bf52:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bf56:	2300      	movs	r3, #0
 801bf58:	f88b 3014 	strb.w	r3, [fp, #20]
 801bf5c:	ed8b 0a06 	vstr	s0, [fp, #24]
 801bf60:	f7fe bc56 	b.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801bf64:	e9cd 333f 	strd	r3, r3, [sp, #252]	@ 0xfc
 801bf68:	e9cd 3343 	strd	r3, r3, [sp, #268]	@ 0x10c
 801bf6c:	9341      	str	r3, [sp, #260]	@ 0x104
 801bf6e:	9345      	str	r3, [sp, #276]	@ 0x114
 801bf70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801bf74:	fb03 f206 	mul.w	r2, r3, r6
 801bf78:	ee07 2a90 	vmov	s15, r2
 801bf7c:	fb03 f209 	mul.w	r2, r3, r9
 801bf80:	fb03 f307 	mul.w	r3, r3, r7
 801bf84:	ee06 2a90 	vmov	s13, r2
 801bf88:	ee07 3a10 	vmov	s14, r3
 801bf8c:	ed1f 6a36 	vldr	s12, [pc, #-216]	@ 801beb8 <MEMS_runMagCal.constprop.0+0x2078>
 801bf90:	49e4      	ldr	r1, [pc, #912]	@ (801c324 <MEMS_runMagCal.constprop.0+0x24e4>)
 801bf92:	ed9b 0a01 	vldr	s0, [fp, #4]
 801bf96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bf9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bfa2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bfa6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801bfaa:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bfae:	ab2e      	add	r3, sp, #184	@ 0xb8
 801bfb0:	aa0c      	add	r2, sp, #48	@ 0x30
 801bfb2:	f1a1 001e 	sub.w	r0, r1, #30
 801bfb6:	ae0d      	add	r6, sp, #52	@ 0x34
 801bfb8:	edcd 7a3e 	vstr	s15, [sp, #248]	@ 0xf8
 801bfbc:	edcd 6a42 	vstr	s13, [sp, #264]	@ 0x108
 801bfc0:	ed8d 7a46 	vstr	s14, [sp, #280]	@ 0x118
 801bfc4:	f7fd f9ac 	bl	8019320 <getMagStats.constprop.0>
 801bfc8:	ed9b 0a01 	vldr	s0, [fp, #4]
 801bfcc:	a93e      	add	r1, sp, #248	@ 0xf8
 801bfce:	4633      	mov	r3, r6
 801bfd0:	f10d 008a 	add.w	r0, sp, #138	@ 0x8a
 801bfd4:	f7fd f9a4 	bl	8019320 <getMagStats.constprop.0>
 801bfd8:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 801c328 <MEMS_runMagCal.constprop.0+0x24e8>
 801bfdc:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801bfe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bfe4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801bfe8:	eef0 7ae7 	vabs.f32	s15, s15
 801bfec:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bff4:	ed96 7a00 	vldr	s14, [r6]
 801bff8:	d505      	bpl.n	801c006 <MEMS_runMagCal.constprop.0+0x21c6>
 801bffa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801bffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c002:	f100 8114 	bmi.w	801c22e <MEMS_runMagCal.constprop.0+0x23ee>
 801c006:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 801c00a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801c00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c012:	f140 8105 	bpl.w	801c220 <MEMS_runMagCal.constprop.0+0x23e0>
 801c016:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801c01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c01e:	bfac      	ite	ge
 801c020:	4623      	movge	r3, r4
 801c022:	2302      	movlt	r3, #2
 801c024:	eddd 5a2e 	vldr	s11, [sp, #184]	@ 0xb8
 801c028:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801c02c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801c030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c038:	f57e abea 	bpl.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801c03c:	f89b 206c 	ldrb.w	r2, [fp, #108]	@ 0x6c
 801c040:	429a      	cmp	r2, r3
 801c042:	f63e abe5 	bhi.w	801a810 <MEMS_runMagCal.constprop.0+0x9d0>
 801c046:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c04e:	eef4 5ae7 	vcmpe.f32	s11, s15
 801c052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c056:	d413      	bmi.n	801c080 <MEMS_runMagCal.constprop.0+0x2240>
 801c058:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801c05c:	eef4 5ae7 	vcmpe.f32	s11, s15
 801c060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c064:	d505      	bpl.n	801c072 <MEMS_runMagCal.constprop.0+0x2232>
 801c066:	f89b 205c 	ldrb.w	r2, [fp, #92]	@ 0x5c
 801c06a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801c06e:	429a      	cmp	r2, r3
 801c070:	d306      	bcc.n	801c080 <MEMS_runMagCal.constprop.0+0x2240>
 801c072:	ed9b 0a01 	vldr	s0, [fp, #4]
 801c076:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 801c07a:	f89b 50a0 	ldrb.w	r5, [fp, #160]	@ 0xa0
 801c07e:	e643      	b.n	801bd08 <MEMS_runMagCal.constprop.0+0x1ec8>
 801c080:	f9bb 1060 	ldrsh.w	r1, [fp, #96]	@ 0x60
 801c084:	f9bd 708c 	ldrsh.w	r7, [sp, #140]	@ 0x8c
 801c088:	f9bb 005e 	ldrsh.w	r0, [fp, #94]	@ 0x5e
 801c08c:	f9bd c08a 	ldrsh.w	ip, [sp, #138]	@ 0x8a
 801c090:	f9bb 2062 	ldrsh.w	r2, [fp, #98]	@ 0x62
 801c094:	f9bd 508e 	ldrsh.w	r5, [sp, #142]	@ 0x8e
 801c098:	ed9b 0a01 	vldr	s0, [fp, #4]
 801c09c:	1bcb      	subs	r3, r1, r7
 801c09e:	eba0 0e0c 	sub.w	lr, r0, ip
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	bfb8      	it	lt
 801c0a6:	425b      	neglt	r3, r3
 801c0a8:	f1be 0f00 	cmp.w	lr, #0
 801c0ac:	bfb8      	it	lt
 801c0ae:	f1ce 0e00 	rsblt	lr, lr, #0
 801c0b2:	4573      	cmp	r3, lr
 801c0b4:	bfb8      	it	lt
 801c0b6:	4673      	movlt	r3, lr
 801c0b8:	eba2 0e05 	sub.w	lr, r2, r5
 801c0bc:	f1be 0f00 	cmp.w	lr, #0
 801c0c0:	b21b      	sxth	r3, r3
 801c0c2:	bfb8      	it	lt
 801c0c4:	f1ce 0e00 	rsblt	lr, lr, #0
 801c0c8:	4573      	cmp	r3, lr
 801c0ca:	bfb8      	it	lt
 801c0cc:	4673      	movlt	r3, lr
 801c0ce:	b21b      	sxth	r3, r3
 801c0d0:	ee07 3a90 	vmov	s15, r3
 801c0d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0d8:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 801c0dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c0e0:	eef4 7ae6 	vcmpe.f32	s15, s13
 801c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0e8:	d5c5      	bpl.n	801c076 <MEMS_runMagCal.constprop.0+0x2236>
 801c0ea:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c0ee:	ee07 0a90 	vmov	s15, r0
 801c0f2:	ee85 3a87 	vdiv.f32	s6, s11, s14
 801c0f6:	f8bb 3064 	ldrh.w	r3, [fp, #100]	@ 0x64
 801c0fa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801c0fe:	ee07 1a90 	vmov	s15, r1
 801c102:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c106:	ee07 2a90 	vmov	s15, r2
 801c10a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c10e:	ee07 ca90 	vmov	s15, ip
 801c112:	eef8 3ae7 	vcvt.f32.s32	s7, s15
 801c116:	ee07 7a90 	vmov	s15, r7
 801c11a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 801c11e:	ee07 5a90 	vmov	s15, r5
 801c122:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 801c126:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c12a:	ee77 5ac3 	vsub.f32	s11, s15, s6
 801c12e:	ee26 7a25 	vmul.f32	s14, s12, s11
 801c132:	ee66 7aa5 	vmul.f32	s15, s13, s11
 801c136:	eea3 7a24 	vfma.f32	s14, s6, s9
 801c13a:	ee06 3a10 	vmov	s12, r3
 801c13e:	f8bb 3066 	ldrh.w	r3, [fp, #102]	@ 0x66
 801c142:	eee3 7a04 	vfma.f32	s15, s6, s8
 801c146:	ee25 5a25 	vmul.f32	s10, s10, s11
 801c14a:	ee06 3a90 	vmov	s13, r3
 801c14e:	f8bb 3068 	ldrh.w	r3, [fp, #104]	@ 0x68
 801c152:	eea3 5a23 	vfma.f32	s10, s6, s7
 801c156:	eef0 3a47 	vmov.f32	s7, s14
 801c15a:	ee07 3a10 	vmov	s14, r3
 801c15e:	f89b 305c 	ldrb.w	r3, [fp, #92]	@ 0x5c
 801c162:	eef0 4a67 	vmov.f32	s9, s15
 801c166:	ee07 3a90 	vmov	s15, r3
 801c16a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801c16e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 801c172:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c176:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c17a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c17e:	ee26 6a25 	vmul.f32	s12, s12, s11
 801c182:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c186:	ee27 7a25 	vmul.f32	s14, s14, s11
 801c18a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c18e:	ee05 3a90 	vmov	s11, r3
 801c192:	f8bd 3092 	ldrh.w	r3, [sp, #146]	@ 0x92
 801c196:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801c19a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 801c19e:	eea3 6a25 	vfma.f32	s12, s6, s11
 801c1a2:	ee05 3a90 	vmov	s11, r3
 801c1a6:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 801c1aa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801c1ae:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801c1b2:	eee3 6a25 	vfma.f32	s13, s6, s11
 801c1b6:	ee05 3a90 	vmov	s11, r3
 801c1ba:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801c1be:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801c1c2:	eefd 3ae3 	vcvt.s32.f32	s7, s7
 801c1c6:	eea3 7a25 	vfma.f32	s14, s6, s11
 801c1ca:	ee05 3a90 	vmov	s11, r3
 801c1ce:	ee15 3a10 	vmov	r3, s10
 801c1d2:	f8ad 308a 	strh.w	r3, [sp, #138]	@ 0x8a
 801c1d6:	ee16 3a10 	vmov	r3, s12
 801c1da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801c1de:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801c1e2:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 801c1e6:	ee13 3a90 	vmov	r3, s7
 801c1ea:	eee3 7a25 	vfma.f32	s15, s6, s11
 801c1ee:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 801c1f2:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 801c1f6:	ee16 3a90 	vmov	r3, s13
 801c1fa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801c1fe:	f8ad 3092 	strh.w	r3, [sp, #146]	@ 0x92
 801c202:	ee14 3a90 	vmov	r3, s9
 801c206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c20a:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
 801c20e:	ee17 3a10 	vmov	r3, s14
 801c212:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 801c216:	ee17 3a90 	vmov	r3, s15
 801c21a:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
 801c21e:	e72a      	b.n	801c076 <MEMS_runMagCal.constprop.0+0x2236>
 801c220:	4623      	mov	r3, r4
 801c222:	e6ff      	b.n	801c024 <MEMS_runMagCal.constprop.0+0x21e4>
 801c224:	f89b 0025 	ldrb.w	r0, [fp, #37]	@ 0x25
 801c228:	e616      	b.n	801be58 <MEMS_runMagCal.constprop.0+0x2018>
 801c22a:	2403      	movs	r4, #3
 801c22c:	e666      	b.n	801befc <MEMS_runMagCal.constprop.0+0x20bc>
 801c22e:	2303      	movs	r3, #3
 801c230:	e6f8      	b.n	801c024 <MEMS_runMagCal.constprop.0+0x21e4>
 801c232:	23ff      	movs	r3, #255	@ 0xff
 801c234:	e556      	b.n	801bce4 <MEMS_runMagCal.constprop.0+0x1ea4>
 801c236:	ed9f 8a3d 	vldr	s16, [pc, #244]	@ 801c32c <MEMS_runMagCal.constprop.0+0x24ec>
 801c23a:	e48e      	b.n	801bb5a <MEMS_runMagCal.constprop.0+0x1d1a>
 801c23c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c240:	f7ff b9ab 	b.w	801b59a <MEMS_runMagCal.constprop.0+0x175a>
 801c244:	2224      	movs	r2, #36	@ 0x24
 801c246:	2100      	movs	r1, #0
 801c248:	a83e      	add	r0, sp, #248	@ 0xf8
 801c24a:	f005 fa21 	bl	8021690 <memset>
 801c24e:	eddf 7a36 	vldr	s15, [pc, #216]	@ 801c328 <MEMS_runMagCal.constprop.0+0x24e8>
 801c252:	ee87 aa88 	vdiv.f32	s20, s15, s16
 801c256:	af26      	add	r7, sp, #152	@ 0x98
 801c258:	ae2e      	add	r6, sp, #184	@ 0xb8
 801c25a:	ad3e      	add	r5, sp, #248	@ 0xf8
 801c25c:	2400      	movs	r4, #0
 801c25e:	3401      	adds	r4, #1
 801c260:	ecb7 0a01 	vldmia	r7!, {s0}
 801c264:	ee29 0a00 	vmul.f32	s0, s18, s0
 801c268:	f006 fb82 	bl	8022970 <roundf>
 801c26c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c270:	462b      	mov	r3, r5
 801c272:	ed83 aa00 	vstr	s20, [r3]
 801c276:	ee10 3a10 	vmov	r3, s0
 801c27a:	2c03      	cmp	r4, #3
 801c27c:	f826 3b02 	strh.w	r3, [r6], #2
 801c280:	f105 0510 	add.w	r5, r5, #16
 801c284:	d1eb      	bne.n	801c25e <MEMS_runMagCal.constprop.0+0x241e>
 801c286:	eeb0 0a68 	vmov.f32	s0, s17
 801c28a:	ab1d      	add	r3, sp, #116	@ 0x74
 801c28c:	aa2c      	add	r2, sp, #176	@ 0xb0
 801c28e:	a93e      	add	r1, sp, #248	@ 0xf8
 801c290:	a82e      	add	r0, sp, #184	@ 0xb8
 801c292:	f7fd f845 	bl	8019320 <getMagStats.constprop.0>
 801c296:	eddd 7a1d 	vldr	s15, [sp, #116]	@ 0x74
 801c29a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801c29e:	ee67 9aa9 	vmul.f32	s19, s15, s19
 801c2a2:	ed8d 7a1d 	vstr	s14, [sp, #116]	@ 0x74
 801c2a6:	e41d      	b.n	801bae4 <MEMS_runMagCal.constprop.0+0x1ca4>
 801c2a8:	ed9f da20 	vldr	s26, [pc, #128]	@ 801c32c <MEMS_runMagCal.constprop.0+0x24ec>
 801c2ac:	f7fe bed6 	b.w	801b05c <MEMS_runMagCal.constprop.0+0x121c>
 801c2b0:	ed9f da1f 	vldr	s26, [pc, #124]	@ 801c330 <MEMS_runMagCal.constprop.0+0x24f0>
 801c2b4:	f7fe bed2 	b.w	801b05c <MEMS_runMagCal.constprop.0+0x121c>
 801c2b8:	fb95 f7f9 	sdiv	r7, r5, r9
 801c2bc:	fb09 5717 	mls	r7, r9, r7, r5
 801c2c0:	b23f      	sxth	r7, r7
 801c2c2:	f7fe bd47 	b.w	801ad54 <MEMS_runMagCal.constprop.0+0xf14>
 801c2c6:	eddd 7a03 	vldr	s15, [sp, #12]
 801c2ca:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801c2ce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c334 <MEMS_runMagCal.constprop.0+0x24f4>
 801c2d2:	2303      	movs	r3, #3
 801c2d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c2d8:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 801c2dc:	e637      	b.n	801bf4e <MEMS_runMagCal.constprop.0+0x210e>
 801c2de:	eef2 9a04 	vmov.f32	s19, #36	@ 0x41200000  10.0
 801c2e2:	f7ff bb76 	b.w	801b9d2 <MEMS_runMagCal.constprop.0+0x1b92>
 801c2e6:	ed92 7a00 	vldr	s14, [r2]
 801c2ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2f2:	f77f abd4 	ble.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801c2f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c2fa:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801c2fe:	ed83 7a01 	vstr	s14, [r3, #4]
 801c302:	f7ff bb32 	b.w	801b96a <MEMS_runMagCal.constprop.0+0x1b2a>
 801c306:	edd2 7a00 	vldr	s15, [r2]
 801c30a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c312:	f77f abc4 	ble.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801c316:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801c31a:	ed83 7a00 	vstr	s14, [r3]
 801c31e:	f7ff bb24 	b.w	801b96a <MEMS_runMagCal.constprop.0+0x1b2a>
 801c322:	bf00      	nop
 801c324:	200003e8 	.word	0x200003e8
 801c328:	423c0000 	.word	0x423c0000
 801c32c:	00000000 	.word	0x00000000
 801c330:	3f860a92 	.word	0x3f860a92
 801c334:	3a83126f 	.word	0x3a83126f
 801c338:	edd2 7a00 	vldr	s15, [r2]
 801c33c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c344:	f77f abab 	ble.w	801ba9e <MEMS_runMagCal.constprop.0+0x1c5e>
 801c348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c34c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801c350:	ed83 7a02 	vstr	s14, [r3, #8]
 801c354:	f7ff bb09 	b.w	801b96a <MEMS_runMagCal.constprop.0+0x1b2a>

0801c358 <iNemoEngine_API_Update>:
 801c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35c:	ed2d 8b10 	vpush	{d8-d15}
 801c360:	f2ad 5d94 	subw	sp, sp, #1428	@ 0x594
 801c364:	eeb0 8a40 	vmov.f32	s16, s0
 801c368:	9006      	str	r0, [sp, #24]
 801c36a:	9114      	str	r1, [sp, #80]	@ 0x50
 801c36c:	4614      	mov	r4, r2
 801c36e:	9324      	str	r3, [sp, #144]	@ 0x90
 801c370:	2b00      	cmp	r3, #0
 801c372:	f000 8222 	beq.w	801c7ba <iNemoEngine_API_Update+0x462>
 801c376:	68e0      	ldr	r0, [r4, #12]
 801c378:	6921      	ldr	r1, [r4, #16]
 801c37a:	6962      	ldr	r2, [r4, #20]
 801c37c:	9d06      	ldr	r5, [sp, #24]
 801c37e:	aba1      	add	r3, sp, #644	@ 0x284
 801c380:	c307      	stmia	r3!, {r0, r1, r2}
 801c382:	6820      	ldr	r0, [r4, #0]
 801c384:	6861      	ldr	r1, [r4, #4]
 801c386:	68a2      	ldr	r2, [r4, #8]
 801c388:	ab9e      	add	r3, sp, #632	@ 0x278
 801c38a:	c307      	stmia	r3!, {r0, r1, r2}
 801c38c:	69a0      	ldr	r0, [r4, #24]
 801c38e:	69e1      	ldr	r1, [r4, #28]
 801c390:	6a22      	ldr	r2, [r4, #32]
 801c392:	f895 4978 	ldrb.w	r4, [r5, #2424]	@ 0x978
 801c396:	aba4      	add	r3, sp, #656	@ 0x290
 801c398:	c307      	stmia	r3!, {r0, r1, r2}
 801c39a:	b12c      	cbz	r4, 801c3a8 <iNemoEngine_API_Update+0x50>
 801c39c:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	@ 0x950
 801c3a0:	792b      	ldrb	r3, [r5, #4]
 801c3a2:	429a      	cmp	r2, r3
 801c3a4:	f082 82a5 	bcs.w	801e8f2 <iNemoEngine_API_Update+0x259a>
 801c3a8:	9c06      	ldr	r4, [sp, #24]
 801c3aa:	ae31      	add	r6, sp, #196	@ 0xc4
 801c3ac:	f104 033a 	add.w	r3, r4, #58	@ 0x3a
 801c3b0:	4619      	mov	r1, r3
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	aaa1      	add	r2, sp, #644	@ 0x284
 801c3b6:	9320      	str	r3, [sp, #128]	@ 0x80
 801c3b8:	ad37      	add	r5, sp, #220	@ 0xdc
 801c3ba:	f7fb fbb5 	bl	8017b28 <rotVect>
 801c3be:	aaa4      	add	r2, sp, #656	@ 0x290
 801c3c0:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 801c3c4:	a834      	add	r0, sp, #208	@ 0xd0
 801c3c6:	f7fb fbaf 	bl	8017b28 <rotVect>
 801c3ca:	aa9e      	add	r2, sp, #632	@ 0x278
 801c3cc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 801c3d0:	4628      	mov	r0, r5
 801c3d2:	f7fb fba9 	bl	8017b28 <rotVect>
 801c3d6:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801c3da:	b923      	cbnz	r3, 801c3e6 <iNemoEngine_API_Update+0x8e>
 801c3dc:	4b9d      	ldr	r3, [pc, #628]	@ (801c654 <iNemoEngine_API_Update+0x2fc>)
 801c3de:	606b      	str	r3, [r5, #4]
 801c3e0:	60ab      	str	r3, [r5, #8]
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	602b      	str	r3, [r5, #0]
 801c3e6:	9b06      	ldr	r3, [sp, #24]
 801c3e8:	f8d3 794c 	ldr.w	r7, [r3, #2380]	@ 0x94c
 801c3ec:	2f09      	cmp	r7, #9
 801c3ee:	d851      	bhi.n	801c494 <iNemoEngine_API_Update+0x13c>
 801c3f0:	edd6 aa01 	vldr	s21, [r6, #4]
 801c3f4:	ed96 ba00 	vldr	s22, [r6]
 801c3f8:	ed96 aa02 	vldr	s20, [r6, #8]
 801c3fc:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 801c400:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 801c404:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801c408:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801c40c:	ee17 0a90 	vmov	r0, s15
 801c410:	f7e4 f89a 	bl	8000548 <__aeabi_f2d>
 801c414:	ec41 0b10 	vmov	d0, r0, r1
 801c418:	f005 fe94 	bl	8022144 <sqrt>
 801c41c:	ec51 0b10 	vmov	r0, r1, d0
 801c420:	f7e4 fbc2 	bl	8000ba8 <__aeabi_d2f>
 801c424:	ee07 0a90 	vmov	s15, r0
 801c428:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 801c42c:	ed95 9a01 	vldr	s18, [r5, #4]
 801c430:	edd5 9a00 	vldr	s19, [r5]
 801c434:	edd5 8a02 	vldr	s17, [r5, #8]
 801c438:	ee69 7a09 	vmul.f32	s15, s18, s18
 801c43c:	ee2b ba07 	vmul.f32	s22, s22, s14
 801c440:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801c444:	ee6a aa87 	vmul.f32	s21, s21, s14
 801c448:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801c44c:	ee2a aa07 	vmul.f32	s20, s20, s14
 801c450:	ee17 0a90 	vmov	r0, s15
 801c454:	ed86 ba00 	vstr	s22, [r6]
 801c458:	edc6 aa01 	vstr	s21, [r6, #4]
 801c45c:	ed86 aa02 	vstr	s20, [r6, #8]
 801c460:	f7e4 f872 	bl	8000548 <__aeabi_f2d>
 801c464:	ec41 0b10 	vmov	d0, r0, r1
 801c468:	f005 fe6c 	bl	8022144 <sqrt>
 801c46c:	ec51 0b10 	vmov	r0, r1, d0
 801c470:	f7e4 fb9a 	bl	8000ba8 <__aeabi_d2f>
 801c474:	ee07 0a90 	vmov	s15, r0
 801c478:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801c47c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801c480:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c484:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c488:	edc5 9a00 	vstr	s19, [r5]
 801c48c:	ed85 9a01 	vstr	s18, [r5, #4]
 801c490:	edc5 8a02 	vstr	s17, [r5, #8]
 801c494:	9906      	ldr	r1, [sp, #24]
 801c496:	790b      	ldrb	r3, [r1, #4]
 801c498:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	@ 0x950
 801c49c:	429a      	cmp	r2, r3
 801c49e:	f080 80f5 	bcs.w	801c68c <iNemoEngine_API_Update+0x334>
 801c4a2:	abf8      	add	r3, sp, #992	@ 0x3e0
 801c4a4:	9319      	str	r3, [sp, #100]	@ 0x64
 801c4a6:	f501 6313 	add.w	r3, r1, #2352	@ 0x930
 801c4aa:	931c      	str	r3, [sp, #112]	@ 0x70
 801c4ac:	f601 1334 	addw	r3, r1, #2356	@ 0x934
 801c4b0:	931d      	str	r3, [sp, #116]	@ 0x74
 801c4b2:	f601 1338 	addw	r3, r1, #2360	@ 0x938
 801c4b6:	931e      	str	r3, [sp, #120]	@ 0x78
 801c4b8:	eddd 9af5 	vldr	s19, [sp, #980]	@ 0x3d4
 801c4bc:	f601 133c 	addw	r3, r1, #2364	@ 0x93c
 801c4c0:	accc      	add	r4, sp, #816	@ 0x330
 801c4c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c4c4:	460d      	mov	r5, r1
 801c4c6:	3701      	adds	r7, #1
 801c4c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c4ca:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801c4cc:	f8c5 794c 	str.w	r7, [r5, #2380]	@ 0x94c
 801c4d0:	aaa1      	add	r2, sp, #644	@ 0x284
 801c4d2:	f7fb fb29 	bl	8017b28 <rotVect>
 801c4d6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c4d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	60d3      	str	r3, [r2, #12]
 801c4de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	6113      	str	r3, [r2, #16]
 801c4e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	6153      	str	r3, [r2, #20]
 801c4ea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	6193      	str	r3, [r2, #24]
 801c4f0:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 801c4f4:	9301      	str	r3, [sp, #4]
 801c4f6:	4601      	mov	r1, r0
 801c4f8:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 801c4fc:	4610      	mov	r0, r2
 801c4fe:	4615      	mov	r5, r2
 801c500:	300c      	adds	r0, #12
 801c502:	9300      	str	r3, [sp, #0]
 801c504:	f102 031c 	add.w	r3, r2, #28
 801c508:	f7fd f8e0 	bl	80196cc <output_update>
 801c50c:	ed95 8a00 	vldr	s16, [r5]
 801c510:	ed95 aa01 	vldr	s20, [r5, #4]
 801c514:	eeb0 0a48 	vmov.f32	s0, s16
 801c518:	f005 ffcc 	bl	80224b4 <sinf>
 801c51c:	eeb0 9a40 	vmov.f32	s18, s0
 801c520:	eeb0 0a48 	vmov.f32	s0, s16
 801c524:	f005 ff7a 	bl	802241c <cosf>
 801c528:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 801c52c:	edd4 6a3d 	vldr	s13, [r4, #244]	@ 0xf4
 801c530:	ee60 8a00 	vmul.f32	s17, s0, s0
 801c534:	eeb0 7aca 	vabs.f32	s14, s20
 801c538:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c53c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 801c658 <iNemoEngine_API_Update+0x300>
 801c540:	ee29 9a09 	vmul.f32	s18, s18, s18
 801c544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54c:	eee9 8a26 	vfma.f32	s17, s18, s13
 801c550:	d579      	bpl.n	801c646 <iNemoEngine_API_Update+0x2ee>
 801c552:	eeb0 0a4a 	vmov.f32	s0, s20
 801c556:	f005 fff3 	bl	8022540 <tanf>
 801c55a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801c55e:	eeb0 7a69 	vmov.f32	s14, s19
 801c562:	eea0 7a28 	vfma.f32	s14, s0, s17
 801c566:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c568:	9b06      	ldr	r3, [sp, #24]
 801c56a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 801c65c <iNemoEngine_API_Update+0x304>
 801c56e:	4c3c      	ldr	r4, [pc, #240]	@ (801c660 <iNemoEngine_API_Update+0x308>)
 801c570:	eef1 7ac7 	vsqrt.f32	s15, s14
 801c574:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 801c680 <iNemoEngine_API_Update+0x328>
 801c578:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c57c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801c580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c584:	bf88      	it	hi
 801c586:	eef0 7a66 	vmovhi.f32	s15, s13
 801c58a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c592:	bfb8      	it	lt
 801c594:	eef0 7a47 	vmovlt.f32	s15, s14
 801c598:	edc5 7a0e 	vstr	s15, [r5, #56]	@ 0x38
 801c59c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c5a0:	bbd3      	cbnz	r3, 801c618 <iNemoEngine_API_Update+0x2c0>
 801c5a2:	ed95 1a09 	vldr	s2, [r5, #36]	@ 0x24
 801c5a6:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 801c5aa:	edd5 0a08 	vldr	s1, [r5, #32]
 801c5ae:	ed95 0a07 	vldr	s0, [r5, #28]
 801c5b2:	f7fb fb89 	bl	8017cc8 <findDirection>
 801c5b6:	ed95 7a03 	vldr	s14, [r5, #12]
 801c5ba:	edd5 6a04 	vldr	s13, [r5, #16]
 801c5be:	edd5 8a05 	vldr	s17, [r5, #20]
 801c5c2:	edd5 7a06 	vldr	s15, [r5, #24]
 801c5c6:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 801c5ca:	2805      	cmp	r0, #5
 801c5cc:	f204 822c 	bhi.w	8020a28 <iNemoEngine_API_Update+0x46d0>
 801c5d0:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c5d4:	11d0000a 	.word	0x11d0000a
 801c5d8:	11990006 	.word	0x11990006
 801c5dc:	000a0006 	.word	0x000a0006
 801c5e0:	eddf 7a20 	vldr	s15, [pc, #128]	@ 801c664 <iNemoEngine_API_Update+0x30c>
 801c5e4:	ee38 8a27 	vadd.f32	s16, s16, s15
 801c5e8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801c668 <iNemoEngine_API_Update+0x310>
 801c5ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5f4:	bfa8      	it	ge
 801c5f6:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801c5fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c602:	f100 80d5 	bmi.w	801c7b0 <iNemoEngine_API_Update+0x458>
 801c606:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c608:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
 801c60c:	f20d 5d94 	addw	sp, sp, #1428	@ 0x594
 801c610:	ecbd 8b10 	vpop	{d8-d15}
 801c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c618:	ed95 1a09 	vldr	s2, [r5, #36]	@ 0x24
 801c61c:	edd5 8a05 	vldr	s17, [r5, #20]
 801c620:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 801c624:	edd5 0a07 	vldr	s1, [r5, #28]
 801c628:	ed95 0a08 	vldr	s0, [r5, #32]
 801c62c:	eeb1 1a41 	vneg.f32	s2, s2
 801c630:	f7fb fb4a 	bl	8017cc8 <findDirection>
 801c634:	eef1 8a68 	vneg.f32	s17, s17
 801c638:	ed95 7a04 	vldr	s14, [r5, #16]
 801c63c:	edd5 6a03 	vldr	s13, [r5, #12]
 801c640:	edd5 7a06 	vldr	s15, [r5, #24]
 801c644:	e7bf      	b.n	801c5c6 <iNemoEngine_API_Update+0x26e>
 801c646:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801c66c <iNemoEngine_API_Update+0x314>
 801c64a:	eeb0 7a69 	vmov.f32	s14, s19
 801c64e:	eea8 7aa7 	vfma.f32	s14, s17, s15
 801c652:	e788      	b.n	801c566 <iNemoEngine_API_Update+0x20e>
 801c654:	3f333333 	.word	0x3f333333
 801c658:	3fbc430e 	.word	0x3fbc430e
 801c65c:	40490fdb 	.word	0x40490fdb
 801c660:	2000036c 	.word	0x2000036c
 801c664:	43340000 	.word	0x43340000
 801c668:	43b40000 	.word	0x43b40000
 801c66c:	42c6ab07 	.word	0x42c6ab07
 801c670:	3c03126f 	.word	0x3c03126f
 801c674:	3b656042 	.word	0x3b656042
 801c678:	3e4ccccd 	.word	0x3e4ccccd
 801c67c:	3fb50481 	.word	0x3fb50481
 801c680:	3c8efa35 	.word	0x3c8efa35
 801c684:	3ed93dd9 	.word	0x3ed93dd9
 801c688:	42c80000 	.word	0x42c80000
 801c68c:	ee07 3a90 	vmov	s15, r3
 801c690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c694:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 801c670 <iNemoEngine_API_Update+0x318>
 801c698:	ed5f 6a0a 	vldr	s13, [pc, #-40]	@ 801c674 <iNemoEngine_API_Update+0x31c>
 801c69c:	ed5f ba08 	vldr	s23, [pc, #-32]	@ 801c680 <iNemoEngine_API_Update+0x328>
 801c6a0:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 801c67c <iNemoEngine_API_Update+0x324>
 801c6a4:	ed5f 4a0c 	vldr	s9, [pc, #-48]	@ 801c678 <iNemoEngine_API_Update+0x320>
 801c6a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c6ac:	4608      	mov	r0, r1
 801c6ae:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801c6b2:	f601 125c 	addw	r2, r1, #2396	@ 0x95c
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	2100      	movs	r1, #0
 801c6ba:	f50d 7cb2 	add.w	ip, sp, #356	@ 0x164
 801c6be:	ac56      	add	r4, sp, #344	@ 0x158
 801c6c0:	edcd 7a07 	vstr	s15, [sp, #28]
 801c6c4:	eef1 7ae5 	vsqrt.f32	s15, s11
 801c6c8:	ed1f 7a12 	vldr	s14, [pc, #-72]	@ 801c684 <iNemoEngine_API_Update+0x32c>
 801c6cc:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 801c6d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 801c6d4:	ed92 7a00 	vldr	s14, [r2]
 801c6d8:	f8a0 1950 	strh.w	r1, [r0, #2384]	@ 0x950
 801c6dc:	6013      	str	r3, [r2, #0]
 801c6de:	f500 6216 	add.w	r2, r0, #2400	@ 0x960
 801c6e2:	ee27 ea2b 	vmul.f32	s28, s14, s23
 801c6e6:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
 801c6ea:	ed92 7a00 	vldr	s14, [r2]
 801c6ee:	6013      	str	r3, [r2, #0]
 801c6f0:	f600 1264 	addw	r2, r0, #2404	@ 0x964
 801c6f4:	ee67 ea2b 	vmul.f32	s29, s14, s23
 801c6f8:	ed8d 7a1c 	vstr	s14, [sp, #112]	@ 0x70
 801c6fc:	ed92 7a00 	vldr	s14, [r2]
 801c700:	6013      	str	r3, [r2, #0]
 801c702:	7947      	ldrb	r7, [r0, #5]
 801c704:	ed8d 7a18 	vstr	s14, [sp, #96]	@ 0x60
 801c708:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801c70c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801c710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801c714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c718:	9a06      	ldr	r2, [sp, #24]
 801c71a:	f8d2 01c8 	ldr.w	r0, [r2, #456]	@ 0x1c8
 801c71e:	f8d2 11cc 	ldr.w	r1, [r2, #460]	@ 0x1cc
 801c722:	f8d2 21d0 	ldr.w	r2, [r2, #464]	@ 0x1d0
 801c726:	abd9      	add	r3, sp, #868	@ 0x364
 801c728:	2f01      	cmp	r7, #1
 801c72a:	c307      	stmia	r3!, {r0, r1, r2}
 801c72c:	ee27 6a86 	vmul.f32	s12, s15, s12
 801c730:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801c734:	ee67 ba2b 	vmul.f32	s23, s14, s23
 801c738:	f002 844a 	beq.w	801efd0 <iNemoEngine_API_Update+0x2c78>
 801c73c:	2f02      	cmp	r7, #2
 801c73e:	f002 843c 	beq.w	801efba <iNemoEngine_API_Update+0x2c62>
 801c742:	2f00      	cmp	r7, #0
 801c744:	f002 814d 	beq.w	801e9e2 <iNemoEngine_API_Update+0x268a>
 801c748:	9b06      	ldr	r3, [sp, #24]
 801c74a:	ed5f 5a31 	vldr	s11, [pc, #-196]	@ 801c688 <iNemoEngine_API_Update+0x330>
 801c74e:	ed93 ba05 	vldr	s22, [r3, #20]
 801c752:	491b      	ldr	r1, [pc, #108]	@ (801c7c0 <iNemoEngine_API_Update+0x468>)
 801c754:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c758:	ee2b ba25 	vmul.f32	s22, s22, s11
 801c75c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c760:	4618      	mov	r0, r3
 801c762:	8842      	ldrh	r2, [r0, #2]
 801c764:	1e53      	subs	r3, r2, #1
 801c766:	2b12      	cmp	r3, #18
 801c768:	d834      	bhi.n	801c7d4 <iNemoEngine_API_Update+0x47c>
 801c76a:	3201      	adds	r2, #1
 801c76c:	b213      	sxth	r3, r2
 801c76e:	b292      	uxth	r2, r2
 801c770:	2a03      	cmp	r2, #3
 801c772:	8043      	strh	r3, [r0, #2]
 801c774:	f242 8401 	bls.w	801ef7a <iNemoEngine_API_Update+0x2c22>
 801c778:	ee07 3a10 	vmov	s14, r3
 801c77c:	eddf 5a11 	vldr	s11, [pc, #68]	@ 801c7c4 <iNemoEngine_API_Update+0x46c>
 801c780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c784:	4603      	mov	r3, r0
 801c786:	ee27 7a25 	vmul.f32	s14, s14, s11
 801c78a:	ee84 4a07 	vdiv.f32	s8, s8, s14
 801c78e:	ed93 5a0d 	vldr	s10, [r3, #52]	@ 0x34
 801c792:	ed8d 4a22 	vstr	s8, [sp, #136]	@ 0x88
 801c796:	ee66 5a87 	vmul.f32	s11, s13, s14
 801c79a:	ee66 6a05 	vmul.f32	s13, s12, s10
 801c79e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 801c7d0 <iNemoEngine_API_Update+0x478>
 801c7a2:	ee66 6a87 	vmul.f32	s13, s13, s14
 801c7a6:	ee24 6a86 	vmul.f32	s12, s9, s12
 801c7aa:	eeb0 7a65 	vmov.f32	s14, s11
 801c7ae:	e02d      	b.n	801c80c <iNemoEngine_API_Update+0x4b4>
 801c7b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801c7c8 <iNemoEngine_API_Update+0x470>
 801c7b4:	ee38 8a27 	vadd.f32	s16, s16, s15
 801c7b8:	e725      	b.n	801c606 <iNemoEngine_API_Update+0x2ae>
 801c7ba:	ab46      	add	r3, sp, #280	@ 0x118
 801c7bc:	9324      	str	r3, [sp, #144]	@ 0x90
 801c7be:	e5da      	b.n	801c376 <iNemoEngine_API_Update+0x1e>
 801c7c0:	3a83126f 	.word	0x3a83126f
 801c7c4:	3d4ccccd 	.word	0x3d4ccccd
 801c7c8:	43b40000 	.word	0x43b40000
 801c7cc:	358637bd 	.word	0x358637bd
 801c7d0:	3f333333 	.word	0x3f333333
 801c7d4:	ed1f 5a03 	vldr	s10, [pc, #-12]	@ 801c7cc <iNemoEngine_API_Update+0x474>
 801c7d8:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
 801c7dc:	edd0 5a0b 	vldr	s11, [r0, #44]	@ 0x2c
 801c7e0:	ee37 7a05 	vadd.f32	s14, s14, s10
 801c7e4:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 801c7e8:	ee84 7a07 	vdiv.f32	s14, s8, s14
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	8043      	strh	r3, [r0, #2]
 801c7f0:	ee66 5aa5 	vmul.f32	s11, s13, s11
 801c7f4:	ed8d 7a22 	vstr	s14, [sp, #136]	@ 0x88
 801c7f8:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 801c7fc:	ee26 7a87 	vmul.f32	s14, s13, s14
 801c800:	ee66 6a05 	vmul.f32	s13, s12, s10
 801c804:	ed1f 6a0e 	vldr	s12, [pc, #-56]	@ 801c7d0 <iNemoEngine_API_Update+0x478>
 801c808:	ee24 6a86 	vmul.f32	s12, s9, s12
 801c80c:	eef7 4a08 	vmov.f32	s9, #120	@ 0x3fc00000  1.5
 801c810:	ee25 5a24 	vmul.f32	s10, s10, s9
 801c814:	edcd 7a89 	vstr	s15, [sp, #548]	@ 0x224
 801c818:	edcd 7a8a 	vstr	s15, [sp, #552]	@ 0x228
 801c81c:	edcd 7a8b 	vstr	s15, [sp, #556]	@ 0x22c
 801c820:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 801c824:	4bdd      	ldr	r3, [pc, #884]	@ (801cb9c <iNemoEngine_API_Update+0x844>)
 801c826:	9162      	str	r1, [sp, #392]	@ 0x188
 801c828:	a8f8      	add	r0, sp, #992	@ 0x3e0
 801c82a:	9163      	str	r1, [sp, #396]	@ 0x18c
 801c82c:	9164      	str	r1, [sp, #400]	@ 0x190
 801c82e:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 801c832:	2100      	movs	r1, #0
 801c834:	4605      	mov	r5, r0
 801c836:	9367      	str	r3, [sp, #412]	@ 0x19c
 801c838:	9019      	str	r0, [sp, #100]	@ 0x64
 801c83a:	edcd 5a83 	vstr	s11, [sp, #524]	@ 0x20c
 801c83e:	edcd 5a84 	vstr	s11, [sp, #528]	@ 0x210
 801c842:	edcd 5a85 	vstr	s11, [sp, #532]	@ 0x214
 801c846:	ed8d 7a86 	vstr	s14, [sp, #536]	@ 0x218
 801c84a:	ed8d 7a87 	vstr	s14, [sp, #540]	@ 0x21c
 801c84e:	ed8d 7a88 	vstr	s14, [sp, #544]	@ 0x220
 801c852:	edcd 6a8c 	vstr	s13, [sp, #560]	@ 0x230
 801c856:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 801c85a:	ed8d 5a8e 	vstr	s10, [sp, #568]	@ 0x238
 801c85e:	edcd 7a5f 	vstr	s15, [sp, #380]	@ 0x17c
 801c862:	edcd 7a60 	vstr	s15, [sp, #384]	@ 0x180
 801c866:	edcd 7a61 	vstr	s15, [sp, #388]	@ 0x184
 801c86a:	f004 ff11 	bl	8021690 <memset>
 801c86e:	9b06      	ldr	r3, [sp, #24]
 801c870:	7b5a      	ldrb	r2, [r3, #13]
 801c872:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801c876:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 801c87a:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 801c87e:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 801c882:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 801c886:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 801c88a:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 801c88e:	2a00      	cmp	r2, #0
 801c890:	f001 8124 	beq.w	801dadc <iNemoEngine_API_Update+0x1784>
 801c894:	ed94 8a01 	vldr	s16, [r4, #4]
 801c898:	edd4 8a00 	vldr	s17, [r4]
 801c89c:	ed94 ca02 	vldr	s24, [r4, #8]
 801c8a0:	ee28 9a08 	vmul.f32	s18, s16, s16
 801c8a4:	eef8 7a00 	vmov.f32	s15, #128	@ 0xc0000000 -2.0
 801c8a8:	eea8 9aa8 	vfma.f32	s18, s17, s17
 801c8ac:	ee68 5a27 	vmul.f32	s11, s16, s15
 801c8b0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801c8b4:	ee6c 6a27 	vmul.f32	s13, s24, s15
 801c8b8:	eef1 cac9 	vsqrt.f32	s25, s18
 801c8bc:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 801c8c0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801c8c4:	ee38 6aa8 	vadd.f32	s12, s17, s17
 801c8c8:	ee38 7a08 	vadd.f32	s14, s16, s16
 801c8cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c8ce:	ed94 aa04 	vldr	s20, [r4, #16]
 801c8d2:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 801c8d6:	eef1 7a4a 	vneg.f32	s15, s20
 801c8da:	edd4 9a05 	vldr	s19, [r4, #20]
 801c8de:	edd4 aa03 	vldr	s21, [r4, #12]
 801c8e2:	ed83 5a01 	vstr	s10, [r3, #4]
 801c8e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c8ea:	edc3 5a02 	vstr	s11, [r3, #8]
 801c8ee:	edc3 7a05 	vstr	s15, [r3, #20]
 801c8f2:	eef1 7a69 	vneg.f32	s15, s19
 801c8f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c8fa:	edc3 6a0c 	vstr	s13, [r3, #48]	@ 0x30
 801c8fe:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 801c902:	eef1 7a6a 	vneg.f32	s15, s21
 801c906:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c90a:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 801c90e:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 801c912:	ee79 7aa9 	vadd.f32	s15, s19, s19
 801c916:	ed83 7a18 	vstr	s14, [r3, #96]	@ 0x60
 801c91a:	edc3 7a04 	vstr	s15, [r3, #16]
 801c91e:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 801c922:	2230      	movs	r2, #48	@ 0x30
 801c924:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 801c928:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 801c92c:	2100      	movs	r1, #0
 801c92e:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 801c932:	a88f      	add	r0, sp, #572	@ 0x23c
 801c934:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 801c938:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
 801c93c:	933c      	str	r3, [sp, #240]	@ 0xf0
 801c93e:	f004 fea7 	bl	8021690 <memset>
 801c942:	9a06      	ldr	r2, [sp, #24]
 801c944:	edd2 7a07 	vldr	s15, [r2, #28]
 801c948:	ed92 da06 	vldr	s26, [r2, #24]
 801c94c:	f892 31ac 	ldrb.w	r3, [r2, #428]	@ 0x1ac
 801c950:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801c954:	ee2b da0d 	vmul.f32	s26, s22, s26
 801c958:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 801c95c:	edd2 7a08 	vldr	s15, [r2, #32]
 801c960:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801c964:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
 801c968:	2b00      	cmp	r3, #0
 801c96a:	f043 8025 	bne.w	801f9b8 <iNemoEngine_API_Update+0x3660>
 801c96e:	4613      	mov	r3, r2
 801c970:	f502 6214 	add.w	r2, r2, #2368	@ 0x940
 801c974:	9225      	str	r2, [sp, #148]	@ 0x94
 801c976:	f603 1244 	addw	r2, r3, #2372	@ 0x944
 801c97a:	f603 1348 	addw	r3, r3, #2376	@ 0x948
 801c97e:	9226      	str	r2, [sp, #152]	@ 0x98
 801c980:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c982:	9a06      	ldr	r2, [sp, #24]
 801c984:	f892 3318 	ldrb.w	r3, [r2, #792]	@ 0x318
 801c988:	2b00      	cmp	r3, #0
 801c98a:	f042 84db 	bne.w	801f344 <iNemoEngine_API_Update+0x2fec>
 801c98e:	4613      	mov	r3, r2
 801c990:	f502 6597 	add.w	r5, r2, #1208	@ 0x4b8
 801c994:	f202 47b4 	addw	r7, r2, #1204	@ 0x4b4
 801c998:	f502 66c5 	add.w	r6, r2, #1576	@ 0x628
 801c99c:	f202 6824 	addw	r8, r2, #1572	@ 0x624
 801c9a0:	f203 7394 	addw	r3, r3, #1940	@ 0x794
 801c9a4:	f502 62f3 	add.w	r2, r2, #1944	@ 0x798
 801c9a8:	9215      	str	r2, [sp, #84]	@ 0x54
 801c9aa:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c9ac:	9b06      	ldr	r3, [sp, #24]
 801c9ae:	f503 6213 	add.w	r2, r3, #2352	@ 0x930
 801c9b2:	ed92 6a00 	vldr	s12, [r2]
 801c9b6:	921c      	str	r2, [sp, #112]	@ 0x70
 801c9b8:	f603 1134 	addw	r1, r3, #2356	@ 0x934
 801c9bc:	f603 1038 	addw	r0, r3, #2360	@ 0x938
 801c9c0:	f603 133c 	addw	r3, r3, #2364	@ 0x93c
 801c9c4:	edd3 7a00 	vldr	s15, [r3]
 801c9c8:	edd1 6a00 	vldr	s13, [r1]
 801c9cc:	ed90 7a00 	vldr	s14, [r0]
 801c9d0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c9d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801c9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9da:	911d      	str	r1, [sp, #116]	@ 0x74
 801c9dc:	901e      	str	r0, [sp, #120]	@ 0x78
 801c9de:	ed8d 6a4e 	vstr	s12, [sp, #312]	@ 0x138
 801c9e2:	edcd 6a4f 	vstr	s13, [sp, #316]	@ 0x13c
 801c9e6:	ed8d 7a50 	vstr	s14, [sp, #320]	@ 0x140
 801c9ea:	edcd 7a51 	vstr	s15, [sp, #324]	@ 0x144
 801c9ee:	f04f 0300 	mov.w	r3, #0
 801c9f2:	d13a      	bne.n	801ca6a <iNemoEngine_API_Update+0x712>
 801c9f4:	eef5 6a40 	vcmp.f32	s13, #0.0
 801c9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9fc:	d135      	bne.n	801ca6a <iNemoEngine_API_Update+0x712>
 801c9fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca06:	d130      	bne.n	801ca6a <iNemoEngine_API_Update+0x712>
 801ca08:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ca0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca10:	d12b      	bne.n	801ca6a <iNemoEngine_API_Update+0x712>
 801ca12:	9a06      	ldr	r2, [sp, #24]
 801ca14:	934e      	str	r3, [sp, #312]	@ 0x138
 801ca16:	934f      	str	r3, [sp, #316]	@ 0x13c
 801ca18:	9350      	str	r3, [sp, #320]	@ 0x140
 801ca1a:	4b61      	ldr	r3, [pc, #388]	@ (801cba0 <iNemoEngine_API_Update+0x848>)
 801ca1c:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 801ca20:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801ca24:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
 801ca28:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 801ca2c:	9351      	str	r3, [sp, #324]	@ 0x144
 801ca2e:	2100      	movs	r1, #0
 801ca30:	4613      	mov	r3, r2
 801ca32:	f882 11ac 	strb.w	r1, [r2, #428]	@ 0x1ac
 801ca36:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 801ca3a:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801ca3e:	f004 fe27 	bl	8021690 <memset>
 801ca42:	9a06      	ldr	r2, [sp, #24]
 801ca44:	4b57      	ldr	r3, [pc, #348]	@ (801cba4 <iNemoEngine_API_Update+0x84c>)
 801ca46:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 801ca4a:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
 801ca4e:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
 801ca52:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 801ca56:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
 801ca5a:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
 801ca5e:	f8c2 32c4 	str.w	r3, [r2, #708]	@ 0x2c4
 801ca62:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
 801ca66:	f8c2 3314 	str.w	r3, [r2, #788]	@ 0x314
 801ca6a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801cba8 <iNemoEngine_API_Update+0x850>
 801ca6e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801ca72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca76:	f100 87e0 	bmi.w	801da3a <iNemoEngine_API_Update+0x16e2>
 801ca7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ca7e:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 801ca82:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 801ca86:	eeb0 7ae6 	vabs.f32	s14, s13
 801ca8a:	eef0 6a47 	vmov.f32	s13, s14
 801ca8e:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 801ca92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ca96:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ca9a:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 801ca9e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 801caa2:	edd4 6a00 	vldr	s13, [r4]
 801caa6:	ed94 6a01 	vldr	s12, [r4, #4]
 801caaa:	edcd 6a2c 	vstr	s13, [sp, #176]	@ 0xb0
 801caae:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 801cab2:	4628      	mov	r0, r5
 801cab4:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801cab8:	eea9 7aa9 	vfma.f32	s14, s19, s19
 801cabc:	ee67 6a86 	vmul.f32	s13, s15, s12
 801cac0:	ed8d 6a2d 	vstr	s12, [sp, #180]	@ 0xb4
 801cac4:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 801cba8 <iNemoEngine_API_Update+0x850>
 801cac8:	edcd 6a3e 	vstr	s13, [sp, #248]	@ 0xf8
 801cacc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801cad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cad4:	bf54      	ite	pl
 801cad6:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 801cada:	ed9f 9a34 	vldrmi	s18, [pc, #208]	@ 801cbac <iNemoEngine_API_Update+0x854>
 801cade:	ed94 5a02 	vldr	s10, [r4, #8]
 801cae2:	edd7 3a00 	vldr	s7, [r7]
 801cae6:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 801caea:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 801caee:	ee83 7a09 	vdiv.f32	s14, s6, s18
 801caf2:	ee65 7a27 	vmul.f32	s15, s10, s15
 801caf6:	ee2a 6a07 	vmul.f32	s12, s20, s14
 801cafa:	eeb0 0a63 	vmov.f32	s0, s7
 801cafe:	ee66 6a26 	vmul.f32	s13, s12, s13
 801cb02:	ed8d 6a41 	vstr	s12, [sp, #260]	@ 0x104
 801cb06:	ee2a 6a87 	vmul.f32	s12, s21, s14
 801cb0a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801cb0e:	eee6 6a25 	vfma.f32	s13, s12, s11
 801cb12:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 801cb16:	eee7 6a87 	vfma.f32	s13, s15, s14
 801cb1a:	ed8d 7a42 	vstr	s14, [sp, #264]	@ 0x108
 801cb1e:	edcd 5a3d 	vstr	s11, [sp, #244]	@ 0xf4
 801cb22:	ed8d 6a40 	vstr	s12, [sp, #256]	@ 0x100
 801cb26:	edcd 6a1a 	vstr	s13, [sp, #104]	@ 0x68
 801cb2a:	f7fb fac1 	bl	80180b0 <dataDerivative5>
 801cb2e:	edd8 fa00 	vldr	s31, [r8]
 801cb32:	ed8d 0a18 	vstr	s0, [sp, #96]	@ 0x60
 801cb36:	4630      	mov	r0, r6
 801cb38:	eeb0 0a6f 	vmov.f32	s0, s31
 801cb3c:	f7fb fab8 	bl	80180b0 <dataDerivative5>
 801cb40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cb42:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801cb44:	ed93 fa00 	vldr	s30, [r3]
 801cb48:	eeb0 ba40 	vmov.f32	s22, s0
 801cb4c:	eeb0 0a4f 	vmov.f32	s0, s30
 801cb50:	f7fb faae 	bl	80180b0 <dataDerivative5>
 801cb54:	eec3 7a23 	vdiv.f32	s15, s6, s7
 801cb58:	eef0 da40 	vmov.f32	s27, s0
 801cb5c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801cb60:	ee27 8a88 	vmul.f32	s16, s15, s16
 801cb64:	ee27 ca8c 	vmul.f32	s24, s15, s24
 801cb68:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801cb6c:	eeb0 7ae8 	vabs.f32	s14, s17
 801cb70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb78:	d52c      	bpl.n	801cbd4 <iNemoEngine_API_Update+0x87c>
 801cb7a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cb7e:	eef4 8ae7 	vcmpe.f32	s17, s15
 801cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb86:	f281 8756 	bge.w	801ea36 <iNemoEngine_API_Update+0x26de>
 801cb8a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cb8e:	eef4 8ac7 	vcmpe.f32	s17, s14
 801cb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb96:	f303 80bc 	bgt.w	801fd12 <iNemoEngine_API_Update+0x39ba>
 801cb9a:	e00b      	b.n	801cbb4 <iNemoEngine_API_Update+0x85c>
 801cb9c:	3a9d4952 	.word	0x3a9d4952
 801cba0:	bf666666 	.word	0xbf666666
 801cba4:	40a00000 	.word	0x40a00000
 801cba8:	3c23d70a 	.word	0x3c23d70a
 801cbac:	3dcccccd 	.word	0x3dcccccd
 801cbb0:	4b000000 	.word	0x4b000000
 801cbb4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801cbb8:	ee17 0a90 	vmov	r0, s15
 801cbbc:	f7e3 fcc4 	bl	8000548 <__aeabi_f2d>
 801cbc0:	ec41 0b10 	vmov	d0, r0, r1
 801cbc4:	f005 fddc 	bl	8022780 <ceil>
 801cbc8:	ec51 0b10 	vmov	r0, r1, d0
 801cbcc:	f7e3 ffec 	bl	8000ba8 <__aeabi_d2f>
 801cbd0:	ee08 0a90 	vmov	s17, r0
 801cbd4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801cbd8:	edcd 8a43 	vstr	s17, [sp, #268]	@ 0x10c
 801cbdc:	eeb0 7ac8 	vabs.f32	s14, s16
 801cbe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbe8:	d51f      	bpl.n	801cc2a <iNemoEngine_API_Update+0x8d2>
 801cbea:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cbee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbf6:	f281 870c 	bge.w	801ea12 <iNemoEngine_API_Update+0x26ba>
 801cbfa:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cbfe:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801cc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc06:	f303 8080 	bgt.w	801fd0a <iNemoEngine_API_Update+0x39b2>
 801cc0a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801cc0e:	ee17 0a90 	vmov	r0, s15
 801cc12:	f7e3 fc99 	bl	8000548 <__aeabi_f2d>
 801cc16:	ec41 0b10 	vmov	d0, r0, r1
 801cc1a:	f005 fdb1 	bl	8022780 <ceil>
 801cc1e:	ec51 0b10 	vmov	r0, r1, d0
 801cc22:	f7e3 ffc1 	bl	8000ba8 <__aeabi_d2f>
 801cc26:	ee08 0a10 	vmov	s16, r0
 801cc2a:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801cc2e:	ed8d 8a44 	vstr	s16, [sp, #272]	@ 0x110
 801cc32:	eeb0 7acc 	vabs.f32	s14, s24
 801cc36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc3e:	d51f      	bpl.n	801cc80 <iNemoEngine_API_Update+0x928>
 801cc40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cc44:	eeb4 cae7 	vcmpe.f32	s24, s15
 801cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc4c:	f281 86cf 	bge.w	801e9ee <iNemoEngine_API_Update+0x2696>
 801cc50:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cc54:	eeb4 cac7 	vcmpe.f32	s24, s14
 801cc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc5c:	f303 8065 	bgt.w	801fd2a <iNemoEngine_API_Update+0x39d2>
 801cc60:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801cc64:	ee17 0a90 	vmov	r0, s15
 801cc68:	f7e3 fc6e 	bl	8000548 <__aeabi_f2d>
 801cc6c:	ec41 0b10 	vmov	d0, r0, r1
 801cc70:	f005 fd86 	bl	8022780 <ceil>
 801cc74:	ec51 0b10 	vmov	r0, r1, d0
 801cc78:	f7e3 ff96 	bl	8000ba8 <__aeabi_d2f>
 801cc7c:	ee0c 0a10 	vmov	s24, r0
 801cc80:	9b06      	ldr	r3, [sp, #24]
 801cc82:	ed8d ca45 	vstr	s24, [sp, #276]	@ 0x114
 801cc86:	f893 04b1 	ldrb.w	r0, [r3, #1201]	@ 0x4b1
 801cc8a:	1e43      	subs	r3, r0, #1
 801cc8c:	b25b      	sxtb	r3, r3
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	dd18      	ble.n	801ccc4 <iNemoEngine_API_Update+0x96c>
 801cc92:	9c06      	ldr	r4, [sp, #24]
 801cc94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc98:	1e81      	subs	r1, r0, #2
 801cc9a:	009b      	lsls	r3, r3, #2
 801cc9c:	b2c9      	uxtb	r1, r1
 801cc9e:	f504 6294 	add.w	r2, r4, #1184	@ 0x4a0
 801cca2:	441a      	add	r2, r3
 801cca4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cca8:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 801ccac:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801ccb0:	4423      	add	r3, r4
 801ccb2:	681a      	ldr	r2, [r3, #0]
 801ccb4:	60da      	str	r2, [r3, #12]
 801ccb6:	685a      	ldr	r2, [r3, #4]
 801ccb8:	611a      	str	r2, [r3, #16]
 801ccba:	689a      	ldr	r2, [r3, #8]
 801ccbc:	615a      	str	r2, [r3, #20]
 801ccbe:	3b0c      	subs	r3, #12
 801ccc0:	428b      	cmp	r3, r1
 801ccc2:	d1f6      	bne.n	801ccb2 <iNemoEngine_API_Update+0x95a>
 801ccc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ccc8:	edc5 8a00 	vstr	s17, [r5]
 801cccc:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 801ccd0:	9a06      	ldr	r2, [sp, #24]
 801ccd2:	f202 43bc 	addw	r3, r2, #1212	@ 0x4bc
 801ccd6:	ed83 8a00 	vstr	s16, [r3]
 801ccda:	f502 6398 	add.w	r3, r2, #1216	@ 0x4c0
 801ccde:	ed83 ca00 	vstr	s24, [r3]
 801cce2:	f892 34b0 	ldrb.w	r3, [r2, #1200]	@ 0x4b0
 801cce6:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801ccea:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 801ccee:	3301      	adds	r3, #1
 801ccf0:	b2db      	uxtb	r3, r3
 801ccf2:	eeb0 7ac8 	vabs.f32	s14, s16
 801ccf6:	4298      	cmp	r0, r3
 801ccf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ccfc:	bf28      	it	cs
 801ccfe:	4618      	movcs	r0, r3
 801cd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd04:	ee2a ca28 	vmul.f32	s24, s20, s17
 801cd08:	f882 04b0 	strb.w	r0, [r2, #1200]	@ 0x4b0
 801cd0c:	ee69 8aa8 	vmul.f32	s17, s19, s17
 801cd10:	d51f      	bpl.n	801cd52 <iNemoEngine_API_Update+0x9fa>
 801cd12:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cd16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd1e:	f281 87cb 	bge.w	801ecb8 <iNemoEngine_API_Update+0x2960>
 801cd22:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cd26:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801cd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd2e:	f303 8000 	bgt.w	801fd32 <iNemoEngine_API_Update+0x39da>
 801cd32:	ee78 7a67 	vsub.f32	s15, s16, s15
 801cd36:	ee17 0a90 	vmov	r0, s15
 801cd3a:	f7e3 fc05 	bl	8000548 <__aeabi_f2d>
 801cd3e:	ec41 0b10 	vmov	d0, r0, r1
 801cd42:	f005 fd1d 	bl	8022780 <ceil>
 801cd46:	ec51 0b10 	vmov	r0, r1, d0
 801cd4a:	f7e3 ff2d 	bl	8000ba8 <__aeabi_d2f>
 801cd4e:	ee08 0a10 	vmov	s16, r0
 801cd52:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801cd56:	ed8d 8a43 	vstr	s16, [sp, #268]	@ 0x10c
 801cd5a:	eeb0 7acc 	vabs.f32	s14, s24
 801cd5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd66:	d51f      	bpl.n	801cda8 <iNemoEngine_API_Update+0xa50>
 801cd68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cd6c:	eeb4 cae7 	vcmpe.f32	s24, s15
 801cd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd74:	f281 878e 	bge.w	801ec94 <iNemoEngine_API_Update+0x293c>
 801cd78:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cd7c:	eeb4 cac7 	vcmpe.f32	s24, s14
 801cd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd84:	f302 87cd 	bgt.w	801fd22 <iNemoEngine_API_Update+0x39ca>
 801cd88:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801cd8c:	ee17 0a90 	vmov	r0, s15
 801cd90:	f7e3 fbda 	bl	8000548 <__aeabi_f2d>
 801cd94:	ec41 0b10 	vmov	d0, r0, r1
 801cd98:	f005 fcf2 	bl	8022780 <ceil>
 801cd9c:	ec51 0b10 	vmov	r0, r1, d0
 801cda0:	f7e3 ff02 	bl	8000ba8 <__aeabi_d2f>
 801cda4:	ee0c 0a10 	vmov	s24, r0
 801cda8:	ed5f 7a7f 	vldr	s15, [pc, #-508]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801cdac:	ed8d ca44 	vstr	s24, [sp, #272]	@ 0x110
 801cdb0:	eeb0 7ae8 	vabs.f32	s14, s17
 801cdb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdbc:	d51f      	bpl.n	801cdfe <iNemoEngine_API_Update+0xaa6>
 801cdbe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cdc2:	eef4 8ae7 	vcmpe.f32	s17, s15
 801cdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdca:	f281 8751 	bge.w	801ec70 <iNemoEngine_API_Update+0x2918>
 801cdce:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cdd2:	eef4 8ac7 	vcmpe.f32	s17, s14
 801cdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdda:	f302 878e 	bgt.w	801fcfa <iNemoEngine_API_Update+0x39a2>
 801cdde:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801cde2:	ee17 0a90 	vmov	r0, s15
 801cde6:	f7e3 fbaf 	bl	8000548 <__aeabi_f2d>
 801cdea:	ec41 0b10 	vmov	d0, r0, r1
 801cdee:	f005 fcc7 	bl	8022780 <ceil>
 801cdf2:	ec51 0b10 	vmov	r0, r1, d0
 801cdf6:	f7e3 fed7 	bl	8000ba8 <__aeabi_d2f>
 801cdfa:	ee08 0a90 	vmov	s17, r0
 801cdfe:	9b06      	ldr	r3, [sp, #24]
 801ce00:	edcd 8a45 	vstr	s17, [sp, #276]	@ 0x114
 801ce04:	f893 0621 	ldrb.w	r0, [r3, #1569]	@ 0x621
 801ce08:	1e43      	subs	r3, r0, #1
 801ce0a:	b25b      	sxtb	r3, r3
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	dd18      	ble.n	801ce42 <iNemoEngine_API_Update+0xaea>
 801ce10:	9c06      	ldr	r4, [sp, #24]
 801ce12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce16:	1e81      	subs	r1, r0, #2
 801ce18:	009b      	lsls	r3, r3, #2
 801ce1a:	b2c9      	uxtb	r1, r1
 801ce1c:	f504 62c2 	add.w	r2, r4, #1552	@ 0x610
 801ce20:	441a      	add	r2, r3
 801ce22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce26:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 801ce2a:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801ce2e:	4423      	add	r3, r4
 801ce30:	681a      	ldr	r2, [r3, #0]
 801ce32:	60da      	str	r2, [r3, #12]
 801ce34:	685a      	ldr	r2, [r3, #4]
 801ce36:	611a      	str	r2, [r3, #16]
 801ce38:	689a      	ldr	r2, [r3, #8]
 801ce3a:	615a      	str	r2, [r3, #20]
 801ce3c:	3b0c      	subs	r3, #12
 801ce3e:	4299      	cmp	r1, r3
 801ce40:	d1f6      	bne.n	801ce30 <iNemoEngine_API_Update+0xad8>
 801ce42:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ce46:	ed86 8a00 	vstr	s16, [r6]
 801ce4a:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 801ce4e:	9a06      	ldr	r2, [sp, #24]
 801ce50:	f202 632c 	addw	r3, r2, #1580	@ 0x62c
 801ce54:	ed83 ca00 	vstr	s24, [r3]
 801ce58:	f502 63c6 	add.w	r3, r2, #1584	@ 0x630
 801ce5c:	edc3 8a00 	vstr	s17, [r3]
 801ce60:	f892 3620 	ldrb.w	r3, [r2, #1568]	@ 0x620
 801ce64:	ed5f 7aae 	vldr	s15, [pc, #-696]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801ce68:	ee68 8a0e 	vmul.f32	s17, s16, s28
 801ce6c:	3301      	adds	r3, #1
 801ce6e:	b2db      	uxtb	r3, r3
 801ce70:	eeb0 7ae8 	vabs.f32	s14, s17
 801ce74:	4298      	cmp	r0, r3
 801ce76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ce7a:	bf28      	it	cs
 801ce7c:	4618      	movcs	r0, r3
 801ce7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce82:	ee28 ca2e 	vmul.f32	s24, s16, s29
 801ce86:	f882 0620 	strb.w	r0, [r2, #1568]	@ 0x620
 801ce8a:	ee28 8a2b 	vmul.f32	s16, s16, s23
 801ce8e:	d51f      	bpl.n	801ced0 <iNemoEngine_API_Update+0xb78>
 801ce90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ce94:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ce98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce9c:	f281 86d6 	bge.w	801ec4c <iNemoEngine_API_Update+0x28f4>
 801cea0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cea4:	eef4 8ac7 	vcmpe.f32	s17, s14
 801cea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceac:	f302 8745 	bgt.w	801fd3a <iNemoEngine_API_Update+0x39e2>
 801ceb0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801ceb4:	ee17 0a90 	vmov	r0, s15
 801ceb8:	f7e3 fb46 	bl	8000548 <__aeabi_f2d>
 801cebc:	ec41 0b10 	vmov	d0, r0, r1
 801cec0:	f005 fc5e 	bl	8022780 <ceil>
 801cec4:	ec51 0b10 	vmov	r0, r1, d0
 801cec8:	f7e3 fe6e 	bl	8000ba8 <__aeabi_d2f>
 801cecc:	ee08 0a90 	vmov	s17, r0
 801ced0:	ed5f 7ac9 	vldr	s15, [pc, #-804]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801ced4:	edcd 8a43 	vstr	s17, [sp, #268]	@ 0x10c
 801ced8:	eeb0 7acc 	vabs.f32	s14, s24
 801cedc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cee4:	d51f      	bpl.n	801cf26 <iNemoEngine_API_Update+0xbce>
 801cee6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ceea:	eeb4 cae7 	vcmpe.f32	s24, s15
 801ceee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cef2:	f281 871d 	bge.w	801ed30 <iNemoEngine_API_Update+0x29d8>
 801cef6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cefa:	eeb4 cac7 	vcmpe.f32	s24, s14
 801cefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf02:	f302 86fe 	bgt.w	801fd02 <iNemoEngine_API_Update+0x39aa>
 801cf06:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801cf0a:	ee17 0a90 	vmov	r0, s15
 801cf0e:	f7e3 fb1b 	bl	8000548 <__aeabi_f2d>
 801cf12:	ec41 0b10 	vmov	d0, r0, r1
 801cf16:	f005 fc33 	bl	8022780 <ceil>
 801cf1a:	ec51 0b10 	vmov	r0, r1, d0
 801cf1e:	f7e3 fe43 	bl	8000ba8 <__aeabi_d2f>
 801cf22:	ee0c 0a10 	vmov	s24, r0
 801cf26:	ed5f 7ade 	vldr	s15, [pc, #-888]	@ 801cbb0 <iNemoEngine_API_Update+0x858>
 801cf2a:	ed8d ca44 	vstr	s24, [sp, #272]	@ 0x110
 801cf2e:	eeb0 7ac8 	vabs.f32	s14, s16
 801cf32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf3a:	d51f      	bpl.n	801cf7c <iNemoEngine_API_Update+0xc24>
 801cf3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cf40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cf44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf48:	f281 86c8 	bge.w	801ecdc <iNemoEngine_API_Update+0x2984>
 801cf4c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801cf50:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801cf54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf58:	f302 86df 	bgt.w	801fd1a <iNemoEngine_API_Update+0x39c2>
 801cf5c:	ee78 7a67 	vsub.f32	s15, s16, s15
 801cf60:	ee17 0a90 	vmov	r0, s15
 801cf64:	f7e3 faf0 	bl	8000548 <__aeabi_f2d>
 801cf68:	ec41 0b10 	vmov	d0, r0, r1
 801cf6c:	f005 fc08 	bl	8022780 <ceil>
 801cf70:	ec51 0b10 	vmov	r0, r1, d0
 801cf74:	f7e3 fe18 	bl	8000ba8 <__aeabi_d2f>
 801cf78:	ee08 0a10 	vmov	s16, r0
 801cf7c:	9b06      	ldr	r3, [sp, #24]
 801cf7e:	ed8d 8a45 	vstr	s16, [sp, #276]	@ 0x114
 801cf82:	f893 0791 	ldrb.w	r0, [r3, #1937]	@ 0x791
 801cf86:	1e43      	subs	r3, r0, #1
 801cf88:	b25b      	sxtb	r3, r3
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	dd18      	ble.n	801cfc0 <iNemoEngine_API_Update+0xc68>
 801cf8e:	9c06      	ldr	r4, [sp, #24]
 801cf90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf94:	1e81      	subs	r1, r0, #2
 801cf96:	009b      	lsls	r3, r3, #2
 801cf98:	b2c9      	uxtb	r1, r1
 801cf9a:	f504 62f0 	add.w	r2, r4, #1920	@ 0x780
 801cf9e:	441a      	add	r2, r3
 801cfa0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cfa4:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 801cfa8:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801cfac:	4423      	add	r3, r4
 801cfae:	681a      	ldr	r2, [r3, #0]
 801cfb0:	60da      	str	r2, [r3, #12]
 801cfb2:	685a      	ldr	r2, [r3, #4]
 801cfb4:	611a      	str	r2, [r3, #16]
 801cfb6:	689a      	ldr	r2, [r3, #8]
 801cfb8:	615a      	str	r2, [r3, #20]
 801cfba:	3b0c      	subs	r3, #12
 801cfbc:	428b      	cmp	r3, r1
 801cfbe:	d1f6      	bne.n	801cfae <iNemoEngine_API_Update+0xc56>
 801cfc0:	9c06      	ldr	r4, [sp, #24]
 801cfc2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cfc4:	f204 729c 	addw	r2, r4, #1948	@ 0x79c
 801cfc8:	edc3 8a00 	vstr	s17, [r3]
 801cfcc:	922e      	str	r2, [sp, #184]	@ 0xb8
 801cfce:	ed82 ca00 	vstr	s24, [r2]
 801cfd2:	f504 62f4 	add.w	r2, r4, #1952	@ 0x7a0
 801cfd6:	ed82 8a00 	vstr	s16, [r2]
 801cfda:	f894 3790 	ldrb.w	r3, [r4, #1936]	@ 0x790
 801cfde:	922f      	str	r2, [sp, #188]	@ 0xbc
 801cfe0:	3301      	adds	r3, #1
 801cfe2:	b2db      	uxtb	r3, r3
 801cfe4:	4298      	cmp	r0, r3
 801cfe6:	bf28      	it	cs
 801cfe8:	4618      	movcs	r0, r3
 801cfea:	f884 0790 	strb.w	r0, [r4, #1936]	@ 0x790
 801cfee:	aa68      	add	r2, sp, #416	@ 0x1a0
 801cff0:	a93d      	add	r1, sp, #244	@ 0xf4
 801cff2:	a840      	add	r0, sp, #256	@ 0x100
 801cff4:	f7fb f942 	bl	801827c <getRotationMatrix>
 801cff8:	4623      	mov	r3, r4
 801cffa:	f504 7247 	add.w	r2, r4, #796	@ 0x31c
 801cffe:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d000:	4614      	mov	r4, r2
 801d002:	aeae      	add	r6, sp, #696	@ 0x2b8
 801d004:	f503 774f 	add.w	r7, r3, #828	@ 0x33c
 801d008:	6820      	ldr	r0, [r4, #0]
 801d00a:	6861      	ldr	r1, [r4, #4]
 801d00c:	68a2      	ldr	r2, [r4, #8]
 801d00e:	68e3      	ldr	r3, [r4, #12]
 801d010:	4635      	mov	r5, r6
 801d012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d014:	3410      	adds	r4, #16
 801d016:	42bc      	cmp	r4, r7
 801d018:	462e      	mov	r6, r5
 801d01a:	d1f5      	bne.n	801d008 <iNemoEngine_API_Update+0xcb0>
 801d01c:	6820      	ldr	r0, [r4, #0]
 801d01e:	6028      	str	r0, [r5, #0]
 801d020:	9b06      	ldr	r3, [sp, #24]
 801d022:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 801d026:	ed93 7ac8 	vldr	s14, [r3, #800]	@ 0x320
 801d02a:	eef0 7ae7 	vabs.f32	s15, s15
 801d02e:	eeb0 7ac7 	vabs.f32	s14, s14
 801d032:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d03a:	f140 8543 	bpl.w	801dac4 <iNemoEngine_API_Update+0x176c>
 801d03e:	2604      	movs	r6, #4
 801d040:	2400      	movs	r4, #0
 801d042:	eef0 7a47 	vmov.f32	s15, s14
 801d046:	f04f 0c07 	mov.w	ip, #7
 801d04a:	f04f 0e06 	mov.w	lr, #6
 801d04e:	2103      	movs	r1, #3
 801d050:	4630      	mov	r0, r6
 801d052:	4623      	mov	r3, r4
 801d054:	2701      	movs	r7, #1
 801d056:	9a06      	ldr	r2, [sp, #24]
 801d058:	ed92 7ac9 	vldr	s14, [r2, #804]	@ 0x324
 801d05c:	eeb0 7ac7 	vabs.f32	s14, s14
 801d060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d068:	f340 8525 	ble.w	801dab6 <iNemoEngine_API_Update+0x175e>
 801d06c:	f04f 0c08 	mov.w	ip, #8
 801d070:	2104      	movs	r1, #4
 801d072:	f04f 0906 	mov.w	r9, #6
 801d076:	f04f 0e07 	mov.w	lr, #7
 801d07a:	f04f 0803 	mov.w	r8, #3
 801d07e:	2605      	movs	r6, #5
 801d080:	4660      	mov	r0, ip
 801d082:	460c      	mov	r4, r1
 801d084:	2200      	movs	r2, #0
 801d086:	2301      	movs	r3, #1
 801d088:	2702      	movs	r7, #2
 801d08a:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 801d08c:	442c      	add	r4, r5
 801d08e:	4428      	add	r0, r5
 801d090:	ed90 7a00 	vldr	s14, [r0]
 801d094:	edd4 6a00 	vldr	s13, [r4]
 801d098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d09c:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d09e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801d0a2:	acae      	add	r4, sp, #696	@ 0x2b8
 801d0a4:	adae      	add	r5, sp, #696	@ 0x2b8
 801d0a6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d0aa:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801d0ae:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801d0b2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 801d0b6:	edc0 7a00 	vstr	s15, [r0]
 801d0ba:	edd5 7a00 	vldr	s15, [r5]
 801d0be:	ed94 7a00 	vldr	s14, [r4]
 801d0c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d0c6:	edc4 6a00 	vstr	s13, [r4]
 801d0ca:	ed90 6a00 	vldr	s12, [r0]
 801d0ce:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d0d0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801d0d4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 801d0d8:	ed90 7a00 	vldr	s14, [r0]
 801d0dc:	edd5 7a00 	vldr	s15, [r5]
 801d0e0:	eee6 7a47 	vfms.f32	s15, s12, s14
 801d0e4:	00b4      	lsls	r4, r6, #2
 801d0e6:	9403      	str	r4, [sp, #12]
 801d0e8:	ea4f 048c 	mov.w	r4, ip, lsl #2
 801d0ec:	edc5 7a00 	vstr	s15, [r5]
 801d0f0:	ed90 7a00 	vldr	s14, [r0]
 801d0f4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d0f6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801d0fa:	edd0 7a00 	vldr	s15, [r0]
 801d0fe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801d102:	4626      	mov	r6, r4
 801d104:	acae      	add	r4, sp, #696	@ 0x2b8
 801d106:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 801d10a:	edc0 7a00 	vstr	s15, [r0]
 801d10e:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d110:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 801d114:	edd0 5a00 	vldr	s11, [r0]
 801d118:	ed94 7a00 	vldr	s14, [r4]
 801d11c:	eea6 7a65 	vfms.f32	s14, s12, s11
 801d120:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801d124:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801d128:	eef0 7ae7 	vabs.f32	s15, s15
 801d12c:	ed84 7a00 	vstr	s14, [r4]
 801d130:	ed90 6a00 	vldr	s12, [r0]
 801d134:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d136:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 801d13a:	ed90 7a00 	vldr	s14, [r0]
 801d13e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801d142:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801d146:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801d14a:	ed80 7a00 	vstr	s14, [r0]
 801d14e:	ed95 7a00 	vldr	s14, [r5]
 801d152:	eeb0 7ac7 	vabs.f32	s14, s14
 801d156:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d15e:	ea4f 0581 	mov.w	r5, r1, lsl #2
 801d162:	dd0b      	ble.n	801d17c <iNemoEngine_API_Update+0xe24>
 801d164:	4618      	mov	r0, r3
 801d166:	4645      	mov	r5, r8
 801d168:	4613      	mov	r3, r2
 801d16a:	464c      	mov	r4, r9
 801d16c:	46d4      	mov	ip, sl
 801d16e:	4602      	mov	r2, r0
 801d170:	ea4f 0881 	mov.w	r8, r1, lsl #2
 801d174:	ea4f 098e 	mov.w	r9, lr, lsl #2
 801d178:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 801d17c:	a9ae      	add	r1, sp, #696	@ 0x2b8
 801d17e:	eb01 0008 	add.w	r0, r1, r8
 801d182:	440d      	add	r5, r1
 801d184:	ed90 7a00 	vldr	s14, [r0]
 801d188:	edd5 7a00 	vldr	s15, [r5]
 801d18c:	ee87 4a27 	vdiv.f32	s8, s14, s15
 801d190:	440c      	add	r4, r1
 801d192:	eb01 0809 	add.w	r8, r1, r9
 801d196:	440e      	add	r6, r1
 801d198:	46b6      	mov	lr, r6
 801d19a:	460e      	mov	r6, r1
 801d19c:	9903      	ldr	r1, [sp, #12]
 801d19e:	4431      	add	r1, r6
 801d1a0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801d1a4:	ed80 4a00 	vstr	s8, [r0]
 801d1a8:	ed94 7a00 	vldr	s14, [r4]
 801d1ac:	edd8 7a00 	vldr	s15, [r8]
 801d1b0:	eee4 7a47 	vfms.f32	s15, s8, s14
 801d1b4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d1b6:	edc8 7a00 	vstr	s15, [r8]
 801d1ba:	edd1 2a00 	vldr	s5, [r1]
 801d1be:	ed95 7a00 	vldr	s14, [r5]
 801d1c2:	ed94 1a00 	vldr	s2, [r4]
 801d1c6:	edde 1a00 	vldr	s3, [lr]
 801d1ca:	f50b 61b2 	add.w	r1, fp, #1424	@ 0x590
 801d1ce:	4469      	add	r1, sp
 801d1d0:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 801d1d4:	ee83 2a87 	vdiv.f32	s4, s7, s14
 801d1d8:	ed91 7a00 	vldr	s14, [r1]
 801d1dc:	a9ae      	add	r1, sp, #696	@ 0x2b8
 801d1de:	448b      	add	fp, r1
 801d1e0:	f50c 61b2 	add.w	r1, ip, #1424	@ 0x590
 801d1e4:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 801d1e8:	4469      	add	r1, sp
 801d1ea:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 801d1ee:	4484      	add	ip, r0
 801d1f0:	4450      	add	r0, sl
 801d1f2:	edd1 6a00 	vldr	s13, [r1]
 801d1f6:	eddb 7a00 	vldr	s15, [fp]
 801d1fa:	ed90 0a00 	vldr	s0, [r0]
 801d1fe:	f50a 61b2 	add.w	r1, sl, #1424	@ 0x590
 801d202:	4469      	add	r1, sp
 801d204:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 801d208:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 801d20c:	edd1 4a00 	vldr	s9, [r1]
 801d210:	eddc 7a00 	vldr	s15, [ip]
 801d214:	eee0 4a47 	vfms.f32	s9, s0, s14
 801d218:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 801d21c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 801d220:	eee7 6ac7 	vfms.f32	s13, s15, s14
 801d224:	4601      	mov	r1, r0
 801d226:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 801d22a:	f5a0 7079 	sub.w	r0, r0, #996	@ 0x3e4
 801d22e:	eee4 4a66 	vfms.f32	s9, s8, s13
 801d232:	ed90 5a00 	vldr	s10, [r0]
 801d236:	ee60 4aa4 	vmul.f32	s9, s1, s9
 801d23a:	f50d 60b2 	add.w	r0, sp, #1424	@ 0x590
 801d23e:	eee1 6a64 	vfms.f32	s13, s2, s9
 801d242:	eea1 7ae4 	vfms.f32	s14, s3, s9
 801d246:	ee62 8a26 	vmul.f32	s17, s4, s13
 801d24a:	edd1 6a00 	vldr	s13, [r1]
 801d24e:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 801d252:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d256:	460b      	mov	r3, r1
 801d258:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 801d25c:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 801d260:	edd1 5a00 	vldr	s11, [r1]
 801d264:	ed93 8a00 	vldr	s16, [r3]
 801d268:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801d26c:	f5a1 7279 	sub.w	r2, r1, #996	@ 0x3e4
 801d270:	f5a1 7376 	sub.w	r3, r1, #984	@ 0x3d8
 801d274:	eee7 5ac5 	vfms.f32	s11, s15, s10
 801d278:	eea6 8ae7 	vfms.f32	s16, s13, s15
 801d27c:	ed92 6a00 	vldr	s12, [r2]
 801d280:	edd3 7a00 	vldr	s15, [r3]
 801d284:	eea0 6a45 	vfms.f32	s12, s0, s10
 801d288:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801d28c:	eea4 6a65 	vfms.f32	s12, s8, s11
 801d290:	eee4 7a48 	vfms.f32	s15, s8, s16
 801d294:	ee20 6a86 	vmul.f32	s12, s1, s12
 801d298:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801d29c:	eee1 5a46 	vfms.f32	s11, s2, s12
 801d2a0:	eea7 8ac1 	vfms.f32	s16, s15, s2
 801d2a4:	eea1 5ac6 	vfms.f32	s10, s3, s12
 801d2a8:	eee7 6ae1 	vfms.f32	s13, s15, s3
 801d2ac:	ee62 5a25 	vmul.f32	s11, s4, s11
 801d2b0:	ee28 2a02 	vmul.f32	s4, s16, s4
 801d2b4:	eea2 7ae8 	vfms.f32	s14, s5, s17
 801d2b8:	eee2 6a62 	vfms.f32	s13, s4, s5
 801d2bc:	eea2 5ae5 	vfms.f32	s10, s5, s11
 801d2c0:	ee23 7a07 	vmul.f32	s14, s6, s14
 801d2c4:	ee23 5a05 	vmul.f32	s10, s6, s10
 801d2c8:	ee26 3a83 	vmul.f32	s6, s13, s6
 801d2cc:	ee77 6aa5 	vadd.f32	s13, s15, s11
 801d2d0:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 801d2d4:	ee77 6a66 	vsub.f32	s13, s14, s13
 801d2d8:	ee36 6a42 	vsub.f32	s12, s12, s4
 801d2dc:	eef4 6ac4 	vcmpe.f32	s13, s8
 801d2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2e4:	bfc8      	it	gt
 801d2e6:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 801d2ea:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801d2ee:	bfcc      	ite	gt
 801d2f0:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 801d2f4:	ed9f 4ad7 	vldrle	s8, [pc, #860]	@ 801d654 <iNemoEngine_API_Update+0x12fc>
 801d2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2fc:	f100 8411 	bmi.w	801db22 <iNemoEngine_API_Update+0x17ca>
 801d300:	bfd8      	it	le
 801d302:	ee24 4a06 	vmulle.f32	s8, s8, s12
 801d306:	ee77 6a87 	vadd.f32	s13, s15, s14
 801d30a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801d30e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801d312:	ee24 6a06 	vmul.f32	s12, s8, s12
 801d316:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 801d31a:	eef4 6ac4 	vcmpe.f32	s13, s8
 801d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d322:	bf88      	it	hi
 801d324:	eeb7 4a00 	vmovhi.f32	s8, #112	@ 0x3f800000  1.0
 801d328:	ee33 3a64 	vsub.f32	s6, s6, s9
 801d32c:	bf88      	it	hi
 801d32e:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 801d332:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 801d336:	bf8c      	ite	hi
 801d338:	eef1 6ac4 	vsqrthi.f32	s13, s8
 801d33c:	eddf 6ac5 	vldrls	s13, [pc, #788]	@ 801d654 <iNemoEngine_API_Update+0x12fc>
 801d340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d344:	f100 83ea 	bmi.w	801db1c <iNemoEngine_API_Update+0x17c4>
 801d348:	bfd8      	it	le
 801d34a:	ee66 6a83 	vmulle.f32	s13, s13, s6
 801d34e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d352:	ee38 5ac5 	vsub.f32	s10, s17, s10
 801d356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d35a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d35e:	ee66 6a87 	vmul.f32	s13, s13, s14
 801d362:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801d366:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d36e:	bf84      	itt	hi
 801d370:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 801d374:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 801d378:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d37c:	bf8c      	ite	hi
 801d37e:	eef1 7ac7 	vsqrthi.f32	s15, s14
 801d382:	eddf 7ab4 	vldrls	s15, [pc, #720]	@ 801d654 <iNemoEngine_API_Update+0x12fc>
 801d386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d38a:	f100 83ce 	bmi.w	801db2a <iNemoEngine_API_Update+0x17d2>
 801d38e:	bfd8      	it	le
 801d390:	ee67 7a85 	vmulle.f32	s15, s15, s10
 801d394:	9b06      	ldr	r3, [sp, #24]
 801d396:	f893 2341 	ldrb.w	r2, [r3, #833]	@ 0x341
 801d39a:	1e53      	subs	r3, r2, #1
 801d39c:	b25b      	sxtb	r3, r3
 801d39e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d3a8:	dd1d      	ble.n	801d3e6 <iNemoEngine_API_Update+0x108e>
 801d3aa:	9806      	ldr	r0, [sp, #24]
 801d3ac:	3a02      	subs	r2, #2
 801d3ae:	b2d1      	uxtb	r1, r2
 801d3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801d3b8:	f1a0 010c 	sub.w	r1, r0, #12
 801d3bc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d3c0:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801d3c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801d3c8:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 801d3cc:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
 801d3d0:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 801d3d4:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 801d3d8:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 801d3dc:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 801d3e0:	3b0c      	subs	r3, #12
 801d3e2:	428b      	cmp	r3, r1
 801d3e4:	d1f0      	bne.n	801d3c8 <iNemoEngine_API_Update+0x1070>
 801d3e6:	ed9d 7a07 	vldr	s14, [sp, #28]
 801d3ea:	9b06      	ldr	r3, [sp, #24]
 801d3ec:	9310      	str	r3, [sp, #64]	@ 0x40
 801d3ee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801d3f2:	ee85 7a87 	vdiv.f32	s14, s11, s14
 801d3f6:	aa3d      	add	r2, sp, #244	@ 0xf4
 801d3f8:	922b      	str	r2, [sp, #172]	@ 0xac
 801d3fa:	9212      	str	r2, [sp, #72]	@ 0x48
 801d3fc:	f50d 7be2 	add.w	fp, sp, #452	@ 0x1c4
 801d400:	f50d 7af4 	add.w	sl, sp, #488	@ 0x1e8
 801d404:	ee36 6a06 	vadd.f32	s12, s12, s12
 801d408:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801d40c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d410:	ee26 6a07 	vmul.f32	s12, s12, s14
 801d414:	ee66 6a87 	vmul.f32	s13, s13, s14
 801d418:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d41c:	ed83 6ad2 	vstr	s12, [r3, #840]	@ 0x348
 801d420:	edc3 6ad3 	vstr	s13, [r3, #844]	@ 0x34c
 801d424:	edc3 7ad4 	vstr	s15, [r3, #848]	@ 0x350
 801d428:	2300      	movs	r3, #0
 801d42a:	930e      	str	r3, [sp, #56]	@ 0x38
 801d42c:	f20d 13c3 	addw	r3, sp, #451	@ 0x1c3
 801d430:	f1c3 0301 	rsb	r3, r3, #1
 801d434:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d438:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d43a:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 801d43c:	3301      	adds	r3, #1
 801d43e:	930e      	str	r3, [sp, #56]	@ 0x38
 801d440:	a9ae      	add	r1, sp, #696	@ 0x2b8
 801d442:	f20d 13c3 	addw	r3, sp, #451	@ 0x1c3
 801d446:	18e0      	adds	r0, r4, r3
 801d448:	f803 0f01 	strb.w	r0, [r3, #1]!
 801d44c:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 801d450:	f841 0b04 	str.w	r0, [r1], #4
 801d454:	f20d 10e1 	addw	r0, sp, #481	@ 0x1e1
 801d458:	4283      	cmp	r3, r0
 801d45a:	f102 020c 	add.w	r2, r2, #12
 801d45e:	d1f2      	bne.n	801d446 <iNemoEngine_API_Update+0x10ee>
 801d460:	ed9d 7aae 	vldr	s14, [sp, #696]	@ 0x2b8
 801d464:	eddd 7aaf 	vldr	s15, [sp, #700]	@ 0x2bc
 801d468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d46c:	ed9d 7ab0 	vldr	s14, [sp, #704]	@ 0x2c0
 801d470:	eddd 7ab1 	vldr	s15, [sp, #708]	@ 0x2c4
 801d474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d478:	bf88      	it	hi
 801d47a:	f44f 7381 	movhi.w	r3, #258	@ 0x102
 801d47e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d482:	ed9d 7ab2 	vldr	s14, [sp, #712]	@ 0x2c8
 801d486:	eddd 7ab3 	vldr	s15, [sp, #716]	@ 0x2cc
 801d48a:	bf88      	it	hi
 801d48c:	f8ab 3000 	strhhi.w	r3, [fp]
 801d490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d494:	bf88      	it	hi
 801d496:	f44f 7341 	movhi.w	r3, #772	@ 0x304
 801d49a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d49e:	ed9d 7ab4 	vldr	s14, [sp, #720]	@ 0x2d0
 801d4a2:	eddd 7ab5 	vldr	s15, [sp, #724]	@ 0x2d4
 801d4a6:	bf88      	it	hi
 801d4a8:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 801d4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4b0:	bf88      	it	hi
 801d4b2:	f240 5306 	movwhi	r3, #1286	@ 0x506
 801d4b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d4ba:	ed9d 7ab6 	vldr	s14, [sp, #728]	@ 0x2d8
 801d4be:	eddd 7ab7 	vldr	s15, [sp, #732]	@ 0x2dc
 801d4c2:	bf88      	it	hi
 801d4c4:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 801d4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4cc:	bf88      	it	hi
 801d4ce:	f44f 63e1 	movhi.w	r3, #1800	@ 0x708
 801d4d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d4d6:	ed9d 7ab8 	vldr	s14, [sp, #736]	@ 0x2e0
 801d4da:	eddd 7ab9 	vldr	s15, [sp, #740]	@ 0x2e4
 801d4de:	bf88      	it	hi
 801d4e0:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 801d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4e8:	bf88      	it	hi
 801d4ea:	f640 130a 	movwhi	r3, #2314	@ 0x90a
 801d4ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d4f2:	ed9d 7aba 	vldr	s14, [sp, #744]	@ 0x2e8
 801d4f6:	eddd 7abb 	vldr	s15, [sp, #748]	@ 0x2ec
 801d4fa:	bf88      	it	hi
 801d4fc:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 801d500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d504:	bf88      	it	hi
 801d506:	f640 330c 	movwhi	r3, #2828	@ 0xb0c
 801d50a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d50e:	ed9d 7abc 	vldr	s14, [sp, #752]	@ 0x2f0
 801d512:	eddd 7abd 	vldr	s15, [sp, #756]	@ 0x2f4
 801d516:	bf88      	it	hi
 801d518:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 801d51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d520:	bf88      	it	hi
 801d522:	f640 530e 	movwhi	r3, #3342	@ 0xd0e
 801d526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d52a:	ed9d 7abe 	vldr	s14, [sp, #760]	@ 0x2f8
 801d52e:	eddd 7abf 	vldr	s15, [sp, #764]	@ 0x2fc
 801d532:	bf88      	it	hi
 801d534:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 801d538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d53c:	bf88      	it	hi
 801d53e:	f44f 6371 	movhi.w	r3, #3856	@ 0xf10
 801d542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d546:	ed9d 7ac0 	vldr	s14, [sp, #768]	@ 0x300
 801d54a:	eddd 7ac1 	vldr	s15, [sp, #772]	@ 0x304
 801d54e:	bf88      	it	hi
 801d550:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 801d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d558:	bf88      	it	hi
 801d55a:	f241 1312 	movwhi	r3, #4370	@ 0x1112
 801d55e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d562:	ed9d 7ac2 	vldr	s14, [sp, #776]	@ 0x308
 801d566:	eddd 7ac3 	vldr	s15, [sp, #780]	@ 0x30c
 801d56a:	bf88      	it	hi
 801d56c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 801d570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d574:	bf88      	it	hi
 801d576:	f241 3314 	movwhi	r3, #4884	@ 0x1314
 801d57a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d57e:	bf88      	it	hi
 801d580:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 801d584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d588:	bf84      	itt	hi
 801d58a:	f241 5316 	movwhi	r3, #5398	@ 0x1516
 801d58e:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 801d592:	ed9d 7ac4 	vldr	s14, [sp, #784]	@ 0x310
 801d596:	eddd 7ac5 	vldr	s15, [sp, #788]	@ 0x314
 801d59a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d59e:	ed9d 7ac6 	vldr	s14, [sp, #792]	@ 0x318
 801d5a2:	eddd 7ac7 	vldr	s15, [sp, #796]	@ 0x31c
 801d5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5aa:	bf88      	it	hi
 801d5ac:	f241 7318 	movwhi	r3, #5912	@ 0x1718
 801d5b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d5b4:	ed9d 7ac8 	vldr	s14, [sp, #800]	@ 0x320
 801d5b8:	eddd 7ac9 	vldr	s15, [sp, #804]	@ 0x324
 801d5bc:	bf88      	it	hi
 801d5be:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 801d5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c6:	bf88      	it	hi
 801d5c8:	f641 131a 	movwhi	r3, #6426	@ 0x191a
 801d5cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d5d0:	ed9d 7aca 	vldr	s14, [sp, #808]	@ 0x328
 801d5d4:	eddd 7acb 	vldr	s15, [sp, #812]	@ 0x32c
 801d5d8:	bf88      	it	hi
 801d5da:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 801d5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5e2:	bf88      	it	hi
 801d5e4:	f641 331c 	movwhi	r3, #6940	@ 0x1b1c
 801d5e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d5ec:	bf88      	it	hi
 801d5ee:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 801d5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5f6:	bf84      	itt	hi
 801d5f8:	f641 531e 	movwhi	r3, #7454	@ 0x1d1e
 801d5fc:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 801d600:	221e      	movs	r2, #30
 801d602:	2101      	movs	r1, #1
 801d604:	4650      	mov	r0, sl
 801d606:	f004 f843 	bl	8021690 <memset>
 801d60a:	2304      	movs	r3, #4
 801d60c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d60e:	2302      	movs	r3, #2
 801d610:	9307      	str	r3, [sp, #28]
 801d612:	9a07      	ldr	r2, [sp, #28]
 801d614:	920a      	str	r2, [sp, #40]	@ 0x28
 801d616:	4613      	mov	r3, r2
 801d618:	0052      	lsls	r2, r2, #1
 801d61a:	9207      	str	r2, [sp, #28]
 801d61c:	f103 0901 	add.w	r9, r3, #1
 801d620:	f04f 0801 	mov.w	r8, #1
 801d624:	9b07      	ldr	r3, [sp, #28]
 801d626:	f8cd 800c 	str.w	r8, [sp, #12]
 801d62a:	4443      	add	r3, r8
 801d62c:	2b1f      	cmp	r3, #31
 801d62e:	bfa8      	it	ge
 801d630:	231f      	movge	r3, #31
 801d632:	4642      	mov	r2, r8
 801d634:	1a9f      	subs	r7, r3, r2
 801d636:	2f00      	cmp	r7, #0
 801d638:	4698      	mov	r8, r3
 801d63a:	f109 35ff 	add.w	r5, r9, #4294967295	@ 0xffffffff
 801d63e:	dd54      	ble.n	801d6ea <iNemoEngine_API_Update+0x1392>
 801d640:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801d644:	9304      	str	r3, [sp, #16]
 801d646:	f1a8 0302 	sub.w	r3, r8, #2
 801d64a:	4616      	mov	r6, r2
 801d64c:	2400      	movs	r4, #0
 801d64e:	9305      	str	r3, [sp, #20]
 801d650:	e00f      	b.n	801d672 <iNemoEngine_API_Update+0x131a>
 801d652:	bf00      	nop
 801d654:	00000000 	.word	0x00000000
 801d658:	3f333333 	.word	0x3f333333
 801d65c:	3f4ccccd 	.word	0x3f4ccccd
 801d660:	45f0      	cmp	r8, lr
 801d662:	f80a 2004 	strb.w	r2, [sl, r4]
 801d666:	f000 81f6 	beq.w	801da56 <iNemoEngine_API_Update+0x16fe>
 801d66a:	4665      	mov	r5, ip
 801d66c:	3401      	adds	r4, #1
 801d66e:	42a7      	cmp	r7, r4
 801d670:	dd34      	ble.n	801d6dc <iNemoEngine_API_Update+0x1384>
 801d672:	1e71      	subs	r1, r6, #1
 801d674:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d676:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 801d67a:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 801d67e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801d682:	ed10 7a01 	vldr	s14, [r0, #-4]
 801d686:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801d688:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801d68c:	ed50 7a01 	vldr	s15, [r0, #-4]
 801d690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d698:	f105 0e02 	add.w	lr, r5, #2
 801d69c:	f105 0c01 	add.w	ip, r5, #1
 801d6a0:	d8de      	bhi.n	801d660 <iNemoEngine_API_Update+0x1308>
 801d6a2:	3601      	adds	r6, #1
 801d6a4:	454e      	cmp	r6, r9
 801d6a6:	f80a 3004 	strb.w	r3, [sl, r4]
 801d6aa:	d1df      	bne.n	801d66c <iNemoEngine_API_Update+0x1314>
 801d6ac:	1c6b      	adds	r3, r5, #1
 801d6ae:	9a04      	ldr	r2, [sp, #16]
 801d6b0:	9308      	str	r3, [sp, #32]
 801d6b2:	1c60      	adds	r0, r4, #1
 801d6b4:	4598      	cmp	r8, r3
 801d6b6:	eba2 0205 	sub.w	r2, r2, r5
 801d6ba:	4450      	add	r0, sl
 801d6bc:	ddd6      	ble.n	801d66c <iNemoEngine_API_Update+0x1314>
 801d6be:	eb0b 0105 	add.w	r1, fp, r5
 801d6c2:	f004 f819 	bl	80216f8 <memcpy>
 801d6c6:	9a04      	ldr	r2, [sp, #16]
 801d6c8:	9b05      	ldr	r3, [sp, #20]
 801d6ca:	4414      	add	r4, r2
 801d6cc:	1b64      	subs	r4, r4, r5
 801d6ce:	1b5a      	subs	r2, r3, r5
 801d6d0:	3401      	adds	r4, #1
 801d6d2:	9b08      	ldr	r3, [sp, #32]
 801d6d4:	42a7      	cmp	r7, r4
 801d6d6:	eb02 0503 	add.w	r5, r2, r3
 801d6da:	dcca      	bgt.n	801d672 <iNemoEngine_API_Update+0x131a>
 801d6dc:	9b03      	ldr	r3, [sp, #12]
 801d6de:	1e58      	subs	r0, r3, #1
 801d6e0:	463a      	mov	r2, r7
 801d6e2:	4458      	add	r0, fp
 801d6e4:	4651      	mov	r1, sl
 801d6e6:	f004 f807 	bl	80216f8 <memcpy>
 801d6ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6ec:	eb08 0903 	add.w	r9, r8, r3
 801d6f0:	f1b9 0f1e 	cmp.w	r9, #30
 801d6f4:	dd96      	ble.n	801d624 <iNemoEngine_API_Update+0x12cc>
 801d6f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d6f8:	3b01      	subs	r3, #1
 801d6fa:	930c      	str	r3, [sp, #48]	@ 0x30
 801d6fc:	d189      	bne.n	801d612 <iNemoEngine_API_Update+0x12ba>
 801d6fe:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 801d702:	aaae      	add	r2, sp, #696	@ 0x2b8
 801d704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d708:	ed53 7a01 	vldr	s15, [r3, #-4]
 801d70c:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 801d710:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d714:	ed13 7a01 	vldr	s14, [r3, #-4]
 801d718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d720:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d724:	bf4c      	ite	mi
 801d726:	2201      	movmi	r2, #1
 801d728:	2200      	movpl	r2, #0
 801d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d72e:	bf4c      	ite	mi
 801d730:	2301      	movmi	r3, #1
 801d732:	2300      	movpl	r3, #0
 801d734:	429a      	cmp	r2, r3
 801d736:	f000 819d 	beq.w	801da74 <iNemoEngine_API_Update+0x171c>
 801d73a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d73e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d742:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d748:	ece3 7a01 	vstmia	r3!, {s15}
 801d74c:	9312      	str	r3, [sp, #72]	@ 0x48
 801d74e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d750:	3304      	adds	r3, #4
 801d752:	9310      	str	r3, [sp, #64]	@ 0x40
 801d754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d756:	2b03      	cmp	r3, #3
 801d758:	f47f ae6d 	bne.w	801d436 <iNemoEngine_API_Update+0x10de>
 801d75c:	eddd 7a3e 	vldr	s15, [sp, #248]	@ 0xf8
 801d760:	ed9d 7a3d 	vldr	s14, [sp, #244]	@ 0xf4
 801d764:	eddd 6a16 	vldr	s13, [sp, #88]	@ 0x58
 801d768:	ed1f 1a45 	vldr	s2, [pc, #-276]	@ 801d658 <iNemoEngine_API_Update+0x1300>
 801d76c:	9a06      	ldr	r2, [sp, #24]
 801d76e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801d772:	ee2d 1a81 	vmul.f32	s2, s27, s2
 801d776:	eee7 7a07 	vfma.f32	s15, s14, s14
 801d77a:	f892 3900 	ldrb.w	r3, [r2, #2304]	@ 0x900
 801d77e:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 801d782:	eeb0 8a67 	vmov.f32	s16, s15
 801d786:	eddd 7a3f 	vldr	s15, [sp, #252]	@ 0xfc
 801d78a:	eea7 8aa7 	vfma.f32	s16, s15, s15
 801d78e:	f502 6810 	add.w	r8, r2, #2304	@ 0x900
 801d792:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801d796:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d79a:	eeb1 6ac8 	vsqrt.f32	s12, s16
 801d79e:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 801d7a2:	ee2b 7a27 	vmul.f32	s14, s22, s15
 801d7a6:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 801d7aa:	eec7 6a26 	vdiv.f32	s13, s14, s13
 801d7ae:	ed9d 7a17 	vldr	s14, [sp, #92]	@ 0x5c
 801d7b2:	edcd 5a52 	vstr	s11, [sp, #328]	@ 0x148
 801d7b6:	ee87 5a87 	vdiv.f32	s10, s15, s14
 801d7ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d7be:	eeb0 7a41 	vmov.f32	s14, s2
 801d7c2:	eeab 7a27 	vfma.f32	s14, s22, s15
 801d7c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 801d7ca:	ed5f 7a5c 	vldr	s15, [pc, #-368]	@ 801d65c <iNemoEngine_API_Update+0x1304>
 801d7ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 801d7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7d6:	edcd 6a53 	vstr	s13, [sp, #332]	@ 0x14c
 801d7da:	ed8d 5a54 	vstr	s10, [sp, #336]	@ 0x150
 801d7de:	ed8d 6a55 	vstr	s12, [sp, #340]	@ 0x154
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	f040 8159 	bne.w	801da9a <iNemoEngine_API_Update+0x1742>
 801d7e8:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 801d7ec:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
 801d7f0:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 801d7f4:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
 801d7f8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801d7fc:	f8c8 3024 	str.w	r3, [r8, #36]	@ 0x24
 801d800:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801d804:	f8c8 3020 	str.w	r3, [r8, #32]
 801d808:	edc8 7a07 	vstr	s15, [r8, #28]
 801d80c:	f602 130c 	addw	r3, r2, #2316	@ 0x90c
 801d810:	edd3 8a00 	vldr	s17, [r3]
 801d814:	edd2 2a02 	vldr	s5, [r2, #8]
 801d818:	f602 1324 	addw	r3, r2, #2340	@ 0x924
 801d81c:	edd3 7a00 	vldr	s15, [r3]
 801d820:	f602 1308 	addw	r3, r2, #2312	@ 0x908
 801d824:	ed93 7a00 	vldr	s14, [r3]
 801d828:	f502 6312 	add.w	r3, r2, #2336	@ 0x920
 801d82c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801d830:	edd3 7a00 	vldr	s15, [r3]
 801d834:	f502 6311 	add.w	r3, r2, #2320	@ 0x910
 801d838:	eee7 8a27 	vfma.f32	s17, s14, s15
 801d83c:	ed93 7a00 	vldr	s14, [r3]
 801d840:	f602 1328 	addw	r3, r2, #2344	@ 0x928
 801d844:	edd3 7a00 	vldr	s15, [r3]
 801d848:	f602 1314 	addw	r3, r2, #2324	@ 0x914
 801d84c:	eee7 8a27 	vfma.f32	s17, s14, s15
 801d850:	ed93 7a00 	vldr	s14, [r3]
 801d854:	f602 132c 	addw	r3, r2, #2348	@ 0x92c
 801d858:	edd3 7a00 	vldr	s15, [r3]
 801d85c:	f602 1304 	addw	r3, r2, #2308	@ 0x904
 801d860:	eee7 8a27 	vfma.f32	s17, s14, s15
 801d864:	ed93 7a00 	vldr	s14, [r3]
 801d868:	f602 131c 	addw	r3, r2, #2332	@ 0x91c
 801d86c:	edd3 7a00 	vldr	s15, [r3]
 801d870:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d878:	eee7 8a27 	vfma.f32	s17, s14, s15
 801d87c:	f340 8158 	ble.w	801db30 <iNemoEngine_API_Update+0x17d8>
 801d880:	edd2 7a30 	vldr	s15, [r2, #192]	@ 0xc0
 801d884:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d88c:	f101 8112 	bmi.w	801eab4 <iNemoEngine_API_Update+0x275c>
 801d890:	ed92 fa31 	vldr	s30, [r2, #196]	@ 0xc4
 801d894:	4613      	mov	r3, r2
 801d896:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 801d89a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a2:	f142 8186 	bpl.w	801fbb2 <iNemoEngine_API_Update+0x385a>
 801d8a6:	edd3 4a62 	vldr	s9, [r3, #392]	@ 0x188
 801d8aa:	eef4 4ae8 	vcmpe.f32	s9, s17
 801d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8b2:	f342 821e 	ble.w	801fcf2 <iNemoEngine_API_Update+0x399a>
 801d8b6:	ed93 7a4c 	vldr	s14, [r3, #304]	@ 0x130
 801d8ba:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8c2:	f302 8555 	bgt.w	8020370 <iNemoEngine_API_Update+0x4018>
 801d8c6:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 801d8ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 801d8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8d2:	f142 8565 	bpl.w	80203a0 <iNemoEngine_API_Update+0x4048>
 801d8d6:	edd3 3a4d 	vldr	s7, [r3, #308]	@ 0x134
 801d8da:	ed93 4a4f 	vldr	s8, [r3, #316]	@ 0x13c
 801d8de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d8e2:	ee34 4a63 	vsub.f32	s8, s8, s7
 801d8e6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801d8ea:	ee24 7a07 	vmul.f32	s14, s8, s14
 801d8ee:	ee87 ca27 	vdiv.f32	s24, s14, s15
 801d8f2:	ee3c ca23 	vadd.f32	s24, s24, s7
 801d8f6:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801d8fa:	eef4 8ae7 	vcmpe.f32	s17, s15
 801d8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d902:	f2c2 8566 	blt.w	80203d2 <iNemoEngine_API_Update+0x407a>
 801d906:	9b06      	ldr	r3, [sp, #24]
 801d908:	ed93 7a52 	vldr	s14, [r3, #328]	@ 0x148
 801d90c:	eef4 8ac7 	vcmpe.f32	s17, s14
 801d910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d914:	f142 87a3 	bpl.w	802085e <iNemoEngine_API_Update+0x4506>
 801d918:	edd3 3a51 	vldr	s7, [r3, #324]	@ 0x144
 801d91c:	ed93 4a53 	vldr	s8, [r3, #332]	@ 0x14c
 801d920:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d924:	ee34 4a63 	vsub.f32	s8, s8, s7
 801d928:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801d92c:	ee64 7a27 	vmul.f32	s15, s8, s15
 801d930:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801d934:	ee3c ca23 	vadd.f32	s24, s24, s7
 801d938:	9b06      	ldr	r3, [sp, #24]
 801d93a:	edd3 7a54 	vldr	s15, [r3, #336]	@ 0x150
 801d93e:	eef4 8ae7 	vcmpe.f32	s17, s15
 801d942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d946:	f2c2 8566 	blt.w	8020416 <iNemoEngine_API_Update+0x40be>
 801d94a:	9b06      	ldr	r3, [sp, #24]
 801d94c:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 801d950:	eef4 8ac7 	vcmpe.f32	s17, s14
 801d954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d958:	f142 87dc 	bpl.w	8020914 <iNemoEngine_API_Update+0x45bc>
 801d95c:	edd3 3a55 	vldr	s7, [r3, #340]	@ 0x154
 801d960:	ed93 4a57 	vldr	s8, [r3, #348]	@ 0x15c
 801d964:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d968:	ee34 4a63 	vsub.f32	s8, s8, s7
 801d96c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801d970:	ee64 7a27 	vmul.f32	s15, s8, s15
 801d974:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801d978:	ee3c ca23 	vadd.f32	s24, s24, s7
 801d97c:	9b06      	ldr	r3, [sp, #24]
 801d97e:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 801d982:	eef4 8ae7 	vcmpe.f32	s17, s15
 801d986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d98a:	f2c2 8566 	blt.w	802045a <iNemoEngine_API_Update+0x4102>
 801d98e:	9b06      	ldr	r3, [sp, #24]
 801d990:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 801d994:	eef4 8ac7 	vcmpe.f32	s17, s14
 801d998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d99c:	f142 87c5 	bpl.w	802092a <iNemoEngine_API_Update+0x45d2>
 801d9a0:	edd3 3a59 	vldr	s7, [r3, #356]	@ 0x164
 801d9a4:	ed93 4a5b 	vldr	s8, [r3, #364]	@ 0x16c
 801d9a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d9ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 801d9b0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801d9b4:	ee64 7a27 	vmul.f32	s15, s8, s15
 801d9b8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801d9bc:	ee3c ca23 	vadd.f32	s24, s24, s7
 801d9c0:	9b06      	ldr	r3, [sp, #24]
 801d9c2:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 801d9c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 801d9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9ce:	f2c2 8566 	blt.w	802049e <iNemoEngine_API_Update+0x4146>
 801d9d2:	9b06      	ldr	r3, [sp, #24]
 801d9d4:	ed93 7a5e 	vldr	s14, [r3, #376]	@ 0x178
 801d9d8:	eef4 8ac7 	vcmpe.f32	s17, s14
 801d9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9e0:	f142 8795 	bpl.w	802090e <iNemoEngine_API_Update+0x45b6>
 801d9e4:	edd3 3a5d 	vldr	s7, [r3, #372]	@ 0x174
 801d9e8:	ed93 4a5f 	vldr	s8, [r3, #380]	@ 0x17c
 801d9ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d9f0:	ee34 4a63 	vsub.f32	s8, s8, s7
 801d9f4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801d9f8:	ee64 7a27 	vmul.f32	s15, s8, s15
 801d9fc:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801da00:	ee3c ca23 	vadd.f32	s24, s24, s7
 801da04:	9b06      	ldr	r3, [sp, #24]
 801da06:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 801da0a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801da0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da12:	f2c0 8092 	blt.w	801db3a <iNemoEngine_API_Update+0x17e2>
 801da16:	9b06      	ldr	r3, [sp, #24]
 801da18:	ed93 4a61 	vldr	s8, [r3, #388]	@ 0x184
 801da1c:	ed93 7a63 	vldr	s14, [r3, #396]	@ 0x18c
 801da20:	ee74 4ae7 	vsub.f32	s9, s9, s15
 801da24:	ee37 7a44 	vsub.f32	s14, s14, s8
 801da28:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801da2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da30:	ee87 caa4 	vdiv.f32	s24, s15, s9
 801da34:	ee3c ca04 	vadd.f32	s24, s24, s8
 801da38:	e07f      	b.n	801db3a <iNemoEngine_API_Update+0x17e2>
 801da3a:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 801dd84 <iNemoEngine_API_Update+0x1a2c>
 801da3e:	eddf cad2 	vldr	s25, [pc, #840]	@ 801dd88 <iNemoEngine_API_Update+0x1a30>
 801da42:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 801da46:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 801dd8c <iNemoEngine_API_Update+0x1a34>
 801da4a:	edcd 7a23 	vstr	s15, [sp, #140]	@ 0x8c
 801da4e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801da52:	f7ff b824 	b.w	801ca9e <iNemoEngine_API_Update+0x746>
 801da56:	1c60      	adds	r0, r4, #1
 801da58:	454e      	cmp	r6, r9
 801da5a:	4459      	add	r1, fp
 801da5c:	4450      	add	r0, sl
 801da5e:	4665      	mov	r5, ip
 801da60:	f6bf ae04 	bge.w	801d66c <iNemoEngine_API_Update+0x1314>
 801da64:	eba9 0206 	sub.w	r2, r9, r6
 801da68:	444c      	add	r4, r9
 801da6a:	1ba4      	subs	r4, r4, r6
 801da6c:	f003 fe44 	bl	80216f8 <memcpy>
 801da70:	464e      	mov	r6, r9
 801da72:	e5fb      	b.n	801d66c <iNemoEngine_API_Update+0x1314>
 801da74:	eef5 7a40 	vcmp.f32	s15, #0.0
 801da78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da7c:	f43f ae5d 	beq.w	801d73a <iNemoEngine_API_Update+0x13e2>
 801da80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da88:	f43f ae57 	beq.w	801d73a <iNemoEngine_API_Update+0x13e2>
 801da8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801da90:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801da94:	eee7 7a26 	vfma.f32	s15, s14, s13
 801da98:	e655      	b.n	801d746 <iNemoEngine_API_Update+0x13ee>
 801da9a:	2300      	movs	r3, #0
 801da9c:	f882 3900 	strb.w	r3, [r2, #2304]	@ 0x900
 801daa0:	edc8 7a07 	vstr	s15, [r8, #28]
 801daa4:	edc8 7a08 	vstr	s15, [r8, #32]
 801daa8:	edc8 7a09 	vstr	s15, [r8, #36]	@ 0x24
 801daac:	edc8 7a0a 	vstr	s15, [r8, #40]	@ 0x28
 801dab0:	edc8 7a0b 	vstr	s15, [r8, #44]	@ 0x2c
 801dab4:	e6aa      	b.n	801d80c <iNemoEngine_API_Update+0x14b4>
 801dab6:	f04f 0908 	mov.w	r9, #8
 801daba:	f04f 0805 	mov.w	r8, #5
 801dabe:	2202      	movs	r2, #2
 801dac0:	f7ff bae3 	b.w	801d08a <iNemoEngine_API_Update+0xd32>
 801dac4:	2104      	movs	r1, #4
 801dac6:	2000      	movs	r0, #0
 801dac8:	f04f 0c06 	mov.w	ip, #6
 801dacc:	f04f 0e07 	mov.w	lr, #7
 801dad0:	2603      	movs	r6, #3
 801dad2:	460c      	mov	r4, r1
 801dad4:	2301      	movs	r3, #1
 801dad6:	4607      	mov	r7, r0
 801dad8:	f7ff babd 	b.w	801d056 <iNemoEngine_API_Update+0xcfe>
 801dadc:	ed9f 5aac 	vldr	s10, [pc, #688]	@ 801dd90 <iNemoEngine_API_Update+0x1a38>
 801dae0:	ed9f 8aac 	vldr	s16, [pc, #688]	@ 801dd94 <iNemoEngine_API_Update+0x1a3c>
 801dae4:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 801ddc4 <iNemoEngine_API_Update+0x1a6c>
 801dae8:	eddf 6aab 	vldr	s13, [pc, #684]	@ 801dd98 <iNemoEngine_API_Update+0x1a40>
 801daec:	ed84 5a00 	vstr	s10, [r4]
 801daf0:	eef0 7a45 	vmov.f32	s15, s10
 801daf4:	eeb0 6a45 	vmov.f32	s12, s10
 801daf8:	eddf caa8 	vldr	s25, [pc, #672]	@ 801dd9c <iNemoEngine_API_Update+0x1a44>
 801dafc:	ed9f 9aa8 	vldr	s18, [pc, #672]	@ 801dda0 <iNemoEngine_API_Update+0x1a48>
 801db00:	ed84 8a01 	vstr	s16, [r4, #4]
 801db04:	eef0 5a66 	vmov.f32	s11, s13
 801db08:	ed84 8a02 	vstr	s16, [r4, #8]
 801db0c:	eeb0 5a47 	vmov.f32	s10, s14
 801db10:	eef0 8a67 	vmov.f32	s17, s15
 801db14:	eeb0 ca48 	vmov.f32	s24, s16
 801db18:	f7fe bed8 	b.w	801c8cc <iNemoEngine_API_Update+0x574>
 801db1c:	eef1 6a66 	vneg.f32	s13, s13
 801db20:	e415      	b.n	801d34e <iNemoEngine_API_Update+0xff6>
 801db22:	eeb1 4a44 	vneg.f32	s8, s8
 801db26:	f7ff bbee 	b.w	801d306 <iNemoEngine_API_Update+0xfae>
 801db2a:	eef1 7a67 	vneg.f32	s15, s15
 801db2e:	e431      	b.n	801d394 <iNemoEngine_API_Update+0x103c>
 801db30:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 801db34:	eeb0 fa4c 	vmov.f32	s30, s24
 801db38:	4613      	mov	r3, r2
 801db3a:	edd3 fa74 	vldr	s31, [r3, #464]	@ 0x1d0
 801db3e:	ed93 7a72 	vldr	s14, [r3, #456]	@ 0x1c8
 801db42:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 801db46:	eddf 4a90 	vldr	s9, [pc, #576]	@ 801dd88 <iNemoEngine_API_Update+0x1a30>
 801db4a:	ee7c faef 	vsub.f32	s31, s25, s31
 801db4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801db52:	eef0 faef 	vabs.f32	s31, s31
 801db56:	eef0 7ae7 	vabs.f32	s15, s15
 801db5a:	ee77 7aaf 	vadd.f32	s15, s15, s31
 801db5e:	eef4 7ae4 	vcmpe.f32	s15, s9
 801db62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db66:	dd0a      	ble.n	801db7e <iNemoEngine_API_Update+0x1826>
 801db68:	ed9f 4a8e 	vldr	s8, [pc, #568]	@ 801dda4 <iNemoEngine_API_Update+0x1a4c>
 801db6c:	eef4 7ac4 	vcmpe.f32	s15, s8
 801db70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db74:	f340 8790 	ble.w	801ea98 <iNemoEngine_API_Update+0x2740>
 801db78:	eef1 4a04 	vmov.f32	s9, #20	@ 0x40a00000  5.0
 801db7c:	e001      	b.n	801db82 <iNemoEngine_API_Update+0x182a>
 801db7e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801db82:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 801db86:	781c      	ldrb	r4, [r3, #0]
 801db88:	eef4 4ae7 	vcmpe.f32	s9, s15
 801db8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db90:	bfa8      	it	ge
 801db92:	eef0 7a64 	vmovge.f32	s15, s9
 801db96:	edcd 7a04 	vstr	s15, [sp, #16]
 801db9a:	b1cc      	cbz	r4, 801dbd0 <iNemoEngine_API_Update+0x1878>
 801db9c:	785c      	ldrb	r4, [r3, #1]
 801db9e:	2c00      	cmp	r4, #0
 801dba0:	f040 8774 	bne.w	801ea8c <iNemoEngine_API_Update+0x2734>
 801dba4:	ee75 7aa6 	vadd.f32	s15, s11, s13
 801dba8:	edd3 6a05 	vldr	s13, [r3, #20]
 801dbac:	ee75 7a27 	vadd.f32	s15, s10, s15
 801dbb0:	ee76 7a27 	vadd.f32	s15, s12, s15
 801dbb4:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801dbb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 801dbbc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801dbc0:	ee66 6a86 	vmul.f32	s13, s13, s12
 801dbc4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801dbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbcc:	f102 848b 	bmi.w	80204e6 <iNemoEngine_API_Update+0x418e>
 801dbd0:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 801dbd4:	461a      	mov	r2, r3
 801dbd6:	eddd 6a1a 	vldr	s13, [sp, #104]	@ 0x68
 801dbda:	ed9d 6a50 	vldr	s12, [sp, #320]	@ 0x140
 801dbde:	edcd 6a98 	vstr	s13, [sp, #608]	@ 0x260
 801dbe2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801dbe6:	eef0 6a65 	vmov.f32	s13, s11
 801dbea:	eee7 6a47 	vfms.f32	s13, s14, s14
 801dbee:	2300      	movs	r3, #0
 801dbf0:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
 801dbf4:	ed9d 5a4e 	vldr	s10, [sp, #312]	@ 0x138
 801dbf8:	eddd 4a4f 	vldr	s9, [sp, #316]	@ 0x13c
 801dbfc:	eddd 0a51 	vldr	s1, [sp, #324]	@ 0x144
 801dc00:	ed8d 7a45 	vstr	s14, [sp, #276]	@ 0x114
 801dc04:	ee26 4a06 	vmul.f32	s8, s12, s12
 801dc08:	ee25 2a05 	vmul.f32	s4, s10, s10
 801dc0c:	ee34 4a04 	vadd.f32	s8, s8, s8
 801dc10:	eeb1 3ae6 	vsqrt.f32	s6, s13
 801dc14:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
 801dc18:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
 801dc1c:	9343      	str	r3, [sp, #268]	@ 0x10c
 801dc1e:	ee64 3a86 	vmul.f32	s7, s9, s12
 801dc22:	ee25 0a24 	vmul.f32	s0, s10, s9
 801dc26:	ee64 1aa4 	vmul.f32	s3, s9, s9
 801dc2a:	ee64 6aa0 	vmul.f32	s13, s9, s1
 801dc2e:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 801dc32:	eea2 4a24 	vfma.f32	s8, s4, s9
 801dc36:	ee73 3aa3 	vadd.f32	s7, s7, s7
 801dc3a:	ee35 1ac4 	vsub.f32	s2, s11, s8
 801dc3e:	ee25 4a06 	vmul.f32	s8, s10, s12
 801dc42:	ee26 6a20 	vmul.f32	s12, s12, s1
 801dc46:	ee71 1aa1 	vadd.f32	s3, s3, s3
 801dc4a:	ee30 6a06 	vadd.f32	s12, s0, s12
 801dc4e:	ee25 5a20 	vmul.f32	s10, s10, s1
 801dc52:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801dc56:	eee2 1a24 	vfma.f32	s3, s4, s9
 801dc5a:	ee36 2a06 	vadd.f32	s4, s12, s12
 801dc5e:	eeb0 6a63 	vmov.f32	s12, s7
 801dc62:	eea5 6a24 	vfma.f32	s12, s10, s9
 801dc66:	eee5 3a64 	vfms.f32	s7, s10, s9
 801dc6a:	eeb0 5a66 	vmov.f32	s10, s13
 801dc6e:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 801dc72:	ee94 5a24 	vfnms.f32	s10, s8, s9
 801dc76:	eee4 6a64 	vfms.f32	s13, s8, s9
 801dc7a:	ee25 5a07 	vmul.f32	s10, s10, s14
 801dc7e:	edcd 6a3d 	vstr	s13, [sp, #244]	@ 0xf4
 801dc82:	edcd 6a92 	vstr	s13, [sp, #584]	@ 0x248
 801dc86:	ee75 6ae1 	vsub.f32	s13, s11, s3
 801dc8a:	ee79 5ae5 	vsub.f32	s11, s19, s11
 801dc8e:	ee66 6a87 	vmul.f32	s13, s13, s14
 801dc92:	ee75 1aa1 	vadd.f32	s3, s11, s3
 801dc96:	eee3 6a23 	vfma.f32	s13, s6, s7
 801dc9a:	ee26 7a07 	vmul.f32	s14, s12, s14
 801dc9e:	eddd 5a2a 	vldr	s11, [sp, #168]	@ 0xa8
 801dca2:	eddd 4a2c 	vldr	s9, [sp, #176]	@ 0xb0
 801dca6:	ed8d 9a99 	vstr	s18, [sp, #612]	@ 0x264
 801dcaa:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801dcae:	eea3 7a01 	vfma.f32	s14, s6, s2
 801dcb2:	edcd 6a91 	vstr	s13, [sp, #580]	@ 0x244
 801dcb6:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 801dcba:	edcd ca9a 	vstr	s25, [sp, #616]	@ 0x268
 801dcbe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801dcc2:	eea3 5a02 	vfma.f32	s10, s6, s4
 801dcc6:	ed8d 7a90 	vstr	s14, [sp, #576]	@ 0x240
 801dcca:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801ddd8 <iNemoEngine_API_Update+0x1a80>
 801dcce:	ed8d 3a44 	vstr	s6, [sp, #272]	@ 0x110
 801dcd2:	ee3a 6a46 	vsub.f32	s12, s20, s12
 801dcd6:	ee34 5ac5 	vsub.f32	s10, s9, s10
 801dcda:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dce2:	ed8d 5a8f 	vstr	s10, [sp, #572]	@ 0x23c
 801dce6:	edcd 1a3f 	vstr	s3, [sp, #252]	@ 0xfc
 801dcea:	edcd 1a94 	vstr	s3, [sp, #592]	@ 0x250
 801dcee:	ed8d 6a3e 	vstr	s12, [sp, #248]	@ 0xf8
 801dcf2:	ed8d 6a93 	vstr	s12, [sp, #588]	@ 0x24c
 801dcf6:	d541      	bpl.n	801dd7c <iNemoEngine_API_Update+0x1a24>
 801dcf8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 801dda8 <iNemoEngine_API_Update+0x1a50>
 801dcfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd04:	dd3a      	ble.n	801dd7c <iNemoEngine_API_Update+0x1a24>
 801dd06:	ee79 7a67 	vsub.f32	s15, s18, s15
 801dd0a:	eef0 7ae7 	vabs.f32	s15, s15
 801dd0e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 801dd12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd1a:	dd5f      	ble.n	801dddc <iNemoEngine_API_Update+0x1a84>
 801dd1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dd20:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd28:	f140 86a4 	bpl.w	801ea74 <iNemoEngine_API_Update+0x271c>
 801dd2c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801ddac <iNemoEngine_API_Update+0x1a54>
 801dd30:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd38:	f141 8185 	bpl.w	801f046 <iNemoEngine_API_Update+0x2cee>
 801dd3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801ddbc <iNemoEngine_API_Update+0x1a64>
 801dd40:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd48:	f2c1 8185 	blt.w	801f056 <iNemoEngine_API_Update+0x2cfe>
 801dd4c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801ddb0 <iNemoEngine_API_Update+0x1a58>
 801dd50:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd58:	f141 824e 	bpl.w	801f1f8 <iNemoEngine_API_Update+0x2ea0>
 801dd5c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801ddbc <iNemoEngine_API_Update+0x1a64>
 801dd60:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 801ddb4 <iNemoEngine_API_Update+0x1a5c>
 801dd64:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801ddb8 <iNemoEngine_API_Update+0x1a60>
 801dd68:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801dd6c:	ee66 6a87 	vmul.f32	s13, s13, s14
 801dd70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dd74:	eea6 7a86 	vfma.f32	s14, s13, s12
 801dd78:	f001 b977 	b.w	801f06a <iNemoEngine_API_Update+0x2d12>
 801dd7c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801dd80:	e7c1      	b.n	801dd06 <iNemoEngine_API_Update+0x19ae>
 801dd82:	bf00      	nop
 801dd84:	3ecccccc 	.word	0x3ecccccc
 801dd88:	3dcccccd 	.word	0x3dcccccd
 801dd8c:	3f666666 	.word	0x3f666666
 801dd90:	00000000 	.word	0x00000000
 801dd94:	3f333333 	.word	0x3f333333
 801dd98:	bfb33333 	.word	0xbfb33333
 801dd9c:	3f7d6d54 	.word	0x3f7d6d54
 801dda0:	3f7ae147 	.word	0x3f7ae147
 801dda4:	3fb77778 	.word	0x3fb77778
 801dda8:	3f4ccccd 	.word	0x3f4ccccd
 801ddac:	3ba3d70a 	.word	0x3ba3d70a
 801ddb0:	3c75c28f 	.word	0x3c75c28f
 801ddb4:	3f19999a 	.word	0x3f19999a
 801ddb8:	43480000 	.word	0x43480000
 801ddbc:	3c23d70a 	.word	0x3c23d70a
 801ddc0:	3b449ba6 	.word	0x3b449ba6
 801ddc4:	3fb33333 	.word	0x3fb33333
 801ddc8:	3ecccccd 	.word	0x3ecccccd
 801ddcc:	3f8f5c29 	.word	0x3f8f5c29
 801ddd0:	3f59999a 	.word	0x3f59999a
 801ddd4:	3e4ccccd 	.word	0x3e4ccccd
 801ddd8:	3f99999a 	.word	0x3f99999a
 801dddc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801dde0:	ed1f 4a0a 	vldr	s8, [pc, #-40]	@ 801ddbc <iNemoEngine_API_Update+0x1a64>
 801dde4:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 801ddc0 <iNemoEngine_API_Update+0x1a68>
 801dde8:	eeb0 7a65 	vmov.f32	s14, s11
 801ddec:	eef0 6a65 	vmov.f32	s13, s11
 801ddf0:	ed8d 6a65 	vstr	s12, [sp, #404]	@ 0x194
 801ddf4:	ed9d 6a04 	vldr	s12, [sp, #16]
 801ddf8:	ed9d 3a84 	vldr	s6, [sp, #528]	@ 0x210
 801ddfc:	ed9d 5a83 	vldr	s10, [sp, #524]	@ 0x20c
 801de00:	ed9d 2a88 	vldr	s4, [sp, #544]	@ 0x220
 801de04:	eddd 4a8c 	vldr	s9, [sp, #560]	@ 0x230
 801de08:	9a06      	ldr	r2, [sp, #24]
 801de0a:	ed8d 4a66 	vstr	s8, [sp, #408]	@ 0x198
 801de0e:	ee66 3a0f 	vmul.f32	s7, s12, s30
 801de12:	ed9d 6a8d 	vldr	s12, [sp, #564]	@ 0x234
 801de16:	7b13      	ldrb	r3, [r2, #12]
 801de18:	ee23 3a23 	vmul.f32	s6, s6, s7
 801de1c:	ee23 5a85 	vmul.f32	s10, s7, s10
 801de20:	ed8d 3a84 	vstr	s6, [sp, #528]	@ 0x210
 801de24:	ed9d 3a85 	vldr	s6, [sp, #532]	@ 0x214
 801de28:	ed8d 5a83 	vstr	s10, [sp, #524]	@ 0x20c
 801de2c:	ee63 3a23 	vmul.f32	s7, s6, s7
 801de30:	ed9d 3a86 	vldr	s6, [sp, #536]	@ 0x218
 801de34:	edcd 3a85 	vstr	s7, [sp, #532]	@ 0x214
 801de38:	eddd 3a87 	vldr	s7, [sp, #540]	@ 0x21c
 801de3c:	ee2c 3a03 	vmul.f32	s6, s24, s6
 801de40:	ee6c 3a23 	vmul.f32	s7, s24, s7
 801de44:	ee74 4aa4 	vadd.f32	s9, s9, s9
 801de48:	ee2c ca02 	vmul.f32	s24, s24, s4
 801de4c:	ee36 6a06 	vadd.f32	s12, s12, s12
 801de50:	ed9d 2a8e 	vldr	s4, [sp, #568]	@ 0x238
 801de54:	ed8d 3a86 	vstr	s6, [sp, #536]	@ 0x218
 801de58:	ee64 4a87 	vmul.f32	s9, s9, s14
 801de5c:	ee26 6a07 	vmul.f32	s12, s12, s14
 801de60:	ee2f fa02 	vmul.f32	s30, s30, s4
 801de64:	edcd 4a8c 	vstr	s9, [sp, #560]	@ 0x230
 801de68:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 801de6c:	edcd 3a87 	vstr	s7, [sp, #540]	@ 0x21c
 801de70:	ed8d ca88 	vstr	s24, [sp, #544]	@ 0x220
 801de74:	ed8d fa8e 	vstr	s30, [sp, #568]	@ 0x238
 801de78:	2b00      	cmp	r3, #0
 801de7a:	f000 8525 	beq.w	801e8c8 <iNemoEngine_API_Update+0x2570>
 801de7e:	ee27 3a03 	vmul.f32	s6, s14, s6
 801de82:	ee67 3a23 	vmul.f32	s7, s14, s7
 801de86:	ee27 ca0c 	vmul.f32	s24, s14, s24
 801de8a:	ed9d 2a22 	vldr	s4, [sp, #136]	@ 0x88
 801de8e:	ed8d 3a86 	vstr	s6, [sp, #536]	@ 0x218
 801de92:	ee37 7a07 	vadd.f32	s14, s14, s14
 801de96:	4613      	mov	r3, r2
 801de98:	ee25 2a82 	vmul.f32	s4, s11, s4
 801de9c:	7b92      	ldrb	r2, [r2, #14]
 801de9e:	7b5b      	ldrb	r3, [r3, #13]
 801dea0:	edcd 3a87 	vstr	s7, [sp, #540]	@ 0x21c
 801dea4:	ee64 5a25 	vmul.f32	s11, s8, s11
 801dea8:	ee26 6a07 	vmul.f32	s12, s12, s14
 801deac:	edcd 5a66 	vstr	s11, [sp, #408]	@ 0x198
 801deb0:	ed8d ca88 	vstr	s24, [sp, #544]	@ 0x220
 801deb4:	ed8d 2a5f 	vstr	s4, [sp, #380]	@ 0x17c
 801deb8:	ed8d 2a60 	vstr	s4, [sp, #384]	@ 0x180
 801debc:	ed8d 2a61 	vstr	s4, [sp, #388]	@ 0x184
 801dec0:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 801dec4:	f88d 20eb 	strb.w	r2, [sp, #235]	@ 0xeb
 801dec8:	f88d 20ec 	strb.w	r2, [sp, #236]	@ 0xec
 801decc:	f88d 20ed 	strb.w	r2, [sp, #237]	@ 0xed
 801ded0:	f88d 30e8 	strb.w	r3, [sp, #232]	@ 0xe8
 801ded4:	f88d 30e9 	strb.w	r3, [sp, #233]	@ 0xe9
 801ded8:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801dedc:	b15a      	cbz	r2, 801def6 <iNemoEngine_API_Update+0x1b9e>
 801dede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deea:	dd04      	ble.n	801def6 <iNemoEngine_API_Update+0x1b9e>
 801deec:	2100      	movs	r1, #0
 801deee:	f8ad 10eb 	strh.w	r1, [sp, #235]	@ 0xeb
 801def2:	f88d 10ed 	strb.w	r1, [sp, #237]	@ 0xed
 801def6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801defa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801defe:	dd08      	ble.n	801df12 <iNemoEngine_API_Update+0x1bba>
 801df00:	9906      	ldr	r1, [sp, #24]
 801df02:	edd1 7a64 	vldr	s15, [r1, #400]	@ 0x190
 801df06:	eef4 7ae8 	vcmpe.f32	s15, s17
 801df0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df0e:	f280 85a4 	bge.w	801ea5a <iNemoEngine_API_Update+0x2702>
 801df12:	b133      	cbz	r3, 801df22 <iNemoEngine_API_Update+0x1bca>
 801df14:	f240 1101 	movw	r1, #257	@ 0x101
 801df18:	f8ad 10e8 	strh.w	r1, [sp, #232]	@ 0xe8
 801df1c:	2101      	movs	r1, #1
 801df1e:	f88d 10ea 	strb.w	r1, [sp, #234]	@ 0xea
 801df22:	2401      	movs	r4, #1
 801df24:	f88d 40f1 	strb.w	r4, [sp, #241]	@ 0xf1
 801df28:	f88d 40f3 	strb.w	r4, [sp, #243]	@ 0xf3
 801df2c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 801ddc4 <iNemoEngine_API_Update+0x1a6c>
 801df30:	eef4 cae7 	vcmpe.f32	s25, s15
 801df34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df38:	dc07      	bgt.n	801df4a <iNemoEngine_API_Update+0x1bf2>
 801df3a:	ed5f 7a5d 	vldr	s15, [pc, #-372]	@ 801ddc8 <iNemoEngine_API_Update+0x1a70>
 801df3e:	eef4 cae7 	vcmpe.f32	s25, s15
 801df42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df46:	f141 801d 	bpl.w	801ef84 <iNemoEngine_API_Update+0x2c2c>
 801df4a:	2300      	movs	r3, #0
 801df4c:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 801df50:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801df54:	f88d 30f1 	strb.w	r3, [sp, #241]	@ 0xf1
 801df58:	f88d 30f3 	strb.w	r3, [sp, #243]	@ 0xf3
 801df5c:	ed5f 7a65 	vldr	s15, [pc, #-404]	@ 801ddcc <iNemoEngine_API_Update+0x1a74>
 801df60:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df68:	dc07      	bgt.n	801df7a <iNemoEngine_API_Update+0x1c22>
 801df6a:	ed5f 7a67 	vldr	s15, [pc, #-412]	@ 801ddd0 <iNemoEngine_API_Update+0x1a78>
 801df6e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801df72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df76:	f140 86ed 	bpl.w	801ed54 <iNemoEngine_API_Update+0x29fc>
 801df7a:	2300      	movs	r3, #0
 801df7c:	f8ad 30eb 	strh.w	r3, [sp, #235]	@ 0xeb
 801df80:	f88d 30ed 	strb.w	r3, [sp, #237]	@ 0xed
 801df84:	f8ad 30f1 	strh.w	r3, [sp, #241]	@ 0xf1
 801df88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801df8c:	eef4 fae7 	vcmpe.f32	s31, s15
 801df90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df94:	f340 8486 	ble.w	801e8a4 <iNemoEngine_API_Update+0x254c>
 801df98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801df9c:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 801dfa0:	9a06      	ldr	r2, [sp, #24]
 801dfa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801dfa6:	2300      	movs	r3, #0
 801dfa8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801dfac:	ee27 fa8f 	vmul.f32	s30, s15, s30
 801dfb0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801dfb4:	eef4 fae7 	vcmpe.f32	s31, s15
 801dfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfbc:	bfc4      	itt	gt
 801dfbe:	f88d 30f1 	strbgt.w	r3, [sp, #241]	@ 0xf1
 801dfc2:	f88d 30f3 	strbgt.w	r3, [sp, #243]	@ 0xf3
 801dfc6:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 801dfca:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801dfce:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801dfd0:	edcd 4a8c 	vstr	s9, [sp, #560]	@ 0x230
 801dfd4:	2b0e      	cmp	r3, #14
 801dfd6:	ed8d fa8e 	vstr	s30, [sp, #568]	@ 0x238
 801dfda:	f340 8567 	ble.w	801eaac <iNemoEngine_API_Update+0x2754>
 801dfde:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 801dfe2:	eeb4 dae7 	vcmpe.f32	s26, s15
 801dfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfea:	f340 82ed 	ble.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801dfee:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 801dff2:	eef4 7acb 	vcmpe.f32	s15, s22
 801dff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dffa:	f340 82e5 	ble.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801dffe:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 801e002:	eef4 7aed 	vcmpe.f32	s15, s27
 801e006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e00a:	f340 82dd 	ble.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e00e:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 801ddd4 <iNemoEngine_API_Update+0x1a7c>
 801e012:	eeb0 7ace 	vabs.f32	s14, s28
 801e016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e01e:	f140 82d3 	bpl.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e022:	eeb0 7aee 	vabs.f32	s14, s29
 801e026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e02e:	f140 82cb 	bpl.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e032:	eeb0 7aeb 	vabs.f32	s14, s23
 801e036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e03e:	f140 82c3 	bpl.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e042:	ed5f 7a9b 	vldr	s15, [pc, #-620]	@ 801ddd8 <iNemoEngine_API_Update+0x1a80>
 801e046:	eef0 aaea 	vabs.f32	s21, s21
 801e04a:	eef4 aae7 	vcmpe.f32	s21, s15
 801e04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e052:	f140 82b9 	bpl.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e056:	eeb0 aaca 	vabs.f32	s20, s20
 801e05a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801e05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e062:	f140 82b1 	bpl.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e066:	eef0 9ae9 	vabs.f32	s19, s19
 801e06a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e072:	f140 82a9 	bpl.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e076:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e078:	9806      	ldr	r0, [sp, #24]
 801e07a:	ed93 6a00 	vldr	s12, [r3]
 801e07e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e080:	f890 11a0 	ldrb.w	r1, [r0, #416]	@ 0x1a0
 801e084:	ed93 7a00 	vldr	s14, [r3]
 801e088:	f200 73a4 	addw	r3, r0, #1956	@ 0x7a4
 801e08c:	edd3 4a00 	vldr	s9, [r3]
 801e090:	2909      	cmp	r1, #9
 801e092:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801e096:	f500 63f6 	add.w	r3, r0, #1968	@ 0x7b0
 801e09a:	ed93 5a00 	vldr	s10, [r3]
 801e09e:	bf8c      	ite	hi
 801e0a0:	220a      	movhi	r2, #10
 801e0a2:	2205      	movls	r2, #5
 801e0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0a8:	bfb4      	ite	lt
 801e0aa:	eef0 7a64 	vmovlt.f32	s15, s9
 801e0ae:	eef0 7a46 	vmovge.f32	s15, s12
 801e0b2:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e0b6:	bf8c      	ite	hi
 801e0b8:	eef0 5a64 	vmovhi.f32	s11, s9
 801e0bc:	eef0 5a46 	vmovls.f32	s11, s12
 801e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c4:	ee36 6a24 	vadd.f32	s12, s12, s9
 801e0c8:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e0cc:	bfb8      	it	lt
 801e0ce:	eef0 7a45 	vmovlt.f32	s15, s10
 801e0d2:	f200 73bc 	addw	r3, r0, #1980	@ 0x7bc
 801e0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0da:	bf88      	it	hi
 801e0dc:	eef0 5a45 	vmovhi.f32	s11, s10
 801e0e0:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e0e4:	ed93 5a00 	vldr	s10, [r3]
 801e0e8:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f0:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e0f4:	bfb8      	it	lt
 801e0f6:	eef0 7a45 	vmovlt.f32	s15, s10
 801e0fa:	f500 63f9 	add.w	r3, r0, #1992	@ 0x7c8
 801e0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e102:	bf88      	it	hi
 801e104:	eef0 5a45 	vmovhi.f32	s11, s10
 801e108:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e10c:	ed93 5a00 	vldr	s10, [r3]
 801e110:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e118:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e11c:	bfb8      	it	lt
 801e11e:	eef0 7a45 	vmovlt.f32	s15, s10
 801e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e126:	bf88      	it	hi
 801e128:	eef0 5a45 	vmovhi.f32	s11, s10
 801e12c:	2a05      	cmp	r2, #5
 801e12e:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e132:	d065      	beq.n	801e200 <iNemoEngine_API_Update+0x1ea8>
 801e134:	f200 73d4 	addw	r3, r0, #2004	@ 0x7d4
 801e138:	ed93 5a00 	vldr	s10, [r3]
 801e13c:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e144:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e148:	bfb8      	it	lt
 801e14a:	eef0 7a45 	vmovlt.f32	s15, s10
 801e14e:	f500 63fc 	add.w	r3, r0, #2016	@ 0x7e0
 801e152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e156:	bf88      	it	hi
 801e158:	eef0 5a45 	vmovhi.f32	s11, s10
 801e15c:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e160:	ed93 5a00 	vldr	s10, [r3]
 801e164:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e170:	bfb8      	it	lt
 801e172:	eef0 7a45 	vmovlt.f32	s15, s10
 801e176:	f200 73ec 	addw	r3, r0, #2028	@ 0x7ec
 801e17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e17e:	bf88      	it	hi
 801e180:	eef0 5a45 	vmovhi.f32	s11, s10
 801e184:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e188:	ed93 5a00 	vldr	s10, [r3]
 801e18c:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e194:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e198:	bfb8      	it	lt
 801e19a:	eef0 7a45 	vmovlt.f32	s15, s10
 801e19e:	f500 63ff 	add.w	r3, r0, #2040	@ 0x7f8
 801e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a6:	bf88      	it	hi
 801e1a8:	eef0 5a45 	vmovhi.f32	s11, s10
 801e1ac:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e1b0:	ed93 5a00 	vldr	s10, [r3]
 801e1b4:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1bc:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e1c0:	bfb8      	it	lt
 801e1c2:	eef0 7a45 	vmovlt.f32	s15, s10
 801e1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1ca:	bf88      	it	hi
 801e1cc:	eef0 5a45 	vmovhi.f32	s11, s10
 801e1d0:	2a0a      	cmp	r2, #10
 801e1d2:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e1d6:	d113      	bne.n	801e200 <iNemoEngine_API_Update+0x1ea8>
 801e1d8:	f600 0304 	addw	r3, r0, #2052	@ 0x804
 801e1dc:	ed93 5a00 	vldr	s10, [r3]
 801e1e0:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1e8:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e1ec:	bfb8      	it	lt
 801e1ee:	eef0 7a45 	vmovlt.f32	s15, s10
 801e1f2:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1fa:	bf88      	it	hi
 801e1fc:	eef0 5a45 	vmovhi.f32	s11, s10
 801e200:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e204:	eddf 5aeb 	vldr	s11, [pc, #940]	@ 801e5b4 <iNemoEngine_API_Update+0x225c>
 801e208:	ed9f 5aeb 	vldr	s10, [pc, #940]	@ 801e5b8 <iNemoEngine_API_Update+0x2260>
 801e20c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e210:	ee26 6a05 	vmul.f32	s12, s12, s10
 801e214:	eef4 7ae5 	vcmpe.f32	s15, s11
 801e218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e21c:	f300 81d4 	bgt.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e220:	eef0 7ac6 	vabs.f32	s15, s12
 801e224:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e228:	ed9f 6ae4 	vldr	s12, [pc, #912]	@ 801e5bc <iNemoEngine_API_Update+0x2264>
 801e22c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801e230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e234:	f300 81c8 	bgt.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e238:	9806      	ldr	r0, [sp, #24]
 801e23a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e23c:	ed93 6a00 	vldr	s12, [r3]
 801e240:	f500 63f5 	add.w	r3, r0, #1960	@ 0x7a8
 801e244:	edd3 4a00 	vldr	s9, [r3]
 801e248:	f200 73b4 	addw	r3, r0, #1972	@ 0x7b4
 801e24c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801e250:	ed93 5a00 	vldr	s10, [r3]
 801e254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e258:	bfb4      	ite	lt
 801e25a:	eef0 7a64 	vmovlt.f32	s15, s9
 801e25e:	eef0 7a46 	vmovge.f32	s15, s12
 801e262:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e266:	bf8c      	ite	hi
 801e268:	eef0 5a64 	vmovhi.f32	s11, s9
 801e26c:	eef0 5a46 	vmovls.f32	s11, s12
 801e270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e274:	ee36 6a24 	vadd.f32	s12, s12, s9
 801e278:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e27c:	bfb8      	it	lt
 801e27e:	eef0 7a45 	vmovlt.f32	s15, s10
 801e282:	f500 63f8 	add.w	r3, r0, #1984	@ 0x7c0
 801e286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e28a:	bf88      	it	hi
 801e28c:	eef0 5a45 	vmovhi.f32	s11, s10
 801e290:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e294:	ed93 5a00 	vldr	s10, [r3]
 801e298:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2a0:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e2a4:	bfb8      	it	lt
 801e2a6:	eef0 7a45 	vmovlt.f32	s15, s10
 801e2aa:	f200 73cc 	addw	r3, r0, #1996	@ 0x7cc
 801e2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2b2:	bf88      	it	hi
 801e2b4:	eef0 5a45 	vmovhi.f32	s11, s10
 801e2b8:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e2bc:	ed93 5a00 	vldr	s10, [r3]
 801e2c0:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2c8:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e2cc:	bfb8      	it	lt
 801e2ce:	eef0 7a45 	vmovlt.f32	s15, s10
 801e2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2d6:	bf88      	it	hi
 801e2d8:	eef0 5a45 	vmovhi.f32	s11, s10
 801e2dc:	2a05      	cmp	r2, #5
 801e2de:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e2e2:	d065      	beq.n	801e3b0 <iNemoEngine_API_Update+0x2058>
 801e2e4:	f500 63fb 	add.w	r3, r0, #2008	@ 0x7d8
 801e2e8:	ed93 5a00 	vldr	s10, [r3]
 801e2ec:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2f4:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e2f8:	bfb8      	it	lt
 801e2fa:	eef0 7a45 	vmovlt.f32	s15, s10
 801e2fe:	f200 73e4 	addw	r3, r0, #2020	@ 0x7e4
 801e302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e306:	bf88      	it	hi
 801e308:	eef0 5a45 	vmovhi.f32	s11, s10
 801e30c:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e310:	ed93 5a00 	vldr	s10, [r3]
 801e314:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e31c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e320:	bfb8      	it	lt
 801e322:	eef0 7a45 	vmovlt.f32	s15, s10
 801e326:	f500 63fe 	add.w	r3, r0, #2032	@ 0x7f0
 801e32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e32e:	bf88      	it	hi
 801e330:	eef0 5a45 	vmovhi.f32	s11, s10
 801e334:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e338:	ed93 5a00 	vldr	s10, [r3]
 801e33c:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e344:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e348:	bfb8      	it	lt
 801e34a:	eef0 7a45 	vmovlt.f32	s15, s10
 801e34e:	f200 73fc 	addw	r3, r0, #2044	@ 0x7fc
 801e352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e356:	bf88      	it	hi
 801e358:	eef0 5a45 	vmovhi.f32	s11, s10
 801e35c:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e360:	ed93 5a00 	vldr	s10, [r3]
 801e364:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e36c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e370:	bfb8      	it	lt
 801e372:	eef0 7a45 	vmovlt.f32	s15, s10
 801e376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37a:	bf88      	it	hi
 801e37c:	eef0 5a45 	vmovhi.f32	s11, s10
 801e380:	2a0a      	cmp	r2, #10
 801e382:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e386:	d113      	bne.n	801e3b0 <iNemoEngine_API_Update+0x2058>
 801e388:	f600 0308 	addw	r3, r0, #2056	@ 0x808
 801e38c:	ed93 5a00 	vldr	s10, [r3]
 801e390:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e398:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e39c:	bfb8      	it	lt
 801e39e:	eef0 7a45 	vmovlt.f32	s15, s10
 801e3a2:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3aa:	bf88      	it	hi
 801e3ac:	eef0 5a45 	vmovhi.f32	s11, s10
 801e3b0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e3b4:	eddf 5a7f 	vldr	s11, [pc, #508]	@ 801e5b4 <iNemoEngine_API_Update+0x225c>
 801e3b8:	ed9f 5a7f 	vldr	s10, [pc, #508]	@ 801e5b8 <iNemoEngine_API_Update+0x2260>
 801e3bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e3c0:	ee26 6a05 	vmul.f32	s12, s12, s10
 801e3c4:	eef4 7ae5 	vcmpe.f32	s15, s11
 801e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3cc:	f300 80fc 	bgt.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e3d0:	eef0 7ac6 	vabs.f32	s15, s12
 801e3d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e3d8:	ed9f 6a78 	vldr	s12, [pc, #480]	@ 801e5bc <iNemoEngine_API_Update+0x2264>
 801e3dc:	eef4 7ac6 	vcmpe.f32	s15, s12
 801e3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3e4:	f300 80f0 	bgt.w	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e3e8:	9806      	ldr	r0, [sp, #24]
 801e3ea:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 801e3ec:	ed93 5a00 	vldr	s10, [r3]
 801e3f0:	f200 73ac 	addw	r3, r0, #1964	@ 0x7ac
 801e3f4:	edd3 4a00 	vldr	s9, [r3]
 801e3f8:	f500 63f7 	add.w	r3, r0, #1976	@ 0x7b8
 801e3fc:	eeb4 5ae4 	vcmpe.f32	s10, s9
 801e400:	ed93 6a00 	vldr	s12, [r3]
 801e404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e408:	bfb4      	ite	lt
 801e40a:	eef0 7a64 	vmovlt.f32	s15, s9
 801e40e:	eef0 7a45 	vmovge.f32	s15, s10
 801e412:	bf8c      	ite	hi
 801e414:	eef0 5a64 	vmovhi.f32	s11, s9
 801e418:	eef0 5a45 	vmovls.f32	s11, s10
 801e41c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e424:	ee35 5a24 	vadd.f32	s10, s10, s9
 801e428:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801e42c:	bfa8      	it	ge
 801e42e:	eef0 7a46 	vmovge.f32	s15, s12
 801e432:	f200 73c4 	addw	r3, r0, #1988	@ 0x7c4
 801e436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e43a:	bf98      	it	ls
 801e43c:	eef0 5a46 	vmovls.f32	s11, s12
 801e440:	ee76 4a05 	vadd.f32	s9, s12, s10
 801e444:	ed93 6a00 	vldr	s12, [r3]
 801e448:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801e44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e450:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801e454:	bfa8      	it	ge
 801e456:	eef0 7a46 	vmovge.f32	s15, s12
 801e45a:	f500 63fa 	add.w	r3, r0, #2000	@ 0x7d0
 801e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e462:	bf8c      	ite	hi
 801e464:	eeb0 5a65 	vmovhi.f32	s10, s11
 801e468:	eeb0 5a46 	vmovls.f32	s10, s12
 801e46c:	edd3 5a00 	vldr	s11, [r3]
 801e470:	eef4 5ae7 	vcmpe.f32	s11, s15
 801e474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e478:	ee36 6a24 	vadd.f32	s12, s12, s9
 801e47c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e480:	bfa8      	it	ge
 801e482:	eef0 7a65 	vmovge.f32	s15, s11
 801e486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e48a:	ee35 6a86 	vadd.f32	s12, s11, s12
 801e48e:	bf88      	it	hi
 801e490:	eef0 5a45 	vmovhi.f32	s11, s10
 801e494:	2a05      	cmp	r2, #5
 801e496:	d065      	beq.n	801e564 <iNemoEngine_API_Update+0x220c>
 801e498:	f200 73dc 	addw	r3, r0, #2012	@ 0x7dc
 801e49c:	ed93 5a00 	vldr	s10, [r3]
 801e4a0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801e4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4a8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801e4ac:	bfa8      	it	ge
 801e4ae:	eef0 7a45 	vmovge.f32	s15, s10
 801e4b2:	f500 63fd 	add.w	r3, r0, #2024	@ 0x7e8
 801e4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ba:	bf98      	it	ls
 801e4bc:	eef0 5a45 	vmovls.f32	s11, s10
 801e4c0:	ee35 5a06 	vadd.f32	s10, s10, s12
 801e4c4:	ed93 6a00 	vldr	s12, [r3]
 801e4c8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801e4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4d0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801e4d4:	bfa8      	it	ge
 801e4d6:	eef0 7a46 	vmovge.f32	s15, s12
 801e4da:	f200 73f4 	addw	r3, r0, #2036	@ 0x7f4
 801e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4e2:	bf98      	it	ls
 801e4e4:	eef0 5a46 	vmovls.f32	s11, s12
 801e4e8:	ee36 5a05 	vadd.f32	s10, s12, s10
 801e4ec:	ed93 6a00 	vldr	s12, [r3]
 801e4f0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801e4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4f8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801e4fc:	bfa8      	it	ge
 801e4fe:	eef0 7a46 	vmovge.f32	s15, s12
 801e502:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
 801e506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e50a:	bf98      	it	ls
 801e50c:	eef0 5a46 	vmovls.f32	s11, s12
 801e510:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e514:	ed93 5a00 	vldr	s10, [r3]
 801e518:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e520:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801e524:	bfa8      	it	ge
 801e526:	eef0 7a45 	vmovge.f32	s15, s10
 801e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e52e:	bf98      	it	ls
 801e530:	eef0 5a45 	vmovls.f32	s11, s10
 801e534:	2a0a      	cmp	r2, #10
 801e536:	ee35 6a06 	vadd.f32	s12, s10, s12
 801e53a:	d113      	bne.n	801e564 <iNemoEngine_API_Update+0x220c>
 801e53c:	f600 030c 	addw	r3, r0, #2060	@ 0x80c
 801e540:	ed93 5a00 	vldr	s10, [r3]
 801e544:	eef4 7ac5 	vcmpe.f32	s15, s10
 801e548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e54c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801e550:	bfb8      	it	lt
 801e552:	eef0 7a45 	vmovlt.f32	s15, s10
 801e556:	ee36 6a05 	vadd.f32	s12, s12, s10
 801e55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e55e:	bf88      	it	hi
 801e560:	eef0 5a45 	vmovhi.f32	s11, s10
 801e564:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e568:	eddf 5a12 	vldr	s11, [pc, #72]	@ 801e5b4 <iNemoEngine_API_Update+0x225c>
 801e56c:	ed9f 5a12 	vldr	s10, [pc, #72]	@ 801e5b8 <iNemoEngine_API_Update+0x2260>
 801e570:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e574:	ee26 6a05 	vmul.f32	s12, s12, s10
 801e578:	eef4 7ae5 	vcmpe.f32	s15, s11
 801e57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e580:	dc22      	bgt.n	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e582:	eef0 7ac6 	vabs.f32	s15, s12
 801e586:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e58a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801e5bc <iNemoEngine_API_Update+0x2264>
 801e58e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e596:	dc17      	bgt.n	801e5c8 <iNemoEngine_API_Update+0x2270>
 801e598:	9b06      	ldr	r3, [sp, #24]
 801e59a:	795b      	ldrb	r3, [r3, #5]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	f002 8117 	beq.w	80207d0 <iNemoEngine_API_Update+0x4478>
 801e5a2:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 801e5a6:	2a01      	cmp	r2, #1
 801e5a8:	f001 87d1 	beq.w	802054e <iNemoEngine_API_Update+0x41f6>
 801e5ac:	f04f 0901 	mov.w	r9, #1
 801e5b0:	f000 bc0b 	b.w	801edca <iNemoEngine_API_Update+0x2a72>
 801e5b4:	3be56041 	.word	0x3be56041
 801e5b8:	3dcccccd 	.word	0x3dcccccd
 801e5bc:	3e333333 	.word	0x3e333333
 801e5c0:	42480000 	.word	0x42480000
 801e5c4:	00000000 	.word	0x00000000
 801e5c8:	9b06      	ldr	r3, [sp, #24]
 801e5ca:	795b      	ldrb	r3, [r3, #5]
 801e5cc:	f04f 0900 	mov.w	r9, #0
 801e5d0:	f8ad 90ee 	strh.w	r9, [sp, #238]	@ 0xee
 801e5d4:	f88d 90f0 	strb.w	r9, [sp, #240]	@ 0xf0
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	f040 83f1 	bne.w	801edc0 <iNemoEngine_API_Update+0x2a68>
 801e5de:	9906      	ldr	r1, [sp, #24]
 801e5e0:	f8d1 21bc 	ldr.w	r2, [r1, #444]	@ 0x1bc
 801e5e4:	9295      	str	r2, [sp, #596]	@ 0x254
 801e5e6:	f8d1 21c0 	ldr.w	r2, [r1, #448]	@ 0x1c0
 801e5ea:	9296      	str	r2, [sp, #600]	@ 0x258
 801e5ec:	f8d1 21c4 	ldr.w	r2, [r1, #452]	@ 0x1c4
 801e5f0:	9297      	str	r2, [sp, #604]	@ 0x25c
 801e5f2:	2200      	movs	r2, #0
 801e5f4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801e5f8:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801e5fc:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801e600:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801e604:	704a      	strb	r2, [r1, #1]
 801e606:	ed5f 7a12 	vldr	s15, [pc, #-72]	@ 801e5c0 <iNemoEngine_API_Update+0x2268>
 801e60a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801e60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e612:	f2c0 8138 	blt.w	801e886 <iNemoEngine_API_Update+0x252e>
 801e616:	9906      	ldr	r1, [sp, #24]
 801e618:	2200      	movs	r2, #0
 801e61a:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801e61e:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801e622:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 801e626:	2b01      	cmp	r3, #1
 801e628:	d125      	bne.n	801e676 <iNemoEngine_API_Update+0x231e>
 801e62a:	eddd 4a86 	vldr	s9, [sp, #536]	@ 0x218
 801e62e:	ed9d 6a5f 	vldr	s12, [sp, #380]	@ 0x17c
 801e632:	ed9d 5a87 	vldr	s10, [sp, #540]	@ 0x21c
 801e636:	ed9d 7a60 	vldr	s14, [sp, #384]	@ 0x180
 801e63a:	eddd 5a88 	vldr	s11, [sp, #544]	@ 0x220
 801e63e:	eddd 7a61 	vldr	s15, [sp, #388]	@ 0x184
 801e642:	eeb6 4a08 	vmov.f32	s8, #104	@ 0x3f400000  0.750
 801e646:	ee64 4a84 	vmul.f32	s9, s9, s8
 801e64a:	ee36 6a06 	vadd.f32	s12, s12, s12
 801e64e:	ee25 5a04 	vmul.f32	s10, s10, s8
 801e652:	ee37 7a07 	vadd.f32	s14, s14, s14
 801e656:	ee65 5a84 	vmul.f32	s11, s11, s8
 801e65a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801e65e:	edcd 4a86 	vstr	s9, [sp, #536]	@ 0x218
 801e662:	ed8d 6a5f 	vstr	s12, [sp, #380]	@ 0x17c
 801e666:	ed8d 5a87 	vstr	s10, [sp, #540]	@ 0x21c
 801e66a:	ed8d 7a60 	vstr	s14, [sp, #384]	@ 0x180
 801e66e:	edcd 5a88 	vstr	s11, [sp, #544]	@ 0x220
 801e672:	edcd 7a61 	vstr	s15, [sp, #388]	@ 0x184
 801e676:	9c06      	ldr	r4, [sp, #24]
 801e678:	ed9d 6a60 	vldr	s12, [sp, #384]	@ 0x180
 801e67c:	ed94 2a7f 	vldr	s4, [r4, #508]	@ 0x1fc
 801e680:	edd4 1a75 	vldr	s3, [r4, #468]	@ 0x1d4
 801e684:	edd4 2a89 	vldr	s5, [r4, #548]	@ 0x224
 801e688:	edd4 3a93 	vldr	s7, [r4, #588]	@ 0x24c
 801e68c:	eddd 0a5f 	vldr	s1, [sp, #380]	@ 0x17c
 801e690:	ed9d 1a61 	vldr	s2, [sp, #388]	@ 0x184
 801e694:	ed94 4a9d 	vldr	s8, [r4, #628]	@ 0x274
 801e698:	edd4 4aa7 	vldr	s9, [r4, #668]	@ 0x29c
 801e69c:	ed94 5ab1 	vldr	s10, [r4, #708]	@ 0x2c4
 801e6a0:	ed9d 3a8b 	vldr	s6, [sp, #556]	@ 0x22c
 801e6a4:	ed9d 7a89 	vldr	s14, [sp, #548]	@ 0x224
 801e6a8:	eddd 7a8a 	vldr	s15, [sp, #552]	@ 0x228
 801e6ac:	edd4 5abb 	vldr	s11, [r4, #748]	@ 0x2ec
 801e6b0:	eea6 2a06 	vfma.f32	s4, s12, s12
 801e6b4:	ab83      	add	r3, sp, #524	@ 0x20c
 801e6b6:	aa8f      	add	r2, sp, #572	@ 0x23c
 801e6b8:	ed9d 6a62 	vldr	s12, [sp, #392]	@ 0x188
 801e6bc:	ed84 2a7f 	vstr	s4, [r4, #508]	@ 0x1fc
 801e6c0:	eee0 1aa0 	vfma.f32	s3, s1, s1
 801e6c4:	a93a      	add	r1, sp, #232	@ 0xe8
 801e6c6:	f504 70d6 	add.w	r0, r4, #428	@ 0x1ac
 801e6ca:	eee1 2a01 	vfma.f32	s5, s2, s2
 801e6ce:	eee6 3a06 	vfma.f32	s7, s12, s12
 801e6d2:	eddd 0a63 	vldr	s1, [sp, #396]	@ 0x18c
 801e6d6:	ed9d 1a64 	vldr	s2, [sp, #400]	@ 0x190
 801e6da:	ed9d 6a65 	vldr	s12, [sp, #404]	@ 0x194
 801e6de:	edc4 1a75 	vstr	s3, [r4, #468]	@ 0x1d4
 801e6e2:	eea0 4aa0 	vfma.f32	s8, s1, s1
 801e6e6:	eee1 4a01 	vfma.f32	s9, s2, s2
 801e6ea:	eea6 5a06 	vfma.f32	s10, s12, s12
 801e6ee:	eddd 0a66 	vldr	s1, [sp, #408]	@ 0x198
 801e6f2:	ed9d 1a67 	vldr	s2, [sp, #412]	@ 0x19c
 801e6f6:	ed94 6ac5 	vldr	s12, [r4, #788]	@ 0x314
 801e6fa:	edc4 2a89 	vstr	s5, [r4, #548]	@ 0x224
 801e6fe:	eee0 5aa0 	vfma.f32	s11, s1, s1
 801e702:	eea1 6a01 	vfma.f32	s12, s2, s2
 801e706:	ee26 7a87 	vmul.f32	s14, s13, s14
 801e70a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e70e:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e712:	ee27 7a28 	vmul.f32	s14, s14, s17
 801e716:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801e71a:	ee66 8aa8 	vmul.f32	s17, s13, s17
 801e71e:	ed8d 7a89 	vstr	s14, [sp, #548]	@ 0x224
 801e722:	edcd 7a8a 	vstr	s15, [sp, #552]	@ 0x228
 801e726:	edc4 3a93 	vstr	s7, [r4, #588]	@ 0x24c
 801e72a:	ed84 4a9d 	vstr	s8, [r4, #628]	@ 0x274
 801e72e:	edc4 4aa7 	vstr	s9, [r4, #668]	@ 0x29c
 801e732:	ed84 5ab1 	vstr	s10, [r4, #708]	@ 0x2c4
 801e736:	edcd 8a8b 	vstr	s17, [sp, #556]	@ 0x22c
 801e73a:	edc4 5abb 	vstr	s11, [r4, #748]	@ 0x2ec
 801e73e:	ed84 6ac5 	vstr	s12, [r4, #788]	@ 0x314
 801e742:	9300      	str	r3, [sp, #0]
 801e744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e746:	f7f9 fe39 	bl	80183bc <kf_update>
 801e74a:	edd4 6a6d 	vldr	s13, [r4, #436]	@ 0x1b4
 801e74e:	ed94 6a6c 	vldr	s12, [r4, #432]	@ 0x1b0
 801e752:	ed94 7a6e 	vldr	s14, [r4, #440]	@ 0x1b8
 801e756:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801e75a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801e75e:	eee6 7a06 	vfma.f32	s15, s12, s12
 801e762:	eee7 7a07 	vfma.f32	s15, s14, s14
 801e766:	eef4 7ae5 	vcmpe.f32	s15, s11
 801e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e76e:	f100 80bb 	bmi.w	801e8e8 <iNemoEngine_API_Update+0x2590>
 801e772:	ed5f 5a6c 	vldr	s11, [pc, #-432]	@ 801e5c4 <iNemoEngine_API_Update+0x226c>
 801e776:	ed8d 6a52 	vstr	s12, [sp, #328]	@ 0x148
 801e77a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801e77e:	aa4e      	add	r2, sp, #312	@ 0x138
 801e780:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801e782:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801e786:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801e78a:	4611      	mov	r1, r2
 801e78c:	ae68      	add	r6, sp, #416	@ 0x1a0
 801e78e:	af70      	add	r7, sp, #448	@ 0x1c0
 801e790:	edcd 6a53 	vstr	s13, [sp, #332]	@ 0x14c
 801e794:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801e798:	ed8d 7a54 	vstr	s14, [sp, #336]	@ 0x150
 801e79c:	ee27 6a86 	vmul.f32	s12, s15, s12
 801e7a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801e7a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e7a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e7ac:	edcd 5a55 	vstr	s11, [sp, #340]	@ 0x154
 801e7b0:	ed8d 6aae 	vstr	s12, [sp, #696]	@ 0x2b8
 801e7b4:	edcd 6aaf 	vstr	s13, [sp, #700]	@ 0x2bc
 801e7b8:	ed8d 7ab0 	vstr	s14, [sp, #704]	@ 0x2c0
 801e7bc:	edcd 7ab1 	vstr	s15, [sp, #708]	@ 0x2c4
 801e7c0:	f7f9 fc3c 	bl	801803c <qmult>
 801e7c4:	ed92 6a01 	vldr	s12, [r2, #4]
 801e7c8:	edd2 5a00 	vldr	s11, [r2]
 801e7cc:	edd2 6a02 	vldr	s13, [r2, #8]
 801e7d0:	ed92 7a03 	vldr	s14, [r2, #12]
 801e7d4:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 801e7d6:	ee66 7a06 	vmul.f32	s15, s12, s12
 801e7da:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801e7de:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801e7e2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801e7e6:	eee7 7a07 	vfma.f32	s15, s14, s14
 801e7ea:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801e7ee:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801e7f2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801e7f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 801e7fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801e7fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e802:	edcd 5a4a 	vstr	s11, [sp, #296]	@ 0x128
 801e806:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 801e80a:	edcd 6a4c 	vstr	s13, [sp, #304]	@ 0x130
 801e80e:	ed8d 7a4d 	vstr	s14, [sp, #308]	@ 0x134
 801e812:	4634      	mov	r4, r6
 801e814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e816:	42bc      	cmp	r4, r7
 801e818:	f105 0510 	add.w	r5, r5, #16
 801e81c:	f106 0610 	add.w	r6, r6, #16
 801e820:	f845 0c10 	str.w	r0, [r5, #-16]
 801e824:	f845 1c0c 	str.w	r1, [r5, #-12]
 801e828:	f845 2c08 	str.w	r2, [r5, #-8]
 801e82c:	f845 3c04 	str.w	r3, [r5, #-4]
 801e830:	d1ef      	bne.n	801e812 <iNemoEngine_API_Update+0x24ba>
 801e832:	6830      	ldr	r0, [r6, #0]
 801e834:	6028      	str	r0, [r5, #0]
 801e836:	9e06      	ldr	r6, [sp, #24]
 801e838:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e83a:	f8d6 31bc 	ldr.w	r3, [r6, #444]	@ 0x1bc
 801e83e:	6013      	str	r3, [r2, #0]
 801e840:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e842:	f8d6 31c0 	ldr.w	r3, [r6, #448]	@ 0x1c0
 801e846:	6013      	str	r3, [r2, #0]
 801e848:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801e84a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	@ 0x1c4
 801e84e:	6013      	str	r3, [r2, #0]
 801e850:	ad4a      	add	r5, sp, #296	@ 0x128
 801e852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e854:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 801e856:	60eb      	str	r3, [r5, #12]
 801e858:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e85a:	6028      	str	r0, [r5, #0]
 801e85c:	6069      	str	r1, [r5, #4]
 801e85e:	60aa      	str	r2, [r5, #8]
 801e860:	edd6 9a75 	vldr	s19, [r6, #468]	@ 0x1d4
 801e864:	edc3 5a00 	vstr	s11, [r3]
 801e868:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e86a:	f8d6 794c 	ldr.w	r7, [r6, #2380]	@ 0x94c
 801e86e:	ed83 6a00 	vstr	s12, [r3]
 801e872:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e874:	edc3 6a00 	vstr	s13, [r3]
 801e878:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e87a:	accc      	add	r4, sp, #816	@ 0x330
 801e87c:	ed83 7a00 	vstr	s14, [r3]
 801e880:	4635      	mov	r5, r6
 801e882:	f7fd be20 	b.w	801c4c6 <iNemoEngine_API_Update+0x16e>
 801e886:	9906      	ldr	r1, [sp, #24]
 801e888:	f891 21a2 	ldrb.w	r2, [r1, #418]	@ 0x1a2
 801e88c:	2a31      	cmp	r2, #49	@ 0x31
 801e88e:	f63f aeca 	bhi.w	801e626 <iNemoEngine_API_Update+0x22ce>
 801e892:	3201      	adds	r2, #1
 801e894:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 801e898:	2200      	movs	r2, #0
 801e89a:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801e89e:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801e8a2:	e6c0      	b.n	801e626 <iNemoEngine_API_Update+0x22ce>
 801e8a4:	9a06      	ldr	r2, [sp, #24]
 801e8a6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	f340 8398 	ble.w	801efde <iNemoEngine_API_Update+0x2c86>
 801e8ae:	3b01      	subs	r3, #1
 801e8b0:	6593      	str	r3, [r2, #88]	@ 0x58
 801e8b2:	2300      	movs	r3, #0
 801e8b4:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 801e8b8:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801e8bc:	f88d 30f1 	strb.w	r3, [sp, #241]	@ 0xf1
 801e8c0:	f88d 30f3 	strb.w	r3, [sp, #243]	@ 0xf3
 801e8c4:	f7ff bb8b 	b.w	801dfde <iNemoEngine_API_Update+0x1c86>
 801e8c8:	7b53      	ldrb	r3, [r2, #13]
 801e8ca:	7b92      	ldrb	r2, [r2, #14]
 801e8cc:	f88d 30e8 	strb.w	r3, [sp, #232]	@ 0xe8
 801e8d0:	f88d 30e9 	strb.w	r3, [sp, #233]	@ 0xe9
 801e8d4:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801e8d8:	f88d 20eb 	strb.w	r2, [sp, #235]	@ 0xeb
 801e8dc:	f88d 20ec 	strb.w	r2, [sp, #236]	@ 0xec
 801e8e0:	f88d 20ed 	strb.w	r2, [sp, #237]	@ 0xed
 801e8e4:	f7ff bb07 	b.w	801def6 <iNemoEngine_API_Update+0x1b9e>
 801e8e8:	ee35 5ae7 	vsub.f32	s10, s11, s15
 801e8ec:	eef1 5ac5 	vsqrt.f32	s11, s10
 801e8f0:	e741      	b.n	801e776 <iNemoEngine_API_Update+0x241e>
 801e8f2:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	@ 0x974
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	f341 8173 	ble.w	801fbe2 <iNemoEngine_API_Update+0x388a>
 801e8fc:	3b01      	subs	r3, #1
 801e8fe:	f8a5 3974 	strh.w	r3, [r5, #2420]	@ 0x974
 801e902:	f7fd bd51 	b.w	801c3a8 <iNemoEngine_API_Update+0x50>
 801e906:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801e90a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801e90e:	eea7 6a07 	vfma.f32	s12, s14, s14
 801e912:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e916:	eeb0 8a67 	vmov.f32	s16, s15
 801e91a:	eef0 7a46 	vmov.f32	s15, s12
 801e91e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801e922:	eee8 7ae8 	vfms.f32	s15, s17, s17
 801e926:	ee17 0a90 	vmov	r0, s15
 801e92a:	f7e1 fe0d 	bl	8000548 <__aeabi_f2d>
 801e92e:	ee78 7a08 	vadd.f32	s15, s16, s16
 801e932:	4602      	mov	r2, r0
 801e934:	460b      	mov	r3, r1
 801e936:	ee17 0a90 	vmov	r0, s15
 801e93a:	ec43 2b18 	vmov	d8, r2, r3
 801e93e:	f7e1 fe03 	bl	8000548 <__aeabi_f2d>
 801e942:	eeb0 1a48 	vmov.f32	s2, s16
 801e946:	eef0 1a68 	vmov.f32	s3, s17
 801e94a:	ec41 0b10 	vmov	d0, r0, r1
 801e94e:	f003 fb87 	bl	8022060 <atan2>
 801e952:	a3eb      	add	r3, pc, #940	@ (adr r3, 801ed00 <iNemoEngine_API_Update+0x29a8>)
 801e954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e958:	ec51 0b10 	vmov	r0, r1, d0
 801e95c:	f7e1 fe4c 	bl	80005f8 <__aeabi_dmul>
 801e960:	4be9      	ldr	r3, [pc, #932]	@ (801ed08 <iNemoEngine_API_Update+0x29b0>)
 801e962:	2200      	movs	r2, #0
 801e964:	f7e1 fc92 	bl	800028c <__adddf3>
 801e968:	f7e2 f91e 	bl	8000ba8 <__aeabi_d2f>
 801e96c:	ee08 0a10 	vmov	s16, r0
 801e970:	f7fd be3a 	b.w	801c5e8 <iNemoEngine_API_Update+0x290>
 801e974:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801e978:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801e97c:	eea7 6a07 	vfma.f32	s12, s14, s14
 801e980:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e984:	eeb0 8a67 	vmov.f32	s16, s15
 801e988:	eef0 7a46 	vmov.f32	s15, s12
 801e98c:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801e990:	eee8 7ae8 	vfms.f32	s15, s17, s17
 801e994:	ee17 0a90 	vmov	r0, s15
 801e998:	f7e1 fdd6 	bl	8000548 <__aeabi_f2d>
 801e99c:	ee78 7a08 	vadd.f32	s15, s16, s16
 801e9a0:	4602      	mov	r2, r0
 801e9a2:	460b      	mov	r3, r1
 801e9a4:	ee17 0a90 	vmov	r0, s15
 801e9a8:	ec43 2b18 	vmov	d8, r2, r3
 801e9ac:	f7e1 fdcc 	bl	8000548 <__aeabi_f2d>
 801e9b0:	eeb0 1a48 	vmov.f32	s2, s16
 801e9b4:	eef0 1a68 	vmov.f32	s3, s17
 801e9b8:	ec41 0b10 	vmov	d0, r0, r1
 801e9bc:	f003 fb50 	bl	8022060 <atan2>
 801e9c0:	a3cf      	add	r3, pc, #828	@ (adr r3, 801ed00 <iNemoEngine_API_Update+0x29a8>)
 801e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9c6:	ec51 0b10 	vmov	r0, r1, d0
 801e9ca:	f7e1 fe15 	bl	80005f8 <__aeabi_dmul>
 801e9ce:	4bce      	ldr	r3, [pc, #824]	@ (801ed08 <iNemoEngine_API_Update+0x29b0>)
 801e9d0:	2200      	movs	r2, #0
 801e9d2:	f7e1 fc59 	bl	8000288 <__aeabi_dsub>
 801e9d6:	f7e2 f8e7 	bl	8000ba8 <__aeabi_d2f>
 801e9da:	ee08 0a10 	vmov	s16, r0
 801e9de:	f7fd be03 	b.w	801c5e8 <iNemoEngine_API_Update+0x290>
 801e9e2:	ed9f baca 	vldr	s22, [pc, #808]	@ 801ed0c <iNemoEngine_API_Update+0x29b4>
 801e9e6:	49ca      	ldr	r1, [pc, #808]	@ (801ed10 <iNemoEngine_API_Update+0x29b8>)
 801e9e8:	9806      	ldr	r0, [sp, #24]
 801e9ea:	f7fd beba 	b.w	801c762 <iNemoEngine_API_Update+0x40a>
 801e9ee:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801e9f2:	ee17 0a90 	vmov	r0, s15
 801e9f6:	f7e1 fda7 	bl	8000548 <__aeabi_f2d>
 801e9fa:	ec41 0b10 	vmov	d0, r0, r1
 801e9fe:	f003 ff3b 	bl	8022878 <floor>
 801ea02:	ec51 0b10 	vmov	r0, r1, d0
 801ea06:	f7e2 f8cf 	bl	8000ba8 <__aeabi_d2f>
 801ea0a:	ee0c 0a10 	vmov	s24, r0
 801ea0e:	f7fe b937 	b.w	801cc80 <iNemoEngine_API_Update+0x928>
 801ea12:	ee78 7a27 	vadd.f32	s15, s16, s15
 801ea16:	ee17 0a90 	vmov	r0, s15
 801ea1a:	f7e1 fd95 	bl	8000548 <__aeabi_f2d>
 801ea1e:	ec41 0b10 	vmov	d0, r0, r1
 801ea22:	f003 ff29 	bl	8022878 <floor>
 801ea26:	ec51 0b10 	vmov	r0, r1, d0
 801ea2a:	f7e2 f8bd 	bl	8000ba8 <__aeabi_d2f>
 801ea2e:	ee08 0a10 	vmov	s16, r0
 801ea32:	f7fe b8fa 	b.w	801cc2a <iNemoEngine_API_Update+0x8d2>
 801ea36:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801ea3a:	ee17 0a90 	vmov	r0, s15
 801ea3e:	f7e1 fd83 	bl	8000548 <__aeabi_f2d>
 801ea42:	ec41 0b10 	vmov	d0, r0, r1
 801ea46:	f003 ff17 	bl	8022878 <floor>
 801ea4a:	ec51 0b10 	vmov	r0, r1, d0
 801ea4e:	f7e2 f8ab 	bl	8000ba8 <__aeabi_d2f>
 801ea52:	ee08 0a90 	vmov	s17, r0
 801ea56:	f7fe b8bd 	b.w	801cbd4 <iNemoEngine_API_Update+0x87c>
 801ea5a:	2c00      	cmp	r4, #0
 801ea5c:	f47f aa59 	bne.w	801df12 <iNemoEngine_API_Update+0x1bba>
 801ea60:	f8ad 40e8 	strh.w	r4, [sp, #232]	@ 0xe8
 801ea64:	f88d 40ea 	strb.w	r4, [sp, #234]	@ 0xea
 801ea68:	f88d 40f1 	strb.w	r4, [sp, #241]	@ 0xf1
 801ea6c:	f88d 40f3 	strb.w	r4, [sp, #243]	@ 0xf3
 801ea70:	f7ff ba5c 	b.w	801df2c <iNemoEngine_API_Update+0x1bd4>
 801ea74:	eddf 5aa7 	vldr	s11, [pc, #668]	@ 801ed14 <iNemoEngine_API_Update+0x29bc>
 801ea78:	ed9f 4aa7 	vldr	s8, [pc, #668]	@ 801ed18 <iNemoEngine_API_Update+0x29c0>
 801ea7c:	ed9f 6aa7 	vldr	s12, [pc, #668]	@ 801ed1c <iNemoEngine_API_Update+0x29c4>
 801ea80:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 801ed20 <iNemoEngine_API_Update+0x29c8>
 801ea84:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 801ed24 <iNemoEngine_API_Update+0x29cc>
 801ea88:	f7ff b9b2 	b.w	801ddf0 <iNemoEngine_API_Update+0x1a98>
 801ea8c:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 801ea90:	2400      	movs	r4, #0
 801ea92:	461a      	mov	r2, r3
 801ea94:	f7ff b89f 	b.w	801dbd6 <iNemoEngine_API_Update+0x187e>
 801ea98:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801ea9c:	eeb0 4a08 	vmov.f32	s8, #8	@ 0x40400000  3.0
 801eaa0:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801eaa4:	eee7 4a84 	vfma.f32	s9, s15, s8
 801eaa8:	f7ff b86b 	b.w	801db82 <iNemoEngine_API_Update+0x182a>
 801eaac:	3305      	adds	r3, #5
 801eaae:	6593      	str	r3, [r2, #88]	@ 0x58
 801eab0:	f7ff ba95 	b.w	801dfde <iNemoEngine_API_Update+0x1c86>
 801eab4:	edd2 4a48 	vldr	s9, [r2, #288]	@ 0x120
 801eab8:	eef4 4ae8 	vcmpe.f32	s9, s17
 801eabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eac0:	f341 8112 	ble.w	801fce8 <iNemoEngine_API_Update+0x3990>
 801eac4:	ed92 7a32 	vldr	s14, [r2, #200]	@ 0xc8
 801eac8:	eef4 8ac7 	vcmpe.f32	s17, s14
 801eacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ead0:	4613      	mov	r3, r2
 801ead2:	f101 8392 	bmi.w	80201fa <iNemoEngine_API_Update+0x3ea2>
 801ead6:	edd2 7a34 	vldr	s15, [r2, #208]	@ 0xd0
 801eada:	eef4 8ae7 	vcmpe.f32	s17, s15
 801eade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eae2:	f141 83a2 	bpl.w	802022a <iNemoEngine_API_Update+0x3ed2>
 801eae6:	edd3 3a33 	vldr	s7, [r3, #204]	@ 0xcc
 801eaea:	ed93 4a35 	vldr	s8, [r3, #212]	@ 0xd4
 801eaee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eaf2:	ee34 4a63 	vsub.f32	s8, s8, s7
 801eaf6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801eafa:	ee24 7a07 	vmul.f32	s14, s8, s14
 801eafe:	ee87 fa27 	vdiv.f32	s30, s14, s15
 801eb02:	ee3f fa23 	vadd.f32	s30, s30, s7
 801eb06:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 801eb0a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801eb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb12:	f2c1 83a3 	blt.w	802025c <iNemoEngine_API_Update+0x3f04>
 801eb16:	9b06      	ldr	r3, [sp, #24]
 801eb18:	ed93 7a38 	vldr	s14, [r3, #224]	@ 0xe0
 801eb1c:	eef4 8ac7 	vcmpe.f32	s17, s14
 801eb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb24:	f141 86ad 	bpl.w	8020882 <iNemoEngine_API_Update+0x452a>
 801eb28:	edd3 3a37 	vldr	s7, [r3, #220]	@ 0xdc
 801eb2c:	ed93 4a39 	vldr	s8, [r3, #228]	@ 0xe4
 801eb30:	ee37 7a67 	vsub.f32	s14, s14, s15
 801eb34:	ee34 4a63 	vsub.f32	s8, s8, s7
 801eb38:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801eb3c:	ee64 7a27 	vmul.f32	s15, s8, s15
 801eb40:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801eb44:	ee3f fa23 	vadd.f32	s30, s30, s7
 801eb48:	9b06      	ldr	r3, [sp, #24]
 801eb4a:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 801eb4e:	eef4 8ae7 	vcmpe.f32	s17, s15
 801eb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb56:	f2c1 83a3 	blt.w	80202a0 <iNemoEngine_API_Update+0x3f48>
 801eb5a:	9b06      	ldr	r3, [sp, #24]
 801eb5c:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 801eb60:	eef4 8ac7 	vcmpe.f32	s17, s14
 801eb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb68:	f141 86ca 	bpl.w	8020900 <iNemoEngine_API_Update+0x45a8>
 801eb6c:	edd3 3a3b 	vldr	s7, [r3, #236]	@ 0xec
 801eb70:	ed93 4a3d 	vldr	s8, [r3, #244]	@ 0xf4
 801eb74:	ee37 7a67 	vsub.f32	s14, s14, s15
 801eb78:	ee34 4a63 	vsub.f32	s8, s8, s7
 801eb7c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801eb80:	ee64 7a27 	vmul.f32	s15, s8, s15
 801eb84:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801eb88:	ee3f fa23 	vadd.f32	s30, s30, s7
 801eb8c:	9b06      	ldr	r3, [sp, #24]
 801eb8e:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 801eb92:	eef4 8ae7 	vcmpe.f32	s17, s15
 801eb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb9a:	f2c1 83a3 	blt.w	80202e4 <iNemoEngine_API_Update+0x3f8c>
 801eb9e:	9b06      	ldr	r3, [sp, #24]
 801eba0:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 801eba4:	eef4 8ac7 	vcmpe.f32	s17, s14
 801eba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebac:	f141 866c 	bpl.w	8020888 <iNemoEngine_API_Update+0x4530>
 801ebb0:	edd3 3a3f 	vldr	s7, [r3, #252]	@ 0xfc
 801ebb4:	ed93 4a41 	vldr	s8, [r3, #260]	@ 0x104
 801ebb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ebbc:	ee34 4a63 	vsub.f32	s8, s8, s7
 801ebc0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801ebc4:	ee64 7a27 	vmul.f32	s15, s8, s15
 801ebc8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801ebcc:	ee3f fa23 	vadd.f32	s30, s30, s7
 801ebd0:	9b06      	ldr	r3, [sp, #24]
 801ebd2:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 801ebd6:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ebda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebde:	f2c1 83a3 	blt.w	8020328 <iNemoEngine_API_Update+0x3fd0>
 801ebe2:	9b06      	ldr	r3, [sp, #24]
 801ebe4:	ed93 7a44 	vldr	s14, [r3, #272]	@ 0x110
 801ebe8:	eef4 8ac7 	vcmpe.f32	s17, s14
 801ebec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebf0:	f141 863c 	bpl.w	802086c <iNemoEngine_API_Update+0x4514>
 801ebf4:	edd3 3a43 	vldr	s7, [r3, #268]	@ 0x10c
 801ebf8:	ed93 4a45 	vldr	s8, [r3, #276]	@ 0x114
 801ebfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ec00:	ee34 4a63 	vsub.f32	s8, s8, s7
 801ec04:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801ec08:	ee64 7a27 	vmul.f32	s15, s8, s15
 801ec0c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801ec10:	ee3f fa23 	vadd.f32	s30, s30, s7
 801ec14:	9b06      	ldr	r3, [sp, #24]
 801ec16:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 801ec1a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec22:	f6fe ae38 	blt.w	801d896 <iNemoEngine_API_Update+0x153e>
 801ec26:	9b06      	ldr	r3, [sp, #24]
 801ec28:	ed93 4a47 	vldr	s8, [r3, #284]	@ 0x11c
 801ec2c:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 801ec30:	ee74 4ae7 	vsub.f32	s9, s9, s15
 801ec34:	ee37 7a44 	vsub.f32	s14, s14, s8
 801ec38:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801ec3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec40:	ee87 faa4 	vdiv.f32	s30, s15, s9
 801ec44:	ee3f fa04 	vadd.f32	s30, s30, s8
 801ec48:	f7fe be25 	b.w	801d896 <iNemoEngine_API_Update+0x153e>
 801ec4c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801ec50:	ee17 0a90 	vmov	r0, s15
 801ec54:	f7e1 fc78 	bl	8000548 <__aeabi_f2d>
 801ec58:	ec41 0b10 	vmov	d0, r0, r1
 801ec5c:	f003 fe0c 	bl	8022878 <floor>
 801ec60:	ec51 0b10 	vmov	r0, r1, d0
 801ec64:	f7e1 ffa0 	bl	8000ba8 <__aeabi_d2f>
 801ec68:	ee08 0a90 	vmov	s17, r0
 801ec6c:	f7fe b930 	b.w	801ced0 <iNemoEngine_API_Update+0xb78>
 801ec70:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801ec74:	ee17 0a90 	vmov	r0, s15
 801ec78:	f7e1 fc66 	bl	8000548 <__aeabi_f2d>
 801ec7c:	ec41 0b10 	vmov	d0, r0, r1
 801ec80:	f003 fdfa 	bl	8022878 <floor>
 801ec84:	ec51 0b10 	vmov	r0, r1, d0
 801ec88:	f7e1 ff8e 	bl	8000ba8 <__aeabi_d2f>
 801ec8c:	ee08 0a90 	vmov	s17, r0
 801ec90:	f7fe b8b5 	b.w	801cdfe <iNemoEngine_API_Update+0xaa6>
 801ec94:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801ec98:	ee17 0a90 	vmov	r0, s15
 801ec9c:	f7e1 fc54 	bl	8000548 <__aeabi_f2d>
 801eca0:	ec41 0b10 	vmov	d0, r0, r1
 801eca4:	f003 fde8 	bl	8022878 <floor>
 801eca8:	ec51 0b10 	vmov	r0, r1, d0
 801ecac:	f7e1 ff7c 	bl	8000ba8 <__aeabi_d2f>
 801ecb0:	ee0c 0a10 	vmov	s24, r0
 801ecb4:	f7fe b878 	b.w	801cda8 <iNemoEngine_API_Update+0xa50>
 801ecb8:	ee78 7a27 	vadd.f32	s15, s16, s15
 801ecbc:	ee17 0a90 	vmov	r0, s15
 801ecc0:	f7e1 fc42 	bl	8000548 <__aeabi_f2d>
 801ecc4:	ec41 0b10 	vmov	d0, r0, r1
 801ecc8:	f003 fdd6 	bl	8022878 <floor>
 801eccc:	ec51 0b10 	vmov	r0, r1, d0
 801ecd0:	f7e1 ff6a 	bl	8000ba8 <__aeabi_d2f>
 801ecd4:	ee08 0a10 	vmov	s16, r0
 801ecd8:	f7fe b83b 	b.w	801cd52 <iNemoEngine_API_Update+0x9fa>
 801ecdc:	ee78 7a27 	vadd.f32	s15, s16, s15
 801ece0:	ee17 0a90 	vmov	r0, s15
 801ece4:	f7e1 fc30 	bl	8000548 <__aeabi_f2d>
 801ece8:	ec41 0b10 	vmov	d0, r0, r1
 801ecec:	f003 fdc4 	bl	8022878 <floor>
 801ecf0:	ec51 0b10 	vmov	r0, r1, d0
 801ecf4:	f7e1 ff58 	bl	8000ba8 <__aeabi_d2f>
 801ecf8:	ee08 0a10 	vmov	s16, r0
 801ecfc:	f7fe b93e 	b.w	801cf7c <iNemoEngine_API_Update+0xc24>
 801ed00:	20000000 	.word	0x20000000
 801ed04:	404ca5dc 	.word	0x404ca5dc
 801ed08:	40568000 	.word	0x40568000
 801ed0c:	3dcccccd 	.word	0x3dcccccd
 801ed10:	3a83126f 	.word	0x3a83126f
 801ed14:	3c75c28f 	.word	0x3c75c28f
 801ed18:	391d4951 	.word	0x391d4951
 801ed1c:	383cbe62 	.word	0x383cbe62
 801ed20:	469c3e00 	.word	0x469c3e00
 801ed24:	43168000 	.word	0x43168000
 801ed28:	3d088889 	.word	0x3d088889
 801ed2c:	3e4ccccd 	.word	0x3e4ccccd
 801ed30:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801ed34:	ee17 0a90 	vmov	r0, s15
 801ed38:	f7e1 fc06 	bl	8000548 <__aeabi_f2d>
 801ed3c:	ec41 0b10 	vmov	d0, r0, r1
 801ed40:	f003 fd9a 	bl	8022878 <floor>
 801ed44:	ec51 0b10 	vmov	r0, r1, d0
 801ed48:	f7e1 ff2e 	bl	8000ba8 <__aeabi_d2f>
 801ed4c:	ee0c 0a10 	vmov	s24, r0
 801ed50:	f7fe b8e9 	b.w	801cf26 <iNemoEngine_API_Update+0xbce>
 801ed54:	2a00      	cmp	r2, #0
 801ed56:	f43f a910 	beq.w	801df7a <iNemoEngine_API_Update+0x1c22>
 801ed5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed5e:	ee39 9a47 	vsub.f32	s18, s18, s14
 801ed62:	eef0 7ac9 	vabs.f32	s15, s18
 801ed66:	ee29 9a09 	vmul.f32	s18, s18, s18
 801ed6a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801ed6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed72:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801ed76:	bfb8      	it	lt
 801ed78:	eef0 7a46 	vmovlt.f32	s15, s12
 801ed7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed80:	edcd 7a8d 	vstr	s15, [sp, #564]	@ 0x234
 801ed84:	f77f a900 	ble.w	801df88 <iNemoEngine_API_Update+0x1c30>
 801ed88:	eddd 7a86 	vldr	s15, [sp, #536]	@ 0x218
 801ed8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801ed90:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801ed94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed98:	f77f a8f6 	ble.w	801df88 <iNemoEngine_API_Update+0x1c30>
 801ed9c:	ee67 7a89 	vmul.f32	s15, s15, s18
 801eda0:	edcd 7a86 	vstr	s15, [sp, #536]	@ 0x218
 801eda4:	eddd 7a87 	vldr	s15, [sp, #540]	@ 0x21c
 801eda8:	ee67 7a89 	vmul.f32	s15, s15, s18
 801edac:	edcd 7a87 	vstr	s15, [sp, #540]	@ 0x21c
 801edb0:	eddd 7a88 	vldr	s15, [sp, #544]	@ 0x220
 801edb4:	ee27 9a89 	vmul.f32	s18, s15, s18
 801edb8:	ed8d 9a88 	vstr	s18, [sp, #544]	@ 0x220
 801edbc:	f7ff b8e4 	b.w	801df88 <iNemoEngine_API_Update+0x1c30>
 801edc0:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 801edc4:	2a01      	cmp	r2, #1
 801edc6:	f000 877b 	beq.w	801fcc0 <iNemoEngine_API_Update+0x3968>
 801edca:	2b02      	cmp	r3, #2
 801edcc:	f040 8778 	bne.w	801fcc0 <iNemoEngine_API_Update+0x3968>
 801edd0:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 801edd4:	9a06      	ldr	r2, [sp, #24]
 801edd6:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 801edda:	f240 1301 	movw	r3, #257	@ 0x101
 801edde:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
 801ede2:	2301      	movs	r3, #1
 801ede4:	f88d 30f0 	strb.w	r3, [sp, #240]	@ 0xf0
 801ede8:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 801edec:	ed92 6a64 	vldr	s12, [r2, #400]	@ 0x190
 801edf0:	ed8d 7a3d 	vstr	s14, [sp, #244]	@ 0xf4
 801edf4:	eecb 5a27 	vdiv.f32	s11, s22, s15
 801edf8:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 801edfc:	edcd 5a3e 	vstr	s11, [sp, #248]	@ 0xf8
 801ee00:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 801ee04:	eeb4 5a00 	vmov.f32	s10, #64	@ 0x3e000000  0.125
 801ee08:	ee26 6a05 	vmul.f32	s12, s12, s10
 801ee0c:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 801ee10:	eeb4 6ae8 	vcmpe.f32	s12, s17
 801ee14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee18:	f280 87d8 	bge.w	801fdcc <iNemoEngine_API_Update+0x3a74>
 801ee1c:	ed9d 6a18 	vldr	s12, [sp, #96]	@ 0x60
 801ee20:	eeb4 dac6 	vcmpe.f32	s26, s12
 801ee24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee28:	f341 83a4 	ble.w	8020574 <iNemoEngine_API_Update+0x421c>
 801ee2c:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 801ee30:	eeb4 6acb 	vcmpe.f32	s12, s22
 801ee34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee38:	f341 839c 	ble.w	8020574 <iNemoEngine_API_Update+0x421c>
 801ee3c:	ed9d 6a17 	vldr	s12, [sp, #92]	@ 0x5c
 801ee40:	eeb4 6aed 	vcmpe.f32	s12, s27
 801ee44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee48:	f341 8394 	ble.w	8020574 <iNemoEngine_API_Update+0x421c>
 801ee4c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801ee50:	eeb4 8ac6 	vcmpe.f32	s16, s12
 801ee54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee58:	f141 838c 	bpl.w	8020574 <iNemoEngine_API_Update+0x421c>
 801ee5c:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ee60:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 801ee64:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ee68:	eef4 7ac6 	vcmpe.f32	s15, s12
 801ee6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee70:	f141 8380 	bpl.w	8020574 <iNemoEngine_API_Update+0x421c>
 801ee74:	2300      	movs	r3, #0
 801ee76:	f8a2 31a6 	strh.w	r3, [r2, #422]	@ 0x1a6
 801ee7a:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 801ee7e:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 801ee82:	2a00      	cmp	r2, #0
 801ee84:	f040 87c7 	bne.w	801fe16 <iNemoEngine_API_Update+0x3abe>
 801ee88:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ee8a:	a840      	add	r0, sp, #256	@ 0x100
 801ee8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ee90:	4613      	mov	r3, r2
 801ee92:	edd2 7a00 	vldr	s15, [r2]
 801ee96:	3101      	adds	r1, #1
 801ee98:	330c      	adds	r3, #12
 801ee9a:	3204      	adds	r2, #4
 801ee9c:	461c      	mov	r4, r3
 801ee9e:	ed94 7a00 	vldr	s14, [r4]
 801eea2:	330c      	adds	r3, #12
 801eea4:	4598      	cmp	r8, r3
 801eea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801eeaa:	d1f7      	bne.n	801ee9c <iNemoEngine_API_Update+0x2b44>
 801eeac:	2902      	cmp	r1, #2
 801eeae:	ece0 7a01 	vstmia	r0!, {s15}
 801eeb2:	f108 0804 	add.w	r8, r8, #4
 801eeb6:	d1eb      	bne.n	801ee90 <iNemoEngine_API_Update+0x2b38>
 801eeb8:	ed5f 7a65 	vldr	s15, [pc, #-404]	@ 801ed28 <iNemoEngine_API_Update+0x29d0>
 801eebc:	9b06      	ldr	r3, [sp, #24]
 801eebe:	eddd 4a40 	vldr	s9, [sp, #256]	@ 0x100
 801eec2:	ed9d 5a41 	vldr	s10, [sp, #260]	@ 0x104
 801eec6:	eddd 5a42 	vldr	s11, [sp, #264]	@ 0x108
 801eeca:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 801eecc:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 801eed0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 801eed4:	ee25 5a27 	vmul.f32	s10, s10, s15
 801eed8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801eedc:	f503 71b2 	add.w	r1, r3, #356	@ 0x164
 801eee0:	4602      	mov	r2, r0
 801eee2:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 801eee6:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 801eeea:	ed93 7ad6 	vldr	s14, [r3, #856]	@ 0x358
 801eeee:	eef4 7ac7 	vcmpe.f32	s15, s14
 801eef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eef6:	f103 030c 	add.w	r3, r3, #12
 801eefa:	bf88      	it	hi
 801eefc:	eef0 7a47 	vmovhi.f32	s15, s14
 801ef00:	4293      	cmp	r3, r2
 801ef02:	d1f2      	bne.n	801eeea <iNemoEngine_API_Update+0x2b92>
 801ef04:	1d1a      	adds	r2, r3, #4
 801ef06:	4291      	cmp	r1, r2
 801ef08:	ece4 7a01 	vstmia	r4!, {s15}
 801ef0c:	d1e9      	bne.n	801eee2 <iNemoEngine_API_Update+0x2b8a>
 801ef0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ef10:	ed9d 4a3d 	vldr	s8, [sp, #244]	@ 0xf4
 801ef14:	edd3 7a00 	vldr	s15, [r3]
 801ef18:	ed9d 7a3e 	vldr	s14, [sp, #248]	@ 0xf8
 801ef1c:	ed9d 6a3f 	vldr	s12, [sp, #252]	@ 0xfc
 801ef20:	9b06      	ldr	r3, [sp, #24]
 801ef22:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 801ef26:	785b      	ldrb	r3, [r3, #1]
 801ef28:	ee97 7a85 	vfnms.f32	s14, s15, s10
 801ef2c:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 801ef30:	eef0 4a47 	vmov.f32	s9, s14
 801ef34:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 801ef38:	ed8d 7a41 	vstr	s14, [sp, #260]	@ 0x104
 801ef3c:	ed8d 6a42 	vstr	s12, [sp, #264]	@ 0x108
 801ef40:	b13b      	cbz	r3, 801ef52 <iNemoEngine_API_Update+0x2bfa>
 801ef42:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801ef46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ef4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef4e:	f101 83e1 	bmi.w	8020714 <iNemoEngine_API_Update+0x43bc>
 801ef52:	9b06      	ldr	r3, [sp, #24]
 801ef54:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
 801ef58:	2a1e      	cmp	r2, #30
 801ef5a:	f001 843c 	beq.w	80207d6 <iNemoEngine_API_Update+0x447e>
 801ef5e:	1c53      	adds	r3, r2, #1
 801ef60:	2aff      	cmp	r2, #255	@ 0xff
 801ef62:	9906      	ldr	r1, [sp, #24]
 801ef64:	bf14      	ite	ne
 801ef66:	b2db      	uxtbne	r3, r3
 801ef68:	23ff      	moveq	r3, #255	@ 0xff
 801ef6a:	2200      	movs	r2, #0
 801ef6c:	f881 31a1 	strb.w	r3, [r1, #417]	@ 0x1a1
 801ef70:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801ef74:	464b      	mov	r3, r9
 801ef76:	f7ff bb46 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 801ef7a:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 801ed2c <iNemoEngine_API_Update+0x29d4>
 801ef7e:	4603      	mov	r3, r0
 801ef80:	f7fd bc03 	b.w	801c78a <iNemoEngine_API_Update+0x432>
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	f43e afe0 	beq.w	801df4a <iNemoEngine_API_Update+0x1bf2>
 801ef8a:	f89d 30e8 	ldrb.w	r3, [sp, #232]	@ 0xe8
 801ef8e:	2b01      	cmp	r3, #1
 801ef90:	d002      	beq.n	801ef98 <iNemoEngine_API_Update+0x2c40>
 801ef92:	2c01      	cmp	r4, #1
 801ef94:	f47e afe2 	bne.w	801df5c <iNemoEngine_API_Update+0x1c04>
 801ef98:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c
 801ef9c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801efa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efa4:	bfb8      	it	lt
 801efa6:	eeb0 5a67 	vmovlt.f32	s10, s15
 801efaa:	ed8d 5a83 	vstr	s10, [sp, #524]	@ 0x20c
 801efae:	ed8d 5a84 	vstr	s10, [sp, #528]	@ 0x210
 801efb2:	ed8d 5a85 	vstr	s10, [sp, #532]	@ 0x214
 801efb6:	f7fe bfd1 	b.w	801df5c <iNemoEngine_API_Update+0x1c04>
 801efba:	9b06      	ldr	r3, [sp, #24]
 801efbc:	49c6      	ldr	r1, [pc, #792]	@ (801f2d8 <iNemoEngine_API_Update+0x2f80>)
 801efbe:	ed93 ba05 	vldr	s22, [r3, #20]
 801efc2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801efc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801efca:	4618      	mov	r0, r3
 801efcc:	f7fd bbc9 	b.w	801c762 <iNemoEngine_API_Update+0x40a>
 801efd0:	9b06      	ldr	r3, [sp, #24]
 801efd2:	49c2      	ldr	r1, [pc, #776]	@ (801f2dc <iNemoEngine_API_Update+0x2f84>)
 801efd4:	ed93 ba05 	vldr	s22, [r3, #20]
 801efd8:	4618      	mov	r0, r3
 801efda:	f7fd bbc2 	b.w	801c762 <iNemoEngine_API_Update+0x40a>
 801efde:	4611      	mov	r1, r2
 801efe0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801efe2:	2a00      	cmp	r2, #0
 801efe4:	dd0c      	ble.n	801f000 <iNemoEngine_API_Update+0x2ca8>
 801efe6:	ed9d 7a03 	vldr	s14, [sp, #12]
 801efea:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 801efee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801eff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eff6:	dd03      	ble.n	801f000 <iNemoEngine_API_Update+0x2ca8>
 801eff8:	3a01      	subs	r2, #1
 801effa:	65ca      	str	r2, [r1, #92]	@ 0x5c
 801effc:	f7fe bfef 	b.w	801dfde <iNemoEngine_API_Update+0x1c86>
 801f000:	ed9d 7a16 	vldr	s14, [sp, #88]	@ 0x58
 801f004:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801f008:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f00c:	eeb4 bac7 	vcmpe.f32	s22, s14
 801f010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f014:	f57e afe3 	bpl.w	801dfde <iNemoEngine_API_Update+0x1c86>
 801f018:	ed9d 7a17 	vldr	s14, [sp, #92]	@ 0x5c
 801f01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f020:	eef4 dae7 	vcmpe.f32	s27, s15
 801f024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f028:	f57e afd9 	bpl.w	801dfde <iNemoEngine_API_Update+0x1c86>
 801f02c:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 801f030:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 801f034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f03c:	f341 8492 	ble.w	8020964 <iNemoEngine_API_Update+0x460c>
 801f040:	9a06      	ldr	r2, [sp, #24]
 801f042:	3303      	adds	r3, #3
 801f044:	e434      	b.n	801e8b0 <iNemoEngine_API_Update+0x2558>
 801f046:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 801f2e0 <iNemoEngine_API_Update+0x2f88>
 801f04a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f052:	f57e ae7b 	bpl.w	801dd4c <iNemoEngine_API_Update+0x19f4>
 801f056:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 801f2e4 <iNemoEngine_API_Update+0x2f8c>
 801f05a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f062:	f280 80c9 	bge.w	801f1f8 <iNemoEngine_API_Update+0x2ea0>
 801f066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f06a:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 801f2e8 <iNemoEngine_API_Update+0x2f90>
 801f06e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f076:	f280 80d5 	bge.w	801f224 <iNemoEngine_API_Update+0x2ecc>
 801f07a:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 801f2ec <iNemoEngine_API_Update+0x2f94>
 801f07e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f086:	f280 80e3 	bge.w	801f250 <iNemoEngine_API_Update+0x2ef8>
 801f08a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801f2f0 <iNemoEngine_API_Update+0x2f98>
 801f08e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f096:	f280 80f1 	bge.w	801f27c <iNemoEngine_API_Update+0x2f24>
 801f09a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 801f2f4 <iNemoEngine_API_Update+0x2f9c>
 801f09e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0a6:	f280 80ff 	bge.w	801f2a8 <iNemoEngine_API_Update+0x2f50>
 801f0aa:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801f0ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0b6:	db0d      	blt.n	801f0d4 <iNemoEngine_API_Update+0x2d7c>
 801f0b8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801f0bc:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 801f2f8 <iNemoEngine_API_Update+0x2fa0>
 801f0c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f0c4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801f0c8:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f0cc:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 801f2fc <iNemoEngine_API_Update+0x2fa4>
 801f0d0:	eea6 7a86 	vfma.f32	s14, s13, s12
 801f0d4:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 801f300 <iNemoEngine_API_Update+0x2fa8>
 801f0d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0e0:	f141 82fa 	bpl.w	80206d8 <iNemoEngine_API_Update+0x4380>
 801f0e4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 801f2e0 <iNemoEngine_API_Update+0x2f88>
 801f0e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0f0:	f2c1 82fa 	blt.w	80206e8 <iNemoEngine_API_Update+0x4390>
 801f0f4:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 801f2e4 <iNemoEngine_API_Update+0x2f8c>
 801f0f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f100:	f141 8296 	bpl.w	8020630 <iNemoEngine_API_Update+0x42d8>
 801f104:	ed9f 6a76 	vldr	s12, [pc, #472]	@ 801f2e0 <iNemoEngine_API_Update+0x2f88>
 801f108:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 801f304 <iNemoEngine_API_Update+0x2fac>
 801f10c:	eddf 5a7e 	vldr	s11, [pc, #504]	@ 801f308 <iNemoEngine_API_Update+0x2fb0>
 801f110:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801f114:	ee26 6a26 	vmul.f32	s12, s12, s13
 801f118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f11c:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f120:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 801f2e8 <iNemoEngine_API_Update+0x2f90>
 801f124:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f12c:	f2c1 8296 	blt.w	802065c <iNemoEngine_API_Update+0x4304>
 801f130:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801f2ec <iNemoEngine_API_Update+0x2f94>
 801f134:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f13c:	f141 8296 	bpl.w	802066c <iNemoEngine_API_Update+0x4314>
 801f140:	ed9f 6a69 	vldr	s12, [pc, #420]	@ 801f2e8 <iNemoEngine_API_Update+0x2f90>
 801f144:	eddf 6a71 	vldr	s13, [pc, #452]	@ 801f30c <iNemoEngine_API_Update+0x2fb4>
 801f148:	eddf 5a71 	vldr	s11, [pc, #452]	@ 801f310 <iNemoEngine_API_Update+0x2fb8>
 801f14c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801f150:	ee26 6a26 	vmul.f32	s12, s12, s13
 801f154:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f314 <iNemoEngine_API_Update+0x2fbc>
 801f158:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f15c:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 801f2f0 <iNemoEngine_API_Update+0x2f98>
 801f160:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f168:	f2c1 8296 	blt.w	8020698 <iNemoEngine_API_Update+0x4340>
 801f16c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 801f2f4 <iNemoEngine_API_Update+0x2f9c>
 801f170:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f178:	f141 8296 	bpl.w	80206a8 <iNemoEngine_API_Update+0x4350>
 801f17c:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 801f2f0 <iNemoEngine_API_Update+0x2f98>
 801f180:	eddf 6a65 	vldr	s13, [pc, #404]	@ 801f318 <iNemoEngine_API_Update+0x2fc0>
 801f184:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801f188:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 801f18c:	ee26 6a26 	vmul.f32	s12, s12, s13
 801f190:	eef7 6a0c 	vmov.f32	s13, #124	@ 0x3fe00000  1.750
 801f194:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f198:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801f19c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1a4:	db0d      	blt.n	801f1c2 <iNemoEngine_API_Update+0x2e6a>
 801f1a6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801f1aa:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 801f31c <iNemoEngine_API_Update+0x2fc4>
 801f1ae:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801f1b2:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 801f1b6:	ee26 6a26 	vmul.f32	s12, s12, s13
 801f1ba:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801f320 <iNemoEngine_API_Update+0x2fc8>
 801f1be:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f1c2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801f1c6:	ee37 6a06 	vadd.f32	s12, s14, s12
 801f1ca:	eeb0 5a00 	vmov.f32	s10, #0	@ 0x40000000  2.0
 801f1ce:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801f1d2:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801f2e4 <iNemoEngine_API_Update+0x2f8c>
 801f1d6:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 801f2e0 <iNemoEngine_API_Update+0x2f88>
 801f1da:	eef4 5ac6 	vcmpe.f32	s11, s12
 801f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1e2:	bfb8      	it	lt
 801f1e4:	eef0 5a46 	vmovlt.f32	s11, s12
 801f1e8:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 801f324 <iNemoEngine_API_Update+0x2fcc>
 801f1ec:	ee25 4a84 	vmul.f32	s8, s11, s8
 801f1f0:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f1f4:	f7fe bdfc 	b.w	801ddf0 <iNemoEngine_API_Update+0x1a98>
 801f1f8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801f2e8 <iNemoEngine_API_Update+0x2f90>
 801f1fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f204:	d50e      	bpl.n	801f224 <iNemoEngine_API_Update+0x2ecc>
 801f206:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801f2e4 <iNemoEngine_API_Update+0x2f8c>
 801f20a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801f328 <iNemoEngine_API_Update+0x2fd0>
 801f20e:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 801f32c <iNemoEngine_API_Update+0x2fd4>
 801f212:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f216:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f21a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801f330 <iNemoEngine_API_Update+0x2fd8>
 801f21e:	eea6 7a86 	vfma.f32	s14, s13, s12
 801f222:	e72a      	b.n	801f07a <iNemoEngine_API_Update+0x2d22>
 801f224:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801f2ec <iNemoEngine_API_Update+0x2f94>
 801f228:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f230:	d50e      	bpl.n	801f250 <iNemoEngine_API_Update+0x2ef8>
 801f232:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 801f2e8 <iNemoEngine_API_Update+0x2f90>
 801f236:	ed9f 6a36 	vldr	s12, [pc, #216]	@ 801f310 <iNemoEngine_API_Update+0x2fb8>
 801f23a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f23e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801f242:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f246:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801f24a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801f24e:	e71c      	b.n	801f08a <iNemoEngine_API_Update+0x2d32>
 801f250:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801f2f0 <iNemoEngine_API_Update+0x2f98>
 801f254:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f25c:	d50e      	bpl.n	801f27c <iNemoEngine_API_Update+0x2f24>
 801f25e:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801f2ec <iNemoEngine_API_Update+0x2f94>
 801f262:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f266:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801f26a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f26e:	eeb3 6a04 	vmov.f32	s12, #52	@ 0x41a00000  20.0
 801f272:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801f276:	eea6 7a86 	vfma.f32	s14, s13, s12
 801f27a:	e70e      	b.n	801f09a <iNemoEngine_API_Update+0x2d42>
 801f27c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 801f2f4 <iNemoEngine_API_Update+0x2f9c>
 801f280:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f288:	d50e      	bpl.n	801f2a8 <iNemoEngine_API_Update+0x2f50>
 801f28a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 801f2f0 <iNemoEngine_API_Update+0x2f98>
 801f28e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 801f334 <iNemoEngine_API_Update+0x2fdc>
 801f292:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f296:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 801f29a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f29e:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 801f2a2:	eea6 7a86 	vfma.f32	s14, s13, s12
 801f2a6:	e700      	b.n	801f0aa <iNemoEngine_API_Update+0x2d52>
 801f2a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801f2ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2b4:	f57f af00 	bpl.w	801f0b8 <iNemoEngine_API_Update+0x2d60>
 801f2b8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801f2f4 <iNemoEngine_API_Update+0x2f9c>
 801f2bc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 801f338 <iNemoEngine_API_Update+0x2fe0>
 801f2c0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 801f33c <iNemoEngine_API_Update+0x2fe4>
 801f2c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f2c8:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f2cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 801f340 <iNemoEngine_API_Update+0x2fe8>
 801f2d0:	eea6 7a86 	vfma.f32	s14, s13, s12
 801f2d4:	e6fe      	b.n	801f0d4 <iNemoEngine_API_Update+0x2d7c>
 801f2d6:	bf00      	nop
 801f2d8:	3727c5ac 	.word	0x3727c5ac
 801f2dc:	3ac49ba6 	.word	0x3ac49ba6
 801f2e0:	3c23d70a 	.word	0x3c23d70a
 801f2e4:	3c75c28f 	.word	0x3c75c28f
 801f2e8:	3cf5c28f 	.word	0x3cf5c28f
 801f2ec:	3d4ccccd 	.word	0x3d4ccccd
 801f2f0:	3dcccccd 	.word	0x3dcccccd
 801f2f4:	3e4ccccd 	.word	0x3e4ccccd
 801f2f8:	46979000 	.word	0x46979000
 801f2fc:	4415c000 	.word	0x4415c000
 801f300:	3ba3d70a 	.word	0x3ba3d70a
 801f304:	3d4cccc0 	.word	0x3d4cccc0
 801f308:	43480000 	.word	0x43480000
 801f30c:	3eb33334 	.word	0x3eb33334
 801f310:	4247ffff 	.word	0x4247ffff
 801f314:	3f933333 	.word	0x3f933333
 801f318:	410c0000 	.word	0x410c0000
 801f31c:	42c80000 	.word	0x42c80000
 801f320:	424a0000 	.word	0x424a0000
 801f324:	3b449ba6 	.word	0x3b449ba6
 801f328:	3ecccccc 	.word	0x3ecccccc
 801f32c:	42855556 	.word	0x42855556
 801f330:	3fcccccd 	.word	0x3fcccccd
 801f334:	42d40000 	.word	0x42d40000
 801f338:	43f00000 	.word	0x43f00000
 801f33c:	40555555 	.word	0x40555555
 801f340:	42ee0000 	.word	0x42ee0000
 801f344:	4615      	mov	r5, r2
 801f346:	f205 47b4 	addw	r7, r5, #1204	@ 0x4b4
 801f34a:	49d7      	ldr	r1, [pc, #860]	@ (801f6a8 <iNemoEngine_API_Update+0x3350>)
 801f34c:	4ad7      	ldr	r2, [pc, #860]	@ (801f6ac <iNemoEngine_API_Update+0x3354>)
 801f34e:	4bd8      	ldr	r3, [pc, #864]	@ (801f6b0 <iNemoEngine_API_Update+0x3358>)
 801f350:	2000      	movs	r0, #0
 801f352:	f885 0318 	strb.w	r0, [r5, #792]	@ 0x318
 801f356:	f205 6824 	addw	r8, r5, #1572	@ 0x624
 801f35a:	6039      	str	r1, [r7, #0]
 801f35c:	f205 7194 	addw	r1, r5, #1940	@ 0x794
 801f360:	f8c8 2000 	str.w	r2, [r8]
 801f364:	600b      	str	r3, [r1, #0]
 801f366:	f895 64b1 	ldrb.w	r6, [r5, #1201]	@ 0x4b1
 801f36a:	911b      	str	r1, [sp, #108]	@ 0x6c
 801f36c:	2e00      	cmp	r6, #0
 801f36e:	f001 8297 	beq.w	80208a0 <iNemoEngine_API_Update+0x4548>
 801f372:	eddf 7ad0 	vldr	s15, [pc, #832]	@ 801f6b4 <iNemoEngine_API_Update+0x335c>
 801f376:	ee68 faa7 	vmul.f32	s31, s17, s15
 801f37a:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 801f37e:	ee28 fa27 	vmul.f32	s30, s16, s15
 801f382:	ee6c da27 	vmul.f32	s27, s24, s15
 801f386:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801f38a:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 801f38e:	ee17 0a90 	vmov	r0, s15
 801f392:	f7e1 f8d9 	bl	8000548 <__aeabi_f2d>
 801f396:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801f39a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f39e:	ee17 0a90 	vmov	r0, s15
 801f3a2:	f7e1 f8d1 	bl	8000548 <__aeabi_f2d>
 801f3a6:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801f3aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801f3ae:	ee17 0a90 	vmov	r0, s15
 801f3b2:	f7e1 f8c9 	bl	8000548 <__aeabi_f2d>
 801f3b6:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801f3ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801f3be:	ee17 0a90 	vmov	r0, s15
 801f3c2:	f7e1 f8c1 	bl	8000548 <__aeabi_f2d>
 801f3c6:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801f3ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f3ce:	ee17 0a90 	vmov	r0, s15
 801f3d2:	f7e1 f8b9 	bl	8000548 <__aeabi_f2d>
 801f3d6:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801f3da:	4602      	mov	r2, r0
 801f3dc:	460b      	mov	r3, r1
 801f3de:	ee17 0a90 	vmov	r0, s15
 801f3e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f3e6:	f7e1 f8af 	bl	8000548 <__aeabi_f2d>
 801f3ea:	9b06      	ldr	r3, [sp, #24]
 801f3ec:	ed9f bab8 	vldr	s22, [pc, #736]	@ 801f6d0 <iNemoEngine_API_Update+0x3378>
 801f3f0:	eef0 7aef 	vabs.f32	s15, s31
 801f3f4:	edcd 7a03 	vstr	s15, [sp, #12]
 801f3f8:	eef0 7acf 	vabs.f32	s15, s30
 801f3fc:	f503 6597 	add.w	r5, r3, #1208	@ 0x4b8
 801f400:	edcd 7a04 	vstr	s15, [sp, #16]
 801f404:	230c      	movs	r3, #12
 801f406:	eef0 7aed 	vabs.f32	s15, s27
 801f40a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801f40e:	fb13 5606 	smlabb	r6, r3, r6, r5
 801f412:	edcd 7a05 	vstr	s15, [sp, #20]
 801f416:	46aa      	mov	sl, r5
 801f418:	e060      	b.n	801f4dc <iNemoEngine_API_Update+0x3184>
 801f41a:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 801f6b8 <iNemoEngine_API_Update+0x3360>
 801f41e:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f426:	f280 8162 	bge.w	801f6ee <iNemoEngine_API_Update+0x3396>
 801f42a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801f6bc <iNemoEngine_API_Update+0x3364>
 801f42e:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f436:	f300 816c 	bgt.w	801f712 <iNemoEngine_API_Update+0x33ba>
 801f43a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801f43e:	f003 f99f 	bl	8022780 <ceil>
 801f442:	ec51 0b10 	vmov	r0, r1, d0
 801f446:	f7e1 fbaf 	bl	8000ba8 <__aeabi_d2f>
 801f44a:	eddd 7a04 	vldr	s15, [sp, #16]
 801f44e:	f8ca 0000 	str.w	r0, [sl]
 801f452:	eef4 7acb 	vcmpe.f32	s15, s22
 801f456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f45a:	f140 8121 	bpl.w	801f6a0 <iNemoEngine_API_Update+0x3348>
 801f45e:	eddf 7a96 	vldr	s15, [pc, #600]	@ 801f6b8 <iNemoEngine_API_Update+0x3360>
 801f462:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f46a:	f280 8137 	bge.w	801f6dc <iNemoEngine_API_Update+0x3384>
 801f46e:	eddf 7a93 	vldr	s15, [pc, #588]	@ 801f6bc <iNemoEngine_API_Update+0x3364>
 801f472:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f47a:	f300 8257 	bgt.w	801f92c <iNemoEngine_API_Update+0x35d4>
 801f47e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f482:	f003 f97d 	bl	8022780 <ceil>
 801f486:	ec51 0b10 	vmov	r0, r1, d0
 801f48a:	f7e1 fb8d 	bl	8000ba8 <__aeabi_d2f>
 801f48e:	eddd 7a05 	vldr	s15, [sp, #20]
 801f492:	f8ca 0004 	str.w	r0, [sl, #4]
 801f496:	eef4 7acb 	vcmpe.f32	s15, s22
 801f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f49e:	d527      	bpl.n	801f4f0 <iNemoEngine_API_Update+0x3198>
 801f4a0:	eddf 7a85 	vldr	s15, [pc, #532]	@ 801f6b8 <iNemoEngine_API_Update+0x3360>
 801f4a4:	eeb4 cae7 	vcmpe.f32	s24, s15
 801f4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4ac:	f280 8128 	bge.w	801f700 <iNemoEngine_API_Update+0x33a8>
 801f4b0:	eddf 7a82 	vldr	s15, [pc, #520]	@ 801f6bc <iNemoEngine_API_Update+0x3364>
 801f4b4:	eeb4 cae7 	vcmpe.f32	s24, s15
 801f4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4bc:	f300 812b 	bgt.w	801f716 <iNemoEngine_API_Update+0x33be>
 801f4c0:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 801f4c4:	f003 f95c 	bl	8022780 <ceil>
 801f4c8:	ec51 0b10 	vmov	r0, r1, d0
 801f4cc:	f7e1 fb6c 	bl	8000ba8 <__aeabi_d2f>
 801f4d0:	f8ca 0008 	str.w	r0, [sl, #8]
 801f4d4:	f10a 0a0c 	add.w	sl, sl, #12
 801f4d8:	45b2      	cmp	sl, r6
 801f4da:	d011      	beq.n	801f500 <iNemoEngine_API_Update+0x31a8>
 801f4dc:	eddd 7a03 	vldr	s15, [sp, #12]
 801f4e0:	eef4 7acb 	vcmpe.f32	s15, s22
 801f4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4e8:	d497      	bmi.n	801f41a <iNemoEngine_API_Update+0x30c2>
 801f4ea:	ee1f 0a90 	vmov	r0, s31
 801f4ee:	e7ac      	b.n	801f44a <iNemoEngine_API_Update+0x30f2>
 801f4f0:	ee1d 0a90 	vmov	r0, s27
 801f4f4:	f10a 0a0c 	add.w	sl, sl, #12
 801f4f8:	f84a 0c04 	str.w	r0, [sl, #-4]
 801f4fc:	45b2      	cmp	sl, r6
 801f4fe:	d1ed      	bne.n	801f4dc <iNemoEngine_API_Update+0x3184>
 801f500:	9b06      	ldr	r3, [sp, #24]
 801f502:	f893 9621 	ldrb.w	r9, [r3, #1569]	@ 0x621
 801f506:	f503 66c5 	add.w	r6, r3, #1576	@ 0x628
 801f50a:	f1b9 0f00 	cmp.w	r9, #0
 801f50e:	f000 8114 	beq.w	801f73a <iNemoEngine_API_Update+0x33e2>
 801f512:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 801f6c0 <iNemoEngine_API_Update+0x3368>
 801f516:	ee6a faa7 	vmul.f32	s31, s21, s15
 801f51a:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 801f51e:	ee2a fa27 	vmul.f32	s30, s20, s15
 801f522:	ee69 daa7 	vmul.f32	s27, s19, s15
 801f526:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801f52a:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801f52e:	ee17 0a90 	vmov	r0, s15
 801f532:	f7e1 f809 	bl	8000548 <__aeabi_f2d>
 801f536:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801f53a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f53e:	ee17 0a90 	vmov	r0, s15
 801f542:	f7e1 f801 	bl	8000548 <__aeabi_f2d>
 801f546:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801f54a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801f54e:	ee17 0a90 	vmov	r0, s15
 801f552:	f7e0 fff9 	bl	8000548 <__aeabi_f2d>
 801f556:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801f55a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801f55e:	ee17 0a90 	vmov	r0, s15
 801f562:	f7e0 fff1 	bl	8000548 <__aeabi_f2d>
 801f566:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801f56a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f56e:	ee17 0a90 	vmov	r0, s15
 801f572:	f7e0 ffe9 	bl	8000548 <__aeabi_f2d>
 801f576:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801f57a:	4602      	mov	r2, r0
 801f57c:	460b      	mov	r3, r1
 801f57e:	ee17 0a90 	vmov	r0, s15
 801f582:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f586:	f7e0 ffdf 	bl	8000548 <__aeabi_f2d>
 801f58a:	eef0 7aef 	vabs.f32	s15, s31
 801f58e:	9b06      	ldr	r3, [sp, #24]
 801f590:	edcd 7a03 	vstr	s15, [sp, #12]
 801f594:	eef0 7acf 	vabs.f32	s15, s30
 801f598:	edcd 7a04 	vstr	s15, [sp, #16]
 801f59c:	eef0 7aed 	vabs.f32	s15, s27
 801f5a0:	f503 66c5 	add.w	r6, r3, #1576	@ 0x628
 801f5a4:	edcd 7a05 	vstr	s15, [sp, #20]
 801f5a8:	230c      	movs	r3, #12
 801f5aa:	eef0 7a6c 	vmov.f32	s15, s25
 801f5ae:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801f5b2:	eef0 ca48 	vmov.f32	s25, s16
 801f5b6:	ed9f ba46 	vldr	s22, [pc, #280]	@ 801f6d0 <iNemoEngine_API_Update+0x3378>
 801f5ba:	eeb0 8a4d 	vmov.f32	s16, s26
 801f5be:	fb13 6909 	smlabb	r9, r3, r9, r6
 801f5c2:	46b3      	mov	fp, r6
 801f5c4:	eeb0 da67 	vmov.f32	s26, s15
 801f5c8:	e060      	b.n	801f68c <iNemoEngine_API_Update+0x3334>
 801f5ca:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 801f6c4 <iNemoEngine_API_Update+0x336c>
 801f5ce:	eef4 aae7 	vcmpe.f32	s21, s15
 801f5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5d6:	f280 8197 	bge.w	801f908 <iNemoEngine_API_Update+0x35b0>
 801f5da:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801f6c8 <iNemoEngine_API_Update+0x3370>
 801f5de:	eef4 aae7 	vcmpe.f32	s21, s15
 801f5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5e6:	f300 81a3 	bgt.w	801f930 <iNemoEngine_API_Update+0x35d8>
 801f5ea:	ed9d 0b08 	vldr	d0, [sp, #32]
 801f5ee:	f003 f8c7 	bl	8022780 <ceil>
 801f5f2:	ec51 0b10 	vmov	r0, r1, d0
 801f5f6:	f7e1 fad7 	bl	8000ba8 <__aeabi_d2f>
 801f5fa:	eddd 7a04 	vldr	s15, [sp, #16]
 801f5fe:	f8cb 0000 	str.w	r0, [fp]
 801f602:	eef4 7acb 	vcmpe.f32	s15, s22
 801f606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f60a:	f140 8171 	bpl.w	801f8f0 <iNemoEngine_API_Update+0x3598>
 801f60e:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801f6c4 <iNemoEngine_API_Update+0x336c>
 801f612:	eeb4 aae7 	vcmpe.f32	s20, s15
 801f616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f61a:	f280 816c 	bge.w	801f8f6 <iNemoEngine_API_Update+0x359e>
 801f61e:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 801f6c8 <iNemoEngine_API_Update+0x3370>
 801f622:	eeb4 aae7 	vcmpe.f32	s20, s15
 801f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f62a:	f300 81bd 	bgt.w	801f9a8 <iNemoEngine_API_Update+0x3650>
 801f62e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f632:	f003 f8a5 	bl	8022780 <ceil>
 801f636:	ec51 0b10 	vmov	r0, r1, d0
 801f63a:	f7e1 fab5 	bl	8000ba8 <__aeabi_d2f>
 801f63e:	eddd 7a05 	vldr	s15, [sp, #20]
 801f642:	f8cb 0004 	str.w	r0, [fp, #4]
 801f646:	eef4 7acb 	vcmpe.f32	s15, s22
 801f64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f64e:	d564      	bpl.n	801f71a <iNemoEngine_API_Update+0x33c2>
 801f650:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 801f6c4 <iNemoEngine_API_Update+0x336c>
 801f654:	eef4 9ae7 	vcmpe.f32	s19, s15
 801f658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f65c:	f280 815d 	bge.w	801f91a <iNemoEngine_API_Update+0x35c2>
 801f660:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801f6c8 <iNemoEngine_API_Update+0x3370>
 801f664:	eef4 9ae7 	vcmpe.f32	s19, s15
 801f668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f66c:	f300 8162 	bgt.w	801f934 <iNemoEngine_API_Update+0x35dc>
 801f670:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 801f674:	f003 f884 	bl	8022780 <ceil>
 801f678:	ec51 0b10 	vmov	r0, r1, d0
 801f67c:	f7e1 fa94 	bl	8000ba8 <__aeabi_d2f>
 801f680:	f8cb 0008 	str.w	r0, [fp, #8]
 801f684:	f10b 0b0c 	add.w	fp, fp, #12
 801f688:	45cb      	cmp	fp, r9
 801f68a:	d04e      	beq.n	801f72a <iNemoEngine_API_Update+0x33d2>
 801f68c:	eddd 7a03 	vldr	s15, [sp, #12]
 801f690:	eef4 7acb 	vcmpe.f32	s15, s22
 801f694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f698:	d497      	bmi.n	801f5ca <iNemoEngine_API_Update+0x3272>
 801f69a:	ee1f 0a90 	vmov	r0, s31
 801f69e:	e7ac      	b.n	801f5fa <iNemoEngine_API_Update+0x32a2>
 801f6a0:	ee1f 0a10 	vmov	r0, s30
 801f6a4:	e6f3      	b.n	801f48e <iNemoEngine_API_Update+0x3136>
 801f6a6:	bf00      	nop
 801f6a8:	3a7001e0 	.word	0x3a7001e0
 801f6ac:	3a000100 	.word	0x3a000100
 801f6b0:	3a8c0118 	.word	0x3a8c0118
 801f6b4:	44888777 	.word	0x44888777
 801f6b8:	39f001e1 	.word	0x39f001e1
 801f6bc:	b9f001e1 	.word	0xb9f001e1
 801f6c0:	44fffe00 	.word	0x44fffe00
 801f6c4:	39800100 	.word	0x39800100
 801f6c8:	b9800100 	.word	0xb9800100
 801f6cc:	446a0ccd 	.word	0x446a0ccd
 801f6d0:	4b000000 	.word	0x4b000000
 801f6d4:	3cfaad3b 	.word	0x3cfaad3b
 801f6d8:	bcfaad3b 	.word	0xbcfaad3b
 801f6dc:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801f6e0:	f003 f8ca 	bl	8022878 <floor>
 801f6e4:	ec51 0b10 	vmov	r0, r1, d0
 801f6e8:	f7e1 fa5e 	bl	8000ba8 <__aeabi_d2f>
 801f6ec:	e6cf      	b.n	801f48e <iNemoEngine_API_Update+0x3136>
 801f6ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801f6f2:	f003 f8c1 	bl	8022878 <floor>
 801f6f6:	ec51 0b10 	vmov	r0, r1, d0
 801f6fa:	f7e1 fa55 	bl	8000ba8 <__aeabi_d2f>
 801f6fe:	e6a4      	b.n	801f44a <iNemoEngine_API_Update+0x30f2>
 801f700:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801f704:	f003 f8b8 	bl	8022878 <floor>
 801f708:	ec51 0b10 	vmov	r0, r1, d0
 801f70c:	f7e1 fa4c 	bl	8000ba8 <__aeabi_d2f>
 801f710:	e6de      	b.n	801f4d0 <iNemoEngine_API_Update+0x3178>
 801f712:	4648      	mov	r0, r9
 801f714:	e699      	b.n	801f44a <iNemoEngine_API_Update+0x30f2>
 801f716:	4648      	mov	r0, r9
 801f718:	e6da      	b.n	801f4d0 <iNemoEngine_API_Update+0x3178>
 801f71a:	ee1d 0a90 	vmov	r0, s27
 801f71e:	f10b 0b0c 	add.w	fp, fp, #12
 801f722:	f84b 0c04 	str.w	r0, [fp, #-4]
 801f726:	45cb      	cmp	fp, r9
 801f728:	d1b0      	bne.n	801f68c <iNemoEngine_API_Update+0x3334>
 801f72a:	eef0 7a4d 	vmov.f32	s15, s26
 801f72e:	eeb0 da48 	vmov.f32	s26, s16
 801f732:	eeb0 8a6c 	vmov.f32	s16, s25
 801f736:	eef0 ca67 	vmov.f32	s25, s15
 801f73a:	9b06      	ldr	r3, [sp, #24]
 801f73c:	f893 9791 	ldrb.w	r9, [r3, #1937]	@ 0x791
 801f740:	f1b9 0f00 	cmp.w	r9, #0
 801f744:	f001 80a7 	beq.w	8020896 <iNemoEngine_API_Update+0x453e>
 801f748:	ed5f 7a20 	vldr	s15, [pc, #-128]	@ 801f6cc <iNemoEngine_API_Update+0x3374>
 801f74c:	ee6e fa27 	vmul.f32	s31, s28, s15
 801f750:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 801f754:	ee2e faa7 	vmul.f32	s30, s29, s15
 801f758:	ee6b daa7 	vmul.f32	s27, s23, s15
 801f75c:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801f760:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801f764:	ee17 0a90 	vmov	r0, s15
 801f768:	f7e0 feee 	bl	8000548 <__aeabi_f2d>
 801f76c:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801f770:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f774:	ee17 0a90 	vmov	r0, s15
 801f778:	f7e0 fee6 	bl	8000548 <__aeabi_f2d>
 801f77c:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801f780:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801f784:	ee17 0a90 	vmov	r0, s15
 801f788:	f7e0 fede 	bl	8000548 <__aeabi_f2d>
 801f78c:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801f790:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801f794:	ee17 0a90 	vmov	r0, s15
 801f798:	f7e0 fed6 	bl	8000548 <__aeabi_f2d>
 801f79c:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801f7a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f7a4:	ee17 0a90 	vmov	r0, s15
 801f7a8:	f7e0 fece 	bl	8000548 <__aeabi_f2d>
 801f7ac:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801f7b0:	4602      	mov	r2, r0
 801f7b2:	460b      	mov	r3, r1
 801f7b4:	ee17 0a90 	vmov	r0, s15
 801f7b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f7bc:	f7e0 fec4 	bl	8000548 <__aeabi_f2d>
 801f7c0:	eef0 7aef 	vabs.f32	s15, s31
 801f7c4:	9b06      	ldr	r3, [sp, #24]
 801f7c6:	edcd 7a03 	vstr	s15, [sp, #12]
 801f7ca:	eef0 7acf 	vabs.f32	s15, s30
 801f7ce:	edcd 7a04 	vstr	s15, [sp, #16]
 801f7d2:	eef0 7aed 	vabs.f32	s15, s27
 801f7d6:	f503 62f3 	add.w	r2, r3, #1944	@ 0x798
 801f7da:	eeb0 7a48 	vmov.f32	s14, s16
 801f7de:	230c      	movs	r3, #12
 801f7e0:	edcd 7a05 	vstr	s15, [sp, #20]
 801f7e4:	eef0 7a6c 	vmov.f32	s15, s25
 801f7e8:	eeb0 8a4d 	vmov.f32	s16, s26
 801f7ec:	eef0 ca4a 	vmov.f32	s25, s20
 801f7f0:	eeb0 da6a 	vmov.f32	s26, s21
 801f7f4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801f7f8:	eef0 aa69 	vmov.f32	s21, s19
 801f7fc:	ed1f ba4c 	vldr	s22, [pc, #-304]	@ 801f6d0 <iNemoEngine_API_Update+0x3378>
 801f800:	9215      	str	r2, [sp, #84]	@ 0x54
 801f802:	fb13 2909 	smlabb	r9, r3, r9, r2
 801f806:	4693      	mov	fp, r2
 801f808:	eeb0 aa67 	vmov.f32	s20, s15
 801f80c:	eef0 9a47 	vmov.f32	s19, s14
 801f810:	e064      	b.n	801f8dc <iNemoEngine_API_Update+0x3584>
 801f812:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 801f816:	ed1f 7a51 	vldr	s14, [pc, #-324]	@ 801f6d4 <iNemoEngine_API_Update+0x337c>
 801f81a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f822:	f280 80af 	bge.w	801f984 <iNemoEngine_API_Update+0x362c>
 801f826:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 801f6d8 <iNemoEngine_API_Update+0x3380>
 801f82a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f832:	f300 80bb 	bgt.w	801f9ac <iNemoEngine_API_Update+0x3654>
 801f836:	ed9d 0b08 	vldr	d0, [sp, #32]
 801f83a:	f002 ffa1 	bl	8022780 <ceil>
 801f83e:	ec51 0b10 	vmov	r0, r1, d0
 801f842:	f7e1 f9b1 	bl	8000ba8 <__aeabi_d2f>
 801f846:	eddd 7a04 	vldr	s15, [sp, #16]
 801f84a:	f8cb 0000 	str.w	r0, [fp]
 801f84e:	eef4 7acb 	vcmpe.f32	s15, s22
 801f852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f856:	f140 8089 	bpl.w	801f96c <iNemoEngine_API_Update+0x3614>
 801f85a:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 801f85e:	ed1f 7a63 	vldr	s14, [pc, #-396]	@ 801f6d4 <iNemoEngine_API_Update+0x337c>
 801f862:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f86a:	f280 8082 	bge.w	801f972 <iNemoEngine_API_Update+0x361a>
 801f86e:	ed1f 7a66 	vldr	s14, [pc, #-408]	@ 801f6d8 <iNemoEngine_API_Update+0x3380>
 801f872:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f87a:	f300 809b 	bgt.w	801f9b4 <iNemoEngine_API_Update+0x365c>
 801f87e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f882:	f002 ff7d 	bl	8022780 <ceil>
 801f886:	ec51 0b10 	vmov	r0, r1, d0
 801f88a:	f7e1 f98d 	bl	8000ba8 <__aeabi_d2f>
 801f88e:	eddd 7a05 	vldr	s15, [sp, #20]
 801f892:	f8cb 0004 	str.w	r0, [fp, #4]
 801f896:	eef4 7acb 	vcmpe.f32	s15, s22
 801f89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f89e:	d54b      	bpl.n	801f938 <iNemoEngine_API_Update+0x35e0>
 801f8a0:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 801f8a4:	ed1f 7a75 	vldr	s14, [pc, #-468]	@ 801f6d4 <iNemoEngine_API_Update+0x337c>
 801f8a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8b0:	da71      	bge.n	801f996 <iNemoEngine_API_Update+0x363e>
 801f8b2:	ed1f 7a77 	vldr	s14, [pc, #-476]	@ 801f6d8 <iNemoEngine_API_Update+0x3380>
 801f8b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8be:	dc77      	bgt.n	801f9b0 <iNemoEngine_API_Update+0x3658>
 801f8c0:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 801f8c4:	f002 ff5c 	bl	8022780 <ceil>
 801f8c8:	ec51 0b10 	vmov	r0, r1, d0
 801f8cc:	f7e1 f96c 	bl	8000ba8 <__aeabi_d2f>
 801f8d0:	f8cb 0008 	str.w	r0, [fp, #8]
 801f8d4:	f10b 0b0c 	add.w	fp, fp, #12
 801f8d8:	45cb      	cmp	fp, r9
 801f8da:	d035      	beq.n	801f948 <iNemoEngine_API_Update+0x35f0>
 801f8dc:	eddd 7a03 	vldr	s15, [sp, #12]
 801f8e0:	eef4 7acb 	vcmpe.f32	s15, s22
 801f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8e8:	d493      	bmi.n	801f812 <iNemoEngine_API_Update+0x34ba>
 801f8ea:	ee1f 0a90 	vmov	r0, s31
 801f8ee:	e7aa      	b.n	801f846 <iNemoEngine_API_Update+0x34ee>
 801f8f0:	ee1f 0a10 	vmov	r0, s30
 801f8f4:	e6a3      	b.n	801f63e <iNemoEngine_API_Update+0x32e6>
 801f8f6:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801f8fa:	f002 ffbd 	bl	8022878 <floor>
 801f8fe:	ec51 0b10 	vmov	r0, r1, d0
 801f902:	f7e1 f951 	bl	8000ba8 <__aeabi_d2f>
 801f906:	e69a      	b.n	801f63e <iNemoEngine_API_Update+0x32e6>
 801f908:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801f90c:	f002 ffb4 	bl	8022878 <floor>
 801f910:	ec51 0b10 	vmov	r0, r1, d0
 801f914:	f7e1 f948 	bl	8000ba8 <__aeabi_d2f>
 801f918:	e66f      	b.n	801f5fa <iNemoEngine_API_Update+0x32a2>
 801f91a:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801f91e:	f002 ffab 	bl	8022878 <floor>
 801f922:	ec51 0b10 	vmov	r0, r1, d0
 801f926:	f7e1 f93f 	bl	8000ba8 <__aeabi_d2f>
 801f92a:	e6a9      	b.n	801f680 <iNemoEngine_API_Update+0x3328>
 801f92c:	4648      	mov	r0, r9
 801f92e:	e5ae      	b.n	801f48e <iNemoEngine_API_Update+0x3136>
 801f930:	4650      	mov	r0, sl
 801f932:	e662      	b.n	801f5fa <iNemoEngine_API_Update+0x32a2>
 801f934:	4650      	mov	r0, sl
 801f936:	e6a3      	b.n	801f680 <iNemoEngine_API_Update+0x3328>
 801f938:	ee1d 0a90 	vmov	r0, s27
 801f93c:	f10b 0b0c 	add.w	fp, fp, #12
 801f940:	f84b 0c04 	str.w	r0, [fp, #-4]
 801f944:	45cb      	cmp	fp, r9
 801f946:	d1c9      	bne.n	801f8dc <iNemoEngine_API_Update+0x3584>
 801f948:	eeb0 7a69 	vmov.f32	s14, s19
 801f94c:	eef0 7a4a 	vmov.f32	s15, s20
 801f950:	eef0 9a6a 	vmov.f32	s19, s21
 801f954:	eeb0 aa6c 	vmov.f32	s20, s25
 801f958:	eef0 aa4d 	vmov.f32	s21, s26
 801f95c:	eef0 ca67 	vmov.f32	s25, s15
 801f960:	eeb0 da48 	vmov.f32	s26, s16
 801f964:	eeb0 8a47 	vmov.f32	s16, s14
 801f968:	f7fd b820 	b.w	801c9ac <iNemoEngine_API_Update+0x654>
 801f96c:	ee1f 0a10 	vmov	r0, s30
 801f970:	e78d      	b.n	801f88e <iNemoEngine_API_Update+0x3536>
 801f972:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801f976:	f002 ff7f 	bl	8022878 <floor>
 801f97a:	ec51 0b10 	vmov	r0, r1, d0
 801f97e:	f7e1 f913 	bl	8000ba8 <__aeabi_d2f>
 801f982:	e784      	b.n	801f88e <iNemoEngine_API_Update+0x3536>
 801f984:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801f988:	f002 ff76 	bl	8022878 <floor>
 801f98c:	ec51 0b10 	vmov	r0, r1, d0
 801f990:	f7e1 f90a 	bl	8000ba8 <__aeabi_d2f>
 801f994:	e757      	b.n	801f846 <iNemoEngine_API_Update+0x34ee>
 801f996:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801f99a:	f002 ff6d 	bl	8022878 <floor>
 801f99e:	ec51 0b10 	vmov	r0, r1, d0
 801f9a2:	f7e1 f901 	bl	8000ba8 <__aeabi_d2f>
 801f9a6:	e793      	b.n	801f8d0 <iNemoEngine_API_Update+0x3578>
 801f9a8:	4650      	mov	r0, sl
 801f9aa:	e648      	b.n	801f63e <iNemoEngine_API_Update+0x32e6>
 801f9ac:	4650      	mov	r0, sl
 801f9ae:	e74a      	b.n	801f846 <iNemoEngine_API_Update+0x34ee>
 801f9b0:	4650      	mov	r0, sl
 801f9b2:	e78d      	b.n	801f8d0 <iNemoEngine_API_Update+0x3578>
 801f9b4:	4650      	mov	r0, sl
 801f9b6:	e76a      	b.n	801f88e <iNemoEngine_API_Update+0x3536>
 801f9b8:	4616      	mov	r6, r2
 801f9ba:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 801f9be:	4be1      	ldr	r3, [pc, #900]	@ (801fd44 <iNemoEngine_API_Update+0x39ec>)
 801f9c0:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 801f9c4:	2100      	movs	r1, #0
 801f9c6:	f8c2 51cc 	str.w	r5, [r2, #460]	@ 0x1cc
 801f9ca:	f8c2 51d0 	str.w	r5, [r2, #464]	@ 0x1d0
 801f9ce:	f882 11ac 	strb.w	r1, [r2, #428]	@ 0x1ac
 801f9d2:	f506 70ea 	add.w	r0, r6, #468	@ 0x1d4
 801f9d6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801f9da:	f001 fe59 	bl	8021690 <memset>
 801f9de:	ed96 6a02 	vldr	s12, [r6, #8]
 801f9e2:	eddf 7ad9 	vldr	s15, [pc, #868]	@ 801fd48 <iNemoEngine_API_Update+0x39f0>
 801f9e6:	eddf 5ad9 	vldr	s11, [pc, #868]	@ 801fd4c <iNemoEngine_API_Update+0x39f4>
 801f9ea:	ed9f 5ad9 	vldr	s10, [pc, #868]	@ 801fd50 <iNemoEngine_API_Update+0x39f8>
 801f9ee:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
 801f9f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 801f9f6:	2300      	movs	r3, #0
 801f9f8:	edc6 7a34 	vstr	s15, [r6, #208]	@ 0xd0
 801f9fc:	eddf 7ad5 	vldr	s15, [pc, #852]	@ 801fd54 <iNemoEngine_API_Update+0x39fc>
 801fa00:	f8c6 30c0 	str.w	r3, [r6, #192]	@ 0xc0
 801fa04:	ee66 7a27 	vmul.f32	s15, s12, s15
 801fa08:	f8c6 3128 	str.w	r3, [r6, #296]	@ 0x128
 801fa0c:	edc6 7a4e 	vstr	s15, [r6, #312]	@ 0x138
 801fa10:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 801fd58 <iNemoEngine_API_Update+0x3a00>
 801fa14:	4bd1      	ldr	r3, [pc, #836]	@ (801fd5c <iNemoEngine_API_Update+0x3a04>)
 801fa16:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
 801fa1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801fa1e:	f8c6 30e4 	str.w	r3, [r6, #228]	@ 0xe4
 801fa22:	edc6 7a50 	vstr	s15, [r6, #320]	@ 0x140
 801fa26:	eddf 7ace 	vldr	s15, [pc, #824]	@ 801fd60 <iNemoEngine_API_Update+0x3a08>
 801fa2a:	4bce      	ldr	r3, [pc, #824]	@ (801fd64 <iNemoEngine_API_Update+0x3a0c>)
 801fa2c:	f8c6 30d4 	str.w	r3, [r6, #212]	@ 0xd4
 801fa30:	ee66 7a27 	vmul.f32	s15, s12, s15
 801fa34:	4bcc      	ldr	r3, [pc, #816]	@ (801fd68 <iNemoEngine_API_Update+0x3a10>)
 801fa36:	edc6 7a38 	vstr	s15, [r6, #224]	@ 0xe0
 801fa3a:	eddf 7acc 	vldr	s15, [pc, #816]	@ 801fd6c <iNemoEngine_API_Update+0x3a14>
 801fa3e:	f8c6 313c 	str.w	r3, [r6, #316]	@ 0x13c
 801fa42:	ee66 7a27 	vmul.f32	s15, s12, s15
 801fa46:	4bca      	ldr	r3, [pc, #808]	@ (801fd70 <iNemoEngine_API_Update+0x3a18>)
 801fa48:	edc6 7a52 	vstr	s15, [r6, #328]	@ 0x148
 801fa4c:	eddf 7ac9 	vldr	s15, [pc, #804]	@ 801fd74 <iNemoEngine_API_Update+0x3a1c>
 801fa50:	f8c6 3144 	str.w	r3, [r6, #324]	@ 0x144
 801fa54:	4bc8      	ldr	r3, [pc, #800]	@ (801fd78 <iNemoEngine_API_Update+0x3a20>)
 801fa56:	f8c6 314c 	str.w	r3, [r6, #332]	@ 0x14c
 801fa5a:	4631      	mov	r1, r6
 801fa5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 801fa60:	ee26 5a05 	vmul.f32	s10, s12, s10
 801fa64:	ee66 7a27 	vmul.f32	s15, s12, s15
 801fa68:	4bc4      	ldr	r3, [pc, #784]	@ (801fd7c <iNemoEngine_API_Update+0x3a24>)
 801fa6a:	f8c6 30ec 	str.w	r3, [r6, #236]	@ 0xec
 801fa6e:	4bc4      	ldr	r3, [pc, #784]	@ (801fd80 <iNemoEngine_API_Update+0x3a28>)
 801fa70:	f8c6 512c 	str.w	r5, [r6, #300]	@ 0x12c
 801fa74:	f8c6 50cc 	str.w	r5, [r6, #204]	@ 0xcc
 801fa78:	f8c6 5134 	str.w	r5, [r6, #308]	@ 0x134
 801fa7c:	edc6 7a3a 	vstr	s15, [r6, #232]	@ 0xe8
 801fa80:	edc6 5a32 	vstr	s11, [r6, #200]	@ 0xc8
 801fa84:	edc6 5a4c 	vstr	s11, [r6, #304]	@ 0x130
 801fa88:	ed86 5a36 	vstr	s10, [r6, #216]	@ 0xd8
 801fa8c:	f8c1 31d4 	str.w	r3, [r1, #468]	@ 0x1d4
 801fa90:	f8c1 31fc 	str.w	r3, [r1, #508]	@ 0x1fc
 801fa94:	f8c1 3224 	str.w	r3, [r1, #548]	@ 0x224
 801fa98:	f8c1 324c 	str.w	r3, [r1, #588]	@ 0x24c
 801fa9c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
 801faa0:	f8c1 329c 	str.w	r3, [r1, #668]	@ 0x29c
 801faa4:	f8c1 32c4 	str.w	r3, [r1, #708]	@ 0x2c4
 801faa8:	f8c1 32ec 	str.w	r3, [r1, #748]	@ 0x2ec
 801faac:	f8c1 3314 	str.w	r3, [r1, #788]	@ 0x314
 801fab0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801fab4:	ed81 5a54 	vstr	s10, [r1, #336]	@ 0x150
 801fab8:	eddf 3ab2 	vldr	s7, [pc, #712]	@ 801fd84 <iNemoEngine_API_Update+0x3a2c>
 801fabc:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 801fd88 <iNemoEngine_API_Update+0x3a30>
 801fac0:	f8c1 317c 	str.w	r3, [r1, #380]	@ 0x17c
 801fac4:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
 801fac8:	f8c1 3124 	str.w	r3, [r1, #292]	@ 0x124
 801facc:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 801fd8c <iNemoEngine_API_Update+0x3a34>
 801fad0:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 801fd90 <iNemoEngine_API_Update+0x3a38>
 801fad4:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 801fd94 <iNemoEngine_API_Update+0x3a3c>
 801fad8:	eddf 4aaf 	vldr	s9, [pc, #700]	@ 801fd98 <iNemoEngine_API_Update+0x3a40>
 801fadc:	4aaf      	ldr	r2, [pc, #700]	@ (801fd9c <iNemoEngine_API_Update+0x3a44>)
 801fade:	f8df c2dc 	ldr.w	ip, [pc, #732]	@ 801fdbc <iNemoEngine_API_Update+0x3a64>
 801fae2:	4faf      	ldr	r7, [pc, #700]	@ (801fda0 <iNemoEngine_API_Update+0x3a48>)
 801fae4:	4eaf      	ldr	r6, [pc, #700]	@ (801fda4 <iNemoEngine_API_Update+0x3a4c>)
 801fae6:	4db0      	ldr	r5, [pc, #704]	@ (801fda8 <iNemoEngine_API_Update+0x3a50>)
 801fae8:	48b0      	ldr	r0, [pc, #704]	@ (801fdac <iNemoEngine_API_Update+0x3a54>)
 801faea:	f8df e2d4 	ldr.w	lr, [pc, #724]	@ 801fdc0 <iNemoEngine_API_Update+0x3a68>
 801faee:	edc1 3a3d 	vstr	s7, [r1, #244]	@ 0xf4
 801faf2:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 801faf6:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 801fafa:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
 801fafe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801fb02:	ee66 6a26 	vmul.f32	s13, s12, s13
 801fb06:	ee26 7a07 	vmul.f32	s14, s12, s14
 801fb0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801fb0e:	ee66 2a23 	vmul.f32	s5, s12, s7
 801fb12:	ee26 3a02 	vmul.f32	s6, s12, s4
 801fb16:	f8c1 3114 	str.w	r3, [r1, #276]	@ 0x114
 801fb1a:	ee66 4a24 	vmul.f32	s9, s12, s9
 801fb1e:	4ba4      	ldr	r3, [pc, #656]	@ (801fdb0 <iNemoEngine_API_Update+0x3a58>)
 801fb20:	f8c1 3184 	str.w	r3, [r1, #388]	@ 0x184
 801fb24:	ee66 1a04 	vmul.f32	s3, s12, s8
 801fb28:	4ba2      	ldr	r3, [pc, #648]	@ (801fdb4 <iNemoEngine_API_Update+0x3a5c>)
 801fb2a:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
 801fb2e:	f8c1 c15c 	str.w	ip, [r1, #348]	@ 0x15c
 801fb32:	f8c1 70fc 	str.w	r7, [r1, #252]	@ 0xfc
 801fb36:	f8c1 6164 	str.w	r6, [r1, #356]	@ 0x164
 801fb3a:	f8c1 516c 	str.w	r5, [r1, #364]	@ 0x16c
 801fb3e:	f8c1 0174 	str.w	r0, [r1, #372]	@ 0x174
 801fb42:	edc1 1a46 	vstr	s3, [r1, #280]	@ 0x118
 801fb46:	edc1 4a60 	vstr	s9, [r1, #384]	@ 0x180
 801fb4a:	f8c1 e19c 	str.w	lr, [r1, #412]	@ 0x19c
 801fb4e:	ed81 2a66 	vstr	s4, [r1, #408]	@ 0x198
 801fb52:	ed81 4a65 	vstr	s8, [r1, #404]	@ 0x194
 801fb56:	f8c1 2154 	str.w	r2, [r1, #340]	@ 0x154
 801fb5a:	f8c1 210c 	str.w	r2, [r1, #268]	@ 0x10c
 801fb5e:	edc1 6a3c 	vstr	s13, [r1, #240]	@ 0xf0
 801fb62:	edc1 6a56 	vstr	s13, [r1, #344]	@ 0x158
 801fb66:	ed81 7a3e 	vstr	s14, [r1, #248]	@ 0xf8
 801fb6a:	ed81 7a58 	vstr	s14, [r1, #352]	@ 0x160
 801fb6e:	edc1 7a40 	vstr	s15, [r1, #256]	@ 0x100
 801fb72:	edc1 7a5a 	vstr	s15, [r1, #360]	@ 0x168
 801fb76:	edc1 2a42 	vstr	s5, [r1, #264]	@ 0x108
 801fb7a:	edc1 2a5c 	vstr	s5, [r1, #368]	@ 0x170
 801fb7e:	ed81 3a44 	vstr	s6, [r1, #272]	@ 0x110
 801fb82:	ed81 3a5e 	vstr	s6, [r1, #376]	@ 0x178
 801fb86:	ed81 6a48 	vstr	s12, [r1, #288]	@ 0x120
 801fb8a:	ed81 6a62 	vstr	s12, [r1, #392]	@ 0x188
 801fb8e:	edc1 5a64 	vstr	s11, [r1, #400]	@ 0x190
 801fb92:	784b      	ldrb	r3, [r1, #1]
 801fb94:	b18b      	cbz	r3, 801fbba <iNemoEngine_API_Update+0x3862>
 801fb96:	f501 6214 	add.w	r2, r1, #2368	@ 0x940
 801fb9a:	9225      	str	r2, [sp, #148]	@ 0x94
 801fb9c:	f601 1348 	addw	r3, r1, #2376	@ 0x948
 801fba0:	f601 1244 	addw	r2, r1, #2372	@ 0x944
 801fba4:	9226      	str	r2, [sp, #152]	@ 0x98
 801fba6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801fba8:	9a06      	ldr	r2, [sp, #24]
 801fbaa:	2300      	movs	r3, #0
 801fbac:	7053      	strb	r3, [r2, #1]
 801fbae:	f7fc bee8 	b.w	801c982 <iNemoEngine_API_Update+0x62a>
 801fbb2:	ed93 ca4b 	vldr	s24, [r3, #300]	@ 0x12c
 801fbb6:	f7fd bfc0 	b.w	801db3a <iNemoEngine_API_Update+0x17e2>
 801fbba:	9a06      	ldr	r2, [sp, #24]
 801fbbc:	f502 6314 	add.w	r3, r2, #2368	@ 0x940
 801fbc0:	f602 1144 	addw	r1, r2, #2372	@ 0x944
 801fbc4:	f602 1048 	addw	r0, r2, #2376	@ 0x948
 801fbc8:	9325      	str	r3, [sp, #148]	@ 0x94
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
 801fbd0:	680b      	ldr	r3, [r1, #0]
 801fbd2:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
 801fbd6:	6803      	ldr	r3, [r0, #0]
 801fbd8:	9126      	str	r1, [sp, #152]	@ 0x98
 801fbda:	9027      	str	r0, [sp, #156]	@ 0x9c
 801fbdc:	f8c2 31c4 	str.w	r3, [r2, #452]	@ 0x1c4
 801fbe0:	e7e2      	b.n	801fba8 <iNemoEngine_API_Update+0x3850>
 801fbe2:	f205 47b4 	addw	r7, r5, #1204	@ 0x4b4
 801fbe6:	ed97 0a00 	vldr	s0, [r7]
 801fbea:	f505 6097 	add.w	r0, r5, #1208	@ 0x4b8
 801fbee:	f7f8 fa5f 	bl	80180b0 <dataDerivative5>
 801fbf2:	f205 6824 	addw	r8, r5, #1572	@ 0x624
 801fbf6:	eef0 3a40 	vmov.f32	s7, s0
 801fbfa:	f505 60c5 	add.w	r0, r5, #1576	@ 0x628
 801fbfe:	ed98 0a00 	vldr	s0, [r8]
 801fc02:	f7f8 fa55 	bl	80180b0 <dataDerivative5>
 801fc06:	f205 7394 	addw	r3, r5, #1940	@ 0x794
 801fc0a:	eeb0 3a40 	vmov.f32	s6, s0
 801fc0e:	f505 60f3 	add.w	r0, r5, #1944	@ 0x798
 801fc12:	ed93 0a00 	vldr	s0, [r3]
 801fc16:	f7f8 fa4b 	bl	80180b0 <dataDerivative5>
 801fc1a:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	@ 0x976
 801fc1e:	ee07 3a90 	vmov	s15, r3
 801fc22:	3301      	adds	r3, #1
 801fc24:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801fc28:	ee07 3a90 	vmov	s15, r3
 801fc2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fc30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fc34:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801fc38:	f605 106c 	addw	r0, r5, #2412	@ 0x96c
 801fc3c:	f605 1168 	addw	r1, r5, #2408	@ 0x968
 801fc40:	f505 6217 	add.w	r2, r5, #2416	@ 0x970
 801fc44:	b21b      	sxth	r3, r3
 801fc46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801fc4a:	ed90 7a00 	vldr	s14, [r0]
 801fc4e:	ed91 5a00 	vldr	s10, [r1]
 801fc52:	eef0 7a63 	vmov.f32	s15, s7
 801fc56:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fc5a:	eeb0 7a43 	vmov.f32	s14, s6
 801fc5e:	eea5 7a85 	vfma.f32	s14, s11, s10
 801fc62:	ed92 5a00 	vldr	s10, [r2]
 801fc66:	eef0 6a40 	vmov.f32	s13, s0
 801fc6a:	eee5 6a85 	vfma.f32	s13, s11, s10
 801fc6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fc72:	ee27 7a06 	vmul.f32	s14, s14, s12
 801fc76:	ee66 6a86 	vmul.f32	s13, s13, s12
 801fc7a:	edc0 7a00 	vstr	s15, [r0]
 801fc7e:	ed81 7a00 	vstr	s14, [r1]
 801fc82:	edc2 6a00 	vstr	s13, [r2]
 801fc86:	f8a5 3976 	strh.w	r3, [r5, #2422]	@ 0x976
 801fc8a:	f47c ab8d 	bne.w	801c3a8 <iNemoEngine_API_Update+0x50>
 801fc8e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801fc92:	ee27 7a06 	vmul.f32	s14, s14, s12
 801fc96:	ee66 6a86 	vmul.f32	s13, s13, s12
 801fc9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fc9e:	2300      	movs	r3, #0
 801fca0:	ed85 7a07 	vstr	s14, [r5, #28]
 801fca4:	edc5 6a08 	vstr	s13, [r5, #32]
 801fca8:	edc5 7a06 	vstr	s15, [r5, #24]
 801fcac:	6003      	str	r3, [r0, #0]
 801fcae:	600b      	str	r3, [r1, #0]
 801fcb0:	6013      	str	r3, [r2, #0]
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	f8a5 3976 	strh.w	r3, [r5, #2422]	@ 0x976
 801fcb8:	f885 3978 	strb.w	r3, [r5, #2424]	@ 0x978
 801fcbc:	f7fc bb74 	b.w	801c3a8 <iNemoEngine_API_Update+0x50>
 801fcc0:	9906      	ldr	r1, [sp, #24]
 801fcc2:	f8d1 21bc 	ldr.w	r2, [r1, #444]	@ 0x1bc
 801fcc6:	9295      	str	r2, [sp, #596]	@ 0x254
 801fcc8:	f8d1 21c0 	ldr.w	r2, [r1, #448]	@ 0x1c0
 801fccc:	9296      	str	r2, [sp, #600]	@ 0x258
 801fcce:	f8d1 21c4 	ldr.w	r2, [r1, #452]	@ 0x1c4
 801fcd2:	9297      	str	r2, [sp, #604]	@ 0x25c
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	464b      	mov	r3, r9
 801fcd8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801fcdc:	f881 21a0 	strb.w	r2, [r1, #416]	@ 0x1a0
 801fce0:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801fce4:	f7fe bc8f 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 801fce8:	ed92 fa49 	vldr	s30, [r2, #292]	@ 0x124
 801fcec:	4613      	mov	r3, r2
 801fcee:	f7fd bdd2 	b.w	801d896 <iNemoEngine_API_Update+0x153e>
 801fcf2:	ed93 ca63 	vldr	s24, [r3, #396]	@ 0x18c
 801fcf6:	f7fd bf20 	b.w	801db3a <iNemoEngine_API_Update+0x17e2>
 801fcfa:	eddf 8a2f 	vldr	s17, [pc, #188]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fcfe:	f7fd b87e 	b.w	801cdfe <iNemoEngine_API_Update+0xaa6>
 801fd02:	ed9f ca2d 	vldr	s24, [pc, #180]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd06:	f7fd b90e 	b.w	801cf26 <iNemoEngine_API_Update+0xbce>
 801fd0a:	ed9f 8a2b 	vldr	s16, [pc, #172]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd0e:	f7fc bf8c 	b.w	801cc2a <iNemoEngine_API_Update+0x8d2>
 801fd12:	eddf 8a29 	vldr	s17, [pc, #164]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd16:	f7fc bf5d 	b.w	801cbd4 <iNemoEngine_API_Update+0x87c>
 801fd1a:	ed9f 8a27 	vldr	s16, [pc, #156]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd1e:	f7fd b92d 	b.w	801cf7c <iNemoEngine_API_Update+0xc24>
 801fd22:	ed9f ca25 	vldr	s24, [pc, #148]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd26:	f7fd b83f 	b.w	801cda8 <iNemoEngine_API_Update+0xa50>
 801fd2a:	ed9f ca23 	vldr	s24, [pc, #140]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd2e:	f7fc bfa7 	b.w	801cc80 <iNemoEngine_API_Update+0x928>
 801fd32:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd36:	f7fd b80c 	b.w	801cd52 <iNemoEngine_API_Update+0x9fa>
 801fd3a:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 801fdb8 <iNemoEngine_API_Update+0x3a60>
 801fd3e:	f7fd b8c7 	b.w	801ced0 <iNemoEngine_API_Update+0xb78>
 801fd42:	bf00      	nop
 801fd44:	bf666666 	.word	0xbf666666
 801fd48:	3d072b02 	.word	0x3d072b02
 801fd4c:	3ca3d70a 	.word	0x3ca3d70a
 801fd50:	3d4ccccd 	.word	0x3d4ccccd
 801fd54:	3cb43958 	.word	0x3cb43958
 801fd58:	3cf5c28f 	.word	0x3cf5c28f
 801fd5c:	3eb33333 	.word	0x3eb33333
 801fd60:	3d75c28f 	.word	0x3d75c28f
 801fd64:	3ee66666 	.word	0x3ee66666
 801fd68:	3f866666 	.word	0x3f866666
 801fd6c:	3d23d70a 	.word	0x3d23d70a
 801fd70:	3f8ccccd 	.word	0x3f8ccccd
 801fd74:	3d8f5c29 	.word	0x3d8f5c29
 801fd78:	3f933333 	.word	0x3f933333
 801fd7c:	3ebd70a4 	.word	0x3ebd70a4
 801fd80:	40a00000 	.word	0x40a00000
 801fd84:	3ecccccd 	.word	0x3ecccccd
 801fd88:	3f4ccccd 	.word	0x3f4ccccd
 801fd8c:	3dcccccd 	.word	0x3dcccccd
 801fd90:	3e4ccccd 	.word	0x3e4ccccd
 801fd94:	3e99999a 	.word	0x3e99999a
 801fd98:	3f666666 	.word	0x3f666666
 801fd9c:	3f99999a 	.word	0x3f99999a
 801fda0:	3f19999a 	.word	0x3f19999a
 801fda4:	3fb9999a 	.word	0x3fb9999a
 801fda8:	3fcccccd 	.word	0x3fcccccd
 801fdac:	3fe66666 	.word	0x3fe66666
 801fdb0:	40200000 	.word	0x40200000
 801fdb4:	40400000 	.word	0x40400000
 801fdb8:	80000000 	.word	0x80000000
 801fdbc:	3fa66666 	.word	0x3fa66666
 801fdc0:	3f333333 	.word	0x3f333333
 801fdc4:	3e4cccce 	.word	0x3e4cccce
 801fdc8:	3eaaaaab 	.word	0x3eaaaaab
 801fdcc:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 801fdd0:	2a00      	cmp	r2, #0
 801fdd2:	f040 85bc 	bne.w	802094e <iNemoEngine_API_Update+0x45f6>
 801fdd6:	9906      	ldr	r1, [sp, #24]
 801fdd8:	ed5f 8a06 	vldr	s17, [pc, #-24]	@ 801fdc4 <iNemoEngine_API_Update+0x3a6c>
 801fddc:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	@ 0x1a6
 801fde0:	ed5f 7a07 	vldr	s15, [pc, #-28]	@ 801fdc8 <iNemoEngine_API_Update+0x3a70>
 801fde4:	3301      	adds	r3, #1
 801fde6:	b29b      	uxth	r3, r3
 801fde8:	2b31      	cmp	r3, #49	@ 0x31
 801fdea:	f8a1 31a6 	strh.w	r3, [r1, #422]	@ 0x1a6
 801fdee:	bf98      	it	ls
 801fdf0:	eef0 8a67 	vmovls.f32	s17, s15
 801fdf4:	460b      	mov	r3, r1
 801fdf6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 801fdfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801fdfe:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 801fe02:	f000 8599 	beq.w	8020938 <iNemoEngine_API_Update+0x45e0>
 801fe06:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 801fe0a:	f47f a83a 	bne.w	801ee82 <iNemoEngine_API_Update+0x2b2a>
 801fe0e:	9a06      	ldr	r2, [sp, #24]
 801fe10:	2301      	movs	r3, #1
 801fe12:	f882 31a4 	strb.w	r3, [r2, #420]	@ 0x1a4
 801fe16:	9a06      	ldr	r2, [sp, #24]
 801fe18:	edcd 6a03 	vstr	s13, [sp, #12]
 801fe1c:	f502 63c3 	add.w	r3, r2, #1560	@ 0x618
 801fe20:	ed93 5a00 	vldr	s10, [r3]
 801fe24:	f502 63f1 	add.w	r3, r2, #1928	@ 0x788
 801fe28:	ed93 7a00 	vldr	s14, [r3]
 801fe2c:	f202 6314 	addw	r3, r2, #1556	@ 0x614
 801fe30:	edd3 4a00 	vldr	s9, [r3]
 801fe34:	ee25 4a05 	vmul.f32	s8, s10, s10
 801fe38:	f202 7384 	addw	r3, r2, #1924	@ 0x784
 801fe3c:	eea4 4aa4 	vfma.f32	s8, s9, s9
 801fe40:	a93d      	add	r1, sp, #244	@ 0xf4
 801fe42:	a843      	add	r0, sp, #268	@ 0x10c
 801fe44:	ed93 6a00 	vldr	s12, [r3]
 801fe48:	f202 631c 	addw	r3, r2, #1564	@ 0x61c
 801fe4c:	edd3 7a00 	vldr	s15, [r3]
 801fe50:	eea7 4aa7 	vfma.f32	s8, s15, s15
 801fe54:	f202 738c 	addw	r3, r2, #1932	@ 0x78c
 801fe58:	465e      	mov	r6, fp
 801fe5a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801fe5e:	eeb1 3ac4 	vsqrt.f32	s6, s8
 801fe62:	465a      	mov	r2, fp
 801fe64:	4655      	mov	r5, sl
 801fe66:	4657      	mov	r7, sl
 801fe68:	acae      	add	r4, sp, #696	@ 0x2b8
 801fe6a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801fe6e:	ee83 4a83 	vdiv.f32	s8, s7, s6
 801fe72:	eee6 5a06 	vfma.f32	s11, s12, s12
 801fe76:	ee67 7a84 	vmul.f32	s15, s15, s8
 801fe7a:	ee25 5a04 	vmul.f32	s10, s10, s8
 801fe7e:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 801fe82:	edd3 7a00 	vldr	s15, [r3]
 801fe86:	ed8d 5a3e 	vstr	s10, [sp, #248]	@ 0xf8
 801fe8a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801fe8e:	ee64 4a84 	vmul.f32	s9, s9, s8
 801fe92:	eeb1 5ae5 	vsqrt.f32	s10, s11
 801fe96:	edcd 4a3d 	vstr	s9, [sp, #244]	@ 0xf4
 801fe9a:	eec3 5a85 	vdiv.f32	s11, s7, s10
 801fe9e:	ee27 7a25 	vmul.f32	s14, s14, s11
 801fea2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801fea6:	ee26 6a25 	vmul.f32	s12, s12, s11
 801feaa:	ed8d 7a44 	vstr	s14, [sp, #272]	@ 0x110
 801feae:	edcd 7a45 	vstr	s15, [sp, #276]	@ 0x114
 801feb2:	ed8d 6a43 	vstr	s12, [sp, #268]	@ 0x10c
 801feb6:	f7f8 f9e1 	bl	801827c <getRotationMatrix>
 801feba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801febc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801febe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801fec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fec2:	6836      	ldr	r6, [r6, #0]
 801fec4:	602e      	str	r6, [r5, #0]
 801fec6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801feca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801fecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fece:	edda 7a00 	vldr	s15, [sl]
 801fed2:	ed9a 7a01 	vldr	s14, [sl, #4]
 801fed6:	eddd 6a03 	vldr	s13, [sp, #12]
 801feda:	6026      	str	r6, [r4, #0]
 801fedc:	eef0 7ae7 	vabs.f32	s15, s15
 801fee0:	eeb0 7ac7 	vabs.f32	s14, s14
 801fee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feec:	f140 8407 	bpl.w	80206fe <iNemoEngine_API_Update+0x43a6>
 801fef0:	2304      	movs	r3, #4
 801fef2:	2000      	movs	r0, #0
 801fef4:	930c      	str	r3, [sp, #48]	@ 0x30
 801fef6:	469e      	mov	lr, r3
 801fef8:	eef0 7a47 	vmov.f32	s15, s14
 801fefc:	2103      	movs	r1, #3
 801fefe:	2707      	movs	r7, #7
 801ff00:	f04f 0c06 	mov.w	ip, #6
 801ff04:	4603      	mov	r3, r0
 801ff06:	2601      	movs	r6, #1
 801ff08:	ed9a 7a02 	vldr	s14, [sl, #8]
 801ff0c:	eeb0 7ac7 	vabs.f32	s14, s14
 801ff10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ff14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff18:	f340 8453 	ble.w	80207c2 <iNemoEngine_API_Update+0x446a>
 801ff1c:	2306      	movs	r3, #6
 801ff1e:	2708      	movs	r7, #8
 801ff20:	2104      	movs	r1, #4
 801ff22:	9303      	str	r3, [sp, #12]
 801ff24:	f04f 0c07 	mov.w	ip, #7
 801ff28:	f04f 0e05 	mov.w	lr, #5
 801ff2c:	970c      	str	r7, [sp, #48]	@ 0x30
 801ff2e:	4608      	mov	r0, r1
 801ff30:	2200      	movs	r2, #0
 801ff32:	2301      	movs	r3, #1
 801ff34:	2602      	movs	r6, #2
 801ff36:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ff38:	4450      	add	r0, sl
 801ff3a:	4454      	add	r4, sl
 801ff3c:	ed90 6a00 	vldr	s12, [r0]
 801ff40:	ed94 7a00 	vldr	s14, [r4]
 801ff44:	eec6 7a07 	vdiv.f32	s15, s12, s14
 801ff48:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801ff4a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ff4e:	acae      	add	r4, sp, #696	@ 0x2b8
 801ff50:	adae      	add	r5, sp, #696	@ 0x2b8
 801ff52:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ff56:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801ff5a:	edc0 7a00 	vstr	s15, [r0]
 801ff5e:	ed94 7a00 	vldr	s14, [r4]
 801ff62:	edd5 7a00 	vldr	s15, [r5]
 801ff66:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801ff6a:	ed84 6a00 	vstr	s12, [r4]
 801ff6e:	edd0 5a00 	vldr	s11, [r0]
 801ff72:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801ff74:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801ff78:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801ff7c:	ed90 7a00 	vldr	s14, [r0]
 801ff80:	edd5 7a00 	vldr	s15, [r5]
 801ff84:	eee5 7ac7 	vfms.f32	s15, s11, s14
 801ff88:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801ff8c:	9404      	str	r4, [sp, #16]
 801ff8e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff90:	edc5 7a00 	vstr	s15, [r5]
 801ff94:	ed90 7a00 	vldr	s14, [r0]
 801ff98:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801ff9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801ff9e:	edd0 7a00 	vldr	s15, [r0]
 801ffa2:	eee6 7a47 	vfms.f32	s15, s12, s14
 801ffa6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801ffaa:	00bc      	lsls	r4, r7, #2
 801ffac:	9405      	str	r4, [sp, #20]
 801ffae:	edc0 7a00 	vstr	s15, [r0]
 801ffb2:	acae      	add	r4, sp, #696	@ 0x2b8
 801ffb4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801ffb6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801ffba:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 801ffbe:	ed90 5a00 	vldr	s10, [r0]
 801ffc2:	ed94 7a00 	vldr	s14, [r4]
 801ffc6:	eea5 7ac5 	vfms.f32	s14, s11, s10
 801ffca:	0097      	lsls	r7, r2, #2
 801ffcc:	eef0 7ae7 	vabs.f32	s15, s15
 801ffd0:	ed84 7a00 	vstr	s14, [r4]
 801ffd4:	9c03      	ldr	r4, [sp, #12]
 801ffd6:	edd0 5a00 	vldr	s11, [r0]
 801ffda:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801ffdc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801ffe0:	ed90 7a00 	vldr	s14, [r0]
 801ffe4:	eea6 7a65 	vfms.f32	s14, s12, s11
 801ffe8:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801ffec:	008c      	lsls	r4, r1, #2
 801ffee:	ed80 7a00 	vstr	s14, [r0]
 801fff2:	ed95 7a00 	vldr	s14, [r5]
 801fff6:	eeb0 7ac7 	vabs.f32	s14, s14
 801fffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fffe:	00b0      	lsls	r0, r6, #2
 8020000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020004:	9003      	str	r0, [sp, #12]
 8020006:	ea4f 0583 	mov.w	r5, r3, lsl #2
 802000a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 802000e:	dd0a      	ble.n	8020026 <iNemoEngine_API_Update+0x3cce>
 8020010:	4618      	mov	r0, r3
 8020012:	4613      	mov	r3, r2
 8020014:	4602      	mov	r2, r0
 8020016:	4674      	mov	r4, lr
 8020018:	4650      	mov	r0, sl
 802001a:	463d      	mov	r5, r7
 802001c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8020020:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8020024:	0097      	lsls	r7, r2, #2
 8020026:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8020028:	448e      	add	lr, r1
 802002a:	440c      	add	r4, r1
 802002c:	ed9e 7a00 	vldr	s14, [lr]
 8020030:	edd4 7a00 	vldr	s15, [r4]
 8020034:	edcd 6a03 	vstr	s13, [sp, #12]
 8020038:	ee87 2a27 	vdiv.f32	s4, s14, s15
 802003c:	4408      	add	r0, r1
 802003e:	4451      	add	r1, sl
 8020040:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020044:	ed8e 2a00 	vstr	s4, [lr]
 8020048:	ed90 6a00 	vldr	s12, [r0]
 802004c:	edd1 7a00 	vldr	s15, [r1]
 8020050:	eee2 7a46 	vfms.f32	s15, s4, s12
 8020054:	edc1 7a00 	vstr	s15, [r1]
 8020058:	9905      	ldr	r1, [sp, #20]
 802005a:	ed90 3a00 	vldr	s6, [r0]
 802005e:	ed94 6a00 	vldr	s12, [r4]
 8020062:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8020064:	4401      	add	r1, r0
 8020066:	edd1 3a00 	vldr	s7, [r1]
 802006a:	9904      	ldr	r1, [sp, #16]
 802006c:	4401      	add	r1, r0
 802006e:	00b0      	lsls	r0, r6, #2
 8020070:	edd1 4a00 	vldr	s9, [r1]
 8020074:	f500 61b2 	add.w	r1, r0, #1424	@ 0x590
 8020078:	4469      	add	r1, sp
 802007a:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 802007e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8020082:	edd1 7a00 	vldr	s15, [r1]
 8020086:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8020088:	4401      	add	r1, r0
 802008a:	ee87 4a06 	vdiv.f32	s8, s14, s12
 802008e:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8020090:	ed91 6a00 	vldr	s12, [r1]
 8020094:	f505 61b2 	add.w	r1, r5, #1424	@ 0x590
 8020098:	4469      	add	r1, sp
 802009a:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 802009e:	ee87 5a06 	vdiv.f32	s10, s14, s12
 80200a2:	4405      	add	r5, r0
 80200a4:	ed91 7a00 	vldr	s14, [r1]
 80200a8:	edd5 5a00 	vldr	s11, [r5]
 80200ac:	f507 61b2 	add.w	r1, r7, #1424	@ 0x590
 80200b0:	4469      	add	r1, sp
 80200b2:	4407      	add	r7, r0
 80200b4:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 80200b8:	edd7 1a00 	vldr	s3, [r7]
 80200bc:	ed91 6a00 	vldr	s12, [r1]
 80200c0:	eea5 7ae7 	vfms.f32	s14, s11, s15
 80200c4:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 80200c8:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80200cc:	eea1 6ae7 	vfms.f32	s12, s3, s15
 80200d0:	4601      	mov	r1, r0
 80200d2:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 80200d6:	ed91 1a00 	vldr	s2, [r1]
 80200da:	eea2 6a47 	vfms.f32	s12, s4, s14
 80200de:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 80200e2:	f5a0 7079 	sub.w	r0, r0, #996	@ 0x3e4
 80200e6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80200ea:	ee22 6a86 	vmul.f32	s12, s5, s12
 80200ee:	460b      	mov	r3, r1
 80200f0:	eea3 7a46 	vfms.f32	s14, s6, s12
 80200f4:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 80200f8:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 80200fc:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8020100:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020104:	ed8b 6a02 	vstr	s12, [fp, #8]
 8020108:	eee4 7ac7 	vfms.f32	s15, s9, s14
 802010c:	ed8b 7a01 	vstr	s14, [fp, #4]
 8020110:	ee65 7a27 	vmul.f32	s15, s10, s15
 8020114:	ed90 7a00 	vldr	s14, [r0]
 8020118:	ed91 6a00 	vldr	s12, [r1]
 802011c:	edcb 7a00 	vstr	s15, [fp]
 8020120:	f50d 60b2 	add.w	r0, sp, #1424	@ 0x590
 8020124:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8020128:	edd3 7a00 	vldr	s15, [r3]
 802012c:	f5a1 7376 	sub.w	r3, r1, #984	@ 0x3d8
 8020130:	edd3 0a00 	vldr	s1, [r3]
 8020134:	f5a1 7279 	sub.w	r2, r1, #996	@ 0x3e4
 8020138:	eea5 6ac7 	vfms.f32	s12, s11, s14
 802013c:	4658      	mov	r0, fp
 802013e:	a952      	add	r1, sp, #328	@ 0x148
 8020140:	eee1 7a65 	vfms.f32	s15, s2, s11
 8020144:	edd2 5a00 	vldr	s11, [r2]
 8020148:	eee1 0a61 	vfms.f32	s1, s2, s3
 802014c:	eee1 5ac7 	vfms.f32	s11, s3, s14
 8020150:	eef0 1a60 	vmov.f32	s3, s1
 8020154:	eee2 5a46 	vfms.f32	s11, s4, s12
 8020158:	eee2 1a67 	vfms.f32	s3, s4, s15
 802015c:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8020160:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8020164:	eea3 6a65 	vfms.f32	s12, s6, s11
 8020168:	eee2 7ac3 	vfms.f32	s15, s5, s6
 802016c:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8020170:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8020174:	ee26 6a04 	vmul.f32	s12, s12, s8
 8020178:	ee67 7a84 	vmul.f32	s15, s15, s8
 802017c:	edcb 5a05 	vstr	s11, [fp, #20]
 8020180:	eef0 5a41 	vmov.f32	s11, s2
 8020184:	eea4 7ac6 	vfms.f32	s14, s9, s12
 8020188:	eee7 5ae4 	vfms.f32	s11, s15, s9
 802018c:	ee25 7a07 	vmul.f32	s14, s10, s14
 8020190:	ee65 5a25 	vmul.f32	s11, s10, s11
 8020194:	ed8b 6a04 	vstr	s12, [fp, #16]
 8020198:	ed8b 7a03 	vstr	s14, [fp, #12]
 802019c:	edcb 2a08 	vstr	s5, [fp, #32]
 80201a0:	edcb 7a07 	vstr	s15, [fp, #28]
 80201a4:	edcb 5a06 	vstr	s11, [fp, #24]
 80201a8:	f7f7 ffc8 	bl	801813c <b_dcm2q>
 80201ac:	ed9d 7a53 	vldr	s14, [sp, #332]	@ 0x14c
 80201b0:	eddd 7a54 	vldr	s15, [sp, #336]	@ 0x150
 80201b4:	ed9d 6a52 	vldr	s12, [sp, #328]	@ 0x148
 80201b8:	9b06      	ldr	r3, [sp, #24]
 80201ba:	eddd 6a03 	vldr	s13, [sp, #12]
 80201be:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 80201c2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80201c6:	ee36 6a06 	vadd.f32	s12, s12, s12
 80201ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80201ce:	ed8d 6a3d 	vstr	s12, [sp, #244]	@ 0xf4
 80201d2:	ed8d 7a3e 	vstr	s14, [sp, #248]	@ 0xf8
 80201d6:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 80201da:	2b00      	cmp	r3, #0
 80201dc:	f43e ae54 	beq.w	801ee88 <iNemoEngine_API_Update+0x2b30>
 80201e0:	9906      	ldr	r1, [sp, #24]
 80201e2:	2200      	movs	r2, #0
 80201e4:	464b      	mov	r3, r9
 80201e6:	f881 21a0 	strb.w	r2, [r1, #416]	@ 0x1a0
 80201ea:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 80201ee:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 80201f2:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 80201f6:	f7fe ba06 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 80201fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80201fe:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8020202:	edd2 3a31 	vldr	s7, [r2, #196]	@ 0xc4
 8020206:	edd2 7a33 	vldr	s15, [r2, #204]	@ 0xcc
 802020a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 802020e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8020212:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8020216:	edd2 7a34 	vldr	s15, [r2, #208]	@ 0xd0
 802021a:	eef4 8ae7 	vcmpe.f32	s17, s15
 802021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020222:	ee3f fa23 	vadd.f32	s30, s30, s7
 8020226:	f6fe ac6e 	blt.w	801eb06 <iNemoEngine_API_Update+0x27ae>
 802022a:	9b06      	ldr	r3, [sp, #24]
 802022c:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 8020230:	eef4 8ac7 	vcmpe.f32	s17, s14
 8020234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020238:	f140 837a 	bpl.w	8020930 <iNemoEngine_API_Update+0x45d8>
 802023c:	edd3 3a35 	vldr	s7, [r3, #212]	@ 0xd4
 8020240:	ed93 4a37 	vldr	s8, [r3, #220]	@ 0xdc
 8020244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020248:	ee34 4a63 	vsub.f32	s8, s8, s7
 802024c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8020250:	ee64 7a27 	vmul.f32	s15, s8, s15
 8020254:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8020258:	ee3f fa23 	vadd.f32	s30, s30, s7
 802025c:	9b06      	ldr	r3, [sp, #24]
 802025e:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8020262:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802026a:	f6fe ac6d 	blt.w	801eb48 <iNemoEngine_API_Update+0x27f0>
 802026e:	9b06      	ldr	r3, [sp, #24]
 8020270:	ed93 7a3a 	vldr	s14, [r3, #232]	@ 0xe8
 8020274:	eef4 8ac7 	vcmpe.f32	s17, s14
 8020278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802027c:	f140 82fd 	bpl.w	802087a <iNemoEngine_API_Update+0x4522>
 8020280:	edd3 3a39 	vldr	s7, [r3, #228]	@ 0xe4
 8020284:	ed93 4a3b 	vldr	s8, [r3, #236]	@ 0xec
 8020288:	ee37 7a67 	vsub.f32	s14, s14, s15
 802028c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8020290:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8020294:	ee64 7a27 	vmul.f32	s15, s8, s15
 8020298:	ee87 fa87 	vdiv.f32	s30, s15, s14
 802029c:	ee3f fa23 	vadd.f32	s30, s30, s7
 80202a0:	9b06      	ldr	r3, [sp, #24]
 80202a2:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80202a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80202aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202ae:	f6fe ac6d 	blt.w	801eb8c <iNemoEngine_API_Update+0x2834>
 80202b2:	9b06      	ldr	r3, [sp, #24]
 80202b4:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 80202b8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80202bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202c0:	f140 831a 	bpl.w	80208f8 <iNemoEngine_API_Update+0x45a0>
 80202c4:	edd3 3a3d 	vldr	s7, [r3, #244]	@ 0xf4
 80202c8:	ed93 4a3f 	vldr	s8, [r3, #252]	@ 0xfc
 80202cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80202d0:	ee34 4a63 	vsub.f32	s8, s8, s7
 80202d4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80202d8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80202dc:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80202e0:	ee3f fa23 	vadd.f32	s30, s30, s7
 80202e4:	9b06      	ldr	r3, [sp, #24]
 80202e6:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 80202ea:	eef4 8ae7 	vcmpe.f32	s17, s15
 80202ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202f2:	f6fe ac6d 	blt.w	801ebd0 <iNemoEngine_API_Update+0x2878>
 80202f6:	9b06      	ldr	r3, [sp, #24]
 80202f8:	ed93 7a42 	vldr	s14, [r3, #264]	@ 0x108
 80202fc:	eef4 8ac7 	vcmpe.f32	s17, s14
 8020300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020304:	f140 82c3 	bpl.w	802088e <iNemoEngine_API_Update+0x4536>
 8020308:	edd3 3a41 	vldr	s7, [r3, #260]	@ 0x104
 802030c:	ed93 4a43 	vldr	s8, [r3, #268]	@ 0x10c
 8020310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020314:	ee34 4a63 	vsub.f32	s8, s8, s7
 8020318:	ee78 7ae7 	vsub.f32	s15, s17, s15
 802031c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8020320:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8020324:	ee3f fa23 	vadd.f32	s30, s30, s7
 8020328:	9b06      	ldr	r3, [sp, #24]
 802032a:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 802032e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020336:	f6fe ac6d 	blt.w	801ec14 <iNemoEngine_API_Update+0x28bc>
 802033a:	9b06      	ldr	r3, [sp, #24]
 802033c:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 8020340:	eef4 8ac7 	vcmpe.f32	s17, s14
 8020344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020348:	f140 82d2 	bpl.w	80208f0 <iNemoEngine_API_Update+0x4598>
 802034c:	ed93 4a45 	vldr	s8, [r3, #276]	@ 0x114
 8020350:	edd3 4a47 	vldr	s9, [r3, #284]	@ 0x11c
 8020354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020358:	ee74 4ac4 	vsub.f32	s9, s9, s8
 802035c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8020360:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8020364:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8020368:	ee3f fa04 	vadd.f32	s30, s30, s8
 802036c:	f7fd ba93 	b.w	801d896 <iNemoEngine_API_Update+0x153e>
 8020370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020374:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8020378:	edd3 3a4b 	vldr	s7, [r3, #300]	@ 0x12c
 802037c:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8020380:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8020384:	ee67 7a84 	vmul.f32	s15, s15, s8
 8020388:	ee87 ca87 	vdiv.f32	s24, s15, s14
 802038c:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8020390:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020398:	ee3c ca23 	vadd.f32	s24, s24, s7
 802039c:	f6fd aaab 	blt.w	801d8f6 <iNemoEngine_API_Update+0x159e>
 80203a0:	9b06      	ldr	r3, [sp, #24]
 80203a2:	ed93 7a50 	vldr	s14, [r3, #320]	@ 0x140
 80203a6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80203aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203ae:	f140 8260 	bpl.w	8020872 <iNemoEngine_API_Update+0x451a>
 80203b2:	edd3 3a4f 	vldr	s7, [r3, #316]	@ 0x13c
 80203b6:	ed93 4a51 	vldr	s8, [r3, #324]	@ 0x144
 80203ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80203be:	ee34 4a63 	vsub.f32	s8, s8, s7
 80203c2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80203c6:	ee64 7a27 	vmul.f32	s15, s8, s15
 80203ca:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80203ce:	ee3c ca23 	vadd.f32	s24, s24, s7
 80203d2:	9b06      	ldr	r3, [sp, #24]
 80203d4:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 80203d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80203dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203e0:	f6fd aaaa 	blt.w	801d938 <iNemoEngine_API_Update+0x15e0>
 80203e4:	9b06      	ldr	r3, [sp, #24]
 80203e6:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 80203ea:	eef4 8ac7 	vcmpe.f32	s17, s14
 80203ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203f2:	f140 8237 	bpl.w	8020864 <iNemoEngine_API_Update+0x450c>
 80203f6:	edd3 3a53 	vldr	s7, [r3, #332]	@ 0x14c
 80203fa:	ed93 4a55 	vldr	s8, [r3, #340]	@ 0x154
 80203fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020402:	ee34 4a63 	vsub.f32	s8, s8, s7
 8020406:	ee78 7ae7 	vsub.f32	s15, s17, s15
 802040a:	ee64 7a27 	vmul.f32	s15, s8, s15
 802040e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8020412:	ee3c ca23 	vadd.f32	s24, s24, s7
 8020416:	9b06      	ldr	r3, [sp, #24]
 8020418:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 802041c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020424:	f6fd aaaa 	blt.w	801d97c <iNemoEngine_API_Update+0x1624>
 8020428:	9b06      	ldr	r3, [sp, #24]
 802042a:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 802042e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8020432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020436:	f140 8270 	bpl.w	802091a <iNemoEngine_API_Update+0x45c2>
 802043a:	edd3 3a57 	vldr	s7, [r3, #348]	@ 0x15c
 802043e:	ed93 4a59 	vldr	s8, [r3, #356]	@ 0x164
 8020442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020446:	ee34 4a63 	vsub.f32	s8, s8, s7
 802044a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 802044e:	ee64 7a27 	vmul.f32	s15, s8, s15
 8020452:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8020456:	ee3c ca23 	vadd.f32	s24, s24, s7
 802045a:	9b06      	ldr	r3, [sp, #24]
 802045c:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8020460:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020468:	f6fd aaaa 	blt.w	801d9c0 <iNemoEngine_API_Update+0x1668>
 802046c:	9b06      	ldr	r3, [sp, #24]
 802046e:	ed93 7a5c 	vldr	s14, [r3, #368]	@ 0x170
 8020472:	eef4 8ac7 	vcmpe.f32	s17, s14
 8020476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802047a:	f140 8252 	bpl.w	8020922 <iNemoEngine_API_Update+0x45ca>
 802047e:	edd3 3a5b 	vldr	s7, [r3, #364]	@ 0x16c
 8020482:	ed93 4a5d 	vldr	s8, [r3, #372]	@ 0x174
 8020486:	ee37 7a67 	vsub.f32	s14, s14, s15
 802048a:	ee34 4a63 	vsub.f32	s8, s8, s7
 802048e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8020492:	ee64 7a27 	vmul.f32	s15, s8, s15
 8020496:	ee87 ca87 	vdiv.f32	s24, s15, s14
 802049a:	ee3c ca23 	vadd.f32	s24, s24, s7
 802049e:	9b06      	ldr	r3, [sp, #24]
 80204a0:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 80204a4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80204a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204ac:	f6fd aaaa 	blt.w	801da04 <iNemoEngine_API_Update+0x16ac>
 80204b0:	9b06      	ldr	r3, [sp, #24]
 80204b2:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 80204b6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80204ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204be:	f140 8222 	bpl.w	8020906 <iNemoEngine_API_Update+0x45ae>
 80204c2:	ed93 4a5f 	vldr	s8, [r3, #380]	@ 0x17c
 80204c6:	edd3 4a61 	vldr	s9, [r3, #388]	@ 0x184
 80204ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80204ce:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80204d2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80204d6:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80204da:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80204de:	ee3c ca04 	vadd.f32	s24, s24, s8
 80204e2:	f7fd bb2a 	b.w	801db3a <iNemoEngine_API_Update+0x17e2>
 80204e6:	a94e      	add	r1, sp, #312	@ 0x138
 80204e8:	a868      	add	r0, sp, #416	@ 0x1a0
 80204ea:	f7f7 fe27 	bl	801813c <b_dcm2q>
 80204ee:	9d06      	ldr	r5, [sp, #24]
 80204f0:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 80204f4:	edc5 7a72 	vstr	s15, [r5, #456]	@ 0x1c8
 80204f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80204fc:	edc5 7a73 	vstr	s15, [r5, #460]	@ 0x1cc
 8020500:	4621      	mov	r1, r4
 8020502:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8020506:	f505 70ea 	add.w	r0, r5, #468	@ 0x1d4
 802050a:	edcd 7a05 	vstr	s15, [sp, #20]
 802050e:	f001 f8bf 	bl	8021690 <memset>
 8020512:	4be5      	ldr	r3, [pc, #916]	@ (80208a8 <iNemoEngine_API_Update+0x4550>)
 8020514:	702c      	strb	r4, [r5, #0]
 8020516:	eddd 7a05 	vldr	s15, [sp, #20]
 802051a:	edd5 2a02 	vldr	s5, [r5, #8]
 802051e:	ed9d 7a1a 	vldr	s14, [sp, #104]	@ 0x68
 8020522:	9a06      	ldr	r2, [sp, #24]
 8020524:	f8c5 31d4 	str.w	r3, [r5, #468]	@ 0x1d4
 8020528:	f8c5 31fc 	str.w	r3, [r5, #508]	@ 0x1fc
 802052c:	f8c5 3224 	str.w	r3, [r5, #548]	@ 0x224
 8020530:	f8c5 324c 	str.w	r3, [r5, #588]	@ 0x24c
 8020534:	f8c5 3274 	str.w	r3, [r5, #628]	@ 0x274
 8020538:	f8c5 329c 	str.w	r3, [r5, #668]	@ 0x29c
 802053c:	f8c5 32c4 	str.w	r3, [r5, #708]	@ 0x2c4
 8020540:	f8c5 32ec 	str.w	r3, [r5, #748]	@ 0x2ec
 8020544:	f8c5 3314 	str.w	r3, [r5, #788]	@ 0x314
 8020548:	2401      	movs	r4, #1
 802054a:	f7fd bb44 	b.w	801dbd6 <iNemoEngine_API_Update+0x187e>
 802054e:	290a      	cmp	r1, #10
 8020550:	f000 815d 	beq.w	802080e <iNemoEngine_API_Update+0x44b6>
 8020554:	1c4b      	adds	r3, r1, #1
 8020556:	9906      	ldr	r1, [sp, #24]
 8020558:	f881 31a0 	strb.w	r3, [r1, #416]	@ 0x1a0
 802055c:	4613      	mov	r3, r2
 802055e:	2200      	movs	r2, #0
 8020560:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8020564:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8020568:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 802056c:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 8020570:	f7fe b849 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 8020574:	ed9d 7a55 	vldr	s14, [sp, #340]	@ 0x154
 8020578:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802057c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020580:	f340 824f 	ble.w	8020a22 <iNemoEngine_API_Update+0x46ca>
 8020584:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8020588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020590:	f140 8244 	bpl.w	8020a1c <iNemoEngine_API_Update+0x46c4>
 8020594:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205a0:	f140 81f9 	bpl.w	8020996 <iNemoEngine_API_Update+0x463e>
 80205a4:	eddf 7ace 	vldr	s15, [pc, #824]	@ 80208e0 <iNemoEngine_API_Update+0x4588>
 80205a8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80205ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80205b0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80205b4:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80205b8:	eef0 8a46 	vmov.f32	s17, s12
 80205bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205c0:	eee7 8aa5 	vfma.f32	s17, s15, s11
 80205c4:	f2c0 81fb 	blt.w	80209be <iNemoEngine_API_Update+0x4666>
 80205c8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80205cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80205d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205d4:	f140 81fb 	bpl.w	80209ce <iNemoEngine_API_Update+0x4676>
 80205d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80205dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80205e0:	ed9f 6ab2 	vldr	s12, [pc, #712]	@ 80208ac <iNemoEngine_API_Update+0x4554>
 80205e4:	eddf 8ab2 	vldr	s17, [pc, #712]	@ 80208b0 <iNemoEngine_API_Update+0x4558>
 80205e8:	eee7 8a86 	vfma.f32	s17, s15, s12
 80205ec:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80205f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80205f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205f8:	f2c0 81fb 	blt.w	80209f2 <iNemoEngine_API_Update+0x469a>
 80205fc:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 8020600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020608:	f140 81fb 	bpl.w	8020a02 <iNemoEngine_API_Update+0x46aa>
 802060c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8020610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020614:	eef0 8a00 	vmov.f32	s17, #0	@ 0x40000000  2.0
 8020618:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802061c:	eee7 8a87 	vfma.f32	s17, s15, s14
 8020620:	9a06      	ldr	r2, [sp, #24]
 8020622:	2300      	movs	r3, #0
 8020624:	f8a2 31a6 	strh.w	r3, [r2, #422]	@ 0x1a6
 8020628:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 802062c:	f7fe bc29 	b.w	801ee82 <iNemoEngine_API_Update+0x2b2a>
 8020630:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80208b4 <iNemoEngine_API_Update+0x455c>
 8020634:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802063c:	f57e ad78 	bpl.w	801f130 <iNemoEngine_API_Update+0x2dd8>
 8020640:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80208b8 <iNemoEngine_API_Update+0x4560>
 8020644:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 80208e0 <iNemoEngine_API_Update+0x4588>
 8020648:	eddf 5a9c 	vldr	s11, [pc, #624]	@ 80208bc <iNemoEngine_API_Update+0x4564>
 802064c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8020650:	ee26 6a26 	vmul.f32	s12, s12, s13
 8020654:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 80208c0 <iNemoEngine_API_Update+0x4568>
 8020658:	eee6 6a25 	vfma.f32	s13, s12, s11
 802065c:	ed9f 6a99 	vldr	s12, [pc, #612]	@ 80208c4 <iNemoEngine_API_Update+0x456c>
 8020660:	eef4 7ac6 	vcmpe.f32	s15, s12
 8020664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020668:	f6fe ad78 	blt.w	801f15c <iNemoEngine_API_Update+0x2e04>
 802066c:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80208c8 <iNemoEngine_API_Update+0x4570>
 8020670:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020678:	f57e ad78 	bpl.w	801f16c <iNemoEngine_API_Update+0x2e14>
 802067c:	ed9f 6a91 	vldr	s12, [pc, #580]	@ 80208c4 <iNemoEngine_API_Update+0x456c>
 8020680:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8020684:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8020688:	ee26 6a26 	vmul.f32	s12, s12, s13
 802068c:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
 8020690:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8020694:	eee6 6a25 	vfma.f32	s13, s12, s11
 8020698:	ed9f 6a93 	vldr	s12, [pc, #588]	@ 80208e8 <iNemoEngine_API_Update+0x4590>
 802069c:	eef4 7ac6 	vcmpe.f32	s15, s12
 80206a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206a4:	f6fe ad78 	blt.w	801f198 <iNemoEngine_API_Update+0x2e40>
 80206a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80206ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80206b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206b4:	f57e ad77 	bpl.w	801f1a6 <iNemoEngine_API_Update+0x2e4e>
 80206b8:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 80208e8 <iNemoEngine_API_Update+0x4590>
 80206bc:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80208cc <iNemoEngine_API_Update+0x4574>
 80206c0:	eddf 5a83 	vldr	s11, [pc, #524]	@ 80208d0 <iNemoEngine_API_Update+0x4578>
 80206c4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80206c8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80206cc:	eef2 6a05 	vmov.f32	s13, #37	@ 0x41280000  10.5
 80206d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80206d4:	f7fe bd75 	b.w	801f1c2 <iNemoEngine_API_Update+0x2e6a>
 80206d8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80208d4 <iNemoEngine_API_Update+0x457c>
 80206dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80206e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206e4:	f57e ad06 	bpl.w	801f0f4 <iNemoEngine_API_Update+0x2d9c>
 80206e8:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80208b8 <iNemoEngine_API_Update+0x4560>
 80206ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80206f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206f4:	da9c      	bge.n	8020630 <iNemoEngine_API_Update+0x42d8>
 80206f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80206fa:	f7fe bd11 	b.w	801f120 <iNemoEngine_API_Update+0x2dc8>
 80206fe:	2104      	movs	r1, #4
 8020700:	f04f 0e03 	mov.w	lr, #3
 8020704:	2706      	movs	r7, #6
 8020706:	f04f 0c07 	mov.w	ip, #7
 802070a:	4608      	mov	r0, r1
 802070c:	2301      	movs	r3, #1
 802070e:	2600      	movs	r6, #0
 8020710:	f7ff bbfa 	b.w	801ff08 <iNemoEngine_API_Update+0x3bb0>
 8020714:	eddf 3a70 	vldr	s7, [pc, #448]	@ 80208d8 <iNemoEngine_API_Update+0x4580>
 8020718:	ed9f 5a70 	vldr	s10, [pc, #448]	@ 80208dc <iNemoEngine_API_Update+0x4584>
 802071c:	ac43      	add	r4, sp, #268	@ 0x10c
 802071e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020722:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 8020726:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 802072a:	3101      	adds	r1, #1
 802072c:	eeb0 7a67 	vmov.f32	s14, s15
 8020730:	461a      	mov	r2, r3
 8020732:	edd2 5ad6 	vldr	s11, [r2, #856]	@ 0x358
 8020736:	320c      	adds	r2, #12
 8020738:	4290      	cmp	r0, r2
 802073a:	ee37 7a25 	vadd.f32	s14, s14, s11
 802073e:	d1f8      	bne.n	8020732 <iNemoEngine_API_Update+0x43da>
 8020740:	ee27 7a23 	vmul.f32	s14, s14, s7
 8020744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802074c:	edd3 5ad6 	vldr	s11, [r3, #856]	@ 0x358
 8020750:	330c      	adds	r3, #12
 8020752:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8020756:	4298      	cmp	r0, r3
 8020758:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802075c:	d1f6      	bne.n	802074c <iNemoEngine_API_Update+0x43f4>
 802075e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020762:	2902      	cmp	r1, #2
 8020764:	f100 0004 	add.w	r0, r0, #4
 8020768:	ece4 7a01 	vstmia	r4!, {s15}
 802076c:	d1d9      	bne.n	8020722 <iNemoEngine_API_Update+0x43ca>
 802076e:	eddd 5a43 	vldr	s11, [sp, #268]	@ 0x10c
 8020772:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 8020776:	ed9d 7a45 	vldr	s14, [sp, #276]	@ 0x114
 802077a:	eeb1 3ae5 	vsqrt.f32	s6, s11
 802077e:	eef1 3ae7 	vsqrt.f32	s7, s15
 8020782:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8020786:	ee77 7aa5 	vadd.f32	s15, s15, s11
 802078a:	eef3 5a00 	vmov.f32	s11, #48	@ 0x41800000  16.0
 802078e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020792:	ed8d 3a43 	vstr	s6, [sp, #268]	@ 0x10c
 8020796:	eef4 7ae5 	vcmpe.f32	s15, s11
 802079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802079e:	edcd 3a44 	vstr	s7, [sp, #272]	@ 0x110
 80207a2:	ed8d 5a45 	vstr	s10, [sp, #276]	@ 0x114
 80207a6:	f57e abd4 	bpl.w	801ef52 <iNemoEngine_API_Update+0x2bfa>
 80207aa:	9906      	ldr	r1, [sp, #24]
 80207ac:	ed8d 4a95 	vstr	s8, [sp, #596]	@ 0x254
 80207b0:	2200      	movs	r2, #0
 80207b2:	edcd 4a96 	vstr	s9, [sp, #600]	@ 0x258
 80207b6:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 80207ba:	464b      	mov	r3, r9
 80207bc:	704a      	strb	r2, [r1, #1]
 80207be:	f7fd bf22 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 80207c2:	2208      	movs	r2, #8
 80207c4:	9203      	str	r2, [sp, #12]
 80207c6:	2205      	movs	r2, #5
 80207c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80207ca:	2202      	movs	r2, #2
 80207cc:	f7ff bbb3 	b.w	801ff36 <iNemoEngine_API_Update+0x3bde>
 80207d0:	2301      	movs	r3, #1
 80207d2:	f7fd bf04 	b.w	801e5de <iNemoEngine_API_Update+0x2286>
 80207d6:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 80207da:	2b27      	cmp	r3, #39	@ 0x27
 80207dc:	d838      	bhi.n	8020850 <iNemoEngine_API_Update+0x44f8>
 80207de:	ed8d 4a95 	vstr	s8, [sp, #596]	@ 0x254
 80207e2:	edcd 4a96 	vstr	s9, [sp, #600]	@ 0x258
 80207e6:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 80207ea:	9906      	ldr	r1, [sp, #24]
 80207ec:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	@ 0x1a8
 80207f0:	3301      	adds	r3, #1
 80207f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80207f6:	bf14      	ite	ne
 80207f8:	b29b      	uxthne	r3, r3
 80207fa:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 80207fe:	2201      	movs	r2, #1
 8020800:	f8a1 31a8 	strh.w	r3, [r1, #424]	@ 0x1a8
 8020804:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 8020808:	464b      	mov	r3, r9
 802080a:	f7fd befc 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 802080e:	9906      	ldr	r1, [sp, #24]
 8020810:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 8020814:	f891 31a3 	ldrb.w	r3, [r1, #419]	@ 0x1a3
 8020818:	ed8d ea95 	vstr	s28, [sp, #596]	@ 0x254
 802081c:	3301      	adds	r3, #1
 802081e:	f881 31a3 	strb.w	r3, [r1, #419]	@ 0x1a3
 8020822:	784b      	ldrb	r3, [r1, #1]
 8020824:	edcd ea96 	vstr	s29, [sp, #600]	@ 0x258
 8020828:	f240 1201 	movw	r2, #257	@ 0x101
 802082c:	edcd ba97 	vstr	s23, [sp, #604]	@ 0x25c
 8020830:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8020834:	b13b      	cbz	r3, 8020846 <iNemoEngine_API_Update+0x44ee>
 8020836:	2300      	movs	r3, #0
 8020838:	ed81 ea6f 	vstr	s28, [r1, #444]	@ 0x1bc
 802083c:	edc1 ea70 	vstr	s29, [r1, #448]	@ 0x1c0
 8020840:	edc1 ba71 	vstr	s23, [r1, #452]	@ 0x1c4
 8020844:	704b      	strb	r3, [r1, #1]
 8020846:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 802084a:	2301      	movs	r3, #1
 802084c:	f7fd bedb 	b.w	801e606 <iNemoEngine_API_Update+0x22ae>
 8020850:	ed8d ea95 	vstr	s28, [sp, #596]	@ 0x254
 8020854:	edcd ea96 	vstr	s29, [sp, #600]	@ 0x258
 8020858:	edcd ba97 	vstr	s23, [sp, #604]	@ 0x25c
 802085c:	e7c5      	b.n	80207ea <iNemoEngine_API_Update+0x4492>
 802085e:	eef0 7a47 	vmov.f32	s15, s14
 8020862:	e5bf      	b.n	80203e4 <iNemoEngine_API_Update+0x408c>
 8020864:	eef0 7a47 	vmov.f32	s15, s14
 8020868:	f7fd b86f 	b.w	801d94a <iNemoEngine_API_Update+0x15f2>
 802086c:	eef0 7a47 	vmov.f32	s15, s14
 8020870:	e563      	b.n	802033a <iNemoEngine_API_Update+0x3fe2>
 8020872:	eef0 7a47 	vmov.f32	s15, s14
 8020876:	f7fd b846 	b.w	801d906 <iNemoEngine_API_Update+0x15ae>
 802087a:	eef0 7a47 	vmov.f32	s15, s14
 802087e:	f7fe b96c 	b.w	801eb5a <iNemoEngine_API_Update+0x2802>
 8020882:	eef0 7a47 	vmov.f32	s15, s14
 8020886:	e4f2      	b.n	802026e <iNemoEngine_API_Update+0x3f16>
 8020888:	eef0 7a47 	vmov.f32	s15, s14
 802088c:	e533      	b.n	80202f6 <iNemoEngine_API_Update+0x3f9e>
 802088e:	eef0 7a47 	vmov.f32	s15, s14
 8020892:	f7fe b9a6 	b.w	801ebe2 <iNemoEngine_API_Update+0x288a>
 8020896:	f503 63f3 	add.w	r3, r3, #1944	@ 0x798
 802089a:	9315      	str	r3, [sp, #84]	@ 0x54
 802089c:	f7fc b886 	b.w	801c9ac <iNemoEngine_API_Update+0x654>
 80208a0:	f505 6597 	add.w	r5, r5, #1208	@ 0x4b8
 80208a4:	f7fe be2c 	b.w	801f500 <iNemoEngine_API_Update+0x31a8>
 80208a8:	40a00000 	.word	0x40a00000
 80208ac:	3e999998 	.word	0x3e999998
 80208b0:	3f99999a 	.word	0x3f99999a
 80208b4:	3cf5c28f 	.word	0x3cf5c28f
 80208b8:	3c75c28f 	.word	0x3c75c28f
 80208bc:	42855556 	.word	0x42855556
 80208c0:	3f866666 	.word	0x3f866666
 80208c4:	3d4ccccd 	.word	0x3d4ccccd
 80208c8:	3dcccccd 	.word	0x3dcccccd
 80208cc:	42200000 	.word	0x42200000
 80208d0:	40555555 	.word	0x40555555
 80208d4:	3c23d70a 	.word	0x3c23d70a
 80208d8:	3d088889 	.word	0x3d088889
 80208dc:	3d0d3dcb 	.word	0x3d0d3dcb
 80208e0:	3dccccd0 	.word	0x3dccccd0
 80208e4:	3f8ccccd 	.word	0x3f8ccccd
 80208e8:	3e4ccccd 	.word	0x3e4ccccd
 80208ec:	00000000 	.word	0x00000000
 80208f0:	eef0 7a47 	vmov.f32	s15, s14
 80208f4:	f7fe b997 	b.w	801ec26 <iNemoEngine_API_Update+0x28ce>
 80208f8:	eef0 7a47 	vmov.f32	s15, s14
 80208fc:	f7fe b94f 	b.w	801eb9e <iNemoEngine_API_Update+0x2846>
 8020900:	eef0 7a47 	vmov.f32	s15, s14
 8020904:	e4d5      	b.n	80202b2 <iNemoEngine_API_Update+0x3f5a>
 8020906:	eef0 7a47 	vmov.f32	s15, s14
 802090a:	f7fd b884 	b.w	801da16 <iNemoEngine_API_Update+0x16be>
 802090e:	eef0 7a47 	vmov.f32	s15, s14
 8020912:	e5cd      	b.n	80204b0 <iNemoEngine_API_Update+0x4158>
 8020914:	eef0 7a47 	vmov.f32	s15, s14
 8020918:	e586      	b.n	8020428 <iNemoEngine_API_Update+0x40d0>
 802091a:	eef0 7a47 	vmov.f32	s15, s14
 802091e:	f7fd b836 	b.w	801d98e <iNemoEngine_API_Update+0x1636>
 8020922:	eef0 7a47 	vmov.f32	s15, s14
 8020926:	f7fd b854 	b.w	801d9d2 <iNemoEngine_API_Update+0x167a>
 802092a:	eef0 7a47 	vmov.f32	s15, s14
 802092e:	e59d      	b.n	802046c <iNemoEngine_API_Update+0x4114>
 8020930:	eef0 7a47 	vmov.f32	s15, s14
 8020934:	f7fe b8ef 	b.w	801eb16 <iNemoEngine_API_Update+0x27be>
 8020938:	9906      	ldr	r1, [sp, #24]
 802093a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 802093e:	f8c1 324c 	str.w	r3, [r1, #588]	@ 0x24c
 8020942:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
 8020946:	f8c1 329c 	str.w	r3, [r1, #668]	@ 0x29c
 802094a:	f7fe ba9a 	b.w	801ee82 <iNemoEngine_API_Update+0x2b2a>
 802094e:	9906      	ldr	r1, [sp, #24]
 8020950:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	@ 0x1a6
 8020954:	3301      	adds	r3, #1
 8020956:	f8a1 31a6 	strh.w	r3, [r1, #422]	@ 0x1a6
 802095a:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 802095e:	460b      	mov	r3, r1
 8020960:	f7ff ba49 	b.w	801fdf6 <iNemoEngine_API_Update+0x3a9e>
 8020964:	2a00      	cmp	r2, #0
 8020966:	f73d afa4 	bgt.w	801e8b2 <iNemoEngine_API_Update+0x255a>
 802096a:	eddd 5a83 	vldr	s11, [sp, #524]	@ 0x20c
 802096e:	ed9d 7a84 	vldr	s14, [sp, #528]	@ 0x210
 8020972:	eddd 7a85 	vldr	s15, [sp, #532]	@ 0x214
 8020976:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 802097a:	ee65 5a86 	vmul.f32	s11, s11, s12
 802097e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8020982:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020986:	edcd 5a83 	vstr	s11, [sp, #524]	@ 0x20c
 802098a:	ed8d 7a84 	vstr	s14, [sp, #528]	@ 0x210
 802098e:	edcd 7a85 	vstr	s15, [sp, #532]	@ 0x214
 8020992:	f7fd bb24 	b.w	801dfde <iNemoEngine_API_Update+0x1c86>
 8020996:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 802099a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 802099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209a2:	f57f ae11 	bpl.w	80205c8 <iNemoEngine_API_Update+0x4270>
 80209a6:	ed1f 6a32 	vldr	s12, [pc, #-200]	@ 80208e0 <iNemoEngine_API_Update+0x4588>
 80209aa:	ed5f 8a32 	vldr	s17, [pc, #-200]	@ 80208e4 <iNemoEngine_API_Update+0x458c>
 80209ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80209b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80209b6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80209ba:	eee7 8a86 	vfma.f32	s17, s15, s12
 80209be:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80209c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80209c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209ca:	f6ff ae0f 	blt.w	80205ec <iNemoEngine_API_Update+0x4294>
 80209ce:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80209d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80209d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209da:	f57f ae0f 	bpl.w	80205fc <iNemoEngine_API_Update+0x42a4>
 80209de:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80209e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80209e6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80209ea:	eef7 8a08 	vmov.f32	s17, #120	@ 0x3fc00000  1.5
 80209ee:	eee7 8a86 	vfma.f32	s17, s15, s12
 80209f2:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 80209f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80209fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209fe:	f6ff ae0f 	blt.w	8020620 <iNemoEngine_API_Update+0x42c8>
 8020a02:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 8020a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020a0a:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 80208e8 <iNemoEngine_API_Update+0x4590>
 8020a0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020a12:	eef0 8a08 	vmov.f32	s17, #8	@ 0x40400000  3.0
 8020a16:	eee7 8a87 	vfma.f32	s17, s15, s14
 8020a1a:	e601      	b.n	8020620 <iNemoEngine_API_Update+0x42c8>
 8020a1c:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 8020a20:	e5fe      	b.n	8020620 <iNemoEngine_API_Update+0x42c8>
 8020a22:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8020a26:	e5fb      	b.n	8020620 <iNemoEngine_API_Update+0x42c8>
 8020a28:	ed1f 8a50 	vldr	s16, [pc, #-320]	@ 80208ec <iNemoEngine_API_Update+0x4594>
 8020a2c:	f7fb bdeb 	b.w	801c606 <iNemoEngine_API_Update+0x2ae>

08020a30 <MotionFX_GetStateSize>:
 8020a30:	f44f 6018 	mov.w	r0, #2432	@ 0x980
 8020a34:	4770      	bx	lr
 8020a36:	bf00      	nop

08020a38 <MotionFX_initialize>:
 8020a38:	4a4c      	ldr	r2, [pc, #304]	@ (8020b6c <MotionFX_initialize+0x134>)
 8020a3a:	6813      	ldr	r3, [r2, #0]
 8020a3c:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 8020a40:	f023 0301 	bic.w	r3, r3, #1
 8020a44:	b530      	push	{r4, r5, lr}
 8020a46:	6013      	str	r3, [r2, #0]
 8020a48:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 8020a4c:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8020a50:	400b      	ands	r3, r1
 8020a52:	f24c 2240 	movw	r2, #49728	@ 0xc240
 8020a56:	4293      	cmp	r3, r2
 8020a58:	b085      	sub	sp, #20
 8020a5a:	4604      	mov	r4, r0
 8020a5c:	d013      	beq.n	8020a86 <MotionFX_initialize+0x4e>
 8020a5e:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 8020a62:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8020a66:	4019      	ands	r1, r3
 8020a68:	4291      	cmp	r1, r2
 8020a6a:	d00c      	beq.n	8020a86 <MotionFX_initialize+0x4e>
 8020a6c:	4a40      	ldr	r2, [pc, #256]	@ (8020b70 <MotionFX_initialize+0x138>)
 8020a6e:	2301      	movs	r3, #1
 8020a70:	6093      	str	r3, [r2, #8]
 8020a72:	6893      	ldr	r3, [r2, #8]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d1fc      	bne.n	8020a72 <MotionFX_initialize+0x3a>
 8020a78:	4b3e      	ldr	r3, [pc, #248]	@ (8020b74 <MotionFX_initialize+0x13c>)
 8020a7a:	6013      	str	r3, [r2, #0]
 8020a7c:	6812      	ldr	r2, [r2, #0]
 8020a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8020b78 <MotionFX_initialize+0x140>)
 8020a80:	429a      	cmp	r2, r3
 8020a82:	d02c      	beq.n	8020ade <MotionFX_initialize+0xa6>
 8020a84:	e7fe      	b.n	8020a84 <MotionFX_initialize+0x4c>
 8020a86:	4b3d      	ldr	r3, [pc, #244]	@ (8020b7c <MotionFX_initialize+0x144>)
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d1ee      	bne.n	8020a6c <MotionFX_initialize+0x34>
 8020a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8020b80 <MotionFX_initialize+0x148>)
 8020a90:	6813      	ldr	r3, [r2, #0]
 8020a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020a96:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8020a9a:	d056      	beq.n	8020b4a <MotionFX_initialize+0x112>
 8020a9c:	6813      	ldr	r3, [r2, #0]
 8020a9e:	f240 4183 	movw	r1, #1155	@ 0x483
 8020aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020aa6:	428b      	cmp	r3, r1
 8020aa8:	d04f      	beq.n	8020b4a <MotionFX_initialize+0x112>
 8020aaa:	6813      	ldr	r3, [r2, #0]
 8020aac:	f240 4285 	movw	r2, #1157	@ 0x485
 8020ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020ab4:	4293      	cmp	r3, r2
 8020ab6:	d048      	beq.n	8020b4a <MotionFX_initialize+0x112>
 8020ab8:	4b32      	ldr	r3, [pc, #200]	@ (8020b84 <MotionFX_initialize+0x14c>)
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020ac0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8020ac4:	d1d2      	bne.n	8020a6c <MotionFX_initialize+0x34>
 8020ac6:	4a30      	ldr	r2, [pc, #192]	@ (8020b88 <MotionFX_initialize+0x150>)
 8020ac8:	2301      	movs	r3, #1
 8020aca:	6093      	str	r3, [r2, #8]
 8020acc:	6893      	ldr	r3, [r2, #8]
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d1fc      	bne.n	8020acc <MotionFX_initialize+0x94>
 8020ad2:	4b28      	ldr	r3, [pc, #160]	@ (8020b74 <MotionFX_initialize+0x13c>)
 8020ad4:	6013      	str	r3, [r2, #0]
 8020ad6:	6812      	ldr	r2, [r2, #0]
 8020ad8:	4b27      	ldr	r3, [pc, #156]	@ (8020b78 <MotionFX_initialize+0x140>)
 8020ada:	429a      	cmp	r2, r3
 8020adc:	d1d2      	bne.n	8020a84 <MotionFX_initialize+0x4c>
 8020ade:	4b2b      	ldr	r3, [pc, #172]	@ (8020b8c <MotionFX_initialize+0x154>)
 8020ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8020b90 <MotionFX_initialize+0x158>)
 8020ae2:	9303      	str	r3, [sp, #12]
 8020ae4:	2501      	movs	r5, #1
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8020aec:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 8020af0:	f7f8 feb6 	bl	8019860 <MFX_emptyAttitude>
 8020af4:	a901      	add	r1, sp, #4
 8020af6:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 8020afa:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8020afe:	f7f7 fa1b 	bl	8017f38 <updateOrientation>
 8020b02:	a903      	add	r1, sp, #12
 8020b04:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8020b08:	f7f7 fa16 	bl	8017f38 <updateOrientation>
 8020b0c:	a902      	add	r1, sp, #8
 8020b0e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8020b12:	f7f7 fa11 	bl	8017f38 <updateOrientation>
 8020b16:	4b1f      	ldr	r3, [pc, #124]	@ (8020b94 <MotionFX_initialize+0x15c>)
 8020b18:	491f      	ldr	r1, [pc, #124]	@ (8020b98 <MotionFX_initialize+0x160>)
 8020b1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8020b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8020b9c <MotionFX_initialize+0x164>)
 8020b1e:	4a20      	ldr	r2, [pc, #128]	@ (8020ba0 <MotionFX_initialize+0x168>)
 8020b20:	62a1      	str	r1, [r4, #40]	@ 0x28
 8020b22:	61e3      	str	r3, [r4, #28]
 8020b24:	491f      	ldr	r1, [pc, #124]	@ (8020ba4 <MotionFX_initialize+0x16c>)
 8020b26:	61a2      	str	r2, [r4, #24]
 8020b28:	2300      	movs	r3, #0
 8020b2a:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8020b2e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8020b32:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8020b36:	f240 1301 	movw	r3, #257	@ 0x101
 8020b3a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8020b3c:	6221      	str	r1, [r4, #32]
 8020b3e:	80a2      	strh	r2, [r4, #4]
 8020b40:	f8a4 300d 	strh.w	r3, [r4, #13]
 8020b44:	73e5      	strb	r5, [r4, #15]
 8020b46:	b005      	add	sp, #20
 8020b48:	bd30      	pop	{r4, r5, pc}
 8020b4a:	4a17      	ldr	r2, [pc, #92]	@ (8020ba8 <MotionFX_initialize+0x170>)
 8020b4c:	2301      	movs	r3, #1
 8020b4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8020b52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d1fb      	bne.n	8020b52 <MotionFX_initialize+0x11a>
 8020b5a:	4b06      	ldr	r3, [pc, #24]	@ (8020b74 <MotionFX_initialize+0x13c>)
 8020b5c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8020b60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8020b64:	4b04      	ldr	r3, [pc, #16]	@ (8020b78 <MotionFX_initialize+0x140>)
 8020b66:	429a      	cmp	r2, r3
 8020b68:	d0b9      	beq.n	8020ade <MotionFX_initialize+0xa6>
 8020b6a:	e78b      	b.n	8020a84 <MotionFX_initialize+0x4c>
 8020b6c:	e0002000 	.word	0xe0002000
 8020b70:	40023000 	.word	0x40023000
 8020b74:	f407a5c2 	.word	0xf407a5c2
 8020b78:	b5e8b5cd 	.word	0xb5e8b5cd
 8020b7c:	e0042000 	.word	0xe0042000
 8020b80:	5c001000 	.word	0x5c001000
 8020b84:	50081000 	.word	0x50081000
 8020b88:	4c004000 	.word	0x4c004000
 8020b8c:	00756e65 	.word	0x00756e65
 8020b90:	2000036c 	.word	0x2000036c
 8020b94:	3f2ac083 	.word	0x3f2ac083
 8020b98:	3f666666 	.word	0x3f666666
 8020b9c:	3a378034 	.word	0x3a378034
 8020ba0:	3a51b717 	.word	0x3a51b717
 8020ba4:	3b378034 	.word	0x3b378034
 8020ba8:	58024000 	.word	0x58024000

08020bac <MotionFX_setKnobs>:
 8020bac:	4b24      	ldr	r3, [pc, #144]	@ (8020c40 <MotionFX_setKnobs+0x94>)
 8020bae:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 8020bb2:	b902      	cbnz	r2, 8020bb6 <MotionFX_setKnobs+0xa>
 8020bb4:	4770      	bx	lr
 8020bb6:	460b      	mov	r3, r1
 8020bb8:	2900      	cmp	r1, #0
 8020bba:	d0fb      	beq.n	8020bb4 <MotionFX_setKnobs+0x8>
 8020bbc:	b510      	push	{r4, lr}
 8020bbe:	4604      	mov	r4, r0
 8020bc0:	689a      	ldr	r2, [r3, #8]
 8020bc2:	6808      	ldr	r0, [r1, #0]
 8020bc4:	6849      	ldr	r1, [r1, #4]
 8020bc6:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8020bc8:	62a0      	str	r0, [r4, #40]	@ 0x28
 8020bca:	6362      	str	r2, [r4, #52]	@ 0x34
 8020bcc:	7b1a      	ldrb	r2, [r3, #12]
 8020bce:	7162      	strb	r2, [r4, #5]
 8020bd0:	6918      	ldr	r0, [r3, #16]
 8020bd2:	6959      	ldr	r1, [r3, #20]
 8020bd4:	699a      	ldr	r2, [r3, #24]
 8020bd6:	6222      	str	r2, [r4, #32]
 8020bd8:	61a0      	str	r0, [r4, #24]
 8020bda:	61e1      	str	r1, [r4, #28]
 8020bdc:	7f1a      	ldrb	r2, [r3, #28]
 8020bde:	7122      	strb	r2, [r4, #4]
 8020be0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8020be4:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8020be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020bea:	f884 2978 	strb.w	r2, [r4, #2424]	@ 0x978
 8020bee:	b084      	sub	sp, #16
 8020bf0:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 8020bf4:	7fda      	ldrb	r2, [r3, #31]
 8020bf6:	f88d 2006 	strb.w	r2, [sp, #6]
 8020bfa:	f8ad 1004 	strh.w	r1, [sp, #4]
 8020bfe:	f8b3 2021 	ldrh.w	r2, [r3, #33]	@ 0x21
 8020c02:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020c06:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8020c0a:	f88d 200a 	strb.w	r2, [sp, #10]
 8020c0e:	f8b3 2025 	ldrh.w	r2, [r3, #37]	@ 0x25
 8020c12:	f8ad 200c 	strh.w	r2, [sp, #12]
 8020c16:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8020c1a:	f88d 300e 	strb.w	r3, [sp, #14]
 8020c1e:	a901      	add	r1, sp, #4
 8020c20:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 8020c24:	f7f7 f988 	bl	8017f38 <updateOrientation>
 8020c28:	a903      	add	r1, sp, #12
 8020c2a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8020c2e:	f7f7 f983 	bl	8017f38 <updateOrientation>
 8020c32:	a902      	add	r1, sp, #8
 8020c34:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8020c38:	f7f7 f97e 	bl	8017f38 <updateOrientation>
 8020c3c:	b004      	add	sp, #16
 8020c3e:	bd10      	pop	{r4, pc}
 8020c40:	2000036c 	.word	0x2000036c

08020c44 <MotionFX_getKnobs>:
 8020c44:	4b1d      	ldr	r3, [pc, #116]	@ (8020cbc <MotionFX_getKnobs+0x78>)
 8020c46:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 8020c4a:	b903      	cbnz	r3, 8020c4e <MotionFX_getKnobs+0xa>
 8020c4c:	4770      	bx	lr
 8020c4e:	460a      	mov	r2, r1
 8020c50:	2900      	cmp	r1, #0
 8020c52:	d0fb      	beq.n	8020c4c <MotionFX_getKnobs+0x8>
 8020c54:	b510      	push	{r4, lr}
 8020c56:	4604      	mov	r4, r0
 8020c58:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8020c5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020c5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020c5e:	6093      	str	r3, [r2, #8]
 8020c60:	6010      	str	r0, [r2, #0]
 8020c62:	6051      	str	r1, [r2, #4]
 8020c64:	7963      	ldrb	r3, [r4, #5]
 8020c66:	7313      	strb	r3, [r2, #12]
 8020c68:	69a0      	ldr	r0, [r4, #24]
 8020c6a:	69e1      	ldr	r1, [r4, #28]
 8020c6c:	6a23      	ldr	r3, [r4, #32]
 8020c6e:	6193      	str	r3, [r2, #24]
 8020c70:	6110      	str	r0, [r2, #16]
 8020c72:	6151      	str	r1, [r2, #20]
 8020c74:	7923      	ldrb	r3, [r4, #4]
 8020c76:	7713      	strb	r3, [r2, #28]
 8020c78:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8020c7c:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 8020c80:	f894 3978 	ldrb.w	r3, [r4, #2424]	@ 0x978
 8020c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8020c86:	f102 011d 	add.w	r1, r2, #29
 8020c8a:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 8020c8e:	f7f6 ffad 	bl	8017bec <findAxis>
 8020c92:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 8020c96:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8020c9a:	f7f6 ffa7 	bl	8017bec <findAxis>
 8020c9e:	f102 0125 	add.w	r1, r2, #37	@ 0x25
 8020ca2:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8020ca6:	f7f6 ffa1 	bl	8017bec <findAxis>
 8020caa:	2300      	movs	r3, #0
 8020cac:	f882 3020 	strb.w	r3, [r2, #32]
 8020cb0:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 8020cb4:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8020cb8:	bd10      	pop	{r4, pc}
 8020cba:	bf00      	nop
 8020cbc:	2000036c 	.word	0x2000036c

08020cc0 <MotionFX_enable_6X>:
 8020cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8020cfc <MotionFX_enable_6X+0x3c>)
 8020cc2:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 8020cc6:	b903      	cbnz	r3, 8020cca <MotionFX_enable_6X+0xa>
 8020cc8:	4770      	bx	lr
 8020cca:	2900      	cmp	r1, #0
 8020ccc:	d0fc      	beq.n	8020cc8 <MotionFX_enable_6X+0x8>
 8020cce:	b530      	push	{r4, r5, lr}
 8020cd0:	1d05      	adds	r5, r0, #4
 8020cd2:	b099      	sub	sp, #100	@ 0x64
 8020cd4:	4604      	mov	r4, r0
 8020cd6:	4629      	mov	r1, r5
 8020cd8:	225c      	movs	r2, #92	@ 0x5c
 8020cda:	a801      	add	r0, sp, #4
 8020cdc:	f000 fd0c 	bl	80216f8 <memcpy>
 8020ce0:	4620      	mov	r0, r4
 8020ce2:	f7f8 fdbd 	bl	8019860 <MFX_emptyAttitude>
 8020ce6:	225c      	movs	r2, #92	@ 0x5c
 8020ce8:	a901      	add	r1, sp, #4
 8020cea:	4628      	mov	r0, r5
 8020cec:	f000 fd04 	bl	80216f8 <memcpy>
 8020cf0:	2300      	movs	r3, #0
 8020cf2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8020cf6:	7363      	strb	r3, [r4, #13]
 8020cf8:	b019      	add	sp, #100	@ 0x64
 8020cfa:	bd30      	pop	{r4, r5, pc}
 8020cfc:	2000036c 	.word	0x2000036c

08020d00 <MotionFX_enable_9X>:
 8020d00:	4b0e      	ldr	r3, [pc, #56]	@ (8020d3c <MotionFX_enable_9X+0x3c>)
 8020d02:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 8020d06:	b903      	cbnz	r3, 8020d0a <MotionFX_enable_9X+0xa>
 8020d08:	4770      	bx	lr
 8020d0a:	2900      	cmp	r1, #0
 8020d0c:	d0fc      	beq.n	8020d08 <MotionFX_enable_9X+0x8>
 8020d0e:	b530      	push	{r4, r5, lr}
 8020d10:	1d05      	adds	r5, r0, #4
 8020d12:	b099      	sub	sp, #100	@ 0x64
 8020d14:	4604      	mov	r4, r0
 8020d16:	4629      	mov	r1, r5
 8020d18:	225c      	movs	r2, #92	@ 0x5c
 8020d1a:	a801      	add	r0, sp, #4
 8020d1c:	f000 fcec 	bl	80216f8 <memcpy>
 8020d20:	4620      	mov	r0, r4
 8020d22:	f7f8 fd9d 	bl	8019860 <MFX_emptyAttitude>
 8020d26:	225c      	movs	r2, #92	@ 0x5c
 8020d28:	a901      	add	r1, sp, #4
 8020d2a:	4628      	mov	r0, r5
 8020d2c:	f000 fce4 	bl	80216f8 <memcpy>
 8020d30:	2301      	movs	r3, #1
 8020d32:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8020d36:	7363      	strb	r3, [r4, #13]
 8020d38:	b019      	add	sp, #100	@ 0x64
 8020d3a:	bd30      	pop	{r4, r5, pc}
 8020d3c:	2000036c 	.word	0x2000036c

08020d40 <MotionFX_update>:
 8020d40:	b430      	push	{r4, r5}
 8020d42:	4c06      	ldr	r4, [pc, #24]	@ (8020d5c <MotionFX_update+0x1c>)
 8020d44:	9d02      	ldr	r5, [sp, #8]
 8020d46:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 8020d4a:	b90c      	cbnz	r4, 8020d50 <MotionFX_update+0x10>
 8020d4c:	bc30      	pop	{r4, r5}
 8020d4e:	4770      	bx	lr
 8020d50:	ed93 0a00 	vldr	s0, [r3]
 8020d54:	462b      	mov	r3, r5
 8020d56:	bc30      	pop	{r4, r5}
 8020d58:	f7fb bafe 	b.w	801c358 <iNemoEngine_API_Update>
 8020d5c:	2000036c 	.word	0x2000036c

08020d60 <MotionFX_propagate>:
 8020d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d64:	ed2d 8b06 	vpush	{d8-d10}
 8020d68:	4ca2      	ldr	r4, [pc, #648]	@ (8020ff4 <MotionFX_propagate+0x294>)
 8020d6a:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 8020d6e:	b0a1      	sub	sp, #132	@ 0x84
 8020d70:	b926      	cbnz	r6, 8020d7c <MotionFX_propagate+0x1c>
 8020d72:	b021      	add	sp, #132	@ 0x84
 8020d74:	ecbd 8b06 	vpop	{d8-d10}
 8020d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d7c:	4694      	mov	ip, r2
 8020d7e:	4604      	mov	r4, r0
 8020d80:	460d      	mov	r5, r1
 8020d82:	68d0      	ldr	r0, [r2, #12]
 8020d84:	6911      	ldr	r1, [r2, #16]
 8020d86:	6952      	ldr	r2, [r2, #20]
 8020d88:	edd3 9a00 	vldr	s19, [r3]
 8020d8c:	ab13      	add	r3, sp, #76	@ 0x4c
 8020d8e:	c307      	stmia	r3!, {r0, r1, r2}
 8020d90:	f8dc 0000 	ldr.w	r0, [ip]
 8020d94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020d98:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020d9c:	ab10      	add	r3, sp, #64	@ 0x40
 8020d9e:	c307      	stmia	r3!, {r0, r1, r2}
 8020da0:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8020da4:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8020da8:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8020dac:	ab16      	add	r3, sp, #88	@ 0x58
 8020dae:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 8020db2:	c307      	stmia	r3!, {r0, r1, r2}
 8020db4:	4639      	mov	r1, r7
 8020db6:	a803      	add	r0, sp, #12
 8020db8:	aa13      	add	r2, sp, #76	@ 0x4c
 8020dba:	f7f6 feb5 	bl	8017b28 <rotVect>
 8020dbe:	aa16      	add	r2, sp, #88	@ 0x58
 8020dc0:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8020dc4:	a806      	add	r0, sp, #24
 8020dc6:	f7f6 feaf 	bl	8017b28 <rotVect>
 8020dca:	f8d4 394c 	ldr.w	r3, [r4, #2380]	@ 0x94c
 8020dce:	2b09      	cmp	r3, #9
 8020dd0:	d829      	bhi.n	8020e26 <MotionFX_propagate+0xc6>
 8020dd2:	eddd 8a04 	vldr	s17, [sp, #16]
 8020dd6:	ed9d 9a03 	vldr	s18, [sp, #12]
 8020dda:	ed9d 8a05 	vldr	s16, [sp, #20]
 8020dde:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8020de2:	eee9 7a09 	vfma.f32	s15, s18, s18
 8020de6:	eee8 7a08 	vfma.f32	s15, s16, s16
 8020dea:	ee17 0a90 	vmov	r0, s15
 8020dee:	f7df fbab 	bl	8000548 <__aeabi_f2d>
 8020df2:	ec41 0b10 	vmov	d0, r0, r1
 8020df6:	f001 f9a5 	bl	8022144 <sqrt>
 8020dfa:	ec51 0b10 	vmov	r0, r1, d0
 8020dfe:	f7df fed3 	bl	8000ba8 <__aeabi_d2f>
 8020e02:	ee07 0a90 	vmov	s15, r0
 8020e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020e0a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8020e0e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8020e12:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8020e16:	ee28 8a27 	vmul.f32	s16, s16, s15
 8020e1a:	ed8d 9a03 	vstr	s18, [sp, #12]
 8020e1e:	edcd 8a04 	vstr	s17, [sp, #16]
 8020e22:	ed8d 8a05 	vstr	s16, [sp, #20]
 8020e26:	7923      	ldrb	r3, [r4, #4]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	f000 80ce 	beq.w	8020fca <MotionFX_propagate+0x26a>
 8020e2e:	ee07 3a90 	vmov	s15, r3
 8020e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020e3e:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 8020e42:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 8020e46:	edd3 7a00 	vldr	s15, [r3]
 8020e4a:	eddd 8a06 	vldr	s17, [sp, #24]
 8020e4e:	ed9d 6a07 	vldr	s12, [sp, #28]
 8020e52:	eddd 6a08 	vldr	s13, [sp, #32]
 8020e56:	ed9f 8a68 	vldr	s16, [pc, #416]	@ 8020ff8 <MotionFX_propagate+0x298>
 8020e5a:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8020ffc <MotionFX_propagate+0x29c>
 8020e5e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8020e62:	ee26 9a08 	vmul.f32	s18, s12, s16
 8020e66:	edc3 7a00 	vstr	s15, [r3]
 8020e6a:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 8020e6e:	edd3 7a00 	vldr	s15, [r3]
 8020e72:	ed8d 9a07 	vstr	s18, [sp, #28]
 8020e76:	eee7 7a06 	vfma.f32	s15, s14, s12
 8020e7a:	ee68 8a88 	vmul.f32	s17, s17, s16
 8020e7e:	edc3 7a00 	vstr	s15, [r3]
 8020e82:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 8020e86:	edd3 7a00 	vldr	s15, [r3]
 8020e8a:	edcd 8a06 	vstr	s17, [sp, #24]
 8020e8e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8020e92:	ee26 8a88 	vmul.f32	s16, s13, s16
 8020e96:	edc3 7a00 	vstr	s15, [r3]
 8020e9a:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 8020e9e:	edd3 7a00 	vldr	s15, [r3]
 8020ea2:	ed8d 8a08 	vstr	s16, [sp, #32]
 8020ea6:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 8020eaa:	ed93 7a00 	vldr	s14, [r3]
 8020eae:	ee39 9a67 	vsub.f32	s18, s18, s15
 8020eb2:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8020eb6:	ee69 7a09 	vmul.f32	s15, s18, s18
 8020eba:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 8020ebe:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8020ec2:	ed93 7a00 	vldr	s14, [r3]
 8020ec6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8020eca:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8020ece:	eee8 7a08 	vfma.f32	s15, s16, s16
 8020ed2:	ee29 0a80 	vmul.f32	s0, s19, s0
 8020ed6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8020eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ede:	dd79      	ble.n	8020fd4 <MotionFX_propagate+0x274>
 8020ee0:	eeb1 aae7 	vsqrt.f32	s20, s15
 8020ee4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8020ee8:	eeb0 0a69 	vmov.f32	s0, s19
 8020eec:	f001 fae2 	bl	80224b4 <sinf>
 8020ef0:	eeb0 7a40 	vmov.f32	s14, s0
 8020ef4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020ef8:	eeb0 0a69 	vmov.f32	s0, s19
 8020efc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8020f00:	ee29 9a27 	vmul.f32	s18, s18, s15
 8020f04:	ee28 8a27 	vmul.f32	s16, s16, s15
 8020f08:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 8020f0c:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 8020f10:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 8020f14:	f001 fa82 	bl	802241c <cosf>
 8020f18:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 8020f1c:	a809      	add	r0, sp, #36	@ 0x24
 8020f1e:	f604 1838 	addw	r8, r4, #2360	@ 0x938
 8020f22:	4632      	mov	r2, r6
 8020f24:	4631      	mov	r1, r6
 8020f26:	f7f7 f889 	bl	801803c <qmult>
 8020f2a:	edd8 6a00 	vldr	s13, [r8]
 8020f2e:	edd6 5a00 	vldr	s11, [r6]
 8020f32:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 8020f36:	f604 1934 	addw	r9, r4, #2356	@ 0x934
 8020f3a:	ed99 6a00 	vldr	s12, [r9]
 8020f3e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8020f42:	4639      	mov	r1, r7
 8020f44:	eee6 7a06 	vfma.f32	s15, s12, s12
 8020f48:	f604 173c 	addw	r7, r4, #2364	@ 0x93c
 8020f4c:	3301      	adds	r3, #1
 8020f4e:	ed97 7a00 	vldr	s14, [r7]
 8020f52:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020f56:	aa13      	add	r2, sp, #76	@ 0x4c
 8020f58:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8020f5c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8020f60:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8020f64:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8020f68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8020f6c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8020f70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8020f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020f78:	edc6 5a00 	vstr	s11, [r6]
 8020f7c:	ed89 6a00 	vstr	s12, [r9]
 8020f80:	edc8 6a00 	vstr	s13, [r8]
 8020f84:	ed87 7a00 	vstr	s14, [r7]
 8020f88:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 8020f8c:	f7f6 fdcc 	bl	8017b28 <rotVect>
 8020f90:	6833      	ldr	r3, [r6, #0]
 8020f92:	60eb      	str	r3, [r5, #12]
 8020f94:	f8d9 3000 	ldr.w	r3, [r9]
 8020f98:	f8d8 2000 	ldr.w	r2, [r8]
 8020f9c:	612b      	str	r3, [r5, #16]
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	61ab      	str	r3, [r5, #24]
 8020fa2:	616a      	str	r2, [r5, #20]
 8020fa4:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8020fa8:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 8020fac:	e9cd 3200 	strd	r3, r2, [sp]
 8020fb0:	4601      	mov	r1, r0
 8020fb2:	f105 031c 	add.w	r3, r5, #28
 8020fb6:	462a      	mov	r2, r5
 8020fb8:	f105 000c 	add.w	r0, r5, #12
 8020fbc:	f7f8 fb86 	bl	80196cc <output_update>
 8020fc0:	b021      	add	sp, #132	@ 0x84
 8020fc2:	ecbd 8b06 	vpop	{d8-d10}
 8020fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020fca:	2301      	movs	r3, #1
 8020fcc:	7123      	strb	r3, [r4, #4]
 8020fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020fd2:	e734      	b.n	8020e3e <MotionFX_propagate+0xde>
 8020fd4:	ee68 8a80 	vmul.f32	s17, s17, s0
 8020fd8:	ee29 9a00 	vmul.f32	s18, s18, s0
 8020fdc:	ee28 8a00 	vmul.f32	s16, s16, s0
 8020fe0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8020fe4:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 8020fe8:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 8020fec:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 8020ff0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ff2:	e793      	b.n	8020f1c <MotionFX_propagate+0x1bc>
 8020ff4:	2000036c 	.word	0x2000036c
 8020ff8:	3c8efa35 	.word	0x3c8efa35
 8020ffc:	38d1b718 	.word	0x38d1b718

08021000 <MotionFX_MagCal_init>:
 8021000:	b570      	push	{r4, r5, r6, lr}
 8021002:	4c42      	ldr	r4, [pc, #264]	@ (802110c <MotionFX_MagCal_init+0x10c>)
 8021004:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 8021008:	b903      	cbnz	r3, 802100c <MotionFX_MagCal_init+0xc>
 802100a:	bd70      	pop	{r4, r5, r6, pc}
 802100c:	1e43      	subs	r3, r0, #1
 802100e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021012:	4605      	mov	r5, r0
 8021014:	d2f9      	bcs.n	802100a <MotionFX_MagCal_init+0xa>
 8021016:	2900      	cmp	r1, #0
 8021018:	d139      	bne.n	802108e <MotionFX_MagCal_init+0x8e>
 802101a:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
 802101e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8021022:	4a3b      	ldr	r2, [pc, #236]	@ (8021110 <MotionFX_MagCal_init+0x110>)
 8021024:	1b5b      	subs	r3, r3, r5
 8021026:	ee07 3a90 	vmov	s15, r3
 802102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802102e:	23c8      	movs	r3, #200	@ 0xc8
 8021030:	eef0 7ae7 	vabs.f32	s15, s15
 8021034:	fb93 f3f5 	sdiv	r3, r3, r5
 8021038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802103c:	b2db      	uxtb	r3, r3
 802103e:	2b0f      	cmp	r3, #15
 8021040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021044:	bf28      	it	cs
 8021046:	230f      	movcs	r3, #15
 8021048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802104c:	6015      	str	r5, [r2, #0]
 802104e:	f884 37de 	strb.w	r3, [r4, #2014]	@ 0x7de
 8021052:	b22d      	sxth	r5, r5
 8021054:	dc0e      	bgt.n	8021074 <MotionFX_MagCal_init+0x74>
 8021056:	edd4 7a01 	vldr	s15, [r4, #4]
 802105a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8021114 <MotionFX_MagCal_init+0x114>
 802105e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8021118 <MotionFX_MagCal_init+0x118>
 8021062:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021066:	eef0 7ae7 	vabs.f32	s15, s15
 802106a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021072:	dd08      	ble.n	8021086 <MotionFX_MagCal_init+0x86>
 8021074:	2300      	movs	r3, #0
 8021076:	4a29      	ldr	r2, [pc, #164]	@ (802111c <MotionFX_MagCal_init+0x11c>)
 8021078:	8123      	strh	r3, [r4, #8]
 802107a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 802107e:	60e3      	str	r3, [r4, #12]
 8021080:	8021      	strh	r1, [r4, #0]
 8021082:	8065      	strh	r5, [r4, #2]
 8021084:	6062      	str	r2, [r4, #4]
 8021086:	2300      	movs	r3, #0
 8021088:	f884 3858 	strb.w	r3, [r4, #2136]	@ 0x858
 802108c:	bd70      	pop	{r4, r5, r6, pc}
 802108e:	2600      	movs	r6, #0
 8021090:	f44f 0302 	mov.w	r3, #8519680	@ 0x820000
 8021094:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8021098:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 802109c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80210a0:	4631      	mov	r1, r6
 80210a2:	6123      	str	r3, [r4, #16]
 80210a4:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 80210a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80210ac:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 80210b0:	f884 6048 	strb.w	r6, [r4, #72]	@ 0x48
 80210b4:	64e6      	str	r6, [r4, #76]	@ 0x4c
 80210b6:	82a6      	strh	r6, [r4, #20]
 80210b8:	f000 faea 	bl	8021690 <memset>
 80210bc:	225f      	movs	r2, #95	@ 0x5f
 80210be:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
 80210c2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80210c6:	84a2      	strh	r2, [r4, #36]	@ 0x24
 80210c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80210cc:	23ff      	movs	r3, #255	@ 0xff
 80210ce:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 80210d2:	4631      	mov	r1, r6
 80210d4:	2230      	movs	r2, #48	@ 0x30
 80210d6:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80210da:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 80210de:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80210e2:	e9c4 6606 	strd	r6, r6, [r4, #24]
 80210e6:	6226      	str	r6, [r4, #32]
 80210e8:	f000 fad2 	bl	8021690 <memset>
 80210ec:	f1a5 030a 	sub.w	r3, r5, #10
 80210f0:	b29b      	uxth	r3, r3
 80210f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80210f6:	2101      	movs	r1, #1
 80210f8:	2b32      	cmp	r3, #50	@ 0x32
 80210fa:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
 80210fe:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8021100:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 8021104:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8021108:	d889      	bhi.n	802101e <MotionFX_MagCal_init+0x1e>
 802110a:	e786      	b.n	802101a <MotionFX_MagCal_init+0x1a>
 802110c:	2000036c 	.word	0x2000036c
 8021110:	20000000 	.word	0x20000000
 8021114:	3dcccccd 	.word	0x3dcccccd
 8021118:	3c23d70a 	.word	0x3c23d70a
 802111c:	3dcccccd 	.word	0x3dcccccd

08021120 <MotionFX_MagCal_run>:
 8021120:	4a3c      	ldr	r2, [pc, #240]	@ (8021214 <MotionFX_MagCal_run+0xf4>)
 8021122:	f892 33c4 	ldrb.w	r3, [r2, #964]	@ 0x3c4
 8021126:	2b00      	cmp	r3, #0
 8021128:	d073      	beq.n	8021212 <MotionFX_MagCal_run+0xf2>
 802112a:	ed90 7a00 	vldr	s14, [r0]
 802112e:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8021218 <MotionFX_MagCal_run+0xf8>
 8021132:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802113a:	bfb4      	ite	lt
 802113c:	eefe 7a00 	vmovlt.f32	s15, #224	@ 0xbf000000 -0.5
 8021140:	eef6 7a00 	vmovge.f32	s15, #96	@ 0x3f000000  0.5
 8021144:	eee7 7a26 	vfma.f32	s15, s14, s13
 8021148:	b5f0      	push	{r4, r5, r6, r7, lr}
 802114a:	ed90 7a01 	vldr	s14, [r0, #4]
 802114e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8021218 <MotionFX_MagCal_run+0xf8>
 8021152:	f892 3858 	ldrb.w	r3, [r2, #2136]	@ 0x858
 8021156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802115a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021162:	ee17 1a90 	vmov	r1, s15
 8021166:	bfb4      	ite	lt
 8021168:	eefe 7a00 	vmovlt.f32	s15, #224	@ 0xbf000000 -0.5
 802116c:	eef6 7a00 	vmovge.f32	s15, #96	@ 0x3f000000  0.5
 8021170:	eee7 7a26 	vfma.f32	s15, s14, s13
 8021174:	4604      	mov	r4, r0
 8021176:	ed90 7a02 	vldr	s14, [r0, #8]
 802117a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8021218 <MotionFX_MagCal_run+0xf8>
 802117e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021182:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802118a:	ee17 ca90 	vmov	ip, s15
 802118e:	bfac      	ite	ge
 8021190:	eef6 7a00 	vmovge.f32	s15, #96	@ 0x3f000000  0.5
 8021194:	eefe 7a00 	vmovlt.f32	s15, #224	@ 0xbf000000 -0.5
 8021198:	eee7 7a26 	vfma.f32	s15, s14, s13
 802119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80211a0:	ee17 0a90 	vmov	r0, s15
 80211a4:	b36b      	cbz	r3, 8021202 <MotionFX_MagCal_run+0xe2>
 80211a6:	4c1d      	ldr	r4, [pc, #116]	@ (802121c <MotionFX_MagCal_run+0xfc>)
 80211a8:	6824      	ldr	r4, [r4, #0]
 80211aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80211ae:	fb14 f403 	smulbb	r4, r4, r3
 80211b2:	f8a5 47e0 	strh.w	r4, [r5, #2016]	@ 0x7e0
 80211b6:	00dc      	lsls	r4, r3, #3
 80211b8:	f647 7efe 	movw	lr, #32766	@ 0x7ffe
 80211bc:	4d18      	ldr	r5, [pc, #96]	@ (8021220 <MotionFX_MagCal_run+0x100>)
 80211be:	4571      	cmp	r1, lr
 80211c0:	bfa8      	it	ge
 80211c2:	4671      	movge	r1, lr
 80211c4:	4570      	cmp	r0, lr
 80211c6:	bfa8      	it	ge
 80211c8:	4670      	movge	r0, lr
 80211ca:	42a9      	cmp	r1, r5
 80211cc:	bfb8      	it	lt
 80211ce:	4629      	movlt	r1, r5
 80211d0:	45ac      	cmp	ip, r5
 80211d2:	db02      	blt.n	80211da <MotionFX_MagCal_run+0xba>
 80211d4:	45e6      	cmp	lr, ip
 80211d6:	bfa8      	it	ge
 80211d8:	46e6      	movge	lr, ip
 80211da:	4414      	add	r4, r2
 80211dc:	3301      	adds	r3, #1
 80211de:	f8a4 17e2 	strh.w	r1, [r4, #2018]	@ 0x7e2
 80211e2:	490f      	ldr	r1, [pc, #60]	@ (8021220 <MotionFX_MagCal_run+0x100>)
 80211e4:	f8a4 e7e4 	strh.w	lr, [r4, #2020]	@ 0x7e4
 80211e8:	4288      	cmp	r0, r1
 80211ea:	bfb8      	it	lt
 80211ec:	4608      	movlt	r0, r1
 80211ee:	f892 17de 	ldrb.w	r1, [r2, #2014]	@ 0x7de
 80211f2:	f8a4 07e6 	strh.w	r0, [r4, #2022]	@ 0x7e6
 80211f6:	b2db      	uxtb	r3, r3
 80211f8:	428b      	cmp	r3, r1
 80211fa:	f882 3858 	strb.w	r3, [r2, #2136]	@ 0x858
 80211fe:	d011      	beq.n	8021224 <MotionFX_MagCal_run+0x104>
 8021200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021202:	68e4      	ldr	r4, [r4, #12]
 8021204:	f8c2 47d8 	str.w	r4, [r2, #2008]	@ 0x7d8
 8021208:	2401      	movs	r4, #1
 802120a:	f882 47dc 	strb.w	r4, [r2, #2012]	@ 0x7dc
 802120e:	461c      	mov	r4, r3
 8021210:	e7d2      	b.n	80211b8 <MotionFX_MagCal_run+0x98>
 8021212:	4770      	bx	lr
 8021214:	2000036c 	.word	0x2000036c
 8021218:	43fa0000 	.word	0x43fa0000
 802121c:	20000000 	.word	0x20000000
 8021220:	ffff8002 	.word	0xffff8002
 8021224:	f892 37dc 	ldrb.w	r3, [r2, #2012]	@ 0x7dc
 8021228:	f8d2 67d8 	ldr.w	r6, [r2, #2008]	@ 0x7d8
 802122c:	2000      	movs	r0, #0
 802122e:	f882 0858 	strb.w	r0, [r2, #2136]	@ 0x858
 8021232:	2b00      	cmp	r3, #0
 8021234:	f000 8152 	beq.w	80214dc <MotionFX_MagCal_run+0x3bc>
 8021238:	e9d2 5003 	ldrd	r5, r0, [r2, #12]
 802123c:	8954      	ldrh	r4, [r2, #10]
 802123e:	8913      	ldrh	r3, [r2, #8]
 8021240:	2900      	cmp	r1, #0
 8021242:	f000 8149 	beq.w	80214d8 <MotionFX_MagCal_run+0x3b8>
 8021246:	2c00      	cmp	r4, #0
 8021248:	f000 8146 	beq.w	80214d8 <MotionFX_MagCal_run+0x3b8>
 802124c:	42a3      	cmp	r3, r4
 802124e:	bf28      	it	cs
 8021250:	4623      	movcs	r3, r4
 8021252:	3301      	adds	r3, #1
 8021254:	b29b      	uxth	r3, r3
 8021256:	42a3      	cmp	r3, r4
 8021258:	bf28      	it	cs
 802125a:	4623      	movcs	r3, r4
 802125c:	f06f 4c60 	mvn.w	ip, #3758096384	@ 0xe0000000
 8021260:	eb03 050c 	add.w	r5, r3, ip
 8021264:	f04f 0e01 	mov.w	lr, #1
 8021268:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 802126c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8021270:	f8d2 77e2 	ldr.w	r7, [r2, #2018]	@ 0x7e2
 8021274:	f8c5 7002 	str.w	r7, [r5, #2]
 8021278:	f8b2 77e6 	ldrh.w	r7, [r2, #2022]	@ 0x7e6
 802127c:	80ef      	strh	r7, [r5, #6]
 802127e:	4571      	cmp	r1, lr
 8021280:	f000 8123 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 8021284:	4473      	add	r3, lr
 8021286:	b29b      	uxth	r3, r3
 8021288:	42a3      	cmp	r3, r4
 802128a:	bf28      	it	cs
 802128c:	4623      	movcs	r3, r4
 802128e:	eb03 050c 	add.w	r5, r3, ip
 8021292:	2902      	cmp	r1, #2
 8021294:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8021298:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 802129c:	f8d2 77ea 	ldr.w	r7, [r2, #2026]	@ 0x7ea
 80212a0:	f8c5 7002 	str.w	r7, [r5, #2]
 80212a4:	f8b2 77ee 	ldrh.w	r7, [r2, #2030]	@ 0x7ee
 80212a8:	80ef      	strh	r7, [r5, #6]
 80212aa:	f000 810e 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 80212ae:	4473      	add	r3, lr
 80212b0:	b29b      	uxth	r3, r3
 80212b2:	42a3      	cmp	r3, r4
 80212b4:	bf28      	it	cs
 80212b6:	4623      	movcs	r3, r4
 80212b8:	eb03 050c 	add.w	r5, r3, ip
 80212bc:	2903      	cmp	r1, #3
 80212be:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 80212c2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80212c6:	f8d2 77f2 	ldr.w	r7, [r2, #2034]	@ 0x7f2
 80212ca:	f8c5 7002 	str.w	r7, [r5, #2]
 80212ce:	f8b2 77f6 	ldrh.w	r7, [r2, #2038]	@ 0x7f6
 80212d2:	80ef      	strh	r7, [r5, #6]
 80212d4:	f000 80f9 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 80212d8:	4473      	add	r3, lr
 80212da:	b29b      	uxth	r3, r3
 80212dc:	42a3      	cmp	r3, r4
 80212de:	bf28      	it	cs
 80212e0:	4623      	movcs	r3, r4
 80212e2:	eb03 050c 	add.w	r5, r3, ip
 80212e6:	2904      	cmp	r1, #4
 80212e8:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 80212ec:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80212f0:	f8d2 77fa 	ldr.w	r7, [r2, #2042]	@ 0x7fa
 80212f4:	f8c5 7002 	str.w	r7, [r5, #2]
 80212f8:	f8b2 77fe 	ldrh.w	r7, [r2, #2046]	@ 0x7fe
 80212fc:	80ef      	strh	r7, [r5, #6]
 80212fe:	f000 80e4 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 8021302:	4473      	add	r3, lr
 8021304:	b29b      	uxth	r3, r3
 8021306:	42a3      	cmp	r3, r4
 8021308:	bf28      	it	cs
 802130a:	4623      	movcs	r3, r4
 802130c:	eb03 050c 	add.w	r5, r3, ip
 8021310:	2905      	cmp	r1, #5
 8021312:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8021316:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 802131a:	f8d2 7802 	ldr.w	r7, [r2, #2050]	@ 0x802
 802131e:	f8c5 7002 	str.w	r7, [r5, #2]
 8021322:	f8b2 7806 	ldrh.w	r7, [r2, #2054]	@ 0x806
 8021326:	80ef      	strh	r7, [r5, #6]
 8021328:	f000 80cf 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 802132c:	4473      	add	r3, lr
 802132e:	b29b      	uxth	r3, r3
 8021330:	42a3      	cmp	r3, r4
 8021332:	bf28      	it	cs
 8021334:	4623      	movcs	r3, r4
 8021336:	449c      	add	ip, r3
 8021338:	2906      	cmp	r1, #6
 802133a:	f800 e03c 	strb.w	lr, [r0, ip, lsl #3]
 802133e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8021342:	f8d2 580a 	ldr.w	r5, [r2, #2058]	@ 0x80a
 8021346:	f8cc 5002 	str.w	r5, [ip, #2]
 802134a:	f8b2 580e 	ldrh.w	r5, [r2, #2062]	@ 0x80e
 802134e:	f8ac 5006 	strh.w	r5, [ip, #6]
 8021352:	f000 80ba 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 8021356:	4473      	add	r3, lr
 8021358:	b29b      	uxth	r3, r3
 802135a:	42a3      	cmp	r3, r4
 802135c:	bf28      	it	cs
 802135e:	4623      	movcs	r3, r4
 8021360:	f06f 4560 	mvn.w	r5, #3758096384	@ 0xe0000000
 8021364:	eb03 0e05 	add.w	lr, r3, r5
 8021368:	f04f 0c01 	mov.w	ip, #1
 802136c:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8021370:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8021374:	f8d2 7812 	ldr.w	r7, [r2, #2066]	@ 0x812
 8021378:	f8ce 7002 	str.w	r7, [lr, #2]
 802137c:	f8b2 7816 	ldrh.w	r7, [r2, #2070]	@ 0x816
 8021380:	f8ae 7006 	strh.w	r7, [lr, #6]
 8021384:	2907      	cmp	r1, #7
 8021386:	f000 80a0 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 802138a:	4463      	add	r3, ip
 802138c:	b29b      	uxth	r3, r3
 802138e:	42a3      	cmp	r3, r4
 8021390:	bf28      	it	cs
 8021392:	4623      	movcs	r3, r4
 8021394:	eb03 0e05 	add.w	lr, r3, r5
 8021398:	2908      	cmp	r1, #8
 802139a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 802139e:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80213a2:	f8d2 781a 	ldr.w	r7, [r2, #2074]	@ 0x81a
 80213a6:	f8ce 7002 	str.w	r7, [lr, #2]
 80213aa:	f8b2 781e 	ldrh.w	r7, [r2, #2078]	@ 0x81e
 80213ae:	f8ae 7006 	strh.w	r7, [lr, #6]
 80213b2:	f000 808a 	beq.w	80214ca <MotionFX_MagCal_run+0x3aa>
 80213b6:	4463      	add	r3, ip
 80213b8:	b29b      	uxth	r3, r3
 80213ba:	42a3      	cmp	r3, r4
 80213bc:	bf28      	it	cs
 80213be:	4623      	movcs	r3, r4
 80213c0:	eb03 0e05 	add.w	lr, r3, r5
 80213c4:	2909      	cmp	r1, #9
 80213c6:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80213ca:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80213ce:	f8d2 7822 	ldr.w	r7, [r2, #2082]	@ 0x822
 80213d2:	f8ce 7002 	str.w	r7, [lr, #2]
 80213d6:	f8b2 7826 	ldrh.w	r7, [r2, #2086]	@ 0x826
 80213da:	f8ae 7006 	strh.w	r7, [lr, #6]
 80213de:	d074      	beq.n	80214ca <MotionFX_MagCal_run+0x3aa>
 80213e0:	4463      	add	r3, ip
 80213e2:	b29b      	uxth	r3, r3
 80213e4:	42a3      	cmp	r3, r4
 80213e6:	bf28      	it	cs
 80213e8:	4623      	movcs	r3, r4
 80213ea:	195f      	adds	r7, r3, r5
 80213ec:	290a      	cmp	r1, #10
 80213ee:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 80213f2:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 80213f6:	f8d2 e82a 	ldr.w	lr, [r2, #2090]	@ 0x82a
 80213fa:	f8c7 e002 	str.w	lr, [r7, #2]
 80213fe:	f8b2 e82e 	ldrh.w	lr, [r2, #2094]	@ 0x82e
 8021402:	f8a7 e006 	strh.w	lr, [r7, #6]
 8021406:	d060      	beq.n	80214ca <MotionFX_MagCal_run+0x3aa>
 8021408:	4463      	add	r3, ip
 802140a:	b29b      	uxth	r3, r3
 802140c:	42a3      	cmp	r3, r4
 802140e:	bf28      	it	cs
 8021410:	4623      	movcs	r3, r4
 8021412:	195f      	adds	r7, r3, r5
 8021414:	290b      	cmp	r1, #11
 8021416:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 802141a:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 802141e:	f8d2 e832 	ldr.w	lr, [r2, #2098]	@ 0x832
 8021422:	f8c7 e002 	str.w	lr, [r7, #2]
 8021426:	f8b2 e836 	ldrh.w	lr, [r2, #2102]	@ 0x836
 802142a:	f8a7 e006 	strh.w	lr, [r7, #6]
 802142e:	d04c      	beq.n	80214ca <MotionFX_MagCal_run+0x3aa>
 8021430:	4463      	add	r3, ip
 8021432:	b29b      	uxth	r3, r3
 8021434:	42a3      	cmp	r3, r4
 8021436:	bf28      	it	cs
 8021438:	4623      	movcs	r3, r4
 802143a:	195f      	adds	r7, r3, r5
 802143c:	290c      	cmp	r1, #12
 802143e:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8021442:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8021446:	f8d2 e83a 	ldr.w	lr, [r2, #2106]	@ 0x83a
 802144a:	f8c7 e002 	str.w	lr, [r7, #2]
 802144e:	f8b2 e83e 	ldrh.w	lr, [r2, #2110]	@ 0x83e
 8021452:	f8a7 e006 	strh.w	lr, [r7, #6]
 8021456:	d038      	beq.n	80214ca <MotionFX_MagCal_run+0x3aa>
 8021458:	4463      	add	r3, ip
 802145a:	b29b      	uxth	r3, r3
 802145c:	42a3      	cmp	r3, r4
 802145e:	bf28      	it	cs
 8021460:	4623      	movcs	r3, r4
 8021462:	195f      	adds	r7, r3, r5
 8021464:	290d      	cmp	r1, #13
 8021466:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 802146a:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 802146e:	f8d2 e842 	ldr.w	lr, [r2, #2114]	@ 0x842
 8021472:	f8c7 e002 	str.w	lr, [r7, #2]
 8021476:	f8b2 e846 	ldrh.w	lr, [r2, #2118]	@ 0x846
 802147a:	f8a7 e006 	strh.w	lr, [r7, #6]
 802147e:	d024      	beq.n	80214ca <MotionFX_MagCal_run+0x3aa>
 8021480:	4463      	add	r3, ip
 8021482:	b29b      	uxth	r3, r3
 8021484:	42a3      	cmp	r3, r4
 8021486:	bf28      	it	cs
 8021488:	4623      	movcs	r3, r4
 802148a:	195f      	adds	r7, r3, r5
 802148c:	290e      	cmp	r1, #14
 802148e:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8021492:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8021496:	f8d2 e84a 	ldr.w	lr, [r2, #2122]	@ 0x84a
 802149a:	f8c7 e002 	str.w	lr, [r7, #2]
 802149e:	f8b2 e84e 	ldrh.w	lr, [r2, #2126]	@ 0x84e
 80214a2:	f8a7 e006 	strh.w	lr, [r7, #6]
 80214a6:	d010      	beq.n	80214ca <MotionFX_MagCal_run+0x3aa>
 80214a8:	4463      	add	r3, ip
 80214aa:	b29b      	uxth	r3, r3
 80214ac:	42a3      	cmp	r3, r4
 80214ae:	bf28      	it	cs
 80214b0:	4623      	movcs	r3, r4
 80214b2:	441d      	add	r5, r3
 80214b4:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 80214b8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 80214bc:	f8d2 4852 	ldr.w	r4, [r2, #2130]	@ 0x852
 80214c0:	f8c0 4002 	str.w	r4, [r0, #2]
 80214c4:	f8b2 4856 	ldrh.w	r4, [r2, #2134]	@ 0x856
 80214c8:	80c4      	strh	r4, [r0, #6]
 80214ca:	3901      	subs	r1, #1
 80214cc:	b2c9      	uxtb	r1, r1
 80214ce:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80214d2:	f8b1 57e0 	ldrh.w	r5, [r1, #2016]	@ 0x7e0
 80214d6:	4435      	add	r5, r6
 80214d8:	8113      	strh	r3, [r2, #8]
 80214da:	60d5      	str	r5, [r2, #12]
 80214dc:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	f43f ae8d 	beq.w	8021200 <MotionFX_MagCal_run+0xe0>
 80214e6:	8911      	ldrh	r1, [r2, #8]
 80214e8:	8953      	ldrh	r3, [r2, #10]
 80214ea:	428b      	cmp	r3, r1
 80214ec:	d022      	beq.n	8021534 <MotionFX_MagCal_run+0x414>
 80214ee:	b329      	cbz	r1, 802153c <MotionFX_MagCal_run+0x41c>
 80214f0:	68d3      	ldr	r3, [r2, #12]
 80214f2:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80214f6:	3301      	adds	r3, #1
 80214f8:	4403      	add	r3, r0
 80214fa:	1c58      	adds	r0, r3, #1
 80214fc:	d01e      	beq.n	802153c <MotionFX_MagCal_run+0x41c>
 80214fe:	f503 541c 	add.w	r4, r3, #9984	@ 0x2700
 8021502:	3410      	adds	r4, #16
 8021504:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8021506:	42a0      	cmp	r0, r4
 8021508:	f8b2 4050 	ldrh.w	r4, [r2, #80]	@ 0x50
 802150c:	bf84      	itt	hi
 802150e:	64d3      	strhi	r3, [r2, #76]	@ 0x4c
 8021510:	4618      	movhi	r0, r3
 8021512:	4420      	add	r0, r4
 8021514:	4283      	cmp	r3, r0
 8021516:	f4ff ae73 	bcc.w	8021200 <MotionFX_MagCal_run+0xe0>
 802151a:	b131      	cbz	r1, 802152a <MotionFX_MagCal_run+0x40a>
 802151c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8021520:	68d2      	ldr	r2, [r2, #12]
 8021522:	3901      	subs	r1, #1
 8021524:	fb00 2111 	mls	r1, r0, r1, r2
 8021528:	b289      	uxth	r1, r1
 802152a:	1a5b      	subs	r3, r3, r1
 802152c:	b21b      	sxth	r3, r3
 802152e:	42a3      	cmp	r3, r4
 8021530:	f6ff ae66 	blt.w	8021200 <MotionFX_MagCal_run+0xe0>
 8021534:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021538:	f7f8 bc82 	b.w	8019e40 <MEMS_runMagCal.constprop.0>
 802153c:	f242 7410 	movw	r4, #10000	@ 0x2710
 8021540:	2300      	movs	r3, #0
 8021542:	e7df      	b.n	8021504 <MotionFX_MagCal_run+0x3e4>

08021544 <MotionFX_MagCal_getParams>:
 8021544:	4b20      	ldr	r3, [pc, #128]	@ (80215c8 <MotionFX_MagCal_getParams+0x84>)
 8021546:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 802154a:	b902      	cbnz	r2, 802154e <MotionFX_MagCal_getParams+0xa>
 802154c:	4770      	bx	lr
 802154e:	b530      	push	{r4, r5, lr}
 8021550:	f103 0e6c 	add.w	lr, r3, #108	@ 0x6c
 8021554:	4604      	mov	r4, r0
 8021556:	f893 506c 	ldrb.w	r5, [r3, #108]	@ 0x6c
 802155a:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 80215cc <MotionFX_MagCal_getParams+0x88>
 802155e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021562:	b08f      	sub	sp, #60	@ 0x3c
 8021564:	f10d 0c04 	add.w	ip, sp, #4
 8021568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802156c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021570:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021574:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021578:	eddd 6a02 	vldr	s13, [sp, #8]
 802157c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8021580:	eddd 7a04 	vldr	s15, [sp, #16]
 8021584:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021588:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021594:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8021598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80215a0:	f8de 3000 	ldr.w	r3, [lr]
 80215a4:	7325      	strb	r5, [r4, #12]
 80215a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80215aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80215ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80215b2:	edc4 6a00 	vstr	s13, [r4]
 80215b6:	f8cc 3000 	str.w	r3, [ip]
 80215ba:	ed84 7a01 	vstr	s14, [r4, #4]
 80215be:	edc4 7a02 	vstr	s15, [r4, #8]
 80215c2:	b00f      	add	sp, #60	@ 0x3c
 80215c4:	bd30      	pop	{r4, r5, pc}
 80215c6:	bf00      	nop
 80215c8:	2000036c 	.word	0x2000036c
 80215cc:	3b03126f 	.word	0x3b03126f

080215d0 <MotionFX_GetLibVersion>:
 80215d0:	b570      	push	{r4, r5, r6, lr}
 80215d2:	4b13      	ldr	r3, [pc, #76]	@ (8021620 <MotionFX_GetLibVersion+0x50>)
 80215d4:	f893 63c4 	ldrb.w	r6, [r3, #964]	@ 0x3c4
 80215d8:	b08a      	sub	sp, #40	@ 0x28
 80215da:	b1ee      	cbz	r6, 8021618 <MotionFX_GetLibVersion+0x48>
 80215dc:	4d11      	ldr	r5, [pc, #68]	@ (8021624 <MotionFX_GetLibVersion+0x54>)
 80215de:	4684      	mov	ip, r0
 80215e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80215e2:	f10d 0e04 	add.w	lr, sp, #4
 80215e6:	4674      	mov	r4, lr
 80215e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80215ec:	682b      	ldr	r3, [r5, #0]
 80215ee:	f82e 3b02 	strh.w	r3, [lr], #2
 80215f2:	0c1b      	lsrs	r3, r3, #16
 80215f4:	f88e 3000 	strb.w	r3, [lr]
 80215f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80215fa:	f8cc 2008 	str.w	r2, [ip, #8]
 80215fe:	8822      	ldrh	r2, [r4, #0]
 8021600:	f8ac 2010 	strh.w	r2, [ip, #16]
 8021604:	78a2      	ldrb	r2, [r4, #2]
 8021606:	f8cc 0000 	str.w	r0, [ip]
 802160a:	2612      	movs	r6, #18
 802160c:	f8cc 1004 	str.w	r1, [ip, #4]
 8021610:	f8cc 300c 	str.w	r3, [ip, #12]
 8021614:	f88c 2012 	strb.w	r2, [ip, #18]
 8021618:	4630      	mov	r0, r6
 802161a:	b00a      	add	sp, #40	@ 0x28
 802161c:	bd70      	pop	{r4, r5, r6, pc}
 802161e:	bf00      	nop
 8021620:	2000036c 	.word	0x2000036c
 8021624:	08026840 	.word	0x08026840

08021628 <sniprintf>:
 8021628:	b40c      	push	{r2, r3}
 802162a:	b530      	push	{r4, r5, lr}
 802162c:	4b17      	ldr	r3, [pc, #92]	@ (802168c <sniprintf+0x64>)
 802162e:	1e0c      	subs	r4, r1, #0
 8021630:	681d      	ldr	r5, [r3, #0]
 8021632:	b09d      	sub	sp, #116	@ 0x74
 8021634:	da08      	bge.n	8021648 <sniprintf+0x20>
 8021636:	238b      	movs	r3, #139	@ 0x8b
 8021638:	602b      	str	r3, [r5, #0]
 802163a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802163e:	b01d      	add	sp, #116	@ 0x74
 8021640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021644:	b002      	add	sp, #8
 8021646:	4770      	bx	lr
 8021648:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802164c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021650:	bf14      	ite	ne
 8021652:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8021656:	4623      	moveq	r3, r4
 8021658:	9304      	str	r3, [sp, #16]
 802165a:	9307      	str	r3, [sp, #28]
 802165c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021660:	9002      	str	r0, [sp, #8]
 8021662:	9006      	str	r0, [sp, #24]
 8021664:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021668:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802166a:	ab21      	add	r3, sp, #132	@ 0x84
 802166c:	a902      	add	r1, sp, #8
 802166e:	4628      	mov	r0, r5
 8021670:	9301      	str	r3, [sp, #4]
 8021672:	f000 f9a3 	bl	80219bc <_svfiprintf_r>
 8021676:	1c43      	adds	r3, r0, #1
 8021678:	bfbc      	itt	lt
 802167a:	238b      	movlt	r3, #139	@ 0x8b
 802167c:	602b      	strlt	r3, [r5, #0]
 802167e:	2c00      	cmp	r4, #0
 8021680:	d0dd      	beq.n	802163e <sniprintf+0x16>
 8021682:	9b02      	ldr	r3, [sp, #8]
 8021684:	2200      	movs	r2, #0
 8021686:	701a      	strb	r2, [r3, #0]
 8021688:	e7d9      	b.n	802163e <sniprintf+0x16>
 802168a:	bf00      	nop
 802168c:	200002ec 	.word	0x200002ec

08021690 <memset>:
 8021690:	4402      	add	r2, r0
 8021692:	4603      	mov	r3, r0
 8021694:	4293      	cmp	r3, r2
 8021696:	d100      	bne.n	802169a <memset+0xa>
 8021698:	4770      	bx	lr
 802169a:	f803 1b01 	strb.w	r1, [r3], #1
 802169e:	e7f9      	b.n	8021694 <memset+0x4>

080216a0 <__errno>:
 80216a0:	4b01      	ldr	r3, [pc, #4]	@ (80216a8 <__errno+0x8>)
 80216a2:	6818      	ldr	r0, [r3, #0]
 80216a4:	4770      	bx	lr
 80216a6:	bf00      	nop
 80216a8:	200002ec 	.word	0x200002ec

080216ac <__libc_init_array>:
 80216ac:	b570      	push	{r4, r5, r6, lr}
 80216ae:	4d0d      	ldr	r5, [pc, #52]	@ (80216e4 <__libc_init_array+0x38>)
 80216b0:	4c0d      	ldr	r4, [pc, #52]	@ (80216e8 <__libc_init_array+0x3c>)
 80216b2:	1b64      	subs	r4, r4, r5
 80216b4:	10a4      	asrs	r4, r4, #2
 80216b6:	2600      	movs	r6, #0
 80216b8:	42a6      	cmp	r6, r4
 80216ba:	d109      	bne.n	80216d0 <__libc_init_array+0x24>
 80216bc:	4d0b      	ldr	r5, [pc, #44]	@ (80216ec <__libc_init_array+0x40>)
 80216be:	4c0c      	ldr	r4, [pc, #48]	@ (80216f0 <__libc_init_array+0x44>)
 80216c0:	f005 f83a 	bl	8026738 <_init>
 80216c4:	1b64      	subs	r4, r4, r5
 80216c6:	10a4      	asrs	r4, r4, #2
 80216c8:	2600      	movs	r6, #0
 80216ca:	42a6      	cmp	r6, r4
 80216cc:	d105      	bne.n	80216da <__libc_init_array+0x2e>
 80216ce:	bd70      	pop	{r4, r5, r6, pc}
 80216d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80216d4:	4798      	blx	r3
 80216d6:	3601      	adds	r6, #1
 80216d8:	e7ee      	b.n	80216b8 <__libc_init_array+0xc>
 80216da:	f855 3b04 	ldr.w	r3, [r5], #4
 80216de:	4798      	blx	r3
 80216e0:	3601      	adds	r6, #1
 80216e2:	e7f2      	b.n	80216ca <__libc_init_array+0x1e>
 80216e4:	08026f58 	.word	0x08026f58
 80216e8:	08026f58 	.word	0x08026f58
 80216ec:	08026f58 	.word	0x08026f58
 80216f0:	08026f5c 	.word	0x08026f5c

080216f4 <__retarget_lock_acquire_recursive>:
 80216f4:	4770      	bx	lr

080216f6 <__retarget_lock_release_recursive>:
 80216f6:	4770      	bx	lr

080216f8 <memcpy>:
 80216f8:	440a      	add	r2, r1
 80216fa:	4291      	cmp	r1, r2
 80216fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021700:	d100      	bne.n	8021704 <memcpy+0xc>
 8021702:	4770      	bx	lr
 8021704:	b510      	push	{r4, lr}
 8021706:	f811 4b01 	ldrb.w	r4, [r1], #1
 802170a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802170e:	4291      	cmp	r1, r2
 8021710:	d1f9      	bne.n	8021706 <memcpy+0xe>
 8021712:	bd10      	pop	{r4, pc}

08021714 <_free_r>:
 8021714:	b538      	push	{r3, r4, r5, lr}
 8021716:	4605      	mov	r5, r0
 8021718:	2900      	cmp	r1, #0
 802171a:	d041      	beq.n	80217a0 <_free_r+0x8c>
 802171c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021720:	1f0c      	subs	r4, r1, #4
 8021722:	2b00      	cmp	r3, #0
 8021724:	bfb8      	it	lt
 8021726:	18e4      	addlt	r4, r4, r3
 8021728:	f000 f8e0 	bl	80218ec <__malloc_lock>
 802172c:	4a1d      	ldr	r2, [pc, #116]	@ (80217a4 <_free_r+0x90>)
 802172e:	6813      	ldr	r3, [r2, #0]
 8021730:	b933      	cbnz	r3, 8021740 <_free_r+0x2c>
 8021732:	6063      	str	r3, [r4, #4]
 8021734:	6014      	str	r4, [r2, #0]
 8021736:	4628      	mov	r0, r5
 8021738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802173c:	f000 b8dc 	b.w	80218f8 <__malloc_unlock>
 8021740:	42a3      	cmp	r3, r4
 8021742:	d908      	bls.n	8021756 <_free_r+0x42>
 8021744:	6820      	ldr	r0, [r4, #0]
 8021746:	1821      	adds	r1, r4, r0
 8021748:	428b      	cmp	r3, r1
 802174a:	bf01      	itttt	eq
 802174c:	6819      	ldreq	r1, [r3, #0]
 802174e:	685b      	ldreq	r3, [r3, #4]
 8021750:	1809      	addeq	r1, r1, r0
 8021752:	6021      	streq	r1, [r4, #0]
 8021754:	e7ed      	b.n	8021732 <_free_r+0x1e>
 8021756:	461a      	mov	r2, r3
 8021758:	685b      	ldr	r3, [r3, #4]
 802175a:	b10b      	cbz	r3, 8021760 <_free_r+0x4c>
 802175c:	42a3      	cmp	r3, r4
 802175e:	d9fa      	bls.n	8021756 <_free_r+0x42>
 8021760:	6811      	ldr	r1, [r2, #0]
 8021762:	1850      	adds	r0, r2, r1
 8021764:	42a0      	cmp	r0, r4
 8021766:	d10b      	bne.n	8021780 <_free_r+0x6c>
 8021768:	6820      	ldr	r0, [r4, #0]
 802176a:	4401      	add	r1, r0
 802176c:	1850      	adds	r0, r2, r1
 802176e:	4283      	cmp	r3, r0
 8021770:	6011      	str	r1, [r2, #0]
 8021772:	d1e0      	bne.n	8021736 <_free_r+0x22>
 8021774:	6818      	ldr	r0, [r3, #0]
 8021776:	685b      	ldr	r3, [r3, #4]
 8021778:	6053      	str	r3, [r2, #4]
 802177a:	4408      	add	r0, r1
 802177c:	6010      	str	r0, [r2, #0]
 802177e:	e7da      	b.n	8021736 <_free_r+0x22>
 8021780:	d902      	bls.n	8021788 <_free_r+0x74>
 8021782:	230c      	movs	r3, #12
 8021784:	602b      	str	r3, [r5, #0]
 8021786:	e7d6      	b.n	8021736 <_free_r+0x22>
 8021788:	6820      	ldr	r0, [r4, #0]
 802178a:	1821      	adds	r1, r4, r0
 802178c:	428b      	cmp	r3, r1
 802178e:	bf04      	itt	eq
 8021790:	6819      	ldreq	r1, [r3, #0]
 8021792:	685b      	ldreq	r3, [r3, #4]
 8021794:	6063      	str	r3, [r4, #4]
 8021796:	bf04      	itt	eq
 8021798:	1809      	addeq	r1, r1, r0
 802179a:	6021      	streq	r1, [r4, #0]
 802179c:	6054      	str	r4, [r2, #4]
 802179e:	e7ca      	b.n	8021736 <_free_r+0x22>
 80217a0:	bd38      	pop	{r3, r4, r5, pc}
 80217a2:	bf00      	nop
 80217a4:	2000261c 	.word	0x2000261c

080217a8 <sbrk_aligned>:
 80217a8:	b570      	push	{r4, r5, r6, lr}
 80217aa:	4e0f      	ldr	r6, [pc, #60]	@ (80217e8 <sbrk_aligned+0x40>)
 80217ac:	460c      	mov	r4, r1
 80217ae:	6831      	ldr	r1, [r6, #0]
 80217b0:	4605      	mov	r5, r0
 80217b2:	b911      	cbnz	r1, 80217ba <sbrk_aligned+0x12>
 80217b4:	f000 fba6 	bl	8021f04 <_sbrk_r>
 80217b8:	6030      	str	r0, [r6, #0]
 80217ba:	4621      	mov	r1, r4
 80217bc:	4628      	mov	r0, r5
 80217be:	f000 fba1 	bl	8021f04 <_sbrk_r>
 80217c2:	1c43      	adds	r3, r0, #1
 80217c4:	d103      	bne.n	80217ce <sbrk_aligned+0x26>
 80217c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80217ca:	4620      	mov	r0, r4
 80217cc:	bd70      	pop	{r4, r5, r6, pc}
 80217ce:	1cc4      	adds	r4, r0, #3
 80217d0:	f024 0403 	bic.w	r4, r4, #3
 80217d4:	42a0      	cmp	r0, r4
 80217d6:	d0f8      	beq.n	80217ca <sbrk_aligned+0x22>
 80217d8:	1a21      	subs	r1, r4, r0
 80217da:	4628      	mov	r0, r5
 80217dc:	f000 fb92 	bl	8021f04 <_sbrk_r>
 80217e0:	3001      	adds	r0, #1
 80217e2:	d1f2      	bne.n	80217ca <sbrk_aligned+0x22>
 80217e4:	e7ef      	b.n	80217c6 <sbrk_aligned+0x1e>
 80217e6:	bf00      	nop
 80217e8:	20002618 	.word	0x20002618

080217ec <_malloc_r>:
 80217ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80217f0:	1ccd      	adds	r5, r1, #3
 80217f2:	f025 0503 	bic.w	r5, r5, #3
 80217f6:	3508      	adds	r5, #8
 80217f8:	2d0c      	cmp	r5, #12
 80217fa:	bf38      	it	cc
 80217fc:	250c      	movcc	r5, #12
 80217fe:	2d00      	cmp	r5, #0
 8021800:	4606      	mov	r6, r0
 8021802:	db01      	blt.n	8021808 <_malloc_r+0x1c>
 8021804:	42a9      	cmp	r1, r5
 8021806:	d904      	bls.n	8021812 <_malloc_r+0x26>
 8021808:	230c      	movs	r3, #12
 802180a:	6033      	str	r3, [r6, #0]
 802180c:	2000      	movs	r0, #0
 802180e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80218e8 <_malloc_r+0xfc>
 8021816:	f000 f869 	bl	80218ec <__malloc_lock>
 802181a:	f8d8 3000 	ldr.w	r3, [r8]
 802181e:	461c      	mov	r4, r3
 8021820:	bb44      	cbnz	r4, 8021874 <_malloc_r+0x88>
 8021822:	4629      	mov	r1, r5
 8021824:	4630      	mov	r0, r6
 8021826:	f7ff ffbf 	bl	80217a8 <sbrk_aligned>
 802182a:	1c43      	adds	r3, r0, #1
 802182c:	4604      	mov	r4, r0
 802182e:	d158      	bne.n	80218e2 <_malloc_r+0xf6>
 8021830:	f8d8 4000 	ldr.w	r4, [r8]
 8021834:	4627      	mov	r7, r4
 8021836:	2f00      	cmp	r7, #0
 8021838:	d143      	bne.n	80218c2 <_malloc_r+0xd6>
 802183a:	2c00      	cmp	r4, #0
 802183c:	d04b      	beq.n	80218d6 <_malloc_r+0xea>
 802183e:	6823      	ldr	r3, [r4, #0]
 8021840:	4639      	mov	r1, r7
 8021842:	4630      	mov	r0, r6
 8021844:	eb04 0903 	add.w	r9, r4, r3
 8021848:	f000 fb5c 	bl	8021f04 <_sbrk_r>
 802184c:	4581      	cmp	r9, r0
 802184e:	d142      	bne.n	80218d6 <_malloc_r+0xea>
 8021850:	6821      	ldr	r1, [r4, #0]
 8021852:	1a6d      	subs	r5, r5, r1
 8021854:	4629      	mov	r1, r5
 8021856:	4630      	mov	r0, r6
 8021858:	f7ff ffa6 	bl	80217a8 <sbrk_aligned>
 802185c:	3001      	adds	r0, #1
 802185e:	d03a      	beq.n	80218d6 <_malloc_r+0xea>
 8021860:	6823      	ldr	r3, [r4, #0]
 8021862:	442b      	add	r3, r5
 8021864:	6023      	str	r3, [r4, #0]
 8021866:	f8d8 3000 	ldr.w	r3, [r8]
 802186a:	685a      	ldr	r2, [r3, #4]
 802186c:	bb62      	cbnz	r2, 80218c8 <_malloc_r+0xdc>
 802186e:	f8c8 7000 	str.w	r7, [r8]
 8021872:	e00f      	b.n	8021894 <_malloc_r+0xa8>
 8021874:	6822      	ldr	r2, [r4, #0]
 8021876:	1b52      	subs	r2, r2, r5
 8021878:	d420      	bmi.n	80218bc <_malloc_r+0xd0>
 802187a:	2a0b      	cmp	r2, #11
 802187c:	d917      	bls.n	80218ae <_malloc_r+0xc2>
 802187e:	1961      	adds	r1, r4, r5
 8021880:	42a3      	cmp	r3, r4
 8021882:	6025      	str	r5, [r4, #0]
 8021884:	bf18      	it	ne
 8021886:	6059      	strne	r1, [r3, #4]
 8021888:	6863      	ldr	r3, [r4, #4]
 802188a:	bf08      	it	eq
 802188c:	f8c8 1000 	streq.w	r1, [r8]
 8021890:	5162      	str	r2, [r4, r5]
 8021892:	604b      	str	r3, [r1, #4]
 8021894:	4630      	mov	r0, r6
 8021896:	f000 f82f 	bl	80218f8 <__malloc_unlock>
 802189a:	f104 000b 	add.w	r0, r4, #11
 802189e:	1d23      	adds	r3, r4, #4
 80218a0:	f020 0007 	bic.w	r0, r0, #7
 80218a4:	1ac2      	subs	r2, r0, r3
 80218a6:	bf1c      	itt	ne
 80218a8:	1a1b      	subne	r3, r3, r0
 80218aa:	50a3      	strne	r3, [r4, r2]
 80218ac:	e7af      	b.n	802180e <_malloc_r+0x22>
 80218ae:	6862      	ldr	r2, [r4, #4]
 80218b0:	42a3      	cmp	r3, r4
 80218b2:	bf0c      	ite	eq
 80218b4:	f8c8 2000 	streq.w	r2, [r8]
 80218b8:	605a      	strne	r2, [r3, #4]
 80218ba:	e7eb      	b.n	8021894 <_malloc_r+0xa8>
 80218bc:	4623      	mov	r3, r4
 80218be:	6864      	ldr	r4, [r4, #4]
 80218c0:	e7ae      	b.n	8021820 <_malloc_r+0x34>
 80218c2:	463c      	mov	r4, r7
 80218c4:	687f      	ldr	r7, [r7, #4]
 80218c6:	e7b6      	b.n	8021836 <_malloc_r+0x4a>
 80218c8:	461a      	mov	r2, r3
 80218ca:	685b      	ldr	r3, [r3, #4]
 80218cc:	42a3      	cmp	r3, r4
 80218ce:	d1fb      	bne.n	80218c8 <_malloc_r+0xdc>
 80218d0:	2300      	movs	r3, #0
 80218d2:	6053      	str	r3, [r2, #4]
 80218d4:	e7de      	b.n	8021894 <_malloc_r+0xa8>
 80218d6:	230c      	movs	r3, #12
 80218d8:	6033      	str	r3, [r6, #0]
 80218da:	4630      	mov	r0, r6
 80218dc:	f000 f80c 	bl	80218f8 <__malloc_unlock>
 80218e0:	e794      	b.n	802180c <_malloc_r+0x20>
 80218e2:	6005      	str	r5, [r0, #0]
 80218e4:	e7d6      	b.n	8021894 <_malloc_r+0xa8>
 80218e6:	bf00      	nop
 80218e8:	2000261c 	.word	0x2000261c

080218ec <__malloc_lock>:
 80218ec:	4801      	ldr	r0, [pc, #4]	@ (80218f4 <__malloc_lock+0x8>)
 80218ee:	f7ff bf01 	b.w	80216f4 <__retarget_lock_acquire_recursive>
 80218f2:	bf00      	nop
 80218f4:	20002614 	.word	0x20002614

080218f8 <__malloc_unlock>:
 80218f8:	4801      	ldr	r0, [pc, #4]	@ (8021900 <__malloc_unlock+0x8>)
 80218fa:	f7ff befc 	b.w	80216f6 <__retarget_lock_release_recursive>
 80218fe:	bf00      	nop
 8021900:	20002614 	.word	0x20002614

08021904 <__ssputs_r>:
 8021904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021908:	688e      	ldr	r6, [r1, #8]
 802190a:	461f      	mov	r7, r3
 802190c:	42be      	cmp	r6, r7
 802190e:	680b      	ldr	r3, [r1, #0]
 8021910:	4682      	mov	sl, r0
 8021912:	460c      	mov	r4, r1
 8021914:	4690      	mov	r8, r2
 8021916:	d82d      	bhi.n	8021974 <__ssputs_r+0x70>
 8021918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802191c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021920:	d026      	beq.n	8021970 <__ssputs_r+0x6c>
 8021922:	6965      	ldr	r5, [r4, #20]
 8021924:	6909      	ldr	r1, [r1, #16]
 8021926:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802192a:	eba3 0901 	sub.w	r9, r3, r1
 802192e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021932:	1c7b      	adds	r3, r7, #1
 8021934:	444b      	add	r3, r9
 8021936:	106d      	asrs	r5, r5, #1
 8021938:	429d      	cmp	r5, r3
 802193a:	bf38      	it	cc
 802193c:	461d      	movcc	r5, r3
 802193e:	0553      	lsls	r3, r2, #21
 8021940:	d527      	bpl.n	8021992 <__ssputs_r+0x8e>
 8021942:	4629      	mov	r1, r5
 8021944:	f7ff ff52 	bl	80217ec <_malloc_r>
 8021948:	4606      	mov	r6, r0
 802194a:	b360      	cbz	r0, 80219a6 <__ssputs_r+0xa2>
 802194c:	6921      	ldr	r1, [r4, #16]
 802194e:	464a      	mov	r2, r9
 8021950:	f7ff fed2 	bl	80216f8 <memcpy>
 8021954:	89a3      	ldrh	r3, [r4, #12]
 8021956:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802195a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802195e:	81a3      	strh	r3, [r4, #12]
 8021960:	6126      	str	r6, [r4, #16]
 8021962:	6165      	str	r5, [r4, #20]
 8021964:	444e      	add	r6, r9
 8021966:	eba5 0509 	sub.w	r5, r5, r9
 802196a:	6026      	str	r6, [r4, #0]
 802196c:	60a5      	str	r5, [r4, #8]
 802196e:	463e      	mov	r6, r7
 8021970:	42be      	cmp	r6, r7
 8021972:	d900      	bls.n	8021976 <__ssputs_r+0x72>
 8021974:	463e      	mov	r6, r7
 8021976:	6820      	ldr	r0, [r4, #0]
 8021978:	4632      	mov	r2, r6
 802197a:	4641      	mov	r1, r8
 802197c:	f000 faa8 	bl	8021ed0 <memmove>
 8021980:	68a3      	ldr	r3, [r4, #8]
 8021982:	1b9b      	subs	r3, r3, r6
 8021984:	60a3      	str	r3, [r4, #8]
 8021986:	6823      	ldr	r3, [r4, #0]
 8021988:	4433      	add	r3, r6
 802198a:	6023      	str	r3, [r4, #0]
 802198c:	2000      	movs	r0, #0
 802198e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021992:	462a      	mov	r2, r5
 8021994:	f000 fac6 	bl	8021f24 <_realloc_r>
 8021998:	4606      	mov	r6, r0
 802199a:	2800      	cmp	r0, #0
 802199c:	d1e0      	bne.n	8021960 <__ssputs_r+0x5c>
 802199e:	6921      	ldr	r1, [r4, #16]
 80219a0:	4650      	mov	r0, sl
 80219a2:	f7ff feb7 	bl	8021714 <_free_r>
 80219a6:	230c      	movs	r3, #12
 80219a8:	f8ca 3000 	str.w	r3, [sl]
 80219ac:	89a3      	ldrh	r3, [r4, #12]
 80219ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80219b2:	81a3      	strh	r3, [r4, #12]
 80219b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80219b8:	e7e9      	b.n	802198e <__ssputs_r+0x8a>
	...

080219bc <_svfiprintf_r>:
 80219bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219c0:	4698      	mov	r8, r3
 80219c2:	898b      	ldrh	r3, [r1, #12]
 80219c4:	061b      	lsls	r3, r3, #24
 80219c6:	b09d      	sub	sp, #116	@ 0x74
 80219c8:	4607      	mov	r7, r0
 80219ca:	460d      	mov	r5, r1
 80219cc:	4614      	mov	r4, r2
 80219ce:	d510      	bpl.n	80219f2 <_svfiprintf_r+0x36>
 80219d0:	690b      	ldr	r3, [r1, #16]
 80219d2:	b973      	cbnz	r3, 80219f2 <_svfiprintf_r+0x36>
 80219d4:	2140      	movs	r1, #64	@ 0x40
 80219d6:	f7ff ff09 	bl	80217ec <_malloc_r>
 80219da:	6028      	str	r0, [r5, #0]
 80219dc:	6128      	str	r0, [r5, #16]
 80219de:	b930      	cbnz	r0, 80219ee <_svfiprintf_r+0x32>
 80219e0:	230c      	movs	r3, #12
 80219e2:	603b      	str	r3, [r7, #0]
 80219e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80219e8:	b01d      	add	sp, #116	@ 0x74
 80219ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219ee:	2340      	movs	r3, #64	@ 0x40
 80219f0:	616b      	str	r3, [r5, #20]
 80219f2:	2300      	movs	r3, #0
 80219f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80219f6:	2320      	movs	r3, #32
 80219f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80219fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a00:	2330      	movs	r3, #48	@ 0x30
 8021a02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021ba0 <_svfiprintf_r+0x1e4>
 8021a06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021a0a:	f04f 0901 	mov.w	r9, #1
 8021a0e:	4623      	mov	r3, r4
 8021a10:	469a      	mov	sl, r3
 8021a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a16:	b10a      	cbz	r2, 8021a1c <_svfiprintf_r+0x60>
 8021a18:	2a25      	cmp	r2, #37	@ 0x25
 8021a1a:	d1f9      	bne.n	8021a10 <_svfiprintf_r+0x54>
 8021a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8021a20:	d00b      	beq.n	8021a3a <_svfiprintf_r+0x7e>
 8021a22:	465b      	mov	r3, fp
 8021a24:	4622      	mov	r2, r4
 8021a26:	4629      	mov	r1, r5
 8021a28:	4638      	mov	r0, r7
 8021a2a:	f7ff ff6b 	bl	8021904 <__ssputs_r>
 8021a2e:	3001      	adds	r0, #1
 8021a30:	f000 80a7 	beq.w	8021b82 <_svfiprintf_r+0x1c6>
 8021a34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a36:	445a      	add	r2, fp
 8021a38:	9209      	str	r2, [sp, #36]	@ 0x24
 8021a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	f000 809f 	beq.w	8021b82 <_svfiprintf_r+0x1c6>
 8021a44:	2300      	movs	r3, #0
 8021a46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021a4e:	f10a 0a01 	add.w	sl, sl, #1
 8021a52:	9304      	str	r3, [sp, #16]
 8021a54:	9307      	str	r3, [sp, #28]
 8021a56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021a5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8021a5c:	4654      	mov	r4, sl
 8021a5e:	2205      	movs	r2, #5
 8021a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a64:	484e      	ldr	r0, [pc, #312]	@ (8021ba0 <_svfiprintf_r+0x1e4>)
 8021a66:	f7de fbbb 	bl	80001e0 <memchr>
 8021a6a:	9a04      	ldr	r2, [sp, #16]
 8021a6c:	b9d8      	cbnz	r0, 8021aa6 <_svfiprintf_r+0xea>
 8021a6e:	06d0      	lsls	r0, r2, #27
 8021a70:	bf44      	itt	mi
 8021a72:	2320      	movmi	r3, #32
 8021a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021a78:	0711      	lsls	r1, r2, #28
 8021a7a:	bf44      	itt	mi
 8021a7c:	232b      	movmi	r3, #43	@ 0x2b
 8021a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021a82:	f89a 3000 	ldrb.w	r3, [sl]
 8021a86:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a88:	d015      	beq.n	8021ab6 <_svfiprintf_r+0xfa>
 8021a8a:	9a07      	ldr	r2, [sp, #28]
 8021a8c:	4654      	mov	r4, sl
 8021a8e:	2000      	movs	r0, #0
 8021a90:	f04f 0c0a 	mov.w	ip, #10
 8021a94:	4621      	mov	r1, r4
 8021a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a9a:	3b30      	subs	r3, #48	@ 0x30
 8021a9c:	2b09      	cmp	r3, #9
 8021a9e:	d94b      	bls.n	8021b38 <_svfiprintf_r+0x17c>
 8021aa0:	b1b0      	cbz	r0, 8021ad0 <_svfiprintf_r+0x114>
 8021aa2:	9207      	str	r2, [sp, #28]
 8021aa4:	e014      	b.n	8021ad0 <_svfiprintf_r+0x114>
 8021aa6:	eba0 0308 	sub.w	r3, r0, r8
 8021aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8021aae:	4313      	orrs	r3, r2
 8021ab0:	9304      	str	r3, [sp, #16]
 8021ab2:	46a2      	mov	sl, r4
 8021ab4:	e7d2      	b.n	8021a5c <_svfiprintf_r+0xa0>
 8021ab6:	9b03      	ldr	r3, [sp, #12]
 8021ab8:	1d19      	adds	r1, r3, #4
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	9103      	str	r1, [sp, #12]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	bfbb      	ittet	lt
 8021ac2:	425b      	neglt	r3, r3
 8021ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8021ac8:	9307      	strge	r3, [sp, #28]
 8021aca:	9307      	strlt	r3, [sp, #28]
 8021acc:	bfb8      	it	lt
 8021ace:	9204      	strlt	r2, [sp, #16]
 8021ad0:	7823      	ldrb	r3, [r4, #0]
 8021ad2:	2b2e      	cmp	r3, #46	@ 0x2e
 8021ad4:	d10a      	bne.n	8021aec <_svfiprintf_r+0x130>
 8021ad6:	7863      	ldrb	r3, [r4, #1]
 8021ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ada:	d132      	bne.n	8021b42 <_svfiprintf_r+0x186>
 8021adc:	9b03      	ldr	r3, [sp, #12]
 8021ade:	1d1a      	adds	r2, r3, #4
 8021ae0:	681b      	ldr	r3, [r3, #0]
 8021ae2:	9203      	str	r2, [sp, #12]
 8021ae4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021ae8:	3402      	adds	r4, #2
 8021aea:	9305      	str	r3, [sp, #20]
 8021aec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021bb0 <_svfiprintf_r+0x1f4>
 8021af0:	7821      	ldrb	r1, [r4, #0]
 8021af2:	2203      	movs	r2, #3
 8021af4:	4650      	mov	r0, sl
 8021af6:	f7de fb73 	bl	80001e0 <memchr>
 8021afa:	b138      	cbz	r0, 8021b0c <_svfiprintf_r+0x150>
 8021afc:	9b04      	ldr	r3, [sp, #16]
 8021afe:	eba0 000a 	sub.w	r0, r0, sl
 8021b02:	2240      	movs	r2, #64	@ 0x40
 8021b04:	4082      	lsls	r2, r0
 8021b06:	4313      	orrs	r3, r2
 8021b08:	3401      	adds	r4, #1
 8021b0a:	9304      	str	r3, [sp, #16]
 8021b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b10:	4824      	ldr	r0, [pc, #144]	@ (8021ba4 <_svfiprintf_r+0x1e8>)
 8021b12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021b16:	2206      	movs	r2, #6
 8021b18:	f7de fb62 	bl	80001e0 <memchr>
 8021b1c:	2800      	cmp	r0, #0
 8021b1e:	d036      	beq.n	8021b8e <_svfiprintf_r+0x1d2>
 8021b20:	4b21      	ldr	r3, [pc, #132]	@ (8021ba8 <_svfiprintf_r+0x1ec>)
 8021b22:	bb1b      	cbnz	r3, 8021b6c <_svfiprintf_r+0x1b0>
 8021b24:	9b03      	ldr	r3, [sp, #12]
 8021b26:	3307      	adds	r3, #7
 8021b28:	f023 0307 	bic.w	r3, r3, #7
 8021b2c:	3308      	adds	r3, #8
 8021b2e:	9303      	str	r3, [sp, #12]
 8021b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b32:	4433      	add	r3, r6
 8021b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b36:	e76a      	b.n	8021a0e <_svfiprintf_r+0x52>
 8021b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8021b3c:	460c      	mov	r4, r1
 8021b3e:	2001      	movs	r0, #1
 8021b40:	e7a8      	b.n	8021a94 <_svfiprintf_r+0xd8>
 8021b42:	2300      	movs	r3, #0
 8021b44:	3401      	adds	r4, #1
 8021b46:	9305      	str	r3, [sp, #20]
 8021b48:	4619      	mov	r1, r3
 8021b4a:	f04f 0c0a 	mov.w	ip, #10
 8021b4e:	4620      	mov	r0, r4
 8021b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b54:	3a30      	subs	r2, #48	@ 0x30
 8021b56:	2a09      	cmp	r2, #9
 8021b58:	d903      	bls.n	8021b62 <_svfiprintf_r+0x1a6>
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d0c6      	beq.n	8021aec <_svfiprintf_r+0x130>
 8021b5e:	9105      	str	r1, [sp, #20]
 8021b60:	e7c4      	b.n	8021aec <_svfiprintf_r+0x130>
 8021b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8021b66:	4604      	mov	r4, r0
 8021b68:	2301      	movs	r3, #1
 8021b6a:	e7f0      	b.n	8021b4e <_svfiprintf_r+0x192>
 8021b6c:	ab03      	add	r3, sp, #12
 8021b6e:	9300      	str	r3, [sp, #0]
 8021b70:	462a      	mov	r2, r5
 8021b72:	4b0e      	ldr	r3, [pc, #56]	@ (8021bac <_svfiprintf_r+0x1f0>)
 8021b74:	a904      	add	r1, sp, #16
 8021b76:	4638      	mov	r0, r7
 8021b78:	f3af 8000 	nop.w
 8021b7c:	1c42      	adds	r2, r0, #1
 8021b7e:	4606      	mov	r6, r0
 8021b80:	d1d6      	bne.n	8021b30 <_svfiprintf_r+0x174>
 8021b82:	89ab      	ldrh	r3, [r5, #12]
 8021b84:	065b      	lsls	r3, r3, #25
 8021b86:	f53f af2d 	bmi.w	80219e4 <_svfiprintf_r+0x28>
 8021b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021b8c:	e72c      	b.n	80219e8 <_svfiprintf_r+0x2c>
 8021b8e:	ab03      	add	r3, sp, #12
 8021b90:	9300      	str	r3, [sp, #0]
 8021b92:	462a      	mov	r2, r5
 8021b94:	4b05      	ldr	r3, [pc, #20]	@ (8021bac <_svfiprintf_r+0x1f0>)
 8021b96:	a904      	add	r1, sp, #16
 8021b98:	4638      	mov	r0, r7
 8021b9a:	f000 f879 	bl	8021c90 <_printf_i>
 8021b9e:	e7ed      	b.n	8021b7c <_svfiprintf_r+0x1c0>
 8021ba0:	08026898 	.word	0x08026898
 8021ba4:	080268a2 	.word	0x080268a2
 8021ba8:	00000000 	.word	0x00000000
 8021bac:	08021905 	.word	0x08021905
 8021bb0:	0802689e 	.word	0x0802689e

08021bb4 <_printf_common>:
 8021bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021bb8:	4616      	mov	r6, r2
 8021bba:	4698      	mov	r8, r3
 8021bbc:	688a      	ldr	r2, [r1, #8]
 8021bbe:	690b      	ldr	r3, [r1, #16]
 8021bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021bc4:	4293      	cmp	r3, r2
 8021bc6:	bfb8      	it	lt
 8021bc8:	4613      	movlt	r3, r2
 8021bca:	6033      	str	r3, [r6, #0]
 8021bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021bd0:	4607      	mov	r7, r0
 8021bd2:	460c      	mov	r4, r1
 8021bd4:	b10a      	cbz	r2, 8021bda <_printf_common+0x26>
 8021bd6:	3301      	adds	r3, #1
 8021bd8:	6033      	str	r3, [r6, #0]
 8021bda:	6823      	ldr	r3, [r4, #0]
 8021bdc:	0699      	lsls	r1, r3, #26
 8021bde:	bf42      	ittt	mi
 8021be0:	6833      	ldrmi	r3, [r6, #0]
 8021be2:	3302      	addmi	r3, #2
 8021be4:	6033      	strmi	r3, [r6, #0]
 8021be6:	6825      	ldr	r5, [r4, #0]
 8021be8:	f015 0506 	ands.w	r5, r5, #6
 8021bec:	d106      	bne.n	8021bfc <_printf_common+0x48>
 8021bee:	f104 0a19 	add.w	sl, r4, #25
 8021bf2:	68e3      	ldr	r3, [r4, #12]
 8021bf4:	6832      	ldr	r2, [r6, #0]
 8021bf6:	1a9b      	subs	r3, r3, r2
 8021bf8:	42ab      	cmp	r3, r5
 8021bfa:	dc26      	bgt.n	8021c4a <_printf_common+0x96>
 8021bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021c00:	6822      	ldr	r2, [r4, #0]
 8021c02:	3b00      	subs	r3, #0
 8021c04:	bf18      	it	ne
 8021c06:	2301      	movne	r3, #1
 8021c08:	0692      	lsls	r2, r2, #26
 8021c0a:	d42b      	bmi.n	8021c64 <_printf_common+0xb0>
 8021c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021c10:	4641      	mov	r1, r8
 8021c12:	4638      	mov	r0, r7
 8021c14:	47c8      	blx	r9
 8021c16:	3001      	adds	r0, #1
 8021c18:	d01e      	beq.n	8021c58 <_printf_common+0xa4>
 8021c1a:	6823      	ldr	r3, [r4, #0]
 8021c1c:	6922      	ldr	r2, [r4, #16]
 8021c1e:	f003 0306 	and.w	r3, r3, #6
 8021c22:	2b04      	cmp	r3, #4
 8021c24:	bf02      	ittt	eq
 8021c26:	68e5      	ldreq	r5, [r4, #12]
 8021c28:	6833      	ldreq	r3, [r6, #0]
 8021c2a:	1aed      	subeq	r5, r5, r3
 8021c2c:	68a3      	ldr	r3, [r4, #8]
 8021c2e:	bf0c      	ite	eq
 8021c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021c34:	2500      	movne	r5, #0
 8021c36:	4293      	cmp	r3, r2
 8021c38:	bfc4      	itt	gt
 8021c3a:	1a9b      	subgt	r3, r3, r2
 8021c3c:	18ed      	addgt	r5, r5, r3
 8021c3e:	2600      	movs	r6, #0
 8021c40:	341a      	adds	r4, #26
 8021c42:	42b5      	cmp	r5, r6
 8021c44:	d11a      	bne.n	8021c7c <_printf_common+0xc8>
 8021c46:	2000      	movs	r0, #0
 8021c48:	e008      	b.n	8021c5c <_printf_common+0xa8>
 8021c4a:	2301      	movs	r3, #1
 8021c4c:	4652      	mov	r2, sl
 8021c4e:	4641      	mov	r1, r8
 8021c50:	4638      	mov	r0, r7
 8021c52:	47c8      	blx	r9
 8021c54:	3001      	adds	r0, #1
 8021c56:	d103      	bne.n	8021c60 <_printf_common+0xac>
 8021c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c60:	3501      	adds	r5, #1
 8021c62:	e7c6      	b.n	8021bf2 <_printf_common+0x3e>
 8021c64:	18e1      	adds	r1, r4, r3
 8021c66:	1c5a      	adds	r2, r3, #1
 8021c68:	2030      	movs	r0, #48	@ 0x30
 8021c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021c6e:	4422      	add	r2, r4
 8021c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021c78:	3302      	adds	r3, #2
 8021c7a:	e7c7      	b.n	8021c0c <_printf_common+0x58>
 8021c7c:	2301      	movs	r3, #1
 8021c7e:	4622      	mov	r2, r4
 8021c80:	4641      	mov	r1, r8
 8021c82:	4638      	mov	r0, r7
 8021c84:	47c8      	blx	r9
 8021c86:	3001      	adds	r0, #1
 8021c88:	d0e6      	beq.n	8021c58 <_printf_common+0xa4>
 8021c8a:	3601      	adds	r6, #1
 8021c8c:	e7d9      	b.n	8021c42 <_printf_common+0x8e>
	...

08021c90 <_printf_i>:
 8021c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021c94:	7e0f      	ldrb	r7, [r1, #24]
 8021c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021c98:	2f78      	cmp	r7, #120	@ 0x78
 8021c9a:	4691      	mov	r9, r2
 8021c9c:	4680      	mov	r8, r0
 8021c9e:	460c      	mov	r4, r1
 8021ca0:	469a      	mov	sl, r3
 8021ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021ca6:	d807      	bhi.n	8021cb8 <_printf_i+0x28>
 8021ca8:	2f62      	cmp	r7, #98	@ 0x62
 8021caa:	d80a      	bhi.n	8021cc2 <_printf_i+0x32>
 8021cac:	2f00      	cmp	r7, #0
 8021cae:	f000 80d2 	beq.w	8021e56 <_printf_i+0x1c6>
 8021cb2:	2f58      	cmp	r7, #88	@ 0x58
 8021cb4:	f000 80b9 	beq.w	8021e2a <_printf_i+0x19a>
 8021cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021cc0:	e03a      	b.n	8021d38 <_printf_i+0xa8>
 8021cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021cc6:	2b15      	cmp	r3, #21
 8021cc8:	d8f6      	bhi.n	8021cb8 <_printf_i+0x28>
 8021cca:	a101      	add	r1, pc, #4	@ (adr r1, 8021cd0 <_printf_i+0x40>)
 8021ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021cd0:	08021d29 	.word	0x08021d29
 8021cd4:	08021d3d 	.word	0x08021d3d
 8021cd8:	08021cb9 	.word	0x08021cb9
 8021cdc:	08021cb9 	.word	0x08021cb9
 8021ce0:	08021cb9 	.word	0x08021cb9
 8021ce4:	08021cb9 	.word	0x08021cb9
 8021ce8:	08021d3d 	.word	0x08021d3d
 8021cec:	08021cb9 	.word	0x08021cb9
 8021cf0:	08021cb9 	.word	0x08021cb9
 8021cf4:	08021cb9 	.word	0x08021cb9
 8021cf8:	08021cb9 	.word	0x08021cb9
 8021cfc:	08021e3d 	.word	0x08021e3d
 8021d00:	08021d67 	.word	0x08021d67
 8021d04:	08021df7 	.word	0x08021df7
 8021d08:	08021cb9 	.word	0x08021cb9
 8021d0c:	08021cb9 	.word	0x08021cb9
 8021d10:	08021e5f 	.word	0x08021e5f
 8021d14:	08021cb9 	.word	0x08021cb9
 8021d18:	08021d67 	.word	0x08021d67
 8021d1c:	08021cb9 	.word	0x08021cb9
 8021d20:	08021cb9 	.word	0x08021cb9
 8021d24:	08021dff 	.word	0x08021dff
 8021d28:	6833      	ldr	r3, [r6, #0]
 8021d2a:	1d1a      	adds	r2, r3, #4
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	6032      	str	r2, [r6, #0]
 8021d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021d38:	2301      	movs	r3, #1
 8021d3a:	e09d      	b.n	8021e78 <_printf_i+0x1e8>
 8021d3c:	6833      	ldr	r3, [r6, #0]
 8021d3e:	6820      	ldr	r0, [r4, #0]
 8021d40:	1d19      	adds	r1, r3, #4
 8021d42:	6031      	str	r1, [r6, #0]
 8021d44:	0606      	lsls	r6, r0, #24
 8021d46:	d501      	bpl.n	8021d4c <_printf_i+0xbc>
 8021d48:	681d      	ldr	r5, [r3, #0]
 8021d4a:	e003      	b.n	8021d54 <_printf_i+0xc4>
 8021d4c:	0645      	lsls	r5, r0, #25
 8021d4e:	d5fb      	bpl.n	8021d48 <_printf_i+0xb8>
 8021d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021d54:	2d00      	cmp	r5, #0
 8021d56:	da03      	bge.n	8021d60 <_printf_i+0xd0>
 8021d58:	232d      	movs	r3, #45	@ 0x2d
 8021d5a:	426d      	negs	r5, r5
 8021d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021d60:	4859      	ldr	r0, [pc, #356]	@ (8021ec8 <_printf_i+0x238>)
 8021d62:	230a      	movs	r3, #10
 8021d64:	e011      	b.n	8021d8a <_printf_i+0xfa>
 8021d66:	6821      	ldr	r1, [r4, #0]
 8021d68:	6833      	ldr	r3, [r6, #0]
 8021d6a:	0608      	lsls	r0, r1, #24
 8021d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8021d70:	d402      	bmi.n	8021d78 <_printf_i+0xe8>
 8021d72:	0649      	lsls	r1, r1, #25
 8021d74:	bf48      	it	mi
 8021d76:	b2ad      	uxthmi	r5, r5
 8021d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8021d7a:	4853      	ldr	r0, [pc, #332]	@ (8021ec8 <_printf_i+0x238>)
 8021d7c:	6033      	str	r3, [r6, #0]
 8021d7e:	bf14      	ite	ne
 8021d80:	230a      	movne	r3, #10
 8021d82:	2308      	moveq	r3, #8
 8021d84:	2100      	movs	r1, #0
 8021d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021d8a:	6866      	ldr	r6, [r4, #4]
 8021d8c:	60a6      	str	r6, [r4, #8]
 8021d8e:	2e00      	cmp	r6, #0
 8021d90:	bfa2      	ittt	ge
 8021d92:	6821      	ldrge	r1, [r4, #0]
 8021d94:	f021 0104 	bicge.w	r1, r1, #4
 8021d98:	6021      	strge	r1, [r4, #0]
 8021d9a:	b90d      	cbnz	r5, 8021da0 <_printf_i+0x110>
 8021d9c:	2e00      	cmp	r6, #0
 8021d9e:	d04b      	beq.n	8021e38 <_printf_i+0x1a8>
 8021da0:	4616      	mov	r6, r2
 8021da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8021da6:	fb03 5711 	mls	r7, r3, r1, r5
 8021daa:	5dc7      	ldrb	r7, [r0, r7]
 8021dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021db0:	462f      	mov	r7, r5
 8021db2:	42bb      	cmp	r3, r7
 8021db4:	460d      	mov	r5, r1
 8021db6:	d9f4      	bls.n	8021da2 <_printf_i+0x112>
 8021db8:	2b08      	cmp	r3, #8
 8021dba:	d10b      	bne.n	8021dd4 <_printf_i+0x144>
 8021dbc:	6823      	ldr	r3, [r4, #0]
 8021dbe:	07df      	lsls	r7, r3, #31
 8021dc0:	d508      	bpl.n	8021dd4 <_printf_i+0x144>
 8021dc2:	6923      	ldr	r3, [r4, #16]
 8021dc4:	6861      	ldr	r1, [r4, #4]
 8021dc6:	4299      	cmp	r1, r3
 8021dc8:	bfde      	ittt	le
 8021dca:	2330      	movle	r3, #48	@ 0x30
 8021dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021dd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8021dd4:	1b92      	subs	r2, r2, r6
 8021dd6:	6122      	str	r2, [r4, #16]
 8021dd8:	f8cd a000 	str.w	sl, [sp]
 8021ddc:	464b      	mov	r3, r9
 8021dde:	aa03      	add	r2, sp, #12
 8021de0:	4621      	mov	r1, r4
 8021de2:	4640      	mov	r0, r8
 8021de4:	f7ff fee6 	bl	8021bb4 <_printf_common>
 8021de8:	3001      	adds	r0, #1
 8021dea:	d14a      	bne.n	8021e82 <_printf_i+0x1f2>
 8021dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021df0:	b004      	add	sp, #16
 8021df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021df6:	6823      	ldr	r3, [r4, #0]
 8021df8:	f043 0320 	orr.w	r3, r3, #32
 8021dfc:	6023      	str	r3, [r4, #0]
 8021dfe:	4833      	ldr	r0, [pc, #204]	@ (8021ecc <_printf_i+0x23c>)
 8021e00:	2778      	movs	r7, #120	@ 0x78
 8021e02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021e06:	6823      	ldr	r3, [r4, #0]
 8021e08:	6831      	ldr	r1, [r6, #0]
 8021e0a:	061f      	lsls	r7, r3, #24
 8021e0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8021e10:	d402      	bmi.n	8021e18 <_printf_i+0x188>
 8021e12:	065f      	lsls	r7, r3, #25
 8021e14:	bf48      	it	mi
 8021e16:	b2ad      	uxthmi	r5, r5
 8021e18:	6031      	str	r1, [r6, #0]
 8021e1a:	07d9      	lsls	r1, r3, #31
 8021e1c:	bf44      	itt	mi
 8021e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8021e22:	6023      	strmi	r3, [r4, #0]
 8021e24:	b11d      	cbz	r5, 8021e2e <_printf_i+0x19e>
 8021e26:	2310      	movs	r3, #16
 8021e28:	e7ac      	b.n	8021d84 <_printf_i+0xf4>
 8021e2a:	4827      	ldr	r0, [pc, #156]	@ (8021ec8 <_printf_i+0x238>)
 8021e2c:	e7e9      	b.n	8021e02 <_printf_i+0x172>
 8021e2e:	6823      	ldr	r3, [r4, #0]
 8021e30:	f023 0320 	bic.w	r3, r3, #32
 8021e34:	6023      	str	r3, [r4, #0]
 8021e36:	e7f6      	b.n	8021e26 <_printf_i+0x196>
 8021e38:	4616      	mov	r6, r2
 8021e3a:	e7bd      	b.n	8021db8 <_printf_i+0x128>
 8021e3c:	6833      	ldr	r3, [r6, #0]
 8021e3e:	6825      	ldr	r5, [r4, #0]
 8021e40:	6961      	ldr	r1, [r4, #20]
 8021e42:	1d18      	adds	r0, r3, #4
 8021e44:	6030      	str	r0, [r6, #0]
 8021e46:	062e      	lsls	r6, r5, #24
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	d501      	bpl.n	8021e50 <_printf_i+0x1c0>
 8021e4c:	6019      	str	r1, [r3, #0]
 8021e4e:	e002      	b.n	8021e56 <_printf_i+0x1c6>
 8021e50:	0668      	lsls	r0, r5, #25
 8021e52:	d5fb      	bpl.n	8021e4c <_printf_i+0x1bc>
 8021e54:	8019      	strh	r1, [r3, #0]
 8021e56:	2300      	movs	r3, #0
 8021e58:	6123      	str	r3, [r4, #16]
 8021e5a:	4616      	mov	r6, r2
 8021e5c:	e7bc      	b.n	8021dd8 <_printf_i+0x148>
 8021e5e:	6833      	ldr	r3, [r6, #0]
 8021e60:	1d1a      	adds	r2, r3, #4
 8021e62:	6032      	str	r2, [r6, #0]
 8021e64:	681e      	ldr	r6, [r3, #0]
 8021e66:	6862      	ldr	r2, [r4, #4]
 8021e68:	2100      	movs	r1, #0
 8021e6a:	4630      	mov	r0, r6
 8021e6c:	f7de f9b8 	bl	80001e0 <memchr>
 8021e70:	b108      	cbz	r0, 8021e76 <_printf_i+0x1e6>
 8021e72:	1b80      	subs	r0, r0, r6
 8021e74:	6060      	str	r0, [r4, #4]
 8021e76:	6863      	ldr	r3, [r4, #4]
 8021e78:	6123      	str	r3, [r4, #16]
 8021e7a:	2300      	movs	r3, #0
 8021e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021e80:	e7aa      	b.n	8021dd8 <_printf_i+0x148>
 8021e82:	6923      	ldr	r3, [r4, #16]
 8021e84:	4632      	mov	r2, r6
 8021e86:	4649      	mov	r1, r9
 8021e88:	4640      	mov	r0, r8
 8021e8a:	47d0      	blx	sl
 8021e8c:	3001      	adds	r0, #1
 8021e8e:	d0ad      	beq.n	8021dec <_printf_i+0x15c>
 8021e90:	6823      	ldr	r3, [r4, #0]
 8021e92:	079b      	lsls	r3, r3, #30
 8021e94:	d413      	bmi.n	8021ebe <_printf_i+0x22e>
 8021e96:	68e0      	ldr	r0, [r4, #12]
 8021e98:	9b03      	ldr	r3, [sp, #12]
 8021e9a:	4298      	cmp	r0, r3
 8021e9c:	bfb8      	it	lt
 8021e9e:	4618      	movlt	r0, r3
 8021ea0:	e7a6      	b.n	8021df0 <_printf_i+0x160>
 8021ea2:	2301      	movs	r3, #1
 8021ea4:	4632      	mov	r2, r6
 8021ea6:	4649      	mov	r1, r9
 8021ea8:	4640      	mov	r0, r8
 8021eaa:	47d0      	blx	sl
 8021eac:	3001      	adds	r0, #1
 8021eae:	d09d      	beq.n	8021dec <_printf_i+0x15c>
 8021eb0:	3501      	adds	r5, #1
 8021eb2:	68e3      	ldr	r3, [r4, #12]
 8021eb4:	9903      	ldr	r1, [sp, #12]
 8021eb6:	1a5b      	subs	r3, r3, r1
 8021eb8:	42ab      	cmp	r3, r5
 8021eba:	dcf2      	bgt.n	8021ea2 <_printf_i+0x212>
 8021ebc:	e7eb      	b.n	8021e96 <_printf_i+0x206>
 8021ebe:	2500      	movs	r5, #0
 8021ec0:	f104 0619 	add.w	r6, r4, #25
 8021ec4:	e7f5      	b.n	8021eb2 <_printf_i+0x222>
 8021ec6:	bf00      	nop
 8021ec8:	080268a9 	.word	0x080268a9
 8021ecc:	080268ba 	.word	0x080268ba

08021ed0 <memmove>:
 8021ed0:	4288      	cmp	r0, r1
 8021ed2:	b510      	push	{r4, lr}
 8021ed4:	eb01 0402 	add.w	r4, r1, r2
 8021ed8:	d902      	bls.n	8021ee0 <memmove+0x10>
 8021eda:	4284      	cmp	r4, r0
 8021edc:	4623      	mov	r3, r4
 8021ede:	d807      	bhi.n	8021ef0 <memmove+0x20>
 8021ee0:	1e43      	subs	r3, r0, #1
 8021ee2:	42a1      	cmp	r1, r4
 8021ee4:	d008      	beq.n	8021ef8 <memmove+0x28>
 8021ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021eea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021eee:	e7f8      	b.n	8021ee2 <memmove+0x12>
 8021ef0:	4402      	add	r2, r0
 8021ef2:	4601      	mov	r1, r0
 8021ef4:	428a      	cmp	r2, r1
 8021ef6:	d100      	bne.n	8021efa <memmove+0x2a>
 8021ef8:	bd10      	pop	{r4, pc}
 8021efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021f02:	e7f7      	b.n	8021ef4 <memmove+0x24>

08021f04 <_sbrk_r>:
 8021f04:	b538      	push	{r3, r4, r5, lr}
 8021f06:	4d06      	ldr	r5, [pc, #24]	@ (8021f20 <_sbrk_r+0x1c>)
 8021f08:	2300      	movs	r3, #0
 8021f0a:	4604      	mov	r4, r0
 8021f0c:	4608      	mov	r0, r1
 8021f0e:	602b      	str	r3, [r5, #0]
 8021f10:	f7e3 fb8e 	bl	8005630 <_sbrk>
 8021f14:	1c43      	adds	r3, r0, #1
 8021f16:	d102      	bne.n	8021f1e <_sbrk_r+0x1a>
 8021f18:	682b      	ldr	r3, [r5, #0]
 8021f1a:	b103      	cbz	r3, 8021f1e <_sbrk_r+0x1a>
 8021f1c:	6023      	str	r3, [r4, #0]
 8021f1e:	bd38      	pop	{r3, r4, r5, pc}
 8021f20:	20002610 	.word	0x20002610

08021f24 <_realloc_r>:
 8021f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f28:	4680      	mov	r8, r0
 8021f2a:	4615      	mov	r5, r2
 8021f2c:	460c      	mov	r4, r1
 8021f2e:	b921      	cbnz	r1, 8021f3a <_realloc_r+0x16>
 8021f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f34:	4611      	mov	r1, r2
 8021f36:	f7ff bc59 	b.w	80217ec <_malloc_r>
 8021f3a:	b92a      	cbnz	r2, 8021f48 <_realloc_r+0x24>
 8021f3c:	f7ff fbea 	bl	8021714 <_free_r>
 8021f40:	2400      	movs	r4, #0
 8021f42:	4620      	mov	r0, r4
 8021f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f48:	f000 f81a 	bl	8021f80 <_malloc_usable_size_r>
 8021f4c:	4285      	cmp	r5, r0
 8021f4e:	4606      	mov	r6, r0
 8021f50:	d802      	bhi.n	8021f58 <_realloc_r+0x34>
 8021f52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021f56:	d8f4      	bhi.n	8021f42 <_realloc_r+0x1e>
 8021f58:	4629      	mov	r1, r5
 8021f5a:	4640      	mov	r0, r8
 8021f5c:	f7ff fc46 	bl	80217ec <_malloc_r>
 8021f60:	4607      	mov	r7, r0
 8021f62:	2800      	cmp	r0, #0
 8021f64:	d0ec      	beq.n	8021f40 <_realloc_r+0x1c>
 8021f66:	42b5      	cmp	r5, r6
 8021f68:	462a      	mov	r2, r5
 8021f6a:	4621      	mov	r1, r4
 8021f6c:	bf28      	it	cs
 8021f6e:	4632      	movcs	r2, r6
 8021f70:	f7ff fbc2 	bl	80216f8 <memcpy>
 8021f74:	4621      	mov	r1, r4
 8021f76:	4640      	mov	r0, r8
 8021f78:	f7ff fbcc 	bl	8021714 <_free_r>
 8021f7c:	463c      	mov	r4, r7
 8021f7e:	e7e0      	b.n	8021f42 <_realloc_r+0x1e>

08021f80 <_malloc_usable_size_r>:
 8021f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f84:	1f18      	subs	r0, r3, #4
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	bfbc      	itt	lt
 8021f8a:	580b      	ldrlt	r3, [r1, r0]
 8021f8c:	18c0      	addlt	r0, r0, r3
 8021f8e:	4770      	bx	lr

08021f90 <acos>:
 8021f90:	b538      	push	{r3, r4, r5, lr}
 8021f92:	ed2d 8b02 	vpush	{d8}
 8021f96:	ec55 4b10 	vmov	r4, r5, d0
 8021f9a:	f001 f895 	bl	80230c8 <__ieee754_acos>
 8021f9e:	4622      	mov	r2, r4
 8021fa0:	462b      	mov	r3, r5
 8021fa2:	4620      	mov	r0, r4
 8021fa4:	4629      	mov	r1, r5
 8021fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8021faa:	eef0 8a60 	vmov.f32	s17, s1
 8021fae:	f7de fdbd 	bl	8000b2c <__aeabi_dcmpun>
 8021fb2:	b9a8      	cbnz	r0, 8021fe0 <acos+0x50>
 8021fb4:	ec45 4b10 	vmov	d0, r4, r5
 8021fb8:	f000 f946 	bl	8022248 <fabs>
 8021fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8021ff0 <acos+0x60>)
 8021fbe:	ec51 0b10 	vmov	r0, r1, d0
 8021fc2:	2200      	movs	r2, #0
 8021fc4:	f7de fda8 	bl	8000b18 <__aeabi_dcmpgt>
 8021fc8:	b150      	cbz	r0, 8021fe0 <acos+0x50>
 8021fca:	f7ff fb69 	bl	80216a0 <__errno>
 8021fce:	ecbd 8b02 	vpop	{d8}
 8021fd2:	2321      	movs	r3, #33	@ 0x21
 8021fd4:	6003      	str	r3, [r0, #0]
 8021fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021fda:	4806      	ldr	r0, [pc, #24]	@ (8021ff4 <acos+0x64>)
 8021fdc:	f000 bae8 	b.w	80225b0 <nan>
 8021fe0:	eeb0 0a48 	vmov.f32	s0, s16
 8021fe4:	eef0 0a68 	vmov.f32	s1, s17
 8021fe8:	ecbd 8b02 	vpop	{d8}
 8021fec:	bd38      	pop	{r3, r4, r5, pc}
 8021fee:	bf00      	nop
 8021ff0:	3ff00000 	.word	0x3ff00000
 8021ff4:	0802689d 	.word	0x0802689d

08021ff8 <asin>:
 8021ff8:	b538      	push	{r3, r4, r5, lr}
 8021ffa:	ed2d 8b02 	vpush	{d8}
 8021ffe:	ec55 4b10 	vmov	r4, r5, d0
 8022002:	f001 fabd 	bl	8023580 <__ieee754_asin>
 8022006:	4622      	mov	r2, r4
 8022008:	462b      	mov	r3, r5
 802200a:	4620      	mov	r0, r4
 802200c:	4629      	mov	r1, r5
 802200e:	eeb0 8a40 	vmov.f32	s16, s0
 8022012:	eef0 8a60 	vmov.f32	s17, s1
 8022016:	f7de fd89 	bl	8000b2c <__aeabi_dcmpun>
 802201a:	b9a8      	cbnz	r0, 8022048 <asin+0x50>
 802201c:	ec45 4b10 	vmov	d0, r4, r5
 8022020:	f000 f912 	bl	8022248 <fabs>
 8022024:	4b0c      	ldr	r3, [pc, #48]	@ (8022058 <asin+0x60>)
 8022026:	ec51 0b10 	vmov	r0, r1, d0
 802202a:	2200      	movs	r2, #0
 802202c:	f7de fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8022030:	b150      	cbz	r0, 8022048 <asin+0x50>
 8022032:	f7ff fb35 	bl	80216a0 <__errno>
 8022036:	ecbd 8b02 	vpop	{d8}
 802203a:	2321      	movs	r3, #33	@ 0x21
 802203c:	6003      	str	r3, [r0, #0]
 802203e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022042:	4806      	ldr	r0, [pc, #24]	@ (802205c <asin+0x64>)
 8022044:	f000 bab4 	b.w	80225b0 <nan>
 8022048:	eeb0 0a48 	vmov.f32	s0, s16
 802204c:	eef0 0a68 	vmov.f32	s1, s17
 8022050:	ecbd 8b02 	vpop	{d8}
 8022054:	bd38      	pop	{r3, r4, r5, pc}
 8022056:	bf00      	nop
 8022058:	3ff00000 	.word	0x3ff00000
 802205c:	0802689d 	.word	0x0802689d

08022060 <atan2>:
 8022060:	f001 bc92 	b.w	8023988 <__ieee754_atan2>

08022064 <pow>:
 8022064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022066:	ed2d 8b02 	vpush	{d8}
 802206a:	eeb0 8a40 	vmov.f32	s16, s0
 802206e:	eef0 8a60 	vmov.f32	s17, s1
 8022072:	ec55 4b11 	vmov	r4, r5, d1
 8022076:	f001 fd4f 	bl	8023b18 <__ieee754_pow>
 802207a:	4622      	mov	r2, r4
 802207c:	462b      	mov	r3, r5
 802207e:	4620      	mov	r0, r4
 8022080:	4629      	mov	r1, r5
 8022082:	ec57 6b10 	vmov	r6, r7, d0
 8022086:	f7de fd51 	bl	8000b2c <__aeabi_dcmpun>
 802208a:	2800      	cmp	r0, #0
 802208c:	d13b      	bne.n	8022106 <pow+0xa2>
 802208e:	ec51 0b18 	vmov	r0, r1, d8
 8022092:	2200      	movs	r2, #0
 8022094:	2300      	movs	r3, #0
 8022096:	f7de fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 802209a:	b1b8      	cbz	r0, 80220cc <pow+0x68>
 802209c:	2200      	movs	r2, #0
 802209e:	2300      	movs	r3, #0
 80220a0:	4620      	mov	r0, r4
 80220a2:	4629      	mov	r1, r5
 80220a4:	f7de fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80220a8:	2800      	cmp	r0, #0
 80220aa:	d146      	bne.n	802213a <pow+0xd6>
 80220ac:	ec45 4b10 	vmov	d0, r4, r5
 80220b0:	f000 fa72 	bl	8022598 <finite>
 80220b4:	b338      	cbz	r0, 8022106 <pow+0xa2>
 80220b6:	2200      	movs	r2, #0
 80220b8:	2300      	movs	r3, #0
 80220ba:	4620      	mov	r0, r4
 80220bc:	4629      	mov	r1, r5
 80220be:	f7de fd0d 	bl	8000adc <__aeabi_dcmplt>
 80220c2:	b300      	cbz	r0, 8022106 <pow+0xa2>
 80220c4:	f7ff faec 	bl	80216a0 <__errno>
 80220c8:	2322      	movs	r3, #34	@ 0x22
 80220ca:	e01b      	b.n	8022104 <pow+0xa0>
 80220cc:	ec47 6b10 	vmov	d0, r6, r7
 80220d0:	f000 fa62 	bl	8022598 <finite>
 80220d4:	b9e0      	cbnz	r0, 8022110 <pow+0xac>
 80220d6:	eeb0 0a48 	vmov.f32	s0, s16
 80220da:	eef0 0a68 	vmov.f32	s1, s17
 80220de:	f000 fa5b 	bl	8022598 <finite>
 80220e2:	b1a8      	cbz	r0, 8022110 <pow+0xac>
 80220e4:	ec45 4b10 	vmov	d0, r4, r5
 80220e8:	f000 fa56 	bl	8022598 <finite>
 80220ec:	b180      	cbz	r0, 8022110 <pow+0xac>
 80220ee:	4632      	mov	r2, r6
 80220f0:	463b      	mov	r3, r7
 80220f2:	4630      	mov	r0, r6
 80220f4:	4639      	mov	r1, r7
 80220f6:	f7de fd19 	bl	8000b2c <__aeabi_dcmpun>
 80220fa:	2800      	cmp	r0, #0
 80220fc:	d0e2      	beq.n	80220c4 <pow+0x60>
 80220fe:	f7ff facf 	bl	80216a0 <__errno>
 8022102:	2321      	movs	r3, #33	@ 0x21
 8022104:	6003      	str	r3, [r0, #0]
 8022106:	ecbd 8b02 	vpop	{d8}
 802210a:	ec47 6b10 	vmov	d0, r6, r7
 802210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022110:	2200      	movs	r2, #0
 8022112:	2300      	movs	r3, #0
 8022114:	4630      	mov	r0, r6
 8022116:	4639      	mov	r1, r7
 8022118:	f7de fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 802211c:	2800      	cmp	r0, #0
 802211e:	d0f2      	beq.n	8022106 <pow+0xa2>
 8022120:	eeb0 0a48 	vmov.f32	s0, s16
 8022124:	eef0 0a68 	vmov.f32	s1, s17
 8022128:	f000 fa36 	bl	8022598 <finite>
 802212c:	2800      	cmp	r0, #0
 802212e:	d0ea      	beq.n	8022106 <pow+0xa2>
 8022130:	ec45 4b10 	vmov	d0, r4, r5
 8022134:	f000 fa30 	bl	8022598 <finite>
 8022138:	e7c3      	b.n	80220c2 <pow+0x5e>
 802213a:	4f01      	ldr	r7, [pc, #4]	@ (8022140 <pow+0xdc>)
 802213c:	2600      	movs	r6, #0
 802213e:	e7e2      	b.n	8022106 <pow+0xa2>
 8022140:	3ff00000 	.word	0x3ff00000

08022144 <sqrt>:
 8022144:	b538      	push	{r3, r4, r5, lr}
 8022146:	ed2d 8b02 	vpush	{d8}
 802214a:	ec55 4b10 	vmov	r4, r5, d0
 802214e:	f000 fa3d 	bl	80225cc <__ieee754_sqrt>
 8022152:	4622      	mov	r2, r4
 8022154:	462b      	mov	r3, r5
 8022156:	4620      	mov	r0, r4
 8022158:	4629      	mov	r1, r5
 802215a:	eeb0 8a40 	vmov.f32	s16, s0
 802215e:	eef0 8a60 	vmov.f32	s17, s1
 8022162:	f7de fce3 	bl	8000b2c <__aeabi_dcmpun>
 8022166:	b990      	cbnz	r0, 802218e <sqrt+0x4a>
 8022168:	2200      	movs	r2, #0
 802216a:	2300      	movs	r3, #0
 802216c:	4620      	mov	r0, r4
 802216e:	4629      	mov	r1, r5
 8022170:	f7de fcb4 	bl	8000adc <__aeabi_dcmplt>
 8022174:	b158      	cbz	r0, 802218e <sqrt+0x4a>
 8022176:	f7ff fa93 	bl	80216a0 <__errno>
 802217a:	2321      	movs	r3, #33	@ 0x21
 802217c:	6003      	str	r3, [r0, #0]
 802217e:	2200      	movs	r2, #0
 8022180:	2300      	movs	r3, #0
 8022182:	4610      	mov	r0, r2
 8022184:	4619      	mov	r1, r3
 8022186:	f7de fb61 	bl	800084c <__aeabi_ddiv>
 802218a:	ec41 0b18 	vmov	d8, r0, r1
 802218e:	eeb0 0a48 	vmov.f32	s0, s16
 8022192:	eef0 0a68 	vmov.f32	s1, s17
 8022196:	ecbd 8b02 	vpop	{d8}
 802219a:	bd38      	pop	{r3, r4, r5, pc}
 802219c:	0000      	movs	r0, r0
	...

080221a0 <cos>:
 80221a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80221a2:	ec53 2b10 	vmov	r2, r3, d0
 80221a6:	4826      	ldr	r0, [pc, #152]	@ (8022240 <cos+0xa0>)
 80221a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80221ac:	4281      	cmp	r1, r0
 80221ae:	d806      	bhi.n	80221be <cos+0x1e>
 80221b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8022238 <cos+0x98>
 80221b4:	b005      	add	sp, #20
 80221b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80221ba:	f000 bbfd 	b.w	80229b8 <__kernel_cos>
 80221be:	4821      	ldr	r0, [pc, #132]	@ (8022244 <cos+0xa4>)
 80221c0:	4281      	cmp	r1, r0
 80221c2:	d908      	bls.n	80221d6 <cos+0x36>
 80221c4:	4610      	mov	r0, r2
 80221c6:	4619      	mov	r1, r3
 80221c8:	f7de f85e 	bl	8000288 <__aeabi_dsub>
 80221cc:	ec41 0b10 	vmov	d0, r0, r1
 80221d0:	b005      	add	sp, #20
 80221d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80221d6:	4668      	mov	r0, sp
 80221d8:	f002 f9e2 	bl	80245a0 <__ieee754_rem_pio2>
 80221dc:	f000 0003 	and.w	r0, r0, #3
 80221e0:	2801      	cmp	r0, #1
 80221e2:	d00b      	beq.n	80221fc <cos+0x5c>
 80221e4:	2802      	cmp	r0, #2
 80221e6:	d015      	beq.n	8022214 <cos+0x74>
 80221e8:	b9d8      	cbnz	r0, 8022222 <cos+0x82>
 80221ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80221ee:	ed9d 0b00 	vldr	d0, [sp]
 80221f2:	f000 fbe1 	bl	80229b8 <__kernel_cos>
 80221f6:	ec51 0b10 	vmov	r0, r1, d0
 80221fa:	e7e7      	b.n	80221cc <cos+0x2c>
 80221fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022200:	ed9d 0b00 	vldr	d0, [sp]
 8022204:	f000 fca0 	bl	8022b48 <__kernel_sin>
 8022208:	ec53 2b10 	vmov	r2, r3, d0
 802220c:	4610      	mov	r0, r2
 802220e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8022212:	e7db      	b.n	80221cc <cos+0x2c>
 8022214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022218:	ed9d 0b00 	vldr	d0, [sp]
 802221c:	f000 fbcc 	bl	80229b8 <__kernel_cos>
 8022220:	e7f2      	b.n	8022208 <cos+0x68>
 8022222:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022226:	ed9d 0b00 	vldr	d0, [sp]
 802222a:	2001      	movs	r0, #1
 802222c:	f000 fc8c 	bl	8022b48 <__kernel_sin>
 8022230:	e7e1      	b.n	80221f6 <cos+0x56>
 8022232:	bf00      	nop
 8022234:	f3af 8000 	nop.w
	...
 8022240:	3fe921fb 	.word	0x3fe921fb
 8022244:	7fefffff 	.word	0x7fefffff

08022248 <fabs>:
 8022248:	ec51 0b10 	vmov	r0, r1, d0
 802224c:	4602      	mov	r2, r0
 802224e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022252:	ec43 2b10 	vmov	d0, r2, r3
 8022256:	4770      	bx	lr

08022258 <sin>:
 8022258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802225a:	ec53 2b10 	vmov	r2, r3, d0
 802225e:	4826      	ldr	r0, [pc, #152]	@ (80222f8 <sin+0xa0>)
 8022260:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8022264:	4281      	cmp	r1, r0
 8022266:	d807      	bhi.n	8022278 <sin+0x20>
 8022268:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80222f0 <sin+0x98>
 802226c:	2000      	movs	r0, #0
 802226e:	b005      	add	sp, #20
 8022270:	f85d eb04 	ldr.w	lr, [sp], #4
 8022274:	f000 bc68 	b.w	8022b48 <__kernel_sin>
 8022278:	4820      	ldr	r0, [pc, #128]	@ (80222fc <sin+0xa4>)
 802227a:	4281      	cmp	r1, r0
 802227c:	d908      	bls.n	8022290 <sin+0x38>
 802227e:	4610      	mov	r0, r2
 8022280:	4619      	mov	r1, r3
 8022282:	f7de f801 	bl	8000288 <__aeabi_dsub>
 8022286:	ec41 0b10 	vmov	d0, r0, r1
 802228a:	b005      	add	sp, #20
 802228c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022290:	4668      	mov	r0, sp
 8022292:	f002 f985 	bl	80245a0 <__ieee754_rem_pio2>
 8022296:	f000 0003 	and.w	r0, r0, #3
 802229a:	2801      	cmp	r0, #1
 802229c:	d00c      	beq.n	80222b8 <sin+0x60>
 802229e:	2802      	cmp	r0, #2
 80222a0:	d011      	beq.n	80222c6 <sin+0x6e>
 80222a2:	b9e8      	cbnz	r0, 80222e0 <sin+0x88>
 80222a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222a8:	ed9d 0b00 	vldr	d0, [sp]
 80222ac:	2001      	movs	r0, #1
 80222ae:	f000 fc4b 	bl	8022b48 <__kernel_sin>
 80222b2:	ec51 0b10 	vmov	r0, r1, d0
 80222b6:	e7e6      	b.n	8022286 <sin+0x2e>
 80222b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222bc:	ed9d 0b00 	vldr	d0, [sp]
 80222c0:	f000 fb7a 	bl	80229b8 <__kernel_cos>
 80222c4:	e7f5      	b.n	80222b2 <sin+0x5a>
 80222c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222ca:	ed9d 0b00 	vldr	d0, [sp]
 80222ce:	2001      	movs	r0, #1
 80222d0:	f000 fc3a 	bl	8022b48 <__kernel_sin>
 80222d4:	ec53 2b10 	vmov	r2, r3, d0
 80222d8:	4610      	mov	r0, r2
 80222da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80222de:	e7d2      	b.n	8022286 <sin+0x2e>
 80222e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80222e4:	ed9d 0b00 	vldr	d0, [sp]
 80222e8:	f000 fb66 	bl	80229b8 <__kernel_cos>
 80222ec:	e7f2      	b.n	80222d4 <sin+0x7c>
 80222ee:	bf00      	nop
	...
 80222f8:	3fe921fb 	.word	0x3fe921fb
 80222fc:	7fefffff 	.word	0x7fefffff

08022300 <tan>:
 8022300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022302:	ec53 2b10 	vmov	r2, r3, d0
 8022306:	4816      	ldr	r0, [pc, #88]	@ (8022360 <tan+0x60>)
 8022308:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802230c:	4281      	cmp	r1, r0
 802230e:	d807      	bhi.n	8022320 <tan+0x20>
 8022310:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8022358 <tan+0x58>
 8022314:	2001      	movs	r0, #1
 8022316:	b005      	add	sp, #20
 8022318:	f85d eb04 	ldr.w	lr, [sp], #4
 802231c:	f000 bcd0 	b.w	8022cc0 <__kernel_tan>
 8022320:	4810      	ldr	r0, [pc, #64]	@ (8022364 <tan+0x64>)
 8022322:	4281      	cmp	r1, r0
 8022324:	d908      	bls.n	8022338 <tan+0x38>
 8022326:	4610      	mov	r0, r2
 8022328:	4619      	mov	r1, r3
 802232a:	f7dd ffad 	bl	8000288 <__aeabi_dsub>
 802232e:	ec41 0b10 	vmov	d0, r0, r1
 8022332:	b005      	add	sp, #20
 8022334:	f85d fb04 	ldr.w	pc, [sp], #4
 8022338:	4668      	mov	r0, sp
 802233a:	f002 f931 	bl	80245a0 <__ieee754_rem_pio2>
 802233e:	0040      	lsls	r0, r0, #1
 8022340:	f000 0002 	and.w	r0, r0, #2
 8022344:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022348:	ed9d 0b00 	vldr	d0, [sp]
 802234c:	f1c0 0001 	rsb	r0, r0, #1
 8022350:	f000 fcb6 	bl	8022cc0 <__kernel_tan>
 8022354:	e7ed      	b.n	8022332 <tan+0x32>
 8022356:	bf00      	nop
	...
 8022360:	3fe921fb 	.word	0x3fe921fb
 8022364:	7fefffff 	.word	0x7fefffff

08022368 <acosf>:
 8022368:	b508      	push	{r3, lr}
 802236a:	ed2d 8b02 	vpush	{d8}
 802236e:	eeb0 8a40 	vmov.f32	s16, s0
 8022372:	f002 fe29 	bl	8024fc8 <__ieee754_acosf>
 8022376:	eeb4 8a48 	vcmp.f32	s16, s16
 802237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802237e:	eef0 8a40 	vmov.f32	s17, s0
 8022382:	d615      	bvs.n	80223b0 <acosf+0x48>
 8022384:	eeb0 0a48 	vmov.f32	s0, s16
 8022388:	f000 f88c 	bl	80224a4 <fabsf>
 802238c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8022390:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022398:	dd0a      	ble.n	80223b0 <acosf+0x48>
 802239a:	f7ff f981 	bl	80216a0 <__errno>
 802239e:	ecbd 8b02 	vpop	{d8}
 80223a2:	2321      	movs	r3, #33	@ 0x21
 80223a4:	6003      	str	r3, [r0, #0]
 80223a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80223aa:	4804      	ldr	r0, [pc, #16]	@ (80223bc <acosf+0x54>)
 80223ac:	f000 b908 	b.w	80225c0 <nanf>
 80223b0:	eeb0 0a68 	vmov.f32	s0, s17
 80223b4:	ecbd 8b02 	vpop	{d8}
 80223b8:	bd08      	pop	{r3, pc}
 80223ba:	bf00      	nop
 80223bc:	0802689d 	.word	0x0802689d

080223c0 <asinf>:
 80223c0:	b508      	push	{r3, lr}
 80223c2:	ed2d 8b02 	vpush	{d8}
 80223c6:	eeb0 8a40 	vmov.f32	s16, s0
 80223ca:	f002 fef5 	bl	80251b8 <__ieee754_asinf>
 80223ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80223d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223d6:	eef0 8a40 	vmov.f32	s17, s0
 80223da:	d615      	bvs.n	8022408 <asinf+0x48>
 80223dc:	eeb0 0a48 	vmov.f32	s0, s16
 80223e0:	f000 f860 	bl	80224a4 <fabsf>
 80223e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80223e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80223ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223f0:	dd0a      	ble.n	8022408 <asinf+0x48>
 80223f2:	f7ff f955 	bl	80216a0 <__errno>
 80223f6:	ecbd 8b02 	vpop	{d8}
 80223fa:	2321      	movs	r3, #33	@ 0x21
 80223fc:	6003      	str	r3, [r0, #0]
 80223fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8022402:	4804      	ldr	r0, [pc, #16]	@ (8022414 <asinf+0x54>)
 8022404:	f000 b8dc 	b.w	80225c0 <nanf>
 8022408:	eeb0 0a68 	vmov.f32	s0, s17
 802240c:	ecbd 8b02 	vpop	{d8}
 8022410:	bd08      	pop	{r3, pc}
 8022412:	bf00      	nop
 8022414:	0802689d 	.word	0x0802689d

08022418 <atan2f>:
 8022418:	f002 bfb4 	b.w	8025384 <__ieee754_atan2f>

0802241c <cosf>:
 802241c:	ee10 3a10 	vmov	r3, s0
 8022420:	b507      	push	{r0, r1, r2, lr}
 8022422:	4a1e      	ldr	r2, [pc, #120]	@ (802249c <cosf+0x80>)
 8022424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022428:	4293      	cmp	r3, r2
 802242a:	d806      	bhi.n	802243a <cosf+0x1e>
 802242c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80224a0 <cosf+0x84>
 8022430:	b003      	add	sp, #12
 8022432:	f85d eb04 	ldr.w	lr, [sp], #4
 8022436:	f002 bc47 	b.w	8024cc8 <__kernel_cosf>
 802243a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802243e:	d304      	bcc.n	802244a <cosf+0x2e>
 8022440:	ee30 0a40 	vsub.f32	s0, s0, s0
 8022444:	b003      	add	sp, #12
 8022446:	f85d fb04 	ldr.w	pc, [sp], #4
 802244a:	4668      	mov	r0, sp
 802244c:	f003 f83a 	bl	80254c4 <__ieee754_rem_pio2f>
 8022450:	f000 0003 	and.w	r0, r0, #3
 8022454:	2801      	cmp	r0, #1
 8022456:	d009      	beq.n	802246c <cosf+0x50>
 8022458:	2802      	cmp	r0, #2
 802245a:	d010      	beq.n	802247e <cosf+0x62>
 802245c:	b9b0      	cbnz	r0, 802248c <cosf+0x70>
 802245e:	eddd 0a01 	vldr	s1, [sp, #4]
 8022462:	ed9d 0a00 	vldr	s0, [sp]
 8022466:	f002 fc2f 	bl	8024cc8 <__kernel_cosf>
 802246a:	e7eb      	b.n	8022444 <cosf+0x28>
 802246c:	eddd 0a01 	vldr	s1, [sp, #4]
 8022470:	ed9d 0a00 	vldr	s0, [sp]
 8022474:	f002 fc80 	bl	8024d78 <__kernel_sinf>
 8022478:	eeb1 0a40 	vneg.f32	s0, s0
 802247c:	e7e2      	b.n	8022444 <cosf+0x28>
 802247e:	eddd 0a01 	vldr	s1, [sp, #4]
 8022482:	ed9d 0a00 	vldr	s0, [sp]
 8022486:	f002 fc1f 	bl	8024cc8 <__kernel_cosf>
 802248a:	e7f5      	b.n	8022478 <cosf+0x5c>
 802248c:	eddd 0a01 	vldr	s1, [sp, #4]
 8022490:	ed9d 0a00 	vldr	s0, [sp]
 8022494:	2001      	movs	r0, #1
 8022496:	f002 fc6f 	bl	8024d78 <__kernel_sinf>
 802249a:	e7d3      	b.n	8022444 <cosf+0x28>
 802249c:	3f490fd8 	.word	0x3f490fd8
 80224a0:	00000000 	.word	0x00000000

080224a4 <fabsf>:
 80224a4:	ee10 3a10 	vmov	r3, s0
 80224a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80224ac:	ee00 3a10 	vmov	s0, r3
 80224b0:	4770      	bx	lr
	...

080224b4 <sinf>:
 80224b4:	ee10 3a10 	vmov	r3, s0
 80224b8:	b507      	push	{r0, r1, r2, lr}
 80224ba:	4a1f      	ldr	r2, [pc, #124]	@ (8022538 <sinf+0x84>)
 80224bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80224c0:	4293      	cmp	r3, r2
 80224c2:	d807      	bhi.n	80224d4 <sinf+0x20>
 80224c4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802253c <sinf+0x88>
 80224c8:	2000      	movs	r0, #0
 80224ca:	b003      	add	sp, #12
 80224cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80224d0:	f002 bc52 	b.w	8024d78 <__kernel_sinf>
 80224d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80224d8:	d304      	bcc.n	80224e4 <sinf+0x30>
 80224da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80224de:	b003      	add	sp, #12
 80224e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80224e4:	4668      	mov	r0, sp
 80224e6:	f002 ffed 	bl	80254c4 <__ieee754_rem_pio2f>
 80224ea:	f000 0003 	and.w	r0, r0, #3
 80224ee:	2801      	cmp	r0, #1
 80224f0:	d00a      	beq.n	8022508 <sinf+0x54>
 80224f2:	2802      	cmp	r0, #2
 80224f4:	d00f      	beq.n	8022516 <sinf+0x62>
 80224f6:	b9c0      	cbnz	r0, 802252a <sinf+0x76>
 80224f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80224fc:	ed9d 0a00 	vldr	s0, [sp]
 8022500:	2001      	movs	r0, #1
 8022502:	f002 fc39 	bl	8024d78 <__kernel_sinf>
 8022506:	e7ea      	b.n	80224de <sinf+0x2a>
 8022508:	eddd 0a01 	vldr	s1, [sp, #4]
 802250c:	ed9d 0a00 	vldr	s0, [sp]
 8022510:	f002 fbda 	bl	8024cc8 <__kernel_cosf>
 8022514:	e7e3      	b.n	80224de <sinf+0x2a>
 8022516:	eddd 0a01 	vldr	s1, [sp, #4]
 802251a:	ed9d 0a00 	vldr	s0, [sp]
 802251e:	2001      	movs	r0, #1
 8022520:	f002 fc2a 	bl	8024d78 <__kernel_sinf>
 8022524:	eeb1 0a40 	vneg.f32	s0, s0
 8022528:	e7d9      	b.n	80224de <sinf+0x2a>
 802252a:	eddd 0a01 	vldr	s1, [sp, #4]
 802252e:	ed9d 0a00 	vldr	s0, [sp]
 8022532:	f002 fbc9 	bl	8024cc8 <__kernel_cosf>
 8022536:	e7f5      	b.n	8022524 <sinf+0x70>
 8022538:	3f490fd8 	.word	0x3f490fd8
 802253c:	00000000 	.word	0x00000000

08022540 <tanf>:
 8022540:	ee10 3a10 	vmov	r3, s0
 8022544:	b507      	push	{r0, r1, r2, lr}
 8022546:	4a12      	ldr	r2, [pc, #72]	@ (8022590 <tanf+0x50>)
 8022548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802254c:	4293      	cmp	r3, r2
 802254e:	d807      	bhi.n	8022560 <tanf+0x20>
 8022550:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8022594 <tanf+0x54>
 8022554:	2001      	movs	r0, #1
 8022556:	b003      	add	sp, #12
 8022558:	f85d eb04 	ldr.w	lr, [sp], #4
 802255c:	f002 bc54 	b.w	8024e08 <__kernel_tanf>
 8022560:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022564:	d304      	bcc.n	8022570 <tanf+0x30>
 8022566:	ee30 0a40 	vsub.f32	s0, s0, s0
 802256a:	b003      	add	sp, #12
 802256c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022570:	4668      	mov	r0, sp
 8022572:	f002 ffa7 	bl	80254c4 <__ieee754_rem_pio2f>
 8022576:	0040      	lsls	r0, r0, #1
 8022578:	f000 0002 	and.w	r0, r0, #2
 802257c:	eddd 0a01 	vldr	s1, [sp, #4]
 8022580:	ed9d 0a00 	vldr	s0, [sp]
 8022584:	f1c0 0001 	rsb	r0, r0, #1
 8022588:	f002 fc3e 	bl	8024e08 <__kernel_tanf>
 802258c:	e7ed      	b.n	802256a <tanf+0x2a>
 802258e:	bf00      	nop
 8022590:	3f490fda 	.word	0x3f490fda
 8022594:	00000000 	.word	0x00000000

08022598 <finite>:
 8022598:	b082      	sub	sp, #8
 802259a:	ed8d 0b00 	vstr	d0, [sp]
 802259e:	9801      	ldr	r0, [sp, #4]
 80225a0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80225a4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80225a8:	0fc0      	lsrs	r0, r0, #31
 80225aa:	b002      	add	sp, #8
 80225ac:	4770      	bx	lr
	...

080225b0 <nan>:
 80225b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80225b8 <nan+0x8>
 80225b4:	4770      	bx	lr
 80225b6:	bf00      	nop
 80225b8:	00000000 	.word	0x00000000
 80225bc:	7ff80000 	.word	0x7ff80000

080225c0 <nanf>:
 80225c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80225c8 <nanf+0x8>
 80225c4:	4770      	bx	lr
 80225c6:	bf00      	nop
 80225c8:	7fc00000 	.word	0x7fc00000

080225cc <__ieee754_sqrt>:
 80225cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225d0:	4a68      	ldr	r2, [pc, #416]	@ (8022774 <__ieee754_sqrt+0x1a8>)
 80225d2:	ec55 4b10 	vmov	r4, r5, d0
 80225d6:	43aa      	bics	r2, r5
 80225d8:	462b      	mov	r3, r5
 80225da:	4621      	mov	r1, r4
 80225dc:	d110      	bne.n	8022600 <__ieee754_sqrt+0x34>
 80225de:	4622      	mov	r2, r4
 80225e0:	4620      	mov	r0, r4
 80225e2:	4629      	mov	r1, r5
 80225e4:	f7de f808 	bl	80005f8 <__aeabi_dmul>
 80225e8:	4602      	mov	r2, r0
 80225ea:	460b      	mov	r3, r1
 80225ec:	4620      	mov	r0, r4
 80225ee:	4629      	mov	r1, r5
 80225f0:	f7dd fe4c 	bl	800028c <__adddf3>
 80225f4:	4604      	mov	r4, r0
 80225f6:	460d      	mov	r5, r1
 80225f8:	ec45 4b10 	vmov	d0, r4, r5
 80225fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022600:	2d00      	cmp	r5, #0
 8022602:	dc0e      	bgt.n	8022622 <__ieee754_sqrt+0x56>
 8022604:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8022608:	4322      	orrs	r2, r4
 802260a:	d0f5      	beq.n	80225f8 <__ieee754_sqrt+0x2c>
 802260c:	b19d      	cbz	r5, 8022636 <__ieee754_sqrt+0x6a>
 802260e:	4622      	mov	r2, r4
 8022610:	4620      	mov	r0, r4
 8022612:	4629      	mov	r1, r5
 8022614:	f7dd fe38 	bl	8000288 <__aeabi_dsub>
 8022618:	4602      	mov	r2, r0
 802261a:	460b      	mov	r3, r1
 802261c:	f7de f916 	bl	800084c <__aeabi_ddiv>
 8022620:	e7e8      	b.n	80225f4 <__ieee754_sqrt+0x28>
 8022622:	152a      	asrs	r2, r5, #20
 8022624:	d115      	bne.n	8022652 <__ieee754_sqrt+0x86>
 8022626:	2000      	movs	r0, #0
 8022628:	e009      	b.n	802263e <__ieee754_sqrt+0x72>
 802262a:	0acb      	lsrs	r3, r1, #11
 802262c:	3a15      	subs	r2, #21
 802262e:	0549      	lsls	r1, r1, #21
 8022630:	2b00      	cmp	r3, #0
 8022632:	d0fa      	beq.n	802262a <__ieee754_sqrt+0x5e>
 8022634:	e7f7      	b.n	8022626 <__ieee754_sqrt+0x5a>
 8022636:	462a      	mov	r2, r5
 8022638:	e7fa      	b.n	8022630 <__ieee754_sqrt+0x64>
 802263a:	005b      	lsls	r3, r3, #1
 802263c:	3001      	adds	r0, #1
 802263e:	02dc      	lsls	r4, r3, #11
 8022640:	d5fb      	bpl.n	802263a <__ieee754_sqrt+0x6e>
 8022642:	1e44      	subs	r4, r0, #1
 8022644:	1b12      	subs	r2, r2, r4
 8022646:	f1c0 0420 	rsb	r4, r0, #32
 802264a:	fa21 f404 	lsr.w	r4, r1, r4
 802264e:	4323      	orrs	r3, r4
 8022650:	4081      	lsls	r1, r0
 8022652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022656:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 802265a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802265e:	07d2      	lsls	r2, r2, #31
 8022660:	bf5c      	itt	pl
 8022662:	005b      	lslpl	r3, r3, #1
 8022664:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8022668:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802266c:	bf58      	it	pl
 802266e:	0049      	lslpl	r1, r1, #1
 8022670:	2600      	movs	r6, #0
 8022672:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8022676:	106d      	asrs	r5, r5, #1
 8022678:	0049      	lsls	r1, r1, #1
 802267a:	2016      	movs	r0, #22
 802267c:	4632      	mov	r2, r6
 802267e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8022682:	1917      	adds	r7, r2, r4
 8022684:	429f      	cmp	r7, r3
 8022686:	bfde      	ittt	le
 8022688:	193a      	addle	r2, r7, r4
 802268a:	1bdb      	suble	r3, r3, r7
 802268c:	1936      	addle	r6, r6, r4
 802268e:	0fcf      	lsrs	r7, r1, #31
 8022690:	3801      	subs	r0, #1
 8022692:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8022696:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802269a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802269e:	d1f0      	bne.n	8022682 <__ieee754_sqrt+0xb6>
 80226a0:	4604      	mov	r4, r0
 80226a2:	2720      	movs	r7, #32
 80226a4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80226a8:	429a      	cmp	r2, r3
 80226aa:	eb00 0e0c 	add.w	lr, r0, ip
 80226ae:	db02      	blt.n	80226b6 <__ieee754_sqrt+0xea>
 80226b0:	d113      	bne.n	80226da <__ieee754_sqrt+0x10e>
 80226b2:	458e      	cmp	lr, r1
 80226b4:	d811      	bhi.n	80226da <__ieee754_sqrt+0x10e>
 80226b6:	f1be 0f00 	cmp.w	lr, #0
 80226ba:	eb0e 000c 	add.w	r0, lr, ip
 80226be:	da42      	bge.n	8022746 <__ieee754_sqrt+0x17a>
 80226c0:	2800      	cmp	r0, #0
 80226c2:	db40      	blt.n	8022746 <__ieee754_sqrt+0x17a>
 80226c4:	f102 0801 	add.w	r8, r2, #1
 80226c8:	1a9b      	subs	r3, r3, r2
 80226ca:	458e      	cmp	lr, r1
 80226cc:	bf88      	it	hi
 80226ce:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80226d2:	eba1 010e 	sub.w	r1, r1, lr
 80226d6:	4464      	add	r4, ip
 80226d8:	4642      	mov	r2, r8
 80226da:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80226de:	3f01      	subs	r7, #1
 80226e0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80226e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80226e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80226ec:	d1dc      	bne.n	80226a8 <__ieee754_sqrt+0xdc>
 80226ee:	4319      	orrs	r1, r3
 80226f0:	d01b      	beq.n	802272a <__ieee754_sqrt+0x15e>
 80226f2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8022778 <__ieee754_sqrt+0x1ac>
 80226f6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 802277c <__ieee754_sqrt+0x1b0>
 80226fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80226fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8022702:	f7dd fdc1 	bl	8000288 <__aeabi_dsub>
 8022706:	e9da 8900 	ldrd	r8, r9, [sl]
 802270a:	4602      	mov	r2, r0
 802270c:	460b      	mov	r3, r1
 802270e:	4640      	mov	r0, r8
 8022710:	4649      	mov	r1, r9
 8022712:	f7de f9ed 	bl	8000af0 <__aeabi_dcmple>
 8022716:	b140      	cbz	r0, 802272a <__ieee754_sqrt+0x15e>
 8022718:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 802271c:	e9da 0100 	ldrd	r0, r1, [sl]
 8022720:	e9db 2300 	ldrd	r2, r3, [fp]
 8022724:	d111      	bne.n	802274a <__ieee754_sqrt+0x17e>
 8022726:	3601      	adds	r6, #1
 8022728:	463c      	mov	r4, r7
 802272a:	1072      	asrs	r2, r6, #1
 802272c:	0863      	lsrs	r3, r4, #1
 802272e:	07f1      	lsls	r1, r6, #31
 8022730:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8022734:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8022738:	bf48      	it	mi
 802273a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 802273e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8022742:	4618      	mov	r0, r3
 8022744:	e756      	b.n	80225f4 <__ieee754_sqrt+0x28>
 8022746:	4690      	mov	r8, r2
 8022748:	e7be      	b.n	80226c8 <__ieee754_sqrt+0xfc>
 802274a:	f7dd fd9f 	bl	800028c <__adddf3>
 802274e:	e9da 8900 	ldrd	r8, r9, [sl]
 8022752:	4602      	mov	r2, r0
 8022754:	460b      	mov	r3, r1
 8022756:	4640      	mov	r0, r8
 8022758:	4649      	mov	r1, r9
 802275a:	f7de f9bf 	bl	8000adc <__aeabi_dcmplt>
 802275e:	b120      	cbz	r0, 802276a <__ieee754_sqrt+0x19e>
 8022760:	1ca0      	adds	r0, r4, #2
 8022762:	bf08      	it	eq
 8022764:	3601      	addeq	r6, #1
 8022766:	3402      	adds	r4, #2
 8022768:	e7df      	b.n	802272a <__ieee754_sqrt+0x15e>
 802276a:	1c63      	adds	r3, r4, #1
 802276c:	f023 0401 	bic.w	r4, r3, #1
 8022770:	e7db      	b.n	802272a <__ieee754_sqrt+0x15e>
 8022772:	bf00      	nop
 8022774:	7ff00000 	.word	0x7ff00000
 8022778:	20000348 	.word	0x20000348
 802277c:	20000340 	.word	0x20000340

08022780 <ceil>:
 8022780:	ec51 0b10 	vmov	r0, r1, d0
 8022784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802278c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8022790:	2e13      	cmp	r6, #19
 8022792:	460c      	mov	r4, r1
 8022794:	4605      	mov	r5, r0
 8022796:	4680      	mov	r8, r0
 8022798:	dc2e      	bgt.n	80227f8 <ceil+0x78>
 802279a:	2e00      	cmp	r6, #0
 802279c:	da11      	bge.n	80227c2 <ceil+0x42>
 802279e:	a332      	add	r3, pc, #200	@ (adr r3, 8022868 <ceil+0xe8>)
 80227a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a4:	f7dd fd72 	bl	800028c <__adddf3>
 80227a8:	2200      	movs	r2, #0
 80227aa:	2300      	movs	r3, #0
 80227ac:	f7de f9b4 	bl	8000b18 <__aeabi_dcmpgt>
 80227b0:	b120      	cbz	r0, 80227bc <ceil+0x3c>
 80227b2:	2c00      	cmp	r4, #0
 80227b4:	db4f      	blt.n	8022856 <ceil+0xd6>
 80227b6:	4325      	orrs	r5, r4
 80227b8:	d151      	bne.n	802285e <ceil+0xde>
 80227ba:	462c      	mov	r4, r5
 80227bc:	4621      	mov	r1, r4
 80227be:	4628      	mov	r0, r5
 80227c0:	e023      	b.n	802280a <ceil+0x8a>
 80227c2:	4f2b      	ldr	r7, [pc, #172]	@ (8022870 <ceil+0xf0>)
 80227c4:	4137      	asrs	r7, r6
 80227c6:	ea01 0307 	and.w	r3, r1, r7
 80227ca:	4303      	orrs	r3, r0
 80227cc:	d01d      	beq.n	802280a <ceil+0x8a>
 80227ce:	a326      	add	r3, pc, #152	@ (adr r3, 8022868 <ceil+0xe8>)
 80227d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227d4:	f7dd fd5a 	bl	800028c <__adddf3>
 80227d8:	2200      	movs	r2, #0
 80227da:	2300      	movs	r3, #0
 80227dc:	f7de f99c 	bl	8000b18 <__aeabi_dcmpgt>
 80227e0:	2800      	cmp	r0, #0
 80227e2:	d0eb      	beq.n	80227bc <ceil+0x3c>
 80227e4:	2c00      	cmp	r4, #0
 80227e6:	bfc2      	ittt	gt
 80227e8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80227ec:	4133      	asrgt	r3, r6
 80227ee:	18e4      	addgt	r4, r4, r3
 80227f0:	ea24 0407 	bic.w	r4, r4, r7
 80227f4:	2500      	movs	r5, #0
 80227f6:	e7e1      	b.n	80227bc <ceil+0x3c>
 80227f8:	2e33      	cmp	r6, #51	@ 0x33
 80227fa:	dd0a      	ble.n	8022812 <ceil+0x92>
 80227fc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022800:	d103      	bne.n	802280a <ceil+0x8a>
 8022802:	4602      	mov	r2, r0
 8022804:	460b      	mov	r3, r1
 8022806:	f7dd fd41 	bl	800028c <__adddf3>
 802280a:	ec41 0b10 	vmov	d0, r0, r1
 802280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022812:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8022816:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802281a:	40df      	lsrs	r7, r3
 802281c:	4238      	tst	r0, r7
 802281e:	d0f4      	beq.n	802280a <ceil+0x8a>
 8022820:	a311      	add	r3, pc, #68	@ (adr r3, 8022868 <ceil+0xe8>)
 8022822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022826:	f7dd fd31 	bl	800028c <__adddf3>
 802282a:	2200      	movs	r2, #0
 802282c:	2300      	movs	r3, #0
 802282e:	f7de f973 	bl	8000b18 <__aeabi_dcmpgt>
 8022832:	2800      	cmp	r0, #0
 8022834:	d0c2      	beq.n	80227bc <ceil+0x3c>
 8022836:	2c00      	cmp	r4, #0
 8022838:	dd0a      	ble.n	8022850 <ceil+0xd0>
 802283a:	2e14      	cmp	r6, #20
 802283c:	d101      	bne.n	8022842 <ceil+0xc2>
 802283e:	3401      	adds	r4, #1
 8022840:	e006      	b.n	8022850 <ceil+0xd0>
 8022842:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8022846:	2301      	movs	r3, #1
 8022848:	40b3      	lsls	r3, r6
 802284a:	441d      	add	r5, r3
 802284c:	45a8      	cmp	r8, r5
 802284e:	d8f6      	bhi.n	802283e <ceil+0xbe>
 8022850:	ea25 0507 	bic.w	r5, r5, r7
 8022854:	e7b2      	b.n	80227bc <ceil+0x3c>
 8022856:	2500      	movs	r5, #0
 8022858:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 802285c:	e7ae      	b.n	80227bc <ceil+0x3c>
 802285e:	4c05      	ldr	r4, [pc, #20]	@ (8022874 <ceil+0xf4>)
 8022860:	2500      	movs	r5, #0
 8022862:	e7ab      	b.n	80227bc <ceil+0x3c>
 8022864:	f3af 8000 	nop.w
 8022868:	8800759c 	.word	0x8800759c
 802286c:	7e37e43c 	.word	0x7e37e43c
 8022870:	000fffff 	.word	0x000fffff
 8022874:	3ff00000 	.word	0x3ff00000

08022878 <floor>:
 8022878:	ec51 0b10 	vmov	r0, r1, d0
 802287c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022884:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8022888:	2e13      	cmp	r6, #19
 802288a:	460c      	mov	r4, r1
 802288c:	4605      	mov	r5, r0
 802288e:	4680      	mov	r8, r0
 8022890:	dc34      	bgt.n	80228fc <floor+0x84>
 8022892:	2e00      	cmp	r6, #0
 8022894:	da17      	bge.n	80228c6 <floor+0x4e>
 8022896:	a332      	add	r3, pc, #200	@ (adr r3, 8022960 <floor+0xe8>)
 8022898:	e9d3 2300 	ldrd	r2, r3, [r3]
 802289c:	f7dd fcf6 	bl	800028c <__adddf3>
 80228a0:	2200      	movs	r2, #0
 80228a2:	2300      	movs	r3, #0
 80228a4:	f7de f938 	bl	8000b18 <__aeabi_dcmpgt>
 80228a8:	b150      	cbz	r0, 80228c0 <floor+0x48>
 80228aa:	2c00      	cmp	r4, #0
 80228ac:	da55      	bge.n	802295a <floor+0xe2>
 80228ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80228b2:	432c      	orrs	r4, r5
 80228b4:	2500      	movs	r5, #0
 80228b6:	42ac      	cmp	r4, r5
 80228b8:	4c2b      	ldr	r4, [pc, #172]	@ (8022968 <floor+0xf0>)
 80228ba:	bf08      	it	eq
 80228bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80228c0:	4621      	mov	r1, r4
 80228c2:	4628      	mov	r0, r5
 80228c4:	e023      	b.n	802290e <floor+0x96>
 80228c6:	4f29      	ldr	r7, [pc, #164]	@ (802296c <floor+0xf4>)
 80228c8:	4137      	asrs	r7, r6
 80228ca:	ea01 0307 	and.w	r3, r1, r7
 80228ce:	4303      	orrs	r3, r0
 80228d0:	d01d      	beq.n	802290e <floor+0x96>
 80228d2:	a323      	add	r3, pc, #140	@ (adr r3, 8022960 <floor+0xe8>)
 80228d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228d8:	f7dd fcd8 	bl	800028c <__adddf3>
 80228dc:	2200      	movs	r2, #0
 80228de:	2300      	movs	r3, #0
 80228e0:	f7de f91a 	bl	8000b18 <__aeabi_dcmpgt>
 80228e4:	2800      	cmp	r0, #0
 80228e6:	d0eb      	beq.n	80228c0 <floor+0x48>
 80228e8:	2c00      	cmp	r4, #0
 80228ea:	bfbe      	ittt	lt
 80228ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80228f0:	4133      	asrlt	r3, r6
 80228f2:	18e4      	addlt	r4, r4, r3
 80228f4:	ea24 0407 	bic.w	r4, r4, r7
 80228f8:	2500      	movs	r5, #0
 80228fa:	e7e1      	b.n	80228c0 <floor+0x48>
 80228fc:	2e33      	cmp	r6, #51	@ 0x33
 80228fe:	dd0a      	ble.n	8022916 <floor+0x9e>
 8022900:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022904:	d103      	bne.n	802290e <floor+0x96>
 8022906:	4602      	mov	r2, r0
 8022908:	460b      	mov	r3, r1
 802290a:	f7dd fcbf 	bl	800028c <__adddf3>
 802290e:	ec41 0b10 	vmov	d0, r0, r1
 8022912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022916:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 802291a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802291e:	40df      	lsrs	r7, r3
 8022920:	4207      	tst	r7, r0
 8022922:	d0f4      	beq.n	802290e <floor+0x96>
 8022924:	a30e      	add	r3, pc, #56	@ (adr r3, 8022960 <floor+0xe8>)
 8022926:	e9d3 2300 	ldrd	r2, r3, [r3]
 802292a:	f7dd fcaf 	bl	800028c <__adddf3>
 802292e:	2200      	movs	r2, #0
 8022930:	2300      	movs	r3, #0
 8022932:	f7de f8f1 	bl	8000b18 <__aeabi_dcmpgt>
 8022936:	2800      	cmp	r0, #0
 8022938:	d0c2      	beq.n	80228c0 <floor+0x48>
 802293a:	2c00      	cmp	r4, #0
 802293c:	da0a      	bge.n	8022954 <floor+0xdc>
 802293e:	2e14      	cmp	r6, #20
 8022940:	d101      	bne.n	8022946 <floor+0xce>
 8022942:	3401      	adds	r4, #1
 8022944:	e006      	b.n	8022954 <floor+0xdc>
 8022946:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802294a:	2301      	movs	r3, #1
 802294c:	40b3      	lsls	r3, r6
 802294e:	441d      	add	r5, r3
 8022950:	4545      	cmp	r5, r8
 8022952:	d3f6      	bcc.n	8022942 <floor+0xca>
 8022954:	ea25 0507 	bic.w	r5, r5, r7
 8022958:	e7b2      	b.n	80228c0 <floor+0x48>
 802295a:	2500      	movs	r5, #0
 802295c:	462c      	mov	r4, r5
 802295e:	e7af      	b.n	80228c0 <floor+0x48>
 8022960:	8800759c 	.word	0x8800759c
 8022964:	7e37e43c 	.word	0x7e37e43c
 8022968:	bff00000 	.word	0xbff00000
 802296c:	000fffff 	.word	0x000fffff

08022970 <roundf>:
 8022970:	ee10 0a10 	vmov	r0, s0
 8022974:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8022978:	3a7f      	subs	r2, #127	@ 0x7f
 802297a:	2a16      	cmp	r2, #22
 802297c:	dc15      	bgt.n	80229aa <roundf+0x3a>
 802297e:	2a00      	cmp	r2, #0
 8022980:	da08      	bge.n	8022994 <roundf+0x24>
 8022982:	3201      	adds	r2, #1
 8022984:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8022988:	d101      	bne.n	802298e <roundf+0x1e>
 802298a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 802298e:	ee00 3a10 	vmov	s0, r3
 8022992:	4770      	bx	lr
 8022994:	4907      	ldr	r1, [pc, #28]	@ (80229b4 <roundf+0x44>)
 8022996:	4111      	asrs	r1, r2
 8022998:	4201      	tst	r1, r0
 802299a:	d0fa      	beq.n	8022992 <roundf+0x22>
 802299c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80229a0:	4113      	asrs	r3, r2
 80229a2:	4403      	add	r3, r0
 80229a4:	ea23 0301 	bic.w	r3, r3, r1
 80229a8:	e7f1      	b.n	802298e <roundf+0x1e>
 80229aa:	2a80      	cmp	r2, #128	@ 0x80
 80229ac:	d1f1      	bne.n	8022992 <roundf+0x22>
 80229ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80229b2:	4770      	bx	lr
 80229b4:	007fffff 	.word	0x007fffff

080229b8 <__kernel_cos>:
 80229b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229bc:	ec57 6b10 	vmov	r6, r7, d0
 80229c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80229c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80229c8:	ed8d 1b00 	vstr	d1, [sp]
 80229cc:	d206      	bcs.n	80229dc <__kernel_cos+0x24>
 80229ce:	4630      	mov	r0, r6
 80229d0:	4639      	mov	r1, r7
 80229d2:	f7de f8c1 	bl	8000b58 <__aeabi_d2iz>
 80229d6:	2800      	cmp	r0, #0
 80229d8:	f000 8088 	beq.w	8022aec <__kernel_cos+0x134>
 80229dc:	4632      	mov	r2, r6
 80229de:	463b      	mov	r3, r7
 80229e0:	4630      	mov	r0, r6
 80229e2:	4639      	mov	r1, r7
 80229e4:	f7dd fe08 	bl	80005f8 <__aeabi_dmul>
 80229e8:	4b51      	ldr	r3, [pc, #324]	@ (8022b30 <__kernel_cos+0x178>)
 80229ea:	2200      	movs	r2, #0
 80229ec:	4604      	mov	r4, r0
 80229ee:	460d      	mov	r5, r1
 80229f0:	f7dd fe02 	bl	80005f8 <__aeabi_dmul>
 80229f4:	a340      	add	r3, pc, #256	@ (adr r3, 8022af8 <__kernel_cos+0x140>)
 80229f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229fa:	4682      	mov	sl, r0
 80229fc:	468b      	mov	fp, r1
 80229fe:	4620      	mov	r0, r4
 8022a00:	4629      	mov	r1, r5
 8022a02:	f7dd fdf9 	bl	80005f8 <__aeabi_dmul>
 8022a06:	a33e      	add	r3, pc, #248	@ (adr r3, 8022b00 <__kernel_cos+0x148>)
 8022a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a0c:	f7dd fc3e 	bl	800028c <__adddf3>
 8022a10:	4622      	mov	r2, r4
 8022a12:	462b      	mov	r3, r5
 8022a14:	f7dd fdf0 	bl	80005f8 <__aeabi_dmul>
 8022a18:	a33b      	add	r3, pc, #236	@ (adr r3, 8022b08 <__kernel_cos+0x150>)
 8022a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a1e:	f7dd fc33 	bl	8000288 <__aeabi_dsub>
 8022a22:	4622      	mov	r2, r4
 8022a24:	462b      	mov	r3, r5
 8022a26:	f7dd fde7 	bl	80005f8 <__aeabi_dmul>
 8022a2a:	a339      	add	r3, pc, #228	@ (adr r3, 8022b10 <__kernel_cos+0x158>)
 8022a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a30:	f7dd fc2c 	bl	800028c <__adddf3>
 8022a34:	4622      	mov	r2, r4
 8022a36:	462b      	mov	r3, r5
 8022a38:	f7dd fdde 	bl	80005f8 <__aeabi_dmul>
 8022a3c:	a336      	add	r3, pc, #216	@ (adr r3, 8022b18 <__kernel_cos+0x160>)
 8022a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a42:	f7dd fc21 	bl	8000288 <__aeabi_dsub>
 8022a46:	4622      	mov	r2, r4
 8022a48:	462b      	mov	r3, r5
 8022a4a:	f7dd fdd5 	bl	80005f8 <__aeabi_dmul>
 8022a4e:	a334      	add	r3, pc, #208	@ (adr r3, 8022b20 <__kernel_cos+0x168>)
 8022a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a54:	f7dd fc1a 	bl	800028c <__adddf3>
 8022a58:	4622      	mov	r2, r4
 8022a5a:	462b      	mov	r3, r5
 8022a5c:	f7dd fdcc 	bl	80005f8 <__aeabi_dmul>
 8022a60:	4622      	mov	r2, r4
 8022a62:	462b      	mov	r3, r5
 8022a64:	f7dd fdc8 	bl	80005f8 <__aeabi_dmul>
 8022a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022a6c:	4604      	mov	r4, r0
 8022a6e:	460d      	mov	r5, r1
 8022a70:	4630      	mov	r0, r6
 8022a72:	4639      	mov	r1, r7
 8022a74:	f7dd fdc0 	bl	80005f8 <__aeabi_dmul>
 8022a78:	460b      	mov	r3, r1
 8022a7a:	4602      	mov	r2, r0
 8022a7c:	4629      	mov	r1, r5
 8022a7e:	4620      	mov	r0, r4
 8022a80:	f7dd fc02 	bl	8000288 <__aeabi_dsub>
 8022a84:	4b2b      	ldr	r3, [pc, #172]	@ (8022b34 <__kernel_cos+0x17c>)
 8022a86:	4598      	cmp	r8, r3
 8022a88:	4606      	mov	r6, r0
 8022a8a:	460f      	mov	r7, r1
 8022a8c:	d810      	bhi.n	8022ab0 <__kernel_cos+0xf8>
 8022a8e:	4602      	mov	r2, r0
 8022a90:	460b      	mov	r3, r1
 8022a92:	4650      	mov	r0, sl
 8022a94:	4659      	mov	r1, fp
 8022a96:	f7dd fbf7 	bl	8000288 <__aeabi_dsub>
 8022a9a:	460b      	mov	r3, r1
 8022a9c:	4926      	ldr	r1, [pc, #152]	@ (8022b38 <__kernel_cos+0x180>)
 8022a9e:	4602      	mov	r2, r0
 8022aa0:	2000      	movs	r0, #0
 8022aa2:	f7dd fbf1 	bl	8000288 <__aeabi_dsub>
 8022aa6:	ec41 0b10 	vmov	d0, r0, r1
 8022aaa:	b003      	add	sp, #12
 8022aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ab0:	4b22      	ldr	r3, [pc, #136]	@ (8022b3c <__kernel_cos+0x184>)
 8022ab2:	4921      	ldr	r1, [pc, #132]	@ (8022b38 <__kernel_cos+0x180>)
 8022ab4:	4598      	cmp	r8, r3
 8022ab6:	bf8c      	ite	hi
 8022ab8:	4d21      	ldrhi	r5, [pc, #132]	@ (8022b40 <__kernel_cos+0x188>)
 8022aba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8022abe:	2400      	movs	r4, #0
 8022ac0:	4622      	mov	r2, r4
 8022ac2:	462b      	mov	r3, r5
 8022ac4:	2000      	movs	r0, #0
 8022ac6:	f7dd fbdf 	bl	8000288 <__aeabi_dsub>
 8022aca:	4622      	mov	r2, r4
 8022acc:	4680      	mov	r8, r0
 8022ace:	4689      	mov	r9, r1
 8022ad0:	462b      	mov	r3, r5
 8022ad2:	4650      	mov	r0, sl
 8022ad4:	4659      	mov	r1, fp
 8022ad6:	f7dd fbd7 	bl	8000288 <__aeabi_dsub>
 8022ada:	4632      	mov	r2, r6
 8022adc:	463b      	mov	r3, r7
 8022ade:	f7dd fbd3 	bl	8000288 <__aeabi_dsub>
 8022ae2:	4602      	mov	r2, r0
 8022ae4:	460b      	mov	r3, r1
 8022ae6:	4640      	mov	r0, r8
 8022ae8:	4649      	mov	r1, r9
 8022aea:	e7da      	b.n	8022aa2 <__kernel_cos+0xea>
 8022aec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8022b28 <__kernel_cos+0x170>
 8022af0:	e7db      	b.n	8022aaa <__kernel_cos+0xf2>
 8022af2:	bf00      	nop
 8022af4:	f3af 8000 	nop.w
 8022af8:	be8838d4 	.word	0xbe8838d4
 8022afc:	bda8fae9 	.word	0xbda8fae9
 8022b00:	bdb4b1c4 	.word	0xbdb4b1c4
 8022b04:	3e21ee9e 	.word	0x3e21ee9e
 8022b08:	809c52ad 	.word	0x809c52ad
 8022b0c:	3e927e4f 	.word	0x3e927e4f
 8022b10:	19cb1590 	.word	0x19cb1590
 8022b14:	3efa01a0 	.word	0x3efa01a0
 8022b18:	16c15177 	.word	0x16c15177
 8022b1c:	3f56c16c 	.word	0x3f56c16c
 8022b20:	5555554c 	.word	0x5555554c
 8022b24:	3fa55555 	.word	0x3fa55555
 8022b28:	00000000 	.word	0x00000000
 8022b2c:	3ff00000 	.word	0x3ff00000
 8022b30:	3fe00000 	.word	0x3fe00000
 8022b34:	3fd33332 	.word	0x3fd33332
 8022b38:	3ff00000 	.word	0x3ff00000
 8022b3c:	3fe90000 	.word	0x3fe90000
 8022b40:	3fd20000 	.word	0x3fd20000
 8022b44:	00000000 	.word	0x00000000

08022b48 <__kernel_sin>:
 8022b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b4c:	ec55 4b10 	vmov	r4, r5, d0
 8022b50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8022b54:	b085      	sub	sp, #20
 8022b56:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8022b5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8022b5e:	4680      	mov	r8, r0
 8022b60:	d205      	bcs.n	8022b6e <__kernel_sin+0x26>
 8022b62:	4620      	mov	r0, r4
 8022b64:	4629      	mov	r1, r5
 8022b66:	f7dd fff7 	bl	8000b58 <__aeabi_d2iz>
 8022b6a:	2800      	cmp	r0, #0
 8022b6c:	d052      	beq.n	8022c14 <__kernel_sin+0xcc>
 8022b6e:	4622      	mov	r2, r4
 8022b70:	462b      	mov	r3, r5
 8022b72:	4620      	mov	r0, r4
 8022b74:	4629      	mov	r1, r5
 8022b76:	f7dd fd3f 	bl	80005f8 <__aeabi_dmul>
 8022b7a:	4682      	mov	sl, r0
 8022b7c:	468b      	mov	fp, r1
 8022b7e:	4602      	mov	r2, r0
 8022b80:	460b      	mov	r3, r1
 8022b82:	4620      	mov	r0, r4
 8022b84:	4629      	mov	r1, r5
 8022b86:	f7dd fd37 	bl	80005f8 <__aeabi_dmul>
 8022b8a:	a342      	add	r3, pc, #264	@ (adr r3, 8022c94 <__kernel_sin+0x14c>)
 8022b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b90:	e9cd 0100 	strd	r0, r1, [sp]
 8022b94:	4650      	mov	r0, sl
 8022b96:	4659      	mov	r1, fp
 8022b98:	f7dd fd2e 	bl	80005f8 <__aeabi_dmul>
 8022b9c:	a33f      	add	r3, pc, #252	@ (adr r3, 8022c9c <__kernel_sin+0x154>)
 8022b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ba2:	f7dd fb71 	bl	8000288 <__aeabi_dsub>
 8022ba6:	4652      	mov	r2, sl
 8022ba8:	465b      	mov	r3, fp
 8022baa:	f7dd fd25 	bl	80005f8 <__aeabi_dmul>
 8022bae:	a33d      	add	r3, pc, #244	@ (adr r3, 8022ca4 <__kernel_sin+0x15c>)
 8022bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bb4:	f7dd fb6a 	bl	800028c <__adddf3>
 8022bb8:	4652      	mov	r2, sl
 8022bba:	465b      	mov	r3, fp
 8022bbc:	f7dd fd1c 	bl	80005f8 <__aeabi_dmul>
 8022bc0:	a33a      	add	r3, pc, #232	@ (adr r3, 8022cac <__kernel_sin+0x164>)
 8022bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bc6:	f7dd fb5f 	bl	8000288 <__aeabi_dsub>
 8022bca:	4652      	mov	r2, sl
 8022bcc:	465b      	mov	r3, fp
 8022bce:	f7dd fd13 	bl	80005f8 <__aeabi_dmul>
 8022bd2:	a338      	add	r3, pc, #224	@ (adr r3, 8022cb4 <__kernel_sin+0x16c>)
 8022bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bd8:	f7dd fb58 	bl	800028c <__adddf3>
 8022bdc:	4606      	mov	r6, r0
 8022bde:	460f      	mov	r7, r1
 8022be0:	f1b8 0f00 	cmp.w	r8, #0
 8022be4:	d11b      	bne.n	8022c1e <__kernel_sin+0xd6>
 8022be6:	4602      	mov	r2, r0
 8022be8:	460b      	mov	r3, r1
 8022bea:	4650      	mov	r0, sl
 8022bec:	4659      	mov	r1, fp
 8022bee:	f7dd fd03 	bl	80005f8 <__aeabi_dmul>
 8022bf2:	a325      	add	r3, pc, #148	@ (adr r3, 8022c88 <__kernel_sin+0x140>)
 8022bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bf8:	f7dd fb46 	bl	8000288 <__aeabi_dsub>
 8022bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022c00:	f7dd fcfa 	bl	80005f8 <__aeabi_dmul>
 8022c04:	4602      	mov	r2, r0
 8022c06:	460b      	mov	r3, r1
 8022c08:	4620      	mov	r0, r4
 8022c0a:	4629      	mov	r1, r5
 8022c0c:	f7dd fb3e 	bl	800028c <__adddf3>
 8022c10:	4604      	mov	r4, r0
 8022c12:	460d      	mov	r5, r1
 8022c14:	ec45 4b10 	vmov	d0, r4, r5
 8022c18:	b005      	add	sp, #20
 8022c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c22:	4b1b      	ldr	r3, [pc, #108]	@ (8022c90 <__kernel_sin+0x148>)
 8022c24:	2200      	movs	r2, #0
 8022c26:	f7dd fce7 	bl	80005f8 <__aeabi_dmul>
 8022c2a:	4632      	mov	r2, r6
 8022c2c:	4680      	mov	r8, r0
 8022c2e:	4689      	mov	r9, r1
 8022c30:	463b      	mov	r3, r7
 8022c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022c36:	f7dd fcdf 	bl	80005f8 <__aeabi_dmul>
 8022c3a:	4602      	mov	r2, r0
 8022c3c:	460b      	mov	r3, r1
 8022c3e:	4640      	mov	r0, r8
 8022c40:	4649      	mov	r1, r9
 8022c42:	f7dd fb21 	bl	8000288 <__aeabi_dsub>
 8022c46:	4652      	mov	r2, sl
 8022c48:	465b      	mov	r3, fp
 8022c4a:	f7dd fcd5 	bl	80005f8 <__aeabi_dmul>
 8022c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022c52:	f7dd fb19 	bl	8000288 <__aeabi_dsub>
 8022c56:	a30c      	add	r3, pc, #48	@ (adr r3, 8022c88 <__kernel_sin+0x140>)
 8022c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c5c:	4606      	mov	r6, r0
 8022c5e:	460f      	mov	r7, r1
 8022c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022c64:	f7dd fcc8 	bl	80005f8 <__aeabi_dmul>
 8022c68:	4602      	mov	r2, r0
 8022c6a:	460b      	mov	r3, r1
 8022c6c:	4630      	mov	r0, r6
 8022c6e:	4639      	mov	r1, r7
 8022c70:	f7dd fb0c 	bl	800028c <__adddf3>
 8022c74:	4602      	mov	r2, r0
 8022c76:	460b      	mov	r3, r1
 8022c78:	4620      	mov	r0, r4
 8022c7a:	4629      	mov	r1, r5
 8022c7c:	f7dd fb04 	bl	8000288 <__aeabi_dsub>
 8022c80:	e7c6      	b.n	8022c10 <__kernel_sin+0xc8>
 8022c82:	bf00      	nop
 8022c84:	f3af 8000 	nop.w
 8022c88:	55555549 	.word	0x55555549
 8022c8c:	3fc55555 	.word	0x3fc55555
 8022c90:	3fe00000 	.word	0x3fe00000
 8022c94:	5acfd57c 	.word	0x5acfd57c
 8022c98:	3de5d93a 	.word	0x3de5d93a
 8022c9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8022ca0:	3e5ae5e6 	.word	0x3e5ae5e6
 8022ca4:	57b1fe7d 	.word	0x57b1fe7d
 8022ca8:	3ec71de3 	.word	0x3ec71de3
 8022cac:	19c161d5 	.word	0x19c161d5
 8022cb0:	3f2a01a0 	.word	0x3f2a01a0
 8022cb4:	1110f8a6 	.word	0x1110f8a6
 8022cb8:	3f811111 	.word	0x3f811111
 8022cbc:	00000000 	.word	0x00000000

08022cc0 <__kernel_tan>:
 8022cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cc4:	ec5b ab10 	vmov	sl, fp, d0
 8022cc8:	4bdb      	ldr	r3, [pc, #876]	@ (8023038 <__kernel_tan+0x378>)
 8022cca:	b089      	sub	sp, #36	@ 0x24
 8022ccc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8022cd0:	429f      	cmp	r7, r3
 8022cd2:	ec59 8b11 	vmov	r8, r9, d1
 8022cd6:	4606      	mov	r6, r0
 8022cd8:	f8cd b008 	str.w	fp, [sp, #8]
 8022cdc:	d85d      	bhi.n	8022d9a <__kernel_tan+0xda>
 8022cde:	4650      	mov	r0, sl
 8022ce0:	4659      	mov	r1, fp
 8022ce2:	f7dd ff39 	bl	8000b58 <__aeabi_d2iz>
 8022ce6:	4605      	mov	r5, r0
 8022ce8:	2800      	cmp	r0, #0
 8022cea:	d17c      	bne.n	8022de6 <__kernel_tan+0x126>
 8022cec:	1c73      	adds	r3, r6, #1
 8022cee:	4652      	mov	r2, sl
 8022cf0:	4313      	orrs	r3, r2
 8022cf2:	433b      	orrs	r3, r7
 8022cf4:	d110      	bne.n	8022d18 <__kernel_tan+0x58>
 8022cf6:	ec4b ab10 	vmov	d0, sl, fp
 8022cfa:	f7ff faa5 	bl	8022248 <fabs>
 8022cfe:	49cf      	ldr	r1, [pc, #828]	@ (802303c <__kernel_tan+0x37c>)
 8022d00:	ec53 2b10 	vmov	r2, r3, d0
 8022d04:	2000      	movs	r0, #0
 8022d06:	f7dd fda1 	bl	800084c <__aeabi_ddiv>
 8022d0a:	4682      	mov	sl, r0
 8022d0c:	468b      	mov	fp, r1
 8022d0e:	ec4b ab10 	vmov	d0, sl, fp
 8022d12:	b009      	add	sp, #36	@ 0x24
 8022d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d18:	2e01      	cmp	r6, #1
 8022d1a:	d0f8      	beq.n	8022d0e <__kernel_tan+0x4e>
 8022d1c:	4642      	mov	r2, r8
 8022d1e:	464b      	mov	r3, r9
 8022d20:	4650      	mov	r0, sl
 8022d22:	4659      	mov	r1, fp
 8022d24:	f7dd fab2 	bl	800028c <__adddf3>
 8022d28:	4602      	mov	r2, r0
 8022d2a:	460b      	mov	r3, r1
 8022d2c:	460f      	mov	r7, r1
 8022d2e:	2000      	movs	r0, #0
 8022d30:	49c3      	ldr	r1, [pc, #780]	@ (8023040 <__kernel_tan+0x380>)
 8022d32:	f7dd fd8b 	bl	800084c <__aeabi_ddiv>
 8022d36:	e9cd 0100 	strd	r0, r1, [sp]
 8022d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022d3e:	462e      	mov	r6, r5
 8022d40:	4652      	mov	r2, sl
 8022d42:	462c      	mov	r4, r5
 8022d44:	4630      	mov	r0, r6
 8022d46:	461d      	mov	r5, r3
 8022d48:	4639      	mov	r1, r7
 8022d4a:	465b      	mov	r3, fp
 8022d4c:	f7dd fa9c 	bl	8000288 <__aeabi_dsub>
 8022d50:	4602      	mov	r2, r0
 8022d52:	460b      	mov	r3, r1
 8022d54:	4640      	mov	r0, r8
 8022d56:	4649      	mov	r1, r9
 8022d58:	f7dd fa96 	bl	8000288 <__aeabi_dsub>
 8022d5c:	4632      	mov	r2, r6
 8022d5e:	462b      	mov	r3, r5
 8022d60:	f7dd fc4a 	bl	80005f8 <__aeabi_dmul>
 8022d64:	4632      	mov	r2, r6
 8022d66:	4682      	mov	sl, r0
 8022d68:	468b      	mov	fp, r1
 8022d6a:	462b      	mov	r3, r5
 8022d6c:	4630      	mov	r0, r6
 8022d6e:	4639      	mov	r1, r7
 8022d70:	f7dd fc42 	bl	80005f8 <__aeabi_dmul>
 8022d74:	4bb1      	ldr	r3, [pc, #708]	@ (802303c <__kernel_tan+0x37c>)
 8022d76:	2200      	movs	r2, #0
 8022d78:	f7dd fa88 	bl	800028c <__adddf3>
 8022d7c:	4602      	mov	r2, r0
 8022d7e:	460b      	mov	r3, r1
 8022d80:	4650      	mov	r0, sl
 8022d82:	4659      	mov	r1, fp
 8022d84:	f7dd fa82 	bl	800028c <__adddf3>
 8022d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022d8c:	f7dd fc34 	bl	80005f8 <__aeabi_dmul>
 8022d90:	4622      	mov	r2, r4
 8022d92:	462b      	mov	r3, r5
 8022d94:	f7dd fa7a 	bl	800028c <__adddf3>
 8022d98:	e7b7      	b.n	8022d0a <__kernel_tan+0x4a>
 8022d9a:	4baa      	ldr	r3, [pc, #680]	@ (8023044 <__kernel_tan+0x384>)
 8022d9c:	429f      	cmp	r7, r3
 8022d9e:	d922      	bls.n	8022de6 <__kernel_tan+0x126>
 8022da0:	9b02      	ldr	r3, [sp, #8]
 8022da2:	2b00      	cmp	r3, #0
 8022da4:	da05      	bge.n	8022db2 <__kernel_tan+0xf2>
 8022da6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8022daa:	469b      	mov	fp, r3
 8022dac:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8022db0:	4699      	mov	r9, r3
 8022db2:	4652      	mov	r2, sl
 8022db4:	465b      	mov	r3, fp
 8022db6:	a182      	add	r1, pc, #520	@ (adr r1, 8022fc0 <__kernel_tan+0x300>)
 8022db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022dbc:	f7dd fa64 	bl	8000288 <__aeabi_dsub>
 8022dc0:	4642      	mov	r2, r8
 8022dc2:	464b      	mov	r3, r9
 8022dc4:	4604      	mov	r4, r0
 8022dc6:	460d      	mov	r5, r1
 8022dc8:	a17f      	add	r1, pc, #508	@ (adr r1, 8022fc8 <__kernel_tan+0x308>)
 8022dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022dce:	f7dd fa5b 	bl	8000288 <__aeabi_dsub>
 8022dd2:	4622      	mov	r2, r4
 8022dd4:	462b      	mov	r3, r5
 8022dd6:	f7dd fa59 	bl	800028c <__adddf3>
 8022dda:	f04f 0800 	mov.w	r8, #0
 8022dde:	4682      	mov	sl, r0
 8022de0:	468b      	mov	fp, r1
 8022de2:	f04f 0900 	mov.w	r9, #0
 8022de6:	4652      	mov	r2, sl
 8022de8:	465b      	mov	r3, fp
 8022dea:	4650      	mov	r0, sl
 8022dec:	4659      	mov	r1, fp
 8022dee:	f7dd fc03 	bl	80005f8 <__aeabi_dmul>
 8022df2:	4602      	mov	r2, r0
 8022df4:	460b      	mov	r3, r1
 8022df6:	e9cd 2300 	strd	r2, r3, [sp]
 8022dfa:	f7dd fbfd 	bl	80005f8 <__aeabi_dmul>
 8022dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022e02:	4604      	mov	r4, r0
 8022e04:	460d      	mov	r5, r1
 8022e06:	4650      	mov	r0, sl
 8022e08:	4659      	mov	r1, fp
 8022e0a:	f7dd fbf5 	bl	80005f8 <__aeabi_dmul>
 8022e0e:	a370      	add	r3, pc, #448	@ (adr r3, 8022fd0 <__kernel_tan+0x310>)
 8022e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022e18:	4620      	mov	r0, r4
 8022e1a:	4629      	mov	r1, r5
 8022e1c:	f7dd fbec 	bl	80005f8 <__aeabi_dmul>
 8022e20:	a36d      	add	r3, pc, #436	@ (adr r3, 8022fd8 <__kernel_tan+0x318>)
 8022e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e26:	f7dd fa31 	bl	800028c <__adddf3>
 8022e2a:	4622      	mov	r2, r4
 8022e2c:	462b      	mov	r3, r5
 8022e2e:	f7dd fbe3 	bl	80005f8 <__aeabi_dmul>
 8022e32:	a36b      	add	r3, pc, #428	@ (adr r3, 8022fe0 <__kernel_tan+0x320>)
 8022e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e38:	f7dd fa28 	bl	800028c <__adddf3>
 8022e3c:	4622      	mov	r2, r4
 8022e3e:	462b      	mov	r3, r5
 8022e40:	f7dd fbda 	bl	80005f8 <__aeabi_dmul>
 8022e44:	a368      	add	r3, pc, #416	@ (adr r3, 8022fe8 <__kernel_tan+0x328>)
 8022e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e4a:	f7dd fa1f 	bl	800028c <__adddf3>
 8022e4e:	4622      	mov	r2, r4
 8022e50:	462b      	mov	r3, r5
 8022e52:	f7dd fbd1 	bl	80005f8 <__aeabi_dmul>
 8022e56:	a366      	add	r3, pc, #408	@ (adr r3, 8022ff0 <__kernel_tan+0x330>)
 8022e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e5c:	f7dd fa16 	bl	800028c <__adddf3>
 8022e60:	4622      	mov	r2, r4
 8022e62:	462b      	mov	r3, r5
 8022e64:	f7dd fbc8 	bl	80005f8 <__aeabi_dmul>
 8022e68:	a363      	add	r3, pc, #396	@ (adr r3, 8022ff8 <__kernel_tan+0x338>)
 8022e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e6e:	f7dd fa0d 	bl	800028c <__adddf3>
 8022e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022e76:	f7dd fbbf 	bl	80005f8 <__aeabi_dmul>
 8022e7a:	a361      	add	r3, pc, #388	@ (adr r3, 8023000 <__kernel_tan+0x340>)
 8022e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022e84:	4620      	mov	r0, r4
 8022e86:	4629      	mov	r1, r5
 8022e88:	f7dd fbb6 	bl	80005f8 <__aeabi_dmul>
 8022e8c:	a35e      	add	r3, pc, #376	@ (adr r3, 8023008 <__kernel_tan+0x348>)
 8022e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e92:	f7dd f9fb 	bl	800028c <__adddf3>
 8022e96:	4622      	mov	r2, r4
 8022e98:	462b      	mov	r3, r5
 8022e9a:	f7dd fbad 	bl	80005f8 <__aeabi_dmul>
 8022e9e:	a35c      	add	r3, pc, #368	@ (adr r3, 8023010 <__kernel_tan+0x350>)
 8022ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ea4:	f7dd f9f2 	bl	800028c <__adddf3>
 8022ea8:	4622      	mov	r2, r4
 8022eaa:	462b      	mov	r3, r5
 8022eac:	f7dd fba4 	bl	80005f8 <__aeabi_dmul>
 8022eb0:	a359      	add	r3, pc, #356	@ (adr r3, 8023018 <__kernel_tan+0x358>)
 8022eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eb6:	f7dd f9e9 	bl	800028c <__adddf3>
 8022eba:	4622      	mov	r2, r4
 8022ebc:	462b      	mov	r3, r5
 8022ebe:	f7dd fb9b 	bl	80005f8 <__aeabi_dmul>
 8022ec2:	a357      	add	r3, pc, #348	@ (adr r3, 8023020 <__kernel_tan+0x360>)
 8022ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec8:	f7dd f9e0 	bl	800028c <__adddf3>
 8022ecc:	4622      	mov	r2, r4
 8022ece:	462b      	mov	r3, r5
 8022ed0:	f7dd fb92 	bl	80005f8 <__aeabi_dmul>
 8022ed4:	a354      	add	r3, pc, #336	@ (adr r3, 8023028 <__kernel_tan+0x368>)
 8022ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eda:	f7dd f9d7 	bl	800028c <__adddf3>
 8022ede:	4602      	mov	r2, r0
 8022ee0:	460b      	mov	r3, r1
 8022ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ee6:	f7dd f9d1 	bl	800028c <__adddf3>
 8022eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022eee:	f7dd fb83 	bl	80005f8 <__aeabi_dmul>
 8022ef2:	4642      	mov	r2, r8
 8022ef4:	464b      	mov	r3, r9
 8022ef6:	f7dd f9c9 	bl	800028c <__adddf3>
 8022efa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022efe:	f7dd fb7b 	bl	80005f8 <__aeabi_dmul>
 8022f02:	4642      	mov	r2, r8
 8022f04:	464b      	mov	r3, r9
 8022f06:	f7dd f9c1 	bl	800028c <__adddf3>
 8022f0a:	a349      	add	r3, pc, #292	@ (adr r3, 8023030 <__kernel_tan+0x370>)
 8022f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f10:	4604      	mov	r4, r0
 8022f12:	460d      	mov	r5, r1
 8022f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022f18:	f7dd fb6e 	bl	80005f8 <__aeabi_dmul>
 8022f1c:	4622      	mov	r2, r4
 8022f1e:	462b      	mov	r3, r5
 8022f20:	f7dd f9b4 	bl	800028c <__adddf3>
 8022f24:	e9cd 0100 	strd	r0, r1, [sp]
 8022f28:	460b      	mov	r3, r1
 8022f2a:	4602      	mov	r2, r0
 8022f2c:	4659      	mov	r1, fp
 8022f2e:	4650      	mov	r0, sl
 8022f30:	f7dd f9ac 	bl	800028c <__adddf3>
 8022f34:	4b43      	ldr	r3, [pc, #268]	@ (8023044 <__kernel_tan+0x384>)
 8022f36:	429f      	cmp	r7, r3
 8022f38:	4604      	mov	r4, r0
 8022f3a:	460d      	mov	r5, r1
 8022f3c:	f240 8084 	bls.w	8023048 <__kernel_tan+0x388>
 8022f40:	4630      	mov	r0, r6
 8022f42:	f7dd faef 	bl	8000524 <__aeabi_i2d>
 8022f46:	4622      	mov	r2, r4
 8022f48:	4680      	mov	r8, r0
 8022f4a:	4689      	mov	r9, r1
 8022f4c:	462b      	mov	r3, r5
 8022f4e:	4620      	mov	r0, r4
 8022f50:	4629      	mov	r1, r5
 8022f52:	f7dd fb51 	bl	80005f8 <__aeabi_dmul>
 8022f56:	4642      	mov	r2, r8
 8022f58:	4606      	mov	r6, r0
 8022f5a:	460f      	mov	r7, r1
 8022f5c:	464b      	mov	r3, r9
 8022f5e:	4620      	mov	r0, r4
 8022f60:	4629      	mov	r1, r5
 8022f62:	f7dd f993 	bl	800028c <__adddf3>
 8022f66:	4602      	mov	r2, r0
 8022f68:	460b      	mov	r3, r1
 8022f6a:	4630      	mov	r0, r6
 8022f6c:	4639      	mov	r1, r7
 8022f6e:	f7dd fc6d 	bl	800084c <__aeabi_ddiv>
 8022f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022f76:	f7dd f987 	bl	8000288 <__aeabi_dsub>
 8022f7a:	4602      	mov	r2, r0
 8022f7c:	460b      	mov	r3, r1
 8022f7e:	4650      	mov	r0, sl
 8022f80:	4659      	mov	r1, fp
 8022f82:	f7dd f981 	bl	8000288 <__aeabi_dsub>
 8022f86:	4602      	mov	r2, r0
 8022f88:	460b      	mov	r3, r1
 8022f8a:	f7dd f97f 	bl	800028c <__adddf3>
 8022f8e:	4602      	mov	r2, r0
 8022f90:	460b      	mov	r3, r1
 8022f92:	4640      	mov	r0, r8
 8022f94:	4649      	mov	r1, r9
 8022f96:	f7dd f977 	bl	8000288 <__aeabi_dsub>
 8022f9a:	9b02      	ldr	r3, [sp, #8]
 8022f9c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8022fa0:	f00a 0a02 	and.w	sl, sl, #2
 8022fa4:	4604      	mov	r4, r0
 8022fa6:	f1ca 0001 	rsb	r0, sl, #1
 8022faa:	460d      	mov	r5, r1
 8022fac:	f7dd faba 	bl	8000524 <__aeabi_i2d>
 8022fb0:	4602      	mov	r2, r0
 8022fb2:	460b      	mov	r3, r1
 8022fb4:	4620      	mov	r0, r4
 8022fb6:	4629      	mov	r1, r5
 8022fb8:	f7dd fb1e 	bl	80005f8 <__aeabi_dmul>
 8022fbc:	e6a5      	b.n	8022d0a <__kernel_tan+0x4a>
 8022fbe:	bf00      	nop
 8022fc0:	54442d18 	.word	0x54442d18
 8022fc4:	3fe921fb 	.word	0x3fe921fb
 8022fc8:	33145c07 	.word	0x33145c07
 8022fcc:	3c81a626 	.word	0x3c81a626
 8022fd0:	74bf7ad4 	.word	0x74bf7ad4
 8022fd4:	3efb2a70 	.word	0x3efb2a70
 8022fd8:	32f0a7e9 	.word	0x32f0a7e9
 8022fdc:	3f12b80f 	.word	0x3f12b80f
 8022fe0:	1a8d1068 	.word	0x1a8d1068
 8022fe4:	3f3026f7 	.word	0x3f3026f7
 8022fe8:	fee08315 	.word	0xfee08315
 8022fec:	3f57dbc8 	.word	0x3f57dbc8
 8022ff0:	e96e8493 	.word	0xe96e8493
 8022ff4:	3f8226e3 	.word	0x3f8226e3
 8022ff8:	1bb341fe 	.word	0x1bb341fe
 8022ffc:	3faba1ba 	.word	0x3faba1ba
 8023000:	db605373 	.word	0xdb605373
 8023004:	bef375cb 	.word	0xbef375cb
 8023008:	a03792a6 	.word	0xa03792a6
 802300c:	3f147e88 	.word	0x3f147e88
 8023010:	f2f26501 	.word	0xf2f26501
 8023014:	3f4344d8 	.word	0x3f4344d8
 8023018:	c9560328 	.word	0xc9560328
 802301c:	3f6d6d22 	.word	0x3f6d6d22
 8023020:	8406d637 	.word	0x8406d637
 8023024:	3f9664f4 	.word	0x3f9664f4
 8023028:	1110fe7a 	.word	0x1110fe7a
 802302c:	3fc11111 	.word	0x3fc11111
 8023030:	55555563 	.word	0x55555563
 8023034:	3fd55555 	.word	0x3fd55555
 8023038:	3e2fffff 	.word	0x3e2fffff
 802303c:	3ff00000 	.word	0x3ff00000
 8023040:	bff00000 	.word	0xbff00000
 8023044:	3fe59427 	.word	0x3fe59427
 8023048:	2e01      	cmp	r6, #1
 802304a:	d033      	beq.n	80230b4 <__kernel_tan+0x3f4>
 802304c:	f04f 0800 	mov.w	r8, #0
 8023050:	4689      	mov	r9, r1
 8023052:	4602      	mov	r2, r0
 8023054:	460b      	mov	r3, r1
 8023056:	2000      	movs	r0, #0
 8023058:	4918      	ldr	r1, [pc, #96]	@ (80230bc <__kernel_tan+0x3fc>)
 802305a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802305e:	f7dd fbf5 	bl	800084c <__aeabi_ddiv>
 8023062:	4652      	mov	r2, sl
 8023064:	460f      	mov	r7, r1
 8023066:	465b      	mov	r3, fp
 8023068:	4606      	mov	r6, r0
 802306a:	460d      	mov	r5, r1
 802306c:	4640      	mov	r0, r8
 802306e:	4649      	mov	r1, r9
 8023070:	f7dd f90a 	bl	8000288 <__aeabi_dsub>
 8023074:	4602      	mov	r2, r0
 8023076:	460b      	mov	r3, r1
 8023078:	e9dd 0100 	ldrd	r0, r1, [sp]
 802307c:	f7dd f904 	bl	8000288 <__aeabi_dsub>
 8023080:	4642      	mov	r2, r8
 8023082:	463b      	mov	r3, r7
 8023084:	f7dd fab8 	bl	80005f8 <__aeabi_dmul>
 8023088:	4642      	mov	r2, r8
 802308a:	4682      	mov	sl, r0
 802308c:	468b      	mov	fp, r1
 802308e:	463b      	mov	r3, r7
 8023090:	4640      	mov	r0, r8
 8023092:	4649      	mov	r1, r9
 8023094:	f7dd fab0 	bl	80005f8 <__aeabi_dmul>
 8023098:	4b09      	ldr	r3, [pc, #36]	@ (80230c0 <__kernel_tan+0x400>)
 802309a:	2200      	movs	r2, #0
 802309c:	f7dd f8f6 	bl	800028c <__adddf3>
 80230a0:	4602      	mov	r2, r0
 80230a2:	460b      	mov	r3, r1
 80230a4:	4650      	mov	r0, sl
 80230a6:	4659      	mov	r1, fp
 80230a8:	f7dd f8f0 	bl	800028c <__adddf3>
 80230ac:	4644      	mov	r4, r8
 80230ae:	4632      	mov	r2, r6
 80230b0:	463b      	mov	r3, r7
 80230b2:	e66b      	b.n	8022d8c <__kernel_tan+0xcc>
 80230b4:	4682      	mov	sl, r0
 80230b6:	468b      	mov	fp, r1
 80230b8:	e629      	b.n	8022d0e <__kernel_tan+0x4e>
 80230ba:	bf00      	nop
 80230bc:	bff00000 	.word	0xbff00000
 80230c0:	3ff00000 	.word	0x3ff00000
 80230c4:	00000000 	.word	0x00000000

080230c8 <__ieee754_acos>:
 80230c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230cc:	ec55 4b10 	vmov	r4, r5, d0
 80230d0:	49b7      	ldr	r1, [pc, #732]	@ (80233b0 <__ieee754_acos+0x2e8>)
 80230d2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80230d6:	428b      	cmp	r3, r1
 80230d8:	d919      	bls.n	802310e <__ieee754_acos+0x46>
 80230da:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80230de:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80230e2:	4323      	orrs	r3, r4
 80230e4:	d106      	bne.n	80230f4 <__ieee754_acos+0x2c>
 80230e6:	2d00      	cmp	r5, #0
 80230e8:	f340 8210 	ble.w	802350c <__ieee754_acos+0x444>
 80230ec:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8023340 <__ieee754_acos+0x278>
 80230f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230f4:	4622      	mov	r2, r4
 80230f6:	462b      	mov	r3, r5
 80230f8:	4620      	mov	r0, r4
 80230fa:	4629      	mov	r1, r5
 80230fc:	f7dd f8c4 	bl	8000288 <__aeabi_dsub>
 8023100:	4602      	mov	r2, r0
 8023102:	460b      	mov	r3, r1
 8023104:	f7dd fba2 	bl	800084c <__aeabi_ddiv>
 8023108:	ec41 0b10 	vmov	d0, r0, r1
 802310c:	e7f0      	b.n	80230f0 <__ieee754_acos+0x28>
 802310e:	49a9      	ldr	r1, [pc, #676]	@ (80233b4 <__ieee754_acos+0x2ec>)
 8023110:	428b      	cmp	r3, r1
 8023112:	f200 8085 	bhi.w	8023220 <__ieee754_acos+0x158>
 8023116:	4aa8      	ldr	r2, [pc, #672]	@ (80233b8 <__ieee754_acos+0x2f0>)
 8023118:	4293      	cmp	r3, r2
 802311a:	f240 81fa 	bls.w	8023512 <__ieee754_acos+0x44a>
 802311e:	4622      	mov	r2, r4
 8023120:	462b      	mov	r3, r5
 8023122:	4620      	mov	r0, r4
 8023124:	4629      	mov	r1, r5
 8023126:	f7dd fa67 	bl	80005f8 <__aeabi_dmul>
 802312a:	a387      	add	r3, pc, #540	@ (adr r3, 8023348 <__ieee754_acos+0x280>)
 802312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023130:	4606      	mov	r6, r0
 8023132:	460f      	mov	r7, r1
 8023134:	f7dd fa60 	bl	80005f8 <__aeabi_dmul>
 8023138:	a385      	add	r3, pc, #532	@ (adr r3, 8023350 <__ieee754_acos+0x288>)
 802313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802313e:	f7dd f8a5 	bl	800028c <__adddf3>
 8023142:	4632      	mov	r2, r6
 8023144:	463b      	mov	r3, r7
 8023146:	f7dd fa57 	bl	80005f8 <__aeabi_dmul>
 802314a:	a383      	add	r3, pc, #524	@ (adr r3, 8023358 <__ieee754_acos+0x290>)
 802314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023150:	f7dd f89a 	bl	8000288 <__aeabi_dsub>
 8023154:	4632      	mov	r2, r6
 8023156:	463b      	mov	r3, r7
 8023158:	f7dd fa4e 	bl	80005f8 <__aeabi_dmul>
 802315c:	a380      	add	r3, pc, #512	@ (adr r3, 8023360 <__ieee754_acos+0x298>)
 802315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023162:	f7dd f893 	bl	800028c <__adddf3>
 8023166:	4632      	mov	r2, r6
 8023168:	463b      	mov	r3, r7
 802316a:	f7dd fa45 	bl	80005f8 <__aeabi_dmul>
 802316e:	a37e      	add	r3, pc, #504	@ (adr r3, 8023368 <__ieee754_acos+0x2a0>)
 8023170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023174:	f7dd f888 	bl	8000288 <__aeabi_dsub>
 8023178:	4632      	mov	r2, r6
 802317a:	463b      	mov	r3, r7
 802317c:	f7dd fa3c 	bl	80005f8 <__aeabi_dmul>
 8023180:	a37b      	add	r3, pc, #492	@ (adr r3, 8023370 <__ieee754_acos+0x2a8>)
 8023182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023186:	f7dd f881 	bl	800028c <__adddf3>
 802318a:	4632      	mov	r2, r6
 802318c:	463b      	mov	r3, r7
 802318e:	f7dd fa33 	bl	80005f8 <__aeabi_dmul>
 8023192:	a379      	add	r3, pc, #484	@ (adr r3, 8023378 <__ieee754_acos+0x2b0>)
 8023194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023198:	4680      	mov	r8, r0
 802319a:	4689      	mov	r9, r1
 802319c:	4630      	mov	r0, r6
 802319e:	4639      	mov	r1, r7
 80231a0:	f7dd fa2a 	bl	80005f8 <__aeabi_dmul>
 80231a4:	a376      	add	r3, pc, #472	@ (adr r3, 8023380 <__ieee754_acos+0x2b8>)
 80231a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231aa:	f7dd f86d 	bl	8000288 <__aeabi_dsub>
 80231ae:	4632      	mov	r2, r6
 80231b0:	463b      	mov	r3, r7
 80231b2:	f7dd fa21 	bl	80005f8 <__aeabi_dmul>
 80231b6:	a374      	add	r3, pc, #464	@ (adr r3, 8023388 <__ieee754_acos+0x2c0>)
 80231b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231bc:	f7dd f866 	bl	800028c <__adddf3>
 80231c0:	4632      	mov	r2, r6
 80231c2:	463b      	mov	r3, r7
 80231c4:	f7dd fa18 	bl	80005f8 <__aeabi_dmul>
 80231c8:	a371      	add	r3, pc, #452	@ (adr r3, 8023390 <__ieee754_acos+0x2c8>)
 80231ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ce:	f7dd f85b 	bl	8000288 <__aeabi_dsub>
 80231d2:	4632      	mov	r2, r6
 80231d4:	463b      	mov	r3, r7
 80231d6:	f7dd fa0f 	bl	80005f8 <__aeabi_dmul>
 80231da:	4b78      	ldr	r3, [pc, #480]	@ (80233bc <__ieee754_acos+0x2f4>)
 80231dc:	2200      	movs	r2, #0
 80231de:	f7dd f855 	bl	800028c <__adddf3>
 80231e2:	4602      	mov	r2, r0
 80231e4:	460b      	mov	r3, r1
 80231e6:	4640      	mov	r0, r8
 80231e8:	4649      	mov	r1, r9
 80231ea:	f7dd fb2f 	bl	800084c <__aeabi_ddiv>
 80231ee:	4622      	mov	r2, r4
 80231f0:	462b      	mov	r3, r5
 80231f2:	f7dd fa01 	bl	80005f8 <__aeabi_dmul>
 80231f6:	4602      	mov	r2, r0
 80231f8:	460b      	mov	r3, r1
 80231fa:	a167      	add	r1, pc, #412	@ (adr r1, 8023398 <__ieee754_acos+0x2d0>)
 80231fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023200:	f7dd f842 	bl	8000288 <__aeabi_dsub>
 8023204:	4602      	mov	r2, r0
 8023206:	460b      	mov	r3, r1
 8023208:	4620      	mov	r0, r4
 802320a:	4629      	mov	r1, r5
 802320c:	f7dd f83c 	bl	8000288 <__aeabi_dsub>
 8023210:	4602      	mov	r2, r0
 8023212:	460b      	mov	r3, r1
 8023214:	a162      	add	r1, pc, #392	@ (adr r1, 80233a0 <__ieee754_acos+0x2d8>)
 8023216:	e9d1 0100 	ldrd	r0, r1, [r1]
 802321a:	f7dd f835 	bl	8000288 <__aeabi_dsub>
 802321e:	e773      	b.n	8023108 <__ieee754_acos+0x40>
 8023220:	2d00      	cmp	r5, #0
 8023222:	f280 80cf 	bge.w	80233c4 <__ieee754_acos+0x2fc>
 8023226:	4b65      	ldr	r3, [pc, #404]	@ (80233bc <__ieee754_acos+0x2f4>)
 8023228:	2200      	movs	r2, #0
 802322a:	4620      	mov	r0, r4
 802322c:	4629      	mov	r1, r5
 802322e:	f7dd f82d 	bl	800028c <__adddf3>
 8023232:	4b63      	ldr	r3, [pc, #396]	@ (80233c0 <__ieee754_acos+0x2f8>)
 8023234:	2200      	movs	r2, #0
 8023236:	f7dd f9df 	bl	80005f8 <__aeabi_dmul>
 802323a:	a343      	add	r3, pc, #268	@ (adr r3, 8023348 <__ieee754_acos+0x280>)
 802323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023240:	4604      	mov	r4, r0
 8023242:	460d      	mov	r5, r1
 8023244:	f7dd f9d8 	bl	80005f8 <__aeabi_dmul>
 8023248:	a341      	add	r3, pc, #260	@ (adr r3, 8023350 <__ieee754_acos+0x288>)
 802324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802324e:	f7dd f81d 	bl	800028c <__adddf3>
 8023252:	4622      	mov	r2, r4
 8023254:	462b      	mov	r3, r5
 8023256:	f7dd f9cf 	bl	80005f8 <__aeabi_dmul>
 802325a:	a33f      	add	r3, pc, #252	@ (adr r3, 8023358 <__ieee754_acos+0x290>)
 802325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023260:	f7dd f812 	bl	8000288 <__aeabi_dsub>
 8023264:	4622      	mov	r2, r4
 8023266:	462b      	mov	r3, r5
 8023268:	f7dd f9c6 	bl	80005f8 <__aeabi_dmul>
 802326c:	a33c      	add	r3, pc, #240	@ (adr r3, 8023360 <__ieee754_acos+0x298>)
 802326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023272:	f7dd f80b 	bl	800028c <__adddf3>
 8023276:	4622      	mov	r2, r4
 8023278:	462b      	mov	r3, r5
 802327a:	f7dd f9bd 	bl	80005f8 <__aeabi_dmul>
 802327e:	a33a      	add	r3, pc, #232	@ (adr r3, 8023368 <__ieee754_acos+0x2a0>)
 8023280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023284:	f7dd f800 	bl	8000288 <__aeabi_dsub>
 8023288:	4622      	mov	r2, r4
 802328a:	462b      	mov	r3, r5
 802328c:	f7dd f9b4 	bl	80005f8 <__aeabi_dmul>
 8023290:	a337      	add	r3, pc, #220	@ (adr r3, 8023370 <__ieee754_acos+0x2a8>)
 8023292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023296:	f7dc fff9 	bl	800028c <__adddf3>
 802329a:	4622      	mov	r2, r4
 802329c:	462b      	mov	r3, r5
 802329e:	f7dd f9ab 	bl	80005f8 <__aeabi_dmul>
 80232a2:	a335      	add	r3, pc, #212	@ (adr r3, 8023378 <__ieee754_acos+0x2b0>)
 80232a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232a8:	4606      	mov	r6, r0
 80232aa:	460f      	mov	r7, r1
 80232ac:	4620      	mov	r0, r4
 80232ae:	4629      	mov	r1, r5
 80232b0:	f7dd f9a2 	bl	80005f8 <__aeabi_dmul>
 80232b4:	a332      	add	r3, pc, #200	@ (adr r3, 8023380 <__ieee754_acos+0x2b8>)
 80232b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ba:	f7dc ffe5 	bl	8000288 <__aeabi_dsub>
 80232be:	4622      	mov	r2, r4
 80232c0:	462b      	mov	r3, r5
 80232c2:	f7dd f999 	bl	80005f8 <__aeabi_dmul>
 80232c6:	a330      	add	r3, pc, #192	@ (adr r3, 8023388 <__ieee754_acos+0x2c0>)
 80232c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232cc:	f7dc ffde 	bl	800028c <__adddf3>
 80232d0:	4622      	mov	r2, r4
 80232d2:	462b      	mov	r3, r5
 80232d4:	f7dd f990 	bl	80005f8 <__aeabi_dmul>
 80232d8:	a32d      	add	r3, pc, #180	@ (adr r3, 8023390 <__ieee754_acos+0x2c8>)
 80232da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232de:	f7dc ffd3 	bl	8000288 <__aeabi_dsub>
 80232e2:	4622      	mov	r2, r4
 80232e4:	462b      	mov	r3, r5
 80232e6:	f7dd f987 	bl	80005f8 <__aeabi_dmul>
 80232ea:	4b34      	ldr	r3, [pc, #208]	@ (80233bc <__ieee754_acos+0x2f4>)
 80232ec:	2200      	movs	r2, #0
 80232ee:	f7dc ffcd 	bl	800028c <__adddf3>
 80232f2:	ec45 4b10 	vmov	d0, r4, r5
 80232f6:	4680      	mov	r8, r0
 80232f8:	4689      	mov	r9, r1
 80232fa:	f7ff f967 	bl	80225cc <__ieee754_sqrt>
 80232fe:	ec55 4b10 	vmov	r4, r5, d0
 8023302:	4642      	mov	r2, r8
 8023304:	464b      	mov	r3, r9
 8023306:	4630      	mov	r0, r6
 8023308:	4639      	mov	r1, r7
 802330a:	f7dd fa9f 	bl	800084c <__aeabi_ddiv>
 802330e:	4622      	mov	r2, r4
 8023310:	462b      	mov	r3, r5
 8023312:	f7dd f971 	bl	80005f8 <__aeabi_dmul>
 8023316:	a320      	add	r3, pc, #128	@ (adr r3, 8023398 <__ieee754_acos+0x2d0>)
 8023318:	e9d3 2300 	ldrd	r2, r3, [r3]
 802331c:	f7dc ffb4 	bl	8000288 <__aeabi_dsub>
 8023320:	4622      	mov	r2, r4
 8023322:	462b      	mov	r3, r5
 8023324:	f7dc ffb2 	bl	800028c <__adddf3>
 8023328:	4602      	mov	r2, r0
 802332a:	460b      	mov	r3, r1
 802332c:	f7dc ffae 	bl	800028c <__adddf3>
 8023330:	4602      	mov	r2, r0
 8023332:	460b      	mov	r3, r1
 8023334:	a11c      	add	r1, pc, #112	@ (adr r1, 80233a8 <__ieee754_acos+0x2e0>)
 8023336:	e9d1 0100 	ldrd	r0, r1, [r1]
 802333a:	e76e      	b.n	802321a <__ieee754_acos+0x152>
 802333c:	f3af 8000 	nop.w
	...
 8023348:	0dfdf709 	.word	0x0dfdf709
 802334c:	3f023de1 	.word	0x3f023de1
 8023350:	7501b288 	.word	0x7501b288
 8023354:	3f49efe0 	.word	0x3f49efe0
 8023358:	b5688f3b 	.word	0xb5688f3b
 802335c:	3fa48228 	.word	0x3fa48228
 8023360:	0e884455 	.word	0x0e884455
 8023364:	3fc9c155 	.word	0x3fc9c155
 8023368:	03eb6f7d 	.word	0x03eb6f7d
 802336c:	3fd4d612 	.word	0x3fd4d612
 8023370:	55555555 	.word	0x55555555
 8023374:	3fc55555 	.word	0x3fc55555
 8023378:	b12e9282 	.word	0xb12e9282
 802337c:	3fb3b8c5 	.word	0x3fb3b8c5
 8023380:	1b8d0159 	.word	0x1b8d0159
 8023384:	3fe6066c 	.word	0x3fe6066c
 8023388:	9c598ac8 	.word	0x9c598ac8
 802338c:	40002ae5 	.word	0x40002ae5
 8023390:	1c8a2d4b 	.word	0x1c8a2d4b
 8023394:	40033a27 	.word	0x40033a27
 8023398:	33145c07 	.word	0x33145c07
 802339c:	3c91a626 	.word	0x3c91a626
 80233a0:	54442d18 	.word	0x54442d18
 80233a4:	3ff921fb 	.word	0x3ff921fb
 80233a8:	54442d18 	.word	0x54442d18
 80233ac:	400921fb 	.word	0x400921fb
 80233b0:	3fefffff 	.word	0x3fefffff
 80233b4:	3fdfffff 	.word	0x3fdfffff
 80233b8:	3c600000 	.word	0x3c600000
 80233bc:	3ff00000 	.word	0x3ff00000
 80233c0:	3fe00000 	.word	0x3fe00000
 80233c4:	4622      	mov	r2, r4
 80233c6:	462b      	mov	r3, r5
 80233c8:	496b      	ldr	r1, [pc, #428]	@ (8023578 <__ieee754_acos+0x4b0>)
 80233ca:	2000      	movs	r0, #0
 80233cc:	f7dc ff5c 	bl	8000288 <__aeabi_dsub>
 80233d0:	4b6a      	ldr	r3, [pc, #424]	@ (802357c <__ieee754_acos+0x4b4>)
 80233d2:	2200      	movs	r2, #0
 80233d4:	f7dd f910 	bl	80005f8 <__aeabi_dmul>
 80233d8:	4604      	mov	r4, r0
 80233da:	460d      	mov	r5, r1
 80233dc:	ec45 4b10 	vmov	d0, r4, r5
 80233e0:	f7ff f8f4 	bl	80225cc <__ieee754_sqrt>
 80233e4:	a34c      	add	r3, pc, #304	@ (adr r3, 8023518 <__ieee754_acos+0x450>)
 80233e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ea:	4620      	mov	r0, r4
 80233ec:	4629      	mov	r1, r5
 80233ee:	ec59 8b10 	vmov	r8, r9, d0
 80233f2:	f7dd f901 	bl	80005f8 <__aeabi_dmul>
 80233f6:	a34a      	add	r3, pc, #296	@ (adr r3, 8023520 <__ieee754_acos+0x458>)
 80233f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233fc:	f7dc ff46 	bl	800028c <__adddf3>
 8023400:	4622      	mov	r2, r4
 8023402:	462b      	mov	r3, r5
 8023404:	f7dd f8f8 	bl	80005f8 <__aeabi_dmul>
 8023408:	a347      	add	r3, pc, #284	@ (adr r3, 8023528 <__ieee754_acos+0x460>)
 802340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802340e:	f7dc ff3b 	bl	8000288 <__aeabi_dsub>
 8023412:	4622      	mov	r2, r4
 8023414:	462b      	mov	r3, r5
 8023416:	f7dd f8ef 	bl	80005f8 <__aeabi_dmul>
 802341a:	a345      	add	r3, pc, #276	@ (adr r3, 8023530 <__ieee754_acos+0x468>)
 802341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023420:	f7dc ff34 	bl	800028c <__adddf3>
 8023424:	4622      	mov	r2, r4
 8023426:	462b      	mov	r3, r5
 8023428:	f7dd f8e6 	bl	80005f8 <__aeabi_dmul>
 802342c:	a342      	add	r3, pc, #264	@ (adr r3, 8023538 <__ieee754_acos+0x470>)
 802342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023432:	f7dc ff29 	bl	8000288 <__aeabi_dsub>
 8023436:	4622      	mov	r2, r4
 8023438:	462b      	mov	r3, r5
 802343a:	f7dd f8dd 	bl	80005f8 <__aeabi_dmul>
 802343e:	a340      	add	r3, pc, #256	@ (adr r3, 8023540 <__ieee754_acos+0x478>)
 8023440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023444:	f7dc ff22 	bl	800028c <__adddf3>
 8023448:	4622      	mov	r2, r4
 802344a:	462b      	mov	r3, r5
 802344c:	f7dd f8d4 	bl	80005f8 <__aeabi_dmul>
 8023450:	a33d      	add	r3, pc, #244	@ (adr r3, 8023548 <__ieee754_acos+0x480>)
 8023452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023456:	4682      	mov	sl, r0
 8023458:	468b      	mov	fp, r1
 802345a:	4620      	mov	r0, r4
 802345c:	4629      	mov	r1, r5
 802345e:	f7dd f8cb 	bl	80005f8 <__aeabi_dmul>
 8023462:	a33b      	add	r3, pc, #236	@ (adr r3, 8023550 <__ieee754_acos+0x488>)
 8023464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023468:	f7dc ff0e 	bl	8000288 <__aeabi_dsub>
 802346c:	4622      	mov	r2, r4
 802346e:	462b      	mov	r3, r5
 8023470:	f7dd f8c2 	bl	80005f8 <__aeabi_dmul>
 8023474:	a338      	add	r3, pc, #224	@ (adr r3, 8023558 <__ieee754_acos+0x490>)
 8023476:	e9d3 2300 	ldrd	r2, r3, [r3]
 802347a:	f7dc ff07 	bl	800028c <__adddf3>
 802347e:	4622      	mov	r2, r4
 8023480:	462b      	mov	r3, r5
 8023482:	f7dd f8b9 	bl	80005f8 <__aeabi_dmul>
 8023486:	a336      	add	r3, pc, #216	@ (adr r3, 8023560 <__ieee754_acos+0x498>)
 8023488:	e9d3 2300 	ldrd	r2, r3, [r3]
 802348c:	f7dc fefc 	bl	8000288 <__aeabi_dsub>
 8023490:	4622      	mov	r2, r4
 8023492:	462b      	mov	r3, r5
 8023494:	f7dd f8b0 	bl	80005f8 <__aeabi_dmul>
 8023498:	4b37      	ldr	r3, [pc, #220]	@ (8023578 <__ieee754_acos+0x4b0>)
 802349a:	2200      	movs	r2, #0
 802349c:	f7dc fef6 	bl	800028c <__adddf3>
 80234a0:	4602      	mov	r2, r0
 80234a2:	460b      	mov	r3, r1
 80234a4:	4650      	mov	r0, sl
 80234a6:	4659      	mov	r1, fp
 80234a8:	f7dd f9d0 	bl	800084c <__aeabi_ddiv>
 80234ac:	4642      	mov	r2, r8
 80234ae:	464b      	mov	r3, r9
 80234b0:	f7dd f8a2 	bl	80005f8 <__aeabi_dmul>
 80234b4:	2600      	movs	r6, #0
 80234b6:	4682      	mov	sl, r0
 80234b8:	468b      	mov	fp, r1
 80234ba:	4632      	mov	r2, r6
 80234bc:	464b      	mov	r3, r9
 80234be:	4630      	mov	r0, r6
 80234c0:	4649      	mov	r1, r9
 80234c2:	f7dd f899 	bl	80005f8 <__aeabi_dmul>
 80234c6:	4602      	mov	r2, r0
 80234c8:	460b      	mov	r3, r1
 80234ca:	4620      	mov	r0, r4
 80234cc:	4629      	mov	r1, r5
 80234ce:	f7dc fedb 	bl	8000288 <__aeabi_dsub>
 80234d2:	4632      	mov	r2, r6
 80234d4:	4604      	mov	r4, r0
 80234d6:	460d      	mov	r5, r1
 80234d8:	464b      	mov	r3, r9
 80234da:	4640      	mov	r0, r8
 80234dc:	4649      	mov	r1, r9
 80234de:	f7dc fed5 	bl	800028c <__adddf3>
 80234e2:	4602      	mov	r2, r0
 80234e4:	460b      	mov	r3, r1
 80234e6:	4620      	mov	r0, r4
 80234e8:	4629      	mov	r1, r5
 80234ea:	f7dd f9af 	bl	800084c <__aeabi_ddiv>
 80234ee:	4602      	mov	r2, r0
 80234f0:	460b      	mov	r3, r1
 80234f2:	4650      	mov	r0, sl
 80234f4:	4659      	mov	r1, fp
 80234f6:	f7dc fec9 	bl	800028c <__adddf3>
 80234fa:	4632      	mov	r2, r6
 80234fc:	464b      	mov	r3, r9
 80234fe:	f7dc fec5 	bl	800028c <__adddf3>
 8023502:	4602      	mov	r2, r0
 8023504:	460b      	mov	r3, r1
 8023506:	f7dc fec1 	bl	800028c <__adddf3>
 802350a:	e5fd      	b.n	8023108 <__ieee754_acos+0x40>
 802350c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8023568 <__ieee754_acos+0x4a0>
 8023510:	e5ee      	b.n	80230f0 <__ieee754_acos+0x28>
 8023512:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8023570 <__ieee754_acos+0x4a8>
 8023516:	e5eb      	b.n	80230f0 <__ieee754_acos+0x28>
 8023518:	0dfdf709 	.word	0x0dfdf709
 802351c:	3f023de1 	.word	0x3f023de1
 8023520:	7501b288 	.word	0x7501b288
 8023524:	3f49efe0 	.word	0x3f49efe0
 8023528:	b5688f3b 	.word	0xb5688f3b
 802352c:	3fa48228 	.word	0x3fa48228
 8023530:	0e884455 	.word	0x0e884455
 8023534:	3fc9c155 	.word	0x3fc9c155
 8023538:	03eb6f7d 	.word	0x03eb6f7d
 802353c:	3fd4d612 	.word	0x3fd4d612
 8023540:	55555555 	.word	0x55555555
 8023544:	3fc55555 	.word	0x3fc55555
 8023548:	b12e9282 	.word	0xb12e9282
 802354c:	3fb3b8c5 	.word	0x3fb3b8c5
 8023550:	1b8d0159 	.word	0x1b8d0159
 8023554:	3fe6066c 	.word	0x3fe6066c
 8023558:	9c598ac8 	.word	0x9c598ac8
 802355c:	40002ae5 	.word	0x40002ae5
 8023560:	1c8a2d4b 	.word	0x1c8a2d4b
 8023564:	40033a27 	.word	0x40033a27
 8023568:	54442d18 	.word	0x54442d18
 802356c:	400921fb 	.word	0x400921fb
 8023570:	54442d18 	.word	0x54442d18
 8023574:	3ff921fb 	.word	0x3ff921fb
 8023578:	3ff00000 	.word	0x3ff00000
 802357c:	3fe00000 	.word	0x3fe00000

08023580 <__ieee754_asin>:
 8023580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023584:	ec55 4b10 	vmov	r4, r5, d0
 8023588:	4bc7      	ldr	r3, [pc, #796]	@ (80238a8 <__ieee754_asin+0x328>)
 802358a:	b087      	sub	sp, #28
 802358c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8023590:	429e      	cmp	r6, r3
 8023592:	9501      	str	r5, [sp, #4]
 8023594:	d92d      	bls.n	80235f2 <__ieee754_asin+0x72>
 8023596:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 802359a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 802359e:	4326      	orrs	r6, r4
 80235a0:	d116      	bne.n	80235d0 <__ieee754_asin+0x50>
 80235a2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8023840 <__ieee754_asin+0x2c0>)
 80235a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235a8:	4620      	mov	r0, r4
 80235aa:	4629      	mov	r1, r5
 80235ac:	f7dd f824 	bl	80005f8 <__aeabi_dmul>
 80235b0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8023848 <__ieee754_asin+0x2c8>)
 80235b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235b6:	4606      	mov	r6, r0
 80235b8:	460f      	mov	r7, r1
 80235ba:	4620      	mov	r0, r4
 80235bc:	4629      	mov	r1, r5
 80235be:	f7dd f81b 	bl	80005f8 <__aeabi_dmul>
 80235c2:	4602      	mov	r2, r0
 80235c4:	460b      	mov	r3, r1
 80235c6:	4630      	mov	r0, r6
 80235c8:	4639      	mov	r1, r7
 80235ca:	f7dc fe5f 	bl	800028c <__adddf3>
 80235ce:	e009      	b.n	80235e4 <__ieee754_asin+0x64>
 80235d0:	4622      	mov	r2, r4
 80235d2:	462b      	mov	r3, r5
 80235d4:	4620      	mov	r0, r4
 80235d6:	4629      	mov	r1, r5
 80235d8:	f7dc fe56 	bl	8000288 <__aeabi_dsub>
 80235dc:	4602      	mov	r2, r0
 80235de:	460b      	mov	r3, r1
 80235e0:	f7dd f934 	bl	800084c <__aeabi_ddiv>
 80235e4:	4604      	mov	r4, r0
 80235e6:	460d      	mov	r5, r1
 80235e8:	ec45 4b10 	vmov	d0, r4, r5
 80235ec:	b007      	add	sp, #28
 80235ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235f2:	4bae      	ldr	r3, [pc, #696]	@ (80238ac <__ieee754_asin+0x32c>)
 80235f4:	429e      	cmp	r6, r3
 80235f6:	d810      	bhi.n	802361a <__ieee754_asin+0x9a>
 80235f8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80235fc:	f080 80ad 	bcs.w	802375a <__ieee754_asin+0x1da>
 8023600:	a393      	add	r3, pc, #588	@ (adr r3, 8023850 <__ieee754_asin+0x2d0>)
 8023602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023606:	4620      	mov	r0, r4
 8023608:	4629      	mov	r1, r5
 802360a:	f7dc fe3f 	bl	800028c <__adddf3>
 802360e:	4ba8      	ldr	r3, [pc, #672]	@ (80238b0 <__ieee754_asin+0x330>)
 8023610:	2200      	movs	r2, #0
 8023612:	f7dd fa81 	bl	8000b18 <__aeabi_dcmpgt>
 8023616:	2800      	cmp	r0, #0
 8023618:	d1e6      	bne.n	80235e8 <__ieee754_asin+0x68>
 802361a:	ec45 4b10 	vmov	d0, r4, r5
 802361e:	f7fe fe13 	bl	8022248 <fabs>
 8023622:	49a3      	ldr	r1, [pc, #652]	@ (80238b0 <__ieee754_asin+0x330>)
 8023624:	ec53 2b10 	vmov	r2, r3, d0
 8023628:	2000      	movs	r0, #0
 802362a:	f7dc fe2d 	bl	8000288 <__aeabi_dsub>
 802362e:	4ba1      	ldr	r3, [pc, #644]	@ (80238b4 <__ieee754_asin+0x334>)
 8023630:	2200      	movs	r2, #0
 8023632:	f7dc ffe1 	bl	80005f8 <__aeabi_dmul>
 8023636:	a388      	add	r3, pc, #544	@ (adr r3, 8023858 <__ieee754_asin+0x2d8>)
 8023638:	e9d3 2300 	ldrd	r2, r3, [r3]
 802363c:	4604      	mov	r4, r0
 802363e:	460d      	mov	r5, r1
 8023640:	f7dc ffda 	bl	80005f8 <__aeabi_dmul>
 8023644:	a386      	add	r3, pc, #536	@ (adr r3, 8023860 <__ieee754_asin+0x2e0>)
 8023646:	e9d3 2300 	ldrd	r2, r3, [r3]
 802364a:	f7dc fe1f 	bl	800028c <__adddf3>
 802364e:	4622      	mov	r2, r4
 8023650:	462b      	mov	r3, r5
 8023652:	f7dc ffd1 	bl	80005f8 <__aeabi_dmul>
 8023656:	a384      	add	r3, pc, #528	@ (adr r3, 8023868 <__ieee754_asin+0x2e8>)
 8023658:	e9d3 2300 	ldrd	r2, r3, [r3]
 802365c:	f7dc fe14 	bl	8000288 <__aeabi_dsub>
 8023660:	4622      	mov	r2, r4
 8023662:	462b      	mov	r3, r5
 8023664:	f7dc ffc8 	bl	80005f8 <__aeabi_dmul>
 8023668:	a381      	add	r3, pc, #516	@ (adr r3, 8023870 <__ieee754_asin+0x2f0>)
 802366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802366e:	f7dc fe0d 	bl	800028c <__adddf3>
 8023672:	4622      	mov	r2, r4
 8023674:	462b      	mov	r3, r5
 8023676:	f7dc ffbf 	bl	80005f8 <__aeabi_dmul>
 802367a:	a37f      	add	r3, pc, #508	@ (adr r3, 8023878 <__ieee754_asin+0x2f8>)
 802367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023680:	f7dc fe02 	bl	8000288 <__aeabi_dsub>
 8023684:	4622      	mov	r2, r4
 8023686:	462b      	mov	r3, r5
 8023688:	f7dc ffb6 	bl	80005f8 <__aeabi_dmul>
 802368c:	a37c      	add	r3, pc, #496	@ (adr r3, 8023880 <__ieee754_asin+0x300>)
 802368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023692:	f7dc fdfb 	bl	800028c <__adddf3>
 8023696:	4622      	mov	r2, r4
 8023698:	462b      	mov	r3, r5
 802369a:	f7dc ffad 	bl	80005f8 <__aeabi_dmul>
 802369e:	a37a      	add	r3, pc, #488	@ (adr r3, 8023888 <__ieee754_asin+0x308>)
 80236a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80236a8:	4620      	mov	r0, r4
 80236aa:	4629      	mov	r1, r5
 80236ac:	f7dc ffa4 	bl	80005f8 <__aeabi_dmul>
 80236b0:	a377      	add	r3, pc, #476	@ (adr r3, 8023890 <__ieee754_asin+0x310>)
 80236b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236b6:	f7dc fde7 	bl	8000288 <__aeabi_dsub>
 80236ba:	4622      	mov	r2, r4
 80236bc:	462b      	mov	r3, r5
 80236be:	f7dc ff9b 	bl	80005f8 <__aeabi_dmul>
 80236c2:	a375      	add	r3, pc, #468	@ (adr r3, 8023898 <__ieee754_asin+0x318>)
 80236c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236c8:	f7dc fde0 	bl	800028c <__adddf3>
 80236cc:	4622      	mov	r2, r4
 80236ce:	462b      	mov	r3, r5
 80236d0:	f7dc ff92 	bl	80005f8 <__aeabi_dmul>
 80236d4:	a372      	add	r3, pc, #456	@ (adr r3, 80238a0 <__ieee754_asin+0x320>)
 80236d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236da:	f7dc fdd5 	bl	8000288 <__aeabi_dsub>
 80236de:	4622      	mov	r2, r4
 80236e0:	462b      	mov	r3, r5
 80236e2:	f7dc ff89 	bl	80005f8 <__aeabi_dmul>
 80236e6:	4b72      	ldr	r3, [pc, #456]	@ (80238b0 <__ieee754_asin+0x330>)
 80236e8:	2200      	movs	r2, #0
 80236ea:	f7dc fdcf 	bl	800028c <__adddf3>
 80236ee:	ec45 4b10 	vmov	d0, r4, r5
 80236f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80236f6:	f7fe ff69 	bl	80225cc <__ieee754_sqrt>
 80236fa:	4b6f      	ldr	r3, [pc, #444]	@ (80238b8 <__ieee754_asin+0x338>)
 80236fc:	429e      	cmp	r6, r3
 80236fe:	ec5b ab10 	vmov	sl, fp, d0
 8023702:	f240 80db 	bls.w	80238bc <__ieee754_asin+0x33c>
 8023706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802370a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802370e:	f7dd f89d 	bl	800084c <__aeabi_ddiv>
 8023712:	4652      	mov	r2, sl
 8023714:	465b      	mov	r3, fp
 8023716:	f7dc ff6f 	bl	80005f8 <__aeabi_dmul>
 802371a:	4652      	mov	r2, sl
 802371c:	465b      	mov	r3, fp
 802371e:	f7dc fdb5 	bl	800028c <__adddf3>
 8023722:	4602      	mov	r2, r0
 8023724:	460b      	mov	r3, r1
 8023726:	f7dc fdb1 	bl	800028c <__adddf3>
 802372a:	a347      	add	r3, pc, #284	@ (adr r3, 8023848 <__ieee754_asin+0x2c8>)
 802372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023730:	f7dc fdaa 	bl	8000288 <__aeabi_dsub>
 8023734:	4602      	mov	r2, r0
 8023736:	460b      	mov	r3, r1
 8023738:	a141      	add	r1, pc, #260	@ (adr r1, 8023840 <__ieee754_asin+0x2c0>)
 802373a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802373e:	f7dc fda3 	bl	8000288 <__aeabi_dsub>
 8023742:	9b01      	ldr	r3, [sp, #4]
 8023744:	2b00      	cmp	r3, #0
 8023746:	bfdc      	itt	le
 8023748:	4602      	movle	r2, r0
 802374a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 802374e:	4604      	mov	r4, r0
 8023750:	460d      	mov	r5, r1
 8023752:	bfdc      	itt	le
 8023754:	4614      	movle	r4, r2
 8023756:	461d      	movle	r5, r3
 8023758:	e746      	b.n	80235e8 <__ieee754_asin+0x68>
 802375a:	4622      	mov	r2, r4
 802375c:	462b      	mov	r3, r5
 802375e:	4620      	mov	r0, r4
 8023760:	4629      	mov	r1, r5
 8023762:	f7dc ff49 	bl	80005f8 <__aeabi_dmul>
 8023766:	a33c      	add	r3, pc, #240	@ (adr r3, 8023858 <__ieee754_asin+0x2d8>)
 8023768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802376c:	4606      	mov	r6, r0
 802376e:	460f      	mov	r7, r1
 8023770:	f7dc ff42 	bl	80005f8 <__aeabi_dmul>
 8023774:	a33a      	add	r3, pc, #232	@ (adr r3, 8023860 <__ieee754_asin+0x2e0>)
 8023776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802377a:	f7dc fd87 	bl	800028c <__adddf3>
 802377e:	4632      	mov	r2, r6
 8023780:	463b      	mov	r3, r7
 8023782:	f7dc ff39 	bl	80005f8 <__aeabi_dmul>
 8023786:	a338      	add	r3, pc, #224	@ (adr r3, 8023868 <__ieee754_asin+0x2e8>)
 8023788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802378c:	f7dc fd7c 	bl	8000288 <__aeabi_dsub>
 8023790:	4632      	mov	r2, r6
 8023792:	463b      	mov	r3, r7
 8023794:	f7dc ff30 	bl	80005f8 <__aeabi_dmul>
 8023798:	a335      	add	r3, pc, #212	@ (adr r3, 8023870 <__ieee754_asin+0x2f0>)
 802379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802379e:	f7dc fd75 	bl	800028c <__adddf3>
 80237a2:	4632      	mov	r2, r6
 80237a4:	463b      	mov	r3, r7
 80237a6:	f7dc ff27 	bl	80005f8 <__aeabi_dmul>
 80237aa:	a333      	add	r3, pc, #204	@ (adr r3, 8023878 <__ieee754_asin+0x2f8>)
 80237ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237b0:	f7dc fd6a 	bl	8000288 <__aeabi_dsub>
 80237b4:	4632      	mov	r2, r6
 80237b6:	463b      	mov	r3, r7
 80237b8:	f7dc ff1e 	bl	80005f8 <__aeabi_dmul>
 80237bc:	a330      	add	r3, pc, #192	@ (adr r3, 8023880 <__ieee754_asin+0x300>)
 80237be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237c2:	f7dc fd63 	bl	800028c <__adddf3>
 80237c6:	4632      	mov	r2, r6
 80237c8:	463b      	mov	r3, r7
 80237ca:	f7dc ff15 	bl	80005f8 <__aeabi_dmul>
 80237ce:	a32e      	add	r3, pc, #184	@ (adr r3, 8023888 <__ieee754_asin+0x308>)
 80237d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237d4:	4680      	mov	r8, r0
 80237d6:	4689      	mov	r9, r1
 80237d8:	4630      	mov	r0, r6
 80237da:	4639      	mov	r1, r7
 80237dc:	f7dc ff0c 	bl	80005f8 <__aeabi_dmul>
 80237e0:	a32b      	add	r3, pc, #172	@ (adr r3, 8023890 <__ieee754_asin+0x310>)
 80237e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237e6:	f7dc fd4f 	bl	8000288 <__aeabi_dsub>
 80237ea:	4632      	mov	r2, r6
 80237ec:	463b      	mov	r3, r7
 80237ee:	f7dc ff03 	bl	80005f8 <__aeabi_dmul>
 80237f2:	a329      	add	r3, pc, #164	@ (adr r3, 8023898 <__ieee754_asin+0x318>)
 80237f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237f8:	f7dc fd48 	bl	800028c <__adddf3>
 80237fc:	4632      	mov	r2, r6
 80237fe:	463b      	mov	r3, r7
 8023800:	f7dc fefa 	bl	80005f8 <__aeabi_dmul>
 8023804:	a326      	add	r3, pc, #152	@ (adr r3, 80238a0 <__ieee754_asin+0x320>)
 8023806:	e9d3 2300 	ldrd	r2, r3, [r3]
 802380a:	f7dc fd3d 	bl	8000288 <__aeabi_dsub>
 802380e:	4632      	mov	r2, r6
 8023810:	463b      	mov	r3, r7
 8023812:	f7dc fef1 	bl	80005f8 <__aeabi_dmul>
 8023816:	4b26      	ldr	r3, [pc, #152]	@ (80238b0 <__ieee754_asin+0x330>)
 8023818:	2200      	movs	r2, #0
 802381a:	f7dc fd37 	bl	800028c <__adddf3>
 802381e:	4602      	mov	r2, r0
 8023820:	460b      	mov	r3, r1
 8023822:	4640      	mov	r0, r8
 8023824:	4649      	mov	r1, r9
 8023826:	f7dd f811 	bl	800084c <__aeabi_ddiv>
 802382a:	4622      	mov	r2, r4
 802382c:	462b      	mov	r3, r5
 802382e:	f7dc fee3 	bl	80005f8 <__aeabi_dmul>
 8023832:	4602      	mov	r2, r0
 8023834:	460b      	mov	r3, r1
 8023836:	4620      	mov	r0, r4
 8023838:	4629      	mov	r1, r5
 802383a:	e6c6      	b.n	80235ca <__ieee754_asin+0x4a>
 802383c:	f3af 8000 	nop.w
 8023840:	54442d18 	.word	0x54442d18
 8023844:	3ff921fb 	.word	0x3ff921fb
 8023848:	33145c07 	.word	0x33145c07
 802384c:	3c91a626 	.word	0x3c91a626
 8023850:	8800759c 	.word	0x8800759c
 8023854:	7e37e43c 	.word	0x7e37e43c
 8023858:	0dfdf709 	.word	0x0dfdf709
 802385c:	3f023de1 	.word	0x3f023de1
 8023860:	7501b288 	.word	0x7501b288
 8023864:	3f49efe0 	.word	0x3f49efe0
 8023868:	b5688f3b 	.word	0xb5688f3b
 802386c:	3fa48228 	.word	0x3fa48228
 8023870:	0e884455 	.word	0x0e884455
 8023874:	3fc9c155 	.word	0x3fc9c155
 8023878:	03eb6f7d 	.word	0x03eb6f7d
 802387c:	3fd4d612 	.word	0x3fd4d612
 8023880:	55555555 	.word	0x55555555
 8023884:	3fc55555 	.word	0x3fc55555
 8023888:	b12e9282 	.word	0xb12e9282
 802388c:	3fb3b8c5 	.word	0x3fb3b8c5
 8023890:	1b8d0159 	.word	0x1b8d0159
 8023894:	3fe6066c 	.word	0x3fe6066c
 8023898:	9c598ac8 	.word	0x9c598ac8
 802389c:	40002ae5 	.word	0x40002ae5
 80238a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80238a4:	40033a27 	.word	0x40033a27
 80238a8:	3fefffff 	.word	0x3fefffff
 80238ac:	3fdfffff 	.word	0x3fdfffff
 80238b0:	3ff00000 	.word	0x3ff00000
 80238b4:	3fe00000 	.word	0x3fe00000
 80238b8:	3fef3332 	.word	0x3fef3332
 80238bc:	4652      	mov	r2, sl
 80238be:	465b      	mov	r3, fp
 80238c0:	4650      	mov	r0, sl
 80238c2:	4659      	mov	r1, fp
 80238c4:	f7dc fce2 	bl	800028c <__adddf3>
 80238c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80238cc:	4606      	mov	r6, r0
 80238ce:	460f      	mov	r7, r1
 80238d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80238d4:	f7dc ffba 	bl	800084c <__aeabi_ddiv>
 80238d8:	4602      	mov	r2, r0
 80238da:	460b      	mov	r3, r1
 80238dc:	4630      	mov	r0, r6
 80238de:	4639      	mov	r1, r7
 80238e0:	f7dc fe8a 	bl	80005f8 <__aeabi_dmul>
 80238e4:	f04f 0800 	mov.w	r8, #0
 80238e8:	4606      	mov	r6, r0
 80238ea:	460f      	mov	r7, r1
 80238ec:	4642      	mov	r2, r8
 80238ee:	465b      	mov	r3, fp
 80238f0:	4640      	mov	r0, r8
 80238f2:	4659      	mov	r1, fp
 80238f4:	f7dc fe80 	bl	80005f8 <__aeabi_dmul>
 80238f8:	4602      	mov	r2, r0
 80238fa:	460b      	mov	r3, r1
 80238fc:	4620      	mov	r0, r4
 80238fe:	4629      	mov	r1, r5
 8023900:	f7dc fcc2 	bl	8000288 <__aeabi_dsub>
 8023904:	4642      	mov	r2, r8
 8023906:	4604      	mov	r4, r0
 8023908:	460d      	mov	r5, r1
 802390a:	465b      	mov	r3, fp
 802390c:	4650      	mov	r0, sl
 802390e:	4659      	mov	r1, fp
 8023910:	f7dc fcbc 	bl	800028c <__adddf3>
 8023914:	4602      	mov	r2, r0
 8023916:	460b      	mov	r3, r1
 8023918:	4620      	mov	r0, r4
 802391a:	4629      	mov	r1, r5
 802391c:	f7dc ff96 	bl	800084c <__aeabi_ddiv>
 8023920:	4602      	mov	r2, r0
 8023922:	460b      	mov	r3, r1
 8023924:	f7dc fcb2 	bl	800028c <__adddf3>
 8023928:	4602      	mov	r2, r0
 802392a:	460b      	mov	r3, r1
 802392c:	a112      	add	r1, pc, #72	@ (adr r1, 8023978 <__ieee754_asin+0x3f8>)
 802392e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023932:	f7dc fca9 	bl	8000288 <__aeabi_dsub>
 8023936:	4602      	mov	r2, r0
 8023938:	460b      	mov	r3, r1
 802393a:	4630      	mov	r0, r6
 802393c:	4639      	mov	r1, r7
 802393e:	f7dc fca3 	bl	8000288 <__aeabi_dsub>
 8023942:	4642      	mov	r2, r8
 8023944:	4604      	mov	r4, r0
 8023946:	460d      	mov	r5, r1
 8023948:	465b      	mov	r3, fp
 802394a:	4640      	mov	r0, r8
 802394c:	4659      	mov	r1, fp
 802394e:	f7dc fc9d 	bl	800028c <__adddf3>
 8023952:	4602      	mov	r2, r0
 8023954:	460b      	mov	r3, r1
 8023956:	a10a      	add	r1, pc, #40	@ (adr r1, 8023980 <__ieee754_asin+0x400>)
 8023958:	e9d1 0100 	ldrd	r0, r1, [r1]
 802395c:	f7dc fc94 	bl	8000288 <__aeabi_dsub>
 8023960:	4602      	mov	r2, r0
 8023962:	460b      	mov	r3, r1
 8023964:	4620      	mov	r0, r4
 8023966:	4629      	mov	r1, r5
 8023968:	f7dc fc8e 	bl	8000288 <__aeabi_dsub>
 802396c:	4602      	mov	r2, r0
 802396e:	460b      	mov	r3, r1
 8023970:	a103      	add	r1, pc, #12	@ (adr r1, 8023980 <__ieee754_asin+0x400>)
 8023972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023976:	e6e2      	b.n	802373e <__ieee754_asin+0x1be>
 8023978:	33145c07 	.word	0x33145c07
 802397c:	3c91a626 	.word	0x3c91a626
 8023980:	54442d18 	.word	0x54442d18
 8023984:	3fe921fb 	.word	0x3fe921fb

08023988 <__ieee754_atan2>:
 8023988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802398c:	ec57 6b11 	vmov	r6, r7, d1
 8023990:	4273      	negs	r3, r6
 8023992:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8023b10 <__ieee754_atan2+0x188>
 8023996:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 802399a:	4333      	orrs	r3, r6
 802399c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80239a0:	4543      	cmp	r3, r8
 80239a2:	ec51 0b10 	vmov	r0, r1, d0
 80239a6:	4635      	mov	r5, r6
 80239a8:	d809      	bhi.n	80239be <__ieee754_atan2+0x36>
 80239aa:	4244      	negs	r4, r0
 80239ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80239b0:	4304      	orrs	r4, r0
 80239b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80239b6:	4544      	cmp	r4, r8
 80239b8:	468e      	mov	lr, r1
 80239ba:	4681      	mov	r9, r0
 80239bc:	d907      	bls.n	80239ce <__ieee754_atan2+0x46>
 80239be:	4632      	mov	r2, r6
 80239c0:	463b      	mov	r3, r7
 80239c2:	f7dc fc63 	bl	800028c <__adddf3>
 80239c6:	ec41 0b10 	vmov	d0, r0, r1
 80239ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80239d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80239d6:	4334      	orrs	r4, r6
 80239d8:	d103      	bne.n	80239e2 <__ieee754_atan2+0x5a>
 80239da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239de:	f000 bfdb 	b.w	8024998 <atan>
 80239e2:	17bc      	asrs	r4, r7, #30
 80239e4:	f004 0402 	and.w	r4, r4, #2
 80239e8:	ea53 0909 	orrs.w	r9, r3, r9
 80239ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80239f0:	d107      	bne.n	8023a02 <__ieee754_atan2+0x7a>
 80239f2:	2c02      	cmp	r4, #2
 80239f4:	d05f      	beq.n	8023ab6 <__ieee754_atan2+0x12e>
 80239f6:	2c03      	cmp	r4, #3
 80239f8:	d1e5      	bne.n	80239c6 <__ieee754_atan2+0x3e>
 80239fa:	a141      	add	r1, pc, #260	@ (adr r1, 8023b00 <__ieee754_atan2+0x178>)
 80239fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a00:	e7e1      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023a02:	4315      	orrs	r5, r2
 8023a04:	d106      	bne.n	8023a14 <__ieee754_atan2+0x8c>
 8023a06:	f1be 0f00 	cmp.w	lr, #0
 8023a0a:	da5f      	bge.n	8023acc <__ieee754_atan2+0x144>
 8023a0c:	a13e      	add	r1, pc, #248	@ (adr r1, 8023b08 <__ieee754_atan2+0x180>)
 8023a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a12:	e7d8      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023a14:	4542      	cmp	r2, r8
 8023a16:	d10f      	bne.n	8023a38 <__ieee754_atan2+0xb0>
 8023a18:	4293      	cmp	r3, r2
 8023a1a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8023a1e:	d107      	bne.n	8023a30 <__ieee754_atan2+0xa8>
 8023a20:	2c02      	cmp	r4, #2
 8023a22:	d84c      	bhi.n	8023abe <__ieee754_atan2+0x136>
 8023a24:	4b34      	ldr	r3, [pc, #208]	@ (8023af8 <__ieee754_atan2+0x170>)
 8023a26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023a2e:	e7ca      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023a30:	2c02      	cmp	r4, #2
 8023a32:	d848      	bhi.n	8023ac6 <__ieee754_atan2+0x13e>
 8023a34:	4b31      	ldr	r3, [pc, #196]	@ (8023afc <__ieee754_atan2+0x174>)
 8023a36:	e7f6      	b.n	8023a26 <__ieee754_atan2+0x9e>
 8023a38:	4543      	cmp	r3, r8
 8023a3a:	d0e4      	beq.n	8023a06 <__ieee754_atan2+0x7e>
 8023a3c:	1a9b      	subs	r3, r3, r2
 8023a3e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8023a42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8023a46:	da1e      	bge.n	8023a86 <__ieee754_atan2+0xfe>
 8023a48:	2f00      	cmp	r7, #0
 8023a4a:	da01      	bge.n	8023a50 <__ieee754_atan2+0xc8>
 8023a4c:	323c      	adds	r2, #60	@ 0x3c
 8023a4e:	db1e      	blt.n	8023a8e <__ieee754_atan2+0x106>
 8023a50:	4632      	mov	r2, r6
 8023a52:	463b      	mov	r3, r7
 8023a54:	f7dc fefa 	bl	800084c <__aeabi_ddiv>
 8023a58:	ec41 0b10 	vmov	d0, r0, r1
 8023a5c:	f7fe fbf4 	bl	8022248 <fabs>
 8023a60:	f000 ff9a 	bl	8024998 <atan>
 8023a64:	ec51 0b10 	vmov	r0, r1, d0
 8023a68:	2c01      	cmp	r4, #1
 8023a6a:	d013      	beq.n	8023a94 <__ieee754_atan2+0x10c>
 8023a6c:	2c02      	cmp	r4, #2
 8023a6e:	d015      	beq.n	8023a9c <__ieee754_atan2+0x114>
 8023a70:	2c00      	cmp	r4, #0
 8023a72:	d0a8      	beq.n	80239c6 <__ieee754_atan2+0x3e>
 8023a74:	a318      	add	r3, pc, #96	@ (adr r3, 8023ad8 <__ieee754_atan2+0x150>)
 8023a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a7a:	f7dc fc05 	bl	8000288 <__aeabi_dsub>
 8023a7e:	a318      	add	r3, pc, #96	@ (adr r3, 8023ae0 <__ieee754_atan2+0x158>)
 8023a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a84:	e014      	b.n	8023ab0 <__ieee754_atan2+0x128>
 8023a86:	a118      	add	r1, pc, #96	@ (adr r1, 8023ae8 <__ieee754_atan2+0x160>)
 8023a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a8c:	e7ec      	b.n	8023a68 <__ieee754_atan2+0xe0>
 8023a8e:	2000      	movs	r0, #0
 8023a90:	2100      	movs	r1, #0
 8023a92:	e7e9      	b.n	8023a68 <__ieee754_atan2+0xe0>
 8023a94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023a98:	4619      	mov	r1, r3
 8023a9a:	e794      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023a9c:	a30e      	add	r3, pc, #56	@ (adr r3, 8023ad8 <__ieee754_atan2+0x150>)
 8023a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023aa2:	f7dc fbf1 	bl	8000288 <__aeabi_dsub>
 8023aa6:	4602      	mov	r2, r0
 8023aa8:	460b      	mov	r3, r1
 8023aaa:	a10d      	add	r1, pc, #52	@ (adr r1, 8023ae0 <__ieee754_atan2+0x158>)
 8023aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023ab0:	f7dc fbea 	bl	8000288 <__aeabi_dsub>
 8023ab4:	e787      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023ab6:	a10a      	add	r1, pc, #40	@ (adr r1, 8023ae0 <__ieee754_atan2+0x158>)
 8023ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023abc:	e783      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023abe:	a10c      	add	r1, pc, #48	@ (adr r1, 8023af0 <__ieee754_atan2+0x168>)
 8023ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023ac4:	e77f      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023ac6:	2000      	movs	r0, #0
 8023ac8:	2100      	movs	r1, #0
 8023aca:	e77c      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023acc:	a106      	add	r1, pc, #24	@ (adr r1, 8023ae8 <__ieee754_atan2+0x160>)
 8023ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023ad2:	e778      	b.n	80239c6 <__ieee754_atan2+0x3e>
 8023ad4:	f3af 8000 	nop.w
 8023ad8:	33145c07 	.word	0x33145c07
 8023adc:	3ca1a626 	.word	0x3ca1a626
 8023ae0:	54442d18 	.word	0x54442d18
 8023ae4:	400921fb 	.word	0x400921fb
 8023ae8:	54442d18 	.word	0x54442d18
 8023aec:	3ff921fb 	.word	0x3ff921fb
 8023af0:	54442d18 	.word	0x54442d18
 8023af4:	3fe921fb 	.word	0x3fe921fb
 8023af8:	080268e8 	.word	0x080268e8
 8023afc:	080268d0 	.word	0x080268d0
 8023b00:	54442d18 	.word	0x54442d18
 8023b04:	c00921fb 	.word	0xc00921fb
 8023b08:	54442d18 	.word	0x54442d18
 8023b0c:	bff921fb 	.word	0xbff921fb
 8023b10:	7ff00000 	.word	0x7ff00000
 8023b14:	00000000 	.word	0x00000000

08023b18 <__ieee754_pow>:
 8023b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b1c:	b091      	sub	sp, #68	@ 0x44
 8023b1e:	ed8d 1b00 	vstr	d1, [sp]
 8023b22:	e9dd 1900 	ldrd	r1, r9, [sp]
 8023b26:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8023b2a:	ea5a 0001 	orrs.w	r0, sl, r1
 8023b2e:	ec57 6b10 	vmov	r6, r7, d0
 8023b32:	d113      	bne.n	8023b5c <__ieee754_pow+0x44>
 8023b34:	19b3      	adds	r3, r6, r6
 8023b36:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8023b3a:	4152      	adcs	r2, r2
 8023b3c:	4298      	cmp	r0, r3
 8023b3e:	4b98      	ldr	r3, [pc, #608]	@ (8023da0 <__ieee754_pow+0x288>)
 8023b40:	4193      	sbcs	r3, r2
 8023b42:	f080 84ea 	bcs.w	802451a <__ieee754_pow+0xa02>
 8023b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023b4a:	4630      	mov	r0, r6
 8023b4c:	4639      	mov	r1, r7
 8023b4e:	f7dc fb9d 	bl	800028c <__adddf3>
 8023b52:	ec41 0b10 	vmov	d0, r0, r1
 8023b56:	b011      	add	sp, #68	@ 0x44
 8023b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b5c:	4a91      	ldr	r2, [pc, #580]	@ (8023da4 <__ieee754_pow+0x28c>)
 8023b5e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8023b62:	4590      	cmp	r8, r2
 8023b64:	463d      	mov	r5, r7
 8023b66:	4633      	mov	r3, r6
 8023b68:	d806      	bhi.n	8023b78 <__ieee754_pow+0x60>
 8023b6a:	d101      	bne.n	8023b70 <__ieee754_pow+0x58>
 8023b6c:	2e00      	cmp	r6, #0
 8023b6e:	d1ea      	bne.n	8023b46 <__ieee754_pow+0x2e>
 8023b70:	4592      	cmp	sl, r2
 8023b72:	d801      	bhi.n	8023b78 <__ieee754_pow+0x60>
 8023b74:	d10e      	bne.n	8023b94 <__ieee754_pow+0x7c>
 8023b76:	b169      	cbz	r1, 8023b94 <__ieee754_pow+0x7c>
 8023b78:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8023b7c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8023b80:	431d      	orrs	r5, r3
 8023b82:	d1e0      	bne.n	8023b46 <__ieee754_pow+0x2e>
 8023b84:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023b88:	18db      	adds	r3, r3, r3
 8023b8a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8023b8e:	4152      	adcs	r2, r2
 8023b90:	429d      	cmp	r5, r3
 8023b92:	e7d4      	b.n	8023b3e <__ieee754_pow+0x26>
 8023b94:	2d00      	cmp	r5, #0
 8023b96:	46c3      	mov	fp, r8
 8023b98:	da3a      	bge.n	8023c10 <__ieee754_pow+0xf8>
 8023b9a:	4a83      	ldr	r2, [pc, #524]	@ (8023da8 <__ieee754_pow+0x290>)
 8023b9c:	4592      	cmp	sl, r2
 8023b9e:	d84d      	bhi.n	8023c3c <__ieee754_pow+0x124>
 8023ba0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8023ba4:	4592      	cmp	sl, r2
 8023ba6:	f240 84c7 	bls.w	8024538 <__ieee754_pow+0xa20>
 8023baa:	ea4f 522a 	mov.w	r2, sl, asr #20
 8023bae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8023bb2:	2a14      	cmp	r2, #20
 8023bb4:	dd0f      	ble.n	8023bd6 <__ieee754_pow+0xbe>
 8023bb6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8023bba:	fa21 f402 	lsr.w	r4, r1, r2
 8023bbe:	fa04 f202 	lsl.w	r2, r4, r2
 8023bc2:	428a      	cmp	r2, r1
 8023bc4:	f040 84b8 	bne.w	8024538 <__ieee754_pow+0xa20>
 8023bc8:	f004 0401 	and.w	r4, r4, #1
 8023bcc:	f1c4 0402 	rsb	r4, r4, #2
 8023bd0:	2900      	cmp	r1, #0
 8023bd2:	d158      	bne.n	8023c86 <__ieee754_pow+0x16e>
 8023bd4:	e00e      	b.n	8023bf4 <__ieee754_pow+0xdc>
 8023bd6:	2900      	cmp	r1, #0
 8023bd8:	d154      	bne.n	8023c84 <__ieee754_pow+0x16c>
 8023bda:	f1c2 0214 	rsb	r2, r2, #20
 8023bde:	fa4a f402 	asr.w	r4, sl, r2
 8023be2:	fa04 f202 	lsl.w	r2, r4, r2
 8023be6:	4552      	cmp	r2, sl
 8023be8:	f040 84a3 	bne.w	8024532 <__ieee754_pow+0xa1a>
 8023bec:	f004 0401 	and.w	r4, r4, #1
 8023bf0:	f1c4 0402 	rsb	r4, r4, #2
 8023bf4:	4a6d      	ldr	r2, [pc, #436]	@ (8023dac <__ieee754_pow+0x294>)
 8023bf6:	4592      	cmp	sl, r2
 8023bf8:	d12e      	bne.n	8023c58 <__ieee754_pow+0x140>
 8023bfa:	f1b9 0f00 	cmp.w	r9, #0
 8023bfe:	f280 8494 	bge.w	802452a <__ieee754_pow+0xa12>
 8023c02:	496a      	ldr	r1, [pc, #424]	@ (8023dac <__ieee754_pow+0x294>)
 8023c04:	4632      	mov	r2, r6
 8023c06:	463b      	mov	r3, r7
 8023c08:	2000      	movs	r0, #0
 8023c0a:	f7dc fe1f 	bl	800084c <__aeabi_ddiv>
 8023c0e:	e7a0      	b.n	8023b52 <__ieee754_pow+0x3a>
 8023c10:	2400      	movs	r4, #0
 8023c12:	bbc1      	cbnz	r1, 8023c86 <__ieee754_pow+0x16e>
 8023c14:	4a63      	ldr	r2, [pc, #396]	@ (8023da4 <__ieee754_pow+0x28c>)
 8023c16:	4592      	cmp	sl, r2
 8023c18:	d1ec      	bne.n	8023bf4 <__ieee754_pow+0xdc>
 8023c1a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8023c1e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8023c22:	431a      	orrs	r2, r3
 8023c24:	f000 8479 	beq.w	802451a <__ieee754_pow+0xa02>
 8023c28:	4b61      	ldr	r3, [pc, #388]	@ (8023db0 <__ieee754_pow+0x298>)
 8023c2a:	4598      	cmp	r8, r3
 8023c2c:	d908      	bls.n	8023c40 <__ieee754_pow+0x128>
 8023c2e:	f1b9 0f00 	cmp.w	r9, #0
 8023c32:	f2c0 8476 	blt.w	8024522 <__ieee754_pow+0xa0a>
 8023c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023c3a:	e78a      	b.n	8023b52 <__ieee754_pow+0x3a>
 8023c3c:	2402      	movs	r4, #2
 8023c3e:	e7e8      	b.n	8023c12 <__ieee754_pow+0xfa>
 8023c40:	f1b9 0f00 	cmp.w	r9, #0
 8023c44:	f04f 0000 	mov.w	r0, #0
 8023c48:	f04f 0100 	mov.w	r1, #0
 8023c4c:	da81      	bge.n	8023b52 <__ieee754_pow+0x3a>
 8023c4e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8023c52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8023c56:	e77c      	b.n	8023b52 <__ieee754_pow+0x3a>
 8023c58:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8023c5c:	d106      	bne.n	8023c6c <__ieee754_pow+0x154>
 8023c5e:	4632      	mov	r2, r6
 8023c60:	463b      	mov	r3, r7
 8023c62:	4630      	mov	r0, r6
 8023c64:	4639      	mov	r1, r7
 8023c66:	f7dc fcc7 	bl	80005f8 <__aeabi_dmul>
 8023c6a:	e772      	b.n	8023b52 <__ieee754_pow+0x3a>
 8023c6c:	4a51      	ldr	r2, [pc, #324]	@ (8023db4 <__ieee754_pow+0x29c>)
 8023c6e:	4591      	cmp	r9, r2
 8023c70:	d109      	bne.n	8023c86 <__ieee754_pow+0x16e>
 8023c72:	2d00      	cmp	r5, #0
 8023c74:	db07      	blt.n	8023c86 <__ieee754_pow+0x16e>
 8023c76:	ec47 6b10 	vmov	d0, r6, r7
 8023c7a:	b011      	add	sp, #68	@ 0x44
 8023c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c80:	f7fe bca4 	b.w	80225cc <__ieee754_sqrt>
 8023c84:	2400      	movs	r4, #0
 8023c86:	ec47 6b10 	vmov	d0, r6, r7
 8023c8a:	9302      	str	r3, [sp, #8]
 8023c8c:	f7fe fadc 	bl	8022248 <fabs>
 8023c90:	9b02      	ldr	r3, [sp, #8]
 8023c92:	ec51 0b10 	vmov	r0, r1, d0
 8023c96:	bb53      	cbnz	r3, 8023cee <__ieee754_pow+0x1d6>
 8023c98:	4b44      	ldr	r3, [pc, #272]	@ (8023dac <__ieee754_pow+0x294>)
 8023c9a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8023c9e:	429a      	cmp	r2, r3
 8023ca0:	d002      	beq.n	8023ca8 <__ieee754_pow+0x190>
 8023ca2:	f1b8 0f00 	cmp.w	r8, #0
 8023ca6:	d122      	bne.n	8023cee <__ieee754_pow+0x1d6>
 8023ca8:	f1b9 0f00 	cmp.w	r9, #0
 8023cac:	da05      	bge.n	8023cba <__ieee754_pow+0x1a2>
 8023cae:	4602      	mov	r2, r0
 8023cb0:	460b      	mov	r3, r1
 8023cb2:	2000      	movs	r0, #0
 8023cb4:	493d      	ldr	r1, [pc, #244]	@ (8023dac <__ieee754_pow+0x294>)
 8023cb6:	f7dc fdc9 	bl	800084c <__aeabi_ddiv>
 8023cba:	2d00      	cmp	r5, #0
 8023cbc:	f6bf af49 	bge.w	8023b52 <__ieee754_pow+0x3a>
 8023cc0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8023cc4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8023cc8:	ea58 0804 	orrs.w	r8, r8, r4
 8023ccc:	d108      	bne.n	8023ce0 <__ieee754_pow+0x1c8>
 8023cce:	4602      	mov	r2, r0
 8023cd0:	460b      	mov	r3, r1
 8023cd2:	4610      	mov	r0, r2
 8023cd4:	4619      	mov	r1, r3
 8023cd6:	f7dc fad7 	bl	8000288 <__aeabi_dsub>
 8023cda:	4602      	mov	r2, r0
 8023cdc:	460b      	mov	r3, r1
 8023cde:	e794      	b.n	8023c0a <__ieee754_pow+0xf2>
 8023ce0:	2c01      	cmp	r4, #1
 8023ce2:	f47f af36 	bne.w	8023b52 <__ieee754_pow+0x3a>
 8023ce6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023cea:	4619      	mov	r1, r3
 8023cec:	e731      	b.n	8023b52 <__ieee754_pow+0x3a>
 8023cee:	0feb      	lsrs	r3, r5, #31
 8023cf0:	3b01      	subs	r3, #1
 8023cf2:	ea53 0204 	orrs.w	r2, r3, r4
 8023cf6:	d102      	bne.n	8023cfe <__ieee754_pow+0x1e6>
 8023cf8:	4632      	mov	r2, r6
 8023cfa:	463b      	mov	r3, r7
 8023cfc:	e7e9      	b.n	8023cd2 <__ieee754_pow+0x1ba>
 8023cfe:	3c01      	subs	r4, #1
 8023d00:	431c      	orrs	r4, r3
 8023d02:	d016      	beq.n	8023d32 <__ieee754_pow+0x21a>
 8023d04:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8023d90 <__ieee754_pow+0x278>
 8023d08:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8023d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023d10:	f240 8112 	bls.w	8023f38 <__ieee754_pow+0x420>
 8023d14:	4b28      	ldr	r3, [pc, #160]	@ (8023db8 <__ieee754_pow+0x2a0>)
 8023d16:	459a      	cmp	sl, r3
 8023d18:	4b25      	ldr	r3, [pc, #148]	@ (8023db0 <__ieee754_pow+0x298>)
 8023d1a:	d916      	bls.n	8023d4a <__ieee754_pow+0x232>
 8023d1c:	4598      	cmp	r8, r3
 8023d1e:	d80b      	bhi.n	8023d38 <__ieee754_pow+0x220>
 8023d20:	f1b9 0f00 	cmp.w	r9, #0
 8023d24:	da0b      	bge.n	8023d3e <__ieee754_pow+0x226>
 8023d26:	2000      	movs	r0, #0
 8023d28:	b011      	add	sp, #68	@ 0x44
 8023d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d2e:	f001 be83 	b.w	8025a38 <__math_oflow>
 8023d32:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8023d98 <__ieee754_pow+0x280>
 8023d36:	e7e7      	b.n	8023d08 <__ieee754_pow+0x1f0>
 8023d38:	f1b9 0f00 	cmp.w	r9, #0
 8023d3c:	dcf3      	bgt.n	8023d26 <__ieee754_pow+0x20e>
 8023d3e:	2000      	movs	r0, #0
 8023d40:	b011      	add	sp, #68	@ 0x44
 8023d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d46:	f001 be6f 	b.w	8025a28 <__math_uflow>
 8023d4a:	4598      	cmp	r8, r3
 8023d4c:	d20c      	bcs.n	8023d68 <__ieee754_pow+0x250>
 8023d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d52:	2200      	movs	r2, #0
 8023d54:	2300      	movs	r3, #0
 8023d56:	f7dc fec1 	bl	8000adc <__aeabi_dcmplt>
 8023d5a:	3800      	subs	r0, #0
 8023d5c:	bf18      	it	ne
 8023d5e:	2001      	movne	r0, #1
 8023d60:	f1b9 0f00 	cmp.w	r9, #0
 8023d64:	daec      	bge.n	8023d40 <__ieee754_pow+0x228>
 8023d66:	e7df      	b.n	8023d28 <__ieee754_pow+0x210>
 8023d68:	4b10      	ldr	r3, [pc, #64]	@ (8023dac <__ieee754_pow+0x294>)
 8023d6a:	4598      	cmp	r8, r3
 8023d6c:	f04f 0200 	mov.w	r2, #0
 8023d70:	d924      	bls.n	8023dbc <__ieee754_pow+0x2a4>
 8023d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d76:	2300      	movs	r3, #0
 8023d78:	f7dc feb0 	bl	8000adc <__aeabi_dcmplt>
 8023d7c:	3800      	subs	r0, #0
 8023d7e:	bf18      	it	ne
 8023d80:	2001      	movne	r0, #1
 8023d82:	f1b9 0f00 	cmp.w	r9, #0
 8023d86:	dccf      	bgt.n	8023d28 <__ieee754_pow+0x210>
 8023d88:	e7da      	b.n	8023d40 <__ieee754_pow+0x228>
 8023d8a:	bf00      	nop
 8023d8c:	f3af 8000 	nop.w
 8023d90:	00000000 	.word	0x00000000
 8023d94:	3ff00000 	.word	0x3ff00000
 8023d98:	00000000 	.word	0x00000000
 8023d9c:	bff00000 	.word	0xbff00000
 8023da0:	fff00000 	.word	0xfff00000
 8023da4:	7ff00000 	.word	0x7ff00000
 8023da8:	433fffff 	.word	0x433fffff
 8023dac:	3ff00000 	.word	0x3ff00000
 8023db0:	3fefffff 	.word	0x3fefffff
 8023db4:	3fe00000 	.word	0x3fe00000
 8023db8:	43f00000 	.word	0x43f00000
 8023dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8023f28 <__ieee754_pow+0x410>)
 8023dbe:	f7dc fa63 	bl	8000288 <__aeabi_dsub>
 8023dc2:	a351      	add	r3, pc, #324	@ (adr r3, 8023f08 <__ieee754_pow+0x3f0>)
 8023dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dc8:	4604      	mov	r4, r0
 8023dca:	460d      	mov	r5, r1
 8023dcc:	f7dc fc14 	bl	80005f8 <__aeabi_dmul>
 8023dd0:	a34f      	add	r3, pc, #316	@ (adr r3, 8023f10 <__ieee754_pow+0x3f8>)
 8023dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd6:	4606      	mov	r6, r0
 8023dd8:	460f      	mov	r7, r1
 8023dda:	4620      	mov	r0, r4
 8023ddc:	4629      	mov	r1, r5
 8023dde:	f7dc fc0b 	bl	80005f8 <__aeabi_dmul>
 8023de2:	4b52      	ldr	r3, [pc, #328]	@ (8023f2c <__ieee754_pow+0x414>)
 8023de4:	4682      	mov	sl, r0
 8023de6:	468b      	mov	fp, r1
 8023de8:	2200      	movs	r2, #0
 8023dea:	4620      	mov	r0, r4
 8023dec:	4629      	mov	r1, r5
 8023dee:	f7dc fc03 	bl	80005f8 <__aeabi_dmul>
 8023df2:	4602      	mov	r2, r0
 8023df4:	460b      	mov	r3, r1
 8023df6:	a148      	add	r1, pc, #288	@ (adr r1, 8023f18 <__ieee754_pow+0x400>)
 8023df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023dfc:	f7dc fa44 	bl	8000288 <__aeabi_dsub>
 8023e00:	4622      	mov	r2, r4
 8023e02:	462b      	mov	r3, r5
 8023e04:	f7dc fbf8 	bl	80005f8 <__aeabi_dmul>
 8023e08:	4602      	mov	r2, r0
 8023e0a:	460b      	mov	r3, r1
 8023e0c:	2000      	movs	r0, #0
 8023e0e:	4948      	ldr	r1, [pc, #288]	@ (8023f30 <__ieee754_pow+0x418>)
 8023e10:	f7dc fa3a 	bl	8000288 <__aeabi_dsub>
 8023e14:	4622      	mov	r2, r4
 8023e16:	4680      	mov	r8, r0
 8023e18:	4689      	mov	r9, r1
 8023e1a:	462b      	mov	r3, r5
 8023e1c:	4620      	mov	r0, r4
 8023e1e:	4629      	mov	r1, r5
 8023e20:	f7dc fbea 	bl	80005f8 <__aeabi_dmul>
 8023e24:	4602      	mov	r2, r0
 8023e26:	460b      	mov	r3, r1
 8023e28:	4640      	mov	r0, r8
 8023e2a:	4649      	mov	r1, r9
 8023e2c:	f7dc fbe4 	bl	80005f8 <__aeabi_dmul>
 8023e30:	a33b      	add	r3, pc, #236	@ (adr r3, 8023f20 <__ieee754_pow+0x408>)
 8023e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e36:	f7dc fbdf 	bl	80005f8 <__aeabi_dmul>
 8023e3a:	4602      	mov	r2, r0
 8023e3c:	460b      	mov	r3, r1
 8023e3e:	4650      	mov	r0, sl
 8023e40:	4659      	mov	r1, fp
 8023e42:	f7dc fa21 	bl	8000288 <__aeabi_dsub>
 8023e46:	4602      	mov	r2, r0
 8023e48:	460b      	mov	r3, r1
 8023e4a:	4680      	mov	r8, r0
 8023e4c:	4689      	mov	r9, r1
 8023e4e:	4630      	mov	r0, r6
 8023e50:	4639      	mov	r1, r7
 8023e52:	f7dc fa1b 	bl	800028c <__adddf3>
 8023e56:	2400      	movs	r4, #0
 8023e58:	4632      	mov	r2, r6
 8023e5a:	463b      	mov	r3, r7
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	460d      	mov	r5, r1
 8023e60:	f7dc fa12 	bl	8000288 <__aeabi_dsub>
 8023e64:	4602      	mov	r2, r0
 8023e66:	460b      	mov	r3, r1
 8023e68:	4640      	mov	r0, r8
 8023e6a:	4649      	mov	r1, r9
 8023e6c:	f7dc fa0c 	bl	8000288 <__aeabi_dsub>
 8023e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023e78:	2300      	movs	r3, #0
 8023e7a:	9304      	str	r3, [sp, #16]
 8023e7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8023e80:	4606      	mov	r6, r0
 8023e82:	460f      	mov	r7, r1
 8023e84:	4652      	mov	r2, sl
 8023e86:	465b      	mov	r3, fp
 8023e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023e8c:	f7dc f9fc 	bl	8000288 <__aeabi_dsub>
 8023e90:	4622      	mov	r2, r4
 8023e92:	462b      	mov	r3, r5
 8023e94:	f7dc fbb0 	bl	80005f8 <__aeabi_dmul>
 8023e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023e9c:	4680      	mov	r8, r0
 8023e9e:	4689      	mov	r9, r1
 8023ea0:	4630      	mov	r0, r6
 8023ea2:	4639      	mov	r1, r7
 8023ea4:	f7dc fba8 	bl	80005f8 <__aeabi_dmul>
 8023ea8:	4602      	mov	r2, r0
 8023eaa:	460b      	mov	r3, r1
 8023eac:	4640      	mov	r0, r8
 8023eae:	4649      	mov	r1, r9
 8023eb0:	f7dc f9ec 	bl	800028c <__adddf3>
 8023eb4:	4652      	mov	r2, sl
 8023eb6:	465b      	mov	r3, fp
 8023eb8:	4606      	mov	r6, r0
 8023eba:	460f      	mov	r7, r1
 8023ebc:	4620      	mov	r0, r4
 8023ebe:	4629      	mov	r1, r5
 8023ec0:	f7dc fb9a 	bl	80005f8 <__aeabi_dmul>
 8023ec4:	460b      	mov	r3, r1
 8023ec6:	4602      	mov	r2, r0
 8023ec8:	4680      	mov	r8, r0
 8023eca:	4689      	mov	r9, r1
 8023ecc:	4630      	mov	r0, r6
 8023ece:	4639      	mov	r1, r7
 8023ed0:	f7dc f9dc 	bl	800028c <__adddf3>
 8023ed4:	4b17      	ldr	r3, [pc, #92]	@ (8023f34 <__ieee754_pow+0x41c>)
 8023ed6:	4299      	cmp	r1, r3
 8023ed8:	4604      	mov	r4, r0
 8023eda:	460d      	mov	r5, r1
 8023edc:	468a      	mov	sl, r1
 8023ede:	468b      	mov	fp, r1
 8023ee0:	f340 82ef 	ble.w	80244c2 <__ieee754_pow+0x9aa>
 8023ee4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8023ee8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8023eec:	4303      	orrs	r3, r0
 8023eee:	f000 81e8 	beq.w	80242c2 <__ieee754_pow+0x7aa>
 8023ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ef6:	2200      	movs	r2, #0
 8023ef8:	2300      	movs	r3, #0
 8023efa:	f7dc fdef 	bl	8000adc <__aeabi_dcmplt>
 8023efe:	3800      	subs	r0, #0
 8023f00:	bf18      	it	ne
 8023f02:	2001      	movne	r0, #1
 8023f04:	e710      	b.n	8023d28 <__ieee754_pow+0x210>
 8023f06:	bf00      	nop
 8023f08:	60000000 	.word	0x60000000
 8023f0c:	3ff71547 	.word	0x3ff71547
 8023f10:	f85ddf44 	.word	0xf85ddf44
 8023f14:	3e54ae0b 	.word	0x3e54ae0b
 8023f18:	55555555 	.word	0x55555555
 8023f1c:	3fd55555 	.word	0x3fd55555
 8023f20:	652b82fe 	.word	0x652b82fe
 8023f24:	3ff71547 	.word	0x3ff71547
 8023f28:	3ff00000 	.word	0x3ff00000
 8023f2c:	3fd00000 	.word	0x3fd00000
 8023f30:	3fe00000 	.word	0x3fe00000
 8023f34:	408fffff 	.word	0x408fffff
 8023f38:	4bd5      	ldr	r3, [pc, #852]	@ (8024290 <__ieee754_pow+0x778>)
 8023f3a:	402b      	ands	r3, r5
 8023f3c:	2200      	movs	r2, #0
 8023f3e:	b92b      	cbnz	r3, 8023f4c <__ieee754_pow+0x434>
 8023f40:	4bd4      	ldr	r3, [pc, #848]	@ (8024294 <__ieee754_pow+0x77c>)
 8023f42:	f7dc fb59 	bl	80005f8 <__aeabi_dmul>
 8023f46:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8023f4a:	468b      	mov	fp, r1
 8023f4c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8023f50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8023f54:	4413      	add	r3, r2
 8023f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8023f58:	4bcf      	ldr	r3, [pc, #828]	@ (8024298 <__ieee754_pow+0x780>)
 8023f5a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8023f5e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8023f62:	459b      	cmp	fp, r3
 8023f64:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8023f68:	dd08      	ble.n	8023f7c <__ieee754_pow+0x464>
 8023f6a:	4bcc      	ldr	r3, [pc, #816]	@ (802429c <__ieee754_pow+0x784>)
 8023f6c:	459b      	cmp	fp, r3
 8023f6e:	f340 81a5 	ble.w	80242bc <__ieee754_pow+0x7a4>
 8023f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f74:	3301      	adds	r3, #1
 8023f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8023f78:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8023f7c:	f04f 0a00 	mov.w	sl, #0
 8023f80:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8023f84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023f86:	4bc6      	ldr	r3, [pc, #792]	@ (80242a0 <__ieee754_pow+0x788>)
 8023f88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8023f8c:	ed93 7b00 	vldr	d7, [r3]
 8023f90:	4629      	mov	r1, r5
 8023f92:	ec53 2b17 	vmov	r2, r3, d7
 8023f96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023f9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023f9e:	f7dc f973 	bl	8000288 <__aeabi_dsub>
 8023fa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023fa6:	4606      	mov	r6, r0
 8023fa8:	460f      	mov	r7, r1
 8023faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023fae:	f7dc f96d 	bl	800028c <__adddf3>
 8023fb2:	4602      	mov	r2, r0
 8023fb4:	460b      	mov	r3, r1
 8023fb6:	2000      	movs	r0, #0
 8023fb8:	49ba      	ldr	r1, [pc, #744]	@ (80242a4 <__ieee754_pow+0x78c>)
 8023fba:	f7dc fc47 	bl	800084c <__aeabi_ddiv>
 8023fbe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8023fc2:	4602      	mov	r2, r0
 8023fc4:	460b      	mov	r3, r1
 8023fc6:	4630      	mov	r0, r6
 8023fc8:	4639      	mov	r1, r7
 8023fca:	f7dc fb15 	bl	80005f8 <__aeabi_dmul>
 8023fce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023fd2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8023fd6:	106d      	asrs	r5, r5, #1
 8023fd8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8023fdc:	f04f 0b00 	mov.w	fp, #0
 8023fe0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8023fe4:	4661      	mov	r1, ip
 8023fe6:	2200      	movs	r2, #0
 8023fe8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8023fec:	4658      	mov	r0, fp
 8023fee:	46e1      	mov	r9, ip
 8023ff0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8023ff4:	4614      	mov	r4, r2
 8023ff6:	461d      	mov	r5, r3
 8023ff8:	f7dc fafe 	bl	80005f8 <__aeabi_dmul>
 8023ffc:	4602      	mov	r2, r0
 8023ffe:	460b      	mov	r3, r1
 8024000:	4630      	mov	r0, r6
 8024002:	4639      	mov	r1, r7
 8024004:	f7dc f940 	bl	8000288 <__aeabi_dsub>
 8024008:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802400c:	4606      	mov	r6, r0
 802400e:	460f      	mov	r7, r1
 8024010:	4620      	mov	r0, r4
 8024012:	4629      	mov	r1, r5
 8024014:	f7dc f938 	bl	8000288 <__aeabi_dsub>
 8024018:	4602      	mov	r2, r0
 802401a:	460b      	mov	r3, r1
 802401c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024020:	f7dc f932 	bl	8000288 <__aeabi_dsub>
 8024024:	465a      	mov	r2, fp
 8024026:	464b      	mov	r3, r9
 8024028:	f7dc fae6 	bl	80005f8 <__aeabi_dmul>
 802402c:	4602      	mov	r2, r0
 802402e:	460b      	mov	r3, r1
 8024030:	4630      	mov	r0, r6
 8024032:	4639      	mov	r1, r7
 8024034:	f7dc f928 	bl	8000288 <__aeabi_dsub>
 8024038:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802403c:	f7dc fadc 	bl	80005f8 <__aeabi_dmul>
 8024040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024044:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024048:	4610      	mov	r0, r2
 802404a:	4619      	mov	r1, r3
 802404c:	f7dc fad4 	bl	80005f8 <__aeabi_dmul>
 8024050:	a37d      	add	r3, pc, #500	@ (adr r3, 8024248 <__ieee754_pow+0x730>)
 8024052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024056:	4604      	mov	r4, r0
 8024058:	460d      	mov	r5, r1
 802405a:	f7dc facd 	bl	80005f8 <__aeabi_dmul>
 802405e:	a37c      	add	r3, pc, #496	@ (adr r3, 8024250 <__ieee754_pow+0x738>)
 8024060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024064:	f7dc f912 	bl	800028c <__adddf3>
 8024068:	4622      	mov	r2, r4
 802406a:	462b      	mov	r3, r5
 802406c:	f7dc fac4 	bl	80005f8 <__aeabi_dmul>
 8024070:	a379      	add	r3, pc, #484	@ (adr r3, 8024258 <__ieee754_pow+0x740>)
 8024072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024076:	f7dc f909 	bl	800028c <__adddf3>
 802407a:	4622      	mov	r2, r4
 802407c:	462b      	mov	r3, r5
 802407e:	f7dc fabb 	bl	80005f8 <__aeabi_dmul>
 8024082:	a377      	add	r3, pc, #476	@ (adr r3, 8024260 <__ieee754_pow+0x748>)
 8024084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024088:	f7dc f900 	bl	800028c <__adddf3>
 802408c:	4622      	mov	r2, r4
 802408e:	462b      	mov	r3, r5
 8024090:	f7dc fab2 	bl	80005f8 <__aeabi_dmul>
 8024094:	a374      	add	r3, pc, #464	@ (adr r3, 8024268 <__ieee754_pow+0x750>)
 8024096:	e9d3 2300 	ldrd	r2, r3, [r3]
 802409a:	f7dc f8f7 	bl	800028c <__adddf3>
 802409e:	4622      	mov	r2, r4
 80240a0:	462b      	mov	r3, r5
 80240a2:	f7dc faa9 	bl	80005f8 <__aeabi_dmul>
 80240a6:	a372      	add	r3, pc, #456	@ (adr r3, 8024270 <__ieee754_pow+0x758>)
 80240a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240ac:	f7dc f8ee 	bl	800028c <__adddf3>
 80240b0:	4622      	mov	r2, r4
 80240b2:	4606      	mov	r6, r0
 80240b4:	460f      	mov	r7, r1
 80240b6:	462b      	mov	r3, r5
 80240b8:	4620      	mov	r0, r4
 80240ba:	4629      	mov	r1, r5
 80240bc:	f7dc fa9c 	bl	80005f8 <__aeabi_dmul>
 80240c0:	4602      	mov	r2, r0
 80240c2:	460b      	mov	r3, r1
 80240c4:	4630      	mov	r0, r6
 80240c6:	4639      	mov	r1, r7
 80240c8:	f7dc fa96 	bl	80005f8 <__aeabi_dmul>
 80240cc:	465a      	mov	r2, fp
 80240ce:	4604      	mov	r4, r0
 80240d0:	460d      	mov	r5, r1
 80240d2:	464b      	mov	r3, r9
 80240d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80240d8:	f7dc f8d8 	bl	800028c <__adddf3>
 80240dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80240e0:	f7dc fa8a 	bl	80005f8 <__aeabi_dmul>
 80240e4:	4622      	mov	r2, r4
 80240e6:	462b      	mov	r3, r5
 80240e8:	f7dc f8d0 	bl	800028c <__adddf3>
 80240ec:	465a      	mov	r2, fp
 80240ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80240f2:	464b      	mov	r3, r9
 80240f4:	4658      	mov	r0, fp
 80240f6:	4649      	mov	r1, r9
 80240f8:	f7dc fa7e 	bl	80005f8 <__aeabi_dmul>
 80240fc:	4b6a      	ldr	r3, [pc, #424]	@ (80242a8 <__ieee754_pow+0x790>)
 80240fe:	2200      	movs	r2, #0
 8024100:	4606      	mov	r6, r0
 8024102:	460f      	mov	r7, r1
 8024104:	f7dc f8c2 	bl	800028c <__adddf3>
 8024108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802410c:	f7dc f8be 	bl	800028c <__adddf3>
 8024110:	46d8      	mov	r8, fp
 8024112:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8024116:	460d      	mov	r5, r1
 8024118:	465a      	mov	r2, fp
 802411a:	460b      	mov	r3, r1
 802411c:	4640      	mov	r0, r8
 802411e:	4649      	mov	r1, r9
 8024120:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8024124:	f7dc fa68 	bl	80005f8 <__aeabi_dmul>
 8024128:	465c      	mov	r4, fp
 802412a:	4680      	mov	r8, r0
 802412c:	4689      	mov	r9, r1
 802412e:	4b5e      	ldr	r3, [pc, #376]	@ (80242a8 <__ieee754_pow+0x790>)
 8024130:	2200      	movs	r2, #0
 8024132:	4620      	mov	r0, r4
 8024134:	4629      	mov	r1, r5
 8024136:	f7dc f8a7 	bl	8000288 <__aeabi_dsub>
 802413a:	4632      	mov	r2, r6
 802413c:	463b      	mov	r3, r7
 802413e:	f7dc f8a3 	bl	8000288 <__aeabi_dsub>
 8024142:	4602      	mov	r2, r0
 8024144:	460b      	mov	r3, r1
 8024146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802414a:	f7dc f89d 	bl	8000288 <__aeabi_dsub>
 802414e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024152:	f7dc fa51 	bl	80005f8 <__aeabi_dmul>
 8024156:	4622      	mov	r2, r4
 8024158:	4606      	mov	r6, r0
 802415a:	460f      	mov	r7, r1
 802415c:	462b      	mov	r3, r5
 802415e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024162:	f7dc fa49 	bl	80005f8 <__aeabi_dmul>
 8024166:	4602      	mov	r2, r0
 8024168:	460b      	mov	r3, r1
 802416a:	4630      	mov	r0, r6
 802416c:	4639      	mov	r1, r7
 802416e:	f7dc f88d 	bl	800028c <__adddf3>
 8024172:	4606      	mov	r6, r0
 8024174:	460f      	mov	r7, r1
 8024176:	4602      	mov	r2, r0
 8024178:	460b      	mov	r3, r1
 802417a:	4640      	mov	r0, r8
 802417c:	4649      	mov	r1, r9
 802417e:	f7dc f885 	bl	800028c <__adddf3>
 8024182:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8024186:	a33c      	add	r3, pc, #240	@ (adr r3, 8024278 <__ieee754_pow+0x760>)
 8024188:	e9d3 2300 	ldrd	r2, r3, [r3]
 802418c:	4658      	mov	r0, fp
 802418e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8024192:	460d      	mov	r5, r1
 8024194:	f7dc fa30 	bl	80005f8 <__aeabi_dmul>
 8024198:	465c      	mov	r4, fp
 802419a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802419e:	4642      	mov	r2, r8
 80241a0:	464b      	mov	r3, r9
 80241a2:	4620      	mov	r0, r4
 80241a4:	4629      	mov	r1, r5
 80241a6:	f7dc f86f 	bl	8000288 <__aeabi_dsub>
 80241aa:	4602      	mov	r2, r0
 80241ac:	460b      	mov	r3, r1
 80241ae:	4630      	mov	r0, r6
 80241b0:	4639      	mov	r1, r7
 80241b2:	f7dc f869 	bl	8000288 <__aeabi_dsub>
 80241b6:	a332      	add	r3, pc, #200	@ (adr r3, 8024280 <__ieee754_pow+0x768>)
 80241b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241bc:	f7dc fa1c 	bl	80005f8 <__aeabi_dmul>
 80241c0:	a331      	add	r3, pc, #196	@ (adr r3, 8024288 <__ieee754_pow+0x770>)
 80241c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241c6:	4606      	mov	r6, r0
 80241c8:	460f      	mov	r7, r1
 80241ca:	4620      	mov	r0, r4
 80241cc:	4629      	mov	r1, r5
 80241ce:	f7dc fa13 	bl	80005f8 <__aeabi_dmul>
 80241d2:	4602      	mov	r2, r0
 80241d4:	460b      	mov	r3, r1
 80241d6:	4630      	mov	r0, r6
 80241d8:	4639      	mov	r1, r7
 80241da:	f7dc f857 	bl	800028c <__adddf3>
 80241de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80241e0:	4b32      	ldr	r3, [pc, #200]	@ (80242ac <__ieee754_pow+0x794>)
 80241e2:	4413      	add	r3, r2
 80241e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241e8:	f7dc f850 	bl	800028c <__adddf3>
 80241ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80241f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80241f2:	f7dc f997 	bl	8000524 <__aeabi_i2d>
 80241f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80241f8:	4b2d      	ldr	r3, [pc, #180]	@ (80242b0 <__ieee754_pow+0x798>)
 80241fa:	4413      	add	r3, r2
 80241fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024200:	4606      	mov	r6, r0
 8024202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024206:	460f      	mov	r7, r1
 8024208:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802420c:	f7dc f83e 	bl	800028c <__adddf3>
 8024210:	4642      	mov	r2, r8
 8024212:	464b      	mov	r3, r9
 8024214:	f7dc f83a 	bl	800028c <__adddf3>
 8024218:	4632      	mov	r2, r6
 802421a:	463b      	mov	r3, r7
 802421c:	f7dc f836 	bl	800028c <__adddf3>
 8024220:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8024224:	4632      	mov	r2, r6
 8024226:	463b      	mov	r3, r7
 8024228:	4658      	mov	r0, fp
 802422a:	460d      	mov	r5, r1
 802422c:	f7dc f82c 	bl	8000288 <__aeabi_dsub>
 8024230:	4642      	mov	r2, r8
 8024232:	464b      	mov	r3, r9
 8024234:	f7dc f828 	bl	8000288 <__aeabi_dsub>
 8024238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802423c:	f7dc f824 	bl	8000288 <__aeabi_dsub>
 8024240:	465c      	mov	r4, fp
 8024242:	4602      	mov	r2, r0
 8024244:	e036      	b.n	80242b4 <__ieee754_pow+0x79c>
 8024246:	bf00      	nop
 8024248:	4a454eef 	.word	0x4a454eef
 802424c:	3fca7e28 	.word	0x3fca7e28
 8024250:	93c9db65 	.word	0x93c9db65
 8024254:	3fcd864a 	.word	0x3fcd864a
 8024258:	a91d4101 	.word	0xa91d4101
 802425c:	3fd17460 	.word	0x3fd17460
 8024260:	518f264d 	.word	0x518f264d
 8024264:	3fd55555 	.word	0x3fd55555
 8024268:	db6fabff 	.word	0xdb6fabff
 802426c:	3fdb6db6 	.word	0x3fdb6db6
 8024270:	33333303 	.word	0x33333303
 8024274:	3fe33333 	.word	0x3fe33333
 8024278:	e0000000 	.word	0xe0000000
 802427c:	3feec709 	.word	0x3feec709
 8024280:	dc3a03fd 	.word	0xdc3a03fd
 8024284:	3feec709 	.word	0x3feec709
 8024288:	145b01f5 	.word	0x145b01f5
 802428c:	be3e2fe0 	.word	0xbe3e2fe0
 8024290:	7ff00000 	.word	0x7ff00000
 8024294:	43400000 	.word	0x43400000
 8024298:	0003988e 	.word	0x0003988e
 802429c:	000bb679 	.word	0x000bb679
 80242a0:	08026920 	.word	0x08026920
 80242a4:	3ff00000 	.word	0x3ff00000
 80242a8:	40080000 	.word	0x40080000
 80242ac:	08026900 	.word	0x08026900
 80242b0:	08026910 	.word	0x08026910
 80242b4:	460b      	mov	r3, r1
 80242b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80242ba:	e5d7      	b.n	8023e6c <__ieee754_pow+0x354>
 80242bc:	f04f 0a01 	mov.w	sl, #1
 80242c0:	e65e      	b.n	8023f80 <__ieee754_pow+0x468>
 80242c2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8024594 <__ieee754_pow+0xa7c>)
 80242c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242c8:	4630      	mov	r0, r6
 80242ca:	4639      	mov	r1, r7
 80242cc:	f7db ffde 	bl	800028c <__adddf3>
 80242d0:	4642      	mov	r2, r8
 80242d2:	e9cd 0100 	strd	r0, r1, [sp]
 80242d6:	464b      	mov	r3, r9
 80242d8:	4620      	mov	r0, r4
 80242da:	4629      	mov	r1, r5
 80242dc:	f7db ffd4 	bl	8000288 <__aeabi_dsub>
 80242e0:	4602      	mov	r2, r0
 80242e2:	460b      	mov	r3, r1
 80242e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242e8:	f7dc fc16 	bl	8000b18 <__aeabi_dcmpgt>
 80242ec:	2800      	cmp	r0, #0
 80242ee:	f47f ae00 	bne.w	8023ef2 <__ieee754_pow+0x3da>
 80242f2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80242f6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80242fa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80242fe:	fa43 fa0a 	asr.w	sl, r3, sl
 8024302:	44da      	add	sl, fp
 8024304:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8024308:	489d      	ldr	r0, [pc, #628]	@ (8024580 <__ieee754_pow+0xa68>)
 802430a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 802430e:	4108      	asrs	r0, r1
 8024310:	ea00 030a 	and.w	r3, r0, sl
 8024314:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8024318:	f1c1 0114 	rsb	r1, r1, #20
 802431c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8024320:	fa4a fa01 	asr.w	sl, sl, r1
 8024324:	f1bb 0f00 	cmp.w	fp, #0
 8024328:	4640      	mov	r0, r8
 802432a:	4649      	mov	r1, r9
 802432c:	f04f 0200 	mov.w	r2, #0
 8024330:	bfb8      	it	lt
 8024332:	f1ca 0a00 	rsblt	sl, sl, #0
 8024336:	f7db ffa7 	bl	8000288 <__aeabi_dsub>
 802433a:	4680      	mov	r8, r0
 802433c:	4689      	mov	r9, r1
 802433e:	4632      	mov	r2, r6
 8024340:	463b      	mov	r3, r7
 8024342:	4640      	mov	r0, r8
 8024344:	4649      	mov	r1, r9
 8024346:	f7db ffa1 	bl	800028c <__adddf3>
 802434a:	2400      	movs	r4, #0
 802434c:	a37c      	add	r3, pc, #496	@ (adr r3, 8024540 <__ieee754_pow+0xa28>)
 802434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024352:	4620      	mov	r0, r4
 8024354:	460d      	mov	r5, r1
 8024356:	f7dc f94f 	bl	80005f8 <__aeabi_dmul>
 802435a:	4642      	mov	r2, r8
 802435c:	e9cd 0100 	strd	r0, r1, [sp]
 8024360:	464b      	mov	r3, r9
 8024362:	4620      	mov	r0, r4
 8024364:	4629      	mov	r1, r5
 8024366:	f7db ff8f 	bl	8000288 <__aeabi_dsub>
 802436a:	4602      	mov	r2, r0
 802436c:	460b      	mov	r3, r1
 802436e:	4630      	mov	r0, r6
 8024370:	4639      	mov	r1, r7
 8024372:	f7db ff89 	bl	8000288 <__aeabi_dsub>
 8024376:	a374      	add	r3, pc, #464	@ (adr r3, 8024548 <__ieee754_pow+0xa30>)
 8024378:	e9d3 2300 	ldrd	r2, r3, [r3]
 802437c:	f7dc f93c 	bl	80005f8 <__aeabi_dmul>
 8024380:	a373      	add	r3, pc, #460	@ (adr r3, 8024550 <__ieee754_pow+0xa38>)
 8024382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024386:	4680      	mov	r8, r0
 8024388:	4689      	mov	r9, r1
 802438a:	4620      	mov	r0, r4
 802438c:	4629      	mov	r1, r5
 802438e:	f7dc f933 	bl	80005f8 <__aeabi_dmul>
 8024392:	4602      	mov	r2, r0
 8024394:	460b      	mov	r3, r1
 8024396:	4640      	mov	r0, r8
 8024398:	4649      	mov	r1, r9
 802439a:	f7db ff77 	bl	800028c <__adddf3>
 802439e:	4604      	mov	r4, r0
 80243a0:	460d      	mov	r5, r1
 80243a2:	4602      	mov	r2, r0
 80243a4:	460b      	mov	r3, r1
 80243a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80243aa:	f7db ff6f 	bl	800028c <__adddf3>
 80243ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80243b2:	4680      	mov	r8, r0
 80243b4:	4689      	mov	r9, r1
 80243b6:	f7db ff67 	bl	8000288 <__aeabi_dsub>
 80243ba:	4602      	mov	r2, r0
 80243bc:	460b      	mov	r3, r1
 80243be:	4620      	mov	r0, r4
 80243c0:	4629      	mov	r1, r5
 80243c2:	f7db ff61 	bl	8000288 <__aeabi_dsub>
 80243c6:	4642      	mov	r2, r8
 80243c8:	4606      	mov	r6, r0
 80243ca:	460f      	mov	r7, r1
 80243cc:	464b      	mov	r3, r9
 80243ce:	4640      	mov	r0, r8
 80243d0:	4649      	mov	r1, r9
 80243d2:	f7dc f911 	bl	80005f8 <__aeabi_dmul>
 80243d6:	a360      	add	r3, pc, #384	@ (adr r3, 8024558 <__ieee754_pow+0xa40>)
 80243d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243dc:	4604      	mov	r4, r0
 80243de:	460d      	mov	r5, r1
 80243e0:	f7dc f90a 	bl	80005f8 <__aeabi_dmul>
 80243e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8024560 <__ieee754_pow+0xa48>)
 80243e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243ea:	f7db ff4d 	bl	8000288 <__aeabi_dsub>
 80243ee:	4622      	mov	r2, r4
 80243f0:	462b      	mov	r3, r5
 80243f2:	f7dc f901 	bl	80005f8 <__aeabi_dmul>
 80243f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8024568 <__ieee754_pow+0xa50>)
 80243f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243fc:	f7db ff46 	bl	800028c <__adddf3>
 8024400:	4622      	mov	r2, r4
 8024402:	462b      	mov	r3, r5
 8024404:	f7dc f8f8 	bl	80005f8 <__aeabi_dmul>
 8024408:	a359      	add	r3, pc, #356	@ (adr r3, 8024570 <__ieee754_pow+0xa58>)
 802440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802440e:	f7db ff3b 	bl	8000288 <__aeabi_dsub>
 8024412:	4622      	mov	r2, r4
 8024414:	462b      	mov	r3, r5
 8024416:	f7dc f8ef 	bl	80005f8 <__aeabi_dmul>
 802441a:	a357      	add	r3, pc, #348	@ (adr r3, 8024578 <__ieee754_pow+0xa60>)
 802441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024420:	f7db ff34 	bl	800028c <__adddf3>
 8024424:	4622      	mov	r2, r4
 8024426:	462b      	mov	r3, r5
 8024428:	f7dc f8e6 	bl	80005f8 <__aeabi_dmul>
 802442c:	4602      	mov	r2, r0
 802442e:	460b      	mov	r3, r1
 8024430:	4640      	mov	r0, r8
 8024432:	4649      	mov	r1, r9
 8024434:	f7db ff28 	bl	8000288 <__aeabi_dsub>
 8024438:	4604      	mov	r4, r0
 802443a:	460d      	mov	r5, r1
 802443c:	4602      	mov	r2, r0
 802443e:	460b      	mov	r3, r1
 8024440:	4640      	mov	r0, r8
 8024442:	4649      	mov	r1, r9
 8024444:	f7dc f8d8 	bl	80005f8 <__aeabi_dmul>
 8024448:	2200      	movs	r2, #0
 802444a:	e9cd 0100 	strd	r0, r1, [sp]
 802444e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8024452:	4620      	mov	r0, r4
 8024454:	4629      	mov	r1, r5
 8024456:	f7db ff17 	bl	8000288 <__aeabi_dsub>
 802445a:	4602      	mov	r2, r0
 802445c:	460b      	mov	r3, r1
 802445e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024462:	f7dc f9f3 	bl	800084c <__aeabi_ddiv>
 8024466:	4632      	mov	r2, r6
 8024468:	4604      	mov	r4, r0
 802446a:	460d      	mov	r5, r1
 802446c:	463b      	mov	r3, r7
 802446e:	4640      	mov	r0, r8
 8024470:	4649      	mov	r1, r9
 8024472:	f7dc f8c1 	bl	80005f8 <__aeabi_dmul>
 8024476:	4632      	mov	r2, r6
 8024478:	463b      	mov	r3, r7
 802447a:	f7db ff07 	bl	800028c <__adddf3>
 802447e:	4602      	mov	r2, r0
 8024480:	460b      	mov	r3, r1
 8024482:	4620      	mov	r0, r4
 8024484:	4629      	mov	r1, r5
 8024486:	f7db feff 	bl	8000288 <__aeabi_dsub>
 802448a:	4642      	mov	r2, r8
 802448c:	464b      	mov	r3, r9
 802448e:	f7db fefb 	bl	8000288 <__aeabi_dsub>
 8024492:	460b      	mov	r3, r1
 8024494:	4602      	mov	r2, r0
 8024496:	493b      	ldr	r1, [pc, #236]	@ (8024584 <__ieee754_pow+0xa6c>)
 8024498:	2000      	movs	r0, #0
 802449a:	f7db fef5 	bl	8000288 <__aeabi_dsub>
 802449e:	ec41 0b10 	vmov	d0, r0, r1
 80244a2:	ee10 3a90 	vmov	r3, s1
 80244a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80244aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80244ae:	da30      	bge.n	8024512 <__ieee754_pow+0x9fa>
 80244b0:	4650      	mov	r0, sl
 80244b2:	f001 fa0d 	bl	80258d0 <scalbn>
 80244b6:	ec51 0b10 	vmov	r0, r1, d0
 80244ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80244be:	f7ff bbd2 	b.w	8023c66 <__ieee754_pow+0x14e>
 80244c2:	4c31      	ldr	r4, [pc, #196]	@ (8024588 <__ieee754_pow+0xa70>)
 80244c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80244c8:	42a3      	cmp	r3, r4
 80244ca:	d91a      	bls.n	8024502 <__ieee754_pow+0x9ea>
 80244cc:	4b2f      	ldr	r3, [pc, #188]	@ (802458c <__ieee754_pow+0xa74>)
 80244ce:	440b      	add	r3, r1
 80244d0:	4303      	orrs	r3, r0
 80244d2:	d009      	beq.n	80244e8 <__ieee754_pow+0x9d0>
 80244d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80244d8:	2200      	movs	r2, #0
 80244da:	2300      	movs	r3, #0
 80244dc:	f7dc fafe 	bl	8000adc <__aeabi_dcmplt>
 80244e0:	3800      	subs	r0, #0
 80244e2:	bf18      	it	ne
 80244e4:	2001      	movne	r0, #1
 80244e6:	e42b      	b.n	8023d40 <__ieee754_pow+0x228>
 80244e8:	4642      	mov	r2, r8
 80244ea:	464b      	mov	r3, r9
 80244ec:	f7db fecc 	bl	8000288 <__aeabi_dsub>
 80244f0:	4632      	mov	r2, r6
 80244f2:	463b      	mov	r3, r7
 80244f4:	f7dc fb06 	bl	8000b04 <__aeabi_dcmpge>
 80244f8:	2800      	cmp	r0, #0
 80244fa:	d1eb      	bne.n	80244d4 <__ieee754_pow+0x9bc>
 80244fc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 802459c <__ieee754_pow+0xa84>
 8024500:	e6f7      	b.n	80242f2 <__ieee754_pow+0x7da>
 8024502:	469a      	mov	sl, r3
 8024504:	4b22      	ldr	r3, [pc, #136]	@ (8024590 <__ieee754_pow+0xa78>)
 8024506:	459a      	cmp	sl, r3
 8024508:	f63f aef3 	bhi.w	80242f2 <__ieee754_pow+0x7da>
 802450c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8024510:	e715      	b.n	802433e <__ieee754_pow+0x826>
 8024512:	ec51 0b10 	vmov	r0, r1, d0
 8024516:	4619      	mov	r1, r3
 8024518:	e7cf      	b.n	80244ba <__ieee754_pow+0x9a2>
 802451a:	491a      	ldr	r1, [pc, #104]	@ (8024584 <__ieee754_pow+0xa6c>)
 802451c:	2000      	movs	r0, #0
 802451e:	f7ff bb18 	b.w	8023b52 <__ieee754_pow+0x3a>
 8024522:	2000      	movs	r0, #0
 8024524:	2100      	movs	r1, #0
 8024526:	f7ff bb14 	b.w	8023b52 <__ieee754_pow+0x3a>
 802452a:	4630      	mov	r0, r6
 802452c:	4639      	mov	r1, r7
 802452e:	f7ff bb10 	b.w	8023b52 <__ieee754_pow+0x3a>
 8024532:	460c      	mov	r4, r1
 8024534:	f7ff bb5e 	b.w	8023bf4 <__ieee754_pow+0xdc>
 8024538:	2400      	movs	r4, #0
 802453a:	f7ff bb49 	b.w	8023bd0 <__ieee754_pow+0xb8>
 802453e:	bf00      	nop
 8024540:	00000000 	.word	0x00000000
 8024544:	3fe62e43 	.word	0x3fe62e43
 8024548:	fefa39ef 	.word	0xfefa39ef
 802454c:	3fe62e42 	.word	0x3fe62e42
 8024550:	0ca86c39 	.word	0x0ca86c39
 8024554:	be205c61 	.word	0xbe205c61
 8024558:	72bea4d0 	.word	0x72bea4d0
 802455c:	3e663769 	.word	0x3e663769
 8024560:	c5d26bf1 	.word	0xc5d26bf1
 8024564:	3ebbbd41 	.word	0x3ebbbd41
 8024568:	af25de2c 	.word	0xaf25de2c
 802456c:	3f11566a 	.word	0x3f11566a
 8024570:	16bebd93 	.word	0x16bebd93
 8024574:	3f66c16c 	.word	0x3f66c16c
 8024578:	5555553e 	.word	0x5555553e
 802457c:	3fc55555 	.word	0x3fc55555
 8024580:	fff00000 	.word	0xfff00000
 8024584:	3ff00000 	.word	0x3ff00000
 8024588:	4090cbff 	.word	0x4090cbff
 802458c:	3f6f3400 	.word	0x3f6f3400
 8024590:	3fe00000 	.word	0x3fe00000
 8024594:	652b82fe 	.word	0x652b82fe
 8024598:	3c971547 	.word	0x3c971547
 802459c:	4090cc00 	.word	0x4090cc00

080245a0 <__ieee754_rem_pio2>:
 80245a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a4:	ec57 6b10 	vmov	r6, r7, d0
 80245a8:	4bc5      	ldr	r3, [pc, #788]	@ (80248c0 <__ieee754_rem_pio2+0x320>)
 80245aa:	b08d      	sub	sp, #52	@ 0x34
 80245ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80245b0:	4598      	cmp	r8, r3
 80245b2:	4604      	mov	r4, r0
 80245b4:	9704      	str	r7, [sp, #16]
 80245b6:	d807      	bhi.n	80245c8 <__ieee754_rem_pio2+0x28>
 80245b8:	2200      	movs	r2, #0
 80245ba:	2300      	movs	r3, #0
 80245bc:	ed80 0b00 	vstr	d0, [r0]
 80245c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80245c4:	2500      	movs	r5, #0
 80245c6:	e028      	b.n	802461a <__ieee754_rem_pio2+0x7a>
 80245c8:	4bbe      	ldr	r3, [pc, #760]	@ (80248c4 <__ieee754_rem_pio2+0x324>)
 80245ca:	4598      	cmp	r8, r3
 80245cc:	d878      	bhi.n	80246c0 <__ieee754_rem_pio2+0x120>
 80245ce:	9b04      	ldr	r3, [sp, #16]
 80245d0:	4dbd      	ldr	r5, [pc, #756]	@ (80248c8 <__ieee754_rem_pio2+0x328>)
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	4630      	mov	r0, r6
 80245d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8024888 <__ieee754_rem_pio2+0x2e8>)
 80245d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245dc:	4639      	mov	r1, r7
 80245de:	dd38      	ble.n	8024652 <__ieee754_rem_pio2+0xb2>
 80245e0:	f7db fe52 	bl	8000288 <__aeabi_dsub>
 80245e4:	45a8      	cmp	r8, r5
 80245e6:	4606      	mov	r6, r0
 80245e8:	460f      	mov	r7, r1
 80245ea:	d01a      	beq.n	8024622 <__ieee754_rem_pio2+0x82>
 80245ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8024890 <__ieee754_rem_pio2+0x2f0>)
 80245ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245f2:	f7db fe49 	bl	8000288 <__aeabi_dsub>
 80245f6:	4602      	mov	r2, r0
 80245f8:	460b      	mov	r3, r1
 80245fa:	4680      	mov	r8, r0
 80245fc:	4689      	mov	r9, r1
 80245fe:	4630      	mov	r0, r6
 8024600:	4639      	mov	r1, r7
 8024602:	f7db fe41 	bl	8000288 <__aeabi_dsub>
 8024606:	a3a2      	add	r3, pc, #648	@ (adr r3, 8024890 <__ieee754_rem_pio2+0x2f0>)
 8024608:	e9d3 2300 	ldrd	r2, r3, [r3]
 802460c:	f7db fe3c 	bl	8000288 <__aeabi_dsub>
 8024610:	e9c4 8900 	strd	r8, r9, [r4]
 8024614:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024618:	2501      	movs	r5, #1
 802461a:	4628      	mov	r0, r5
 802461c:	b00d      	add	sp, #52	@ 0x34
 802461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024622:	a39d      	add	r3, pc, #628	@ (adr r3, 8024898 <__ieee754_rem_pio2+0x2f8>)
 8024624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024628:	f7db fe2e 	bl	8000288 <__aeabi_dsub>
 802462c:	a39c      	add	r3, pc, #624	@ (adr r3, 80248a0 <__ieee754_rem_pio2+0x300>)
 802462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024632:	4606      	mov	r6, r0
 8024634:	460f      	mov	r7, r1
 8024636:	f7db fe27 	bl	8000288 <__aeabi_dsub>
 802463a:	4602      	mov	r2, r0
 802463c:	460b      	mov	r3, r1
 802463e:	4680      	mov	r8, r0
 8024640:	4689      	mov	r9, r1
 8024642:	4630      	mov	r0, r6
 8024644:	4639      	mov	r1, r7
 8024646:	f7db fe1f 	bl	8000288 <__aeabi_dsub>
 802464a:	a395      	add	r3, pc, #596	@ (adr r3, 80248a0 <__ieee754_rem_pio2+0x300>)
 802464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024650:	e7dc      	b.n	802460c <__ieee754_rem_pio2+0x6c>
 8024652:	f7db fe1b 	bl	800028c <__adddf3>
 8024656:	45a8      	cmp	r8, r5
 8024658:	4606      	mov	r6, r0
 802465a:	460f      	mov	r7, r1
 802465c:	d018      	beq.n	8024690 <__ieee754_rem_pio2+0xf0>
 802465e:	a38c      	add	r3, pc, #560	@ (adr r3, 8024890 <__ieee754_rem_pio2+0x2f0>)
 8024660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024664:	f7db fe12 	bl	800028c <__adddf3>
 8024668:	4602      	mov	r2, r0
 802466a:	460b      	mov	r3, r1
 802466c:	4680      	mov	r8, r0
 802466e:	4689      	mov	r9, r1
 8024670:	4630      	mov	r0, r6
 8024672:	4639      	mov	r1, r7
 8024674:	f7db fe08 	bl	8000288 <__aeabi_dsub>
 8024678:	a385      	add	r3, pc, #532	@ (adr r3, 8024890 <__ieee754_rem_pio2+0x2f0>)
 802467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802467e:	f7db fe05 	bl	800028c <__adddf3>
 8024682:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8024686:	e9c4 8900 	strd	r8, r9, [r4]
 802468a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802468e:	e7c4      	b.n	802461a <__ieee754_rem_pio2+0x7a>
 8024690:	a381      	add	r3, pc, #516	@ (adr r3, 8024898 <__ieee754_rem_pio2+0x2f8>)
 8024692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024696:	f7db fdf9 	bl	800028c <__adddf3>
 802469a:	a381      	add	r3, pc, #516	@ (adr r3, 80248a0 <__ieee754_rem_pio2+0x300>)
 802469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246a0:	4606      	mov	r6, r0
 80246a2:	460f      	mov	r7, r1
 80246a4:	f7db fdf2 	bl	800028c <__adddf3>
 80246a8:	4602      	mov	r2, r0
 80246aa:	460b      	mov	r3, r1
 80246ac:	4680      	mov	r8, r0
 80246ae:	4689      	mov	r9, r1
 80246b0:	4630      	mov	r0, r6
 80246b2:	4639      	mov	r1, r7
 80246b4:	f7db fde8 	bl	8000288 <__aeabi_dsub>
 80246b8:	a379      	add	r3, pc, #484	@ (adr r3, 80248a0 <__ieee754_rem_pio2+0x300>)
 80246ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246be:	e7de      	b.n	802467e <__ieee754_rem_pio2+0xde>
 80246c0:	4b82      	ldr	r3, [pc, #520]	@ (80248cc <__ieee754_rem_pio2+0x32c>)
 80246c2:	4598      	cmp	r8, r3
 80246c4:	f200 80d1 	bhi.w	802486a <__ieee754_rem_pio2+0x2ca>
 80246c8:	f7fd fdbe 	bl	8022248 <fabs>
 80246cc:	ec57 6b10 	vmov	r6, r7, d0
 80246d0:	a375      	add	r3, pc, #468	@ (adr r3, 80248a8 <__ieee754_rem_pio2+0x308>)
 80246d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246d6:	4630      	mov	r0, r6
 80246d8:	4639      	mov	r1, r7
 80246da:	f7db ff8d 	bl	80005f8 <__aeabi_dmul>
 80246de:	4b7c      	ldr	r3, [pc, #496]	@ (80248d0 <__ieee754_rem_pio2+0x330>)
 80246e0:	2200      	movs	r2, #0
 80246e2:	f7db fdd3 	bl	800028c <__adddf3>
 80246e6:	f7dc fa37 	bl	8000b58 <__aeabi_d2iz>
 80246ea:	4605      	mov	r5, r0
 80246ec:	f7db ff1a 	bl	8000524 <__aeabi_i2d>
 80246f0:	4602      	mov	r2, r0
 80246f2:	460b      	mov	r3, r1
 80246f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80246f8:	a363      	add	r3, pc, #396	@ (adr r3, 8024888 <__ieee754_rem_pio2+0x2e8>)
 80246fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246fe:	f7db ff7b 	bl	80005f8 <__aeabi_dmul>
 8024702:	4602      	mov	r2, r0
 8024704:	460b      	mov	r3, r1
 8024706:	4630      	mov	r0, r6
 8024708:	4639      	mov	r1, r7
 802470a:	f7db fdbd 	bl	8000288 <__aeabi_dsub>
 802470e:	a360      	add	r3, pc, #384	@ (adr r3, 8024890 <__ieee754_rem_pio2+0x2f0>)
 8024710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024714:	4682      	mov	sl, r0
 8024716:	468b      	mov	fp, r1
 8024718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802471c:	f7db ff6c 	bl	80005f8 <__aeabi_dmul>
 8024720:	2d1f      	cmp	r5, #31
 8024722:	4606      	mov	r6, r0
 8024724:	460f      	mov	r7, r1
 8024726:	dc0c      	bgt.n	8024742 <__ieee754_rem_pio2+0x1a2>
 8024728:	4b6a      	ldr	r3, [pc, #424]	@ (80248d4 <__ieee754_rem_pio2+0x334>)
 802472a:	1e6a      	subs	r2, r5, #1
 802472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024730:	4543      	cmp	r3, r8
 8024732:	d006      	beq.n	8024742 <__ieee754_rem_pio2+0x1a2>
 8024734:	4632      	mov	r2, r6
 8024736:	463b      	mov	r3, r7
 8024738:	4650      	mov	r0, sl
 802473a:	4659      	mov	r1, fp
 802473c:	f7db fda4 	bl	8000288 <__aeabi_dsub>
 8024740:	e00e      	b.n	8024760 <__ieee754_rem_pio2+0x1c0>
 8024742:	463b      	mov	r3, r7
 8024744:	4632      	mov	r2, r6
 8024746:	4650      	mov	r0, sl
 8024748:	4659      	mov	r1, fp
 802474a:	f7db fd9d 	bl	8000288 <__aeabi_dsub>
 802474e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8024752:	9305      	str	r3, [sp, #20]
 8024754:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024758:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 802475c:	2b10      	cmp	r3, #16
 802475e:	dc02      	bgt.n	8024766 <__ieee754_rem_pio2+0x1c6>
 8024760:	e9c4 0100 	strd	r0, r1, [r4]
 8024764:	e039      	b.n	80247da <__ieee754_rem_pio2+0x23a>
 8024766:	a34c      	add	r3, pc, #304	@ (adr r3, 8024898 <__ieee754_rem_pio2+0x2f8>)
 8024768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802476c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024770:	f7db ff42 	bl	80005f8 <__aeabi_dmul>
 8024774:	4606      	mov	r6, r0
 8024776:	460f      	mov	r7, r1
 8024778:	4602      	mov	r2, r0
 802477a:	460b      	mov	r3, r1
 802477c:	4650      	mov	r0, sl
 802477e:	4659      	mov	r1, fp
 8024780:	f7db fd82 	bl	8000288 <__aeabi_dsub>
 8024784:	4602      	mov	r2, r0
 8024786:	460b      	mov	r3, r1
 8024788:	4680      	mov	r8, r0
 802478a:	4689      	mov	r9, r1
 802478c:	4650      	mov	r0, sl
 802478e:	4659      	mov	r1, fp
 8024790:	f7db fd7a 	bl	8000288 <__aeabi_dsub>
 8024794:	4632      	mov	r2, r6
 8024796:	463b      	mov	r3, r7
 8024798:	f7db fd76 	bl	8000288 <__aeabi_dsub>
 802479c:	a340      	add	r3, pc, #256	@ (adr r3, 80248a0 <__ieee754_rem_pio2+0x300>)
 802479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247a2:	4606      	mov	r6, r0
 80247a4:	460f      	mov	r7, r1
 80247a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80247aa:	f7db ff25 	bl	80005f8 <__aeabi_dmul>
 80247ae:	4632      	mov	r2, r6
 80247b0:	463b      	mov	r3, r7
 80247b2:	f7db fd69 	bl	8000288 <__aeabi_dsub>
 80247b6:	4602      	mov	r2, r0
 80247b8:	460b      	mov	r3, r1
 80247ba:	4606      	mov	r6, r0
 80247bc:	460f      	mov	r7, r1
 80247be:	4640      	mov	r0, r8
 80247c0:	4649      	mov	r1, r9
 80247c2:	f7db fd61 	bl	8000288 <__aeabi_dsub>
 80247c6:	9a05      	ldr	r2, [sp, #20]
 80247c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80247cc:	1ad3      	subs	r3, r2, r3
 80247ce:	2b31      	cmp	r3, #49	@ 0x31
 80247d0:	dc20      	bgt.n	8024814 <__ieee754_rem_pio2+0x274>
 80247d2:	e9c4 0100 	strd	r0, r1, [r4]
 80247d6:	46c2      	mov	sl, r8
 80247d8:	46cb      	mov	fp, r9
 80247da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80247de:	4650      	mov	r0, sl
 80247e0:	4642      	mov	r2, r8
 80247e2:	464b      	mov	r3, r9
 80247e4:	4659      	mov	r1, fp
 80247e6:	f7db fd4f 	bl	8000288 <__aeabi_dsub>
 80247ea:	463b      	mov	r3, r7
 80247ec:	4632      	mov	r2, r6
 80247ee:	f7db fd4b 	bl	8000288 <__aeabi_dsub>
 80247f2:	9b04      	ldr	r3, [sp, #16]
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80247fa:	f6bf af0e 	bge.w	802461a <__ieee754_rem_pio2+0x7a>
 80247fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8024802:	6063      	str	r3, [r4, #4]
 8024804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024808:	f8c4 8000 	str.w	r8, [r4]
 802480c:	60a0      	str	r0, [r4, #8]
 802480e:	60e3      	str	r3, [r4, #12]
 8024810:	426d      	negs	r5, r5
 8024812:	e702      	b.n	802461a <__ieee754_rem_pio2+0x7a>
 8024814:	a326      	add	r3, pc, #152	@ (adr r3, 80248b0 <__ieee754_rem_pio2+0x310>)
 8024816:	e9d3 2300 	ldrd	r2, r3, [r3]
 802481a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802481e:	f7db feeb 	bl	80005f8 <__aeabi_dmul>
 8024822:	4606      	mov	r6, r0
 8024824:	460f      	mov	r7, r1
 8024826:	4602      	mov	r2, r0
 8024828:	460b      	mov	r3, r1
 802482a:	4640      	mov	r0, r8
 802482c:	4649      	mov	r1, r9
 802482e:	f7db fd2b 	bl	8000288 <__aeabi_dsub>
 8024832:	4602      	mov	r2, r0
 8024834:	460b      	mov	r3, r1
 8024836:	4682      	mov	sl, r0
 8024838:	468b      	mov	fp, r1
 802483a:	4640      	mov	r0, r8
 802483c:	4649      	mov	r1, r9
 802483e:	f7db fd23 	bl	8000288 <__aeabi_dsub>
 8024842:	4632      	mov	r2, r6
 8024844:	463b      	mov	r3, r7
 8024846:	f7db fd1f 	bl	8000288 <__aeabi_dsub>
 802484a:	a31b      	add	r3, pc, #108	@ (adr r3, 80248b8 <__ieee754_rem_pio2+0x318>)
 802484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024850:	4606      	mov	r6, r0
 8024852:	460f      	mov	r7, r1
 8024854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024858:	f7db fece 	bl	80005f8 <__aeabi_dmul>
 802485c:	4632      	mov	r2, r6
 802485e:	463b      	mov	r3, r7
 8024860:	f7db fd12 	bl	8000288 <__aeabi_dsub>
 8024864:	4606      	mov	r6, r0
 8024866:	460f      	mov	r7, r1
 8024868:	e764      	b.n	8024734 <__ieee754_rem_pio2+0x194>
 802486a:	4b1b      	ldr	r3, [pc, #108]	@ (80248d8 <__ieee754_rem_pio2+0x338>)
 802486c:	4598      	cmp	r8, r3
 802486e:	d935      	bls.n	80248dc <__ieee754_rem_pio2+0x33c>
 8024870:	4632      	mov	r2, r6
 8024872:	463b      	mov	r3, r7
 8024874:	4630      	mov	r0, r6
 8024876:	4639      	mov	r1, r7
 8024878:	f7db fd06 	bl	8000288 <__aeabi_dsub>
 802487c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024880:	e9c4 0100 	strd	r0, r1, [r4]
 8024884:	e69e      	b.n	80245c4 <__ieee754_rem_pio2+0x24>
 8024886:	bf00      	nop
 8024888:	54400000 	.word	0x54400000
 802488c:	3ff921fb 	.word	0x3ff921fb
 8024890:	1a626331 	.word	0x1a626331
 8024894:	3dd0b461 	.word	0x3dd0b461
 8024898:	1a600000 	.word	0x1a600000
 802489c:	3dd0b461 	.word	0x3dd0b461
 80248a0:	2e037073 	.word	0x2e037073
 80248a4:	3ba3198a 	.word	0x3ba3198a
 80248a8:	6dc9c883 	.word	0x6dc9c883
 80248ac:	3fe45f30 	.word	0x3fe45f30
 80248b0:	2e000000 	.word	0x2e000000
 80248b4:	3ba3198a 	.word	0x3ba3198a
 80248b8:	252049c1 	.word	0x252049c1
 80248bc:	397b839a 	.word	0x397b839a
 80248c0:	3fe921fb 	.word	0x3fe921fb
 80248c4:	4002d97b 	.word	0x4002d97b
 80248c8:	3ff921fb 	.word	0x3ff921fb
 80248cc:	413921fb 	.word	0x413921fb
 80248d0:	3fe00000 	.word	0x3fe00000
 80248d4:	08026930 	.word	0x08026930
 80248d8:	7fefffff 	.word	0x7fefffff
 80248dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80248e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80248e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80248e8:	4630      	mov	r0, r6
 80248ea:	460f      	mov	r7, r1
 80248ec:	f7dc f934 	bl	8000b58 <__aeabi_d2iz>
 80248f0:	f7db fe18 	bl	8000524 <__aeabi_i2d>
 80248f4:	4602      	mov	r2, r0
 80248f6:	460b      	mov	r3, r1
 80248f8:	4630      	mov	r0, r6
 80248fa:	4639      	mov	r1, r7
 80248fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024900:	f7db fcc2 	bl	8000288 <__aeabi_dsub>
 8024904:	4b22      	ldr	r3, [pc, #136]	@ (8024990 <__ieee754_rem_pio2+0x3f0>)
 8024906:	2200      	movs	r2, #0
 8024908:	f7db fe76 	bl	80005f8 <__aeabi_dmul>
 802490c:	460f      	mov	r7, r1
 802490e:	4606      	mov	r6, r0
 8024910:	f7dc f922 	bl	8000b58 <__aeabi_d2iz>
 8024914:	f7db fe06 	bl	8000524 <__aeabi_i2d>
 8024918:	4602      	mov	r2, r0
 802491a:	460b      	mov	r3, r1
 802491c:	4630      	mov	r0, r6
 802491e:	4639      	mov	r1, r7
 8024920:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024924:	f7db fcb0 	bl	8000288 <__aeabi_dsub>
 8024928:	4b19      	ldr	r3, [pc, #100]	@ (8024990 <__ieee754_rem_pio2+0x3f0>)
 802492a:	2200      	movs	r2, #0
 802492c:	f7db fe64 	bl	80005f8 <__aeabi_dmul>
 8024930:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8024934:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8024938:	f04f 0803 	mov.w	r8, #3
 802493c:	2600      	movs	r6, #0
 802493e:	2700      	movs	r7, #0
 8024940:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8024944:	4632      	mov	r2, r6
 8024946:	463b      	mov	r3, r7
 8024948:	46c2      	mov	sl, r8
 802494a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802494e:	f7dc f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8024952:	2800      	cmp	r0, #0
 8024954:	d1f4      	bne.n	8024940 <__ieee754_rem_pio2+0x3a0>
 8024956:	4b0f      	ldr	r3, [pc, #60]	@ (8024994 <__ieee754_rem_pio2+0x3f4>)
 8024958:	9301      	str	r3, [sp, #4]
 802495a:	2302      	movs	r3, #2
 802495c:	9300      	str	r3, [sp, #0]
 802495e:	462a      	mov	r2, r5
 8024960:	4653      	mov	r3, sl
 8024962:	4621      	mov	r1, r4
 8024964:	a806      	add	r0, sp, #24
 8024966:	f001 f873 	bl	8025a50 <__kernel_rem_pio2>
 802496a:	9b04      	ldr	r3, [sp, #16]
 802496c:	2b00      	cmp	r3, #0
 802496e:	4605      	mov	r5, r0
 8024970:	f6bf ae53 	bge.w	802461a <__ieee754_rem_pio2+0x7a>
 8024974:	e9d4 2100 	ldrd	r2, r1, [r4]
 8024978:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802497c:	e9c4 2300 	strd	r2, r3, [r4]
 8024980:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8024984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024988:	e9c4 2302 	strd	r2, r3, [r4, #8]
 802498c:	e740      	b.n	8024810 <__ieee754_rem_pio2+0x270>
 802498e:	bf00      	nop
 8024990:	41700000 	.word	0x41700000
 8024994:	080269b0 	.word	0x080269b0

08024998 <atan>:
 8024998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802499c:	ec55 4b10 	vmov	r4, r5, d0
 80249a0:	4bbf      	ldr	r3, [pc, #764]	@ (8024ca0 <atan+0x308>)
 80249a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80249a6:	429e      	cmp	r6, r3
 80249a8:	46ab      	mov	fp, r5
 80249aa:	d918      	bls.n	80249de <atan+0x46>
 80249ac:	4bbd      	ldr	r3, [pc, #756]	@ (8024ca4 <atan+0x30c>)
 80249ae:	429e      	cmp	r6, r3
 80249b0:	d801      	bhi.n	80249b6 <atan+0x1e>
 80249b2:	d109      	bne.n	80249c8 <atan+0x30>
 80249b4:	b144      	cbz	r4, 80249c8 <atan+0x30>
 80249b6:	4622      	mov	r2, r4
 80249b8:	462b      	mov	r3, r5
 80249ba:	4620      	mov	r0, r4
 80249bc:	4629      	mov	r1, r5
 80249be:	f7db fc65 	bl	800028c <__adddf3>
 80249c2:	4604      	mov	r4, r0
 80249c4:	460d      	mov	r5, r1
 80249c6:	e006      	b.n	80249d6 <atan+0x3e>
 80249c8:	f1bb 0f00 	cmp.w	fp, #0
 80249cc:	f340 812b 	ble.w	8024c26 <atan+0x28e>
 80249d0:	a597      	add	r5, pc, #604	@ (adr r5, 8024c30 <atan+0x298>)
 80249d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80249d6:	ec45 4b10 	vmov	d0, r4, r5
 80249da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249de:	4bb2      	ldr	r3, [pc, #712]	@ (8024ca8 <atan+0x310>)
 80249e0:	429e      	cmp	r6, r3
 80249e2:	d813      	bhi.n	8024a0c <atan+0x74>
 80249e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80249e8:	429e      	cmp	r6, r3
 80249ea:	d80c      	bhi.n	8024a06 <atan+0x6e>
 80249ec:	a392      	add	r3, pc, #584	@ (adr r3, 8024c38 <atan+0x2a0>)
 80249ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249f2:	4620      	mov	r0, r4
 80249f4:	4629      	mov	r1, r5
 80249f6:	f7db fc49 	bl	800028c <__adddf3>
 80249fa:	4bac      	ldr	r3, [pc, #688]	@ (8024cac <atan+0x314>)
 80249fc:	2200      	movs	r2, #0
 80249fe:	f7dc f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8024a02:	2800      	cmp	r0, #0
 8024a04:	d1e7      	bne.n	80249d6 <atan+0x3e>
 8024a06:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8024a0a:	e029      	b.n	8024a60 <atan+0xc8>
 8024a0c:	f7fd fc1c 	bl	8022248 <fabs>
 8024a10:	4ba7      	ldr	r3, [pc, #668]	@ (8024cb0 <atan+0x318>)
 8024a12:	429e      	cmp	r6, r3
 8024a14:	ec55 4b10 	vmov	r4, r5, d0
 8024a18:	f200 80bc 	bhi.w	8024b94 <atan+0x1fc>
 8024a1c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8024a20:	429e      	cmp	r6, r3
 8024a22:	f200 809e 	bhi.w	8024b62 <atan+0x1ca>
 8024a26:	4622      	mov	r2, r4
 8024a28:	462b      	mov	r3, r5
 8024a2a:	4620      	mov	r0, r4
 8024a2c:	4629      	mov	r1, r5
 8024a2e:	f7db fc2d 	bl	800028c <__adddf3>
 8024a32:	4b9e      	ldr	r3, [pc, #632]	@ (8024cac <atan+0x314>)
 8024a34:	2200      	movs	r2, #0
 8024a36:	f7db fc27 	bl	8000288 <__aeabi_dsub>
 8024a3a:	2200      	movs	r2, #0
 8024a3c:	4606      	mov	r6, r0
 8024a3e:	460f      	mov	r7, r1
 8024a40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8024a44:	4620      	mov	r0, r4
 8024a46:	4629      	mov	r1, r5
 8024a48:	f7db fc20 	bl	800028c <__adddf3>
 8024a4c:	4602      	mov	r2, r0
 8024a4e:	460b      	mov	r3, r1
 8024a50:	4630      	mov	r0, r6
 8024a52:	4639      	mov	r1, r7
 8024a54:	f7db fefa 	bl	800084c <__aeabi_ddiv>
 8024a58:	f04f 0a00 	mov.w	sl, #0
 8024a5c:	4604      	mov	r4, r0
 8024a5e:	460d      	mov	r5, r1
 8024a60:	4622      	mov	r2, r4
 8024a62:	462b      	mov	r3, r5
 8024a64:	4620      	mov	r0, r4
 8024a66:	4629      	mov	r1, r5
 8024a68:	f7db fdc6 	bl	80005f8 <__aeabi_dmul>
 8024a6c:	4602      	mov	r2, r0
 8024a6e:	460b      	mov	r3, r1
 8024a70:	4680      	mov	r8, r0
 8024a72:	4689      	mov	r9, r1
 8024a74:	f7db fdc0 	bl	80005f8 <__aeabi_dmul>
 8024a78:	a371      	add	r3, pc, #452	@ (adr r3, 8024c40 <atan+0x2a8>)
 8024a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a7e:	4606      	mov	r6, r0
 8024a80:	460f      	mov	r7, r1
 8024a82:	f7db fdb9 	bl	80005f8 <__aeabi_dmul>
 8024a86:	a370      	add	r3, pc, #448	@ (adr r3, 8024c48 <atan+0x2b0>)
 8024a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a8c:	f7db fbfe 	bl	800028c <__adddf3>
 8024a90:	4632      	mov	r2, r6
 8024a92:	463b      	mov	r3, r7
 8024a94:	f7db fdb0 	bl	80005f8 <__aeabi_dmul>
 8024a98:	a36d      	add	r3, pc, #436	@ (adr r3, 8024c50 <atan+0x2b8>)
 8024a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a9e:	f7db fbf5 	bl	800028c <__adddf3>
 8024aa2:	4632      	mov	r2, r6
 8024aa4:	463b      	mov	r3, r7
 8024aa6:	f7db fda7 	bl	80005f8 <__aeabi_dmul>
 8024aaa:	a36b      	add	r3, pc, #428	@ (adr r3, 8024c58 <atan+0x2c0>)
 8024aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ab0:	f7db fbec 	bl	800028c <__adddf3>
 8024ab4:	4632      	mov	r2, r6
 8024ab6:	463b      	mov	r3, r7
 8024ab8:	f7db fd9e 	bl	80005f8 <__aeabi_dmul>
 8024abc:	a368      	add	r3, pc, #416	@ (adr r3, 8024c60 <atan+0x2c8>)
 8024abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ac2:	f7db fbe3 	bl	800028c <__adddf3>
 8024ac6:	4632      	mov	r2, r6
 8024ac8:	463b      	mov	r3, r7
 8024aca:	f7db fd95 	bl	80005f8 <__aeabi_dmul>
 8024ace:	a366      	add	r3, pc, #408	@ (adr r3, 8024c68 <atan+0x2d0>)
 8024ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ad4:	f7db fbda 	bl	800028c <__adddf3>
 8024ad8:	4642      	mov	r2, r8
 8024ada:	464b      	mov	r3, r9
 8024adc:	f7db fd8c 	bl	80005f8 <__aeabi_dmul>
 8024ae0:	a363      	add	r3, pc, #396	@ (adr r3, 8024c70 <atan+0x2d8>)
 8024ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae6:	4680      	mov	r8, r0
 8024ae8:	4689      	mov	r9, r1
 8024aea:	4630      	mov	r0, r6
 8024aec:	4639      	mov	r1, r7
 8024aee:	f7db fd83 	bl	80005f8 <__aeabi_dmul>
 8024af2:	a361      	add	r3, pc, #388	@ (adr r3, 8024c78 <atan+0x2e0>)
 8024af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024af8:	f7db fbc6 	bl	8000288 <__aeabi_dsub>
 8024afc:	4632      	mov	r2, r6
 8024afe:	463b      	mov	r3, r7
 8024b00:	f7db fd7a 	bl	80005f8 <__aeabi_dmul>
 8024b04:	a35e      	add	r3, pc, #376	@ (adr r3, 8024c80 <atan+0x2e8>)
 8024b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b0a:	f7db fbbd 	bl	8000288 <__aeabi_dsub>
 8024b0e:	4632      	mov	r2, r6
 8024b10:	463b      	mov	r3, r7
 8024b12:	f7db fd71 	bl	80005f8 <__aeabi_dmul>
 8024b16:	a35c      	add	r3, pc, #368	@ (adr r3, 8024c88 <atan+0x2f0>)
 8024b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b1c:	f7db fbb4 	bl	8000288 <__aeabi_dsub>
 8024b20:	4632      	mov	r2, r6
 8024b22:	463b      	mov	r3, r7
 8024b24:	f7db fd68 	bl	80005f8 <__aeabi_dmul>
 8024b28:	a359      	add	r3, pc, #356	@ (adr r3, 8024c90 <atan+0x2f8>)
 8024b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b2e:	f7db fbab 	bl	8000288 <__aeabi_dsub>
 8024b32:	4632      	mov	r2, r6
 8024b34:	463b      	mov	r3, r7
 8024b36:	f7db fd5f 	bl	80005f8 <__aeabi_dmul>
 8024b3a:	4602      	mov	r2, r0
 8024b3c:	460b      	mov	r3, r1
 8024b3e:	4640      	mov	r0, r8
 8024b40:	4649      	mov	r1, r9
 8024b42:	f7db fba3 	bl	800028c <__adddf3>
 8024b46:	4622      	mov	r2, r4
 8024b48:	462b      	mov	r3, r5
 8024b4a:	f7db fd55 	bl	80005f8 <__aeabi_dmul>
 8024b4e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8024b52:	4602      	mov	r2, r0
 8024b54:	460b      	mov	r3, r1
 8024b56:	d148      	bne.n	8024bea <atan+0x252>
 8024b58:	4620      	mov	r0, r4
 8024b5a:	4629      	mov	r1, r5
 8024b5c:	f7db fb94 	bl	8000288 <__aeabi_dsub>
 8024b60:	e72f      	b.n	80249c2 <atan+0x2a>
 8024b62:	4b52      	ldr	r3, [pc, #328]	@ (8024cac <atan+0x314>)
 8024b64:	2200      	movs	r2, #0
 8024b66:	4620      	mov	r0, r4
 8024b68:	4629      	mov	r1, r5
 8024b6a:	f7db fb8d 	bl	8000288 <__aeabi_dsub>
 8024b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8024cac <atan+0x314>)
 8024b70:	4606      	mov	r6, r0
 8024b72:	460f      	mov	r7, r1
 8024b74:	2200      	movs	r2, #0
 8024b76:	4620      	mov	r0, r4
 8024b78:	4629      	mov	r1, r5
 8024b7a:	f7db fb87 	bl	800028c <__adddf3>
 8024b7e:	4602      	mov	r2, r0
 8024b80:	460b      	mov	r3, r1
 8024b82:	4630      	mov	r0, r6
 8024b84:	4639      	mov	r1, r7
 8024b86:	f7db fe61 	bl	800084c <__aeabi_ddiv>
 8024b8a:	f04f 0a01 	mov.w	sl, #1
 8024b8e:	4604      	mov	r4, r0
 8024b90:	460d      	mov	r5, r1
 8024b92:	e765      	b.n	8024a60 <atan+0xc8>
 8024b94:	4b47      	ldr	r3, [pc, #284]	@ (8024cb4 <atan+0x31c>)
 8024b96:	429e      	cmp	r6, r3
 8024b98:	d21c      	bcs.n	8024bd4 <atan+0x23c>
 8024b9a:	4b47      	ldr	r3, [pc, #284]	@ (8024cb8 <atan+0x320>)
 8024b9c:	2200      	movs	r2, #0
 8024b9e:	4620      	mov	r0, r4
 8024ba0:	4629      	mov	r1, r5
 8024ba2:	f7db fb71 	bl	8000288 <__aeabi_dsub>
 8024ba6:	4b44      	ldr	r3, [pc, #272]	@ (8024cb8 <atan+0x320>)
 8024ba8:	4606      	mov	r6, r0
 8024baa:	460f      	mov	r7, r1
 8024bac:	2200      	movs	r2, #0
 8024bae:	4620      	mov	r0, r4
 8024bb0:	4629      	mov	r1, r5
 8024bb2:	f7db fd21 	bl	80005f8 <__aeabi_dmul>
 8024bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8024cac <atan+0x314>)
 8024bb8:	2200      	movs	r2, #0
 8024bba:	f7db fb67 	bl	800028c <__adddf3>
 8024bbe:	4602      	mov	r2, r0
 8024bc0:	460b      	mov	r3, r1
 8024bc2:	4630      	mov	r0, r6
 8024bc4:	4639      	mov	r1, r7
 8024bc6:	f7db fe41 	bl	800084c <__aeabi_ddiv>
 8024bca:	f04f 0a02 	mov.w	sl, #2
 8024bce:	4604      	mov	r4, r0
 8024bd0:	460d      	mov	r5, r1
 8024bd2:	e745      	b.n	8024a60 <atan+0xc8>
 8024bd4:	4622      	mov	r2, r4
 8024bd6:	462b      	mov	r3, r5
 8024bd8:	4938      	ldr	r1, [pc, #224]	@ (8024cbc <atan+0x324>)
 8024bda:	2000      	movs	r0, #0
 8024bdc:	f7db fe36 	bl	800084c <__aeabi_ddiv>
 8024be0:	f04f 0a03 	mov.w	sl, #3
 8024be4:	4604      	mov	r4, r0
 8024be6:	460d      	mov	r5, r1
 8024be8:	e73a      	b.n	8024a60 <atan+0xc8>
 8024bea:	4b35      	ldr	r3, [pc, #212]	@ (8024cc0 <atan+0x328>)
 8024bec:	4e35      	ldr	r6, [pc, #212]	@ (8024cc4 <atan+0x32c>)
 8024bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8024bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bf6:	f7db fb47 	bl	8000288 <__aeabi_dsub>
 8024bfa:	4622      	mov	r2, r4
 8024bfc:	462b      	mov	r3, r5
 8024bfe:	f7db fb43 	bl	8000288 <__aeabi_dsub>
 8024c02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8024c06:	4602      	mov	r2, r0
 8024c08:	460b      	mov	r3, r1
 8024c0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8024c0e:	f7db fb3b 	bl	8000288 <__aeabi_dsub>
 8024c12:	f1bb 0f00 	cmp.w	fp, #0
 8024c16:	4604      	mov	r4, r0
 8024c18:	460d      	mov	r5, r1
 8024c1a:	f6bf aedc 	bge.w	80249d6 <atan+0x3e>
 8024c1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024c22:	461d      	mov	r5, r3
 8024c24:	e6d7      	b.n	80249d6 <atan+0x3e>
 8024c26:	a51c      	add	r5, pc, #112	@ (adr r5, 8024c98 <atan+0x300>)
 8024c28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024c2c:	e6d3      	b.n	80249d6 <atan+0x3e>
 8024c2e:	bf00      	nop
 8024c30:	54442d18 	.word	0x54442d18
 8024c34:	3ff921fb 	.word	0x3ff921fb
 8024c38:	8800759c 	.word	0x8800759c
 8024c3c:	7e37e43c 	.word	0x7e37e43c
 8024c40:	e322da11 	.word	0xe322da11
 8024c44:	3f90ad3a 	.word	0x3f90ad3a
 8024c48:	24760deb 	.word	0x24760deb
 8024c4c:	3fa97b4b 	.word	0x3fa97b4b
 8024c50:	a0d03d51 	.word	0xa0d03d51
 8024c54:	3fb10d66 	.word	0x3fb10d66
 8024c58:	c54c206e 	.word	0xc54c206e
 8024c5c:	3fb745cd 	.word	0x3fb745cd
 8024c60:	920083ff 	.word	0x920083ff
 8024c64:	3fc24924 	.word	0x3fc24924
 8024c68:	5555550d 	.word	0x5555550d
 8024c6c:	3fd55555 	.word	0x3fd55555
 8024c70:	2c6a6c2f 	.word	0x2c6a6c2f
 8024c74:	bfa2b444 	.word	0xbfa2b444
 8024c78:	52defd9a 	.word	0x52defd9a
 8024c7c:	3fadde2d 	.word	0x3fadde2d
 8024c80:	af749a6d 	.word	0xaf749a6d
 8024c84:	3fb3b0f2 	.word	0x3fb3b0f2
 8024c88:	fe231671 	.word	0xfe231671
 8024c8c:	3fbc71c6 	.word	0x3fbc71c6
 8024c90:	9998ebc4 	.word	0x9998ebc4
 8024c94:	3fc99999 	.word	0x3fc99999
 8024c98:	54442d18 	.word	0x54442d18
 8024c9c:	bff921fb 	.word	0xbff921fb
 8024ca0:	440fffff 	.word	0x440fffff
 8024ca4:	7ff00000 	.word	0x7ff00000
 8024ca8:	3fdbffff 	.word	0x3fdbffff
 8024cac:	3ff00000 	.word	0x3ff00000
 8024cb0:	3ff2ffff 	.word	0x3ff2ffff
 8024cb4:	40038000 	.word	0x40038000
 8024cb8:	3ff80000 	.word	0x3ff80000
 8024cbc:	bff00000 	.word	0xbff00000
 8024cc0:	08026ab8 	.word	0x08026ab8
 8024cc4:	08026ad8 	.word	0x08026ad8

08024cc8 <__kernel_cosf>:
 8024cc8:	ee10 3a10 	vmov	r3, s0
 8024ccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8024cd0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8024cd4:	eef0 6a40 	vmov.f32	s13, s0
 8024cd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8024cdc:	d204      	bcs.n	8024ce8 <__kernel_cosf+0x20>
 8024cde:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8024ce2:	ee17 2a90 	vmov	r2, s15
 8024ce6:	b342      	cbz	r2, 8024d3a <__kernel_cosf+0x72>
 8024ce8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8024cec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8024d58 <__kernel_cosf+0x90>
 8024cf0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8024d5c <__kernel_cosf+0x94>
 8024cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8024d60 <__kernel_cosf+0x98>)
 8024cf6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024cfa:	4293      	cmp	r3, r2
 8024cfc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8024d64 <__kernel_cosf+0x9c>
 8024d00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024d04:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8024d68 <__kernel_cosf+0xa0>
 8024d08:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024d0c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8024d6c <__kernel_cosf+0xa4>
 8024d10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024d14:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8024d70 <__kernel_cosf+0xa8>
 8024d18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024d1c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8024d20:	ee26 6a07 	vmul.f32	s12, s12, s14
 8024d24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8024d28:	eee7 0a06 	vfma.f32	s1, s14, s12
 8024d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024d30:	d804      	bhi.n	8024d3c <__kernel_cosf+0x74>
 8024d32:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8024d36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024d3a:	4770      	bx	lr
 8024d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8024d74 <__kernel_cosf+0xac>)
 8024d3e:	4293      	cmp	r3, r2
 8024d40:	bf9a      	itte	ls
 8024d42:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8024d46:	ee07 3a10 	vmovls	s14, r3
 8024d4a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8024d4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024d56:	e7ec      	b.n	8024d32 <__kernel_cosf+0x6a>
 8024d58:	ad47d74e 	.word	0xad47d74e
 8024d5c:	310f74f6 	.word	0x310f74f6
 8024d60:	3e999999 	.word	0x3e999999
 8024d64:	b493f27c 	.word	0xb493f27c
 8024d68:	37d00d01 	.word	0x37d00d01
 8024d6c:	bab60b61 	.word	0xbab60b61
 8024d70:	3d2aaaab 	.word	0x3d2aaaab
 8024d74:	3f480000 	.word	0x3f480000

08024d78 <__kernel_sinf>:
 8024d78:	ee10 3a10 	vmov	r3, s0
 8024d7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8024d80:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8024d84:	d204      	bcs.n	8024d90 <__kernel_sinf+0x18>
 8024d86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024d8a:	ee17 3a90 	vmov	r3, s15
 8024d8e:	b35b      	cbz	r3, 8024de8 <__kernel_sinf+0x70>
 8024d90:	ee20 7a00 	vmul.f32	s14, s0, s0
 8024d94:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8024dec <__kernel_sinf+0x74>
 8024d98:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8024df0 <__kernel_sinf+0x78>
 8024d9c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024da0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8024df4 <__kernel_sinf+0x7c>
 8024da4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024da8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8024df8 <__kernel_sinf+0x80>
 8024dac:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024db0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8024dfc <__kernel_sinf+0x84>
 8024db4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8024db8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024dbc:	b930      	cbnz	r0, 8024dcc <__kernel_sinf+0x54>
 8024dbe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8024e00 <__kernel_sinf+0x88>
 8024dc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024dc6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8024dca:	4770      	bx	lr
 8024dcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8024dd0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8024dd4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8024dd8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8024ddc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8024e04 <__kernel_sinf+0x8c>
 8024de0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8024de4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8024de8:	4770      	bx	lr
 8024dea:	bf00      	nop
 8024dec:	2f2ec9d3 	.word	0x2f2ec9d3
 8024df0:	b2d72f34 	.word	0xb2d72f34
 8024df4:	3638ef1b 	.word	0x3638ef1b
 8024df8:	b9500d01 	.word	0xb9500d01
 8024dfc:	3c088889 	.word	0x3c088889
 8024e00:	be2aaaab 	.word	0xbe2aaaab
 8024e04:	3e2aaaab 	.word	0x3e2aaaab

08024e08 <__kernel_tanf>:
 8024e08:	b508      	push	{r3, lr}
 8024e0a:	ee10 3a10 	vmov	r3, s0
 8024e0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8024e12:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8024e16:	eef0 7a40 	vmov.f32	s15, s0
 8024e1a:	d217      	bcs.n	8024e4c <__kernel_tanf+0x44>
 8024e1c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8024e20:	ee17 1a10 	vmov	r1, s14
 8024e24:	bb41      	cbnz	r1, 8024e78 <__kernel_tanf+0x70>
 8024e26:	1c43      	adds	r3, r0, #1
 8024e28:	4313      	orrs	r3, r2
 8024e2a:	d108      	bne.n	8024e3e <__kernel_tanf+0x36>
 8024e2c:	f7fd fb3a 	bl	80224a4 <fabsf>
 8024e30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024e34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e38:	eeb0 0a67 	vmov.f32	s0, s15
 8024e3c:	bd08      	pop	{r3, pc}
 8024e3e:	2801      	cmp	r0, #1
 8024e40:	d0fa      	beq.n	8024e38 <__kernel_tanf+0x30>
 8024e42:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8024e46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e4a:	e7f5      	b.n	8024e38 <__kernel_tanf+0x30>
 8024e4c:	494c      	ldr	r1, [pc, #304]	@ (8024f80 <__kernel_tanf+0x178>)
 8024e4e:	428a      	cmp	r2, r1
 8024e50:	d312      	bcc.n	8024e78 <__kernel_tanf+0x70>
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8024f84 <__kernel_tanf+0x17c>
 8024e58:	bfb8      	it	lt
 8024e5a:	eef1 7a40 	vneglt.f32	s15, s0
 8024e5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024e62:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8024f88 <__kernel_tanf+0x180>
 8024e66:	bfb8      	it	lt
 8024e68:	eef1 0a60 	vneglt.f32	s1, s1
 8024e6c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8024e70:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8024f8c <__kernel_tanf+0x184>
 8024e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024e78:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8024e7c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8024f90 <__kernel_tanf+0x188>
 8024e80:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8024f94 <__kernel_tanf+0x18c>
 8024e84:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8024f98 <__kernel_tanf+0x190>
 8024e88:	493d      	ldr	r1, [pc, #244]	@ (8024f80 <__kernel_tanf+0x178>)
 8024e8a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8024e8e:	428a      	cmp	r2, r1
 8024e90:	eea7 6a25 	vfma.f32	s12, s14, s11
 8024e94:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8024f9c <__kernel_tanf+0x194>
 8024e98:	eee6 5a07 	vfma.f32	s11, s12, s14
 8024e9c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8024fa0 <__kernel_tanf+0x198>
 8024ea0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8024ea4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8024fa4 <__kernel_tanf+0x19c>
 8024ea8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8024eac:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8024fa8 <__kernel_tanf+0x1a0>
 8024eb0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8024eb4:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8024fac <__kernel_tanf+0x1a4>
 8024eb8:	eee7 5a05 	vfma.f32	s11, s14, s10
 8024ebc:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8024fb0 <__kernel_tanf+0x1a8>
 8024ec0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8024ec4:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8024fb4 <__kernel_tanf+0x1ac>
 8024ec8:	eee5 5a07 	vfma.f32	s11, s10, s14
 8024ecc:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8024fb8 <__kernel_tanf+0x1b0>
 8024ed0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8024ed4:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8024fbc <__kernel_tanf+0x1b4>
 8024ed8:	eee5 5a07 	vfma.f32	s11, s10, s14
 8024edc:	eeb0 7a46 	vmov.f32	s14, s12
 8024ee0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024ee4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8024ee8:	eeb0 6a60 	vmov.f32	s12, s1
 8024eec:	eea7 6a05 	vfma.f32	s12, s14, s10
 8024ef0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8024fc0 <__kernel_tanf+0x1b8>
 8024ef4:	eee6 0a26 	vfma.f32	s1, s12, s13
 8024ef8:	eee5 0a07 	vfma.f32	s1, s10, s14
 8024efc:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8024f00:	d31d      	bcc.n	8024f3e <__kernel_tanf+0x136>
 8024f02:	ee07 0a10 	vmov	s14, r0
 8024f06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024f0a:	ee26 5a06 	vmul.f32	s10, s12, s12
 8024f0e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8024f12:	179b      	asrs	r3, r3, #30
 8024f14:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8024f18:	f003 0302 	and.w	r3, r3, #2
 8024f1c:	f1c3 0301 	rsb	r3, r3, #1
 8024f20:	ee06 3a90 	vmov	s13, r3
 8024f24:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8024f28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8024f2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8024f30:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8024f34:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8024f38:	ee66 7a87 	vmul.f32	s15, s13, s14
 8024f3c:	e77c      	b.n	8024e38 <__kernel_tanf+0x30>
 8024f3e:	2801      	cmp	r0, #1
 8024f40:	d01b      	beq.n	8024f7a <__kernel_tanf+0x172>
 8024f42:	4b20      	ldr	r3, [pc, #128]	@ (8024fc4 <__kernel_tanf+0x1bc>)
 8024f44:	ee16 2a10 	vmov	r2, s12
 8024f48:	401a      	ands	r2, r3
 8024f4a:	ee05 2a90 	vmov	s11, r2
 8024f4e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8024f52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024f56:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8024f5a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8024f5e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8024f62:	ee16 2a90 	vmov	r2, s13
 8024f66:	4013      	ands	r3, r2
 8024f68:	ee07 3a90 	vmov	s15, r3
 8024f6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8024f70:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8024f74:	eee7 7a26 	vfma.f32	s15, s14, s13
 8024f78:	e75e      	b.n	8024e38 <__kernel_tanf+0x30>
 8024f7a:	eef0 7a46 	vmov.f32	s15, s12
 8024f7e:	e75b      	b.n	8024e38 <__kernel_tanf+0x30>
 8024f80:	3f2ca140 	.word	0x3f2ca140
 8024f84:	3f490fda 	.word	0x3f490fda
 8024f88:	33222168 	.word	0x33222168
 8024f8c:	00000000 	.word	0x00000000
 8024f90:	b79bae5f 	.word	0xb79bae5f
 8024f94:	38a3f445 	.word	0x38a3f445
 8024f98:	37d95384 	.word	0x37d95384
 8024f9c:	3a1a26c8 	.word	0x3a1a26c8
 8024fa0:	3b6b6916 	.word	0x3b6b6916
 8024fa4:	3cb327a4 	.word	0x3cb327a4
 8024fa8:	3e088889 	.word	0x3e088889
 8024fac:	3895c07a 	.word	0x3895c07a
 8024fb0:	398137b9 	.word	0x398137b9
 8024fb4:	3abede48 	.word	0x3abede48
 8024fb8:	3c11371f 	.word	0x3c11371f
 8024fbc:	3d5d0dd1 	.word	0x3d5d0dd1
 8024fc0:	3eaaaaab 	.word	0x3eaaaaab
 8024fc4:	fffff000 	.word	0xfffff000

08024fc8 <__ieee754_acosf>:
 8024fc8:	b508      	push	{r3, lr}
 8024fca:	ee10 3a10 	vmov	r3, s0
 8024fce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8024fd2:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8024fd6:	ed2d 8b0c 	vpush	{d8-d13}
 8024fda:	d10a      	bne.n	8024ff2 <__ieee754_acosf+0x2a>
 8024fdc:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8025174 <__ieee754_acosf+0x1ac>
 8024fe0:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8025178 <__ieee754_acosf+0x1b0>
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	bfc8      	it	gt
 8024fe8:	eeb0 0a67 	vmovgt.f32	s0, s15
 8024fec:	ecbd 8b0c 	vpop	{d8-d13}
 8024ff0:	bd08      	pop	{r3, pc}
 8024ff2:	d904      	bls.n	8024ffe <__ieee754_acosf+0x36>
 8024ff4:	ee30 8a40 	vsub.f32	s16, s0, s0
 8024ff8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8024ffc:	e7f6      	b.n	8024fec <__ieee754_acosf+0x24>
 8024ffe:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8025002:	d23c      	bcs.n	802507e <__ieee754_acosf+0xb6>
 8025004:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8025008:	f240 80b1 	bls.w	802516e <__ieee754_acosf+0x1a6>
 802500c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8025010:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 802517c <__ieee754_acosf+0x1b4>
 8025014:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8025180 <__ieee754_acosf+0x1b8>
 8025018:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8025184 <__ieee754_acosf+0x1bc>
 802501c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8025020:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8025188 <__ieee754_acosf+0x1c0>
 8025024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025028:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 802518c <__ieee754_acosf+0x1c4>
 802502c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8025030:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8025190 <__ieee754_acosf+0x1c8>
 8025034:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025038:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8025194 <__ieee754_acosf+0x1cc>
 802503c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8025040:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8025198 <__ieee754_acosf+0x1d0>
 8025044:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8025048:	eddf 6a54 	vldr	s13, [pc, #336]	@ 802519c <__ieee754_acosf+0x1d4>
 802504c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8025050:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80251a0 <__ieee754_acosf+0x1d8>
 8025054:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8025058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802505c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8025060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025064:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80251a4 <__ieee754_acosf+0x1dc>
 8025068:	ee87 6a26 	vdiv.f32	s12, s14, s13
 802506c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8025070:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025074:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80251a8 <__ieee754_acosf+0x1e0>
 8025078:	ee30 0a67 	vsub.f32	s0, s0, s15
 802507c:	e7b6      	b.n	8024fec <__ieee754_acosf+0x24>
 802507e:	2b00      	cmp	r3, #0
 8025080:	eddf da3e 	vldr	s27, [pc, #248]	@ 802517c <__ieee754_acosf+0x1b4>
 8025084:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8025180 <__ieee754_acosf+0x1b8>
 8025088:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8025188 <__ieee754_acosf+0x1c0>
 802508c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 802518c <__ieee754_acosf+0x1c4>
 8025090:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8025190 <__ieee754_acosf+0x1c8>
 8025094:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8025194 <__ieee754_acosf+0x1cc>
 8025098:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8025198 <__ieee754_acosf+0x1d0>
 802509c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8025184 <__ieee754_acosf+0x1bc>
 80250a0:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 802519c <__ieee754_acosf+0x1d4>
 80250a4:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 80251a0 <__ieee754_acosf+0x1d8>
 80250a8:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80250ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80250b0:	da28      	bge.n	8025104 <__ieee754_acosf+0x13c>
 80250b2:	ee30 8a09 	vadd.f32	s16, s0, s18
 80250b6:	ee28 0a27 	vmul.f32	s0, s16, s15
 80250ba:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80250be:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80250c2:	eeac ca80 	vfma.f32	s24, s25, s0
 80250c6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80250ca:	eeec ba00 	vfma.f32	s23, s24, s0
 80250ce:	eeea 9a00 	vfma.f32	s19, s20, s0
 80250d2:	eeab ba80 	vfma.f32	s22, s23, s0
 80250d6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80250da:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80250de:	ee68 8a80 	vmul.f32	s17, s17, s0
 80250e2:	f000 fcb1 	bl	8025a48 <__ieee754_sqrtf>
 80250e6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80250ea:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80251ac <__ieee754_acosf+0x1e4>
 80250ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80250f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80250f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80250fa:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80251b0 <__ieee754_acosf+0x1e8>
 80250fe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8025102:	e773      	b.n	8024fec <__ieee754_acosf+0x24>
 8025104:	ee39 8a40 	vsub.f32	s16, s18, s0
 8025108:	ee28 8a27 	vmul.f32	s16, s16, s15
 802510c:	eeb0 0a48 	vmov.f32	s0, s16
 8025110:	f000 fc9a 	bl	8025a48 <__ieee754_sqrtf>
 8025114:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8025118:	eee8 aa0d 	vfma.f32	s21, s16, s26
 802511c:	eeac ca88 	vfma.f32	s24, s25, s16
 8025120:	eeaa aa88 	vfma.f32	s20, s21, s16
 8025124:	eeec ba08 	vfma.f32	s23, s24, s16
 8025128:	ee10 3a10 	vmov	r3, s0
 802512c:	eeab ba88 	vfma.f32	s22, s23, s16
 8025130:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8025134:	f023 030f 	bic.w	r3, r3, #15
 8025138:	eeea 9a08 	vfma.f32	s19, s20, s16
 802513c:	ee07 3a90 	vmov	s15, r3
 8025140:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8025144:	eeb0 6a48 	vmov.f32	s12, s16
 8025148:	eea7 6ae7 	vfms.f32	s12, s15, s15
 802514c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8025150:	ee70 6a27 	vadd.f32	s13, s0, s15
 8025154:	ee68 8a88 	vmul.f32	s17, s17, s16
 8025158:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802515c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8025160:	eea0 7a26 	vfma.f32	s14, s0, s13
 8025164:	ee37 0a87 	vadd.f32	s0, s15, s14
 8025168:	ee30 0a00 	vadd.f32	s0, s0, s0
 802516c:	e73e      	b.n	8024fec <__ieee754_acosf+0x24>
 802516e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80251b4 <__ieee754_acosf+0x1ec>
 8025172:	e73b      	b.n	8024fec <__ieee754_acosf+0x24>
 8025174:	40490fdb 	.word	0x40490fdb
 8025178:	00000000 	.word	0x00000000
 802517c:	3811ef08 	.word	0x3811ef08
 8025180:	3a4f7f04 	.word	0x3a4f7f04
 8025184:	bf303361 	.word	0xbf303361
 8025188:	bd241146 	.word	0xbd241146
 802518c:	3e4e0aa8 	.word	0x3e4e0aa8
 8025190:	bea6b090 	.word	0xbea6b090
 8025194:	3e2aaaab 	.word	0x3e2aaaab
 8025198:	3d9dc62e 	.word	0x3d9dc62e
 802519c:	4001572d 	.word	0x4001572d
 80251a0:	c019d139 	.word	0xc019d139
 80251a4:	33a22168 	.word	0x33a22168
 80251a8:	3fc90fda 	.word	0x3fc90fda
 80251ac:	b3a22168 	.word	0xb3a22168
 80251b0:	40490fda 	.word	0x40490fda
 80251b4:	3fc90fdb 	.word	0x3fc90fdb

080251b8 <__ieee754_asinf>:
 80251b8:	b538      	push	{r3, r4, r5, lr}
 80251ba:	ee10 5a10 	vmov	r5, s0
 80251be:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80251c2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80251c6:	ed2d 8b04 	vpush	{d8-d9}
 80251ca:	d10c      	bne.n	80251e6 <__ieee754_asinf+0x2e>
 80251cc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8025344 <__ieee754_asinf+0x18c>
 80251d0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8025348 <__ieee754_asinf+0x190>
 80251d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80251d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80251dc:	eeb0 0a67 	vmov.f32	s0, s15
 80251e0:	ecbd 8b04 	vpop	{d8-d9}
 80251e4:	bd38      	pop	{r3, r4, r5, pc}
 80251e6:	d904      	bls.n	80251f2 <__ieee754_asinf+0x3a>
 80251e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80251ec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80251f0:	e7f6      	b.n	80251e0 <__ieee754_asinf+0x28>
 80251f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80251f6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80251fa:	d20b      	bcs.n	8025214 <__ieee754_asinf+0x5c>
 80251fc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8025200:	d252      	bcs.n	80252a8 <__ieee754_asinf+0xf0>
 8025202:	eddf 7a52 	vldr	s15, [pc, #328]	@ 802534c <__ieee754_asinf+0x194>
 8025206:	ee70 7a27 	vadd.f32	s15, s0, s15
 802520a:	eef4 7ae8 	vcmpe.f32	s15, s17
 802520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025212:	dce5      	bgt.n	80251e0 <__ieee754_asinf+0x28>
 8025214:	f7fd f946 	bl	80224a4 <fabsf>
 8025218:	ee38 8ac0 	vsub.f32	s16, s17, s0
 802521c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8025220:	ee28 8a27 	vmul.f32	s16, s16, s15
 8025224:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8025350 <__ieee754_asinf+0x198>
 8025228:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8025354 <__ieee754_asinf+0x19c>
 802522c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8025358 <__ieee754_asinf+0x1a0>
 8025230:	eea8 7a27 	vfma.f32	s14, s16, s15
 8025234:	eddf 7a49 	vldr	s15, [pc, #292]	@ 802535c <__ieee754_asinf+0x1a4>
 8025238:	eee7 7a08 	vfma.f32	s15, s14, s16
 802523c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8025360 <__ieee754_asinf+0x1a8>
 8025240:	eea7 7a88 	vfma.f32	s14, s15, s16
 8025244:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8025364 <__ieee754_asinf+0x1ac>
 8025248:	eee7 7a08 	vfma.f32	s15, s14, s16
 802524c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8025368 <__ieee754_asinf+0x1b0>
 8025250:	eea7 9a88 	vfma.f32	s18, s15, s16
 8025254:	eddf 7a45 	vldr	s15, [pc, #276]	@ 802536c <__ieee754_asinf+0x1b4>
 8025258:	eee8 7a07 	vfma.f32	s15, s16, s14
 802525c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8025370 <__ieee754_asinf+0x1b8>
 8025260:	eea7 7a88 	vfma.f32	s14, s15, s16
 8025264:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8025374 <__ieee754_asinf+0x1bc>
 8025268:	eee7 7a08 	vfma.f32	s15, s14, s16
 802526c:	eeb0 0a48 	vmov.f32	s0, s16
 8025270:	eee7 8a88 	vfma.f32	s17, s15, s16
 8025274:	f000 fbe8 	bl	8025a48 <__ieee754_sqrtf>
 8025278:	4b3f      	ldr	r3, [pc, #252]	@ (8025378 <__ieee754_asinf+0x1c0>)
 802527a:	ee29 9a08 	vmul.f32	s18, s18, s16
 802527e:	429c      	cmp	r4, r3
 8025280:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8025284:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8025288:	d93d      	bls.n	8025306 <__ieee754_asinf+0x14e>
 802528a:	eea0 0a06 	vfma.f32	s0, s0, s12
 802528e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802537c <__ieee754_asinf+0x1c4>
 8025292:	eee0 7a26 	vfma.f32	s15, s0, s13
 8025296:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8025348 <__ieee754_asinf+0x190>
 802529a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802529e:	2d00      	cmp	r5, #0
 80252a0:	bfd8      	it	le
 80252a2:	eeb1 0a40 	vnegle.f32	s0, s0
 80252a6:	e79b      	b.n	80251e0 <__ieee754_asinf+0x28>
 80252a8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80252ac:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8025354 <__ieee754_asinf+0x19c>
 80252b0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8025350 <__ieee754_asinf+0x198>
 80252b4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8025368 <__ieee754_asinf+0x1b0>
 80252b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80252bc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 802535c <__ieee754_asinf+0x1a4>
 80252c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80252c4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8025360 <__ieee754_asinf+0x1a8>
 80252c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80252cc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8025364 <__ieee754_asinf+0x1ac>
 80252d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80252d4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8025358 <__ieee754_asinf+0x1a0>
 80252d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80252dc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 802536c <__ieee754_asinf+0x1b4>
 80252e0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80252e4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8025370 <__ieee754_asinf+0x1b8>
 80252e8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80252ec:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8025374 <__ieee754_asinf+0x1bc>
 80252f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80252f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80252f8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80252fc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8025300:	eea0 0a27 	vfma.f32	s0, s0, s15
 8025304:	e76c      	b.n	80251e0 <__ieee754_asinf+0x28>
 8025306:	ee10 3a10 	vmov	r3, s0
 802530a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 802530e:	f023 030f 	bic.w	r3, r3, #15
 8025312:	ee07 3a10 	vmov	s14, r3
 8025316:	eea7 8a47 	vfms.f32	s16, s14, s14
 802531a:	ee70 5a00 	vadd.f32	s11, s0, s0
 802531e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8025322:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8025344 <__ieee754_asinf+0x18c>
 8025326:	ee88 5a00 	vdiv.f32	s10, s16, s0
 802532a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8025380 <__ieee754_asinf+0x1c8>
 802532e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8025332:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8025336:	eeb0 6a40 	vmov.f32	s12, s0
 802533a:	eea7 6a66 	vfms.f32	s12, s14, s13
 802533e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8025342:	e7aa      	b.n	802529a <__ieee754_asinf+0xe2>
 8025344:	b33bbd2e 	.word	0xb33bbd2e
 8025348:	3fc90fdb 	.word	0x3fc90fdb
 802534c:	7149f2ca 	.word	0x7149f2ca
 8025350:	3a4f7f04 	.word	0x3a4f7f04
 8025354:	3811ef08 	.word	0x3811ef08
 8025358:	3e2aaaab 	.word	0x3e2aaaab
 802535c:	bd241146 	.word	0xbd241146
 8025360:	3e4e0aa8 	.word	0x3e4e0aa8
 8025364:	bea6b090 	.word	0xbea6b090
 8025368:	3d9dc62e 	.word	0x3d9dc62e
 802536c:	bf303361 	.word	0xbf303361
 8025370:	4001572d 	.word	0x4001572d
 8025374:	c019d139 	.word	0xc019d139
 8025378:	3f799999 	.word	0x3f799999
 802537c:	333bbd2e 	.word	0x333bbd2e
 8025380:	3f490fdb 	.word	0x3f490fdb

08025384 <__ieee754_atan2f>:
 8025384:	ee10 2a90 	vmov	r2, s1
 8025388:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802538c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8025390:	b510      	push	{r4, lr}
 8025392:	eef0 7a40 	vmov.f32	s15, s0
 8025396:	d806      	bhi.n	80253a6 <__ieee754_atan2f+0x22>
 8025398:	ee10 0a10 	vmov	r0, s0
 802539c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80253a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80253a4:	d904      	bls.n	80253b0 <__ieee754_atan2f+0x2c>
 80253a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80253aa:	eeb0 0a67 	vmov.f32	s0, s15
 80253ae:	bd10      	pop	{r4, pc}
 80253b0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80253b4:	d103      	bne.n	80253be <__ieee754_atan2f+0x3a>
 80253b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253ba:	f000 b9b3 	b.w	8025724 <atanf>
 80253be:	1794      	asrs	r4, r2, #30
 80253c0:	f004 0402 	and.w	r4, r4, #2
 80253c4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80253c8:	b943      	cbnz	r3, 80253dc <__ieee754_atan2f+0x58>
 80253ca:	2c02      	cmp	r4, #2
 80253cc:	d05e      	beq.n	802548c <__ieee754_atan2f+0x108>
 80253ce:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80254a0 <__ieee754_atan2f+0x11c>
 80253d2:	2c03      	cmp	r4, #3
 80253d4:	bf08      	it	eq
 80253d6:	eef0 7a47 	vmoveq.f32	s15, s14
 80253da:	e7e6      	b.n	80253aa <__ieee754_atan2f+0x26>
 80253dc:	b941      	cbnz	r1, 80253f0 <__ieee754_atan2f+0x6c>
 80253de:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80254a4 <__ieee754_atan2f+0x120>
 80253e2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80254a8 <__ieee754_atan2f+0x124>
 80253e6:	2800      	cmp	r0, #0
 80253e8:	bfb8      	it	lt
 80253ea:	eef0 7a47 	vmovlt.f32	s15, s14
 80253ee:	e7dc      	b.n	80253aa <__ieee754_atan2f+0x26>
 80253f0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80253f4:	d110      	bne.n	8025418 <__ieee754_atan2f+0x94>
 80253f6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80253fa:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80253fe:	d107      	bne.n	8025410 <__ieee754_atan2f+0x8c>
 8025400:	2c02      	cmp	r4, #2
 8025402:	d846      	bhi.n	8025492 <__ieee754_atan2f+0x10e>
 8025404:	4b29      	ldr	r3, [pc, #164]	@ (80254ac <__ieee754_atan2f+0x128>)
 8025406:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802540a:	edd3 7a00 	vldr	s15, [r3]
 802540e:	e7cc      	b.n	80253aa <__ieee754_atan2f+0x26>
 8025410:	2c02      	cmp	r4, #2
 8025412:	d841      	bhi.n	8025498 <__ieee754_atan2f+0x114>
 8025414:	4b26      	ldr	r3, [pc, #152]	@ (80254b0 <__ieee754_atan2f+0x12c>)
 8025416:	e7f6      	b.n	8025406 <__ieee754_atan2f+0x82>
 8025418:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802541c:	d0df      	beq.n	80253de <__ieee754_atan2f+0x5a>
 802541e:	1a5b      	subs	r3, r3, r1
 8025420:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8025424:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8025428:	da1a      	bge.n	8025460 <__ieee754_atan2f+0xdc>
 802542a:	2a00      	cmp	r2, #0
 802542c:	da01      	bge.n	8025432 <__ieee754_atan2f+0xae>
 802542e:	313c      	adds	r1, #60	@ 0x3c
 8025430:	db19      	blt.n	8025466 <__ieee754_atan2f+0xe2>
 8025432:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8025436:	f7fd f835 	bl	80224a4 <fabsf>
 802543a:	f000 f973 	bl	8025724 <atanf>
 802543e:	eef0 7a40 	vmov.f32	s15, s0
 8025442:	2c01      	cmp	r4, #1
 8025444:	d012      	beq.n	802546c <__ieee754_atan2f+0xe8>
 8025446:	2c02      	cmp	r4, #2
 8025448:	d017      	beq.n	802547a <__ieee754_atan2f+0xf6>
 802544a:	2c00      	cmp	r4, #0
 802544c:	d0ad      	beq.n	80253aa <__ieee754_atan2f+0x26>
 802544e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80254b4 <__ieee754_atan2f+0x130>
 8025452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025456:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80254b8 <__ieee754_atan2f+0x134>
 802545a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802545e:	e7a4      	b.n	80253aa <__ieee754_atan2f+0x26>
 8025460:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80254a4 <__ieee754_atan2f+0x120>
 8025464:	e7ed      	b.n	8025442 <__ieee754_atan2f+0xbe>
 8025466:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80254bc <__ieee754_atan2f+0x138>
 802546a:	e7ea      	b.n	8025442 <__ieee754_atan2f+0xbe>
 802546c:	ee17 3a90 	vmov	r3, s15
 8025470:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8025474:	ee07 3a90 	vmov	s15, r3
 8025478:	e797      	b.n	80253aa <__ieee754_atan2f+0x26>
 802547a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80254b4 <__ieee754_atan2f+0x130>
 802547e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025482:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80254b8 <__ieee754_atan2f+0x134>
 8025486:	ee77 7a67 	vsub.f32	s15, s14, s15
 802548a:	e78e      	b.n	80253aa <__ieee754_atan2f+0x26>
 802548c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80254b8 <__ieee754_atan2f+0x134>
 8025490:	e78b      	b.n	80253aa <__ieee754_atan2f+0x26>
 8025492:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80254c0 <__ieee754_atan2f+0x13c>
 8025496:	e788      	b.n	80253aa <__ieee754_atan2f+0x26>
 8025498:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80254bc <__ieee754_atan2f+0x138>
 802549c:	e785      	b.n	80253aa <__ieee754_atan2f+0x26>
 802549e:	bf00      	nop
 80254a0:	c0490fdb 	.word	0xc0490fdb
 80254a4:	3fc90fdb 	.word	0x3fc90fdb
 80254a8:	bfc90fdb 	.word	0xbfc90fdb
 80254ac:	08026b04 	.word	0x08026b04
 80254b0:	08026af8 	.word	0x08026af8
 80254b4:	33bbbd2e 	.word	0x33bbbd2e
 80254b8:	40490fdb 	.word	0x40490fdb
 80254bc:	00000000 	.word	0x00000000
 80254c0:	3f490fdb 	.word	0x3f490fdb

080254c4 <__ieee754_rem_pio2f>:
 80254c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80254c6:	ee10 6a10 	vmov	r6, s0
 80254ca:	4b88      	ldr	r3, [pc, #544]	@ (80256ec <__ieee754_rem_pio2f+0x228>)
 80254cc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80254d0:	429d      	cmp	r5, r3
 80254d2:	b087      	sub	sp, #28
 80254d4:	4604      	mov	r4, r0
 80254d6:	d805      	bhi.n	80254e4 <__ieee754_rem_pio2f+0x20>
 80254d8:	2300      	movs	r3, #0
 80254da:	ed80 0a00 	vstr	s0, [r0]
 80254de:	6043      	str	r3, [r0, #4]
 80254e0:	2000      	movs	r0, #0
 80254e2:	e022      	b.n	802552a <__ieee754_rem_pio2f+0x66>
 80254e4:	4b82      	ldr	r3, [pc, #520]	@ (80256f0 <__ieee754_rem_pio2f+0x22c>)
 80254e6:	429d      	cmp	r5, r3
 80254e8:	d83a      	bhi.n	8025560 <__ieee754_rem_pio2f+0x9c>
 80254ea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80254ee:	2e00      	cmp	r6, #0
 80254f0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80256f4 <__ieee754_rem_pio2f+0x230>
 80254f4:	4a80      	ldr	r2, [pc, #512]	@ (80256f8 <__ieee754_rem_pio2f+0x234>)
 80254f6:	f023 030f 	bic.w	r3, r3, #15
 80254fa:	dd18      	ble.n	802552e <__ieee754_rem_pio2f+0x6a>
 80254fc:	4293      	cmp	r3, r2
 80254fe:	ee70 7a47 	vsub.f32	s15, s0, s14
 8025502:	bf09      	itett	eq
 8025504:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80256fc <__ieee754_rem_pio2f+0x238>
 8025508:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8025700 <__ieee754_rem_pio2f+0x23c>
 802550c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8025704 <__ieee754_rem_pio2f+0x240>
 8025510:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8025514:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8025518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802551c:	ed80 7a00 	vstr	s14, [r0]
 8025520:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025524:	edc0 7a01 	vstr	s15, [r0, #4]
 8025528:	2001      	movs	r0, #1
 802552a:	b007      	add	sp, #28
 802552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802552e:	4293      	cmp	r3, r2
 8025530:	ee70 7a07 	vadd.f32	s15, s0, s14
 8025534:	bf09      	itett	eq
 8025536:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80256fc <__ieee754_rem_pio2f+0x238>
 802553a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8025700 <__ieee754_rem_pio2f+0x23c>
 802553e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8025704 <__ieee754_rem_pio2f+0x240>
 8025542:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8025546:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802554a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802554e:	ed80 7a00 	vstr	s14, [r0]
 8025552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025556:	edc0 7a01 	vstr	s15, [r0, #4]
 802555a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802555e:	e7e4      	b.n	802552a <__ieee754_rem_pio2f+0x66>
 8025560:	4b69      	ldr	r3, [pc, #420]	@ (8025708 <__ieee754_rem_pio2f+0x244>)
 8025562:	429d      	cmp	r5, r3
 8025564:	d873      	bhi.n	802564e <__ieee754_rem_pio2f+0x18a>
 8025566:	f7fc ff9d 	bl	80224a4 <fabsf>
 802556a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 802570c <__ieee754_rem_pio2f+0x248>
 802556e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8025572:	eee0 7a07 	vfma.f32	s15, s0, s14
 8025576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802557a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802557e:	ee17 0a90 	vmov	r0, s15
 8025582:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80256f4 <__ieee754_rem_pio2f+0x230>
 8025586:	eea7 0a67 	vfms.f32	s0, s14, s15
 802558a:	281f      	cmp	r0, #31
 802558c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8025700 <__ieee754_rem_pio2f+0x23c>
 8025590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025594:	eeb1 6a47 	vneg.f32	s12, s14
 8025598:	ee70 6a67 	vsub.f32	s13, s0, s15
 802559c:	ee16 1a90 	vmov	r1, s13
 80255a0:	dc09      	bgt.n	80255b6 <__ieee754_rem_pio2f+0xf2>
 80255a2:	4a5b      	ldr	r2, [pc, #364]	@ (8025710 <__ieee754_rem_pio2f+0x24c>)
 80255a4:	1e47      	subs	r7, r0, #1
 80255a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80255aa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80255ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80255b2:	4293      	cmp	r3, r2
 80255b4:	d107      	bne.n	80255c6 <__ieee754_rem_pio2f+0x102>
 80255b6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80255ba:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80255be:	2a08      	cmp	r2, #8
 80255c0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80255c4:	dc14      	bgt.n	80255f0 <__ieee754_rem_pio2f+0x12c>
 80255c6:	6021      	str	r1, [r4, #0]
 80255c8:	ed94 7a00 	vldr	s14, [r4]
 80255cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80255d0:	2e00      	cmp	r6, #0
 80255d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80255d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80255da:	daa6      	bge.n	802552a <__ieee754_rem_pio2f+0x66>
 80255dc:	eeb1 7a47 	vneg.f32	s14, s14
 80255e0:	eeb1 0a40 	vneg.f32	s0, s0
 80255e4:	ed84 7a00 	vstr	s14, [r4]
 80255e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80255ec:	4240      	negs	r0, r0
 80255ee:	e79c      	b.n	802552a <__ieee754_rem_pio2f+0x66>
 80255f0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80256fc <__ieee754_rem_pio2f+0x238>
 80255f4:	eef0 6a40 	vmov.f32	s13, s0
 80255f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80255fc:	ee70 7a66 	vsub.f32	s15, s0, s13
 8025600:	eee6 7a25 	vfma.f32	s15, s12, s11
 8025604:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8025704 <__ieee754_rem_pio2f+0x240>
 8025608:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802560c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8025610:	ee15 2a90 	vmov	r2, s11
 8025614:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8025618:	1a5b      	subs	r3, r3, r1
 802561a:	2b19      	cmp	r3, #25
 802561c:	dc04      	bgt.n	8025628 <__ieee754_rem_pio2f+0x164>
 802561e:	edc4 5a00 	vstr	s11, [r4]
 8025622:	eeb0 0a66 	vmov.f32	s0, s13
 8025626:	e7cf      	b.n	80255c8 <__ieee754_rem_pio2f+0x104>
 8025628:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8025714 <__ieee754_rem_pio2f+0x250>
 802562c:	eeb0 0a66 	vmov.f32	s0, s13
 8025630:	eea6 0a25 	vfma.f32	s0, s12, s11
 8025634:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8025638:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8025718 <__ieee754_rem_pio2f+0x254>
 802563c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8025640:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8025644:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025648:	ed84 7a00 	vstr	s14, [r4]
 802564c:	e7bc      	b.n	80255c8 <__ieee754_rem_pio2f+0x104>
 802564e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8025652:	d306      	bcc.n	8025662 <__ieee754_rem_pio2f+0x19e>
 8025654:	ee70 7a40 	vsub.f32	s15, s0, s0
 8025658:	edc0 7a01 	vstr	s15, [r0, #4]
 802565c:	edc0 7a00 	vstr	s15, [r0]
 8025660:	e73e      	b.n	80254e0 <__ieee754_rem_pio2f+0x1c>
 8025662:	15ea      	asrs	r2, r5, #23
 8025664:	3a86      	subs	r2, #134	@ 0x86
 8025666:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802566a:	ee07 3a90 	vmov	s15, r3
 802566e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8025672:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 802571c <__ieee754_rem_pio2f+0x258>
 8025676:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802567a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802567e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8025682:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025686:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802568a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802568e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025692:	ed8d 7a04 	vstr	s14, [sp, #16]
 8025696:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802569a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80256a6:	d11e      	bne.n	80256e6 <__ieee754_rem_pio2f+0x222>
 80256a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80256ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256b0:	bf0c      	ite	eq
 80256b2:	2301      	moveq	r3, #1
 80256b4:	2302      	movne	r3, #2
 80256b6:	491a      	ldr	r1, [pc, #104]	@ (8025720 <__ieee754_rem_pio2f+0x25c>)
 80256b8:	9101      	str	r1, [sp, #4]
 80256ba:	2102      	movs	r1, #2
 80256bc:	9100      	str	r1, [sp, #0]
 80256be:	a803      	add	r0, sp, #12
 80256c0:	4621      	mov	r1, r4
 80256c2:	f000 fd1d 	bl	8026100 <__kernel_rem_pio2f>
 80256c6:	2e00      	cmp	r6, #0
 80256c8:	f6bf af2f 	bge.w	802552a <__ieee754_rem_pio2f+0x66>
 80256cc:	edd4 7a00 	vldr	s15, [r4]
 80256d0:	eef1 7a67 	vneg.f32	s15, s15
 80256d4:	edc4 7a00 	vstr	s15, [r4]
 80256d8:	edd4 7a01 	vldr	s15, [r4, #4]
 80256dc:	eef1 7a67 	vneg.f32	s15, s15
 80256e0:	edc4 7a01 	vstr	s15, [r4, #4]
 80256e4:	e782      	b.n	80255ec <__ieee754_rem_pio2f+0x128>
 80256e6:	2303      	movs	r3, #3
 80256e8:	e7e5      	b.n	80256b6 <__ieee754_rem_pio2f+0x1f2>
 80256ea:	bf00      	nop
 80256ec:	3f490fd8 	.word	0x3f490fd8
 80256f0:	4016cbe3 	.word	0x4016cbe3
 80256f4:	3fc90f80 	.word	0x3fc90f80
 80256f8:	3fc90fd0 	.word	0x3fc90fd0
 80256fc:	37354400 	.word	0x37354400
 8025700:	37354443 	.word	0x37354443
 8025704:	2e85a308 	.word	0x2e85a308
 8025708:	43490f80 	.word	0x43490f80
 802570c:	3f22f984 	.word	0x3f22f984
 8025710:	08026b10 	.word	0x08026b10
 8025714:	2e85a300 	.word	0x2e85a300
 8025718:	248d3132 	.word	0x248d3132
 802571c:	43800000 	.word	0x43800000
 8025720:	08026b90 	.word	0x08026b90

08025724 <atanf>:
 8025724:	b538      	push	{r3, r4, r5, lr}
 8025726:	ee10 5a10 	vmov	r5, s0
 802572a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802572e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8025732:	eef0 7a40 	vmov.f32	s15, s0
 8025736:	d310      	bcc.n	802575a <atanf+0x36>
 8025738:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802573c:	d904      	bls.n	8025748 <atanf+0x24>
 802573e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025742:	eeb0 0a67 	vmov.f32	s0, s15
 8025746:	bd38      	pop	{r3, r4, r5, pc}
 8025748:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8025880 <atanf+0x15c>
 802574c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8025884 <atanf+0x160>
 8025750:	2d00      	cmp	r5, #0
 8025752:	bfc8      	it	gt
 8025754:	eef0 7a47 	vmovgt.f32	s15, s14
 8025758:	e7f3      	b.n	8025742 <atanf+0x1e>
 802575a:	4b4b      	ldr	r3, [pc, #300]	@ (8025888 <atanf+0x164>)
 802575c:	429c      	cmp	r4, r3
 802575e:	d810      	bhi.n	8025782 <atanf+0x5e>
 8025760:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8025764:	d20a      	bcs.n	802577c <atanf+0x58>
 8025766:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802588c <atanf+0x168>
 802576a:	ee30 7a07 	vadd.f32	s14, s0, s14
 802576e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025772:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802577a:	dce2      	bgt.n	8025742 <atanf+0x1e>
 802577c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025780:	e013      	b.n	80257aa <atanf+0x86>
 8025782:	f7fc fe8f 	bl	80224a4 <fabsf>
 8025786:	4b42      	ldr	r3, [pc, #264]	@ (8025890 <atanf+0x16c>)
 8025788:	429c      	cmp	r4, r3
 802578a:	d84f      	bhi.n	802582c <atanf+0x108>
 802578c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8025790:	429c      	cmp	r4, r3
 8025792:	d841      	bhi.n	8025818 <atanf+0xf4>
 8025794:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8025798:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802579c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80257a0:	2300      	movs	r3, #0
 80257a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80257a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80257aa:	1c5a      	adds	r2, r3, #1
 80257ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80257b0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8025894 <atanf+0x170>
 80257b4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8025898 <atanf+0x174>
 80257b8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 802589c <atanf+0x178>
 80257bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80257c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80257c4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80258a0 <atanf+0x17c>
 80257c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80257cc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80258a4 <atanf+0x180>
 80257d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80257d4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80258a8 <atanf+0x184>
 80257d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80257dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80258ac <atanf+0x188>
 80257e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80257e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80258b0 <atanf+0x18c>
 80257e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80257ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80258b4 <atanf+0x190>
 80257f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80257f4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80258b8 <atanf+0x194>
 80257f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80257fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80258bc <atanf+0x198>
 8025800:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025804:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025808:	eea5 7a86 	vfma.f32	s14, s11, s12
 802580c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025810:	d121      	bne.n	8025856 <atanf+0x132>
 8025812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025816:	e794      	b.n	8025742 <atanf+0x1e>
 8025818:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802581c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025820:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025824:	2301      	movs	r3, #1
 8025826:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802582a:	e7be      	b.n	80257aa <atanf+0x86>
 802582c:	4b24      	ldr	r3, [pc, #144]	@ (80258c0 <atanf+0x19c>)
 802582e:	429c      	cmp	r4, r3
 8025830:	d80b      	bhi.n	802584a <atanf+0x126>
 8025832:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8025836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802583a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802583e:	2302      	movs	r3, #2
 8025840:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025848:	e7af      	b.n	80257aa <atanf+0x86>
 802584a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802584e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025852:	2303      	movs	r3, #3
 8025854:	e7a9      	b.n	80257aa <atanf+0x86>
 8025856:	4a1b      	ldr	r2, [pc, #108]	@ (80258c4 <atanf+0x1a0>)
 8025858:	491b      	ldr	r1, [pc, #108]	@ (80258c8 <atanf+0x1a4>)
 802585a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802585e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025862:	edd3 6a00 	vldr	s13, [r3]
 8025866:	ee37 7a66 	vsub.f32	s14, s14, s13
 802586a:	2d00      	cmp	r5, #0
 802586c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8025870:	edd2 7a00 	vldr	s15, [r2]
 8025874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025878:	bfb8      	it	lt
 802587a:	eef1 7a67 	vneglt.f32	s15, s15
 802587e:	e760      	b.n	8025742 <atanf+0x1e>
 8025880:	bfc90fdb 	.word	0xbfc90fdb
 8025884:	3fc90fdb 	.word	0x3fc90fdb
 8025888:	3edfffff 	.word	0x3edfffff
 802588c:	7149f2ca 	.word	0x7149f2ca
 8025890:	3f97ffff 	.word	0x3f97ffff
 8025894:	3c8569d7 	.word	0x3c8569d7
 8025898:	3d4bda59 	.word	0x3d4bda59
 802589c:	bd6ef16b 	.word	0xbd6ef16b
 80258a0:	3d886b35 	.word	0x3d886b35
 80258a4:	3dba2e6e 	.word	0x3dba2e6e
 80258a8:	3e124925 	.word	0x3e124925
 80258ac:	3eaaaaab 	.word	0x3eaaaaab
 80258b0:	bd15a221 	.word	0xbd15a221
 80258b4:	bd9d8795 	.word	0xbd9d8795
 80258b8:	bde38e38 	.word	0xbde38e38
 80258bc:	be4ccccd 	.word	0xbe4ccccd
 80258c0:	401bffff 	.word	0x401bffff
 80258c4:	08026eb8 	.word	0x08026eb8
 80258c8:	08026ea8 	.word	0x08026ea8
 80258cc:	00000000 	.word	0x00000000

080258d0 <scalbn>:
 80258d0:	b570      	push	{r4, r5, r6, lr}
 80258d2:	ec55 4b10 	vmov	r4, r5, d0
 80258d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80258da:	4606      	mov	r6, r0
 80258dc:	462b      	mov	r3, r5
 80258de:	b991      	cbnz	r1, 8025906 <scalbn+0x36>
 80258e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80258e4:	4323      	orrs	r3, r4
 80258e6:	d03d      	beq.n	8025964 <scalbn+0x94>
 80258e8:	4b35      	ldr	r3, [pc, #212]	@ (80259c0 <scalbn+0xf0>)
 80258ea:	4620      	mov	r0, r4
 80258ec:	4629      	mov	r1, r5
 80258ee:	2200      	movs	r2, #0
 80258f0:	f7da fe82 	bl	80005f8 <__aeabi_dmul>
 80258f4:	4b33      	ldr	r3, [pc, #204]	@ (80259c4 <scalbn+0xf4>)
 80258f6:	429e      	cmp	r6, r3
 80258f8:	4604      	mov	r4, r0
 80258fa:	460d      	mov	r5, r1
 80258fc:	da0f      	bge.n	802591e <scalbn+0x4e>
 80258fe:	a328      	add	r3, pc, #160	@ (adr r3, 80259a0 <scalbn+0xd0>)
 8025900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025904:	e01e      	b.n	8025944 <scalbn+0x74>
 8025906:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 802590a:	4291      	cmp	r1, r2
 802590c:	d10b      	bne.n	8025926 <scalbn+0x56>
 802590e:	4622      	mov	r2, r4
 8025910:	4620      	mov	r0, r4
 8025912:	4629      	mov	r1, r5
 8025914:	f7da fcba 	bl	800028c <__adddf3>
 8025918:	4604      	mov	r4, r0
 802591a:	460d      	mov	r5, r1
 802591c:	e022      	b.n	8025964 <scalbn+0x94>
 802591e:	460b      	mov	r3, r1
 8025920:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8025924:	3936      	subs	r1, #54	@ 0x36
 8025926:	f24c 3250 	movw	r2, #50000	@ 0xc350
 802592a:	4296      	cmp	r6, r2
 802592c:	dd0d      	ble.n	802594a <scalbn+0x7a>
 802592e:	2d00      	cmp	r5, #0
 8025930:	a11d      	add	r1, pc, #116	@ (adr r1, 80259a8 <scalbn+0xd8>)
 8025932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025936:	da02      	bge.n	802593e <scalbn+0x6e>
 8025938:	a11d      	add	r1, pc, #116	@ (adr r1, 80259b0 <scalbn+0xe0>)
 802593a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802593e:	a31a      	add	r3, pc, #104	@ (adr r3, 80259a8 <scalbn+0xd8>)
 8025940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025944:	f7da fe58 	bl	80005f8 <__aeabi_dmul>
 8025948:	e7e6      	b.n	8025918 <scalbn+0x48>
 802594a:	1872      	adds	r2, r6, r1
 802594c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8025950:	428a      	cmp	r2, r1
 8025952:	dcec      	bgt.n	802592e <scalbn+0x5e>
 8025954:	2a00      	cmp	r2, #0
 8025956:	dd08      	ble.n	802596a <scalbn+0x9a>
 8025958:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802595c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8025960:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025964:	ec45 4b10 	vmov	d0, r4, r5
 8025968:	bd70      	pop	{r4, r5, r6, pc}
 802596a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 802596e:	da08      	bge.n	8025982 <scalbn+0xb2>
 8025970:	2d00      	cmp	r5, #0
 8025972:	a10b      	add	r1, pc, #44	@ (adr r1, 80259a0 <scalbn+0xd0>)
 8025974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025978:	dac1      	bge.n	80258fe <scalbn+0x2e>
 802597a:	a10f      	add	r1, pc, #60	@ (adr r1, 80259b8 <scalbn+0xe8>)
 802597c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025980:	e7bd      	b.n	80258fe <scalbn+0x2e>
 8025982:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8025986:	3236      	adds	r2, #54	@ 0x36
 8025988:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802598c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025990:	4620      	mov	r0, r4
 8025992:	4b0d      	ldr	r3, [pc, #52]	@ (80259c8 <scalbn+0xf8>)
 8025994:	4629      	mov	r1, r5
 8025996:	2200      	movs	r2, #0
 8025998:	e7d4      	b.n	8025944 <scalbn+0x74>
 802599a:	bf00      	nop
 802599c:	f3af 8000 	nop.w
 80259a0:	c2f8f359 	.word	0xc2f8f359
 80259a4:	01a56e1f 	.word	0x01a56e1f
 80259a8:	8800759c 	.word	0x8800759c
 80259ac:	7e37e43c 	.word	0x7e37e43c
 80259b0:	8800759c 	.word	0x8800759c
 80259b4:	fe37e43c 	.word	0xfe37e43c
 80259b8:	c2f8f359 	.word	0xc2f8f359
 80259bc:	81a56e1f 	.word	0x81a56e1f
 80259c0:	43500000 	.word	0x43500000
 80259c4:	ffff3cb0 	.word	0xffff3cb0
 80259c8:	3c900000 	.word	0x3c900000

080259cc <with_errno>:
 80259cc:	b510      	push	{r4, lr}
 80259ce:	ed2d 8b02 	vpush	{d8}
 80259d2:	eeb0 8a40 	vmov.f32	s16, s0
 80259d6:	eef0 8a60 	vmov.f32	s17, s1
 80259da:	4604      	mov	r4, r0
 80259dc:	f7fb fe60 	bl	80216a0 <__errno>
 80259e0:	eeb0 0a48 	vmov.f32	s0, s16
 80259e4:	eef0 0a68 	vmov.f32	s1, s17
 80259e8:	ecbd 8b02 	vpop	{d8}
 80259ec:	6004      	str	r4, [r0, #0]
 80259ee:	bd10      	pop	{r4, pc}

080259f0 <xflow>:
 80259f0:	4603      	mov	r3, r0
 80259f2:	b507      	push	{r0, r1, r2, lr}
 80259f4:	ec51 0b10 	vmov	r0, r1, d0
 80259f8:	b183      	cbz	r3, 8025a1c <xflow+0x2c>
 80259fa:	4602      	mov	r2, r0
 80259fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025a00:	e9cd 2300 	strd	r2, r3, [sp]
 8025a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025a08:	f7da fdf6 	bl	80005f8 <__aeabi_dmul>
 8025a0c:	ec41 0b10 	vmov	d0, r0, r1
 8025a10:	2022      	movs	r0, #34	@ 0x22
 8025a12:	b003      	add	sp, #12
 8025a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8025a18:	f7ff bfd8 	b.w	80259cc <with_errno>
 8025a1c:	4602      	mov	r2, r0
 8025a1e:	460b      	mov	r3, r1
 8025a20:	e7ee      	b.n	8025a00 <xflow+0x10>
 8025a22:	0000      	movs	r0, r0
 8025a24:	0000      	movs	r0, r0
	...

08025a28 <__math_uflow>:
 8025a28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8025a30 <__math_uflow+0x8>
 8025a2c:	f7ff bfe0 	b.w	80259f0 <xflow>
 8025a30:	00000000 	.word	0x00000000
 8025a34:	10000000 	.word	0x10000000

08025a38 <__math_oflow>:
 8025a38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8025a40 <__math_oflow+0x8>
 8025a3c:	f7ff bfd8 	b.w	80259f0 <xflow>
 8025a40:	00000000 	.word	0x00000000
 8025a44:	70000000 	.word	0x70000000

08025a48 <__ieee754_sqrtf>:
 8025a48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8025a4c:	4770      	bx	lr
	...

08025a50 <__kernel_rem_pio2>:
 8025a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a54:	ed2d 8b02 	vpush	{d8}
 8025a58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8025a5c:	f112 0f14 	cmn.w	r2, #20
 8025a60:	9306      	str	r3, [sp, #24]
 8025a62:	9104      	str	r1, [sp, #16]
 8025a64:	4bbe      	ldr	r3, [pc, #760]	@ (8025d60 <__kernel_rem_pio2+0x310>)
 8025a66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8025a68:	9008      	str	r0, [sp, #32]
 8025a6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025a6e:	9300      	str	r3, [sp, #0]
 8025a70:	9b06      	ldr	r3, [sp, #24]
 8025a72:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8025a76:	bfa8      	it	ge
 8025a78:	1ed4      	subge	r4, r2, #3
 8025a7a:	9305      	str	r3, [sp, #20]
 8025a7c:	bfb2      	itee	lt
 8025a7e:	2400      	movlt	r4, #0
 8025a80:	2318      	movge	r3, #24
 8025a82:	fb94 f4f3 	sdivge	r4, r4, r3
 8025a86:	f06f 0317 	mvn.w	r3, #23
 8025a8a:	fb04 3303 	mla	r3, r4, r3, r3
 8025a8e:	eb03 0b02 	add.w	fp, r3, r2
 8025a92:	9b00      	ldr	r3, [sp, #0]
 8025a94:	9a05      	ldr	r2, [sp, #20]
 8025a96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8025d50 <__kernel_rem_pio2+0x300>
 8025a9a:	eb03 0802 	add.w	r8, r3, r2
 8025a9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8025aa0:	1aa7      	subs	r7, r4, r2
 8025aa2:	ae20      	add	r6, sp, #128	@ 0x80
 8025aa4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8025aa8:	2500      	movs	r5, #0
 8025aaa:	4545      	cmp	r5, r8
 8025aac:	dd13      	ble.n	8025ad6 <__kernel_rem_pio2+0x86>
 8025aae:	9b06      	ldr	r3, [sp, #24]
 8025ab0:	aa20      	add	r2, sp, #128	@ 0x80
 8025ab2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8025ab6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8025aba:	f04f 0800 	mov.w	r8, #0
 8025abe:	9b00      	ldr	r3, [sp, #0]
 8025ac0:	4598      	cmp	r8, r3
 8025ac2:	dc31      	bgt.n	8025b28 <__kernel_rem_pio2+0xd8>
 8025ac4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8025d50 <__kernel_rem_pio2+0x300>
 8025ac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025acc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025ad0:	462f      	mov	r7, r5
 8025ad2:	2600      	movs	r6, #0
 8025ad4:	e01b      	b.n	8025b0e <__kernel_rem_pio2+0xbe>
 8025ad6:	42ef      	cmn	r7, r5
 8025ad8:	d407      	bmi.n	8025aea <__kernel_rem_pio2+0x9a>
 8025ada:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8025ade:	f7da fd21 	bl	8000524 <__aeabi_i2d>
 8025ae2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8025ae6:	3501      	adds	r5, #1
 8025ae8:	e7df      	b.n	8025aaa <__kernel_rem_pio2+0x5a>
 8025aea:	ec51 0b18 	vmov	r0, r1, d8
 8025aee:	e7f8      	b.n	8025ae2 <__kernel_rem_pio2+0x92>
 8025af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025af4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8025af8:	f7da fd7e 	bl	80005f8 <__aeabi_dmul>
 8025afc:	4602      	mov	r2, r0
 8025afe:	460b      	mov	r3, r1
 8025b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025b04:	f7da fbc2 	bl	800028c <__adddf3>
 8025b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025b0c:	3601      	adds	r6, #1
 8025b0e:	9b05      	ldr	r3, [sp, #20]
 8025b10:	429e      	cmp	r6, r3
 8025b12:	f1a7 0708 	sub.w	r7, r7, #8
 8025b16:	ddeb      	ble.n	8025af0 <__kernel_rem_pio2+0xa0>
 8025b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025b1c:	f108 0801 	add.w	r8, r8, #1
 8025b20:	ecaa 7b02 	vstmia	sl!, {d7}
 8025b24:	3508      	adds	r5, #8
 8025b26:	e7ca      	b.n	8025abe <__kernel_rem_pio2+0x6e>
 8025b28:	9b00      	ldr	r3, [sp, #0]
 8025b2a:	f8dd 8000 	ldr.w	r8, [sp]
 8025b2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8025b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025b34:	930a      	str	r3, [sp, #40]	@ 0x28
 8025b36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8025b38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8025b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025b44:	ab98      	add	r3, sp, #608	@ 0x260
 8025b46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025b4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8025b4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025b52:	ac0c      	add	r4, sp, #48	@ 0x30
 8025b54:	ab70      	add	r3, sp, #448	@ 0x1c0
 8025b56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8025b5a:	46a1      	mov	r9, r4
 8025b5c:	46c2      	mov	sl, r8
 8025b5e:	f1ba 0f00 	cmp.w	sl, #0
 8025b62:	f1a5 0508 	sub.w	r5, r5, #8
 8025b66:	dc77      	bgt.n	8025c58 <__kernel_rem_pio2+0x208>
 8025b68:	4658      	mov	r0, fp
 8025b6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8025b6e:	f7ff feaf 	bl	80258d0 <scalbn>
 8025b72:	ec57 6b10 	vmov	r6, r7, d0
 8025b76:	2200      	movs	r2, #0
 8025b78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8025b7c:	4630      	mov	r0, r6
 8025b7e:	4639      	mov	r1, r7
 8025b80:	f7da fd3a 	bl	80005f8 <__aeabi_dmul>
 8025b84:	ec41 0b10 	vmov	d0, r0, r1
 8025b88:	f7fc fe76 	bl	8022878 <floor>
 8025b8c:	4b75      	ldr	r3, [pc, #468]	@ (8025d64 <__kernel_rem_pio2+0x314>)
 8025b8e:	ec51 0b10 	vmov	r0, r1, d0
 8025b92:	2200      	movs	r2, #0
 8025b94:	f7da fd30 	bl	80005f8 <__aeabi_dmul>
 8025b98:	4602      	mov	r2, r0
 8025b9a:	460b      	mov	r3, r1
 8025b9c:	4630      	mov	r0, r6
 8025b9e:	4639      	mov	r1, r7
 8025ba0:	f7da fb72 	bl	8000288 <__aeabi_dsub>
 8025ba4:	460f      	mov	r7, r1
 8025ba6:	4606      	mov	r6, r0
 8025ba8:	f7da ffd6 	bl	8000b58 <__aeabi_d2iz>
 8025bac:	9002      	str	r0, [sp, #8]
 8025bae:	f7da fcb9 	bl	8000524 <__aeabi_i2d>
 8025bb2:	4602      	mov	r2, r0
 8025bb4:	460b      	mov	r3, r1
 8025bb6:	4630      	mov	r0, r6
 8025bb8:	4639      	mov	r1, r7
 8025bba:	f7da fb65 	bl	8000288 <__aeabi_dsub>
 8025bbe:	f1bb 0f00 	cmp.w	fp, #0
 8025bc2:	4606      	mov	r6, r0
 8025bc4:	460f      	mov	r7, r1
 8025bc6:	dd6c      	ble.n	8025ca2 <__kernel_rem_pio2+0x252>
 8025bc8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8025bcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8025bce:	9d02      	ldr	r5, [sp, #8]
 8025bd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025bd4:	f1cb 0018 	rsb	r0, fp, #24
 8025bd8:	fa43 f200 	asr.w	r2, r3, r0
 8025bdc:	4415      	add	r5, r2
 8025bde:	4082      	lsls	r2, r0
 8025be0:	1a9b      	subs	r3, r3, r2
 8025be2:	aa0c      	add	r2, sp, #48	@ 0x30
 8025be4:	9502      	str	r5, [sp, #8]
 8025be6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8025bea:	f1cb 0217 	rsb	r2, fp, #23
 8025bee:	fa43 f902 	asr.w	r9, r3, r2
 8025bf2:	f1b9 0f00 	cmp.w	r9, #0
 8025bf6:	dd64      	ble.n	8025cc2 <__kernel_rem_pio2+0x272>
 8025bf8:	9b02      	ldr	r3, [sp, #8]
 8025bfa:	2200      	movs	r2, #0
 8025bfc:	3301      	adds	r3, #1
 8025bfe:	9302      	str	r3, [sp, #8]
 8025c00:	4615      	mov	r5, r2
 8025c02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8025c06:	4590      	cmp	r8, r2
 8025c08:	f300 80b8 	bgt.w	8025d7c <__kernel_rem_pio2+0x32c>
 8025c0c:	f1bb 0f00 	cmp.w	fp, #0
 8025c10:	dd07      	ble.n	8025c22 <__kernel_rem_pio2+0x1d2>
 8025c12:	f1bb 0f01 	cmp.w	fp, #1
 8025c16:	f000 80bf 	beq.w	8025d98 <__kernel_rem_pio2+0x348>
 8025c1a:	f1bb 0f02 	cmp.w	fp, #2
 8025c1e:	f000 80c6 	beq.w	8025dae <__kernel_rem_pio2+0x35e>
 8025c22:	f1b9 0f02 	cmp.w	r9, #2
 8025c26:	d14c      	bne.n	8025cc2 <__kernel_rem_pio2+0x272>
 8025c28:	4632      	mov	r2, r6
 8025c2a:	463b      	mov	r3, r7
 8025c2c:	494e      	ldr	r1, [pc, #312]	@ (8025d68 <__kernel_rem_pio2+0x318>)
 8025c2e:	2000      	movs	r0, #0
 8025c30:	f7da fb2a 	bl	8000288 <__aeabi_dsub>
 8025c34:	4606      	mov	r6, r0
 8025c36:	460f      	mov	r7, r1
 8025c38:	2d00      	cmp	r5, #0
 8025c3a:	d042      	beq.n	8025cc2 <__kernel_rem_pio2+0x272>
 8025c3c:	4658      	mov	r0, fp
 8025c3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8025d58 <__kernel_rem_pio2+0x308>
 8025c42:	f7ff fe45 	bl	80258d0 <scalbn>
 8025c46:	4630      	mov	r0, r6
 8025c48:	4639      	mov	r1, r7
 8025c4a:	ec53 2b10 	vmov	r2, r3, d0
 8025c4e:	f7da fb1b 	bl	8000288 <__aeabi_dsub>
 8025c52:	4606      	mov	r6, r0
 8025c54:	460f      	mov	r7, r1
 8025c56:	e034      	b.n	8025cc2 <__kernel_rem_pio2+0x272>
 8025c58:	4b44      	ldr	r3, [pc, #272]	@ (8025d6c <__kernel_rem_pio2+0x31c>)
 8025c5a:	2200      	movs	r2, #0
 8025c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025c60:	f7da fcca 	bl	80005f8 <__aeabi_dmul>
 8025c64:	f7da ff78 	bl	8000b58 <__aeabi_d2iz>
 8025c68:	f7da fc5c 	bl	8000524 <__aeabi_i2d>
 8025c6c:	4b40      	ldr	r3, [pc, #256]	@ (8025d70 <__kernel_rem_pio2+0x320>)
 8025c6e:	2200      	movs	r2, #0
 8025c70:	4606      	mov	r6, r0
 8025c72:	460f      	mov	r7, r1
 8025c74:	f7da fcc0 	bl	80005f8 <__aeabi_dmul>
 8025c78:	4602      	mov	r2, r0
 8025c7a:	460b      	mov	r3, r1
 8025c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025c80:	f7da fb02 	bl	8000288 <__aeabi_dsub>
 8025c84:	f7da ff68 	bl	8000b58 <__aeabi_d2iz>
 8025c88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8025c8c:	f849 0b04 	str.w	r0, [r9], #4
 8025c90:	4639      	mov	r1, r7
 8025c92:	4630      	mov	r0, r6
 8025c94:	f7da fafa 	bl	800028c <__adddf3>
 8025c98:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8025c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ca0:	e75d      	b.n	8025b5e <__kernel_rem_pio2+0x10e>
 8025ca2:	d107      	bne.n	8025cb4 <__kernel_rem_pio2+0x264>
 8025ca4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8025ca8:	aa0c      	add	r2, sp, #48	@ 0x30
 8025caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025cae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8025cb2:	e79e      	b.n	8025bf2 <__kernel_rem_pio2+0x1a2>
 8025cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8025d74 <__kernel_rem_pio2+0x324>)
 8025cb6:	2200      	movs	r2, #0
 8025cb8:	f7da ff24 	bl	8000b04 <__aeabi_dcmpge>
 8025cbc:	2800      	cmp	r0, #0
 8025cbe:	d143      	bne.n	8025d48 <__kernel_rem_pio2+0x2f8>
 8025cc0:	4681      	mov	r9, r0
 8025cc2:	2200      	movs	r2, #0
 8025cc4:	2300      	movs	r3, #0
 8025cc6:	4630      	mov	r0, r6
 8025cc8:	4639      	mov	r1, r7
 8025cca:	f7da fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 8025cce:	2800      	cmp	r0, #0
 8025cd0:	f000 80bf 	beq.w	8025e52 <__kernel_rem_pio2+0x402>
 8025cd4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8025cd8:	2200      	movs	r2, #0
 8025cda:	9900      	ldr	r1, [sp, #0]
 8025cdc:	428b      	cmp	r3, r1
 8025cde:	da6e      	bge.n	8025dbe <__kernel_rem_pio2+0x36e>
 8025ce0:	2a00      	cmp	r2, #0
 8025ce2:	f000 8089 	beq.w	8025df8 <__kernel_rem_pio2+0x3a8>
 8025ce6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8025cea:	ab0c      	add	r3, sp, #48	@ 0x30
 8025cec:	f1ab 0b18 	sub.w	fp, fp, #24
 8025cf0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8025cf4:	2b00      	cmp	r3, #0
 8025cf6:	d0f6      	beq.n	8025ce6 <__kernel_rem_pio2+0x296>
 8025cf8:	4658      	mov	r0, fp
 8025cfa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8025d58 <__kernel_rem_pio2+0x308>
 8025cfe:	f7ff fde7 	bl	80258d0 <scalbn>
 8025d02:	f108 0301 	add.w	r3, r8, #1
 8025d06:	00da      	lsls	r2, r3, #3
 8025d08:	9205      	str	r2, [sp, #20]
 8025d0a:	ec55 4b10 	vmov	r4, r5, d0
 8025d0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8025d10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8025d6c <__kernel_rem_pio2+0x31c>
 8025d14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8025d18:	4646      	mov	r6, r8
 8025d1a:	f04f 0a00 	mov.w	sl, #0
 8025d1e:	2e00      	cmp	r6, #0
 8025d20:	f280 80cf 	bge.w	8025ec2 <__kernel_rem_pio2+0x472>
 8025d24:	4644      	mov	r4, r8
 8025d26:	2c00      	cmp	r4, #0
 8025d28:	f2c0 80fd 	blt.w	8025f26 <__kernel_rem_pio2+0x4d6>
 8025d2c:	4b12      	ldr	r3, [pc, #72]	@ (8025d78 <__kernel_rem_pio2+0x328>)
 8025d2e:	461f      	mov	r7, r3
 8025d30:	ab70      	add	r3, sp, #448	@ 0x1c0
 8025d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025d36:	9306      	str	r3, [sp, #24]
 8025d38:	f04f 0a00 	mov.w	sl, #0
 8025d3c:	f04f 0b00 	mov.w	fp, #0
 8025d40:	2600      	movs	r6, #0
 8025d42:	eba8 0504 	sub.w	r5, r8, r4
 8025d46:	e0e2      	b.n	8025f0e <__kernel_rem_pio2+0x4be>
 8025d48:	f04f 0902 	mov.w	r9, #2
 8025d4c:	e754      	b.n	8025bf8 <__kernel_rem_pio2+0x1a8>
 8025d4e:	bf00      	nop
	...
 8025d5c:	3ff00000 	.word	0x3ff00000
 8025d60:	08026f08 	.word	0x08026f08
 8025d64:	40200000 	.word	0x40200000
 8025d68:	3ff00000 	.word	0x3ff00000
 8025d6c:	3e700000 	.word	0x3e700000
 8025d70:	41700000 	.word	0x41700000
 8025d74:	3fe00000 	.word	0x3fe00000
 8025d78:	08026ec8 	.word	0x08026ec8
 8025d7c:	f854 3b04 	ldr.w	r3, [r4], #4
 8025d80:	b945      	cbnz	r5, 8025d94 <__kernel_rem_pio2+0x344>
 8025d82:	b123      	cbz	r3, 8025d8e <__kernel_rem_pio2+0x33e>
 8025d84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8025d88:	f844 3c04 	str.w	r3, [r4, #-4]
 8025d8c:	2301      	movs	r3, #1
 8025d8e:	3201      	adds	r2, #1
 8025d90:	461d      	mov	r5, r3
 8025d92:	e738      	b.n	8025c06 <__kernel_rem_pio2+0x1b6>
 8025d94:	1acb      	subs	r3, r1, r3
 8025d96:	e7f7      	b.n	8025d88 <__kernel_rem_pio2+0x338>
 8025d98:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8025d9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8025d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025da2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8025da6:	a90c      	add	r1, sp, #48	@ 0x30
 8025da8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8025dac:	e739      	b.n	8025c22 <__kernel_rem_pio2+0x1d2>
 8025dae:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8025db2:	ab0c      	add	r3, sp, #48	@ 0x30
 8025db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025db8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8025dbc:	e7f3      	b.n	8025da6 <__kernel_rem_pio2+0x356>
 8025dbe:	a90c      	add	r1, sp, #48	@ 0x30
 8025dc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8025dc4:	3b01      	subs	r3, #1
 8025dc6:	430a      	orrs	r2, r1
 8025dc8:	e787      	b.n	8025cda <__kernel_rem_pio2+0x28a>
 8025dca:	3401      	adds	r4, #1
 8025dcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8025dd0:	2a00      	cmp	r2, #0
 8025dd2:	d0fa      	beq.n	8025dca <__kernel_rem_pio2+0x37a>
 8025dd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025dd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8025dda:	eb0d 0503 	add.w	r5, sp, r3
 8025dde:	9b06      	ldr	r3, [sp, #24]
 8025de0:	aa20      	add	r2, sp, #128	@ 0x80
 8025de2:	4443      	add	r3, r8
 8025de4:	f108 0701 	add.w	r7, r8, #1
 8025de8:	3d98      	subs	r5, #152	@ 0x98
 8025dea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8025dee:	4444      	add	r4, r8
 8025df0:	42bc      	cmp	r4, r7
 8025df2:	da04      	bge.n	8025dfe <__kernel_rem_pio2+0x3ae>
 8025df4:	46a0      	mov	r8, r4
 8025df6:	e6a2      	b.n	8025b3e <__kernel_rem_pio2+0xee>
 8025df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025dfa:	2401      	movs	r4, #1
 8025dfc:	e7e6      	b.n	8025dcc <__kernel_rem_pio2+0x37c>
 8025dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8025e04:	f7da fb8e 	bl	8000524 <__aeabi_i2d>
 8025e08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80260d0 <__kernel_rem_pio2+0x680>
 8025e0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8025e10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025e18:	46b2      	mov	sl, r6
 8025e1a:	f04f 0800 	mov.w	r8, #0
 8025e1e:	9b05      	ldr	r3, [sp, #20]
 8025e20:	4598      	cmp	r8, r3
 8025e22:	dd05      	ble.n	8025e30 <__kernel_rem_pio2+0x3e0>
 8025e24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025e28:	3701      	adds	r7, #1
 8025e2a:	eca5 7b02 	vstmia	r5!, {d7}
 8025e2e:	e7df      	b.n	8025df0 <__kernel_rem_pio2+0x3a0>
 8025e30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8025e34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8025e38:	f7da fbde 	bl	80005f8 <__aeabi_dmul>
 8025e3c:	4602      	mov	r2, r0
 8025e3e:	460b      	mov	r3, r1
 8025e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025e44:	f7da fa22 	bl	800028c <__adddf3>
 8025e48:	f108 0801 	add.w	r8, r8, #1
 8025e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025e50:	e7e5      	b.n	8025e1e <__kernel_rem_pio2+0x3ce>
 8025e52:	f1cb 0000 	rsb	r0, fp, #0
 8025e56:	ec47 6b10 	vmov	d0, r6, r7
 8025e5a:	f7ff fd39 	bl	80258d0 <scalbn>
 8025e5e:	ec55 4b10 	vmov	r4, r5, d0
 8025e62:	4b9d      	ldr	r3, [pc, #628]	@ (80260d8 <__kernel_rem_pio2+0x688>)
 8025e64:	2200      	movs	r2, #0
 8025e66:	4620      	mov	r0, r4
 8025e68:	4629      	mov	r1, r5
 8025e6a:	f7da fe4b 	bl	8000b04 <__aeabi_dcmpge>
 8025e6e:	b300      	cbz	r0, 8025eb2 <__kernel_rem_pio2+0x462>
 8025e70:	4b9a      	ldr	r3, [pc, #616]	@ (80260dc <__kernel_rem_pio2+0x68c>)
 8025e72:	2200      	movs	r2, #0
 8025e74:	4620      	mov	r0, r4
 8025e76:	4629      	mov	r1, r5
 8025e78:	f7da fbbe 	bl	80005f8 <__aeabi_dmul>
 8025e7c:	f7da fe6c 	bl	8000b58 <__aeabi_d2iz>
 8025e80:	4606      	mov	r6, r0
 8025e82:	f7da fb4f 	bl	8000524 <__aeabi_i2d>
 8025e86:	4b94      	ldr	r3, [pc, #592]	@ (80260d8 <__kernel_rem_pio2+0x688>)
 8025e88:	2200      	movs	r2, #0
 8025e8a:	f7da fbb5 	bl	80005f8 <__aeabi_dmul>
 8025e8e:	460b      	mov	r3, r1
 8025e90:	4602      	mov	r2, r0
 8025e92:	4629      	mov	r1, r5
 8025e94:	4620      	mov	r0, r4
 8025e96:	f7da f9f7 	bl	8000288 <__aeabi_dsub>
 8025e9a:	f7da fe5d 	bl	8000b58 <__aeabi_d2iz>
 8025e9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8025ea0:	f10b 0b18 	add.w	fp, fp, #24
 8025ea4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8025ea8:	f108 0801 	add.w	r8, r8, #1
 8025eac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8025eb0:	e722      	b.n	8025cf8 <__kernel_rem_pio2+0x2a8>
 8025eb2:	4620      	mov	r0, r4
 8025eb4:	4629      	mov	r1, r5
 8025eb6:	f7da fe4f 	bl	8000b58 <__aeabi_d2iz>
 8025eba:	ab0c      	add	r3, sp, #48	@ 0x30
 8025ebc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8025ec0:	e71a      	b.n	8025cf8 <__kernel_rem_pio2+0x2a8>
 8025ec2:	ab0c      	add	r3, sp, #48	@ 0x30
 8025ec4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8025ec8:	f7da fb2c 	bl	8000524 <__aeabi_i2d>
 8025ecc:	4622      	mov	r2, r4
 8025ece:	462b      	mov	r3, r5
 8025ed0:	f7da fb92 	bl	80005f8 <__aeabi_dmul>
 8025ed4:	4652      	mov	r2, sl
 8025ed6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8025eda:	465b      	mov	r3, fp
 8025edc:	4620      	mov	r0, r4
 8025ede:	4629      	mov	r1, r5
 8025ee0:	f7da fb8a 	bl	80005f8 <__aeabi_dmul>
 8025ee4:	3e01      	subs	r6, #1
 8025ee6:	4604      	mov	r4, r0
 8025ee8:	460d      	mov	r5, r1
 8025eea:	e718      	b.n	8025d1e <__kernel_rem_pio2+0x2ce>
 8025eec:	9906      	ldr	r1, [sp, #24]
 8025eee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8025ef2:	9106      	str	r1, [sp, #24]
 8025ef4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8025ef8:	f7da fb7e 	bl	80005f8 <__aeabi_dmul>
 8025efc:	4602      	mov	r2, r0
 8025efe:	460b      	mov	r3, r1
 8025f00:	4650      	mov	r0, sl
 8025f02:	4659      	mov	r1, fp
 8025f04:	f7da f9c2 	bl	800028c <__adddf3>
 8025f08:	3601      	adds	r6, #1
 8025f0a:	4682      	mov	sl, r0
 8025f0c:	468b      	mov	fp, r1
 8025f0e:	9b00      	ldr	r3, [sp, #0]
 8025f10:	429e      	cmp	r6, r3
 8025f12:	dc01      	bgt.n	8025f18 <__kernel_rem_pio2+0x4c8>
 8025f14:	42b5      	cmp	r5, r6
 8025f16:	dae9      	bge.n	8025eec <__kernel_rem_pio2+0x49c>
 8025f18:	ab48      	add	r3, sp, #288	@ 0x120
 8025f1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8025f1e:	e9c5 ab00 	strd	sl, fp, [r5]
 8025f22:	3c01      	subs	r4, #1
 8025f24:	e6ff      	b.n	8025d26 <__kernel_rem_pio2+0x2d6>
 8025f26:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8025f28:	2b02      	cmp	r3, #2
 8025f2a:	dc0b      	bgt.n	8025f44 <__kernel_rem_pio2+0x4f4>
 8025f2c:	2b00      	cmp	r3, #0
 8025f2e:	dc39      	bgt.n	8025fa4 <__kernel_rem_pio2+0x554>
 8025f30:	d05d      	beq.n	8025fee <__kernel_rem_pio2+0x59e>
 8025f32:	9b02      	ldr	r3, [sp, #8]
 8025f34:	f003 0007 	and.w	r0, r3, #7
 8025f38:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8025f3c:	ecbd 8b02 	vpop	{d8}
 8025f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f44:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8025f46:	2b03      	cmp	r3, #3
 8025f48:	d1f3      	bne.n	8025f32 <__kernel_rem_pio2+0x4e2>
 8025f4a:	9b05      	ldr	r3, [sp, #20]
 8025f4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8025f50:	eb0d 0403 	add.w	r4, sp, r3
 8025f54:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8025f58:	4625      	mov	r5, r4
 8025f5a:	46c2      	mov	sl, r8
 8025f5c:	f1ba 0f00 	cmp.w	sl, #0
 8025f60:	f1a5 0508 	sub.w	r5, r5, #8
 8025f64:	dc6b      	bgt.n	802603e <__kernel_rem_pio2+0x5ee>
 8025f66:	4645      	mov	r5, r8
 8025f68:	2d01      	cmp	r5, #1
 8025f6a:	f1a4 0408 	sub.w	r4, r4, #8
 8025f6e:	f300 8087 	bgt.w	8026080 <__kernel_rem_pio2+0x630>
 8025f72:	9c05      	ldr	r4, [sp, #20]
 8025f74:	ab48      	add	r3, sp, #288	@ 0x120
 8025f76:	441c      	add	r4, r3
 8025f78:	2000      	movs	r0, #0
 8025f7a:	2100      	movs	r1, #0
 8025f7c:	f1b8 0f01 	cmp.w	r8, #1
 8025f80:	f300 809c 	bgt.w	80260bc <__kernel_rem_pio2+0x66c>
 8025f84:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8025f88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8025f8c:	f1b9 0f00 	cmp.w	r9, #0
 8025f90:	f040 80a6 	bne.w	80260e0 <__kernel_rem_pio2+0x690>
 8025f94:	9b04      	ldr	r3, [sp, #16]
 8025f96:	e9c3 7800 	strd	r7, r8, [r3]
 8025f9a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8025f9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8025fa2:	e7c6      	b.n	8025f32 <__kernel_rem_pio2+0x4e2>
 8025fa4:	9d05      	ldr	r5, [sp, #20]
 8025fa6:	ab48      	add	r3, sp, #288	@ 0x120
 8025fa8:	441d      	add	r5, r3
 8025faa:	4644      	mov	r4, r8
 8025fac:	2000      	movs	r0, #0
 8025fae:	2100      	movs	r1, #0
 8025fb0:	2c00      	cmp	r4, #0
 8025fb2:	da35      	bge.n	8026020 <__kernel_rem_pio2+0x5d0>
 8025fb4:	f1b9 0f00 	cmp.w	r9, #0
 8025fb8:	d038      	beq.n	802602c <__kernel_rem_pio2+0x5dc>
 8025fba:	4602      	mov	r2, r0
 8025fbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025fc0:	9c04      	ldr	r4, [sp, #16]
 8025fc2:	e9c4 2300 	strd	r2, r3, [r4]
 8025fc6:	4602      	mov	r2, r0
 8025fc8:	460b      	mov	r3, r1
 8025fca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8025fce:	f7da f95b 	bl	8000288 <__aeabi_dsub>
 8025fd2:	ad4a      	add	r5, sp, #296	@ 0x128
 8025fd4:	2401      	movs	r4, #1
 8025fd6:	45a0      	cmp	r8, r4
 8025fd8:	da2b      	bge.n	8026032 <__kernel_rem_pio2+0x5e2>
 8025fda:	f1b9 0f00 	cmp.w	r9, #0
 8025fde:	d002      	beq.n	8025fe6 <__kernel_rem_pio2+0x596>
 8025fe0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025fe4:	4619      	mov	r1, r3
 8025fe6:	9b04      	ldr	r3, [sp, #16]
 8025fe8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8025fec:	e7a1      	b.n	8025f32 <__kernel_rem_pio2+0x4e2>
 8025fee:	9c05      	ldr	r4, [sp, #20]
 8025ff0:	ab48      	add	r3, sp, #288	@ 0x120
 8025ff2:	441c      	add	r4, r3
 8025ff4:	2000      	movs	r0, #0
 8025ff6:	2100      	movs	r1, #0
 8025ff8:	f1b8 0f00 	cmp.w	r8, #0
 8025ffc:	da09      	bge.n	8026012 <__kernel_rem_pio2+0x5c2>
 8025ffe:	f1b9 0f00 	cmp.w	r9, #0
 8026002:	d002      	beq.n	802600a <__kernel_rem_pio2+0x5ba>
 8026004:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8026008:	4619      	mov	r1, r3
 802600a:	9b04      	ldr	r3, [sp, #16]
 802600c:	e9c3 0100 	strd	r0, r1, [r3]
 8026010:	e78f      	b.n	8025f32 <__kernel_rem_pio2+0x4e2>
 8026012:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8026016:	f7da f939 	bl	800028c <__adddf3>
 802601a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802601e:	e7eb      	b.n	8025ff8 <__kernel_rem_pio2+0x5a8>
 8026020:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8026024:	f7da f932 	bl	800028c <__adddf3>
 8026028:	3c01      	subs	r4, #1
 802602a:	e7c1      	b.n	8025fb0 <__kernel_rem_pio2+0x560>
 802602c:	4602      	mov	r2, r0
 802602e:	460b      	mov	r3, r1
 8026030:	e7c6      	b.n	8025fc0 <__kernel_rem_pio2+0x570>
 8026032:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8026036:	f7da f929 	bl	800028c <__adddf3>
 802603a:	3401      	adds	r4, #1
 802603c:	e7cb      	b.n	8025fd6 <__kernel_rem_pio2+0x586>
 802603e:	ed95 7b00 	vldr	d7, [r5]
 8026042:	ed8d 7b00 	vstr	d7, [sp]
 8026046:	ed95 7b02 	vldr	d7, [r5, #8]
 802604a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802604e:	ec53 2b17 	vmov	r2, r3, d7
 8026052:	ed8d 7b06 	vstr	d7, [sp, #24]
 8026056:	f7da f919 	bl	800028c <__adddf3>
 802605a:	4602      	mov	r2, r0
 802605c:	460b      	mov	r3, r1
 802605e:	4606      	mov	r6, r0
 8026060:	460f      	mov	r7, r1
 8026062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026066:	f7da f90f 	bl	8000288 <__aeabi_dsub>
 802606a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802606e:	f7da f90d 	bl	800028c <__adddf3>
 8026072:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8026076:	e9c5 0102 	strd	r0, r1, [r5, #8]
 802607a:	e9c5 6700 	strd	r6, r7, [r5]
 802607e:	e76d      	b.n	8025f5c <__kernel_rem_pio2+0x50c>
 8026080:	ed94 7b00 	vldr	d7, [r4]
 8026084:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8026088:	ec51 0b17 	vmov	r0, r1, d7
 802608c:	4652      	mov	r2, sl
 802608e:	465b      	mov	r3, fp
 8026090:	ed8d 7b00 	vstr	d7, [sp]
 8026094:	f7da f8fa 	bl	800028c <__adddf3>
 8026098:	4602      	mov	r2, r0
 802609a:	460b      	mov	r3, r1
 802609c:	4606      	mov	r6, r0
 802609e:	460f      	mov	r7, r1
 80260a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80260a4:	f7da f8f0 	bl	8000288 <__aeabi_dsub>
 80260a8:	4652      	mov	r2, sl
 80260aa:	465b      	mov	r3, fp
 80260ac:	f7da f8ee 	bl	800028c <__adddf3>
 80260b0:	3d01      	subs	r5, #1
 80260b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80260b6:	e9c4 6700 	strd	r6, r7, [r4]
 80260ba:	e755      	b.n	8025f68 <__kernel_rem_pio2+0x518>
 80260bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80260c0:	f7da f8e4 	bl	800028c <__adddf3>
 80260c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80260c8:	e758      	b.n	8025f7c <__kernel_rem_pio2+0x52c>
 80260ca:	bf00      	nop
 80260cc:	f3af 8000 	nop.w
	...
 80260d8:	41700000 	.word	0x41700000
 80260dc:	3e700000 	.word	0x3e700000
 80260e0:	9b04      	ldr	r3, [sp, #16]
 80260e2:	9a04      	ldr	r2, [sp, #16]
 80260e4:	601f      	str	r7, [r3, #0]
 80260e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80260ea:	605c      	str	r4, [r3, #4]
 80260ec:	609d      	str	r5, [r3, #8]
 80260ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80260f2:	60d3      	str	r3, [r2, #12]
 80260f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80260f8:	6110      	str	r0, [r2, #16]
 80260fa:	6153      	str	r3, [r2, #20]
 80260fc:	e719      	b.n	8025f32 <__kernel_rem_pio2+0x4e2>
 80260fe:	bf00      	nop

08026100 <__kernel_rem_pio2f>:
 8026100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026104:	ed2d 8b04 	vpush	{d8-d9}
 8026108:	b0d9      	sub	sp, #356	@ 0x164
 802610a:	4690      	mov	r8, r2
 802610c:	9001      	str	r0, [sp, #4]
 802610e:	4ab9      	ldr	r2, [pc, #740]	@ (80263f4 <__kernel_rem_pio2f+0x2f4>)
 8026110:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8026112:	f118 0f04 	cmn.w	r8, #4
 8026116:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802611a:	460f      	mov	r7, r1
 802611c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8026120:	db27      	blt.n	8026172 <__kernel_rem_pio2f+0x72>
 8026122:	f1b8 0203 	subs.w	r2, r8, #3
 8026126:	bf48      	it	mi
 8026128:	f108 0204 	addmi.w	r2, r8, #4
 802612c:	10d2      	asrs	r2, r2, #3
 802612e:	1c55      	adds	r5, r2, #1
 8026130:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8026132:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8026404 <__kernel_rem_pio2f+0x304>
 8026136:	00e8      	lsls	r0, r5, #3
 8026138:	eba2 060b 	sub.w	r6, r2, fp
 802613c:	9002      	str	r0, [sp, #8]
 802613e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8026142:	eb0a 0c0b 	add.w	ip, sl, fp
 8026146:	ac1c      	add	r4, sp, #112	@ 0x70
 8026148:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802614c:	2000      	movs	r0, #0
 802614e:	4560      	cmp	r0, ip
 8026150:	dd11      	ble.n	8026176 <__kernel_rem_pio2f+0x76>
 8026152:	a91c      	add	r1, sp, #112	@ 0x70
 8026154:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8026158:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802615c:	f04f 0c00 	mov.w	ip, #0
 8026160:	45d4      	cmp	ip, sl
 8026162:	dc27      	bgt.n	80261b4 <__kernel_rem_pio2f+0xb4>
 8026164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8026168:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8026404 <__kernel_rem_pio2f+0x304>
 802616c:	4606      	mov	r6, r0
 802616e:	2400      	movs	r4, #0
 8026170:	e016      	b.n	80261a0 <__kernel_rem_pio2f+0xa0>
 8026172:	2200      	movs	r2, #0
 8026174:	e7db      	b.n	802612e <__kernel_rem_pio2f+0x2e>
 8026176:	42c6      	cmn	r6, r0
 8026178:	bf5d      	ittte	pl
 802617a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802617e:	ee07 1a90 	vmovpl	s15, r1
 8026182:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8026186:	eef0 7a47 	vmovmi.f32	s15, s14
 802618a:	ece4 7a01 	vstmia	r4!, {s15}
 802618e:	3001      	adds	r0, #1
 8026190:	e7dd      	b.n	802614e <__kernel_rem_pio2f+0x4e>
 8026192:	ecfe 6a01 	vldmia	lr!, {s13}
 8026196:	ed96 7a00 	vldr	s14, [r6]
 802619a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802619e:	3401      	adds	r4, #1
 80261a0:	455c      	cmp	r4, fp
 80261a2:	f1a6 0604 	sub.w	r6, r6, #4
 80261a6:	ddf4      	ble.n	8026192 <__kernel_rem_pio2f+0x92>
 80261a8:	ece9 7a01 	vstmia	r9!, {s15}
 80261ac:	f10c 0c01 	add.w	ip, ip, #1
 80261b0:	3004      	adds	r0, #4
 80261b2:	e7d5      	b.n	8026160 <__kernel_rem_pio2f+0x60>
 80261b4:	a908      	add	r1, sp, #32
 80261b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80261ba:	9104      	str	r1, [sp, #16]
 80261bc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80261be:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8026400 <__kernel_rem_pio2f+0x300>
 80261c2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80263fc <__kernel_rem_pio2f+0x2fc>
 80261c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80261ca:	9203      	str	r2, [sp, #12]
 80261cc:	4654      	mov	r4, sl
 80261ce:	00a2      	lsls	r2, r4, #2
 80261d0:	9205      	str	r2, [sp, #20]
 80261d2:	aa58      	add	r2, sp, #352	@ 0x160
 80261d4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80261d8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80261dc:	a944      	add	r1, sp, #272	@ 0x110
 80261de:	aa08      	add	r2, sp, #32
 80261e0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80261e4:	4694      	mov	ip, r2
 80261e6:	4626      	mov	r6, r4
 80261e8:	2e00      	cmp	r6, #0
 80261ea:	f1a0 0004 	sub.w	r0, r0, #4
 80261ee:	dc4c      	bgt.n	802628a <__kernel_rem_pio2f+0x18a>
 80261f0:	4628      	mov	r0, r5
 80261f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80261f6:	f000 f9f5 	bl	80265e4 <scalbnf>
 80261fa:	eeb0 8a40 	vmov.f32	s16, s0
 80261fe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8026202:	ee28 0a00 	vmul.f32	s0, s16, s0
 8026206:	f000 fa53 	bl	80266b0 <floorf>
 802620a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802620e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8026212:	2d00      	cmp	r5, #0
 8026214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8026218:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802621c:	ee17 9a90 	vmov	r9, s15
 8026220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026224:	ee38 8a67 	vsub.f32	s16, s16, s15
 8026228:	dd41      	ble.n	80262ae <__kernel_rem_pio2f+0x1ae>
 802622a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 802622e:	a908      	add	r1, sp, #32
 8026230:	f1c5 0e08 	rsb	lr, r5, #8
 8026234:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8026238:	fa46 f00e 	asr.w	r0, r6, lr
 802623c:	4481      	add	r9, r0
 802623e:	fa00 f00e 	lsl.w	r0, r0, lr
 8026242:	1a36      	subs	r6, r6, r0
 8026244:	f1c5 0007 	rsb	r0, r5, #7
 8026248:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802624c:	4106      	asrs	r6, r0
 802624e:	2e00      	cmp	r6, #0
 8026250:	dd3c      	ble.n	80262cc <__kernel_rem_pio2f+0x1cc>
 8026252:	f04f 0e00 	mov.w	lr, #0
 8026256:	f109 0901 	add.w	r9, r9, #1
 802625a:	4670      	mov	r0, lr
 802625c:	4574      	cmp	r4, lr
 802625e:	dc68      	bgt.n	8026332 <__kernel_rem_pio2f+0x232>
 8026260:	2d00      	cmp	r5, #0
 8026262:	dd03      	ble.n	802626c <__kernel_rem_pio2f+0x16c>
 8026264:	2d01      	cmp	r5, #1
 8026266:	d074      	beq.n	8026352 <__kernel_rem_pio2f+0x252>
 8026268:	2d02      	cmp	r5, #2
 802626a:	d07d      	beq.n	8026368 <__kernel_rem_pio2f+0x268>
 802626c:	2e02      	cmp	r6, #2
 802626e:	d12d      	bne.n	80262cc <__kernel_rem_pio2f+0x1cc>
 8026270:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8026274:	ee30 8a48 	vsub.f32	s16, s0, s16
 8026278:	b340      	cbz	r0, 80262cc <__kernel_rem_pio2f+0x1cc>
 802627a:	4628      	mov	r0, r5
 802627c:	9306      	str	r3, [sp, #24]
 802627e:	f000 f9b1 	bl	80265e4 <scalbnf>
 8026282:	9b06      	ldr	r3, [sp, #24]
 8026284:	ee38 8a40 	vsub.f32	s16, s16, s0
 8026288:	e020      	b.n	80262cc <__kernel_rem_pio2f+0x1cc>
 802628a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802628e:	3e01      	subs	r6, #1
 8026290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026298:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802629c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80262a0:	ecac 0a01 	vstmia	ip!, {s0}
 80262a4:	ed90 0a00 	vldr	s0, [r0]
 80262a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80262ac:	e79c      	b.n	80261e8 <__kernel_rem_pio2f+0xe8>
 80262ae:	d105      	bne.n	80262bc <__kernel_rem_pio2f+0x1bc>
 80262b0:	1e60      	subs	r0, r4, #1
 80262b2:	a908      	add	r1, sp, #32
 80262b4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80262b8:	11f6      	asrs	r6, r6, #7
 80262ba:	e7c8      	b.n	802624e <__kernel_rem_pio2f+0x14e>
 80262bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80262c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80262c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262c8:	da31      	bge.n	802632e <__kernel_rem_pio2f+0x22e>
 80262ca:	2600      	movs	r6, #0
 80262cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80262d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262d4:	f040 8098 	bne.w	8026408 <__kernel_rem_pio2f+0x308>
 80262d8:	1e60      	subs	r0, r4, #1
 80262da:	2200      	movs	r2, #0
 80262dc:	4550      	cmp	r0, sl
 80262de:	da4b      	bge.n	8026378 <__kernel_rem_pio2f+0x278>
 80262e0:	2a00      	cmp	r2, #0
 80262e2:	d065      	beq.n	80263b0 <__kernel_rem_pio2f+0x2b0>
 80262e4:	3c01      	subs	r4, #1
 80262e6:	ab08      	add	r3, sp, #32
 80262e8:	3d08      	subs	r5, #8
 80262ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d0f8      	beq.n	80262e4 <__kernel_rem_pio2f+0x1e4>
 80262f2:	4628      	mov	r0, r5
 80262f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80262f8:	f000 f974 	bl	80265e4 <scalbnf>
 80262fc:	1c63      	adds	r3, r4, #1
 80262fe:	aa44      	add	r2, sp, #272	@ 0x110
 8026300:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8026400 <__kernel_rem_pio2f+0x300>
 8026304:	0099      	lsls	r1, r3, #2
 8026306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802630a:	4623      	mov	r3, r4
 802630c:	2b00      	cmp	r3, #0
 802630e:	f280 80a9 	bge.w	8026464 <__kernel_rem_pio2f+0x364>
 8026312:	4623      	mov	r3, r4
 8026314:	2b00      	cmp	r3, #0
 8026316:	f2c0 80c7 	blt.w	80264a8 <__kernel_rem_pio2f+0x3a8>
 802631a:	aa44      	add	r2, sp, #272	@ 0x110
 802631c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8026320:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80263f8 <__kernel_rem_pio2f+0x2f8>
 8026324:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8026404 <__kernel_rem_pio2f+0x304>
 8026328:	2000      	movs	r0, #0
 802632a:	1ae2      	subs	r2, r4, r3
 802632c:	e0b1      	b.n	8026492 <__kernel_rem_pio2f+0x392>
 802632e:	2602      	movs	r6, #2
 8026330:	e78f      	b.n	8026252 <__kernel_rem_pio2f+0x152>
 8026332:	f852 1b04 	ldr.w	r1, [r2], #4
 8026336:	b948      	cbnz	r0, 802634c <__kernel_rem_pio2f+0x24c>
 8026338:	b121      	cbz	r1, 8026344 <__kernel_rem_pio2f+0x244>
 802633a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802633e:	f842 1c04 	str.w	r1, [r2, #-4]
 8026342:	2101      	movs	r1, #1
 8026344:	f10e 0e01 	add.w	lr, lr, #1
 8026348:	4608      	mov	r0, r1
 802634a:	e787      	b.n	802625c <__kernel_rem_pio2f+0x15c>
 802634c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8026350:	e7f5      	b.n	802633e <__kernel_rem_pio2f+0x23e>
 8026352:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8026356:	aa08      	add	r2, sp, #32
 8026358:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802635c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8026360:	a908      	add	r1, sp, #32
 8026362:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8026366:	e781      	b.n	802626c <__kernel_rem_pio2f+0x16c>
 8026368:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 802636c:	aa08      	add	r2, sp, #32
 802636e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8026372:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8026376:	e7f3      	b.n	8026360 <__kernel_rem_pio2f+0x260>
 8026378:	a908      	add	r1, sp, #32
 802637a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802637e:	3801      	subs	r0, #1
 8026380:	430a      	orrs	r2, r1
 8026382:	e7ab      	b.n	80262dc <__kernel_rem_pio2f+0x1dc>
 8026384:	3201      	adds	r2, #1
 8026386:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802638a:	2e00      	cmp	r6, #0
 802638c:	d0fa      	beq.n	8026384 <__kernel_rem_pio2f+0x284>
 802638e:	9905      	ldr	r1, [sp, #20]
 8026390:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8026394:	eb0d 0001 	add.w	r0, sp, r1
 8026398:	18e6      	adds	r6, r4, r3
 802639a:	a91c      	add	r1, sp, #112	@ 0x70
 802639c:	f104 0c01 	add.w	ip, r4, #1
 80263a0:	384c      	subs	r0, #76	@ 0x4c
 80263a2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80263a6:	4422      	add	r2, r4
 80263a8:	4562      	cmp	r2, ip
 80263aa:	da04      	bge.n	80263b6 <__kernel_rem_pio2f+0x2b6>
 80263ac:	4614      	mov	r4, r2
 80263ae:	e70e      	b.n	80261ce <__kernel_rem_pio2f+0xce>
 80263b0:	9804      	ldr	r0, [sp, #16]
 80263b2:	2201      	movs	r2, #1
 80263b4:	e7e7      	b.n	8026386 <__kernel_rem_pio2f+0x286>
 80263b6:	9903      	ldr	r1, [sp, #12]
 80263b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80263bc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80263c0:	9105      	str	r1, [sp, #20]
 80263c2:	ee07 1a90 	vmov	s15, r1
 80263c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80263ca:	2400      	movs	r4, #0
 80263cc:	ece6 7a01 	vstmia	r6!, {s15}
 80263d0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8026404 <__kernel_rem_pio2f+0x304>
 80263d4:	46b1      	mov	r9, r6
 80263d6:	455c      	cmp	r4, fp
 80263d8:	dd04      	ble.n	80263e4 <__kernel_rem_pio2f+0x2e4>
 80263da:	ece0 7a01 	vstmia	r0!, {s15}
 80263de:	f10c 0c01 	add.w	ip, ip, #1
 80263e2:	e7e1      	b.n	80263a8 <__kernel_rem_pio2f+0x2a8>
 80263e4:	ecfe 6a01 	vldmia	lr!, {s13}
 80263e8:	ed39 7a01 	vldmdb	r9!, {s14}
 80263ec:	3401      	adds	r4, #1
 80263ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80263f2:	e7f0      	b.n	80263d6 <__kernel_rem_pio2f+0x2d6>
 80263f4:	08026f44 	.word	0x08026f44
 80263f8:	08026f18 	.word	0x08026f18
 80263fc:	43800000 	.word	0x43800000
 8026400:	3b800000 	.word	0x3b800000
 8026404:	00000000 	.word	0x00000000
 8026408:	9b02      	ldr	r3, [sp, #8]
 802640a:	eeb0 0a48 	vmov.f32	s0, s16
 802640e:	eba3 0008 	sub.w	r0, r3, r8
 8026412:	f000 f8e7 	bl	80265e4 <scalbnf>
 8026416:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80263fc <__kernel_rem_pio2f+0x2fc>
 802641a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026422:	db19      	blt.n	8026458 <__kernel_rem_pio2f+0x358>
 8026424:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8026400 <__kernel_rem_pio2f+0x300>
 8026428:	ee60 7a27 	vmul.f32	s15, s0, s15
 802642c:	aa08      	add	r2, sp, #32
 802642e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026432:	3508      	adds	r5, #8
 8026434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026438:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802643c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026440:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8026444:	ee10 3a10 	vmov	r3, s0
 8026448:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802644c:	ee17 3a90 	vmov	r3, s15
 8026450:	3401      	adds	r4, #1
 8026452:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8026456:	e74c      	b.n	80262f2 <__kernel_rem_pio2f+0x1f2>
 8026458:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802645c:	aa08      	add	r2, sp, #32
 802645e:	ee10 3a10 	vmov	r3, s0
 8026462:	e7f6      	b.n	8026452 <__kernel_rem_pio2f+0x352>
 8026464:	a808      	add	r0, sp, #32
 8026466:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802646a:	9001      	str	r0, [sp, #4]
 802646c:	ee07 0a90 	vmov	s15, r0
 8026470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026474:	3b01      	subs	r3, #1
 8026476:	ee67 7a80 	vmul.f32	s15, s15, s0
 802647a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802647e:	ed62 7a01 	vstmdb	r2!, {s15}
 8026482:	e743      	b.n	802630c <__kernel_rem_pio2f+0x20c>
 8026484:	ecfc 6a01 	vldmia	ip!, {s13}
 8026488:	ecb5 7a01 	vldmia	r5!, {s14}
 802648c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026490:	3001      	adds	r0, #1
 8026492:	4550      	cmp	r0, sl
 8026494:	dc01      	bgt.n	802649a <__kernel_rem_pio2f+0x39a>
 8026496:	4282      	cmp	r2, r0
 8026498:	daf4      	bge.n	8026484 <__kernel_rem_pio2f+0x384>
 802649a:	a858      	add	r0, sp, #352	@ 0x160
 802649c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80264a0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80264a4:	3b01      	subs	r3, #1
 80264a6:	e735      	b.n	8026314 <__kernel_rem_pio2f+0x214>
 80264a8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80264aa:	2b02      	cmp	r3, #2
 80264ac:	dc09      	bgt.n	80264c2 <__kernel_rem_pio2f+0x3c2>
 80264ae:	2b00      	cmp	r3, #0
 80264b0:	dc2b      	bgt.n	802650a <__kernel_rem_pio2f+0x40a>
 80264b2:	d044      	beq.n	802653e <__kernel_rem_pio2f+0x43e>
 80264b4:	f009 0007 	and.w	r0, r9, #7
 80264b8:	b059      	add	sp, #356	@ 0x164
 80264ba:	ecbd 8b04 	vpop	{d8-d9}
 80264be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264c2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80264c4:	2b03      	cmp	r3, #3
 80264c6:	d1f5      	bne.n	80264b4 <__kernel_rem_pio2f+0x3b4>
 80264c8:	aa30      	add	r2, sp, #192	@ 0xc0
 80264ca:	1f0b      	subs	r3, r1, #4
 80264cc:	4413      	add	r3, r2
 80264ce:	461a      	mov	r2, r3
 80264d0:	4620      	mov	r0, r4
 80264d2:	2800      	cmp	r0, #0
 80264d4:	f1a2 0204 	sub.w	r2, r2, #4
 80264d8:	dc52      	bgt.n	8026580 <__kernel_rem_pio2f+0x480>
 80264da:	4622      	mov	r2, r4
 80264dc:	2a01      	cmp	r2, #1
 80264de:	f1a3 0304 	sub.w	r3, r3, #4
 80264e2:	dc5d      	bgt.n	80265a0 <__kernel_rem_pio2f+0x4a0>
 80264e4:	ab30      	add	r3, sp, #192	@ 0xc0
 80264e6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8026404 <__kernel_rem_pio2f+0x304>
 80264ea:	440b      	add	r3, r1
 80264ec:	2c01      	cmp	r4, #1
 80264ee:	dc67      	bgt.n	80265c0 <__kernel_rem_pio2f+0x4c0>
 80264f0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80264f4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80264f8:	2e00      	cmp	r6, #0
 80264fa:	d167      	bne.n	80265cc <__kernel_rem_pio2f+0x4cc>
 80264fc:	edc7 6a00 	vstr	s13, [r7]
 8026500:	ed87 7a01 	vstr	s14, [r7, #4]
 8026504:	edc7 7a02 	vstr	s15, [r7, #8]
 8026508:	e7d4      	b.n	80264b4 <__kernel_rem_pio2f+0x3b4>
 802650a:	ab30      	add	r3, sp, #192	@ 0xc0
 802650c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8026404 <__kernel_rem_pio2f+0x304>
 8026510:	440b      	add	r3, r1
 8026512:	4622      	mov	r2, r4
 8026514:	2a00      	cmp	r2, #0
 8026516:	da24      	bge.n	8026562 <__kernel_rem_pio2f+0x462>
 8026518:	b34e      	cbz	r6, 802656e <__kernel_rem_pio2f+0x46e>
 802651a:	eef1 7a47 	vneg.f32	s15, s14
 802651e:	edc7 7a00 	vstr	s15, [r7]
 8026522:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8026526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802652a:	aa31      	add	r2, sp, #196	@ 0xc4
 802652c:	2301      	movs	r3, #1
 802652e:	429c      	cmp	r4, r3
 8026530:	da20      	bge.n	8026574 <__kernel_rem_pio2f+0x474>
 8026532:	b10e      	cbz	r6, 8026538 <__kernel_rem_pio2f+0x438>
 8026534:	eef1 7a67 	vneg.f32	s15, s15
 8026538:	edc7 7a01 	vstr	s15, [r7, #4]
 802653c:	e7ba      	b.n	80264b4 <__kernel_rem_pio2f+0x3b4>
 802653e:	ab30      	add	r3, sp, #192	@ 0xc0
 8026540:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8026404 <__kernel_rem_pio2f+0x304>
 8026544:	440b      	add	r3, r1
 8026546:	2c00      	cmp	r4, #0
 8026548:	da05      	bge.n	8026556 <__kernel_rem_pio2f+0x456>
 802654a:	b10e      	cbz	r6, 8026550 <__kernel_rem_pio2f+0x450>
 802654c:	eef1 7a67 	vneg.f32	s15, s15
 8026550:	edc7 7a00 	vstr	s15, [r7]
 8026554:	e7ae      	b.n	80264b4 <__kernel_rem_pio2f+0x3b4>
 8026556:	ed33 7a01 	vldmdb	r3!, {s14}
 802655a:	3c01      	subs	r4, #1
 802655c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026560:	e7f1      	b.n	8026546 <__kernel_rem_pio2f+0x446>
 8026562:	ed73 7a01 	vldmdb	r3!, {s15}
 8026566:	3a01      	subs	r2, #1
 8026568:	ee37 7a27 	vadd.f32	s14, s14, s15
 802656c:	e7d2      	b.n	8026514 <__kernel_rem_pio2f+0x414>
 802656e:	eef0 7a47 	vmov.f32	s15, s14
 8026572:	e7d4      	b.n	802651e <__kernel_rem_pio2f+0x41e>
 8026574:	ecb2 7a01 	vldmia	r2!, {s14}
 8026578:	3301      	adds	r3, #1
 802657a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802657e:	e7d6      	b.n	802652e <__kernel_rem_pio2f+0x42e>
 8026580:	edd2 7a00 	vldr	s15, [r2]
 8026584:	edd2 6a01 	vldr	s13, [r2, #4]
 8026588:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802658c:	3801      	subs	r0, #1
 802658e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026592:	ed82 7a00 	vstr	s14, [r2]
 8026596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802659a:	edc2 7a01 	vstr	s15, [r2, #4]
 802659e:	e798      	b.n	80264d2 <__kernel_rem_pio2f+0x3d2>
 80265a0:	edd3 7a00 	vldr	s15, [r3]
 80265a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80265a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80265ac:	3a01      	subs	r2, #1
 80265ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80265b2:	ed83 7a00 	vstr	s14, [r3]
 80265b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80265ba:	edc3 7a01 	vstr	s15, [r3, #4]
 80265be:	e78d      	b.n	80264dc <__kernel_rem_pio2f+0x3dc>
 80265c0:	ed33 7a01 	vldmdb	r3!, {s14}
 80265c4:	3c01      	subs	r4, #1
 80265c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80265ca:	e78f      	b.n	80264ec <__kernel_rem_pio2f+0x3ec>
 80265cc:	eef1 6a66 	vneg.f32	s13, s13
 80265d0:	eeb1 7a47 	vneg.f32	s14, s14
 80265d4:	edc7 6a00 	vstr	s13, [r7]
 80265d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80265dc:	eef1 7a67 	vneg.f32	s15, s15
 80265e0:	e790      	b.n	8026504 <__kernel_rem_pio2f+0x404>
 80265e2:	bf00      	nop

080265e4 <scalbnf>:
 80265e4:	ee10 3a10 	vmov	r3, s0
 80265e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80265ec:	d02b      	beq.n	8026646 <scalbnf+0x62>
 80265ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80265f2:	d302      	bcc.n	80265fa <scalbnf+0x16>
 80265f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80265f8:	4770      	bx	lr
 80265fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80265fe:	d123      	bne.n	8026648 <scalbnf+0x64>
 8026600:	4b24      	ldr	r3, [pc, #144]	@ (8026694 <scalbnf+0xb0>)
 8026602:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8026698 <scalbnf+0xb4>
 8026606:	4298      	cmp	r0, r3
 8026608:	ee20 0a27 	vmul.f32	s0, s0, s15
 802660c:	db17      	blt.n	802663e <scalbnf+0x5a>
 802660e:	ee10 3a10 	vmov	r3, s0
 8026612:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026616:	3a19      	subs	r2, #25
 8026618:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802661c:	4288      	cmp	r0, r1
 802661e:	dd15      	ble.n	802664c <scalbnf+0x68>
 8026620:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 802669c <scalbnf+0xb8>
 8026624:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80266a0 <scalbnf+0xbc>
 8026628:	ee10 3a10 	vmov	r3, s0
 802662c:	eeb0 7a67 	vmov.f32	s14, s15
 8026630:	2b00      	cmp	r3, #0
 8026632:	bfb8      	it	lt
 8026634:	eef0 7a66 	vmovlt.f32	s15, s13
 8026638:	ee27 0a87 	vmul.f32	s0, s15, s14
 802663c:	4770      	bx	lr
 802663e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80266a4 <scalbnf+0xc0>
 8026642:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026646:	4770      	bx	lr
 8026648:	0dd2      	lsrs	r2, r2, #23
 802664a:	e7e5      	b.n	8026618 <scalbnf+0x34>
 802664c:	4410      	add	r0, r2
 802664e:	28fe      	cmp	r0, #254	@ 0xfe
 8026650:	dce6      	bgt.n	8026620 <scalbnf+0x3c>
 8026652:	2800      	cmp	r0, #0
 8026654:	dd06      	ble.n	8026664 <scalbnf+0x80>
 8026656:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802665a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802665e:	ee00 3a10 	vmov	s0, r3
 8026662:	4770      	bx	lr
 8026664:	f110 0f16 	cmn.w	r0, #22
 8026668:	da09      	bge.n	802667e <scalbnf+0x9a>
 802666a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80266a4 <scalbnf+0xc0>
 802666e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80266a8 <scalbnf+0xc4>
 8026672:	ee10 3a10 	vmov	r3, s0
 8026676:	eeb0 7a67 	vmov.f32	s14, s15
 802667a:	2b00      	cmp	r3, #0
 802667c:	e7d9      	b.n	8026632 <scalbnf+0x4e>
 802667e:	3019      	adds	r0, #25
 8026680:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8026684:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8026688:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80266ac <scalbnf+0xc8>
 802668c:	ee07 3a90 	vmov	s15, r3
 8026690:	e7d7      	b.n	8026642 <scalbnf+0x5e>
 8026692:	bf00      	nop
 8026694:	ffff3cb0 	.word	0xffff3cb0
 8026698:	4c000000 	.word	0x4c000000
 802669c:	7149f2ca 	.word	0x7149f2ca
 80266a0:	f149f2ca 	.word	0xf149f2ca
 80266a4:	0da24260 	.word	0x0da24260
 80266a8:	8da24260 	.word	0x8da24260
 80266ac:	33000000 	.word	0x33000000

080266b0 <floorf>:
 80266b0:	ee10 3a10 	vmov	r3, s0
 80266b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80266b8:	3a7f      	subs	r2, #127	@ 0x7f
 80266ba:	2a16      	cmp	r2, #22
 80266bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80266c0:	dc2b      	bgt.n	802671a <floorf+0x6a>
 80266c2:	2a00      	cmp	r2, #0
 80266c4:	da12      	bge.n	80266ec <floorf+0x3c>
 80266c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802672c <floorf+0x7c>
 80266ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80266ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80266d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266d6:	dd06      	ble.n	80266e6 <floorf+0x36>
 80266d8:	2b00      	cmp	r3, #0
 80266da:	da24      	bge.n	8026726 <floorf+0x76>
 80266dc:	2900      	cmp	r1, #0
 80266de:	4b14      	ldr	r3, [pc, #80]	@ (8026730 <floorf+0x80>)
 80266e0:	bf08      	it	eq
 80266e2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80266e6:	ee00 3a10 	vmov	s0, r3
 80266ea:	4770      	bx	lr
 80266ec:	4911      	ldr	r1, [pc, #68]	@ (8026734 <floorf+0x84>)
 80266ee:	4111      	asrs	r1, r2
 80266f0:	420b      	tst	r3, r1
 80266f2:	d0fa      	beq.n	80266ea <floorf+0x3a>
 80266f4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802672c <floorf+0x7c>
 80266f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80266fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026704:	ddef      	ble.n	80266e6 <floorf+0x36>
 8026706:	2b00      	cmp	r3, #0
 8026708:	bfbe      	ittt	lt
 802670a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 802670e:	fa40 f202 	asrlt.w	r2, r0, r2
 8026712:	189b      	addlt	r3, r3, r2
 8026714:	ea23 0301 	bic.w	r3, r3, r1
 8026718:	e7e5      	b.n	80266e6 <floorf+0x36>
 802671a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802671e:	d3e4      	bcc.n	80266ea <floorf+0x3a>
 8026720:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026724:	4770      	bx	lr
 8026726:	2300      	movs	r3, #0
 8026728:	e7dd      	b.n	80266e6 <floorf+0x36>
 802672a:	bf00      	nop
 802672c:	7149f2ca 	.word	0x7149f2ca
 8026730:	bf800000 	.word	0xbf800000
 8026734:	007fffff 	.word	0x007fffff

08026738 <_init>:
 8026738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802673a:	bf00      	nop
 802673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802673e:	bc08      	pop	{r3}
 8026740:	469e      	mov	lr, r3
 8026742:	4770      	bx	lr

08026744 <_fini>:
 8026744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026746:	bf00      	nop
 8026748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802674a:	bc08      	pop	{r3}
 802674c:	469e      	mov	lr, r3
 802674e:	4770      	bx	lr
