
BG431B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089bc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08008b94  08008b94  00009b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e2c  08008e2c  0000a6a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e2c  08008e2c  00009e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e34  08008e34  0000a6a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e34  08008e34  00009e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e38  08008e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a0  20000000  08008e3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200006a0  080094dc  0000a6a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  080094dc  0000abe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a6a0  2**0
                  CONTENTS, READONLY
 12 .debug_line   00045363  00000000  00000000  0000a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000072  00000000  00000000  0004fa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00051c4c  00000000  00000000  0004faa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000855d  00000000  00000000  000a16f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002048  00000000  00000000  000a9c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001012a4  00000000  00000000  000abc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000030f6  00000000  00000000  001acf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c3d5  00000000  00000000  001b0032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001dc407  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053b8  00000000  00000000  001dc44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00019de9  00000000  00000000  001e1804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200006a0 	.word	0x200006a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008b7c 	.word	0x08008b7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200006a4 	.word	0x200006a4
 8000214:	08008b7c 	.word	0x08008b7c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490e      	ldr	r1, [pc, #56]	@ (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0b      	ldr	r4, [pc, #44]	@ (8000554 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000532:	f003 f887 	bl	8003644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f008 fafd 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053a:	f000 f845 	bl	80005c8 <main>

0800053e <LoopForever>:

LoopForever:
    b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	200006a0 	.word	0x200006a0
  ldr r2, =_sidata
 800054c:	08008e3c 	.word	0x08008e3c
  ldr r2, =_sbss
 8000550:	200006a0 	.word	0x200006a0
  ldr r4, =_ebss
 8000554:	20000be4 	.word	0x20000be4

08000558 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <BusFault_Handler>
	...

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b510      	push	{r4, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000560:	2238      	movs	r2, #56	@ 0x38
 8000562:	2100      	movs	r1, #0
 8000564:	a806      	add	r0, sp, #24
 8000566:	f008 fadd 	bl	8008b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	2000      	movs	r0, #0
 800056c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000570:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000574:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	f004 fb17 	bl	8004ba8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 800057e:	2255      	movs	r2, #85	@ 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000584:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000588:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058c:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800058e:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000596:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f004 fb7e 	bl	8004c9c <HAL_RCC_OscConfig>
 80005a0:	b108      	cbz	r0, 80005a6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a6:	2104      	movs	r1, #4
 80005a8:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ac:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ba:	f004 fde9 	bl	8005190 <HAL_RCC_ClockConfig>
 80005be:	b108      	cbz	r0, 80005c4 <SystemClock_Config+0x68>
 80005c0:	b672      	cpsid	i
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <SystemClock_Config+0x66>
}
 80005c4:	b014      	add	sp, #80	@ 0x50
 80005c6:	bd10      	pop	{r4, pc}

080005c8 <main>:
{
 80005c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	2400      	movs	r4, #0
{
 80005ce:	b0a9      	sub	sp, #164	@ 0xa4
  HAL_Init();
 80005d0:	f003 f868 	bl	80036a4 <HAL_Init>
  SystemClock_Config();
 80005d4:	f7ff ffc2 	bl	800055c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4bab      	ldr	r3, [pc, #684]	@ (800088c <main+0x2c4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	941d      	str	r4, [sp, #116]	@ 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80005e2:	48ab      	ldr	r0, [pc, #684]	@ (8000890 <main+0x2c8>)
  hadc1.Instance = ADC1;
 80005e4:	f8df b2e4 	ldr.w	fp, [pc, #740]	@ 80008cc <main+0x304>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	f042 0204 	orr.w	r2, r2, #4
 80005ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005f0:	f002 0204 	and.w	r2, r2, #4
 80005f4:	9202      	str	r2, [sp, #8]
 80005f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005fa:	f042 0220 	orr.w	r2, r2, #32
 80005fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000600:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000602:	f002 0220 	and.w	r2, r2, #32
 8000606:	9203      	str	r2, [sp, #12]
 8000608:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800060c:	f042 0201 	orr.w	r2, r2, #1
 8000610:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000614:	f002 0201 	and.w	r2, r2, #1
 8000618:	9204      	str	r2, [sp, #16]
 800061a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800061e:	f042 0202 	orr.w	r2, r2, #2
 8000622:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800062c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000630:	a919      	add	r1, sp, #100	@ 0x64
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000632:	9319      	str	r3, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000636:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800063a:	931a      	str	r3, [sp, #104]	@ 0x68
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800063c:	f004 f934 	bl	80048a8 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000640:	4621      	mov	r1, r4
 8000642:	223c      	movs	r2, #60	@ 0x3c
 8000644:	a819      	add	r0, sp, #100	@ 0x64
  ADC_MultiModeTypeDef multimode = {0};
 8000646:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 800064a:	940e      	str	r4, [sp, #56]	@ 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800064c:	f008 fa6a 	bl	8008b24 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000650:	2220      	movs	r2, #32
 8000652:	4621      	mov	r1, r4
 8000654:	a811      	add	r0, sp, #68	@ 0x44
 8000656:	f008 fa65 	bl	8008b24 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800065a:	f44f 2800 	mov.w	r8, #524288	@ 0x80000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065e:	e9cb 440b 	strd	r4, r4, [fp, #44]	@ 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000662:	f8cb 4008 	str.w	r4, [fp, #8]
  hadc1.Init.GainCompensation = 0;
 8000666:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066a:	f8ab 401c 	strh.w	r4, [fp, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	f88b 4024 	strb.w	r4, [fp, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	f88b 4038 	strb.w	r4, [fp, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	f8cb 403c 	str.w	r4, [fp, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800067a:	f88b 4040 	strb.w	r4, [fp, #64]	@ 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800067e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000682:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	2501      	movs	r5, #1
 8000688:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 800068a:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	4658      	mov	r0, fp
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800068e:	e9cb 2800 	strd	r2, r8, [fp]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	e9cb 5405 	strd	r5, r4, [fp, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000696:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 800069a:	f8cb 6020 	str.w	r6, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	f003 f835 	bl	800370c <HAL_ADC_Init>
 80006a2:	b108      	cbz	r0, 80006a8 <main+0xe0>
 80006a4:	b672      	cpsid	i
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0xde>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a8:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	a90c      	add	r1, sp, #48	@ 0x30
 80006ac:	4658      	mov	r0, fp
 80006ae:	f003 fe57 	bl	8004360 <HAL_ADCEx_MultiModeConfigChannel>
 80006b2:	b108      	cbz	r0, 80006b8 <main+0xf0>
 80006b4:	b672      	cpsid	i
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0xee>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006b8:	4b76      	ldr	r3, [pc, #472]	@ (8000894 <main+0x2cc>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006ba:	f8ad 0088 	strh.w	r0, [sp, #136]	@ 0x88
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006be:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedOffset = 0;
 80006c2:	e9cd 401d 	strd	r4, r0, [sp, #116]	@ 0x74
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006c6:	e9cd 3a19 	strd	r3, sl, [sp, #100]	@ 0x64
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006ca:	f88d 008a 	strb.w	r0, [sp, #138]	@ 0x8a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006ce:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006d2:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006d6:	2284      	movs	r2, #132	@ 0x84
 80006d8:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006da:	a919      	add	r1, sp, #100	@ 0x64
 80006dc:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006de:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006e2:	951b      	str	r5, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedNbrOfConversion = 2;
 80006e4:	9621      	str	r6, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006e6:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006ea:	f003 fb5f 	bl	8003dac <HAL_ADCEx_InjectedConfigChannel>
 80006ee:	b108      	cbz	r0, 80006f4 <main+0x12c>
 80006f0:	b672      	cpsid	i
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x12a>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80006f4:	4a68      	ldr	r2, [pc, #416]	@ (8000898 <main+0x2d0>)
 80006f6:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006fa:	a919      	add	r1, sp, #100	@ 0x64
 80006fc:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80006fe:	e9cd 2319 	strd	r2, r3, [sp, #100]	@ 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000702:	f003 fb53 	bl	8003dac <HAL_ADCEx_InjectedConfigChannel>
 8000706:	b108      	cbz	r0, 800070c <main+0x144>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x142>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070c:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 80008d0 <main+0x308>
  sConfig.Offset = 0;
 8000710:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000712:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	a911      	add	r1, sp, #68	@ 0x44
 8000716:	4658      	mov	r0, fp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000718:	e9cd 4913 	strd	r4, r9, [sp, #76]	@ 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071c:	e9cd e211 	strd	lr, r2, [sp, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000720:	9415      	str	r4, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	f003 f8f3 	bl	800390c <HAL_ADC_ConfigChannel>
 8000726:	b108      	cbz	r0, 800072c <main+0x164>
 8000728:	b672      	cpsid	i
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0x162>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800072c:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 80008d4 <main+0x30c>
 8000730:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	a911      	add	r1, sp, #68	@ 0x44
 8000734:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000736:	e9cd c311 	strd	ip, r3, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	f003 f8e7 	bl	800390c <HAL_ADC_ConfigChannel>
 800073e:	4601      	mov	r1, r0
 8000740:	b108      	cbz	r0, 8000746 <main+0x17e>
 8000742:	b672      	cpsid	i
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0x17c>
  hadc2.Instance = ADC2;
 8000746:	f8df b190 	ldr.w	fp, [pc, #400]	@ 80008d8 <main+0x310>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800074a:	9001      	str	r0, [sp, #4]
 800074c:	223c      	movs	r2, #60	@ 0x3c
 800074e:	a819      	add	r0, sp, #100	@ 0x64
 8000750:	f008 f9e8 	bl	8008b24 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000756:	4a51      	ldr	r2, [pc, #324]	@ (800089c <main+0x2d4>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000758:	f8cb 8004 	str.w	r8, [fp, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075c:	4658      	mov	r0, fp
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800075e:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000762:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000766:	f8cb 1008 	str.w	r1, [fp, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	f8cb 4018 	str.w	r4, [fp, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800076e:	f8ab 101c 	strh.w	r1, [fp, #28]
  hadc2.Init.NbrOfConversion = 1;
 8000772:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000776:	f88b 1024 	strb.w	r1, [fp, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800077a:	f88b 1038 	strb.w	r1, [fp, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800077e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000782:	f88b 1040 	strb.w	r1, [fp, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8000786:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800078a:	f002 ffbf 	bl	800370c <HAL_ADC_Init>
 800078e:	b108      	cbz	r0, 8000794 <main+0x1cc>
 8000790:	b672      	cpsid	i
  while (1)
 8000792:	e7fe      	b.n	8000792 <main+0x1ca>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000794:	4b3f      	ldr	r3, [pc, #252]	@ (8000894 <main+0x2cc>)
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000796:	9621      	str	r6, [sp, #132]	@ 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000798:	e9cd 3a19 	strd	r3, sl, [sp, #100]	@ 0x64
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800079c:	2684      	movs	r6, #132	@ 0x84
 800079e:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedOffset = 0;
 80007a0:	901e      	str	r0, [sp, #120]	@ 0x78
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007a2:	f8ad 0088 	strh.w	r0, [sp, #136]	@ 0x88
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007a6:	f88d 008a 	strb.w	r0, [sp, #138]	@ 0x8a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007aa:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007ae:	a919      	add	r1, sp, #100	@ 0x64
 80007b0:	4658      	mov	r0, fp
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007b2:	e9cd 591b 	strd	r5, r9, [sp, #108]	@ 0x6c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80007b6:	e9cd 6323 	strd	r6, r3, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007ba:	941d      	str	r4, [sp, #116]	@ 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007bc:	f003 faf6 	bl	8003dac <HAL_ADCEx_InjectedConfigChannel>
 80007c0:	b108      	cbz	r0, 80007c6 <main+0x1fe>
 80007c2:	b672      	cpsid	i
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <main+0x1fc>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80007c6:	f240 130f 	movw	r3, #271	@ 0x10f
 80007ca:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007cc:	a919      	add	r1, sp, #100	@ 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80007ce:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <main+0x2d8>)
 80007d0:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007d2:	4658      	mov	r0, fp
 80007d4:	f003 faea 	bl	8003dac <HAL_ADCEx_InjectedConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	b108      	cbz	r0, 80007e0 <main+0x218>
 80007dc:	b672      	cpsid	i
  while (1)
 80007de:	e7fe      	b.n	80007de <main+0x216>
  hcomp1.Instance = COMP1;
 80007e0:	4830      	ldr	r0, [pc, #192]	@ (80008a4 <main+0x2dc>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007e6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007ea:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	@ (80008a8 <main+0x2e0>)
 80007ee:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007f4:	f003 fe1a 	bl	800442c <HAL_COMP_Init>
 80007f8:	b108      	cbz	r0, 80007fe <main+0x236>
 80007fa:	b672      	cpsid	i
  while (1)
 80007fc:	e7fe      	b.n	80007fc <main+0x234>
  hcomp2.Instance = COMP2;
 80007fe:	482b      	ldr	r0, [pc, #172]	@ (80008ac <main+0x2e4>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000800:	4c2b      	ldr	r4, [pc, #172]	@ (80008b0 <main+0x2e8>)
 8000802:	2300      	movs	r3, #0
 8000804:	e9c0 4300 	strd	r4, r3, [r0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000808:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800080a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800080e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000812:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000814:	f003 fe0a 	bl	800442c <HAL_COMP_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	b108      	cbz	r0, 8000820 <main+0x258>
 800081c:	b672      	cpsid	i
  while (1)
 800081e:	e7fe      	b.n	800081e <main+0x256>
  hcomp4.Instance = COMP4;
 8000820:	4824      	ldr	r0, [pc, #144]	@ (80008b4 <main+0x2ec>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000822:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000826:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800082a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 800082e:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <main+0x2f0>)
 8000830:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000832:	f003 fdfb 	bl	800442c <HAL_COMP_Init>
 8000836:	b108      	cbz	r0, 800083c <main+0x274>
 8000838:	b672      	cpsid	i
  while (1)
 800083a:	e7fe      	b.n	800083a <main+0x272>
  hcordic.Instance = CORDIC;
 800083c:	481f      	ldr	r0, [pc, #124]	@ (80008bc <main+0x2f4>)
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <main+0x2f8>)
 8000840:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000842:	f003 fe93 	bl	800456c <HAL_CORDIC_Init>
 8000846:	4601      	mov	r1, r0
 8000848:	b108      	cbz	r0, 800084e <main+0x286>
 800084a:	b672      	cpsid	i
  while (1)
 800084c:	e7fe      	b.n	800084c <main+0x284>
  hdac3.Instance = DAC3;
 800084e:	4d1d      	ldr	r5, [pc, #116]	@ (80008c4 <main+0x2fc>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000850:	2230      	movs	r2, #48	@ 0x30
 8000852:	a819      	add	r0, sp, #100	@ 0x64
 8000854:	f008 f966 	bl	8008b24 <memset>
  hdac3.Instance = DAC3;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <main+0x300>)
 800085a:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800085c:	4628      	mov	r0, r5
 800085e:	f003 ff1b 	bl	8004698 <HAL_DAC_Init>
 8000862:	4602      	mov	r2, r0
 8000864:	b108      	cbz	r0, 800086a <main+0x2a2>
 8000866:	b672      	cpsid	i
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x2a0>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800086a:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800086c:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000870:	f8ad 0068 	strh.w	r0, [sp, #104]	@ 0x68
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000874:	901d      	str	r0, [sp, #116]	@ 0x74
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000876:	9020      	str	r0, [sp, #128]	@ 0x80
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000878:	a919      	add	r1, sp, #100	@ 0x64
 800087a:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800087c:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000880:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000882:	f003 ff1f 	bl	80046c4 <HAL_DAC_ConfigChannel>
 8000886:	b348      	cbz	r0, 80008dc <main+0x314>
 8000888:	b672      	cpsid	i
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x2c2>
 800088c:	40021000 	.word	0x40021000
 8000890:	48000800 	.word	0x48000800
 8000894:	0c900008 	.word	0x0c900008
 8000898:	32601000 	.word	0x32601000
 800089c:	50000100 	.word	0x50000100
 80008a0:	cb8c0000 	.word	0xcb8c0000
 80008a4:	200008d0 	.word	0x200008d0
 80008a8:	40010200 	.word	0x40010200
 80008ac:	200008ac 	.word	0x200008ac
 80008b0:	40010204 	.word	0x40010204
 80008b4:	20000888 	.word	0x20000888
 80008b8:	4001020c 	.word	0x4001020c
 80008bc:	20000860 	.word	0x20000860
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	2000084c 	.word	0x2000084c
 80008c8:	50001000 	.word	0x50001000
 80008cc:	20000960 	.word	0x20000960
 80008d0:	04300002 	.word	0x04300002
 80008d4:	14f00020 	.word	0x14f00020
 80008d8:	200008f4 	.word	0x200008f4
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008dc:	4628      	mov	r0, r5
 80008de:	2210      	movs	r2, #16
 80008e0:	a919      	add	r1, sp, #100	@ 0x64
 80008e2:	f003 feef 	bl	80046c4 <HAL_DAC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b108      	cbz	r0, 80008ee <main+0x326>
 80008ea:	b672      	cpsid	i
  while (1)
 80008ec:	e7fe      	b.n	80008ec <main+0x324>
  hopamp1.Instance = OPAMP1;
 80008ee:	48a2      	ldr	r0, [pc, #648]	@ (8000b78 <main+0x5b0>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80008f0:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80008f4:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80008f8:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80008fa:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008fc:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80008fe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000900:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8000904:	4b9d      	ldr	r3, [pc, #628]	@ (8000b7c <main+0x5b4>)
 8000906:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000908:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800090c:	f004 f8d4 	bl	8004ab8 <HAL_OPAMP_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	b108      	cbz	r0, 8000918 <main+0x350>
 8000914:	b672      	cpsid	i
  while (1)
 8000916:	e7fe      	b.n	8000916 <main+0x34e>
  hopamp2.Instance = OPAMP2;
 8000918:	4899      	ldr	r0, [pc, #612]	@ (8000b80 <main+0x5b8>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800091a:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800091e:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000920:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000922:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000924:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8000926:	4b97      	ldr	r3, [pc, #604]	@ (8000b84 <main+0x5bc>)
 8000928:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800092a:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800092e:	f004 f8c3 	bl	8004ab8 <HAL_OPAMP_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	b108      	cbz	r0, 800093a <main+0x372>
 8000936:	b672      	cpsid	i
  while (1)
 8000938:	e7fe      	b.n	8000938 <main+0x370>
  hopamp3.Instance = OPAMP3;
 800093a:	4893      	ldr	r0, [pc, #588]	@ (8000b88 <main+0x5c0>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800093c:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000940:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000942:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000944:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000946:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 8000948:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 800094a:	4b90      	ldr	r3, [pc, #576]	@ (8000b8c <main+0x5c4>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800094c:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 800094e:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8000950:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000952:	f004 f8b1 	bl	8004ab8 <HAL_OPAMP_Init>
 8000956:	4604      	mov	r4, r0
 8000958:	b108      	cbz	r0, 800095e <main+0x396>
 800095a:	b672      	cpsid	i
  while (1)
 800095c:	e7fe      	b.n	800095c <main+0x394>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095e:	4601      	mov	r1, r0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000960:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8000964:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000968:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
 800096c:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
 8000970:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000978:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800097c:	9010      	str	r0, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097e:	9006      	str	r0, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000980:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	9017      	str	r0, [sp, #92]	@ 0x5c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000984:	2234      	movs	r2, #52	@ 0x34
 8000986:	a819      	add	r0, sp, #100	@ 0x64
 8000988:	f008 f8cc 	bl	8008b24 <memset>
  htim1.Instance = TIM1;
 800098c:	4880      	ldr	r0, [pc, #512]	@ (8000b90 <main+0x5c8>)
 800098e:	4b81      	ldr	r3, [pc, #516]	@ (8000b94 <main+0x5cc>)
 8000990:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000992:	2120      	movs	r1, #32
 8000994:	f640 3311 	movw	r3, #2833	@ 0xb11
 8000998:	e9c0 1302 	strd	r1, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800099c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80009a0:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009a2:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009a6:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a8:	f004 ff2e 	bl	8005808 <HAL_TIM_Base_Init>
 80009ac:	b108      	cbz	r0, 80009b2 <main+0x3ea>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x3e8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b2:	4877      	ldr	r0, [pc, #476]	@ (8000b90 <main+0x5c8>)
 80009b4:	f004 ffa0 	bl	80058f8 <HAL_TIM_PWM_Init>
 80009b8:	b108      	cbz	r0, 80009be <main+0x3f6>
 80009ba:	b672      	cpsid	i
  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0x3f4>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009be:	2306      	movs	r3, #6
 80009c0:	2710      	movs	r7, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009c2:	4873      	ldr	r0, [pc, #460]	@ (8000b90 <main+0x5c8>)
 80009c4:	a90c      	add	r1, sp, #48	@ 0x30
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009c6:	e9cd 370c 	strd	r3, r7, [sp, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009ca:	f005 f80b 	bl	80059e4 <HAL_TIM_SlaveConfigSynchro>
 80009ce:	b108      	cbz	r0, 80009d4 <main+0x40c>
 80009d0:	b672      	cpsid	i
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x40a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009d8:	2570      	movs	r5, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009da:	486d      	ldr	r0, [pc, #436]	@ (8000b90 <main+0x5c8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009dc:	9506      	str	r5, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009de:	a906      	add	r1, sp, #24
 80009e0:	f005 f9c4 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	b108      	cbz	r0, 80009ea <main+0x422>
 80009e6:	b672      	cpsid	i
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <main+0x420>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009ea:	2402      	movs	r4, #2
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ec:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009ee:	2301      	movs	r3, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009f0:	4867      	ldr	r0, [pc, #412]	@ (8000b90 <main+0x5c8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009f2:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009f4:	aa09      	add	r2, sp, #36	@ 0x24
 80009f6:	4621      	mov	r1, r4
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009f8:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009fa:	f005 fa57 	bl	8005eac <HAL_TIMEx_ConfigBreakInput>
 80009fe:	b108      	cbz	r0, 8000a04 <main+0x43c>
 8000a00:	b672      	cpsid	i
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <main+0x43a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a04:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a06:	4862      	ldr	r0, [pc, #392]	@ (8000b90 <main+0x5c8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a08:	9609      	str	r6, [sp, #36]	@ 0x24
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a0a:	aa09      	add	r2, sp, #36	@ 0x24
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	f005 fa4d 	bl	8005eac <HAL_TIMEx_ConfigBreakInput>
 8000a12:	b108      	cbz	r0, 8000a18 <main+0x450>
 8000a14:	b672      	cpsid	i
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <main+0x44e>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a18:	aa09      	add	r2, sp, #36	@ 0x24
 8000a1a:	485d      	ldr	r0, [pc, #372]	@ (8000b90 <main+0x5c8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a1c:	9709      	str	r7, [sp, #36]	@ 0x24
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a1e:	4621      	mov	r1, r4
 8000a20:	f005 fa44 	bl	8005eac <HAL_TIMEx_ConfigBreakInput>
 8000a24:	4602      	mov	r2, r0
 8000a26:	b108      	cbz	r0, 8000a2c <main+0x464>
 8000a28:	b672      	cpsid	i
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x462>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a34:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a38:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	4855      	ldr	r0, [pc, #340]	@ (8000b90 <main+0x5c8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	a911      	add	r1, sp, #68	@ 0x44
 8000a40:	f005 f8ae 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	b108      	cbz	r0, 8000a4a <main+0x482>
 8000a46:	b672      	cpsid	i
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <main+0x480>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4a:	4851      	ldr	r0, [pc, #324]	@ (8000b90 <main+0x5c8>)
 8000a4c:	4632      	mov	r2, r6
 8000a4e:	a911      	add	r1, sp, #68	@ 0x44
 8000a50:	f005 f8a6 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8000a54:	b108      	cbz	r0, 8000a5a <main+0x492>
 8000a56:	b672      	cpsid	i
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <main+0x490>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5a:	484d      	ldr	r0, [pc, #308]	@ (8000b90 <main+0x5c8>)
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	a911      	add	r1, sp, #68	@ 0x44
 8000a60:	f005 f89e 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	b108      	cbz	r0, 8000a6a <main+0x4a2>
 8000a66:	b672      	cpsid	i
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x4a0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a6a:	4849      	ldr	r0, [pc, #292]	@ (8000b90 <main+0x5c8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a6c:	9511      	str	r5, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	a911      	add	r1, sp, #68	@ 0x44
 8000a72:	f005 f895 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	b108      	cbz	r0, 8000a7c <main+0x4b4>
 8000a78:	b672      	cpsid	i
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <main+0x4b2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a7c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a84:	e9cd 4219 	strd	r4, r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a88:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8000a8c:	2244      	movs	r2, #68	@ 0x44
 8000a8e:	e9cd 421b 	strd	r4, r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000a92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a96:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000a98:	9221      	str	r2, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9a:	483d      	ldr	r0, [pc, #244]	@ (8000b90 <main+0x5c8>)
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000a9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa0:	a919      	add	r1, sp, #100	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa2:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000aa6:	2603      	movs	r6, #3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa8:	e9cd 341d 	strd	r3, r4, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aac:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000ab0:	e9cd 2622 	strd	r2, r6, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab4:	e9cd 3324 	strd	r3, r3, [sp, #144]	@ 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab8:	f005 f9aa 	bl	8005e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000abc:	4605      	mov	r5, r0
 8000abe:	b108      	cbz	r0, 8000ac4 <main+0x4fc>
 8000ac0:	b672      	cpsid	i
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <main+0x4fa>
  HAL_TIM_MspPostInit(&htim1);
 8000ac4:	4832      	ldr	r0, [pc, #200]	@ (8000b90 <main+0x5c8>)
  huart2.Instance = USART2;
 8000ac6:	4c34      	ldr	r4, [pc, #208]	@ (8000b98 <main+0x5d0>)
  HAL_TIM_MspPostInit(&htim1);
 8000ac8:	f001 febc 	bl	8002844 <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 115200;
 8000acc:	4a33      	ldr	r2, [pc, #204]	@ (8000b9c <main+0x5d4>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	62a5      	str	r5, [r4, #40]	@ 0x28
  huart2.Init.BaudRate = 115200;
 8000ad0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000ad4:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad8:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ada:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	e9c4 5304 	strd	r5, r3, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aec:	f005 fc4e 	bl	800638c <HAL_UART_Init>
 8000af0:	4601      	mov	r1, r0
 8000af2:	b108      	cbz	r0, 8000af8 <main+0x530>
 8000af4:	b672      	cpsid	i
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <main+0x52e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af8:	4620      	mov	r0, r4
 8000afa:	f005 fcd1 	bl	80064a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000afe:	4601      	mov	r1, r0
 8000b00:	b108      	cbz	r0, 8000b06 <main+0x53e>
 8000b02:	b672      	cpsid	i
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <main+0x53c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b06:	4620      	mov	r0, r4
 8000b08:	f005 fd0c 	bl	8006524 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0c:	b108      	cbz	r0, 8000b12 <main+0x54a>
 8000b0e:	b672      	cpsid	i
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x548>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b12:	4620      	mov	r0, r4
 8000b14:	f005 fca6 	bl	8006464 <HAL_UARTEx_DisableFifoMode>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	b108      	cbz	r0, 8000b20 <main+0x558>
 8000b1c:	b672      	cpsid	i
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <main+0x556>
  MX_MotorControl_Init();
 8000b20:	f001 fa1a 	bl	8001f58 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2104      	movs	r1, #4
 8000b28:	2018      	movs	r0, #24
 8000b2a:	f003 fd4b 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b2e:	2018      	movs	r0, #24
 8000b30:	f003 fd84 	bl	800463c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b34:	4622      	mov	r2, r4
 8000b36:	4621      	mov	r1, r4
 8000b38:	2019      	movs	r0, #25
 8000b3a:	f003 fd43 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b3e:	2019      	movs	r0, #25
 8000b40:	f003 fd7c 	bl	800463c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000b44:	4622      	mov	r2, r4
 8000b46:	2102      	movs	r1, #2
 8000b48:	2012      	movs	r0, #18
 8000b4a:	f003 fd3b 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b4e:	2012      	movs	r0, #18
 8000b50:	f003 fd74 	bl	800463c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	4631      	mov	r1, r6
 8000b58:	2026      	movs	r0, #38	@ 0x26
 8000b5a:	f003 fd33 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5e:	2026      	movs	r0, #38	@ 0x26
 8000b60:	f003 fd6c 	bl	800463c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000b64:	2028      	movs	r0, #40	@ 0x28
 8000b66:	4622      	mov	r2, r4
 8000b68:	4631      	mov	r1, r6
 8000b6a:	f003 fd2b 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b6e:	2028      	movs	r0, #40	@ 0x28
 8000b70:	f003 fd64 	bl	800463c <HAL_NVIC_EnableIRQ>
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <main+0x5ac>
 8000b76:	bf00      	nop
 8000b78:	20000810 	.word	0x20000810
 8000b7c:	40010300 	.word	0x40010300
 8000b80:	200007d4 	.word	0x200007d4
 8000b84:	40010304 	.word	0x40010304
 8000b88:	20000798 	.word	0x20000798
 8000b8c:	40010308 	.word	0x40010308
 8000b90:	2000074c 	.word	0x2000074c
 8000b94:	40012c00 	.word	0x40012c00
 8000b98:	200006bc 	.word	0x200006bc
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <Error_Handler>:
 8000ba0:	b672      	cpsid	i
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <Error_Handler+0x2>

08000ba4 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000ba4:	4b01      	ldr	r3, [pc, #4]	@ (8000bac <MC_StartMotor1+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	f000 b83a 	b.w	8000c20 <MCI_StartMotor>
 8000bac:	20000ad0 	.word	0x20000ad0

08000bb0 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000bb0:	4b01      	ldr	r3, [pc, #4]	@ (8000bb8 <MC_StopMotor1+0x8>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	f000 b83e 	b.w	8000c34 <MCI_StopMotor>
 8000bb8:	20000ad0 	.word	0x20000ad0

08000bbc <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000bbc:	4b01      	ldr	r3, [pc, #4]	@ (8000bc4 <MC_GetSTMStateMotor1+0x8>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	f000 b880 	b.w	8000cc4 <MCI_GetSTMState>
 8000bc4:	20000ad0 	.word	0x20000ad0

08000bc8 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000bc8:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000bcc:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000bd0:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000bd2:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000bd6:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000bda:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000bde:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000be2:	4770      	bx	lr

08000be4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000be4:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000be8:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000bec:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000bf0:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000bf2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bf4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000bf6:	4770      	bx	lr

08000bf8 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000bf8:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bfc:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000bfe:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000c02:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000c04:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c06:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000c0c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000c0e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c10:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000c12:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000c14:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c18:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c1a:	b002      	add	sp, #8
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000c20:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c22:	2103      	movs	r1, #3
{
 8000c24:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c26:	6800      	ldr	r0, [r0, #0]
 8000c28:	f007 fa08 	bl	800803c <STM_NextState>

  if ( RetVal == true )
 8000c2c:	b108      	cbz	r0, 8000c32 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000c32:	bd10      	pop	{r4, pc}

08000c34 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000c34:	6800      	ldr	r0, [r0, #0]
 8000c36:	2107      	movs	r1, #7
 8000c38:	f007 ba00 	b.w	800803c <STM_NextState>

08000c3c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000c3c:	6800      	ldr	r0, [r0, #0]
 8000c3e:	f007 ba79 	b.w	8008134 <STM_FaultAcknowledged>
 8000c42:	bf00      	nop

08000c44 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000c44:	6800      	ldr	r0, [r0, #0]
 8000c46:	2101      	movs	r1, #1
 8000c48:	f007 b9f8 	b.w	800803c <STM_NextState>

08000c4c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000c4c:	b178      	cbz	r0, 8000c6e <MCI_ExecBufferedCommands+0x22>
{
 8000c4e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000c50:	7e03      	ldrb	r3, [r0, #24]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	4604      	mov	r4, r0
 8000c56:	d000      	beq.n	8000c5a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000c58:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000c5a:	7b01      	ldrb	r1, [r0, #12]
 8000c5c:	2902      	cmp	r1, #2
 8000c5e:	d020      	beq.n	8000ca2 <MCI_ExecBufferedCommands+0x56>
 8000c60:	2903      	cmp	r1, #3
 8000c62:	d005      	beq.n	8000c70 <MCI_ExecBufferedCommands+0x24>
 8000c64:	2901      	cmp	r1, #1
 8000c66:	d00c      	beq.n	8000c82 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	7623      	strb	r3, [r4, #24]
}
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c70:	6882      	ldr	r2, [r0, #8]
 8000c72:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000c76:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000c7a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	7623      	strb	r3, [r4, #24]
}
 8000c80:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c82:	6883      	ldr	r3, [r0, #8]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c8a:	6840      	ldr	r0, [r0, #4]
 8000c8c:	f007 f8fa 	bl	8007e84 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000c90:	8ae2      	ldrh	r2, [r4, #22]
 8000c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c96:	6860      	ldr	r0, [r4, #4]
 8000c98:	f007 f8f8 	bl	8007e8c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d0e3      	beq.n	8000c68 <MCI_ExecBufferedCommands+0x1c>
 8000ca0:	e7ec      	b.n	8000c7c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000ca2:	6883      	ldr	r3, [r0, #8]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000caa:	6840      	ldr	r0, [r0, #4]
 8000cac:	f007 f8ea 	bl	8007e84 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000cb0:	8ae2      	ldrh	r2, [r4, #22]
 8000cb2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000cb6:	6860      	ldr	r0, [r4, #4]
 8000cb8:	f007 f8e8 	bl	8007e8c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d0d3      	beq.n	8000c68 <MCI_ExecBufferedCommands+0x1c>
 8000cc0:	e7dc      	b.n	8000c7c <MCI_ExecBufferedCommands+0x30>
 8000cc2:	bf00      	nop

08000cc4 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000cc4:	6800      	ldr	r0, [r0, #0]
 8000cc6:	f007 ba33 	b.w	8008130 <STM_GetState>
 8000cca:	bf00      	nop

08000ccc <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000ccc:	7e40      	ldrb	r0, [r0, #25]
 8000cce:	4770      	bx	lr

08000cd0 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000cd0:	7b03      	ldrb	r3, [r0, #12]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d005      	beq.n	8000ce2 <MCI_GetImposedMotorDirection+0x12>
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d013      	beq.n	8000d02 <MCI_GetImposedMotorDirection+0x32>
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d009      	beq.n	8000cf2 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8000cde:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000ce0:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000ce2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        retVal = -1;
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bfac      	ite	ge
 8000cea:	2001      	movge	r0, #1
 8000cec:	f04f 30ff 	movlt.w	r0, #4294967295
 8000cf0:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000cf2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
        retVal = -1;
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bfac      	ite	ge
 8000cfa:	2001      	movge	r0, #1
 8000cfc:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d00:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000d02:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
        retVal = -1;
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bfac      	ite	ge
 8000d0a:	2001      	movge	r0, #1
 8000d0c:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000d14:	7b03      	ldrb	r3, [r0, #12]
 8000d16:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000d18:	bf0c      	ite	eq
 8000d1a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000d1e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000d24:	6840      	ldr	r0, [r0, #4]
 8000d26:	f007 b8f5 	b.w	8007f14 <STC_StopRamp>
 8000d2a:	bf00      	nop

08000d2c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000d2c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000d2e:	6840      	ldr	r0, [r0, #4]
 8000d30:	f007 f88e 	bl	8007e50 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000d38:	f007 b82a 	b.w	8007d90 <SPD_GetAvrgMecSpeedUnit>

08000d3c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000d3c:	6840      	ldr	r0, [r0, #4]
 8000d3e:	f007 b891 	b.w	8007e64 <STC_GetMecSpeedRefUnit>
 8000d42:	bf00      	nop

08000d44 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000d44:	6882      	ldr	r2, [r0, #8]
 8000d46:	6810      	ldr	r0, [r2, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	b282      	uxth	r2, r0
 8000d4c:	f362 030f 	bfi	r3, r2, #0, #16
 8000d50:	0c00      	lsrs	r0, r0, #16
 8000d52:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d56:	b082      	sub	sp, #8
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	b002      	add	sp, #8
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000d60:	6882      	ldr	r2, [r0, #8]
 8000d62:	6850      	ldr	r0, [r2, #4]
 8000d64:	2300      	movs	r3, #0
 8000d66:	b282      	uxth	r2, r0
 8000d68:	f362 030f 	bfi	r3, r2, #0, #16
 8000d6c:	0c00      	lsrs	r0, r0, #16
 8000d6e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d72:	b082      	sub	sp, #8
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	b002      	add	sp, #8
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000d7c:	6882      	ldr	r2, [r0, #8]
 8000d7e:	68d0      	ldr	r0, [r2, #12]
 8000d80:	2300      	movs	r3, #0
 8000d82:	b282      	uxth	r2, r0
 8000d84:	f362 030f 	bfi	r3, r2, #0, #16
 8000d88:	0c00      	lsrs	r0, r0, #16
 8000d8a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d8e:	b082      	sub	sp, #8
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	b002      	add	sp, #8
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000d98:	6882      	ldr	r2, [r0, #8]
 8000d9a:	6910      	ldr	r0, [r2, #16]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	b282      	uxth	r2, r0
 8000da0:	f362 030f 	bfi	r3, r2, #0, #16
 8000da4:	0c00      	lsrs	r0, r0, #16
 8000da6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000daa:	b082      	sub	sp, #8
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	b002      	add	sp, #8
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000db4:	6882      	ldr	r2, [r0, #8]
 8000db6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	b282      	uxth	r2, r0
 8000dbe:	f362 030f 	bfi	r3, r2, #0, #16
 8000dc2:	0c00      	lsrs	r0, r0, #16
 8000dc4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dc8:	b082      	sub	sp, #8
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	b002      	add	sp, #8
 8000dce:	4770      	bx	lr

08000dd0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000dd0:	6882      	ldr	r2, [r0, #8]
 8000dd2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	b282      	uxth	r2, r0
 8000dda:	f362 030f 	bfi	r3, r2, #0, #16
 8000dde:	0c00      	lsrs	r0, r0, #16
 8000de0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000de4:	b082      	sub	sp, #8
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	b002      	add	sp, #8
 8000dea:	4770      	bx	lr

08000dec <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000dec:	6883      	ldr	r3, [r0, #8]
}
 8000dee:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000df2:	4770      	bx	lr

08000df4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000df4:	2300      	movs	r3, #0
 8000df6:	6882      	ldr	r2, [r0, #8]
 8000df8:	f361 030f 	bfi	r3, r1, #0, #16
 8000dfc:	f361 431f 	bfi	r3, r1, #16, #16
 8000e00:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000e08:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000e0a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000e0e:	f007 f8d7 	bl	8007fc0 <STC_GetDefaultIqdref>
 8000e12:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000e16:	8220      	strh	r0, [r4, #16]
 8000e18:	8263      	strh	r3, [r4, #18]
}
 8000e1a:	bd10      	pop	{r4, pc}

08000e1c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000e1c:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e20:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000e24:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e28:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000e2c:	fb10 f202 	smulbb	r2, r0, r2
 8000e30:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000e34:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8000e38:	b084      	sub	sp, #16
 8000e3a:	b203      	sxth	r3, r0
  if ( wbeta_tmp > INT16_MAX )
 8000e3c:	da05      	bge.n	8000e4a <MCM_Clarke+0x2e>
 8000e3e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000e40:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8000e44:	da0c      	bge.n	8000e60 <MCM_Clarke+0x44>
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <MCM_Clarke+0x50>)
 8000e48:	e001      	b.n	8000e4e <MCM_Clarke+0x32>
 8000e4a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	2000      	movs	r0, #0
 8000e52:	f363 000f 	bfi	r0, r3, #0, #16
 8000e56:	b293      	uxth	r3, r2
 8000e58:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000e5c:	b004      	add	sp, #16
 8000e5e:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <MCM_Clarke+0x50>)
 8000e62:	b20a      	sxth	r2, r1
 8000e64:	4282      	cmp	r2, r0
 8000e66:	bfb8      	it	lt
 8000e68:	4602      	movlt	r2, r0
 8000e6a:	e7f0      	b.n	8000e4e <MCM_Clarke+0x32>
 8000e6c:	ffff8001 	.word	0xffff8001

08000e70 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MCM_Trig_Functions+0x28>)
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <MCM_Trig_Functions+0x2c>)
 8000e74:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000e76:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
 8000e7a:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000e7e:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000e80:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000e82:	2000      	movs	r0, #0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f362 000f 	bfi	r0, r2, #0, #16
 8000e8a:	0c1b      	lsrs	r3, r3, #16
{
 8000e8c:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000e8e:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000e92:	b002      	add	sp, #8
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	00600040 	.word	0x00600040

08000ea0 <MCM_Park>:
{
 8000ea0:	b530      	push	{r4, r5, lr}
 8000ea2:	4605      	mov	r5, r0
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	f7ff ffe1 	bl	8000e70 <MCM_Trig_Functions>
 8000eae:	b22d      	sxth	r5, r5
 8000eb0:	b201      	sxth	r1, r0
 8000eb2:	1424      	asrs	r4, r4, #16
 8000eb4:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000eb6:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000eba:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 8000ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec2:	da05      	bge.n	8000ed0 <MCM_Park+0x30>
 8000ec4:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000ec6:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8000eca:	da22      	bge.n	8000f12 <MCM_Park+0x72>
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <MCM_Park+0x80>)
 8000ece:	e001      	b.n	8000ed4 <MCM_Park+0x34>
 8000ed0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000ed4:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ed8:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000edc:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ee0:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000ee4:	da04      	bge.n	8000ef0 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 8000ee6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000eea:	da0c      	bge.n	8000f06 <MCM_Park+0x66>
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MCM_Park+0x80>)
 8000eee:	e001      	b.n	8000ef4 <MCM_Park+0x54>
 8000ef0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f362 000f 	bfi	r0, r2, #0, #16
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000f02:	b005      	add	sp, #20
 8000f04:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f06:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <MCM_Park+0x80>)
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	bfb8      	it	lt
 8000f0e:	460b      	movlt	r3, r1
 8000f10:	e7f0      	b.n	8000ef4 <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f12:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <MCM_Park+0x80>)
 8000f14:	b212      	sxth	r2, r2
 8000f16:	429a      	cmp	r2, r3
 8000f18:	bfb8      	it	lt
 8000f1a:	461a      	movlt	r2, r3
 8000f1c:	e7da      	b.n	8000ed4 <MCM_Park+0x34>
 8000f1e:	bf00      	nop
 8000f20:	ffff8001 	.word	0xffff8001

08000f24 <MCM_Rev_Park>:
{
 8000f24:	b530      	push	{r4, r5, lr}
 8000f26:	4605      	mov	r5, r0
 8000f28:	b085      	sub	sp, #20
 8000f2a:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	f7ff ff9f 	bl	8000e70 <MCM_Trig_Functions>
 8000f32:	1424      	asrs	r4, r4, #16
 8000f34:	1402      	asrs	r2, r0, #16
 8000f36:	b22d      	sxth	r5, r5
 8000f38:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000f3a:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000f3e:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000f42:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000f46:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000f4a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f363 000f 	bfi	r0, r3, #0, #16
 8000f54:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000f58:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000f5c:	b005      	add	sp, #20
 8000f5e:	bd30      	pop	{r4, r5, pc}

08000f60 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	2326      	movs	r3, #38	@ 0x26
 8000f64:	4916      	ldr	r1, [pc, #88]	@ (8000fc0 <FOC_Clear+0x60>)
 8000f66:	fb00 f303 	mul.w	r3, r0, r3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	50cc      	str	r4, [r1, r3]
{
 8000f6e:	4605      	mov	r5, r0
 8000f70:	f103 0208 	add.w	r2, r3, #8
 8000f74:	1858      	adds	r0, r3, r1
 8000f76:	3310      	adds	r3, #16
 8000f78:	440a      	add	r2, r1
 8000f7a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f7c:	4911      	ldr	r1, [pc, #68]	@ (8000fc4 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000f7e:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000f80:	6054      	str	r4, [r2, #4]
 8000f82:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f84:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000f88:	f8c3 400a 	str.w	r4, [r3, #10]
 8000f8c:	f8c3 4006 	str.w	r4, [r3, #6]
 8000f90:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f94:	4621      	mov	r1, r4
 8000f96:	f005 fc01 	bl	800679c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <FOC_Clear+0x68>)
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fa2:	f005 fbfb 	bl	800679c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <FOC_Clear+0x6c>)
 8000fa8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fac:	f006 ff52 	bl	8007e54 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <FOC_Clear+0x70>)
 8000fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000fba:	f005 bdef 	b.w	8006b9c <PWMC_SwitchOffPWM>
 8000fbe:	bf00      	nop
 8000fc0:	20000a9c 	.word	0x20000a9c
 8000fc4:	20000a14 	.word	0x20000a14
 8000fc8:	20000a10 	.word	0x20000a10
 8000fcc:	20000a1c 	.word	0x20000a1c
 8000fd0:	20000a04 	.word	0x20000a04

08000fd4 <MCboot>:
{
 8000fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b089      	sub	sp, #36	@ 0x24
  STM_Init(&STM[M1]);
 8000fdc:	485c      	ldr	r0, [pc, #368]	@ (8001150 <MCboot+0x17c>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000fde:	4f5d      	ldr	r7, [pc, #372]	@ (8001154 <MCboot+0x180>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000fe0:	4e5d      	ldr	r6, [pc, #372]	@ (8001158 <MCboot+0x184>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000fe2:	4d5e      	ldr	r5, [pc, #376]	@ (800115c <MCboot+0x188>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000fe4:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 80011ac <MCboot+0x1d8>
  VSS_Init (&VirtualSpeedSensorM1);
 8000fe8:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 80011b0 <MCboot+0x1dc>
  PID_HandleInit(&PIDIqHandle_M1);
 8000fec:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80011b4 <MCboot+0x1e0>
  PID_HandleInit(&PIDIdHandle_M1);
 8000ff0:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 80011b8 <MCboot+0x1e4>
{
 8000ff4:	e9cd 3104 	strd	r3, r1, [sp, #16]
  STM_Init(&STM[M1]);
 8000ff8:	f006 fff8 	bl	8007fec <STM_Init>
  bMCBootCompleted = 0;
 8000ffc:	4a58      	ldr	r2, [pc, #352]	@ (8001160 <MCboot+0x18c>)
  pCLM[M1] = &CircleLimitationM1;
 8000ffe:	4b59      	ldr	r3, [pc, #356]	@ (8001164 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001000:	4859      	ldr	r0, [pc, #356]	@ (8001168 <MCboot+0x194>)
 8001002:	6038      	str	r0, [r7, #0]
  bMCBootCompleted = 0;
 8001004:	2400      	movs	r4, #0
 8001006:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001008:	4a58      	ldr	r2, [pc, #352]	@ (800116c <MCboot+0x198>)
 800100a:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 800100c:	f006 f93c 	bl	8007288 <R3_2_Init>
  startTimers();
 8001010:	f005 fc46 	bl	80068a0 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001014:	4630      	mov	r0, r6
 8001016:	f005 fbad 	bl	8006774 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 800101a:	4b55      	ldr	r3, [pc, #340]	@ (8001170 <MCboot+0x19c>)
  STO_PLL_Init (&STO_PLL_M1);
 800101c:	4855      	ldr	r0, [pc, #340]	@ (8001174 <MCboot+0x1a0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 800101e:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001020:	f8ca 6000 	str.w	r6, [sl]
  STO_PLL_Init (&STO_PLL_M1);
 8001024:	f007 fa66 	bl	80084f4 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001028:	f8da 1000 	ldr.w	r1, [sl]
 800102c:	4a51      	ldr	r2, [pc, #324]	@ (8001174 <MCboot+0x1a0>)
 800102e:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001030:	4e51      	ldr	r6, [pc, #324]	@ (8001178 <MCboot+0x1a4>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001032:	f006 fef5 	bl	8007e20 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8001036:	4658      	mov	r0, fp
 8001038:	f007 fc84 	bl	8008944 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	465a      	mov	r2, fp
 8001042:	6829      	ldr	r1, [r5, #0]
 8001044:	4b4d      	ldr	r3, [pc, #308]	@ (800117c <MCboot+0x1a8>)
 8001046:	484e      	ldr	r0, [pc, #312]	@ (8001180 <MCboot+0x1ac>)
 8001048:	f006 fdb0 	bl	8007bac <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 800104c:	4648      	mov	r0, r9
 800104e:	f005 fb91 	bl	8006774 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001052:	4640      	mov	r0, r8
 8001054:	f005 fb8e 	bl	8006774 <PID_HandleInit>
  pPIDId[M1] = &PIDIdHandle_M1;
 8001058:	494a      	ldr	r1, [pc, #296]	@ (8001184 <MCboot+0x1b0>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800105a:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <MCboot+0x1b4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800105c:	484b      	ldr	r0, [pc, #300]	@ (800118c <MCboot+0x1b8>)
  pPIDId[M1] = &PIDIdHandle_M1;
 800105e:	f8c1 8000 	str.w	r8, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001062:	6030      	str	r0, [r6, #0]
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001064:	f8c3 9000 	str.w	r9, [r3]
  RVBS_Init(pBusSensorM1);
 8001068:	f006 fcc4 	bl	80079f4 <RVBS_Init>
  NTC_Init(&TempSensorParamsM1);
 800106c:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 80011bc <MCboot+0x1e8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001070:	4847      	ldr	r0, [pc, #284]	@ (8001190 <MCboot+0x1bc>)
 8001072:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <MCboot+0x1c0>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001074:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 80011c0 <MCboot+0x1ec>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001078:	6832      	ldr	r2, [r6, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800107a:	6003      	str	r3, [r0, #0]
  NTC_Init(&TempSensorParamsM1);
 800107c:	4648      	mov	r0, r9
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800107e:	f8c3 810c 	str.w	r8, [r3, #268]	@ 0x10c
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001082:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  NTC_Init(&TempSensorParamsM1);
 8001086:	f005 fb31 	bl	80066ec <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800108a:	4a43      	ldr	r2, [pc, #268]	@ (8001198 <MCboot+0x1c4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800108c:	4b43      	ldr	r3, [pc, #268]	@ (800119c <MCboot+0x1c8>)
 800108e:	4844      	ldr	r0, [pc, #272]	@ (80011a0 <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001090:	f8c2 9000 	str.w	r9, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001094:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8001096:	f006 fcf7 	bl	8007a88 <REMNG_Init>
  FOC_Clear(M1);
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff ff60 	bl	8000f60 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010a0:	f04f 0901 	mov.w	r9, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80010a4:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010a6:	f888 9024 	strb.w	r9, [r8, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80010aa:	f006 ff89 	bl	8007fc0 <STC_GetDefaultIqdref>
 80010ae:	f8c8 0010 	str.w	r0, [r8, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80010b2:	6828      	ldr	r0, [r5, #0]
 80010b4:	f006 ff84 	bl	8007fc0 <STC_GetDefaultIqdref>
 80010b8:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010bc:	4643      	mov	r3, r8
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80010be:	f8a8 0014 	strh.w	r0, [r8, #20]
  oMCInterface[M1] = & Mci[M1];
 80010c2:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 80011c4 <MCboot+0x1f0>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010c6:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80010c8:	4836      	ldr	r0, [pc, #216]	@ (80011a4 <MCboot+0x1d0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010ca:	4921      	ldr	r1, [pc, #132]	@ (8001150 <MCboot+0x17c>)
  oMCInterface[M1] = & Mci[M1];
 80010cc:	f8c8 0000 	str.w	r0, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010d0:	f7ff fd7a 	bl	8000bc8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80010d4:	f8d8 0000 	ldr.w	r0, [r8]
 80010d8:	9003      	str	r0, [sp, #12]
 80010da:	6828      	ldr	r0, [r5, #0]
 80010dc:	f006 ff66 	bl	8007fac <STC_GetMecSpeedRefUnitDefault>
 80010e0:	4622      	mov	r2, r4
 80010e2:	4601      	mov	r1, r0
 80010e4:	9803      	ldr	r0, [sp, #12]
 80010e6:	f7ff fd7d 	bl	8000be4 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 80010ea:	9804      	ldr	r0, [sp, #16]
 80010ec:	f8d8 3000 	ldr.w	r3, [r8]
 80010f0:	6003      	str	r3, [r0, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MCboot+0x1b4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80010f4:	6839      	ldr	r1, [r7, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80010f6:	f8d3 c000 	ldr.w	ip, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MCboot+0x1b0>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80010fc:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 80010fe:	6818      	ldr	r0, [r3, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <MCboot+0x1bc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001102:	4d25      	ldr	r5, [pc, #148]	@ (8001198 <MCboot+0x1c4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001104:	681f      	ldr	r7, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001106:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MCboot+0x1d4>)
 8001108:	f8da e000 	ldr.w	lr, [sl]
  MCT[M1].pPIDId = pPIDId[M1];
 800110c:	6098      	str	r0, [r3, #8]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 800110e:	481c      	ldr	r0, [pc, #112]	@ (8001180 <MCboot+0x1ac>)
 8001110:	6158      	str	r0, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8001112:	4818      	ldr	r0, [pc, #96]	@ (8001174 <MCboot+0x1a0>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001114:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8001116:	6198      	str	r0, [r3, #24]
  MCT[M1].pStateMachine = &STM[M1];
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MCboot+0x17c>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800111a:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800111c:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800111e:	e9c3 b208 	strd	fp, r2, [r3, #32]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001122:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001126:	e9c3 050a 	strd	r0, r5, [r3, #40]	@ 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800112a:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pFF = MC_NULL;
 800112e:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pSCC = MC_NULL;
 8001132:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  bMCBootCompleted = 1;
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <MCboot+0x18c>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001138:	631e      	str	r6, [r3, #48]	@ 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800113a:	63df      	str	r7, [r3, #60]	@ 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800113c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 800113e:	61dc      	str	r4, [r3, #28]
  MCT[M1].pOTT = MC_NULL;
 8001140:	651c      	str	r4, [r3, #80]	@ 0x50
  pMCTList[M1] = &MCT[M1];
 8001142:	9905      	ldr	r1, [sp, #20]
  bMCBootCompleted = 1;
 8001144:	f882 9000 	strb.w	r9, [r2]
  pMCTList[M1] = &MCT[M1];
 8001148:	600b      	str	r3, [r1, #0]
}
 800114a:	b009      	add	sp, #36	@ 0x24
 800114c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001150:	20000a20 	.word	0x20000a20
 8001154:	20000a04 	.word	0x20000a04
 8001158:	2000054c 	.word	0x2000054c
 800115c:	20000a1c 	.word	0x20000a1c
 8001160:	200009f0 	.word	0x200009f0
 8001164:	200009fc 	.word	0x200009fc
 8001168:	200003cc 	.word	0x200003cc
 800116c:	2000013c 	.word	0x2000013c
 8001170:	200004c0 	.word	0x200004c0
 8001174:	2000026c 	.word	0x2000026c
 8001178:	20000a0c 	.word	0x20000a0c
 800117c:	20000258 	.word	0x20000258
 8001180:	20000448 	.word	0x20000448
 8001184:	20000a10 	.word	0x20000a10
 8001188:	20000a14 	.word	0x20000a14
 800118c:	20000208 	.word	0x20000208
 8001190:	20000a00 	.word	0x20000a00
 8001194:	20000578 	.word	0x20000578
 8001198:	20000a08 	.word	0x20000a08
 800119c:	200009f8 	.word	0x200009f8
 80011a0:	200001f0 	.word	0x200001f0
 80011a4:	20000a80 	.word	0x20000a80
 80011a8:	20000a28 	.word	0x20000a28
 80011ac:	20000a18 	.word	0x20000a18
 80011b0:	20000394 	.word	0x20000394
 80011b4:	20000520 	.word	0x20000520
 80011b8:	200004f4 	.word	0x200004f4
 80011bc:	20000230 	.word	0x20000230
 80011c0:	20000a9c 	.word	0x20000a9c
 80011c4:	20000a7c 	.word	0x20000a7c

080011c8 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80011cc:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80011ce:	4c08      	ldr	r4, [pc, #32]	@ (80011f0 <FOC_CalcCurrRef+0x24>)
 80011d0:	2326      	movs	r3, #38	@ 0x26
 80011d2:	fb03 4400 	mla	r4, r3, r0, r4
 80011d6:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80011da:	b103      	cbz	r3, 80011de <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80011dc:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <FOC_CalcCurrRef+0x28>)
 80011e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80011e4:	f006 fe9a 	bl	8007f1c <STC_CalcTorqueReference>
 80011e8:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80011ea:	8220      	strh	r0, [r4, #16]
}
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	bf00      	nop
 80011f0:	20000a9c 	.word	0x20000a9c
 80011f4:	20000a1c 	.word	0x20000a1c

080011f8 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80011f8:	4b01      	ldr	r3, [pc, #4]	@ (8001200 <TSK_SetChargeBootCapDelayM1+0x8>)
 80011fa:	8018      	strh	r0, [r3, #0]
}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200009f4 	.word	0x200009f4

08001204 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001206:	8818      	ldrh	r0, [r3, #0]
 8001208:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800120a:	fab0 f080 	clz	r0, r0
 800120e:	0940      	lsrs	r0, r0, #5
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200009f4 	.word	0x200009f4

08001218 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001218:	4b01      	ldr	r3, [pc, #4]	@ (8001220 <TSK_SetStopPermanencyTimeM1+0x8>)
 800121a:	8018      	strh	r0, [r3, #0]
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200009f2 	.word	0x200009f2

08001224 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001226:	8818      	ldrh	r0, [r3, #0]
 8001228:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800122a:	fab0 f080 	clz	r0, r0
 800122e:	0940      	lsrs	r0, r0, #5
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200009f2 	.word	0x200009f2

08001238 <TSK_MediumFrequencyTaskM1>:
{
 8001238:	b530      	push	{r4, r5, lr}
 800123a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 800123c:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800123e:	4669      	mov	r1, sp
 8001240:	489c      	ldr	r0, [pc, #624]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x27c>)
  int16_t wAux = 0;
 8001242:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001246:	f007 f86b 	bl	8008320 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800124a:	4d9b      	ldr	r5, [pc, #620]	@ (80014b8 <TSK_MediumFrequencyTaskM1+0x280>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800124c:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 800124e:	6828      	ldr	r0, [r5, #0]
 8001250:	f005 faf0 	bl	8006834 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001254:	4899      	ldr	r0, [pc, #612]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 8001256:	f006 ff6b 	bl	8008130 <STM_GetState>
  switch ( StateM1 )
 800125a:	1ec3      	subs	r3, r0, #3
 800125c:	2b10      	cmp	r3, #16
 800125e:	d824      	bhi.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
 8001260:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001264:	005c0048 	.word	0x005c0048
 8001268:	00be00a7 	.word	0x00be00a7
 800126c:	00ce0011 	.word	0x00ce0011
 8001270:	002300d8 	.word	0x002300d8
 8001274:	00230023 	.word	0x00230023
 8001278:	00230023 	.word	0x00230023
 800127c:	00e50023 	.word	0x00e50023
 8001280:	010100f4 	.word	0x010100f4
 8001284:	0025      	.short	0x0025
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001286:	4b8e      	ldr	r3, [pc, #568]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x288>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	f005 fed1 	bl	8007030 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fe66 	bl	8000f60 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001294:	6828      	ldr	r0, [r5, #0]
 8001296:	f005 f9e5 	bl	8006664 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800129a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800129e:	f7ff ffbb 	bl	8001218 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80012a2:	4886      	ldr	r0, [pc, #536]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80012a4:	2108      	movs	r1, #8
 80012a6:	f006 fec9 	bl	800803c <STM_NextState>
}
 80012aa:	b003      	add	sp, #12
 80012ac:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80012ae:	4885      	ldr	r0, [pc, #532]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x28c>)
 80012b0:	f006 fcfe 	bl	8007cb0 <RUC_Exec>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	f000 80f7 	beq.w	80014a8 <TSK_MediumFrequencyTaskM1+0x270>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80012ba:	4883      	ldr	r0, [pc, #524]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 80012bc:	a901      	add	r1, sp, #4
 80012be:	f007 fb97 	bl	80089f0 <VSS_CalcAvrgMecSpeedUnit>
 80012c2:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80012c4:	4880      	ldr	r0, [pc, #512]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 80012c6:	f007 fc29 	bl	8008b1c <VSS_TransitionEnded>
        if ( LoopClosed == true )
 80012ca:	b90c      	cbnz	r4, 80012d0 <TSK_MediumFrequencyTaskM1+0x98>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d0ec      	beq.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80012d0:	4a7e      	ldr	r2, [pc, #504]	@ (80014cc <TSK_MediumFrequencyTaskM1+0x294>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80012d2:	4b7f      	ldr	r3, [pc, #508]	@ (80014d0 <TSK_MediumFrequencyTaskM1+0x298>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80012d4:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80012d6:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80012da:	4620      	mov	r0, r4
 80012dc:	f005 fa62 	bl	80067a4 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80012e0:	fb05 f100 	mul.w	r1, r5, r0
 80012e4:	4620      	mov	r0, r4
 80012e6:	f005 fa59 	bl	800679c <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80012ea:	2105      	movs	r1, #5
 80012ec:	4873      	ldr	r0, [pc, #460]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80012ee:	f006 fea5 	bl	800803c <STM_NextState>
    break;
 80012f2:	e7da      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80012f4:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <TSK_MediumFrequencyTaskM1+0x29c>)
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	f7ff fcea 	bl	8000cd0 <MCI_GetImposedMotorDirection>
 80012fc:	4601      	mov	r1, r0
 80012fe:	4871      	ldr	r0, [pc, #452]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001300:	f006 fc92 	bl	8007c28 <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001304:	4b6e      	ldr	r3, [pc, #440]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x288>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f005 fe1e 	bl	8006f48 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800130c:	2014      	movs	r0, #20
 800130e:	f7ff ff73 	bl	80011f8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001312:	2110      	movs	r1, #16
 8001314:	4869      	ldr	r0, [pc, #420]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 8001316:	f006 fe91 	bl	800803c <STM_NextState>
    break;
 800131a:	e7c6      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800131c:	4869      	ldr	r0, [pc, #420]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x28c>)
 800131e:	f006 fcc7 	bl	8007cb0 <RUC_Exec>
 8001322:	2800      	cmp	r0, #0
 8001324:	f000 80ba 	beq.w	800149c <TSK_MediumFrequencyTaskM1+0x264>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001328:	4b6b      	ldr	r3, [pc, #428]	@ (80014d8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f006 fdf6 	bl	8007f1c <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8001330:	4b67      	ldr	r3, [pc, #412]	@ (80014d0 <TSK_MediumFrequencyTaskM1+0x298>)
 8001332:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8001336:	8218      	strh	r0, [r3, #16]
 8001338:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800133a:	4863      	ldr	r0, [pc, #396]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 800133c:	f10d 0102 	add.w	r1, sp, #2
 8001340:	f007 fb56 	bl	80089f0 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8001344:	485f      	ldr	r0, [pc, #380]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001346:	f006 fce9 	bl	8007d1c <RUC_FirstAccelerationStageReached>
 800134a:	2800      	cmp	r0, #0
 800134c:	d0ad      	beq.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 800134e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8001352:	4858      	ldr	r0, [pc, #352]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001354:	f007 f908 	bl	8008568 <STO_PLL_IsObserverConverged>
 8001358:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 800135a:	4860      	ldr	r0, [pc, #384]	@ (80014dc <TSK_MediumFrequencyTaskM1+0x2a4>)
 800135c:	f7ff fcb8 	bl	8000cd0 <MCI_GetImposedMotorDirection>
 8001360:	b2c1      	uxtb	r1, r0
 8001362:	4854      	ldr	r0, [pc, #336]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001364:	f007 f9be 	bl	80086e4 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001368:	4857      	ldr	r0, [pc, #348]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 800136a:	4621      	mov	r1, r4
 800136c:	f007 fbc8 	bl	8008b00 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8001370:	2c00      	cmp	r4, #0
 8001372:	d09a      	beq.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001374:	484f      	ldr	r0, [pc, #316]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001376:	4d56      	ldr	r5, [pc, #344]	@ (80014d0 <TSK_MediumFrequencyTaskM1+0x298>)
        REMNG_Init( pREMNG[M1] );
 8001378:	4c59      	ldr	r4, [pc, #356]	@ (80014e0 <TSK_MediumFrequencyTaskM1+0x2a8>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800137a:	f006 fd05 	bl	8007d88 <SPD_GetElAngle>
 800137e:	4601      	mov	r1, r0
 8001380:	6868      	ldr	r0, [r5, #4]
 8001382:	f7ff fd8d 	bl	8000ea0 <MCM_Park>
 8001386:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 8001388:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800138a:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 800138c:	f006 fb7c 	bl	8007a88 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001390:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	f006 fbc2 	bl	8007b20 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 800139c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	2219      	movs	r2, #25
 80013a4:	f006 fbbc 	bl	8007b20 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80013a8:	2113      	movs	r1, #19
 80013aa:	4844      	ldr	r0, [pc, #272]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80013ac:	f006 fe46 	bl	800803c <STM_NextState>
    break;
 80013b0:	e77b      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 80013b2:	4c49      	ldr	r4, [pc, #292]	@ (80014d8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80013b4:	493f      	ldr	r1, [pc, #252]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x27c>)
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	f006 fd48 	bl	8007e4c <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff03 	bl	80011c8 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff ff02 	bl	80011cc <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80013c8:	2106      	movs	r1, #6
 80013ca:	483c      	ldr	r0, [pc, #240]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80013cc:	f006 fe36 	bl	800803c <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f006 fe03 	bl	8007fdc <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80013d6:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <TSK_MediumFrequencyTaskM1+0x29c>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	f7ff fc37 	bl	8000c4c <MCI_ExecBufferedCommands>
    break;
 80013de:	e764      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80013e0:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <TSK_MediumFrequencyTaskM1+0x29c>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	f7ff fc32 	bl	8000c4c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff feef 	bl	80011cc <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	f47f af5b 	bne.w	80012aa <TSK_MediumFrequencyTaskM1+0x72>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80013f4:	4622      	mov	r2, r4
 80013f6:	2120      	movs	r1, #32
 80013f8:	4830      	ldr	r0, [pc, #192]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80013fa:	f006 fdfd 	bl	8007ff8 <STM_FaultProcessing>
 80013fe:	e754      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001400:	f7ff ff10 	bl	8001224 <TSK_StopPermanencyTimeHasElapsedM1>
 8001404:	2800      	cmp	r0, #0
 8001406:	f43f af50 	beq.w	80012aa <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], STOP_IDLE );
 800140a:	2109      	movs	r1, #9
 800140c:	482b      	ldr	r0, [pc, #172]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 800140e:	f006 fe15 	bl	800803c <STM_NextState>
 8001412:	e74a      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001414:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001416:	492c      	ldr	r1, [pc, #176]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f006 fd17 	bl	8007e4c <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 800141e:	482a      	ldr	r0, [pc, #168]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 8001420:	f007 fa82 	bl	8008928 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8001424:	2100      	movs	r1, #0
 8001426:	4825      	ldr	r0, [pc, #148]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 8001428:	f006 fe08 	bl	800803c <STM_NextState>
}
 800142c:	e73d      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800142e:	f7ff fee9 	bl	8001204 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001432:	2800      	cmp	r0, #0
 8001434:	f43f af39 	beq.w	80012aa <TSK_MediumFrequencyTaskM1+0x72>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x288>)
 800143a:	2100      	movs	r1, #0
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f005 fbaf 	bl	8006ba0 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001442:	2111      	movs	r1, #17
 8001444:	481d      	ldr	r0, [pc, #116]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 8001446:	f006 fdf9 	bl	800803c <STM_NextState>
 800144a:	e72e      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800144c:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x288>)
 800144e:	2101      	movs	r1, #1
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f005 fba5 	bl	8006ba0 <PWMC_CurrentReadingCalibr>
 8001456:	2800      	cmp	r0, #0
 8001458:	f43f af27 	beq.w	80012aa <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], CLEAR );
 800145c:	2112      	movs	r1, #18
 800145e:	4817      	ldr	r0, [pc, #92]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 8001460:	f006 fdec 	bl	800803c <STM_NextState>
 8001464:	e721      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001466:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <TSK_MediumFrequencyTaskM1+0x2a0>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <TSK_MediumFrequencyTaskM1+0x298>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800146a:	4917      	ldr	r1, [pc, #92]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x290>)
 800146c:	6810      	ldr	r0, [r2, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001474:	f006 fcea 	bl	8007e4c <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001478:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x27c>)
 800147a:	f007 f815 	bl	80084a8 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800147e:	480f      	ldr	r0, [pc, #60]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 8001480:	2104      	movs	r1, #4
 8001482:	f006 fddb 	bl	800803c <STM_NextState>
 8001486:	2800      	cmp	r0, #0
 8001488:	f43f af0f 	beq.w	80012aa <TSK_MediumFrequencyTaskM1+0x72>
      FOC_Clear( M1 );
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fd67 	bl	8000f60 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x288>)
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	f005 fd81 	bl	8006f9c <R3_2_SwitchOnPWM>
 800149a:	e706      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 800149c:	4602      	mov	r2, r0
 800149e:	2110      	movs	r1, #16
 80014a0:	4806      	ldr	r0, [pc, #24]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80014a2:	f006 fda9 	bl	8007ff8 <STM_FaultProcessing>
 80014a6:	e748      	b.n	800133a <TSK_MediumFrequencyTaskM1+0x102>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80014a8:	4602      	mov	r2, r0
 80014aa:	2110      	movs	r1, #16
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x284>)
 80014ae:	f006 fda3 	bl	8007ff8 <STM_FaultProcessing>
 80014b2:	e6fa      	b.n	80012aa <TSK_MediumFrequencyTaskM1+0x72>
 80014b4:	2000026c 	.word	0x2000026c
 80014b8:	20000a00 	.word	0x20000a00
 80014bc:	20000a20 	.word	0x20000a20
 80014c0:	20000a04 	.word	0x20000a04
 80014c4:	20000448 	.word	0x20000448
 80014c8:	20000394 	.word	0x20000394
 80014cc:	20000a18 	.word	0x20000a18
 80014d0:	20000a9c 	.word	0x20000a9c
 80014d4:	20000a7c 	.word	0x20000a7c
 80014d8:	20000a1c 	.word	0x20000a1c
 80014dc:	20000a80 	.word	0x20000a80
 80014e0:	200009f8 	.word	0x200009f8

080014e4 <MC_Scheduler>:
{
 80014e4:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MC_Scheduler+0x48>)
 80014e8:	781c      	ldrb	r4, [r3, #0]
 80014ea:	2c01      	cmp	r4, #1
 80014ec:	d000      	beq.n	80014f0 <MC_Scheduler+0xc>
}
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80014f0:	4d0f      	ldr	r5, [pc, #60]	@ (8001530 <MC_Scheduler+0x4c>)
 80014f2:	882b      	ldrh	r3, [r5, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b1ab      	cbz	r3, 8001524 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80014f8:	882b      	ldrh	r3, [r5, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001500:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <MC_Scheduler+0x50>)
 8001502:	8813      	ldrh	r3, [r2, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	b11b      	cbz	r3, 8001510 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001508:	8813      	ldrh	r3, [r2, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <MC_Scheduler+0x54>)
 8001512:	8813      	ldrh	r3, [r2, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0e9      	beq.n	80014ee <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800151a:	8813      	ldrh	r3, [r2, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	b29b      	uxth	r3, r3
 8001520:	8013      	strh	r3, [r2, #0]
}
 8001522:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001524:	f7ff fe88 	bl	8001238 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001528:	802c      	strh	r4, [r5, #0]
 800152a:	e7e9      	b.n	8001500 <MC_Scheduler+0x1c>
 800152c:	200009f0 	.word	0x200009f0
 8001530:	200009f6 	.word	0x200009f6
 8001534:	200009f4 	.word	0x200009f4
 8001538:	200009f2 	.word	0x200009f2

0800153c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800153c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001540:	4b54      	ldr	r3, [pc, #336]	@ (8001694 <TSK_HighFrequencyTask+0x158>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001542:	4c55      	ldr	r4, [pc, #340]	@ (8001698 <TSK_HighFrequencyTask+0x15c>)
  if ( STM[M1].bState == SWITCH_OVER )
 8001544:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001546:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 800154a:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 800154c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800154e:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001550:	f000 8094 	beq.w	800167c <TSK_HighFrequencyTask+0x140>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001554:	4b51      	ldr	r3, [pc, #324]	@ (800169c <TSK_HighFrequencyTask+0x160>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001556:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 80016c0 <TSK_HighFrequencyTask+0x184>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f006 fc78 	bl	8007e50 <STC_GetSpeedSensor>
 8001560:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001562:	f006 fc11 	bl	8007d88 <SPD_GetElAngle>
 8001566:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001568:	4638      	mov	r0, r7
 800156a:	f006 fc15 	bl	8007d98 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800156e:	a902      	add	r1, sp, #8
 8001570:	f8d8 0000 	ldr.w	r0, [r8]
 8001574:	f005 f9f4 	bl	8006960 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001578:	f000 ff4e 	bl	8002418 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800157c:	f000 ff08 	bl	8002390 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001580:	9802      	ldr	r0, [sp, #8]
 8001582:	f7ff fc4b 	bl	8000e1c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001586:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001588:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800158a:	f7ff fc89 	bl	8000ea0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <TSK_HighFrequencyTask+0x164>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001590:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001594:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001596:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001598:	1a09      	subs	r1, r1, r0
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	f005 f90a 	bl	80067b4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80015a0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80015a4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80015a8:	1ac9      	subs	r1, r1, r3
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <TSK_HighFrequencyTask+0x168>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80015ac:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	f005 f900 	bl	80067b4 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80015b4:	4b3c      	ldr	r3, [pc, #240]	@ (80016a8 <TSK_HighFrequencyTask+0x16c>)
 80015b6:	f8ad 6004 	strh.w	r6, [sp, #4]
 80015ba:	f8ad 0006 	strh.w	r0, [sp, #6]
 80015be:	9901      	ldr	r1, [sp, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	f004 fff9 	bl	80065b8 <Circle_Limitation>
 80015c6:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015c8:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80015ca:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015cc:	f006 fbe4 	bl	8007d98 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80015d0:	4629      	mov	r1, r5
 80015d2:	9801      	ldr	r0, [sp, #4]
 80015d4:	f7ff fca6 	bl	8000f24 <MCM_Rev_Park>
 80015d8:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015da:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80015de:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015e0:	f005 f9c0 	bl	8006964 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80015e4:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80015e6:	9a03      	ldr	r2, [sp, #12]
  FOCVars[M1].Iab = Iab;
 80015e8:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015ea:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80015ec:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 80015ee:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 80015f0:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 80015f4:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80015f6:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80015f8:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80015fa:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80015fe:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001600:	d034      	beq.n	800166c <TSK_HighFrequencyTask+0x130>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001602:	482a      	ldr	r0, [pc, #168]	@ (80016ac <TSK_HighFrequencyTask+0x170>)
 8001604:	f006 fb8a 	bl	8007d1c <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001608:	4929      	ldr	r1, [pc, #164]	@ (80016b0 <TSK_HighFrequencyTask+0x174>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800160a:	6862      	ldr	r2, [r4, #4]
 800160c:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800160e:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001610:	6808      	ldr	r0, [r1, #0]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001612:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001614:	f004 ffc8 	bl	80065a8 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001618:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800161a:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800161c:	4825      	ldr	r0, [pc, #148]	@ (80016b4 <TSK_HighFrequencyTask+0x178>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800161e:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001622:	f006 fd99 	bl	8008158 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001626:	4823      	ldr	r0, [pc, #140]	@ (80016b4 <TSK_HighFrequencyTask+0x178>)
 8001628:	f006 ff12 	bl	8008450 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800162c:	b164      	cbz	r4, 8001648 <TSK_HighFrequencyTask+0x10c>
    hState = STM_GetState(&STM[M1]);
 800162e:	4819      	ldr	r0, [pc, #100]	@ (8001694 <TSK_HighFrequencyTask+0x158>)
 8001630:	f006 fd7e 	bl	8008130 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001634:	1f03      	subs	r3, r0, #4
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d909      	bls.n	8001650 <TSK_HighFrequencyTask+0x114>
 800163c:	2813      	cmp	r0, #19
 800163e:	d007      	beq.n	8001650 <TSK_HighFrequencyTask+0x114>
}
 8001640:	2000      	movs	r0, #0
 8001642:	b008      	add	sp, #32
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001648:	481a      	ldr	r0, [pc, #104]	@ (80016b4 <TSK_HighFrequencyTask+0x178>)
 800164a:	f007 f82f 	bl	80086ac <STO_ResetPLL>
 800164e:	e7ee      	b.n	800162e <TSK_HighFrequencyTask+0xf2>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001650:	4818      	ldr	r0, [pc, #96]	@ (80016b4 <TSK_HighFrequencyTask+0x178>)
 8001652:	f006 fb99 	bl	8007d88 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001656:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001658:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 800165a:	4817      	ldr	r0, [pc, #92]	@ (80016b8 <TSK_HighFrequencyTask+0x17c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800165c:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001660:	f007 f974 	bl	800894c <VSS_CalcElAngle>
}
 8001664:	2000      	movs	r0, #0
 8001666:	b008      	add	sp, #32
 8001668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	4809      	ldr	r0, [pc, #36]	@ (8001694 <TSK_HighFrequencyTask+0x158>)
 8001670:	f006 fcc2 	bl	8007ff8 <STM_FaultProcessing>
}
 8001674:	2000      	movs	r0, #0
 8001676:	b008      	add	sp, #32
 8001678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 800167c:	4d0f      	ldr	r5, [pc, #60]	@ (80016bc <TSK_HighFrequencyTask+0x180>)
 800167e:	6828      	ldr	r0, [r5, #0]
 8001680:	f006 fa2c 	bl	8007adc <REMNG_RampCompleted>
 8001684:	2800      	cmp	r0, #0
 8001686:	f47f af65 	bne.w	8001554 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 800168a:	6828      	ldr	r0, [r5, #0]
 800168c:	f006 fa04 	bl	8007a98 <REMNG_Calc>
 8001690:	8220      	strh	r0, [r4, #16]
 8001692:	e75f      	b.n	8001554 <TSK_HighFrequencyTask+0x18>
 8001694:	20000a20 	.word	0x20000a20
 8001698:	20000a9c 	.word	0x20000a9c
 800169c:	20000a1c 	.word	0x20000a1c
 80016a0:	20000a14 	.word	0x20000a14
 80016a4:	20000a10 	.word	0x20000a10
 80016a8:	200009fc 	.word	0x200009fc
 80016ac:	20000448 	.word	0x20000448
 80016b0:	20000a0c 	.word	0x20000a0c
 80016b4:	2000026c 	.word	0x2000026c
 80016b8:	20000394 	.word	0x20000394
 80016bc:	200009f8 	.word	0x200009f8
 80016c0:	20000a04 	.word	0x20000a04

080016c4 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80016c8:	4e20      	ldr	r6, [pc, #128]	@ (800174c <TSK_SafetyTask_PWMOFF+0x88>)
{
 80016ca:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80016cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016d0:	f005 f81e 	bl	8006710 <NTC_CalcAvTemp>
 80016d4:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80016d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80016da:	f005 fa81 	bl	8006be0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80016de:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80016e2:	4305      	orrs	r5, r0
 80016e4:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80016e6:	b334      	cbz	r4, 8001736 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80016e8:	4f19      	ldr	r7, [pc, #100]	@ (8001750 <TSK_SafetyTask_PWMOFF+0x8c>)
 80016ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80016ee:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80016f2:	43ea      	mvns	r2, r5
 80016f4:	b292      	uxth	r2, r2
 80016f6:	4629      	mov	r1, r5
 80016f8:	4638      	mov	r0, r7
 80016fa:	f006 fc7d 	bl	8007ff8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80016fe:	4638      	mov	r0, r7
 8001700:	f006 fd16 	bl	8008130 <STM_GetState>
 8001704:	280a      	cmp	r0, #10
 8001706:	d002      	beq.n	800170e <TSK_SafetyTask_PWMOFF+0x4a>
 8001708:	280b      	cmp	r0, #11
 800170a:	d00e      	beq.n	800172a <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800170e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001712:	f005 fa43 	bl	8006b9c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff fc22 	bl	8000f60 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800171c:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <TSK_SafetyTask_PWMOFF+0x90>)
 800171e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001726:	f004 bf9d 	b.w	8006664 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800172a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800172e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001732:	f005 ba33 	b.w	8006b9c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <TSK_SafetyTask_PWMOFF+0x94>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	f006 f975 	bl	8007a28 <RVBS_CalcAvVbus>
 800173e:	f000 000e 	and.w	r0, r0, #14
 8001742:	4305      	orrs	r5, r0
 8001744:	e7d0      	b.n	80016e8 <TSK_SafetyTask_PWMOFF+0x24>
 8001746:	bf00      	nop
 8001748:	20000a08 	.word	0x20000a08
 800174c:	20000a04 	.word	0x20000a04
 8001750:	20000a20 	.word	0x20000a20
 8001754:	20000a00 	.word	0x20000a00
 8001758:	20000a0c 	.word	0x20000a0c

0800175c <TSK_SafetyTask>:
{
 800175c:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <TSK_SafetyTask+0x1c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d000      	beq.n	8001768 <TSK_SafetyTask+0xc>
}
 8001766:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff ffab 	bl	80016c4 <TSK_SafetyTask_PWMOFF>
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001772:	f000 bddd 	b.w	8002330 <RCM_ExecUserConv>
 8001776:	bf00      	nop
 8001778:	200009f0 	.word	0x200009f0

0800177c <MC_RunMotorControlTasks>:
{
 800177c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MC_RunMotorControlTasks+0x1c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b903      	cbnz	r3, 8001786 <MC_RunMotorControlTasks+0xa>
}
 8001784:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001786:	f7ff fead 	bl	80014e4 <MC_Scheduler>
    TSK_SafetyTask();
 800178a:	f7ff ffe7 	bl	800175c <TSK_SafetyTask>
}
 800178e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001792:	f001 ba03 	b.w	8002b9c <UI_Scheduler>
 8001796:	bf00      	nop
 8001798:	200009f0 	.word	0x200009f0

0800179c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800179c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <TSK_HardwareFaultTask+0x18>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f005 fc45 	bl	8007030 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80017a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <TSK_HardwareFaultTask+0x1c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	f006 bc22 	b.w	8007ff8 <STM_FaultProcessing>
 80017b4:	20000a04 	.word	0x20000a04
 80017b8:	20000a20 	.word	0x20000a20

080017bc <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80017bc:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017be:	4a4d      	ldr	r2, [pc, #308]	@ (80018f4 <mc_lock_pins+0x138>)
 80017c0:	494d      	ldr	r1, [pc, #308]	@ (80018f8 <mc_lock_pins+0x13c>)
 80017c2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017c4:	2504      	movs	r5, #4
 80017c6:	b092      	sub	sp, #72	@ 0x48
 80017c8:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ca:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80017cc:	69d3      	ldr	r3, [r2, #28]
 80017ce:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017d0:	484a      	ldr	r0, [pc, #296]	@ (80018fc <mc_lock_pins+0x140>)
  (void) temp;
 80017d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017d4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017d6:	2602      	movs	r6, #2
 80017d8:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017da:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017dc:	69d3      	ldr	r3, [r2, #28]
 80017de:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 80017e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017e2:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017e6:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 80017ea:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017ec:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ee:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017f0:	69d4      	ldr	r4, [r2, #28]
 80017f2:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 80017f8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017fa:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017fc:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 8001800:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001802:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001804:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001806:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800180a:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 800180e:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001812:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001814:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001816:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001818:	69d4      	ldr	r4, [r2, #28]
 800181a:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 800181c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800181e:	4c38      	ldr	r4, [pc, #224]	@ (8001900 <mc_lock_pins+0x144>)
 8001820:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001822:	2780      	movs	r7, #128	@ 0x80
 8001824:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001826:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001828:	69dc      	ldr	r4, [r3, #28]
 800182a:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 800182c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800182e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001830:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001832:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001834:	69d8      	ldr	r0, [r3, #28]
 8001836:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 8001838:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800183a:	4832      	ldr	r0, [pc, #200]	@ (8001904 <mc_lock_pins+0x148>)
 800183c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800183e:	2408      	movs	r4, #8
 8001840:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001842:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001844:	69d8      	ldr	r0, [r3, #28]
 8001846:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 8001848:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800184a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800184c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800184e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001850:	69d9      	ldr	r1, [r3, #28]
 8001852:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001854:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001856:	492c      	ldr	r1, [pc, #176]	@ (8001908 <mc_lock_pins+0x14c>)
  (void) temp;
 8001858:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800185a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800185c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800185e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001860:	69d9      	ldr	r1, [r3, #28]
 8001862:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001864:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001866:	4929      	ldr	r1, [pc, #164]	@ (800190c <mc_lock_pins+0x150>)
  (void) temp;
 8001868:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800186a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800186c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800186e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001870:	69d8      	ldr	r0, [r3, #28]
 8001872:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001874:	31e0      	adds	r1, #224	@ 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001876:	f44f 7080 	mov.w	r0, #256	@ 0x100
  (void) temp;
 800187a:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800187c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800187e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001880:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001882:	69d9      	ldr	r1, [r3, #28]
 8001884:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001886:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800188a:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 800188e:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001890:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001892:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001894:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001896:	69d9      	ldr	r1, [r3, #28]
 8001898:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800189a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800189e:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 80018a2:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018a6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018aa:	69d9      	ldr	r1, [r3, #28]
 80018ac:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018b2:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 80018b6:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018b8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018ba:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018bc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018c6:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 80018ca:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018cc:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018ce:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d0:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018d2:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 80018d6:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018dc:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 80018e0:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018e4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	9301      	str	r3, [sp, #4]
  (void) temp;
 80018ec:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80018ee:	b012      	add	sp, #72	@ 0x48
 80018f0:	bcf0      	pop	{r4, r5, r6, r7}
 80018f2:	4770      	bx	lr
 80018f4:	48000400 	.word	0x48000400
 80018f8:	00010004 	.word	0x00010004
 80018fc:	00010002 	.word	0x00010002
 8001900:	00010080 	.word	0x00010080
 8001904:	00010008 	.word	0x00010008
 8001908:	00010040 	.word	0x00010040
 800190c:	00010020 	.word	0x00010020
 8001910:	48000800 	.word	0x48000800

08001914 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	460c      	mov	r4, r1
 8001918:	b08d      	sub	sp, #52	@ 0x34
 800191a:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800191c:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 800191e:	0962      	lsrs	r2, r4, #5
{
 8001920:	4605      	mov	r5, r0
 8001922:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001924:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001928:	d122      	bne.n	8001970 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800192a:	2c12      	cmp	r4, #18
 800192c:	d814      	bhi.n	8001958 <MCP_ReceivedFrame+0x44>
 800192e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001932:	0016      	.short	0x0016
 8001934:	00ba015d 	.word	0x00ba015d
 8001938:	00130153 	.word	0x00130153
 800193c:	004c0013 	.word	0x004c0013
 8001940:	007d0075 	.word	0x007d0075
 8001944:	01f200a6 	.word	0x01f200a6
 8001948:	01d201b2 	.word	0x01d201b2
 800194c:	001301c9 	.word	0x001301c9
 8001950:	00130013 	.word	0x00130013
 8001954:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001958:	2301      	movs	r3, #1
 800195a:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800195e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001962:	2301      	movs	r3, #1
 8001964:	f10d 020e 	add.w	r2, sp, #14
 8001968:	21ff      	movs	r1, #255	@ 0xff
 800196a:	47a0      	blx	r4
    }
  }
}
 800196c:	b00d      	add	sp, #52	@ 0x34
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001970:	3a01      	subs	r2, #1
 8001972:	f001 f95f 	bl	8002c34 <UI_SetReg>
 8001976:	b1c8      	cbz	r0, 80019ac <MCP_ReceivedFrame+0x98>
  switch (Code)
 8001978:	f004 041f 	and.w	r4, r4, #31
 800197c:	2c12      	cmp	r4, #18
 800197e:	f200 8266 	bhi.w	8001e4e <MCP_ReceivedFrame+0x53a>
 8001982:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001986:	0079      	.short	0x0079
 8001988:	00900133 	.word	0x00900133
 800198c:	02640129 	.word	0x02640129
 8001990:	00220264 	.word	0x00220264
 8001994:	0053004b 	.word	0x0053004b
 8001998:	01c8007c 	.word	0x01c8007c
 800199c:	01a80188 	.word	0x01a80188
 80019a0:	0264019f 	.word	0x0264019f
 80019a4:	02640264 	.word	0x02640264
 80019a8:	00790264 	.word	0x00790264
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80019ac:	230b      	movs	r3, #11
    if (bNoError)
 80019ae:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80019b2:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d0d1      	beq.n	800195e <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80019ba:	2300      	movs	r3, #0
 80019bc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019c0:	461a      	mov	r2, r3
 80019c2:	21f0      	movs	r1, #240	@ 0xf0
 80019c4:	47a0      	blx	r4
}
 80019c6:	b00d      	add	sp, #52	@ 0x34
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        outBuff[i] = 0;
 80019ca:	ac04      	add	r4, sp, #16
 80019cc:	2100      	movs	r1, #0
 80019ce:	2220      	movs	r2, #32
 80019d0:	4620      	mov	r0, r4
 80019d2:	f007 f8a7 	bl	8008b24 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019d6:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
 80019da:	f10d 0112 	add.w	r1, sp, #18
 80019de:	1e7b      	subs	r3, r7, #1
 80019e0:	f107 061c 	add.w	r6, r7, #28
 80019e4:	e004      	b.n	80019f0 <MCP_ReceivedFrame+0xdc>
 80019e6:	429e      	cmp	r6, r3
        outBuff[3+i] = pHandle->s_fwVer[i];
 80019e8:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019ec:	f000 826f 	beq.w	8001ece <MCP_ReceivedFrame+0x5ba>
        outBuff[3+i] = pHandle->s_fwVer[i];
 80019f0:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80019f6:	2a09      	cmp	r2, #9
 80019f8:	d1f5      	bne.n	80019e6 <MCP_ReceivedFrame+0xd2>
 80019fa:	f1c7 0301 	rsb	r3, r7, #1
 80019fe:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a00:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a02:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a04:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a06:	5cba      	ldrb	r2, [r7, r2]
 8001a08:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a0c:	5c7a      	ldrb	r2, [r7, r1]
 8001a0e:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a12:	5cfb      	ldrb	r3, [r7, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a14:	69ee      	ldr	r6, [r5, #28]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a16:	f88d 3012 	strb.w	r3, [sp, #18]
 8001a1a:	e173      	b.n	8001d04 <MCP_ReceivedFrame+0x3f0>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a1c:	88b2      	ldrh	r2, [r6, #4]
 8001a1e:	6831      	ldr	r1, [r6, #0]
 8001a20:	4628      	mov	r0, r5
 8001a22:	f001 fdab 	bl	800357c <UI_ExecSpeedRamp>
 8001a26:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a2a:	e7c4      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001a2c:	f10d 000e 	add.w	r0, sp, #14
 8001a30:	7831      	ldrb	r1, [r6, #0]
 8001a32:	9000      	str	r0, [sp, #0]
 8001a34:	ab03      	add	r3, sp, #12
 8001a36:	f10d 020a 	add.w	r2, sp, #10
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f001 fdba 	bl	80035b4 <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 8001a40:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001a44:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a48:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001a4c:	69ec      	ldr	r4, [r5, #28]
      outBuff[0] = (uint8_t)(rpm);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a54:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a56:	f360 220f 	bfi	r2, r0, #8, #8
 8001a5a:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a62:	0a09      	lsrs	r1, r1, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a64:	f361 621f 	bfi	r2, r1, #24, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a68:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001a6a:	e9cd 3204 	strd	r3, r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001a6e:	69a8      	ldr	r0, [r5, #24]
 8001a70:	2308      	movs	r3, #8
 8001a72:	aa04      	add	r2, sp, #16
 8001a74:	21f0      	movs	r1, #240	@ 0xf0
 8001a76:	47a0      	blx	r4
    if (bNoError)
 8001a78:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a7c:	e79b      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a7e:	f8d6 2001 	ldr.w	r2, [r6, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a82:	4bba      	ldr	r3, [pc, #744]	@ (8001d6c <MCP_ReceivedFrame+0x458>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001a84:	f9b6 1005 	ldrsh.w	r1, [r6, #5]
 8001a88:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a8a:	fb83 0302 	smull	r0, r3, r3, r2
 8001a8e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001a92:	7831      	ldrb	r1, [r6, #0]
 8001a94:	f8b6 2007 	ldrh.w	r2, [r6, #7]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f001 fda8 	bl	80035f0 <UI_SetRevupData>
 8001aa0:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001aa4:	e787      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001aa6:	f996 3000 	ldrsb.w	r3, [r6]
 8001aaa:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001aac:	2203      	movs	r2, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f88d 200e 	strb.w	r2, [sp, #14]
 8001ab4:	f2c0 8160 	blt.w	8001d78 <MCP_ReceivedFrame+0x464>
 8001ab8:	2963      	cmp	r1, #99	@ 0x63
 8001aba:	f200 81ad 	bhi.w	8001e18 <MCP_ReceivedFrame+0x504>
 8001abe:	2941      	cmp	r1, #65	@ 0x41
 8001ac0:	f200 8134 	bhi.w	8001d2c <MCP_ReceivedFrame+0x418>
 8001ac4:	2941      	cmp	r1, #65	@ 0x41
 8001ac6:	d8d7      	bhi.n	8001a78 <MCP_ReceivedFrame+0x164>
 8001ac8:	a301      	add	r3, pc, #4	@ (adr r3, 8001ad0 <MCP_ReceivedFrame+0x1bc>)
 8001aca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001ace:	bf00      	nop
 8001ad0:	08001e7d 	.word	0x08001e7d
 8001ad4:	08001e2b 	.word	0x08001e2b
 8001ad8:	08001e7d 	.word	0x08001e7d
 8001adc:	08001e7d 	.word	0x08001e7d
 8001ae0:	08001e2b 	.word	0x08001e2b
 8001ae4:	08001d47 	.word	0x08001d47
 8001ae8:	08001d47 	.word	0x08001d47
 8001aec:	08001d47 	.word	0x08001d47
 8001af0:	08001d47 	.word	0x08001d47
 8001af4:	08001d47 	.word	0x08001d47
 8001af8:	08001d47 	.word	0x08001d47
 8001afc:	08001d47 	.word	0x08001d47
 8001b00:	08001d47 	.word	0x08001d47
 8001b04:	08001d47 	.word	0x08001d47
 8001b08:	08001d47 	.word	0x08001d47
 8001b0c:	08001d47 	.word	0x08001d47
 8001b10:	08001d47 	.word	0x08001d47
 8001b14:	08001d47 	.word	0x08001d47
 8001b18:	08001d47 	.word	0x08001d47
 8001b1c:	08001d47 	.word	0x08001d47
 8001b20:	08001d47 	.word	0x08001d47
 8001b24:	08001d47 	.word	0x08001d47
 8001b28:	08001d47 	.word	0x08001d47
 8001b2c:	08001d47 	.word	0x08001d47
 8001b30:	08001d47 	.word	0x08001d47
 8001b34:	08001d47 	.word	0x08001d47
 8001b38:	08001d47 	.word	0x08001d47
 8001b3c:	08001d47 	.word	0x08001d47
 8001b40:	08001a79 	.word	0x08001a79
 8001b44:	08001a79 	.word	0x08001a79
 8001b48:	08001e2b 	.word	0x08001e2b
 8001b4c:	08001d47 	.word	0x08001d47
 8001b50:	08001d47 	.word	0x08001d47
 8001b54:	08001d47 	.word	0x08001d47
 8001b58:	08001e7d 	.word	0x08001e7d
 8001b5c:	08001a79 	.word	0x08001a79
 8001b60:	08001a79 	.word	0x08001a79
 8001b64:	08001a79 	.word	0x08001a79
 8001b68:	08001a79 	.word	0x08001a79
 8001b6c:	08001a79 	.word	0x08001a79
 8001b70:	08001a79 	.word	0x08001a79
 8001b74:	08001a79 	.word	0x08001a79
 8001b78:	08001a79 	.word	0x08001a79
 8001b7c:	08001a79 	.word	0x08001a79
 8001b80:	08001a79 	.word	0x08001a79
 8001b84:	08001a79 	.word	0x08001a79
 8001b88:	08001a79 	.word	0x08001a79
 8001b8c:	08001a79 	.word	0x08001a79
 8001b90:	08001a79 	.word	0x08001a79
 8001b94:	08001a79 	.word	0x08001a79
 8001b98:	08001a79 	.word	0x08001a79
 8001b9c:	08001a79 	.word	0x08001a79
 8001ba0:	08001a79 	.word	0x08001a79
 8001ba4:	08001a79 	.word	0x08001a79
 8001ba8:	08001a79 	.word	0x08001a79
 8001bac:	08001a79 	.word	0x08001a79
 8001bb0:	08001a79 	.word	0x08001a79
 8001bb4:	08001a79 	.word	0x08001a79
 8001bb8:	08001a79 	.word	0x08001a79
 8001bbc:	08001a79 	.word	0x08001a79
 8001bc0:	08001a79 	.word	0x08001a79
 8001bc4:	08001a79 	.word	0x08001a79
 8001bc8:	08001a79 	.word	0x08001a79
 8001bcc:	08001a79 	.word	0x08001a79
 8001bd0:	08001a79 	.word	0x08001a79
 8001bd4:	08001d47 	.word	0x08001d47
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001bd8:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001bda:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001bdc:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001be0:	4628      	mov	r0, r5
 8001be2:	f001 fc95 	bl	8003510 <UI_ExecCmd>
 8001be6:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001bea:	e6e4      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001bec:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	2948      	cmp	r1, #72	@ 0x48
 8001bf2:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001bf6:	f200 80df 	bhi.w	8001db8 <MCP_ReceivedFrame+0x4a4>
 8001bfa:	2948      	cmp	r1, #72	@ 0x48
 8001bfc:	f200 80f4 	bhi.w	8001de8 <MCP_ReceivedFrame+0x4d4>
 8001c00:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001c04:	00f2015d 	.word	0x00f2015d
 8001c08:	015600f2 	.word	0x015600f2
 8001c0c:	012b00f2 	.word	0x012b00f2
 8001c10:	012b012b 	.word	0x012b012b
 8001c14:	012b012b 	.word	0x012b012b
 8001c18:	012b012b 	.word	0x012b012b
 8001c1c:	012b012b 	.word	0x012b012b
 8001c20:	012b012b 	.word	0x012b012b
 8001c24:	01020102 	.word	0x01020102
 8001c28:	00f200f2 	.word	0x00f200f2
 8001c2c:	012b012b 	.word	0x012b012b
 8001c30:	012b012b 	.word	0x012b012b
 8001c34:	00f2012b 	.word	0x00f2012b
 8001c38:	00f200f2 	.word	0x00f200f2
 8001c3c:	00850085 	.word	0x00850085
 8001c40:	00f200f2 	.word	0x00f200f2
 8001c44:	00f200f2 	.word	0x00f200f2
 8001c48:	00f200f2 	.word	0x00f200f2
 8001c4c:	00f200f2 	.word	0x00f200f2
 8001c50:	00f200f2 	.word	0x00f200f2
 8001c54:	00f200f2 	.word	0x00f200f2
 8001c58:	00f200f2 	.word	0x00f200f2
 8001c5c:	00f200f2 	.word	0x00f200f2
 8001c60:	00f200f2 	.word	0x00f200f2
 8001c64:	00f200f2 	.word	0x00f200f2
 8001c68:	00f200f2 	.word	0x00f200f2
 8001c6c:	00f200f2 	.word	0x00f200f2
 8001c70:	00f200f2 	.word	0x00f200f2
 8001c74:	00f200f2 	.word	0x00f200f2
 8001c78:	00f200f2 	.word	0x00f200f2
 8001c7c:	00f200f2 	.word	0x00f200f2
 8001c80:	00f200f2 	.word	0x00f200f2
 8001c84:	012b00f2 	.word	0x012b00f2
 8001c88:	00f200f2 	.word	0x00f200f2
 8001c8c:	00f200f2 	.word	0x00f200f2
 8001c90:	01020102 	.word	0x01020102
 8001c94:	0102      	.short	0x0102
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001c96:	4c36      	ldr	r4, [pc, #216]	@ (8001d70 <MCP_ReceivedFrame+0x45c>)
      stepList.data = buffer;
 8001c98:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001c9a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001ca0:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001ca4:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ca8:	f001 fcca 	bl	8003640 <UI_GetMPInfo>
 8001cac:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	f43f ae54 	beq.w	800195e <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001cb6:	69ee      	ldr	r6, [r5, #28]
 8001cb8:	7923      	ldrb	r3, [r4, #4]
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	69a8      	ldr	r0, [r5, #24]
 8001cbe:	21f0      	movs	r1, #240	@ 0xf0
 8001cc0:	47b0      	blx	r6
  if (RequireAck)
 8001cc2:	e653      	b.n	800196c <MCP_ReceivedFrame+0x58>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001cc4:	6831      	ldr	r1, [r6, #0]
 8001cc6:	88b2      	ldrh	r2, [r6, #4]
 8001cc8:	b209      	sxth	r1, r1
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f001 fc68 	bl	80035a0 <UI_ExecTorqueRamp>
 8001cd0:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001cd4:	e66f      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001cd6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8001cda:	ac04      	add	r4, sp, #16
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4622      	mov	r2, r4
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e004      	b.n	8001cee <MCP_ReceivedFrame+0x3da>
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001ce8:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001cec:	d009      	beq.n	8001d02 <MCP_ReceivedFrame+0x3ee>
 8001cee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001cf2:	2900      	cmp	r1, #0
 8001cf4:	d1f6      	bne.n	8001ce4 <MCP_ReceivedFrame+0x3d0>
        outBuff[i] = 0;
 8001cf6:	f1c0 0220 	rsb	r2, r0, #32
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	4420      	add	r0, r4
 8001cfe:	f006 ff11 	bl	8008b24 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001d02:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001d04:	69a8      	ldr	r0, [r5, #24]
 8001d06:	2320      	movs	r3, #32
 8001d08:	4622      	mov	r2, r4
 8001d0a:	21f0      	movs	r1, #240	@ 0xf0
 8001d0c:	47b0      	blx	r6
      bNoError = true;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001d14:	e651      	b.n	80019ba <MCP_ReceivedFrame+0xa6>
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001d16:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8001d1a:	f9b6 1000 	ldrsh.w	r1, [r6]
 8001d1e:	4628      	mov	r0, r5
 8001d20:	f001 fc80 	bl	8003624 <UI_SetCurrentReferences>
      bNoError = true;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001d2a:	e646      	b.n	80019ba <MCP_ReceivedFrame+0xa6>
 8001d2c:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b1b      	cmp	r3, #27
 8001d34:	f63f aea0 	bhi.w	8001a78 <MCP_ReceivedFrame+0x164>
 8001d38:	480e      	ldr	r0, [pc, #56]	@ (8001d74 <MCP_ReceivedFrame+0x460>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	4203      	tst	r3, r0
 8001d42:	f000 80ad 	beq.w	8001ea0 <MCP_ReceivedFrame+0x58c>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001d46:	f10d 0209 	add.w	r2, sp, #9
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f001 f8d2 	bl	8002ef4 <UI_GetReg>
          if ( bNoError == true )
 8001d50:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001d54:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f43f ae01 	beq.w	800195e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001d5c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001d60:	2302      	movs	r3, #2
 8001d62:	aa04      	add	r2, sp, #16
 8001d64:	21f0      	movs	r1, #240	@ 0xf0
 8001d66:	47a0      	blx	r4
  if (RequireAck)
 8001d68:	e600      	b.n	800196c <MCP_ReceivedFrame+0x58>
 8001d6a:	bf00      	nop
 8001d6c:	2aaaaaab 	.word	0x2aaaaaab
 8001d70:	20000ac4 	.word	0x20000ac4
 8001d74:	0f8ffe78 	.word	0x0f8ffe78
 8001d78:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001d82:	f63f ae79 	bhi.w	8001a78 <MCP_ReceivedFrame+0x164>
 8001d86:	2a08      	cmp	r2, #8
 8001d88:	f63f ae76 	bhi.w	8001a78 <MCP_ReceivedFrame+0x164>
 8001d8c:	a301      	add	r3, pc, #4	@ (adr r3, 8001d94 <MCP_ReceivedFrame+0x480>)
 8001d8e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001e7d 	.word	0x08001e7d
 8001d98:	08001a79 	.word	0x08001a79
 8001d9c:	08001e7d 	.word	0x08001e7d
 8001da0:	08001e2b 	.word	0x08001e2b
 8001da4:	08001e2b 	.word	0x08001e2b
 8001da8:	08001e2b 	.word	0x08001e2b
 8001dac:	08001d47 	.word	0x08001d47
 8001db0:	08001d47 	.word	0x08001d47
 8001db4:	08001d47 	.word	0x08001d47
 8001db8:	2965      	cmp	r1, #101	@ 0x65
 8001dba:	d913      	bls.n	8001de4 <MCP_ReceivedFrame+0x4d0>
 8001dbc:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	2a14      	cmp	r2, #20
 8001dc4:	d810      	bhi.n	8001de8 <MCP_ReceivedFrame+0x4d4>
 8001dc6:	2b14      	cmp	r3, #20
 8001dc8:	d80e      	bhi.n	8001de8 <MCP_ReceivedFrame+0x4d4>
 8001dca:	e8df f003 	tbb	[pc, r3]
 8001dce:	1d71      	.short	0x1d71
 8001dd0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001dd4:	1d0d0d0d 	.word	0x1d0d0d0d
 8001dd8:	0d0d0d1d 	.word	0x0d0d0d1d
 8001ddc:	0d0d0d0d 	.word	0x0d0d0d0d
 8001de0:	4646      	.short	0x4646
 8001de2:	46          	.byte	0x46
 8001de3:	00          	.byte	0x00
 8001de4:	294e      	cmp	r1, #78	@ 0x4e
 8001de6:	d805      	bhi.n	8001df4 <MCP_ReceivedFrame+0x4e0>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001de8:	2302      	movs	r3, #2
    if (bNoError)
 8001dea:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001dee:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001df2:	e5e0      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
 8001df4:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4a36      	ldr	r2, [pc, #216]	@ (8001ed8 <MCP_ReceivedFrame+0x5c4>)
 8001e00:	4213      	tst	r3, r2
 8001e02:	d12a      	bne.n	8001e5a <MCP_ReceivedFrame+0x546>
 8001e04:	295b      	cmp	r1, #91	@ 0x5b
 8001e06:	d1ef      	bne.n	8001de8 <MCP_ReceivedFrame+0x4d4>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001e08:	f8d6 2001 	ldr.w	r2, [r6, #1]
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f000 ff11 	bl	8002c34 <UI_SetReg>
 8001e12:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001e16:	e5ce      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
 8001e18:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 8001e1c:	482f      	ldr	r0, [pc, #188]	@ (8001edc <MCP_ReceivedFrame+0x5c8>)
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	4018      	ands	r0, r3
 8001e28:	b1f8      	cbz	r0, 8001e6a <MCP_ReceivedFrame+0x556>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001e2a:	f10d 0209 	add.w	r2, sp, #9
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f001 f860 	bl	8002ef4 <UI_GetReg>
          if ( bNoError == true )
 8001e34:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001e38:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f43f ad8f 	beq.w	800195e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001e40:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001e44:	2304      	movs	r3, #4
 8001e46:	aa04      	add	r2, sp, #16
 8001e48:	21f0      	movs	r1, #240	@ 0xf0
 8001e4a:	47a0      	blx	r4
  if (RequireAck)
 8001e4c:	e58e      	b.n	800196c <MCP_ReceivedFrame+0x58>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001e4e:	2301      	movs	r3, #1
    if (bNoError)
 8001e50:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001e54:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001e58:	e5ad      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001e5a:	f8b6 2001 	ldrh.w	r2, [r6, #1]
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f000 fee8 	bl	8002c34 <UI_SetReg>
 8001e64:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001e68:	e5a5      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
 8001e6a:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 8001e6e:	4213      	tst	r3, r2
 8001e70:	f47f af69 	bne.w	8001d46 <MCP_ReceivedFrame+0x432>
 8001e74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <MCP_ReceivedFrame+0x5cc>)
 8001e76:	4213      	tst	r3, r2
 8001e78:	f43f adfe 	beq.w	8001a78 <MCP_ReceivedFrame+0x164>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e7c:	f10d 0209 	add.w	r2, sp, #9
 8001e80:	4628      	mov	r0, r5
 8001e82:	f001 f837 	bl	8002ef4 <UI_GetReg>
           if ( bNoError == true )
 8001e86:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e8a:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f43f ad66 	beq.w	800195e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001e92:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001e96:	2301      	movs	r3, #1
 8001e98:	aa04      	add	r2, sp, #16
 8001e9a:	21f0      	movs	r1, #240	@ 0xf0
 8001e9c:	47a0      	blx	r4
  if (RequireAck)
 8001e9e:	e565      	b.n	800196c <MCP_ReceivedFrame+0x58>
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <MCP_ReceivedFrame+0x5d0>)
 8001ea2:	4213      	tst	r3, r2
 8001ea4:	d1c1      	bne.n	8001e2a <MCP_ReceivedFrame+0x516>
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <MCP_ReceivedFrame+0x5d4>)
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d1e6      	bne.n	8001e7c <MCP_ReceivedFrame+0x568>
 8001eae:	e5e3      	b.n	8001a78 <MCP_ReceivedFrame+0x164>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001eb0:	7872      	ldrb	r2, [r6, #1]
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f000 febe 	bl	8002c34 <UI_SetReg>
 8001eb8:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001ebc:	e57b      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ebe:	7872      	ldrb	r2, [r6, #1]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f000 feb6 	bl	8002c34 <UI_SetReg>
 8001ec8:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001ecc:	e573      	b.n	80019b6 <MCP_ReceivedFrame+0xa2>
 8001ece:	2326      	movs	r3, #38	@ 0x26
 8001ed0:	2124      	movs	r1, #36	@ 0x24
 8001ed2:	2222      	movs	r2, #34	@ 0x22
 8001ed4:	e597      	b.n	8001a06 <MCP_ReceivedFrame+0xf2>
 8001ed6:	bf00      	nop
 8001ed8:	006407f1 	.word	0x006407f1
 8001edc:	0ffe11f0 	.word	0x0ffe11f0
 8001ee0:	0001020c 	.word	0x0001020c
 8001ee4:	00200107 	.word	0x00200107
 8001ee8:	00100080 	.word	0x00100080

08001eec <MCP_WaitNextFrame>:
{
 8001eec:	b510      	push	{r4, lr}
 8001eee:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001ef0:	6980      	ldr	r0, [r0, #24]
 8001ef2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ef4:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	f884 20ac 	strb.w	r2, [r4, #172]	@ 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001efc:	6a23      	ldr	r3, [r4, #32]
 8001efe:	69a0      	ldr	r0, [r4, #24]
}
 8001f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001f04:	4718      	bx	r3
 8001f06:	bf00      	nop

08001f08 <MCP_Init>:
{
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	461d      	mov	r5, r3
 8001f10:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8001f12:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8001f18:	61a1      	str	r1, [r4, #24]
{
 8001f1a:	4608      	mov	r0, r1
 8001f1c:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <MCP_Init+0x38>)
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <MCP_Init+0x3c>)
 8001f24:	4621      	mov	r1, r4
 8001f26:	f004 fb83 	bl	8006630 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001f2a:	9b06      	ldr	r3, [sp, #24]
 8001f2c:	6263      	str	r3, [r4, #36]	@ 0x24
  pHandle->fFcpReceive = fFcpReceive;
 8001f2e:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff ffda 	bl	8001eec <MCP_WaitNextFrame>
}
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	08001f49 	.word	0x08001f49
 8001f40:	08001f51 	.word	0x08001f51
 8001f44:	08001915 	.word	0x08001915

08001f48 <MCP_OnTimeOut>:
{
 8001f48:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001f4a:	f7ff ffcf 	bl	8001eec <MCP_WaitNextFrame>
}
 8001f4e:	bd08      	pop	{r3, pc}

08001f50 <MCP_SentFrame>:
{
 8001f50:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001f52:	f7ff ffcb 	bl	8001eec <MCP_WaitNextFrame>
}
 8001f56:	bd08      	pop	{r3, pc}

08001f58 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001f58:	b530      	push	{r4, r5, lr}
 8001f5a:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001f5c:	f003 fa1c 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001f62:	4d0c      	ldr	r5, [pc, #48]	@ (8001f94 <MX_MotorControl_Init+0x3c>)
 8001f64:	4c0c      	ldr	r4, [pc, #48]	@ (8001f98 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001f66:	fba3 3000 	umull	r3, r0, r3, r0
 8001f6a:	09c0      	lsrs	r0, r0, #7
 8001f6c:	f002 fb74 	bl	8004658 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001f70:	4629      	mov	r1, r5
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff f82e 	bl	8000fd4 <MCboot>
  mc_lock_pins();
 8001f78:	f7ff fc20 	bl	80017bc <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <MX_MotorControl_Init+0x44>)
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_MotorControl_Init+0x48>)
 8001f82:	462b      	mov	r3, r5
 8001f84:	4622      	mov	r2, r4
 8001f86:	2101      	movs	r1, #1
 8001f88:	f000 fdc6 	bl	8002b18 <UI_TaskInit>
}
 8001f8c:	b003      	add	sp, #12
 8001f8e:	bd30      	pop	{r4, r5, pc}
 8001f90:	10624dd3 	.word	0x10624dd3
 8001f94:	20000acc 	.word	0x20000acc
 8001f98:	20000ad0 	.word	0x20000ad0
 8001f9c:	08008cc4 	.word	0x08008cc4
 8001fa0:	2000068c 	.word	0x2000068c

08001fa4 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8002198 <RCM_RegisterRegConv+0x1f4>)
{
 8001fa6:	b470      	push	{r4, r5, r6}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fa8:	6814      	ldr	r4, [r2, #0]
{
 8001faa:	4605      	mov	r5, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	f000 8088 	beq.w	80020c2 <RCM_RegisterRegConv+0x11e>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fb2:	7901      	ldrb	r1, [r0, #4]
 8001fb4:	7923      	ldrb	r3, [r4, #4]
 8001fb6:	4299      	cmp	r1, r3
 8001fb8:	d020      	beq.n	8001ffc <RCM_RegisterRegConv+0x58>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fba:	6853      	ldr	r3, [r2, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8097 	beq.w	80020f0 <RCM_RegisterRegConv+0x14c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fc2:	791c      	ldrb	r4, [r3, #4]
 8001fc4:	428c      	cmp	r4, r1
  uint8_t handle=255;
 8001fc6:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fca:	f000 8083 	beq.w	80020d4 <RCM_RegisterRegConv+0x130>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fce:	6894      	ldr	r4, [r2, #8]
 8001fd0:	2c00      	cmp	r4, #0
 8001fd2:	f000 8097 	beq.w	8002104 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fd6:	7923      	ldrb	r3, [r4, #4]
 8001fd8:	428b      	cmp	r3, r1
 8001fda:	f000 8082 	beq.w	80020e2 <RCM_RegisterRegConv+0x13e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fde:	68d3      	ldr	r3, [r2, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 809c 	beq.w	800211e <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fe6:	791c      	ldrb	r4, [r3, #4]
 8001fe8:	428c      	cmp	r4, r1
 8001fea:	f000 80a5 	beq.w	8002138 <RCM_RegisterRegConv+0x194>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001fee:	2803      	cmp	r0, #3
 8001ff0:	bf88      	it	hi
 8001ff2:	20ff      	movhi	r0, #255	@ 0xff
 8001ff4:	f240 80b2 	bls.w	800215c <RCM_RegisterRegConv+0x1b8>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001ff8:	bc70      	pop	{r4, r5, r6}
 8001ffa:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ffc:	6803      	ldr	r3, [r0, #0]
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	4283      	cmp	r3, r0
 8002002:	d1da      	bne.n	8001fba <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8002004:	2000      	movs	r0, #0
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	f360 0107 	bfi	r1, r0, #0, #8
 800200e:	f360 210f 	bfi	r1, r0, #8, #8
      RCM_handle_array [handle] = regConv;
 8002012:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002016:	4c61      	ldr	r4, [pc, #388]	@ (800219c <RCM_RegisterRegConv+0x1f8>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	2600      	movs	r6, #0
 800201c:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 8002020:	07d6      	lsls	r6, r2, #31
 8002022:	d422      	bmi.n	800206a <RCM_RegisterRegConv+0xc6>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	f022 0204 	bic.w	r2, r2, #4
 800202a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800202c:	2204      	movs	r2, #4
 800202e:	601a      	str	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	f022 0220 	bic.w	r2, r2, #32
 8002036:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002038:	2220      	movs	r2, #32
 800203a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002042:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002046:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800204a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	2a00      	cmp	r2, #0
 8002050:	dbfc      	blt.n	800204c <RCM_RegisterRegConv+0xa8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	07d4      	lsls	r4, r2, #31
 8002056:	d408      	bmi.n	800206a <RCM_RegisterRegConv+0xc6>
  MODIFY_REG(ADCx->CR,
 8002058:	4c51      	ldr	r4, [pc, #324]	@ (80021a0 <RCM_RegisterRegConv+0x1fc>)
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4022      	ands	r2, r4
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	07d2      	lsls	r2, r2, #31
 8002068:	d5f7      	bpl.n	800205a <RCM_RegisterRegConv+0xb6>
      RCM_NoInj_array [handle].enable = false;
 800206a:	4c4e      	ldr	r4, [pc, #312]	@ (80021a4 <RCM_RegisterRegConv+0x200>)
 800206c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002070:	0052      	lsls	r2, r2, #1
      RCM_NoInj_array [handle].prev = handle;
 8002072:	f104 0c04 	add.w	ip, r4, #4
 8002076:	f82c 1002 	strh.w	r1, [ip, r2]
      RCM_NoInj_array [handle].enable = false;
 800207a:	2100      	movs	r1, #0
 800207c:	54a1      	strb	r1, [r4, r2]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800207e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002080:	f021 010f 	bic.w	r1, r1, #15
 8002084:	6319      	str	r1, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002086:	7929      	ldrb	r1, [r5, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	408a      	lsls	r2, r1
 800208c:	2909      	cmp	r1, #9
 800208e:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8002092:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002096:	d82f      	bhi.n	80020f8 <RCM_RegisterRegConv+0x154>
 8002098:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800209c:	0dd4      	lsrs	r4, r2, #23
 800209e:	f004 0404 	and.w	r4, r4, #4
 80020a2:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80020a4:	68ad      	ldr	r5, [r5, #8]
 80020a6:	5919      	ldr	r1, [r3, r4]
 80020a8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80020ac:	f04f 0c07 	mov.w	ip, #7
 80020b0:	4095      	lsls	r5, r2
 80020b2:	fa0c f202 	lsl.w	r2, ip, r2
 80020b6:	ea21 0202 	bic.w	r2, r1, r2
 80020ba:	432a      	orrs	r2, r5
 80020bc:	511a      	str	r2, [r3, r4]
}
 80020be:	bc70      	pop	{r4, r5, r6}
 80020c0:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020c2:	6853      	ldr	r3, [r2, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d03e      	beq.n	8002146 <RCM_RegisterRegConv+0x1a2>
 80020c8:	7901      	ldrb	r1, [r0, #4]
  uint8_t i=0;
 80020ca:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020cc:	791c      	ldrb	r4, [r3, #4]
 80020ce:	428c      	cmp	r4, r1
 80020d0:	f47f af7d 	bne.w	8001fce <RCM_RegisterRegConv+0x2a>
 80020d4:	681c      	ldr	r4, [r3, #0]
 80020d6:	682b      	ldr	r3, [r5, #0]
 80020d8:	42a3      	cmp	r3, r4
 80020da:	f47f af78 	bne.w	8001fce <RCM_RegisterRegConv+0x2a>
      i++;
 80020de:	2001      	movs	r0, #1
 80020e0:	e791      	b.n	8002006 <RCM_RegisterRegConv+0x62>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020e2:	6824      	ldr	r4, [r4, #0]
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	429c      	cmp	r4, r3
 80020e8:	f47f af79 	bne.w	8001fde <RCM_RegisterRegConv+0x3a>
      i++;
 80020ec:	2002      	movs	r0, #2
 80020ee:	e78a      	b.n	8002006 <RCM_RegisterRegConv+0x62>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020f0:	6894      	ldr	r4, [r2, #8]
 80020f2:	b1dc      	cbz	r4, 800212c <RCM_RegisterRegConv+0x188>
 80020f4:	2001      	movs	r0, #1
 80020f6:	e76e      	b.n	8001fd6 <RCM_RegisterRegConv+0x32>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80020f8:	3c1e      	subs	r4, #30
 80020fa:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 80020fe:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002102:	e7cb      	b.n	800209c <RCM_RegisterRegConv+0xf8>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002104:	2804      	cmp	r0, #4
 8002106:	d923      	bls.n	8002150 <RCM_RegisterRegConv+0x1ac>
 8002108:	68d0      	ldr	r0, [r2, #12]
 800210a:	2800      	cmp	r0, #0
 800210c:	d03a      	beq.n	8002184 <RCM_RegisterRegConv+0x1e0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800210e:	7903      	ldrb	r3, [r0, #4]
 8002110:	4299      	cmp	r1, r3
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	d03b      	beq.n	800218e <RCM_RegisterRegConv+0x1ea>
      i++;
 8002116:	2002      	movs	r0, #2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002118:	f240 2102 	movw	r1, #514	@ 0x202
 800211c:	e779      	b.n	8002012 <RCM_RegisterRegConv+0x6e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800211e:	2804      	cmp	r0, #4
 8002120:	d91c      	bls.n	800215c <RCM_RegisterRegConv+0x1b8>
 8002122:	682b      	ldr	r3, [r5, #0]
 8002124:	2003      	movs	r0, #3
 8002126:	f240 3103 	movw	r1, #771	@ 0x303
 800212a:	e772      	b.n	8002012 <RCM_RegisterRegConv+0x6e>
 800212c:	68d3      	ldr	r3, [r2, #12]
 800212e:	b323      	cbz	r3, 800217a <RCM_RegisterRegConv+0x1d6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002130:	7918      	ldrb	r0, [r3, #4]
 8002132:	4288      	cmp	r0, r1
 8002134:	d121      	bne.n	800217a <RCM_RegisterRegConv+0x1d6>
 8002136:	2001      	movs	r0, #1
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	4299      	cmp	r1, r3
 800213e:	f47f af56 	bne.w	8001fee <RCM_RegisterRegConv+0x4a>
      i++;
 8002142:	2003      	movs	r0, #3
 8002144:	e75f      	b.n	8002006 <RCM_RegisterRegConv+0x62>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002146:	6894      	ldr	r4, [r2, #8]
 8002148:	b114      	cbz	r4, 8002150 <RCM_RegisterRegConv+0x1ac>
 800214a:	7901      	ldrb	r1, [r0, #4]
  uint8_t i=0;
 800214c:	4618      	mov	r0, r3
 800214e:	e742      	b.n	8001fd6 <RCM_RegisterRegConv+0x32>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002150:	68d3      	ldr	r3, [r2, #12]
 8002152:	b95b      	cbnz	r3, 800216c <RCM_RegisterRegConv+0x1c8>
 8002154:	4618      	mov	r0, r3
 8002156:	682b      	ldr	r3, [r5, #0]
 8002158:	4601      	mov	r1, r0
 800215a:	e75a      	b.n	8002012 <RCM_RegisterRegConv+0x6e>
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	f360 0107 	bfi	r1, r0, #0, #8
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	f360 210f 	bfi	r1, r0, #8, #8
 800216a:	e752      	b.n	8002012 <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800216c:	7918      	ldrb	r0, [r3, #4]
 800216e:	7929      	ldrb	r1, [r5, #4]
 8002170:	4288      	cmp	r0, r1
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	d1ee      	bne.n	8002156 <RCM_RegisterRegConv+0x1b2>
 8002178:	e7de      	b.n	8002138 <RCM_RegisterRegConv+0x194>
 800217a:	682b      	ldr	r3, [r5, #0]
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800217c:	2001      	movs	r0, #1
 800217e:	f240 1101 	movw	r1, #257	@ 0x101
 8002182:	e746      	b.n	8002012 <RCM_RegisterRegConv+0x6e>
 8002184:	682b      	ldr	r3, [r5, #0]
      i++;
 8002186:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002188:	f240 2102 	movw	r1, #514	@ 0x202
 800218c:	e741      	b.n	8002012 <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800218e:	6801      	ldr	r1, [r0, #0]
 8002190:	428b      	cmp	r3, r1
 8002192:	d0d6      	beq.n	8002142 <RCM_RegisterRegConv+0x19e>
 8002194:	e7bf      	b.n	8002116 <RCM_RegisterRegConv+0x172>
 8002196:	bf00      	nop
 8002198:	20000b14 	.word	0x20000b14
 800219c:	20000af4 	.word	0x20000af4
 80021a0:	7fffffc0 	.word	0x7fffffc0
 80021a4:	20000adc 	.word	0x20000adc

080021a8 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80021a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002320 <RCM_ExecRegularConv+0x178>)
 80021aa:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80021ae:	b510      	push	{r4, lr}
  if (RCM_NoInj_array [handle].enable == false)
 80021b0:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 80021b4:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80021b8:	2900      	cmp	r1, #0
 80021ba:	d139      	bne.n	8002230 <RCM_ExecRegularConv+0x88>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	b992      	cbnz	r2, 80021e6 <RCM_ExecRegularConv+0x3e>
  uint8_t LastEnable = RCM_MAX_CONV;
 80021c0:	2104      	movs	r1, #4
      if (RCM_NoInj_array [i].enable == true)
 80021c2:	799a      	ldrb	r2, [r3, #6]
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d173      	bne.n	80022b0 <RCM_ExecRegularConv+0x108>
 80021c8:	7b1a      	ldrb	r2, [r3, #12]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d175      	bne.n	80022ba <RCM_ExecRegularConv+0x112>
 80021ce:	7c9a      	ldrb	r2, [r3, #18]
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	f000 8098 	beq.w	8002306 <RCM_ExecRegularConv+0x15e>
      {
        if (RCM_NoInj_array [i].next > handle)
 80021d6:	7dda      	ldrb	r2, [r3, #23]
 80021d8:	4282      	cmp	r2, r0
 80021da:	f240 809e 	bls.w	800231a <RCM_ExecRegularConv+0x172>
 80021de:	f04f 0e03 	mov.w	lr, #3
      if (RCM_NoInj_array [i].enable == true)
 80021e2:	4671      	mov	r1, lr
 80021e4:	e003      	b.n	80021ee <RCM_ExecRegularConv+0x46>
        if (RCM_NoInj_array [i].next > handle)
 80021e6:	795a      	ldrb	r2, [r3, #5]
 80021e8:	4290      	cmp	r0, r2
 80021ea:	d2ea      	bcs.n	80021c2 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 80021ec:	468e      	mov	lr, r1
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array [handle].next = formerNext;
 80021ee:	eb0c 0400 	add.w	r4, ip, r0
 80021f2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array [handle].prev = i;
          RCM_NoInj_array [i].next = handle;
 80021f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80021fa:	7162      	strb	r2, [r4, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80021fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
          RCM_NoInj_array [handle].prev = i;
 8002200:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array [formerNext].prev = handle;
 8002204:	eb03 0242 	add.w	r2, r3, r2, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002208:	4c46      	ldr	r4, [pc, #280]	@ (8002324 <RCM_ExecRegularConv+0x17c>)
          RCM_NoInj_array [formerNext].prev = handle;
 800220a:	7110      	strb	r0, [r2, #4]
          RCM_NoInj_array [i].next = handle;
 800220c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002210:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array [i].next = handle;
 8002212:	7148      	strb	r0, [r1, #5]
    RCM_NoInj_array [handle].enable = true;
 8002214:	eb0c 0100 	add.w	r1, ip, r0
 8002218:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800221c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8002220:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002224:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002228:	7852      	ldrb	r2, [r2, #1]
 800222a:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800222c:	bf18      	it	ne
 800222e:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002230:	4a3d      	ldr	r2, [pc, #244]	@ (8002328 <RCM_ExecRegularConv+0x180>)
 8002232:	f892 2078 	ldrb.w	r2, [r2, #120]	@ 0x78
 8002236:	2a00      	cmp	r2, #0
 8002238:	d135      	bne.n	80022a6 <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800223a:	4a3c      	ldr	r2, [pc, #240]	@ (800232c <RCM_ExecRegularConv+0x184>)
 800223c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002240:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002242:	6811      	ldr	r1, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002244:	2201      	movs	r2, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002246:	2c09      	cmp	r4, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002248:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800224c:	fa02 f204 	lsl.w	r2, r2, r4
 8002250:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8002254:	bf84      	itt	hi
 8002256:	f1ae 0e1e 	subhi.w	lr, lr, #30
 800225a:	ea42 520e 	orrhi.w	r2, r2, lr, lsl #20
  MODIFY_REG(*preg,
 800225e:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002260:	bf94      	ite	ls
 8002262:	ea42 520e 	orrls.w	r2, r2, lr, lsl #20
 8002266:	f042 7200 	orrhi.w	r2, r2, #33554432	@ 0x2000000
 800226a:	0d12      	lsrs	r2, r2, #20
 800226c:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 8002270:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8002274:	4322      	orrs	r2, r4
 8002276:	630a      	str	r2, [r1, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002278:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 800227a:	688a      	ldr	r2, [r1, #8]
 800227c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002280:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002284:	f042 0204 	orr.w	r2, r2, #4
 8002288:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800228a:	680a      	ldr	r2, [r1, #0]
 800228c:	0752      	lsls	r2, r2, #29
 800228e:	d5fc      	bpl.n	800228a <RCM_ExecRegularConv+0xe2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8002290:	eb0c 0200 	add.w	r2, ip, r0
 8002294:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002298:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800229a:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 800229c:	4921      	ldr	r1, [pc, #132]	@ (8002324 <RCM_ExecRegularConv+0x17c>)
 800229e:	7954      	ldrb	r4, [r2, #5]
 80022a0:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array [handle].status = valid;
 80022a2:	2102      	movs	r1, #2
 80022a4:	7051      	strb	r1, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 80022a6:	4484      	add	ip, r0
 80022a8:	eb03 034c 	add.w	r3, r3, ip, lsl #1
return retVal;
}
 80022ac:	8858      	ldrh	r0, [r3, #2]
 80022ae:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array [i].next > handle)
 80022b0:	7ada      	ldrb	r2, [r3, #11]
 80022b2:	4290      	cmp	r0, r2
 80022b4:	d31d      	bcc.n	80022f2 <RCM_ExecRegularConv+0x14a>
      if (RCM_NoInj_array [i].enable == true)
 80022b6:	7b1a      	ldrb	r2, [r3, #12]
 80022b8:	b1fa      	cbz	r2, 80022fa <RCM_ExecRegularConv+0x152>
        if (RCM_NoInj_array [i].next > handle)
 80022ba:	7c5a      	ldrb	r2, [r3, #17]
 80022bc:	4282      	cmp	r2, r0
 80022be:	d828      	bhi.n	8002312 <RCM_ExecRegularConv+0x16a>
      if (RCM_NoInj_array [i].enable == true)
 80022c0:	7c9a      	ldrb	r2, [r3, #18]
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d187      	bne.n	80021d6 <RCM_ExecRegularConv+0x2e>
 80022c6:	2202      	movs	r2, #2
         formerNext = RCM_NoInj_array [LastEnable].next;
 80022c8:	4611      	mov	r1, r2
 80022ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80022ce:	eb0c 0400 	add.w	r4, ip, r0
 80022d2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 80022d6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80022da:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array [LastEnable].next;
 80022dc:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80022de:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80022e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80022e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80022e8:	4c0e      	ldr	r4, [pc, #56]	@ (8002324 <RCM_ExecRegularConv+0x17c>)
         RCM_NoInj_array [formerNext].prev = handle;
 80022ea:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 80022ec:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80022ee:	7822      	ldrb	r2, [r4, #0]
 80022f0:	e790      	b.n	8002214 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array [i].next > handle)
 80022f2:	f04f 0e01 	mov.w	lr, #1
      if (RCM_NoInj_array [i].enable == true)
 80022f6:	4671      	mov	r1, lr
 80022f8:	e779      	b.n	80021ee <RCM_ExecRegularConv+0x46>
 80022fa:	7c9a      	ldrb	r2, [r3, #18]
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	f47f af6a 	bne.w	80021d6 <RCM_ExecRegularConv+0x2e>
 8002302:	2201      	movs	r2, #1
 8002304:	e7e0      	b.n	80022c8 <RCM_ExecRegularConv+0x120>
       if (LastEnable != RCM_MAX_CONV )
 8002306:	2900      	cmp	r1, #0
 8002308:	d0de      	beq.n	80022c8 <RCM_ExecRegularConv+0x120>
         RCM_currentHandle = handle;
 800230a:	4c06      	ldr	r4, [pc, #24]	@ (8002324 <RCM_ExecRegularConv+0x17c>)
 800230c:	4602      	mov	r2, r0
 800230e:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8002310:	e780      	b.n	8002214 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array [i].next > handle)
 8002312:	f04f 0e02 	mov.w	lr, #2
      if (RCM_NoInj_array [i].enable == true)
 8002316:	4671      	mov	r1, lr
 8002318:	e769      	b.n	80021ee <RCM_ExecRegularConv+0x46>
 800231a:	2103      	movs	r1, #3
 800231c:	460a      	mov	r2, r1
 800231e:	e7d4      	b.n	80022ca <RCM_ExecRegularConv+0x122>
 8002320:	20000adc 	.word	0x20000adc
 8002324:	20000ad9 	.word	0x20000ad9
 8002328:	200003cc 	.word	0x200003cc
 800232c:	20000b14 	.word	0x20000b14

08002330 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002330:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002332:	4c12      	ldr	r4, [pc, #72]	@ (800237c <RCM_ExecUserConv+0x4c>)
 8002334:	7823      	ldrb	r3, [r4, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d000      	beq.n	800233c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800233a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800233c:	4d10      	ldr	r5, [pc, #64]	@ (8002380 <RCM_ExecUserConv+0x50>)
 800233e:	7828      	ldrb	r0, [r5, #0]
 8002340:	f7ff ff32 	bl	80021a8 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002344:	782b      	ldrb	r3, [r5, #0]
 8002346:	4a0f      	ldr	r2, [pc, #60]	@ (8002384 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002348:	4d0f      	ldr	r5, [pc, #60]	@ (8002388 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800234a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800234e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002352:	8028      	strh	r0, [r5, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002354:	7852      	ldrb	r2, [r2, #1]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002356:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002358:	b10a      	cbz	r2, 800235e <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 800235a:	2202      	movs	r2, #2
 800235c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800235e:	4a0b      	ldr	r2, [pc, #44]	@ (800238c <RCM_ExecUserConv+0x5c>)
 8002360:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002364:	2d00      	cmp	r5, #0
 8002366:	d0e8      	beq.n	800233a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002368:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800236c:	4618      	mov	r0, r3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800236e:	2300      	movs	r3, #0
 8002370:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002372:	6852      	ldr	r2, [r2, #4]
 8002374:	462b      	mov	r3, r5
}
 8002376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800237a:	4718      	bx	r3
 800237c:	20000ad4 	.word	0x20000ad4
 8002380:	20000ad8 	.word	0x20000ad8
 8002384:	20000adc 	.word	0x20000adc
 8002388:	20000ad6 	.word	0x20000ad6
 800238c:	20000af4 	.word	0x20000af4

08002390 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8002390:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <RCM_ExecNextConv+0x7c>)
 8002392:	491f      	ldr	r1, [pc, #124]	@ (8002410 <RCM_ExecNextConv+0x80>)
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800239a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800239e:	b3a3      	cbz	r3, 800240a <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80023a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <RCM_ExecNextConv+0x84>)
{
 80023a2:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80023aa:	2404      	movs	r4, #4
 80023ac:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80023ae:	f893 c004 	ldrb.w	ip, [r3, #4]
 80023b2:	2301      	movs	r3, #1
 80023b4:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80023b8:	f1bc 0f09 	cmp.w	ip, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80023bc:	fa03 f30c 	lsl.w	r3, r3, ip
 80023c0:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 80023c4:	bf84      	itt	hi
 80023c6:	3c1e      	subhi	r4, #30
 80023c8:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 80023cc:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80023d0:	bf98      	it	ls
 80023d2:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80023d6:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80023d8:	bf88      	it	hi
 80023da:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 80023de:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80023e0:	0d1b      	lsrs	r3, r3, #20
 80023e2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023e6:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 80023ea:	4313      	orrs	r3, r2
 80023ec:	6303      	str	r3, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80023ee:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 80023f0:	6883      	ldr	r3, [r0, #8]
 80023f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80023f6:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 80023fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023fe:	2401      	movs	r4, #1
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6083      	str	r3, [r0, #8]
 8002406:	704c      	strb	r4, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002408:	bd10      	pop	{r4, pc}
 800240a:	4770      	bx	lr
 800240c:	20000ad9 	.word	0x20000ad9
 8002410:	20000adc 	.word	0x20000adc
 8002414:	20000b14 	.word	0x20000b14

08002418 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8002418:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800241a:	4c10      	ldr	r4, [pc, #64]	@ (800245c <RCM_ReadOngoingConv+0x44>)
 800241c:	4a10      	ldr	r2, [pc, #64]	@ (8002460 <RCM_ReadOngoingConv+0x48>)
 800241e:	7823      	ldrb	r3, [r4, #0]
 8002420:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002424:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002428:	0058      	lsls	r0, r3, #1
 800242a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800242e:	f1bc 0f01 	cmp.w	ip, #1
 8002432:	d006      	beq.n	8002442 <RCM_ReadOngoingConv+0x2a>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002434:	4403      	add	r3, r0
 8002436:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800243a:	7953      	ldrb	r3, [r2, #5]
 800243c:	7023      	strb	r3, [r4, #0]
}
 800243e:	bc70      	pop	{r4, r5, r6}
 8002440:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8002442:	4d08      	ldr	r5, [pc, #32]	@ (8002464 <RCM_ReadOngoingConv+0x4c>)
 8002444:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8002448:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800244a:	682e      	ldr	r6, [r5, #0]
 800244c:	0776      	lsls	r6, r6, #29
 800244e:	d5f1      	bpl.n	8002434 <RCM_ReadOngoingConv+0x1c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002450:	6c2d      	ldr	r5, [r5, #64]	@ 0x40
 8002452:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002454:	2502      	movs	r5, #2
 8002456:	704d      	strb	r5, [r1, #1]
 8002458:	e7ec      	b.n	8002434 <RCM_ReadOngoingConv+0x1c>
 800245a:	bf00      	nop
 800245c:	20000ad9 	.word	0x20000ad9
 8002460:	20000adc 	.word	0x20000adc
 8002464:	20000b14 	.word	0x20000b14

08002468 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002468:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <HAL_MspInit+0x3c>)
{
 800246a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	661a      	str	r2, [r3, #96]	@ 0x60
 8002474:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8002476:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002478:	f002 0201 	and.w	r2, r2, #1
 800247c:	9200      	str	r2, [sp, #0]
 800247e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002482:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002490:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002494:	f002 f884 	bl	80045a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002498:	b003      	add	sp, #12
 800249a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800249e:	f002 bbf5 	b.w	8004c8c <HAL_PWREx_DisableUCPDDeadBattery>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a8:	b510      	push	{r4, lr}
 80024aa:	4604      	mov	r4, r0
 80024ac:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ae:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b0:	2244      	movs	r2, #68	@ 0x44
 80024b2:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80024b8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80024bc:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024be:	f006 fb31 	bl	8008b24 <memset>
  if(hadc->Instance==ADC1)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80024ca:	4a43      	ldr	r2, [pc, #268]	@ (80025d8 <HAL_ADC_MspInit+0x130>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d046      	beq.n	800255e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80024d0:	b01c      	add	sp, #112	@ 0x70
 80024d2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80024d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024dc:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024de:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80024e0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e2:	f002 ff83 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d16a      	bne.n	80025c0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ea:	4a3c      	ldr	r2, [pc, #240]	@ (80025dc <HAL_ADC_MspInit+0x134>)
 80024ec:	6813      	ldr	r3, [r2, #0]
 80024ee:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024f0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024f4:	d109      	bne.n	800250a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024f6:	4b3a      	ldr	r3, [pc, #232]	@ (80025e0 <HAL_ADC_MspInit+0x138>)
 80024f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <HAL_ADC_MspInit+0x138>)
 800250c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002514:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002516:	f002 0201 	and.w	r2, r2, #1
 800251a:	9202      	str	r2, [sp, #8]
 800251c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002520:	f042 0202 	orr.w	r2, r2, #2
 8002524:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002530:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002532:	2205      	movs	r2, #5
 8002534:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800253a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002540:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f002 f9b1 	bl	80048a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002546:	f244 0202 	movw	r2, #16386	@ 0x4002
 800254a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	4825      	ldr	r0, [pc, #148]	@ (80025e4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002552:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002556:	f002 f9a7 	bl	80048a8 <HAL_GPIO_Init>
}
 800255a:	b01c      	add	sp, #112	@ 0x70
 800255c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800255e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002562:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002566:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002568:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800256a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256c:	f002 ff3e 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
 8002570:	bb48      	cbnz	r0, 80025c6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002572:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <HAL_ADC_MspInit+0x134>)
 8002574:	6813      	ldr	r3, [r2, #0]
 8002576:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002578:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800257a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800257c:	d109      	bne.n	8002592 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_ADC_MspInit+0x138>)
 8002580:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002582:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002586:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258e:	9304      	str	r3, [sp, #16]
 8002590:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_ADC_MspInit+0x138>)
 8002594:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 800259e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80025d0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80025a8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80025b0:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f002 f976 	bl	80048a8 <HAL_GPIO_Init>
}
 80025bc:	b01c      	add	sp, #112	@ 0x70
 80025be:	bd10      	pop	{r4, pc}
      Error_Handler();
 80025c0:	f7fe faee 	bl	8000ba0 <Error_Handler>
 80025c4:	e791      	b.n	80024ea <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80025c6:	f7fe faeb 	bl	8000ba0 <Error_Handler>
 80025ca:	e7d2      	b.n	8002572 <HAL_ADC_MspInit+0xca>
 80025cc:	f3af 8000 	nop.w
 80025d0:	00000040 	.word	0x00000040
 80025d4:	00000003 	.word	0x00000003
 80025d8:	50000100 	.word	0x50000100
 80025dc:	20000b24 	.word	0x20000b24
 80025e0:	40021000 	.word	0x40021000
 80025e4:	48000400 	.word	0x48000400

080025e8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80025e8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	4934      	ldr	r1, [pc, #208]	@ (80026c0 <HAL_COMP_MspInit+0xd8>)
{
 80025ee:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80025f2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025f8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80025fc:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80025fe:	d008      	beq.n	8002612 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8002600:	4b30      	ldr	r3, [pc, #192]	@ (80026c4 <HAL_COMP_MspInit+0xdc>)
 8002602:	429a      	cmp	r2, r3
 8002604:	d01e      	beq.n	8002644 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8002606:	4b30      	ldr	r3, [pc, #192]	@ (80026c8 <HAL_COMP_MspInit+0xe0>)
 8002608:	429a      	cmp	r2, r3
 800260a:	d034      	beq.n	8002676 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800260c:	b00b      	add	sp, #44	@ 0x2c
 800260e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002616:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800261a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80026a8 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800262e:	a904      	add	r1, sp, #16
 8002630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8002634:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002638:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800263a:	f002 f935 	bl	80048a8 <HAL_GPIO_Init>
}
 800263e:	b00b      	add	sp, #44	@ 0x2c
 8002640:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8002648:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800264c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002656:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80026b0 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002660:	a904      	add	r1, sp, #16
 8002662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002666:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800266c:	f002 f91c 	bl	80048a8 <HAL_GPIO_Init>
}
 8002670:	b00b      	add	sp, #44	@ 0x2c
 8002672:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800267a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800267e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002680:	4812      	ldr	r0, [pc, #72]	@ (80026cc <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	f042 0202 	orr.w	r2, r2, #2
 8002686:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800268a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80026b8 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002694:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002696:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800269c:	f002 f904 	bl	80048a8 <HAL_GPIO_Init>
}
 80026a0:	b00b      	add	sp, #44	@ 0x2c
 80026a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80026a6:	bf00      	nop
 80026a8:	00000002 	.word	0x00000002
 80026ac:	00000003 	.word	0x00000003
 80026b0:	00000080 	.word	0x00000080
 80026b4:	00000003 	.word	0x00000003
 80026b8:	00000001 	.word	0x00000001
 80026bc:	00000003 	.word	0x00000003
 80026c0:	40010200 	.word	0x40010200
 80026c4:	40010204 	.word	0x40010204
 80026c8:	4001020c 	.word	0x4001020c
 80026cc:	48000400 	.word	0x48000400

080026d0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_CORDIC_MspInit+0x2c>)
 80026d2:	6802      	ldr	r2, [r0, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d000      	beq.n	80026da <HAL_CORDIC_MspInit+0xa>
 80026d8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80026da:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80026de:	f042 0208 	orr.w	r2, r2, #8
 80026e2:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 80026e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
{
 80026ea:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80026ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80026f6:	b002      	add	sp, #8
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40020c00 	.word	0x40020c00

08002700 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_DAC_MspInit+0x2c>)
 8002702:	6802      	ldr	r2, [r0, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d000      	beq.n	800270a <HAL_DAC_MspInit+0xa>
 8002708:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800270a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800270e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8002712:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002714:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002716:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800271a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8002726:	b002      	add	sp, #8
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	50001000 	.word	0x50001000

08002730 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002730:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8002732:	6802      	ldr	r2, [r0, #0]
 8002734:	4934      	ldr	r1, [pc, #208]	@ (8002808 <HAL_OPAMP_MspInit+0xd8>)
{
 8002736:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800273a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002740:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002744:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8002746:	d008      	beq.n	800275a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8002748:	4b30      	ldr	r3, [pc, #192]	@ (800280c <HAL_OPAMP_MspInit+0xdc>)
 800274a:	429a      	cmp	r2, r3
 800274c:	d01e      	beq.n	800278c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800274e:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <HAL_OPAMP_MspInit+0xe0>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d033      	beq.n	80027bc <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002754:	b00b      	add	sp, #44	@ 0x2c
 8002756:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800275e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8002762:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80027f0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800276e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	a904      	add	r1, sp, #16
 8002778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800277c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f002 f891 	bl	80048a8 <HAL_GPIO_Init>
}
 8002786:	b00b      	add	sp, #44	@ 0x2c
 8002788:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8002790:	33fc      	adds	r3, #252	@ 0xfc
 8002792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	64da      	str	r2, [r3, #76]	@ 0x4c
 800279a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800279c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80027f8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	a904      	add	r1, sp, #16
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80027ac:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f002 f879 	bl	80048a8 <HAL_GPIO_Init>
}
 80027b6:	b00b      	add	sp, #44	@ 0x2c
 80027b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027bc:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80027c0:	33f8      	adds	r3, #248	@ 0xf8
 80027c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	4813      	ldr	r0, [pc, #76]	@ (8002814 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	f042 0202 	orr.w	r2, r2, #2
 80027ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80027ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8002800 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80027da:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f002 f862 	bl	80048a8 <HAL_GPIO_Init>
}
 80027e4:	b00b      	add	sp, #44	@ 0x2c
 80027e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ea:	bf00      	nop
 80027ec:	f3af 8000 	nop.w
 80027f0:	0000000e 	.word	0x0000000e
 80027f4:	00000003 	.word	0x00000003
 80027f8:	000000e0 	.word	0x000000e0
 80027fc:	00000003 	.word	0x00000003
 8002800:	00000007 	.word	0x00000007
 8002804:	00000003 	.word	0x00000003
 8002808:	40010300 	.word	0x40010300
 800280c:	40010304 	.word	0x40010304
 8002810:	40010308 	.word	0x40010308
 8002814:	48000400 	.word	0x48000400

08002818 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_TIM_Base_MspInit+0x28>)
 800281a:	6802      	ldr	r2, [r0, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d000      	beq.n	8002822 <HAL_TIM_Base_MspInit+0xa>
 8002820:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8002826:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002828:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800282a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800282e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800283a:	b002      	add	sp, #8
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40012c00 	.word	0x40012c00

08002844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002844:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002846:	4a2a      	ldr	r2, [pc, #168]	@ (80028f0 <HAL_TIM_MspPostInit+0xac>)
 8002848:	6801      	ldr	r1, [r0, #0]
{
 800284a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800284e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002854:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002858:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 800285a:	d001      	beq.n	8002860 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800285c:	b00a      	add	sp, #40	@ 0x28
 800285e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002864:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002868:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800286c:	4821      	ldr	r0, [pc, #132]	@ (80028f4 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4332      	orrs	r2, r6
 8002870:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002874:	4032      	ands	r2, r6
 8002876:	9201      	str	r2, [sp, #4]
 8002878:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800287c:	f042 0202 	orr.w	r2, r2, #2
 8002880:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002884:	f002 0202 	and.w	r2, r2, #2
 8002888:	9202      	str	r2, [sp, #8]
 800288a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002896:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800289e:	2402      	movs	r4, #2
 80028a0:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80028a2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80028a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a8:	2302      	movs	r3, #2
 80028aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80028ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f001 fff8 	bl	80048a8 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80028b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80028ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028be:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80028c0:	480d      	ldr	r0, [pc, #52]	@ (80028f8 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80028c2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80028c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80028c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f001 ffec 	bl	80048a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80028d0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80028d4:	2302      	movs	r3, #2
 80028d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028dc:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80028e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028e6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e8:	f001 ffde 	bl	80048a8 <HAL_GPIO_Init>
}
 80028ec:	b00a      	add	sp, #40	@ 0x28
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000400 	.word	0x48000400
 80028fc:	00000000 	.word	0x00000000

08002900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002900:	b510      	push	{r4, lr}
 8002902:	4604      	mov	r4, r0
 8002904:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002906:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002908:	2244      	movs	r2, #68	@ 0x44
 800290a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002910:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002914:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002916:	f006 f905 	bl	8008b24 <memset>
  if(huart->Instance==USART2)
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_UART_MspInit+0x90>)
 800291c:	6822      	ldr	r2, [r4, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002922:	b018      	add	sp, #96	@ 0x60
 8002924:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002926:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002928:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800292a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800292c:	f002 fd5e 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
 8002930:	bb10      	cbnz	r0, 8002978 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	4818      	ldr	r0, [pc, #96]	@ (8002998 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002936:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002938:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800293c:	659a      	str	r2, [r3, #88]	@ 0x58
 800293e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002940:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002944:	9200      	str	r2, [sp, #0]
 8002946:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800294a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002980 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294e:	f042 0202 	orr.w	r2, r2, #2
 8002952:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002956:	ed8d 7b02 	vstr	d7, [sp, #8]
 800295a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002988 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002966:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002968:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800296e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f001 ff9a 	bl	80048a8 <HAL_GPIO_Init>
}
 8002974:	b018      	add	sp, #96	@ 0x60
 8002976:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002978:	f7fe f912 	bl	8000ba0 <Error_Handler>
 800297c:	e7d9      	b.n	8002932 <HAL_UART_MspInit+0x32>
 800297e:	bf00      	nop
 8002980:	00000018 	.word	0x00000018
 8002984:	00000002 	.word	0x00000002
	...
 8002990:	40004400 	.word	0x40004400
 8002994:	40021000 	.word	0x40021000
 8002998:	48000400 	.word	0x48000400

0800299c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800299c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 80029a4:	f7fe bdca 	b.w	800153c <TSK_HighFrequencyTask>

080029a8 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80029a8:	4b03      	ldr	r3, [pc, #12]	@ (80029b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80029aa:	4804      	ldr	r0, [pc, #16]	@ (80029bc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80029ac:	f06f 0201 	mvn.w	r2, #1
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	f004 be47 	b.w	8007644 <R3_2_TIMx_UP_IRQHandler>
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	200003cc 	.word	0x200003cc

080029c0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80029c0:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	0611      	lsls	r1, r2, #24
 80029c8:	d505      	bpl.n	80029d6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80029ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 80029ce:	480a      	ldr	r0, [pc, #40]	@ (80029f8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	f004 fe95 	bl	8007700 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	05d2      	lsls	r2, r2, #23
 80029dc:	d505      	bpl.n	80029ea <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80029de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 80029e2:	4805      	ldr	r0, [pc, #20]	@ (80029f8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	f004 fe6b 	bl	80076c0 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80029ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80029ee:	f7fe bd79 	b.w	80014e4 <MC_Scheduler>
 80029f2:	bf00      	nop
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	200003cc 	.word	0x200003cc

080029fc <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80029fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80029fe:	4c18      	ldr	r4, [pc, #96]	@ (8002a60 <USART2_IRQHandler+0x64>)
 8002a00:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	0691      	lsls	r1, r2, #26
 8002a08:	d50b      	bpl.n	8002a22 <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002a0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	b2c9      	uxtb	r1, r1
 8002a10:	f005 ff12 	bl	8008838 <UFCP_RX_IRQ_Handler>
 8002a14:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d01a      	beq.n	8002a50 <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d01d      	beq.n	8002a5a <USART2_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002a1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	0612      	lsls	r2, r2, #24
 8002a26:	d504      	bpl.n	8002a32 <USART2_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002a28:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <USART2_IRQHandler+0x64>)
 8002a2a:	f005 fe61 	bl	80086f0 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002a2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	071b      	lsls	r3, r3, #28
 8002a36:	d50a      	bpl.n	8002a4e <USART2_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002a38:	4809      	ldr	r0, [pc, #36]	@ (8002a60 <USART2_IRQHandler+0x64>)
 8002a3a:	f005 ff61 	bl	8008900 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002a3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a42:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a48:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002a4a:	f000 b8c9 	b.w	8002be0 <UI_SerialCommunicationTimeOutStop>
}
 8002a4e:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002a50:	f000 f8cc 	bl	8002bec <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002a54:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8002a58:	e7e3      	b.n	8002a22 <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002a5a:	f000 f8c1 	bl	8002be0 <UI_SerialCommunicationTimeOutStop>
 8002a5e:	e7de      	b.n	8002a1e <USART2_IRQHandler+0x22>
 8002a60:	20000000 	.word	0x20000000

08002a64 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002a66:	f7fe fe99 	bl	800179c <TSK_HardwareFaultTask>
 8002a6a:	4c18      	ldr	r4, [pc, #96]	@ (8002acc <HardFault_Handler+0x68>)
 8002a6c:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002a6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002a76:	4620      	mov	r0, r4
 8002a78:	d508      	bpl.n	8002a8c <HardFault_Handler+0x28>
 8002a7a:	f005 ff41 	bl	8008900 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002a7e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a82:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002a84:	f000 f8ac 	bl	8002be0 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002a88:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002a90:	4620      	mov	r0, r4
 8002a92:	d513      	bpl.n	8002abc <HardFault_Handler+0x58>
 8002a94:	f005 fe2c 	bl	80086f0 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002a98:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	0691      	lsls	r1, r2, #26
 8002aa0:	d5e7      	bpl.n	8002a72 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002aa2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	b2c9      	uxtb	r1, r1
 8002aa8:	f005 fec6 	bl	8008838 <UFCP_RX_IRQ_Handler>
 8002aac:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d008      	beq.n	8002ac4 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d1db      	bne.n	8002a6e <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002ab6:	f000 f893 	bl	8002be0 <UI_SerialCommunicationTimeOutStop>
 8002aba:	e7d8      	b.n	8002a6e <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	0692      	lsls	r2, r2, #26
 8002ac0:	d5d7      	bpl.n	8002a72 <HardFault_Handler+0xe>
 8002ac2:	e7ee      	b.n	8002aa2 <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 8002ac4:	f000 f892 	bl	8002bec <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002ac8:	e7d1      	b.n	8002a6e <HardFault_Handler+0xa>
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002ad0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002ad2:	4c0a      	ldr	r4, [pc, #40]	@ (8002afc <SysTick_Handler+0x2c>)
 8002ad4:	7823      	ldrb	r3, [r4, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d006      	beq.n	8002ae8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002ada:	3301      	adds	r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002ae4:	f7fe be4a 	b.w	800177c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002ae8:	f000 fdec 	bl	80036c4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002aec:	f001 fdd0 	bl	8004690 <HAL_SYSTICK_IRQHandler>
 8002af0:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002af2:	7023      	strb	r3, [r4, #0]
}
 8002af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002af8:	f7fe be40 	b.w	800177c <MC_RunMotorControlTasks>
 8002afc:	20000690 	.word	0x20000690

08002b00 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <EXTI15_10_IRQHandler+0x14>)
 8002b02:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8002b04:	0552      	lsls	r2, r2, #21
 8002b06:	d400      	bmi.n	8002b0a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8002b08:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b0e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002b10:	f000 b872 	b.w	8002bf8 <UI_HandleStartStopButton_cb>
 8002b14:	40010400 	.word	0x40010400

08002b18 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8002b1c:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8002b90 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8002b20:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8002b94 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8002b24:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8002b98 <UI_TaskInit+0x80>
{
 8002b28:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <UI_TaskInit+0x68>)
 8002b2c:	f8c8 3000 	str.w	r3, [r8]
{
 8002b30:	4607      	mov	r7, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 8002b36:	469c      	mov	ip, r3
 8002b38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002b3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002b40:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8002b44:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 8002b46:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 8002b4a:	4648      	mov	r0, r9
{
 8002b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    UFCP_Init( & pUSART );
 8002b50:	f005 fdcc 	bl	80086ec <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <UI_TaskInit+0x6c>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f8cd a004 	str.w	sl, [sp, #4]
 8002b5c:	f8d8 0000 	ldr.w	r0, [r8]
 8002b60:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <UI_TaskInit+0x70>)
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <UI_TaskInit+0x74>)
 8002b64:	4649      	mov	r1, r9
 8002b66:	f7ff f9cf 	bl	8001f08 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002b6a:	f8d8 0000 	ldr.w	r0, [r8]
 8002b6e:	970a      	str	r7, [sp, #40]	@ 0x28
 8002b70:	4633      	mov	r3, r6
 8002b72:	462a      	mov	r2, r5
 8002b74:	4621      	mov	r1, r4

}
 8002b76:	b002      	add	sp, #8
 8002b78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002b7c:	f000 b848 	b.w	8002c10 <UI_Init>
 8002b80:	20000b2c 	.word	0x20000b2c
 8002b84:	08008921 	.word	0x08008921
 8002b88:	08008759 	.word	0x08008759
 8002b8c:	08008781 	.word	0x08008781
 8002b90:	20000bdc 	.word	0x20000bdc
 8002b94:	200009cc 	.word	0x200009cc
 8002b98:	20000000 	.word	0x20000000

08002b9c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <UI_Scheduler+0x38>)
 8002b9e:	8813      	ldrh	r3, [r2, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b11b      	cbz	r3, 8002bac <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002ba4:	8813      	ldrh	r3, [r2, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002bac:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <UI_Scheduler+0x3c>)
 8002bae:	8813      	ldrh	r3, [r2, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d903      	bls.n	8002bbe <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002bb6:	8813      	ldrh	r3, [r2, #0]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002bbe:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <UI_Scheduler+0x40>)
 8002bc0:	8813      	ldrh	r3, [r2, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d903      	bls.n	8002bd0 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002bc8:	8813      	ldrh	r3, [r2, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]
  }
}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000b2a 	.word	0x20000b2a
 8002bd8:	20000b28 	.word	0x20000b28
 8002bdc:	20000692 	.word	0x20000692

08002be0 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002be0:	4b01      	ldr	r3, [pc, #4]	@ (8002be8 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]
}
 8002be6:	4770      	bx	lr
 8002be8:	20000b28 	.word	0x20000b28

08002bec <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002bec:	4b01      	ldr	r3, [pc, #4]	@ (8002bf4 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002bee:	224f      	movs	r2, #79	@ 0x4f
 8002bf0:	801a      	strh	r2, [r3, #0]
}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000b28 	.word	0x20000b28

08002bf8 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002bf8:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002bfa:	f7fd ffdf 	bl	8000bbc <MC_GetSTMStateMotor1>
 8002bfe:	b918      	cbnz	r0, 8002c08 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002c04:	f7fd bfce 	b.w	8000ba4 <MC_StartMotor1>
}
 8002c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002c0c:	f7fd bfd0 	b.w	8000bb0 <MC_StopMotor1>

08002c10 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002c10:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 8002c14:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002c16:	9b00      	ldr	r3, [sp, #0]
 8002c18:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	7501      	strb	r1, [r0, #20]
}
 8002c1e:	4770      	bx	lr

08002c20 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002c20:	7903      	ldrb	r3, [r0, #4]
 8002c22:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002c24:	bf86      	itte	hi
 8002c26:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002c28:	2001      	movhi	r0, #1
    retVal = false;
 8002c2a:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop

08002c30 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002c30:	7d00      	ldrb	r0, [r0, #20]
 8002c32:	4770      	bx	lr

08002c34 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002c34:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c36:	6884      	ldr	r4, [r0, #8]
 8002c38:	7d03      	ldrb	r3, [r0, #20]
 8002c3a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002c3e:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c40:	68c2      	ldr	r2, [r0, #12]
{
 8002c42:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002c48:	295b      	cmp	r1, #91	@ 0x5b
 8002c4a:	d85d      	bhi.n	8002d08 <UI_SetReg+0xd4>
 8002c4c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002c50:	005c011f 	.word	0x005c011f
 8002c54:	0110005c 	.word	0x0110005c
 8002c58:	010b005c 	.word	0x010b005c
 8002c5c:	012e0106 	.word	0x012e0106
 8002c60:	00c60123 	.word	0x00c60123
 8002c64:	00e000c1 	.word	0x00e000c1
 8002c68:	00d000d5 	.word	0x00d000d5
 8002c6c:	010100cb 	.word	0x010100cb
 8002c70:	00a600e5 	.word	0x00a600e5
 8002c74:	005c005c 	.word	0x005c005c
 8002c78:	0070008b 	.word	0x0070008b
 8002c7c:	005c005c 	.word	0x005c005c
 8002c80:	005c005c 	.word	0x005c005c
 8002c84:	005c005c 	.word	0x005c005c
 8002c88:	005c005c 	.word	0x005c005c
 8002c8c:	005c005c 	.word	0x005c005c
 8002c90:	005c005c 	.word	0x005c005c
 8002c94:	005c005c 	.word	0x005c005c
 8002c98:	005c005c 	.word	0x005c005c
 8002c9c:	005c005c 	.word	0x005c005c
 8002ca0:	005c005c 	.word	0x005c005c
 8002ca4:	005c005c 	.word	0x005c005c
 8002ca8:	005c005c 	.word	0x005c005c
 8002cac:	005c005c 	.word	0x005c005c
 8002cb0:	005c005c 	.word	0x005c005c
 8002cb4:	005c005c 	.word	0x005c005c
 8002cb8:	005c005c 	.word	0x005c005c
 8002cbc:	005c005c 	.word	0x005c005c
 8002cc0:	005c005c 	.word	0x005c005c
 8002cc4:	005c005c 	.word	0x005c005c
 8002cc8:	005c005c 	.word	0x005c005c
 8002ccc:	005c005c 	.word	0x005c005c
 8002cd0:	006b005c 	.word	0x006b005c
 8002cd4:	005c005c 	.word	0x005c005c
 8002cd8:	005c005c 	.word	0x005c005c
 8002cdc:	005c005c 	.word	0x005c005c
 8002ce0:	005c005c 	.word	0x005c005c
 8002ce4:	005c005c 	.word	0x005c005c
 8002ce8:	005c005c 	.word	0x005c005c
 8002cec:	005c005c 	.word	0x005c005c
 8002cf0:	005c005c 	.word	0x005c005c
 8002cf4:	005c005c 	.word	0x005c005c
 8002cf8:	005c005c 	.word	0x005c005c
 8002cfc:	005c005c 	.word	0x005c005c
 8002d00:	005c005c 	.word	0x005c005c
 8002d04:	005f005c 	.word	0x005f005c
 8002d08:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002d0a:	b003      	add	sp, #12
 8002d0c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002d0e:	4978      	ldr	r1, [pc, #480]	@ (8002ef0 <UI_SetReg+0x2bc>)
 8002d10:	fb81 3104 	smull	r3, r1, r1, r4
 8002d14:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002d18:	2200      	movs	r2, #0
 8002d1a:	b209      	sxth	r1, r1
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f7fd ff61 	bl	8000be4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002d22:	2001      	movs	r0, #1
 8002d24:	e7f1      	b.n	8002d0a <UI_SetReg+0xd6>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002d26:	b221      	sxth	r1, r4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f7fe f863 	bl	8000df4 <MCI_SetIdref>
    break;
 8002d2e:	e7f8      	b.n	8002d22 <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d30:	6901      	ldr	r1, [r0, #16]
 8002d32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d36:	0f19      	lsrs	r1, r3, #28
 8002d38:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d3a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d3e:	f000 80ba 	beq.w	8002eb6 <UI_SetReg+0x282>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	d1ed      	bne.n	8002d22 <UI_SetReg+0xee>
        pSPD = pMCT->pSpeedSensorAux;
 8002d46:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d0ea      	beq.n	8002d22 <UI_SetReg+0xee>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002d4c:	aa01      	add	r2, sp, #4
 8002d4e:	f10d 0102 	add.w	r1, sp, #2
 8002d52:	4628      	mov	r0, r5
 8002d54:	f005 fc88 	bl	8008668 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002d58:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002d5c:	b221      	sxth	r1, r4
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f005 fc90 	bl	8008684 <STO_SetPLLGains>
    break;
 8002d64:	e7dd      	b.n	8002d22 <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d66:	6901      	ldr	r1, [r0, #16]
 8002d68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d6c:	0f19      	lsrs	r1, r3, #28
 8002d6e:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d70:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d74:	f000 80ad 	beq.w	8002ed2 <UI_SetReg+0x29e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	d1d2      	bne.n	8002d22 <UI_SetReg+0xee>
        pSPD = pMCT->pSpeedSensorAux;
 8002d7c:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002d7e:	2d00      	cmp	r5, #0
 8002d80:	d0cf      	beq.n	8002d22 <UI_SetReg+0xee>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002d82:	aa01      	add	r2, sp, #4
 8002d84:	f10d 0102 	add.w	r1, sp, #2
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f005 fc6d 	bl	8008668 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002d8e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002d92:	b222      	sxth	r2, r4
 8002d94:	4628      	mov	r0, r5
 8002d96:	f005 fc75 	bl	8008684 <STO_SetPLLGains>
    break;
 8002d9a:	e7c2      	b.n	8002d22 <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d9c:	6901      	ldr	r1, [r0, #16]
 8002d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002da2:	0f19      	lsrs	r1, r3, #28
 8002da4:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002da6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002daa:	f000 808d 	beq.w	8002ec8 <UI_SetReg+0x294>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d1b7      	bne.n	8002d22 <UI_SetReg+0xee>
        pSPD = pMCT->pSpeedSensorAux;
 8002db2:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	d0b4      	beq.n	8002d22 <UI_SetReg+0xee>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002db8:	aa01      	add	r2, sp, #4
 8002dba:	f10d 0102 	add.w	r1, sp, #2
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f005 fc46 	bl	8008650 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002dc4:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002dc8:	b222      	sxth	r2, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f005 fc48 	bl	8008660 <STO_PLL_SetObserverGains>
    break;
 8002dd0:	e7a7      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002dd2:	6850      	ldr	r0, [r2, #4]
 8002dd4:	b221      	sxth	r1, r4
 8002dd6:	f003 fcd7 	bl	8006788 <PID_SetKI>
    break;
 8002dda:	e7a2      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002ddc:	6850      	ldr	r0, [r2, #4]
 8002dde:	b221      	sxth	r1, r4
 8002de0:	f003 fcd0 	bl	8006784 <PID_SetKP>
    break;
 8002de4:	e79d      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002de6:	6890      	ldr	r0, [r2, #8]
 8002de8:	b221      	sxth	r1, r4
 8002dea:	f003 fccd 	bl	8006788 <PID_SetKI>
    break;
 8002dee:	e798      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002df0:	6890      	ldr	r0, [r2, #8]
 8002df2:	b221      	sxth	r1, r4
 8002df4:	f003 fcc6 	bl	8006784 <PID_SetKP>
    break;
 8002df8:	e793      	b.n	8002d22 <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f7fd ffcc 	bl	8000d98 <MCI_GetIqdref>
 8002e00:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002e02:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002e06:	9901      	ldr	r1, [sp, #4]
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f7fd feff 	bl	8000c0c <MCI_SetCurrentReferences>
    break;
 8002e0e:	e788      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002e10:	6850      	ldr	r0, [r2, #4]
 8002e12:	b221      	sxth	r1, r4
 8002e14:	f003 fcc8 	bl	80067a8 <PID_SetKD>
    break;
 8002e18:	e783      	b.n	8002d22 <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e1a:	6901      	ldr	r1, [r0, #16]
 8002e1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e20:	0f19      	lsrs	r1, r3, #28
 8002e22:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e24:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e28:	d04a      	beq.n	8002ec0 <UI_SetReg+0x28c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e2a:	2b09      	cmp	r3, #9
 8002e2c:	f47f af79 	bne.w	8002d22 <UI_SetReg+0xee>
        pSPD = pMCT->pSpeedSensorAux;
 8002e30:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	f43f af75 	beq.w	8002d22 <UI_SetReg+0xee>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002e38:	aa01      	add	r2, sp, #4
 8002e3a:	f10d 0102 	add.w	r1, sp, #2
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f005 fc06 	bl	8008650 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002e44:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002e48:	b221      	sxth	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f005 fc08 	bl	8008660 <STO_PLL_SetObserverGains>
    break;
 8002e50:	e767      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002e52:	6890      	ldr	r0, [r2, #8]
 8002e54:	b221      	sxth	r1, r4
 8002e56:	f003 fca7 	bl	80067a8 <PID_SetKD>
    break;
 8002e5a:	e762      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e5c:	6810      	ldr	r0, [r2, #0]
 8002e5e:	b221      	sxth	r1, r4
 8002e60:	f003 fc92 	bl	8006788 <PID_SetKI>
    break;
 8002e64:	e75d      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e66:	6810      	ldr	r0, [r2, #0]
 8002e68:	b221      	sxth	r1, r4
 8002e6a:	f003 fc8b 	bl	8006784 <PID_SetKP>
    break;
 8002e6e:	e758      	b.n	8002d22 <UI_SetReg+0xee>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002e70:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8002e74:	d032      	beq.n	8002edc <UI_SetReg+0x2a8>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002e76:	2c01      	cmp	r4, #1
 8002e78:	f47f af53 	bne.w	8002d22 <UI_SetReg+0xee>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f7fd ff5d 	bl	8000d3c <MCI_GetMecSpeedRefUnit>
 8002e82:	2200      	movs	r2, #0
 8002e84:	4601      	mov	r1, r0
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7fd feac 	bl	8000be4 <MCI_ExecSpeedRamp>
 8002e8c:	e749      	b.n	8002d22 <UI_SetReg+0xee>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002e8e:	b2e1      	uxtb	r1, r4
 8002e90:	f7ff fec6 	bl	8002c20 <UI_SelectMC>
    break;
 8002e94:	e739      	b.n	8002d0a <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002e96:	4628      	mov	r0, r5
 8002e98:	f7fd ff7e 	bl	8000d98 <MCI_GetIqdref>
 8002e9c:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002e9e:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002ea2:	9901      	ldr	r1, [sp, #4]
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f7fd feb1 	bl	8000c0c <MCI_SetCurrentReferences>
    break;
 8002eaa:	e73a      	b.n	8002d22 <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002eac:	6810      	ldr	r0, [r2, #0]
 8002eae:	b221      	sxth	r1, r4
 8002eb0:	f003 fc7a 	bl	80067a8 <PID_SetKD>
    break;
 8002eb4:	e735      	b.n	8002d22 <UI_SetReg+0xee>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	f43f af45 	beq.w	8002d46 <UI_SetReg+0x112>
        pSPD = pMCT->pSpeedSensorMain;
 8002ebc:	6995      	ldr	r5, [r2, #24]
 8002ebe:	e743      	b.n	8002d48 <UI_SetReg+0x114>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d0b5      	beq.n	8002e30 <UI_SetReg+0x1fc>
        pSPD = pMCT->pSpeedSensorMain;
 8002ec4:	6995      	ldr	r5, [r2, #24]
 8002ec6:	e7b4      	b.n	8002e32 <UI_SetReg+0x1fe>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	f43f af72 	beq.w	8002db2 <UI_SetReg+0x17e>
        pSPD = pMCT->pSpeedSensorMain;
 8002ece:	6995      	ldr	r5, [r2, #24]
 8002ed0:	e770      	b.n	8002db4 <UI_SetReg+0x180>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	f43f af52 	beq.w	8002d7c <UI_SetReg+0x148>
        pSPD = pMCT->pSpeedSensorMain;
 8002ed8:	6995      	ldr	r5, [r2, #24]
 8002eda:	e750      	b.n	8002d7e <UI_SetReg+0x14a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002edc:	4628      	mov	r0, r5
 8002ede:	f7fd ff85 	bl	8000dec <MCI_GetTeref>
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f7fd fe86 	bl	8000bf8 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002eec:	e719      	b.n	8002d22 <UI_SetReg+0xee>
 8002eee:	bf00      	nop
 8002ef0:	2aaaaaab 	.word	0x2aaaaaab

08002ef4 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002ef4:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002ef6:	68c4      	ldr	r4, [r0, #12]
 8002ef8:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002efa:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002efc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f00:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002f04:	b091      	sub	sp, #68	@ 0x44

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002f06:	2a00      	cmp	r2, #0
 8002f08:	f000 808b 	beq.w	8003022 <UI_GetReg+0x12e>
  {
    *success = true;
 8002f0c:	f04f 0c01 	mov.w	ip, #1
 8002f10:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8002f14:	2981      	cmp	r1, #129	@ 0x81
 8002f16:	f200 8111 	bhi.w	800313c <UI_GetReg+0x248>
 8002f1a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002f1e:	0174      	.short	0x0174
 8002f20:	0129012d 	.word	0x0129012d
 8002f24:	01590160 	.word	0x01590160
 8002f28:	016c0170 	.word	0x016c0170
 8002f2c:	01130155 	.word	0x01130155
 8002f30:	021c0151 	.word	0x021c0151
 8002f34:	01090218 	.word	0x01090218
 8002f38:	01680125 	.word	0x01680125
 8002f3c:	01420164 	.word	0x01420164
 8002f40:	010f0133 	.word	0x010f0133
 8002f44:	0203010f 	.word	0x0203010f
 8002f48:	010f01ee 	.word	0x010f01ee
 8002f4c:	010f010f 	.word	0x010f010f
 8002f50:	01e601ea 	.word	0x01e601ea
 8002f54:	010f01e2 	.word	0x010f01e2
 8002f58:	01db010f 	.word	0x01db010f
 8002f5c:	0118011d 	.word	0x0118011d
 8002f60:	0239010f 	.word	0x0239010f
 8002f64:	022f0234 	.word	0x022f0234
 8002f68:	0225022a 	.word	0x0225022a
 8002f6c:	0118011d 	.word	0x0118011d
 8002f70:	01090113 	.word	0x01090113
 8002f74:	01a50220 	.word	0x01a50220
 8002f78:	025201a0 	.word	0x025201a0
 8002f7c:	010f010f 	.word	0x010f010f
 8002f80:	02570240 	.word	0x02570240
 8002f84:	0296018c 	.word	0x0296018c
 8002f88:	02700283 	.word	0x02700283
 8002f8c:	010f010f 	.word	0x010f010f
 8002f90:	010f010f 	.word	0x010f010f
 8002f94:	010f010f 	.word	0x010f010f
 8002f98:	010f010f 	.word	0x010f010f
 8002f9c:	01d40269 	.word	0x01d40269
 8002fa0:	01be0109 	.word	0x01be0109
 8002fa4:	010f01aa 	.word	0x010f01aa
 8002fa8:	010f010f 	.word	0x010f010f
 8002fac:	010f010f 	.word	0x010f010f
 8002fb0:	010f010f 	.word	0x010f010f
 8002fb4:	010f010f 	.word	0x010f010f
 8002fb8:	010f010f 	.word	0x010f010f
 8002fbc:	010f010f 	.word	0x010f010f
 8002fc0:	010f010f 	.word	0x010f010f
 8002fc4:	010f010f 	.word	0x010f010f
 8002fc8:	010f010f 	.word	0x010f010f
 8002fcc:	010f010f 	.word	0x010f010f
 8002fd0:	010f010f 	.word	0x010f010f
 8002fd4:	010f017f 	.word	0x010f017f
 8002fd8:	010f010f 	.word	0x010f010f
 8002fdc:	010f010f 	.word	0x010f010f
 8002fe0:	010f010f 	.word	0x010f010f
 8002fe4:	010f010f 	.word	0x010f010f
 8002fe8:	010f010f 	.word	0x010f010f
 8002fec:	010f010f 	.word	0x010f010f
 8002ff0:	010f010f 	.word	0x010f010f
 8002ff4:	010f010f 	.word	0x010f010f
 8002ff8:	017b010f 	.word	0x017b010f
 8002ffc:	01d20177 	.word	0x01d20177
 8003000:	0122010f 	.word	0x0122010f
 8003004:	010f0122 	.word	0x010f0122
 8003008:	010f010f 	.word	0x010f010f
 800300c:	010f010f 	.word	0x010f010f
 8003010:	010f010f 	.word	0x010f010f
 8003014:	010f010f 	.word	0x010f010f
 8003018:	010f010f 	.word	0x010f010f
 800301c:	010f010f 	.word	0x010f010f
 8003020:	0111      	.short	0x0111
 8003022:	2981      	cmp	r1, #129	@ 0x81
 8003024:	f200 808c 	bhi.w	8003140 <UI_GetReg+0x24c>
 8003028:	e8df f011 	tbh	[pc, r1, lsl #1]
 800302c:	00a600ed 	.word	0x00a600ed
 8003030:	00d900a2 	.word	0x00d900a2
 8003034:	00e900d2 	.word	0x00e900d2
 8003038:	00ce00e5 	.word	0x00ce00e5
 800303c:	00ca008c 	.word	0x00ca008c
 8003040:	01910195 	.word	0x01910195
 8003044:	009e0082 	.word	0x009e0082
 8003048:	00dd00e1 	.word	0x00dd00e1
 800304c:	00ac00bb 	.word	0x00ac00bb
 8003050:	008a008a 	.word	0x008a008a
 8003054:	0167017c 	.word	0x0167017c
 8003058:	008a008a 	.word	0x008a008a
 800305c:	0163008a 	.word	0x0163008a
 8003060:	015b015f 	.word	0x015b015f
 8003064:	008a008a 	.word	0x008a008a
 8003068:	00960154 	.word	0x00960154
 800306c:	008a0091 	.word	0x008a0091
 8003070:	01ad01b2 	.word	0x01ad01b2
 8003074:	01a301a8 	.word	0x01a301a8
 8003078:	0096019e 	.word	0x0096019e
 800307c:	008c0091 	.word	0x008c0091
 8003080:	01990082 	.word	0x01990082
 8003084:	0119011e 	.word	0x0119011e
 8003088:	008a01cb 	.word	0x008a01cb
 800308c:	01b9008a 	.word	0x01b9008a
 8003090:	010501d0 	.word	0x010501d0
 8003094:	01fc020f 	.word	0x01fc020f
 8003098:	008a01e9 	.word	0x008a01e9
 800309c:	008a008a 	.word	0x008a008a
 80030a0:	008a008a 	.word	0x008a008a
 80030a4:	008a008a 	.word	0x008a008a
 80030a8:	01e2008a 	.word	0x01e2008a
 80030ac:	0082014d 	.word	0x0082014d
 80030b0:	01230137 	.word	0x01230137
 80030b4:	008a008a 	.word	0x008a008a
 80030b8:	008a008a 	.word	0x008a008a
 80030bc:	008a008a 	.word	0x008a008a
 80030c0:	008a008a 	.word	0x008a008a
 80030c4:	008a008a 	.word	0x008a008a
 80030c8:	008a008a 	.word	0x008a008a
 80030cc:	008a008a 	.word	0x008a008a
 80030d0:	008a008a 	.word	0x008a008a
 80030d4:	008a008a 	.word	0x008a008a
 80030d8:	008a008a 	.word	0x008a008a
 80030dc:	008a008a 	.word	0x008a008a
 80030e0:	00f8008a 	.word	0x00f8008a
 80030e4:	008a008a 	.word	0x008a008a
 80030e8:	008a008a 	.word	0x008a008a
 80030ec:	008a008a 	.word	0x008a008a
 80030f0:	008a008a 	.word	0x008a008a
 80030f4:	008a008a 	.word	0x008a008a
 80030f8:	008a008a 	.word	0x008a008a
 80030fc:	008a008a 	.word	0x008a008a
 8003100:	008a008a 	.word	0x008a008a
 8003104:	008a008a 	.word	0x008a008a
 8003108:	00f000f4 	.word	0x00f000f4
 800310c:	008a014b 	.word	0x008a014b
 8003110:	009b009b 	.word	0x009b009b
 8003114:	008a008a 	.word	0x008a008a
 8003118:	008a008a 	.word	0x008a008a
 800311c:	008a008a 	.word	0x008a008a
 8003120:	008a008a 	.word	0x008a008a
 8003124:	008a008a 	.word	0x008a008a
 8003128:	008a008a 	.word	0x008a008a
 800312c:	008a008a 	.word	0x008a008a
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003130:	4628      	mov	r0, r5
 8003132:	f7fd fe31 	bl	8000d98 <MCI_GetIqdref>
 8003136:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 8003138:	b011      	add	sp, #68	@ 0x44
 800313a:	bd30      	pop	{r4, r5, pc}
        *success = false;
 800313c:	2300      	movs	r3, #0
 800313e:	7013      	strb	r3, [r2, #0]
      bRetVal = (uint32_t) 0;
 8003140:	2000      	movs	r0, #0
 8003142:	e7f9      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003144:	4628      	mov	r0, r5
 8003146:	f7fd fe27 	bl	8000d98 <MCI_GetIqdref>
 800314a:	b200      	sxth	r0, r0
    break;
 800314c:	e7f4      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).d;
 800314e:	4628      	mov	r0, r5
 8003150:	f7fd fe14 	bl	8000d7c <MCI_GetIqd>
 8003154:	1400      	asrs	r0, r0, #16
    break;
 8003156:	e7ef      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003158:	4628      	mov	r0, r5
 800315a:	f7fd fe0f 	bl	8000d7c <MCI_GetIqd>
 800315e:	b200      	sxth	r0, r0
    break;
 8003160:	e7ea      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = CTRBDID;
 8003162:	f242 701f 	movw	r0, #10015	@ 0x271f
  return bRetVal;
 8003166:	e7e7      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003168:	68a0      	ldr	r0, [r4, #8]
 800316a:	f003 fb0f 	bl	800678c <PID_GetKP>
    break;
 800316e:	e7e3      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003170:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003172:	f004 ffdd 	bl	8008130 <STM_GetState>
	break;
 8003176:	e7df      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003178:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 800317a:	b011      	add	sp, #68	@ 0x44
 800317c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003180:	f004 bfe4 	b.w	800814c <STM_GetFaultState>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003184:	6902      	ldr	r2, [r0, #16]
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800318a:	0f1a      	lsrs	r2, r3, #28
 800318c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800318e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003192:	f000 81a9 	beq.w	80034e8 <UI_GetReg+0x5f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003196:	2b09      	cmp	r3, #9
 8003198:	f000 819d 	beq.w	80034d6 <UI_GetReg+0x5e2>
      bRetVal = (int32_t)hIgain;
 800319c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	@ 0x3c
    break;
 80031a0:	e7ca      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80031a2:	6902      	ldr	r2, [r0, #16]
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031a8:	0f1a      	lsrs	r2, r3, #28
 80031aa:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ac:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b0:	f000 81a7 	beq.w	8003502 <UI_GetReg+0x60e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	f000 819b 	beq.w	80034f0 <UI_GetReg+0x5fc>
      bRetVal = (int32_t)hPgain;
 80031ba:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
    break;
 80031be:	e7bb      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80031c0:	6860      	ldr	r0, [r4, #4]
 80031c2:	f003 fae3 	bl	800678c <PID_GetKP>
    break;
 80031c6:	e7b7      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	f003 faef 	bl	80067ac <PID_GetKD>
    break;
 80031ce:	e7b3      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80031d0:	4628      	mov	r0, r5
 80031d2:	f7fd fdb3 	bl	8000d3c <MCI_GetMecSpeedRefUnit>
 80031d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031da:	0040      	lsls	r0, r0, #1
    break;
 80031dc:	e7ac      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80031de:	4628      	mov	r0, r5
 80031e0:	f7fd fd74 	bl	8000ccc <MCI_GetControlMode>
    break;
 80031e4:	e7a8      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80031e6:	68a0      	ldr	r0, [r4, #8]
 80031e8:	f003 fae0 	bl	80067ac <PID_GetKD>
    break;
 80031ec:	e7a4      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80031ee:	68a0      	ldr	r0, [r4, #8]
 80031f0:	f003 fad0 	bl	8006794 <PID_GetKI>
    break;
 80031f4:	e7a0      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	f003 facc 	bl	8006794 <PID_GetKI>
    break;
 80031fc:	e79c      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	f003 fac4 	bl	800678c <PID_GetKP>
    break;
 8003204:	e798      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003206:	f7ff fd13 	bl	8002c30 <UI_GetSelectedMC>
    break;
 800320a:	e795      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	f003 fac9 	bl	80067a4 <PID_GetKIDivisor>
    break;
 8003212:	e791      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	f003 fac3 	bl	80067a0 <PID_GetKPDivisor>
    break;
 800321a:	e78d      	b.n	8003138 <UI_GetReg+0x244>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800321c:	4628      	mov	r0, r5
 800321e:	f7fd fd55 	bl	8000ccc <MCI_GetControlMode>
 8003222:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003224:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003226:	f000 8147 	beq.w	80034b8 <UI_GetReg+0x5c4>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800322a:	f7fd fd87 	bl	8000d3c <MCI_GetMecSpeedRefUnit>
 800322e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003232:	0040      	lsls	r0, r0, #1
 8003234:	e780      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003236:	6902      	ldr	r2, [r0, #16]
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800323c:	0f1a      	lsrs	r2, r3, #28
 800323e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003240:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003244:	f000 812a 	beq.w	800349c <UI_GetReg+0x5a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003248:	2b09      	cmp	r3, #9
 800324a:	f47f af79 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 800324e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003250:	2800      	cmp	r0, #0
 8003252:	f43f af75 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8003256:	f005 f9e9 	bl	800862c <STO_PLL_GetEstimatedCurrent>
 800325a:	b200      	sxth	r0, r0
 800325c:	e76c      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800325e:	4628      	mov	r0, r5
 8003260:	f7fd fdb6 	bl	8000dd0 <MCI_GetValphabeta>
 8003264:	b200      	sxth	r0, r0
    break;
 8003266:	e767      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003268:	4628      	mov	r0, r5
 800326a:	f7fd fda3 	bl	8000db4 <MCI_GetVqd>
 800326e:	1400      	asrs	r0, r0, #16
    break;
 8003270:	e762      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003272:	6902      	ldr	r2, [r0, #16]
 8003274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003278:	0f1a      	lsrs	r2, r3, #28
 800327a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800327c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003280:	f000 8111 	beq.w	80034a6 <UI_GetReg+0x5b2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003284:	2b09      	cmp	r3, #9
 8003286:	f47f af5b 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 800328a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800328c:	2800      	cmp	r0, #0
 800328e:	f43f af57 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003292:	f005 fa13 	bl	80086bc <STO_PLL_GetObservedBemfLevel>
 8003296:	1400      	asrs	r0, r0, #16
 8003298:	e74e      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800329a:	6902      	ldr	r2, [r0, #16]
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032a0:	0f1a      	lsrs	r2, r3, #28
 80032a2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032a4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032a8:	f000 80e6 	beq.w	8003478 <UI_GetReg+0x584>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	f47f af47 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 80032b2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80032b4:	2800      	cmp	r0, #0
 80032b6:	f43f af43 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80032ba:	f005 f9fb 	bl	80086b4 <STO_PLL_GetEstimatedBemfLevel>
 80032be:	1400      	asrs	r0, r0, #16
 80032c0:	e73a      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)(MC_UID);
 80032c2:	4892      	ldr	r0, [pc, #584]	@ (800350c <UI_GetReg+0x618>)
 80032c4:	e738      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80032c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80032c8:	f004 fe76 	bl	8007fb8 <STC_GetMinAppNegativeMecSpeedUnit>
 80032cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032d0:	0040      	lsls	r0, r0, #1
    break;
 80032d2:	e731      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80032d4:	4628      	mov	r0, r5
 80032d6:	f7fd fd29 	bl	8000d2c <MCI_GetAvrgMecSpeedUnit>
 80032da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032de:	0040      	lsls	r0, r0, #1
    break;
 80032e0:	e72a      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80032e2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80032e4:	f003 f9ec 	bl	80066c0 <MPM_GetAvrgElMotorPowerW>
    break;
 80032e8:	e726      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80032ea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80032ec:	f003 fa2c 	bl	8006748 <NTC_GetAvTemp_C>
    break;
 80032f0:	e722      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80032f2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80032f4:	f003 f95a 	bl	80065ac <VBS_GetAvBusVoltage_V>
    break;
 80032f8:	e71e      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80032fa:	6902      	ldr	r2, [r0, #16]
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003300:	0f1a      	lsrs	r2, r3, #28
 8003302:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003304:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003308:	f000 80e0 	beq.w	80034cc <UI_GetReg+0x5d8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800330c:	2b09      	cmp	r3, #9
 800330e:	f47f af54 	bne.w	80031ba <UI_GetReg+0x2c6>
        pSPD = pMCT->pSpeedSensorAux;
 8003312:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003314:	2800      	cmp	r0, #0
 8003316:	f43f af50 	beq.w	80031ba <UI_GetReg+0x2c6>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800331a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800331c:	a90e      	add	r1, sp, #56	@ 0x38
 800331e:	f005 f9a3 	bl	8008668 <STO_GetPLLGains>
 8003322:	e74a      	b.n	80031ba <UI_GetReg+0x2c6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003324:	6902      	ldr	r2, [r0, #16]
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800332a:	0f1a      	lsrs	r2, r3, #28
 800332c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800332e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003332:	f000 80aa 	beq.w	800348a <UI_GetReg+0x596>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003336:	2b09      	cmp	r3, #9
 8003338:	f47f af30 	bne.w	800319c <UI_GetReg+0x2a8>
        pSPD = pMCT->pSpeedSensorAux;
 800333c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800333e:	2800      	cmp	r0, #0
 8003340:	f43f af2c 	beq.w	800319c <UI_GetReg+0x2a8>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003344:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003346:	a90e      	add	r1, sp, #56	@ 0x38
 8003348:	f005 f98e 	bl	8008668 <STO_GetPLLGains>
 800334c:	e726      	b.n	800319c <UI_GetReg+0x2a8>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 800334e:	6860      	ldr	r0, [r4, #4]
 8003350:	f003 fa2c 	bl	80067ac <PID_GetKD>
    break;
 8003354:	e6f0      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003356:	6860      	ldr	r0, [r4, #4]
 8003358:	f003 fa1c 	bl	8006794 <PID_GetKI>
    break;
 800335c:	e6ec      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetVqd(pMCI).q;
 800335e:	4628      	mov	r0, r5
 8003360:	f7fd fd28 	bl	8000db4 <MCI_GetVqd>
 8003364:	b200      	sxth	r0, r0
    break;
 8003366:	e6e7      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003368:	4628      	mov	r0, r5
 800336a:	f7fd fcf9 	bl	8000d60 <MCI_GetIalphabeta>
 800336e:	1400      	asrs	r0, r0, #16
    break;
 8003370:	e6e2      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003372:	4628      	mov	r0, r5
 8003374:	f7fd fcf4 	bl	8000d60 <MCI_GetIalphabeta>
 8003378:	b200      	sxth	r0, r0
    break;
 800337a:	e6dd      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).b;
 800337c:	4628      	mov	r0, r5
 800337e:	f7fd fce1 	bl	8000d44 <MCI_GetIab>
 8003382:	1400      	asrs	r0, r0, #16
    break;
 8003384:	e6d8      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).a;
 8003386:	4628      	mov	r0, r5
 8003388:	f7fd fcdc 	bl	8000d44 <MCI_GetIab>
 800338c:	b200      	sxth	r0, r0
    break;
 800338e:	e6d3      	b.n	8003138 <UI_GetReg+0x244>
      if (pMCT->pRevupCtrl)
 8003390:	6960      	ldr	r0, [r4, #20]
 8003392:	2800      	cmp	r0, #0
 8003394:	f43f aed4 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003398:	f004 fcf2 	bl	8007d80 <RUC_GetNumberOfPhases>
 800339c:	e6cc      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800339e:	6902      	ldr	r2, [r0, #16]
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a4:	0f1a      	lsrs	r2, r3, #28
 80033a6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ac:	d072      	beq.n	8003494 <UI_GetReg+0x5a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	f47f aec6 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 80033b4:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80033b6:	2800      	cmp	r0, #0
 80033b8:	f43f aec2 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = SPD_GetElAngle(pSPD);
 80033bc:	f004 fce4 	bl	8007d88 <SPD_GetElAngle>
 80033c0:	e6ba      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80033c2:	4628      	mov	r0, r5
 80033c4:	f7fd fd04 	bl	8000dd0 <MCI_GetValphabeta>
 80033c8:	1400      	asrs	r0, r0, #16
    break;
 80033ca:	e6b5      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033cc:	6902      	ldr	r2, [r0, #16]
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033d2:	0f1a      	lsrs	r2, r3, #28
 80033d4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033d6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033da:	d052      	beq.n	8003482 <UI_GetReg+0x58e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033dc:	2b09      	cmp	r3, #9
 80033de:	f47f aeaf 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 80033e2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80033e4:	2800      	cmp	r0, #0
 80033e6:	f43f aeab 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = SPD_GetS16Speed(pSPD);
 80033ea:	f004 fd0f 	bl	8007e0c <SPD_GetS16Speed>
 80033ee:	e6a3      	b.n	8003138 <UI_GetReg+0x244>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80033f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80033f2:	f004 fddf 	bl	8007fb4 <STC_GetMaxAppPositiveMecSpeedUnit>
 80033f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033fa:	0040      	lsls	r0, r0, #1
    break;
 80033fc:	e69c      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033fe:	6902      	ldr	r2, [r0, #16]
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003404:	0f1a      	lsrs	r2, r3, #28
 8003406:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003408:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800340c:	d030      	beq.n	8003470 <UI_GetReg+0x57c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800340e:	2b09      	cmp	r3, #9
 8003410:	f47f ae96 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 8003414:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003416:	2800      	cmp	r0, #0
 8003418:	f43f ae92 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 800341c:	f005 f8fa 	bl	8008614 <STO_PLL_GetEstimatedBemf>
 8003420:	1400      	asrs	r0, r0, #16
 8003422:	e689      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003424:	6902      	ldr	r2, [r0, #16]
 8003426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800342a:	0f1a      	lsrs	r2, r3, #28
 800342c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800342e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003432:	d047      	beq.n	80034c4 <UI_GetReg+0x5d0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003434:	2b09      	cmp	r3, #9
 8003436:	f47f ae83 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD =  pMCT->pSpeedSensorAux;
 800343a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800343c:	2800      	cmp	r0, #0
 800343e:	f43f ae7f 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8003442:	f005 f8e7 	bl	8008614 <STO_PLL_GetEstimatedBemf>
 8003446:	b200      	sxth	r0, r0
 8003448:	e676      	b.n	8003138 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800344a:	6902      	ldr	r2, [r0, #16]
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003450:	0f1a      	lsrs	r2, r3, #28
 8003452:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003454:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003458:	d02a      	beq.n	80034b0 <UI_GetReg+0x5bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800345a:	2b09      	cmp	r3, #9
 800345c:	f47f ae70 	bne.w	8003140 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 8003460:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003462:	2800      	cmp	r0, #0
 8003464:	f43f ae6c 	beq.w	8003140 <UI_GetReg+0x24c>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8003468:	f005 f8e0 	bl	800862c <STO_PLL_GetEstimatedCurrent>
 800346c:	1400      	asrs	r0, r0, #16
 800346e:	e663      	b.n	8003138 <UI_GetReg+0x244>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003470:	2b09      	cmp	r3, #9
 8003472:	d0cf      	beq.n	8003414 <UI_GetReg+0x520>
       pSPD = pMCT->pSpeedSensorMain;
 8003474:	69a0      	ldr	r0, [r4, #24]
 8003476:	e7ce      	b.n	8003416 <UI_GetReg+0x522>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003478:	2b09      	cmp	r3, #9
 800347a:	f43f af1a 	beq.w	80032b2 <UI_GetReg+0x3be>
        pSPD = pMCT->pSpeedSensorMain;
 800347e:	69a0      	ldr	r0, [r4, #24]
 8003480:	e718      	b.n	80032b4 <UI_GetReg+0x3c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003482:	2b09      	cmp	r3, #9
 8003484:	d0ad      	beq.n	80033e2 <UI_GetReg+0x4ee>
        pSPD = pMCT->pSpeedSensorMain;
 8003486:	69a0      	ldr	r0, [r4, #24]
 8003488:	e7ac      	b.n	80033e4 <UI_GetReg+0x4f0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800348a:	2b09      	cmp	r3, #9
 800348c:	f43f af56 	beq.w	800333c <UI_GetReg+0x448>
        pSPD = pMCT->pSpeedSensorMain;
 8003490:	69a0      	ldr	r0, [r4, #24]
 8003492:	e754      	b.n	800333e <UI_GetReg+0x44a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003494:	2b09      	cmp	r3, #9
 8003496:	d08d      	beq.n	80033b4 <UI_GetReg+0x4c0>
        pSPD = pMCT->pSpeedSensorMain;
 8003498:	69a0      	ldr	r0, [r4, #24]
 800349a:	e78c      	b.n	80033b6 <UI_GetReg+0x4c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800349c:	2b09      	cmp	r3, #9
 800349e:	f43f aed6 	beq.w	800324e <UI_GetReg+0x35a>
        pSPD = pMCT->pSpeedSensorMain;
 80034a2:	69a0      	ldr	r0, [r4, #24]
 80034a4:	e6d4      	b.n	8003250 <UI_GetReg+0x35c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	f43f aeef 	beq.w	800328a <UI_GetReg+0x396>
        pSPD = pMCT->pSpeedSensorMain;
 80034ac:	69a0      	ldr	r0, [r4, #24]
 80034ae:	e6ed      	b.n	800328c <UI_GetReg+0x398>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034b0:	2b09      	cmp	r3, #9
 80034b2:	d0d5      	beq.n	8003460 <UI_GetReg+0x56c>
        pSPD = pMCT->pSpeedSensorMain;
 80034b4:	69a0      	ldr	r0, [r4, #24]
 80034b6:	e7d4      	b.n	8003462 <UI_GetReg+0x56e>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80034b8:	f7fd fc2c 	bl	8000d14 <MCI_GetLastRampFinalSpeed>
 80034bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034c0:	0040      	lsls	r0, r0, #1
 80034c2:	e639      	b.n	8003138 <UI_GetReg+0x244>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	d0b8      	beq.n	800343a <UI_GetReg+0x546>
        pSPD = pMCT->pSpeedSensorMain;
 80034c8:	69a0      	ldr	r0, [r4, #24]
 80034ca:	e7b7      	b.n	800343c <UI_GetReg+0x548>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	f43f af20 	beq.w	8003312 <UI_GetReg+0x41e>
        pSPD = pMCT->pSpeedSensorMain;
 80034d2:	69a0      	ldr	r0, [r4, #24]
 80034d4:	e71e      	b.n	8003314 <UI_GetReg+0x420>
        pSPD = pMCT->pSpeedSensorAux;
 80034d6:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80034d8:	2800      	cmp	r0, #0
 80034da:	f43f ae5f 	beq.w	800319c <UI_GetReg+0x2a8>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80034de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80034e0:	a90e      	add	r1, sp, #56	@ 0x38
 80034e2:	f005 f8b5 	bl	8008650 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 80034e6:	e659      	b.n	800319c <UI_GetReg+0x2a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d0f4      	beq.n	80034d6 <UI_GetReg+0x5e2>
        pSPD = pMCT->pSpeedSensorMain;
 80034ec:	69a0      	ldr	r0, [r4, #24]
 80034ee:	e7f3      	b.n	80034d8 <UI_GetReg+0x5e4>
        pSPD = pMCT->pSpeedSensorAux;
 80034f0:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80034f2:	2800      	cmp	r0, #0
 80034f4:	f43f ae61 	beq.w	80031ba <UI_GetReg+0x2c6>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80034f8:	aa0f      	add	r2, sp, #60	@ 0x3c
 80034fa:	a90e      	add	r1, sp, #56	@ 0x38
 80034fc:	f005 f8a8 	bl	8008650 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 8003500:	e65b      	b.n	80031ba <UI_GetReg+0x2c6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003502:	2b09      	cmp	r3, #9
 8003504:	d0f4      	beq.n	80034f0 <UI_GetReg+0x5fc>
        pSPD = pMCT->pSpeedSensorMain;
 8003506:	69a0      	ldr	r0, [r4, #24]
 8003508:	e7f3      	b.n	80034f2 <UI_GetReg+0x5fe>
 800350a:	bf00      	nop
 800350c:	34a6847a 	.word	0x34a6847a

08003510 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003510:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003512:	6883      	ldr	r3, [r0, #8]
 8003514:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8003516:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003518:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 800351c:	290d      	cmp	r1, #13
 800351e:	d811      	bhi.n	8003544 <UI_ExecCmd+0x34>
 8003520:	e8df f001 	tbb	[pc, r1]
 8003524:	0e160b12 	.word	0x0e160b12
 8003528:	231f070e 	.word	0x231f070e
 800352c:	10101027 	.word	0x10101027
 8003530:	0b10      	.short	0x0b10
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003532:	4620      	mov	r0, r4
 8003534:	f7fd fbc6 	bl	8000cc4 <MCI_GetSTMState>
 8003538:	b130      	cbz	r0, 8003548 <UI_ExecCmd+0x38>
      MCI_StopMotor(pMCI);
 800353a:	4620      	mov	r0, r4
 800353c:	f7fd fb7a 	bl	8000c34 <MCI_StopMotor>
  bool retVal = true;
 8003540:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8003542:	bd10      	pop	{r4, pc}
    retVal = false;
 8003544:	2000      	movs	r0, #0
}
 8003546:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003548:	4620      	mov	r0, r4
 800354a:	f7fd fb69 	bl	8000c20 <MCI_StartMotor>
 800354e:	e7f7      	b.n	8003540 <UI_ExecCmd+0x30>
      if (MCI_GetSTMState(pMCI) == RUN)
 8003550:	4620      	mov	r0, r4
 8003552:	f7fd fbb7 	bl	8000cc4 <MCI_GetSTMState>
 8003556:	2806      	cmp	r0, #6
 8003558:	d1f2      	bne.n	8003540 <UI_ExecCmd+0x30>
        MCI_StopRamp(pMCI);
 800355a:	4620      	mov	r0, r4
 800355c:	f7fd fbe2 	bl	8000d24 <MCI_StopRamp>
 8003560:	e7ee      	b.n	8003540 <UI_ExecCmd+0x30>
      MCI_FaultAcknowledged(pMCI);
 8003562:	4620      	mov	r0, r4
 8003564:	f7fd fb6a 	bl	8000c3c <MCI_FaultAcknowledged>
    break;
 8003568:	e7ea      	b.n	8003540 <UI_ExecCmd+0x30>
      MCI_EncoderAlign(pMCI);
 800356a:	4620      	mov	r0, r4
 800356c:	f7fd fb6a 	bl	8000c44 <MCI_EncoderAlign>
    break;
 8003570:	e7e6      	b.n	8003540 <UI_ExecCmd+0x30>
      MCI_Clear_Iqdref(pMCI);
 8003572:	4620      	mov	r0, r4
 8003574:	f7fd fc48 	bl	8000e08 <MCI_Clear_Iqdref>
    break;
 8003578:	e7e2      	b.n	8003540 <UI_ExecCmd+0x30>
 800357a:	bf00      	nop

0800357c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800357c:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003580:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003584:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003586:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800358a:	fb83 c301 	smull	ip, r3, r3, r1
 800358e:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003592:	b209      	sxth	r1, r1
 8003594:	f7fd fb26 	bl	8000be4 <MCI_ExecSpeedRamp>
  return true;
}
 8003598:	2001      	movs	r0, #1
 800359a:	bd08      	pop	{r3, pc}
 800359c:	2aaaaaab 	.word	0x2aaaaaab

080035a0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80035a0:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80035a2:	6883      	ldr	r3, [r0, #8]
 80035a4:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80035a8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80035ac:	f7fd fb24 	bl	8000bf8 <MCI_ExecTorqueRamp>
  return true;
}
 80035b0:	2001      	movs	r0, #1
 80035b2:	bd08      	pop	{r3, pc}

080035b4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	4617      	mov	r7, r2
 80035b8:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80035ba:	7d02      	ldrb	r2, [r0, #20]
 80035bc:	68c3      	ldr	r3, [r0, #12]
 80035be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c2:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 80035c4:	b18c      	cbz	r4, 80035ea <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80035c6:	4620      	mov	r0, r4
 80035c8:	460d      	mov	r5, r1
 80035ca:	f004 fbc3 	bl	8007d54 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80035ce:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80035d0:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80035d2:	4620      	mov	r0, r4
 80035d4:	f004 fbc4 	bl	8007d60 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80035d8:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80035da:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80035dc:	4620      	mov	r0, r4
 80035de:	f004 fbc7 	bl	8007d70 <RUC_GetPhaseFinalTorque>
 80035e2:	9b06      	ldr	r3, [sp, #24]
 80035e4:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80035e6:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80035e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80035ea:	4620      	mov	r0, r4
}
 80035ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ee:	bf00      	nop

080035f0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80035f4:	7d05      	ldrb	r5, [r0, #20]
 80035f6:	68c3      	ldr	r3, [r0, #12]
{
 80035f8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80035fc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003600:	695d      	ldr	r5, [r3, #20]
{
 8003602:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003604:	4628      	mov	r0, r5
 8003606:	f004 fb93 	bl	8007d30 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800360a:	4632      	mov	r2, r6
 800360c:	4621      	mov	r1, r4
 800360e:	4628      	mov	r0, r5
 8003610:	f004 fb94 	bl	8007d3c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003614:	4628      	mov	r0, r5
 8003616:	463a      	mov	r2, r7
 8003618:	4621      	mov	r1, r4
 800361a:	f004 fb95 	bl	8007d48 <RUC_SetPhaseFinalTorque>
  return true;
}
 800361e:	2001      	movs	r0, #1
 8003620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003622:	bf00      	nop

08003624 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8003624:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003626:	f890 c014 	ldrb.w	ip, [r0, #20]
 800362a:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 800362c:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003630:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8003634:	9901      	ldr	r1, [sp, #4]
 8003636:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 800363a:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 800363c:	f7fd bae6 	b.w	8000c0c <MCI_SetCurrentReferences>

08003640 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003640:	2000      	movs	r0, #0
 8003642:	4770      	bx	lr

08003644 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003644:	4a03      	ldr	r2, [pc, #12]	@ (8003654 <SystemInit+0x10>)
 8003646:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800364a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800364e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003658:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800365a:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <HAL_InitTick+0x40>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b90b      	cbnz	r3, 8003664 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003660:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003662:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003664:	490d      	ldr	r1, [pc, #52]	@ (800369c <HAL_InitTick+0x44>)
 8003666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800366a:	4605      	mov	r5, r0
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	6808      	ldr	r0, [r1, #0]
 8003672:	fbb0 f0f3 	udiv	r0, r0, r3
 8003676:	f000 ffef 	bl	8004658 <HAL_SYSTICK_Config>
 800367a:	4604      	mov	r4, r0
 800367c:	2800      	cmp	r0, #0
 800367e:	d1ef      	bne.n	8003660 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003680:	2d0f      	cmp	r5, #15
 8003682:	d8ed      	bhi.n	8003660 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003684:	4602      	mov	r2, r0
 8003686:	4629      	mov	r1, r5
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f000 ff9a 	bl	80045c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003690:	4b03      	ldr	r3, [pc, #12]	@ (80036a0 <HAL_InitTick+0x48>)
 8003692:	4620      	mov	r0, r4
 8003694:	601d      	str	r5, [r3, #0]
}
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	20000698 	.word	0x20000698
 800369c:	20000694 	.word	0x20000694
 80036a0:	2000069c 	.word	0x2000069c

080036a4 <HAL_Init>:
{
 80036a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a6:	2003      	movs	r0, #3
 80036a8:	f000 ff7a 	bl	80045a0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036ac:	2004      	movs	r0, #4
 80036ae:	f7ff ffd3 	bl	8003658 <HAL_InitTick>
 80036b2:	b110      	cbz	r0, 80036ba <HAL_Init+0x16>
    status = HAL_ERROR;
 80036b4:	2401      	movs	r4, #1
}
 80036b6:	4620      	mov	r0, r4
 80036b8:	bd10      	pop	{r4, pc}
 80036ba:	4604      	mov	r4, r0
    HAL_MspInit();
 80036bc:	f7fe fed4 	bl	8002468 <HAL_MspInit>
}
 80036c0:	4620      	mov	r0, r4
 80036c2:	bd10      	pop	{r4, pc}

080036c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80036c4:	4a03      	ldr	r2, [pc, #12]	@ (80036d4 <HAL_IncTick+0x10>)
 80036c6:	4904      	ldr	r1, [pc, #16]	@ (80036d8 <HAL_IncTick+0x14>)
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	6809      	ldr	r1, [r1, #0]
 80036cc:	440b      	add	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000be0 	.word	0x20000be0
 80036d8:	20000698 	.word	0x20000698

080036dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036dc:	4b01      	ldr	r3, [pc, #4]	@ (80036e4 <HAL_GetTick+0x8>)
 80036de:	6818      	ldr	r0, [r3, #0]
}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000be0 	.word	0x20000be0

080036e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fff6 	bl	80036dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80036f2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80036f4:	d002      	beq.n	80036fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <HAL_Delay+0x20>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036fc:	f7ff ffee 	bl	80036dc <HAL_GetTick>
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	42a0      	cmp	r0, r4
 8003704:	d3fa      	bcc.n	80036fc <HAL_Delay+0x14>
  {
  }
}
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	20000698 	.word	0x20000698

0800370c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800370c:	b530      	push	{r4, r5, lr}
 800370e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003710:	2300      	movs	r3, #0
 8003712:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003714:	2800      	cmp	r0, #0
 8003716:	f000 808c 	beq.w	8003832 <HAL_ADC_Init+0x126>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800371a:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 800371c:	4604      	mov	r4, r0
 800371e:	2d00      	cmp	r5, #0
 8003720:	f000 808c 	beq.w	800383c <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003724:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003726:	6893      	ldr	r3, [r2, #8]
 8003728:	0098      	lsls	r0, r3, #2
 800372a:	d505      	bpl.n	8003738 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800372c:	6893      	ldr	r3, [r2, #8]
 800372e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003732:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003736:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003738:	6893      	ldr	r3, [r2, #8]
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	d419      	bmi.n	8003772 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373e:	4b6e      	ldr	r3, [pc, #440]	@ (80038f8 <HAL_ADC_Init+0x1ec>)
 8003740:	486e      	ldr	r0, [pc, #440]	@ (80038fc <HAL_ADC_Init+0x1f0>)
 8003742:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003744:	6891      	ldr	r1, [r2, #8]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	fba0 0303 	umull	r0, r3, r0, r3
 800374c:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003756:	3301      	adds	r3, #1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800375e:	6091      	str	r1, [r2, #8]
 8003760:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003762:	9b01      	ldr	r3, [sp, #4]
 8003764:	b12b      	cbz	r3, 8003772 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003766:	9b01      	ldr	r3, [sp, #4]
 8003768:	3b01      	subs	r3, #1
 800376a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003772:	6893      	ldr	r3, [r2, #8]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	d45f      	bmi.n	8003838 <HAL_ADC_Init+0x12c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003778:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800377a:	f043 0310 	orr.w	r3, r3, #16
 800377e:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003780:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003782:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003784:	4303      	orrs	r3, r0
 8003786:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003788:	6893      	ldr	r3, [r2, #8]
 800378a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800378e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003790:	d14b      	bne.n	800382a <HAL_ADC_Init+0x11e>
 8003792:	06dd      	lsls	r5, r3, #27
 8003794:	d449      	bmi.n	800382a <HAL_ADC_Init+0x11e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003796:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003798:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037a2:	6893      	ldr	r3, [r2, #8]
 80037a4:	07d9      	lsls	r1, r3, #31
 80037a6:	d409      	bmi.n	80037bc <HAL_ADC_Init+0xb0>
 80037a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f013 0f01 	tst.w	r3, #1
 80037b2:	4b53      	ldr	r3, [pc, #332]	@ (8003900 <HAL_ADC_Init+0x1f4>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_Init+0xb0>
 80037b8:	07db      	lsls	r3, r3, #31
 80037ba:	d576      	bpl.n	80038aa <HAL_ADC_Init+0x19e>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80037bc:	68e5      	ldr	r5, [r4, #12]
 80037be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037c0:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                hadc->Init.DataAlign                                                   |
 80037c4:	432b      	orrs	r3, r5
 80037c6:	68a5      	ldr	r5, [r4, #8]
 80037c8:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037ca:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037cc:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80037ce:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037d6:	d05b      	beq.n	8003890 <HAL_ADC_Init+0x184>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80037da:	b121      	cbz	r1, 80037e6 <HAL_ADC_Init+0xda>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80037dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037de:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037e2:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037e4:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037e6:	68d5      	ldr	r5, [r2, #12]
 80037e8:	4946      	ldr	r1, [pc, #280]	@ (8003904 <HAL_ADC_Init+0x1f8>)
 80037ea:	4029      	ands	r1, r5
 80037ec:	4319      	orrs	r1, r3
 80037ee:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80037f0:	6913      	ldr	r3, [r2, #16]
 80037f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037f4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037fc:	6891      	ldr	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037fe:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003800:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	430b      	orrs	r3, r1
 800380a:	d01d      	beq.n	8003848 <HAL_ADC_Init+0x13c>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800380c:	6963      	ldr	r3, [r4, #20]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d043      	beq.n	800389a <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003812:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003814:	f023 030f 	bic.w	r3, r3, #15
 8003818:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800381a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003826:	b003      	add	sp, #12
 8003828:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800382c:	f043 0310 	orr.w	r3, r3, #16
 8003830:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003832:	2001      	movs	r0, #1
}
 8003834:	b003      	add	sp, #12
 8003836:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	2000      	movs	r0, #0
 800383a:	e7a5      	b.n	8003788 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 800383c:	f7fe fe34 	bl	80024a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003840:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003842:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8003846:	e76d      	b.n	8003724 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003848:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800384a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800384e:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003850:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003854:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003856:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800385a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800385e:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003860:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003862:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003864:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003866:	bb41      	cbnz	r1, 80038ba <HAL_ADC_Init+0x1ae>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800386e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003872:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003876:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800387a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800387e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003882:	2b01      	cmp	r3, #1
 8003884:	d026      	beq.n	80038d4 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003886:	6913      	ldr	r3, [r2, #16]
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	6113      	str	r3, [r2, #16]
 800388e:	e7bd      	b.n	800380c <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003890:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003892:	3901      	subs	r1, #1
 8003894:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003898:	e79e      	b.n	80037d8 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800389a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800389c:	6a23      	ldr	r3, [r4, #32]
 800389e:	f021 010f 	bic.w	r1, r1, #15
 80038a2:	3b01      	subs	r3, #1
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a8:	e7b7      	b.n	800381a <HAL_ADC_Init+0x10e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038aa:	4917      	ldr	r1, [pc, #92]	@ (8003908 <HAL_ADC_Init+0x1fc>)
 80038ac:	6865      	ldr	r5, [r4, #4]
 80038ae:	688b      	ldr	r3, [r1, #8]
 80038b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80038b4:	432b      	orrs	r3, r5
 80038b6:	608b      	str	r3, [r1, #8]
}
 80038b8:	e780      	b.n	80037bc <HAL_ADC_Init+0xb0>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038be:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80038c0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80038c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038cc:	430b      	orrs	r3, r1
 80038ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80038d2:	e7d4      	b.n	800387e <HAL_ADC_Init+0x172>
        MODIFY_REG(hadc->Instance->CFGR2,
 80038d4:	6911      	ldr	r1, [r2, #16]
 80038d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038d8:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80038da:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 80038de:	f021 0104 	bic.w	r1, r1, #4
 80038e2:	432b      	orrs	r3, r5
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80038ec:	430b      	orrs	r3, r1
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6113      	str	r3, [r2, #16]
 80038f4:	e78a      	b.n	800380c <HAL_ADC_Init+0x100>
 80038f6:	bf00      	nop
 80038f8:	20000694 	.word	0x20000694
 80038fc:	053e2d63 	.word	0x053e2d63
 8003900:	50000100 	.word	0x50000100
 8003904:	fff04007 	.word	0xfff04007
 8003908:	50000300 	.word	0x50000300

0800390c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003910:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8003914:	b082      	sub	sp, #8
 8003916:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003918:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003920:	f000 812b 	beq.w	8003b7a <HAL_ADC_ConfigChannel+0x26e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003924:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003926:	2001      	movs	r0, #1
 8003928:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800392c:	6894      	ldr	r4, [r2, #8]
 800392e:	0764      	lsls	r4, r4, #29
 8003930:	d44f      	bmi.n	80039d2 <HAL_ADC_ConfigChannel+0xc6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003932:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003934:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8003938:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800393c:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8003940:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003942:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8003946:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800394a:	f854 500e 	ldr.w	r5, [r4, lr]
 800394e:	261f      	movs	r6, #31
 8003950:	fa00 f00c 	lsl.w	r0, r0, ip
 8003954:	fa06 fc0c 	lsl.w	ip, r6, ip
 8003958:	ea25 0c0c 	bic.w	ip, r5, ip
 800395c:	ea40 000c 	orr.w	r0, r0, ip
 8003960:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003964:	6890      	ldr	r0, [r2, #8]
 8003966:	0747      	lsls	r7, r0, #29
 8003968:	d53d      	bpl.n	80039e6 <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800396a:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800396c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800396e:	6894      	ldr	r4, [r2, #8]
 8003970:	07e5      	lsls	r5, r4, #31
 8003972:	d40c      	bmi.n	800398e <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003974:	4dc0      	ldr	r5, [pc, #768]	@ (8003c78 <HAL_ADC_ConfigChannel+0x36c>)
 8003976:	68ce      	ldr	r6, [r1, #12]
 8003978:	42ae      	cmp	r6, r5
    SET_BIT(ADCx->DIFSEL,
 800397a:	f3c0 0412 	ubfx	r4, r0, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800397e:	f000 80a7 	beq.w	8003ad0 <HAL_ADC_ConfigChannel+0x1c4>
    CLEAR_BIT(ADCx->DIFSEL,
 8003982:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8003986:	ea21 0104 	bic.w	r1, r1, r4
 800398a:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800398e:	49bb      	ldr	r1, [pc, #748]	@ (8003c7c <HAL_ADC_ConfigChannel+0x370>)
 8003990:	4208      	tst	r0, r1
 8003992:	d01c      	beq.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003994:	4cba      	ldr	r4, [pc, #744]	@ (8003c80 <HAL_ADC_ConfigChannel+0x374>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003996:	4dbb      	ldr	r5, [pc, #748]	@ (8003c84 <HAL_ADC_ConfigChannel+0x378>)
 8003998:	68a1      	ldr	r1, [r4, #8]
 800399a:	42a8      	cmp	r0, r5
 800399c:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 80039a0:	d073      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x17e>
 80039a2:	4db9      	ldr	r5, [pc, #740]	@ (8003c88 <HAL_ADC_ConfigChannel+0x37c>)
 80039a4:	42a8      	cmp	r0, r5
 80039a6:	d070      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x17e>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a8:	4db8      	ldr	r5, [pc, #736]	@ (8003c8c <HAL_ADC_ConfigChannel+0x380>)
 80039aa:	42a8      	cmp	r0, r5
 80039ac:	f000 80e9 	beq.w	8003b82 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039b0:	4db7      	ldr	r5, [pc, #732]	@ (8003c90 <HAL_ADC_ConfigChannel+0x384>)
 80039b2:	42a8      	cmp	r0, r5
 80039b4:	d10b      	bne.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039b6:	0249      	lsls	r1, r1, #9
 80039b8:	d409      	bmi.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039ba:	49b6      	ldr	r1, [pc, #728]	@ (8003c94 <HAL_ADC_ConfigChannel+0x388>)
 80039bc:	428a      	cmp	r2, r1
 80039be:	d006      	beq.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039c0:	68a2      	ldr	r2, [r4, #8]
 80039c2:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80039c6:	4332      	orrs	r2, r6
 80039c8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80039cc:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ce:	2000      	movs	r0, #0
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039d4:	f042 0220 	orr.w	r2, r2, #32
 80039d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80039e0:	b002      	add	sp, #8
 80039e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039e6:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039e8:	6808      	ldr	r0, [r1, #0]
 80039ea:	0726      	lsls	r6, r4, #28
 80039ec:	d4bf      	bmi.n	800396e <HAL_ADC_ConfigChannel+0x62>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039ee:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 80039f0:	f3c0 5604 	ubfx	r6, r0, #20, #5
 80039f4:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039f6:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 80039f8:	40b4      	lsls	r4, r6
 80039fa:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039fe:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003a02:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a06:	f102 0714 	add.w	r7, r2, #20
 8003a0a:	f000 8105 	beq.w	8003c18 <HAL_ADC_ConfigChannel+0x30c>
  MODIFY_REG(*preg,
 8003a0e:	40b5      	lsls	r5, r6
 8003a10:	583e      	ldr	r6, [r7, r0]
 8003a12:	4034      	ands	r4, r6
 8003a14:	432c      	orrs	r4, r5
 8003a16:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a18:	6950      	ldr	r0, [r2, #20]
 8003a1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a1e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a20:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a24:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a26:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a28:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a2a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a2e:	4684      	mov	ip, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a30:	f000 80ca 	beq.w	8003bc8 <HAL_ADC_ConfigChannel+0x2bc>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a34:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8003a38:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8003a3a:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8003a3e:	40b5      	lsls	r5, r6
 8003a40:	4e95      	ldr	r6, [pc, #596]	@ (8003c98 <HAL_ADC_ConfigChannel+0x38c>)
 8003a42:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003a46:	ea0c 0606 	and.w	r6, ip, r6
 8003a4a:	4306      	orrs	r6, r0
 8003a4c:	4335      	orrs	r5, r6
 8003a4e:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8003a52:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a56:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8003a58:	698e      	ldr	r6, [r1, #24]
 8003a5a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003a5e:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8003a62:	4330      	orrs	r0, r6
 8003a64:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a68:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a6a:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8003a6c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8003a70:	f1a5 0501 	sub.w	r5, r5, #1
 8003a74:	fab5 f585 	clz	r5, r5
 8003a78:	096d      	lsrs	r5, r5, #5
 8003a7a:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8003a7e:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8003a82:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a86:	6808      	ldr	r0, [r1, #0]
}
 8003a88:	e771      	b.n	800396e <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a8a:	020c      	lsls	r4, r1, #8
 8003a8c:	d49f      	bmi.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a8e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003a92:	d19c      	bne.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a94:	497a      	ldr	r1, [pc, #488]	@ (8003c80 <HAL_ADC_ConfigChannel+0x374>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a96:	4881      	ldr	r0, [pc, #516]	@ (8003c9c <HAL_ADC_ConfigChannel+0x390>)
 8003a98:	688a      	ldr	r2, [r1, #8]
 8003a9a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003a9e:	4332      	orrs	r2, r6
 8003aa0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003aa4:	608a      	str	r2, [r1, #8]
 8003aa6:	6802      	ldr	r2, [r0, #0]
 8003aa8:	497d      	ldr	r1, [pc, #500]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x394>)
 8003aaa:	0992      	lsrs	r2, r2, #6
 8003aac:	fba1 1202 	umull	r1, r2, r1, r2
 8003ab0:	0992      	lsrs	r2, r2, #6
 8003ab2:	3201      	adds	r2, #1
 8003ab4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003abc:	9a01      	ldr	r2, [sp, #4]
 8003abe:	2a00      	cmp	r2, #0
 8003ac0:	d085      	beq.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 8003ac2:	9a01      	ldr	r2, [sp, #4]
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003ac8:	9a01      	ldr	r2, [sp, #4]
 8003aca:	2a00      	cmp	r2, #0
 8003acc:	d1f9      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x1b6>
 8003ace:	e77e      	b.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
    SET_BIT(ADCx->DIFSEL,
 8003ad0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8003ad4:	4325      	orrs	r5, r4
 8003ad6:	f8c2 50b0 	str.w	r5, [r2, #176]	@ 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	d060      	beq.n	8003ba0 <HAL_ADC_ConfigChannel+0x294>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ae2:	2c00      	cmp	r4, #0
 8003ae4:	f000 80a0 	beq.w	8003c28 <HAL_ADC_ConfigChannel+0x31c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003ae8:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aec:	3401      	adds	r4, #1
 8003aee:	f004 041f 	and.w	r4, r4, #31
 8003af2:	2c09      	cmp	r4, #9
 8003af4:	f240 8098 	bls.w	8003c28 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003afc:	2c00      	cmp	r4, #0
 8003afe:	f000 8147 	beq.w	8003d90 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8003b02:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b06:	3401      	adds	r4, #1
 8003b08:	06a4      	lsls	r4, r4, #26
 8003b0a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	f000 8141 	beq.w	8003d9a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8003b18:	fab5 f585 	clz	r5, r5
 8003b1c:	3501      	adds	r5, #1
 8003b1e:	f005 051f 	and.w	r5, r5, #31
 8003b22:	2601      	movs	r6, #1
 8003b24:	fa06 f505 	lsl.w	r5, r6, r5
 8003b28:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	f000 8131 	beq.w	8003d96 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003b34:	fab0 f080 	clz	r0, r0
 8003b38:	1c45      	adds	r5, r0, #1
 8003b3a:	f005 051f 	and.w	r5, r5, #31
 8003b3e:	2003      	movs	r0, #3
 8003b40:	f06f 061d 	mvn.w	r6, #29
 8003b44:	fb10 6005 	smlabb	r0, r0, r5, r6
 8003b48:	0500      	lsls	r0, r0, #20
 8003b4a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4e:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b50:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8003b52:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b54:	f005 0504 	and.w	r5, r5, #4
 8003b58:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8003b5c:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003b60:	fa04 f700 	lsl.w	r7, r4, r0
 8003b64:	f04f 0c07 	mov.w	ip, #7
 8003b68:	5974      	ldr	r4, [r6, r5]
 8003b6a:	fa0c f000 	lsl.w	r0, ip, r0
 8003b6e:	ea24 0000 	bic.w	r0, r4, r0
 8003b72:	4338      	orrs	r0, r7
 8003b74:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b76:	6808      	ldr	r0, [r1, #0]
}
 8003b78:	e709      	b.n	800398e <HAL_ADC_ConfigChannel+0x82>
  __HAL_LOCK(hadc);
 8003b7a:	2002      	movs	r0, #2
}
 8003b7c:	b002      	add	sp, #8
 8003b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b82:	01c8      	lsls	r0, r1, #7
 8003b84:	f53f af23 	bmi.w	80039ce <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b88:	4942      	ldr	r1, [pc, #264]	@ (8003c94 <HAL_ADC_ConfigChannel+0x388>)
 8003b8a:	428a      	cmp	r2, r1
 8003b8c:	f43f af1f 	beq.w	80039ce <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b90:	68a2      	ldr	r2, [r4, #8]
 8003b92:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b96:	4332      	orrs	r2, r6
 8003b98:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003b9c:	60a2      	str	r2, [r4, #8]
}
 8003b9e:	e716      	b.n	80039ce <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ba0:	0e80      	lsrs	r0, r0, #26
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f000 061f 	and.w	r6, r0, #31
 8003ba8:	0680      	lsls	r0, r0, #26
 8003baa:	f000 45f8 	and.w	r5, r0, #2080374784	@ 0x7c000000
 8003bae:	2001      	movs	r0, #1
 8003bb0:	40b0      	lsls	r0, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb2:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb4:	ea45 0400 	orr.w	r4, r5, r0
 8003bb8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bbc:	d959      	bls.n	8003c72 <HAL_ADC_ConfigChannel+0x366>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bbe:	381e      	subs	r0, #30
 8003bc0:	0500      	lsls	r0, r0, #20
 8003bc2:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8003bc6:	e7c2      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x242>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bc8:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8003bca:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bcc:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bd0:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bd4:	2e00      	cmp	r6, #0
 8003bd6:	d165      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x398>
 8003bd8:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bdc:	4285      	cmp	r5, r0
 8003bde:	f000 80a7 	beq.w	8003d30 <HAL_ADC_ConfigChannel+0x424>
 8003be2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8003be4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003be6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003bea:	4285      	cmp	r5, r0
 8003bec:	f000 808b 	beq.w	8003d06 <HAL_ADC_ConfigChannel+0x3fa>
 8003bf0:	68a5      	ldr	r5, [r4, #8]
 8003bf2:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf4:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bf8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003bfc:	4285      	cmp	r5, r0
 8003bfe:	f000 80a9 	beq.w	8003d54 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c02:	68e5      	ldr	r5, [r4, #12]
 8003c04:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c06:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c0a:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8003c0e:	42a0      	cmp	r0, r4
 8003c10:	f000 80b5 	beq.w	8003d7e <HAL_ADC_ConfigChannel+0x472>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c14:	4660      	mov	r0, ip
 8003c16:	e6aa      	b.n	800396e <HAL_ADC_ConfigChannel+0x62>
  MODIFY_REG(*preg,
 8003c18:	583d      	ldr	r5, [r7, r0]
 8003c1a:	402c      	ands	r4, r5
 8003c1c:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c1e:	6950      	ldr	r0, [r2, #20]
 8003c20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003c24:	6150      	str	r0, [r2, #20]
}
 8003c26:	e6fb      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003c2c:	2c00      	cmp	r4, #0
 8003c2e:	f000 80b8 	beq.w	8003da2 <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8003c32:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c36:	3401      	adds	r4, #1
 8003c38:	06a4      	lsls	r4, r4, #26
 8003c3a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c42:	2d00      	cmp	r5, #0
 8003c44:	f000 80ab 	beq.w	8003d9e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003c48:	fab5 f585 	clz	r5, r5
 8003c4c:	3501      	adds	r5, #1
 8003c4e:	f005 051f 	and.w	r5, r5, #31
 8003c52:	2601      	movs	r6, #1
 8003c54:	fa06 f505 	lsl.w	r5, r6, r5
 8003c58:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	f000 8093 	beq.w	8003d8a <HAL_ADC_ConfigChannel+0x47e>
  return __builtin_clz(value);
 8003c64:	fab0 f080 	clz	r0, r0
 8003c68:	3001      	adds	r0, #1
 8003c6a:	f000 001f 	and.w	r0, r0, #31
 8003c6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c72:	0500      	lsls	r0, r0, #20
 8003c74:	e76b      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x242>
 8003c76:	bf00      	nop
 8003c78:	407f0000 	.word	0x407f0000
 8003c7c:	80080000 	.word	0x80080000
 8003c80:	50000300 	.word	0x50000300
 8003c84:	c3210000 	.word	0xc3210000
 8003c88:	90c00010 	.word	0x90c00010
 8003c8c:	c7520000 	.word	0xc7520000
 8003c90:	cb840000 	.word	0xcb840000
 8003c94:	50000100 	.word	0x50000100
 8003c98:	03fff000 	.word	0x03fff000
 8003c9c:	20000694 	.word	0x20000694
 8003ca0:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8003ca8:	b11e      	cbz	r6, 8003cb2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003caa:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cae:	42b5      	cmp	r5, r6
 8003cb0:	d03e      	beq.n	8003d30 <HAL_ADC_ConfigChannel+0x424>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cb2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8003cb4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cbe:	f104 0708 	add.w	r7, r4, #8
 8003cc2:	46be      	mov	lr, r7
  if (value == 0U)
 8003cc4:	b11e      	cbz	r6, 8003cce <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8003cc6:	fab6 f686 	clz	r6, r6
 8003cca:	42ae      	cmp	r6, r5
 8003ccc:	d01d      	beq.n	8003d0a <HAL_ADC_ConfigChannel+0x3fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cce:	68a5      	ldr	r5, [r4, #8]
 8003cd0:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cd2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cda:	f104 060c 	add.w	r6, r4, #12
 8003cde:	46b0      	mov	r8, r6
  if (value == 0U)
 8003ce0:	f1be 0f00 	cmp.w	lr, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8003ce6:	fabe fe8e 	clz	lr, lr
 8003cea:	45ae      	cmp	lr, r5
 8003cec:	d034      	beq.n	8003d58 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cee:	68e5      	ldr	r5, [r4, #12]
 8003cf0:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cf2:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	f43f ae37 	beq.w	800396e <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8003d00:	fab5 f085 	clz	r0, r5
 8003d04:	e783      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x302>
 8003d06:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8003d0a:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003d0c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003d10:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d12:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d16:	68a0      	ldr	r0, [r4, #8]
 8003d18:	68a5      	ldr	r5, [r4, #8]
 8003d1a:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d1e:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d20:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d24:	4660      	mov	r0, ip
 8003d26:	2e00      	cmp	r6, #0
 8003d28:	d1d5      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x3ca>
 8003d2a:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8003d2e:	e765      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x2f0>
  MODIFY_REG(*preg,
 8003d30:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8003d32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003d36:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d38:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d3c:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003d3e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8003d40:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d44:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d48:	4660      	mov	r0, ip
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	d1b5      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x3ae>
 8003d4e:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8003d52:	e74a      	b.n	8003bea <HAL_ADC_ConfigChannel+0x2de>
 8003d54:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8003d58:	6838      	ldr	r0, [r7, #0]
 8003d5a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003d5e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d60:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d64:	68e0      	ldr	r0, [r4, #12]
 8003d66:	68e4      	ldr	r4, [r4, #12]
 8003d68:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d6c:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d6e:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d72:	4660      	mov	r0, ip
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	d1be      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x3ea>
 8003d78:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8003d7c:	e747      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8003d7e:	6830      	ldr	r0, [r6, #0]
 8003d80:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003d84:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d86:	6808      	ldr	r0, [r1, #0]
}
 8003d88:	e5f1      	b.n	800396e <HAL_ADC_ConfigChannel+0x62>
 8003d8a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8003d8e:	e6de      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x242>
 8003d90:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8003d94:	e6bb      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x202>
 8003d96:	4804      	ldr	r0, [pc, #16]	@ (8003da8 <HAL_ADC_ConfigChannel+0x49c>)
 8003d98:	e6d9      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x242>
 8003d9a:	2502      	movs	r5, #2
 8003d9c:	e6c4      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x21c>
 8003d9e:	2502      	movs	r5, #2
 8003da0:	e75a      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x34c>
 8003da2:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8003da6:	e74a      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x332>
 8003da8:	fe500000 	.word	0xfe500000

08003dac <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003db0:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8003db4:	4602      	mov	r2, r0
 8003db6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8003db8:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003dba:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dbc:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 8003dbe:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003dc0:	f000 8170 	beq.w	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003dca:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003dce:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003dd0:	2d00      	cmp	r5, #0
 8003dd2:	d06a      	beq.n	8003eaa <HAL_ADCEx_InjectedConfigChannel+0xfe>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003dd4:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003dd6:	2d01      	cmp	r5, #1
 8003dd8:	d067      	beq.n	8003eaa <HAL_ADCEx_InjectedConfigChannel+0xfe>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003dda:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003ddc:	f000 001f 	and.w	r0, r0, #31
 8003de0:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8003de4:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003de6:	2f00      	cmp	r7, #0
 8003de8:	f040 8112 	bne.w	8004010 <HAL_ADCEx_InjectedConfigChannel+0x264>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003dec:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003dee:	3d01      	subs	r5, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f000 8211 	beq.w	8004218 <HAL_ADCEx_InjectedConfigChannel+0x46c>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003df6:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003df8:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8003dfc:	4328      	orrs	r0, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003dfe:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003e00:	4330      	orrs	r0, r6
 8003e02:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e06:	6898      	ldr	r0, [r3, #8]
 8003e08:	0700      	lsls	r0, r0, #28
 8003e0a:	d410      	bmi.n	8003e2e <HAL_ADCEx_InjectedConfigChannel+0x82>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003e0c:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003e10:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8003e14:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	f040 80ef 	bne.w	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x24e>
      MODIFY_REG(hadc->Instance->CFGR,
 8003e1c:	68dd      	ldr	r5, [r3, #12]
 8003e1e:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8003e22:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8003e26:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8003e2a:	4328      	orrs	r0, r5
 8003e2c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e2e:	6898      	ldr	r0, [r3, #8]
 8003e30:	f010 0004 	ands.w	r0, r0, #4
 8003e34:	d04f      	beq.n	8003ed6 <HAL_ADCEx_InjectedConfigChannel+0x12a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e36:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e38:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e3a:	689d      	ldr	r5, [r3, #8]
 8003e3c:	07ee      	lsls	r6, r5, #31
 8003e3e:	d40c      	bmi.n	8003e5a <HAL_ADCEx_InjectedConfigChannel+0xae>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003e40:	4ea2      	ldr	r6, [pc, #648]	@ (80040cc <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8003e42:	68cf      	ldr	r7, [r1, #12]
 8003e44:	42b7      	cmp	r7, r6
    SET_BIT(ADCx->DIFSEL,
 8003e46:	f3c4 0512 	ubfx	r5, r4, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003e4a:	f000 80fc 	beq.w	8004046 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    CLEAR_BIT(ADCx->DIFSEL,
 8003e4e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003e52:	ea21 0105 	bic.w	r1, r1, r5
 8003e56:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003e5a:	499d      	ldr	r1, [pc, #628]	@ (80040d0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003e5c:	420c      	tst	r4, r1
 8003e5e:	d01e      	beq.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003e60:	4e9c      	ldr	r6, [pc, #624]	@ (80040d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003e62:	4d9d      	ldr	r5, [pc, #628]	@ (80040d8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8003e64:	68b1      	ldr	r1, [r6, #8]
 8003e66:	42ac      	cmp	r4, r5
 8003e68:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8003e6c:	f000 809f 	beq.w	8003fae <HAL_ADCEx_InjectedConfigChannel+0x202>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e70:	4d9a      	ldr	r5, [pc, #616]	@ (80040dc <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8003e72:	42ac      	cmp	r4, r5
 8003e74:	f000 809b 	beq.w	8003fae <HAL_ADCEx_InjectedConfigChannel+0x202>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003e78:	4d99      	ldr	r5, [pc, #612]	@ (80040e0 <HAL_ADCEx_InjectedConfigChannel+0x334>)
 8003e7a:	42ac      	cmp	r4, r5
 8003e7c:	f000 8116 	beq.w	80040ac <HAL_ADCEx_InjectedConfigChannel+0x300>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003e80:	4d98      	ldr	r5, [pc, #608]	@ (80040e4 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8003e82:	42ac      	cmp	r4, r5
 8003e84:	d10b      	bne.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e86:	0249      	lsls	r1, r1, #9
 8003e88:	d409      	bmi.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003e8a:	4997      	ldr	r1, [pc, #604]	@ (80040e8 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d006      	beq.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e90:	68b3      	ldr	r3, [r6, #8]
 8003e92:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003e96:	433b      	orrs	r3, r7
 8003e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e9c:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003ea4:	b003      	add	sp, #12
 8003ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003eaa:	2809      	cmp	r0, #9
 8003eac:	d1ab      	bne.n	8003e06 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003eae:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003eb0:	0c65      	lsrs	r5, r4, #17
 8003eb2:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003eb6:	b120      	cbz	r0, 8003ec2 <HAL_ADCEx_InjectedConfigChannel+0x116>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003eb8:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003eba:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003ebe:	4330      	orrs	r0, r6
 8003ec0:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003ec2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003ec4:	4e89      	ldr	r6, [pc, #548]	@ (80040ec <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8003ec6:	4030      	ands	r0, r6
 8003ec8:	4328      	orrs	r0, r5
 8003eca:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ecc:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003ece:	6655      	str	r5, [r2, #100]	@ 0x64
 8003ed0:	0700      	lsls	r0, r0, #28
 8003ed2:	d4ac      	bmi.n	8003e2e <HAL_ADCEx_InjectedConfigChannel+0x82>
 8003ed4:	e79a      	b.n	8003e0c <HAL_ADCEx_InjectedConfigChannel+0x60>
 8003ed6:	689d      	ldr	r5, [r3, #8]
 8003ed8:	072f      	lsls	r7, r5, #28
 8003eda:	d4ae      	bmi.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003edc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003ede:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ee2:	2d00      	cmp	r5, #0
 8003ee4:	f040 80a6 	bne.w	8004034 <HAL_ADCEx_InjectedConfigChannel+0x288>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003ee8:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003eea:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003eec:	f000 8196 	beq.w	800421c <HAL_ADCEx_InjectedConfigChannel+0x470>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ef0:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8003ef4:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef6:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003ef8:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8003efc:	2d01      	cmp	r5, #1
 8003efe:	f000 8180 	beq.w	8004202 <HAL_ADCEx_InjectedConfigChannel+0x456>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003f02:	691d      	ldr	r5, [r3, #16]
 8003f04:	f025 0502 	bic.w	r5, r5, #2
 8003f08:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f0a:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8003f0c:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8003f10:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f12:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8003f14:	40bd      	lsls	r5, r7
 8003f16:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f1a:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8003f1e:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f22:	f103 0c14 	add.w	ip, r3, #20
 8003f26:	f000 8162 	beq.w	80041ee <HAL_ADCEx_InjectedConfigChannel+0x442>
  MODIFY_REG(*preg,
 8003f2a:	40be      	lsls	r6, r7
 8003f2c:	f85c 7004 	ldr.w	r7, [ip, r4]
 8003f30:	403d      	ands	r5, r7
 8003f32:	4335      	orrs	r5, r6
 8003f34:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f38:	695c      	ldr	r4, [r3, #20]
 8003f3a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003f3e:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003f40:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003f44:	680c      	ldr	r4, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003f46:	694e      	ldr	r6, [r1, #20]
 8003f48:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003f4a:	f1bc 0f04 	cmp.w	ip, #4
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003f4e:	46a6      	mov	lr, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f50:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003f54:	f000 810b 	beq.w	800416e <HAL_ADCEx_InjectedConfigChannel+0x3c2>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003f58:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8003f5c:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 8003f5e:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 8003f62:	40be      	lsls	r6, r7
 8003f64:	4f62      	ldr	r7, [pc, #392]	@ (80040f0 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8003f66:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8003f6a:	ea0e 0707 	and.w	r7, lr, r7
 8003f6e:	4327      	orrs	r7, r4
 8003f70:	433e      	orrs	r6, r7
 8003f72:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 8003f76:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f7a:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003f7c:	698e      	ldr	r6, [r1, #24]
 8003f7e:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8003f82:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8003f86:	4334      	orrs	r4, r6
 8003f88:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8c:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003f8e:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8003f90:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8003f94:	f1a6 0601 	sub.w	r6, r6, #1
 8003f98:	fab6 f686 	clz	r6, r6
 8003f9c:	0976      	lsrs	r6, r6, #5
 8003f9e:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8003fa2:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8003fa6:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003faa:	680c      	ldr	r4, [r1, #0]
}
 8003fac:	e745      	b.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fae:	020d      	lsls	r5, r1, #8
 8003fb0:	f53f af75 	bmi.w	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb8:	f47f af71 	bne.w	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fbc:	4945      	ldr	r1, [pc, #276]	@ (80040d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003fbe:	4c4d      	ldr	r4, [pc, #308]	@ (80040f4 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8003fc0:	688b      	ldr	r3, [r1, #8]
 8003fc2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003fc6:	433b      	orrs	r3, r7
 8003fc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fcc:	608b      	str	r3, [r1, #8]
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4949      	ldr	r1, [pc, #292]	@ (80040f8 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	fba1 1303 	umull	r1, r3, r1, r3
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003fe4:	9b01      	ldr	r3, [sp, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f43f af59 	beq.w	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8003fec:	9b01      	ldr	r3, [sp, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003ff2:	9b01      	ldr	r3, [sp, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f9      	bne.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0x240>
 8003ff8:	e751      	b.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->CFGR,
 8003ffa:	68dd      	ldr	r5, [r3, #12]
 8003ffc:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004000:	4328      	orrs	r0, r5
 8004002:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004004:	6898      	ldr	r0, [r3, #8]
 8004006:	f010 0004 	ands.w	r0, r0, #4
 800400a:	f43f af64 	beq.w	8003ed6 <HAL_ADCEx_InjectedConfigChannel+0x12a>
 800400e:	e712      	b.n	8003e36 <HAL_ADCEx_InjectedConfigChannel+0x8a>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004010:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004012:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004014:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8004016:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004018:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800401a:	2f00      	cmp	r7, #0
 800401c:	f47f aef3 	bne.w	8003e06 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004020:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004022:	4e32      	ldr	r6, [pc, #200]	@ (80040ec <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8004024:	4030      	ands	r0, r6
 8004026:	4328      	orrs	r0, r5
 8004028:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800402a:	6898      	ldr	r0, [r3, #8]
 800402c:	0700      	lsls	r0, r0, #28
 800402e:	f53f aefe 	bmi.w	8003e2e <HAL_ADCEx_InjectedConfigChannel+0x82>
 8004032:	e6eb      	b.n	8003e0c <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004034:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8004036:	2d00      	cmp	r5, #0
 8004038:	f43f af56 	beq.w	8003ee8 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800403c:	2801      	cmp	r0, #1
 800403e:	f000 810f 	beq.w	8004260 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004042:	68d8      	ldr	r0, [r3, #12]
 8004044:	e754      	b.n	8003ef0 <HAL_ADCEx_InjectedConfigChannel+0x144>
    SET_BIT(ADCx->DIFSEL,
 8004046:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800404a:	432e      	orrs	r6, r5
 800404c:	f8c3 60b0 	str.w	r6, [r3, #176]	@ 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004050:	2d00      	cmp	r5, #0
 8004052:	d153      	bne.n	80040fc <HAL_ADCEx_InjectedConfigChannel+0x350>
 8004054:	0ea4      	lsrs	r4, r4, #26
 8004056:	3401      	adds	r4, #1
 8004058:	f004 061f 	and.w	r6, r4, #31
 800405c:	2501      	movs	r5, #1
 800405e:	06a4      	lsls	r4, r4, #26
 8004060:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8004064:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004066:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004068:	ea45 0504 	orr.w	r5, r5, r4
 800406c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004070:	f200 80f1 	bhi.w	8004256 <HAL_ADCEx_InjectedConfigChannel+0x4aa>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004074:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004076:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004078:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 800407a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800407c:	f006 0604 	and.w	r6, r6, #4
 8004080:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004084:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004088:	fa05 fc04 	lsl.w	ip, r5, r4
 800408c:	f04f 0e07 	mov.w	lr, #7
 8004090:	59bd      	ldr	r5, [r7, r6]
 8004092:	fa0e f404 	lsl.w	r4, lr, r4
 8004096:	ea25 0404 	bic.w	r4, r5, r4
 800409a:	ea44 040c 	orr.w	r4, r4, ip
 800409e:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80040a0:	680c      	ldr	r4, [r1, #0]
}
 80040a2:	e6da      	b.n	8003e5a <HAL_ADCEx_InjectedConfigChannel+0xae>
  __HAL_LOCK(hadc);
 80040a4:	2002      	movs	r0, #2
}
 80040a6:	b003      	add	sp, #12
 80040a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ac:	01cc      	lsls	r4, r1, #7
 80040ae:	f53f aef6 	bmi.w	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040b2:	490d      	ldr	r1, [pc, #52]	@ (80040e8 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	f43f aef2 	beq.w	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80040ba:	68b3      	ldr	r3, [r6, #8]
 80040bc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80040c0:	433b      	orrs	r3, r7
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c6:	60b3      	str	r3, [r6, #8]
}
 80040c8:	e6e9      	b.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0xf2>
 80040ca:	bf00      	nop
 80040cc:	407f0000 	.word	0x407f0000
 80040d0:	80080000 	.word	0x80080000
 80040d4:	50000300 	.word	0x50000300
 80040d8:	c3210000 	.word	0xc3210000
 80040dc:	90c00010 	.word	0x90c00010
 80040e0:	c7520000 	.word	0xc7520000
 80040e4:	cb840000 	.word	0xcb840000
 80040e8:	50000100 	.word	0x50000100
 80040ec:	04104000 	.word	0x04104000
 80040f0:	03fff000 	.word	0x03fff000
 80040f4:	20000694 	.word	0x20000694
 80040f8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004100:	2d00      	cmp	r5, #0
 8004102:	f000 80b2 	beq.w	800426a <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 8004106:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800410a:	3501      	adds	r5, #1
 800410c:	f005 051f 	and.w	r5, r5, #31
 8004110:	2d09      	cmp	r5, #9
 8004112:	f240 80aa 	bls.w	800426a <HAL_ADCEx_InjectedConfigChannel+0x4be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800411a:	2d00      	cmp	r5, #0
 800411c:	f000 8111 	beq.w	8004342 <HAL_ADCEx_InjectedConfigChannel+0x596>
  return __builtin_clz(value);
 8004120:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004124:	3501      	adds	r5, #1
 8004126:	06ad      	lsls	r5, r5, #26
 8004128:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004130:	2e00      	cmp	r6, #0
 8004132:	f000 8104 	beq.w	800433e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return __builtin_clz(value);
 8004136:	fab6 f686 	clz	r6, r6
 800413a:	3601      	adds	r6, #1
 800413c:	f006 061f 	and.w	r6, r6, #31
 8004140:	2701      	movs	r7, #1
 8004142:	fa07 f606 	lsl.w	r6, r7, r6
 8004146:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800414c:	2c00      	cmp	r4, #0
 800414e:	f000 80fe 	beq.w	800434e <HAL_ADCEx_InjectedConfigChannel+0x5a2>
  return __builtin_clz(value);
 8004152:	fab4 f484 	clz	r4, r4
 8004156:	1c66      	adds	r6, r4, #1
 8004158:	f006 061f 	and.w	r6, r6, #31
 800415c:	2403      	movs	r4, #3
 800415e:	f06f 071d 	mvn.w	r7, #29
 8004162:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004166:	0524      	lsls	r4, r4, #20
 8004168:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800416c:	e783      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800416e:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8004170:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004172:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004176:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800417a:	2f00      	cmp	r7, #0
 800417c:	d052      	beq.n	8004224 <HAL_ADCEx_InjectedConfigChannel+0x478>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8004182:	b127      	cbz	r7, 800418e <HAL_ADCEx_InjectedConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004184:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004188:	42be      	cmp	r6, r7
 800418a:	f000 80a7 	beq.w	80042dc <HAL_ADCEx_InjectedConfigChannel+0x530>
 800418e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8004190:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004192:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800419a:	f105 0c08 	add.w	ip, r5, #8
 800419e:	46e0      	mov	r8, ip
  if (value == 0U)
 80041a0:	b127      	cbz	r7, 80041ac <HAL_ADCEx_InjectedConfigChannel+0x400>
  return __builtin_clz(value);
 80041a2:	fab7 f787 	clz	r7, r7
 80041a6:	42b7      	cmp	r7, r6
 80041a8:	f000 8084 	beq.w	80042b4 <HAL_ADCEx_InjectedConfigChannel+0x508>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041ac:	68ae      	ldr	r6, [r5, #8]
 80041ae:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041b0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b8:	f105 070c 	add.w	r7, r5, #12
 80041bc:	46b9      	mov	r9, r7
  if (value == 0U)
 80041be:	f1b8 0f00 	cmp.w	r8, #0
 80041c2:	d004      	beq.n	80041ce <HAL_ADCEx_InjectedConfigChannel+0x422>
  return __builtin_clz(value);
 80041c4:	fab8 f888 	clz	r8, r8
 80041c8:	45b0      	cmp	r8, r6
 80041ca:	f000 809c 	beq.w	8004306 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041ce:	68ee      	ldr	r6, [r5, #12]
 80041d0:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041d2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 80041da:	2e00      	cmp	r6, #0
 80041dc:	f43f ae2d 	beq.w	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 80041e0:	fab6 f486 	clz	r4, r6
 80041e4:	42ac      	cmp	r4, r5
 80041e6:	f000 80a4 	beq.w	8004332 <HAL_ADCEx_InjectedConfigChannel+0x586>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80041ea:	4674      	mov	r4, lr
 80041ec:	e625      	b.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80041ee:	f85c 6004 	ldr.w	r6, [ip, r4]
 80041f2:	4035      	ands	r5, r6
 80041f4:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041f8:	695c      	ldr	r4, [r3, #20]
 80041fa:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80041fe:	615c      	str	r4, [r3, #20]
}
 8004200:	e69e      	b.n	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x194>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004202:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8004206:	691e      	ldr	r6, [r3, #16]
 8004208:	433d      	orrs	r5, r7
 800420a:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 800420e:	4335      	orrs	r5, r6
 8004210:	f045 0502 	orr.w	r5, r5, #2
 8004214:	611d      	str	r5, [r3, #16]
 8004216:	e678      	b.n	8003f0a <HAL_ADCEx_InjectedConfigChannel+0x15e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004218:	4628      	mov	r0, r5
 800421a:	e5f1      	b.n	8003e00 <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800421c:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004220:	60d8      	str	r0, [r3, #12]
 8004222:	e668      	b.n	8003ef6 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004224:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004228:	42a6      	cmp	r6, r4
 800422a:	d057      	beq.n	80042dc <HAL_ADCEx_InjectedConfigChannel+0x530>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800422c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800422e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004230:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004234:	42a6      	cmp	r6, r4
 8004236:	d03b      	beq.n	80042b0 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8004238:	68ae      	ldr	r6, [r5, #8]
 800423a:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004240:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004244:	42a6      	cmp	r6, r4
 8004246:	d05c      	beq.n	8004302 <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004248:	68ee      	ldr	r6, [r5, #12]
 800424a:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424c:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004250:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8004254:	e7c6      	b.n	80041e4 <HAL_ADCEx_InjectedConfigChannel+0x438>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004256:	3c1e      	subs	r4, #30
 8004258:	0524      	lsls	r4, r4, #20
 800425a:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800425e:	e70a      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8004262:	f045 0520 	orr.w	r5, r5, #32
 8004266:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8004268:	e646      	b.n	8003ef8 <HAL_ADCEx_InjectedConfigChannel+0x14c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800426e:	2d00      	cmp	r5, #0
 8004270:	d071      	beq.n	8004356 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return __builtin_clz(value);
 8004272:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004276:	3501      	adds	r5, #1
 8004278:	06ad      	lsls	r5, r5, #26
 800427a:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004282:	2e00      	cmp	r6, #0
 8004284:	d065      	beq.n	8004352 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
  return __builtin_clz(value);
 8004286:	fab6 f686 	clz	r6, r6
 800428a:	3601      	adds	r6, #1
 800428c:	f006 061f 	and.w	r6, r6, #31
 8004290:	2701      	movs	r7, #1
 8004292:	fa07 f606 	lsl.w	r6, r7, r6
 8004296:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800429c:	2c00      	cmp	r4, #0
 800429e:	d053      	beq.n	8004348 <HAL_ADCEx_InjectedConfigChannel+0x59c>
  return __builtin_clz(value);
 80042a0:	fab4 f484 	clz	r4, r4
 80042a4:	3401      	adds	r4, #1
 80042a6:	f004 041f 	and.w	r4, r4, #31
 80042aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80042ae:	e6e1      	b.n	8004074 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
 80042b0:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 80042b4:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80042b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80042ba:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042bc:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042c0:	68ac      	ldr	r4, [r5, #8]
 80042c2:	68ae      	ldr	r6, [r5, #8]
 80042c4:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c8:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042ca:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042ce:	4674      	mov	r4, lr
 80042d0:	2f00      	cmp	r7, #0
 80042d2:	f47f af6f 	bne.w	80041b4 <HAL_ADCEx_InjectedConfigChannel+0x408>
 80042d6:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80042da:	e7b3      	b.n	8004244 <HAL_ADCEx_InjectedConfigChannel+0x498>
  MODIFY_REG(*preg,
 80042dc:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80042de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80042e2:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042e4:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042e8:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80042ea:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80042ec:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042f0:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042f4:	4674      	mov	r4, lr
 80042f6:	2f00      	cmp	r7, #0
 80042f8:	f47f af4d 	bne.w	8004196 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80042fc:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8004300:	e798      	b.n	8004234 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8004302:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8004306:	f8dc 4000 	ldr.w	r4, [ip]
 800430a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800430e:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004312:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004316:	68ec      	ldr	r4, [r5, #12]
 8004318:	68ed      	ldr	r5, [r5, #12]
 800431a:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431e:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004320:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004324:	4674      	mov	r4, lr
 8004326:	2e00      	cmp	r6, #0
 8004328:	f47f af55 	bne.w	80041d6 <HAL_ADCEx_InjectedConfigChannel+0x42a>
 800432c:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8004330:	e758      	b.n	80041e4 <HAL_ADCEx_InjectedConfigChannel+0x438>
  MODIFY_REG(*preg,
 8004332:	683c      	ldr	r4, [r7, #0]
 8004334:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004338:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800433a:	680c      	ldr	r4, [r1, #0]
}
 800433c:	e57d      	b.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x8e>
 800433e:	2602      	movs	r6, #2
 8004340:	e701      	b.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8004342:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8004346:	e6f1      	b.n	800412c <HAL_ADCEx_InjectedConfigChannel+0x380>
 8004348:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800434c:	e693      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 800434e:	4c03      	ldr	r4, [pc, #12]	@ (800435c <HAL_ADCEx_InjectedConfigChannel+0x5b0>)
 8004350:	e691      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 8004352:	2602      	movs	r6, #2
 8004354:	e79f      	b.n	8004296 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8004356:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800435a:	e790      	b.n	800427e <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 800435c:	fe500000 	.word	0xfe500000

08004360 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004360:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004362:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004366:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004368:	2a01      	cmp	r2, #1
{
 800436a:	b09c      	sub	sp, #112	@ 0x70
  __HAL_LOCK(hadc);
 800436c:	d042      	beq.n	80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x94>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800436e:	6804      	ldr	r4, [r0, #0]
 8004370:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004372:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004374:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004376:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800437a:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 800437c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004380:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004382:	d008      	beq.n	8004396 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004384:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004386:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438a:	f041 0120 	orr.w	r1, r1, #32
 800438e:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004390:	b01c      	add	sp, #112	@ 0x70
 8004392:	bcf0      	pop	{r4, r5, r6, r7}
 8004394:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004396:	4a23      	ldr	r2, [pc, #140]	@ (8004424 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004398:	6890      	ldr	r0, [r2, #8]
 800439a:	0740      	lsls	r0, r0, #29
 800439c:	d50b      	bpl.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800439e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043a2:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80043a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80043b0:	b01c      	add	sp, #112	@ 0x70
 80043b2:	bcf0      	pop	{r4, r5, r6, r7}
 80043b4:	4770      	bx	lr
 80043b6:	68a0      	ldr	r0, [r4, #8]
 80043b8:	0746      	lsls	r6, r0, #29
 80043ba:	d4f1      	bmi.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043bc:	b1f5      	cbz	r5, 80043fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80043be:	4e1a      	ldr	r6, [pc, #104]	@ (8004428 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80043c0:	684f      	ldr	r7, [r1, #4]
 80043c2:	68b0      	ldr	r0, [r6, #8]
 80043c4:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80043c8:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80043cc:	4338      	orrs	r0, r7
 80043ce:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80043d2:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043d4:	68a0      	ldr	r0, [r4, #8]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	07c0      	lsls	r0, r0, #31
 80043da:	d420      	bmi.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80043dc:	07d7      	lsls	r7, r2, #31
 80043de:	d41e      	bmi.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        MODIFY_REG(tmpADC_Common->CCR,
 80043e0:	68b0      	ldr	r0, [r6, #8]
 80043e2:	688a      	ldr	r2, [r1, #8]
 80043e4:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 80043e8:	432a      	orrs	r2, r5
 80043ea:	f021 010f 	bic.w	r1, r1, #15
 80043ee:	430a      	orrs	r2, r1
 80043f0:	60b2      	str	r2, [r6, #8]
 80043f2:	e014      	b.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 80043f4:	2002      	movs	r0, #2
}
 80043f6:	b01c      	add	sp, #112	@ 0x70
 80043f8:	bcf0      	pop	{r4, r5, r6, r7}
 80043fa:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043fc:	480a      	ldr	r0, [pc, #40]	@ (8004428 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80043fe:	6881      	ldr	r1, [r0, #8]
 8004400:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8004404:	6081      	str	r1, [r0, #8]
 8004406:	68a1      	ldr	r1, [r4, #8]
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	07cd      	lsls	r5, r1, #31
 800440c:	d407      	bmi.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 800440e:	07d4      	lsls	r4, r2, #31
 8004410:	d405      	bmi.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004412:	6882      	ldr	r2, [r0, #8]
 8004414:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004418:	f022 020f 	bic.w	r2, r2, #15
 800441c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441e:	2000      	movs	r0, #0
 8004420:	e7c3      	b.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004422:	bf00      	nop
 8004424:	50000100 	.word	0x50000100
 8004428:	50000300 	.word	0x50000300

0800442c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800442c:	b530      	push	{r4, r5, lr}
 800442e:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004430:	2300      	movs	r3, #0
 8004432:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004434:	2800      	cmp	r0, #0
 8004436:	d051      	beq.n	80044dc <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004438:	6802      	ldr	r2, [r0, #0]
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	4604      	mov	r4, r0
 8004440:	db4c      	blt.n	80044dc <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004442:	7f43      	ldrb	r3, [r0, #29]
 8004444:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8004448:	2b00      	cmp	r3, #0
 800444a:	d073      	beq.n	8004534 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800444c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8004450:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004452:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8004454:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8004456:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8004458:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800445a:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 800445c:	430b      	orrs	r3, r1
    tmp_csr = (  hcomp->Init.InputMinus
 800445e:	6921      	ldr	r1, [r4, #16]
 8004460:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 8004462:	493c      	ldr	r1, [pc, #240]	@ (8004554 <HAL_COMP_Init+0x128>)
 8004464:	4001      	ands	r1, r0
 8004466:	430b      	orrs	r3, r1
 8004468:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	d501      	bpl.n	8004474 <HAL_COMP_Init+0x48>
 8004470:	022d      	lsls	r5, r5, #8
 8004472:	d549      	bpl.n	8004508 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004474:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <HAL_COMP_Init+0x12c>)
 8004476:	429a      	cmp	r2, r3
 8004478:	d062      	beq.n	8004540 <HAL_COMP_Init+0x114>
 800447a:	4b38      	ldr	r3, [pc, #224]	@ (800455c <HAL_COMP_Init+0x130>)
 800447c:	429a      	cmp	r2, r3
 800447e:	d064      	beq.n	800454a <HAL_COMP_Init+0x11e>
 8004480:	3304      	adds	r3, #4
 8004482:	429a      	cmp	r2, r3
 8004484:	bf15      	itete	ne
 8004486:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 800448a:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 800448e:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8004492:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004496:	69a3      	ldr	r3, [r4, #24]
 8004498:	0798      	lsls	r0, r3, #30
 800449a:	d022      	beq.n	80044e2 <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800449c:	4d30      	ldr	r5, [pc, #192]	@ (8004560 <HAL_COMP_Init+0x134>)
 800449e:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80044a0:	f013 0f10 	tst.w	r3, #16
 80044a4:	bf14      	ite	ne
 80044a6:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80044a8:	4010      	andeq	r0, r2
 80044aa:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80044ac:	4d2c      	ldr	r5, [pc, #176]	@ (8004560 <HAL_COMP_Init+0x134>)
 80044ae:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80044b0:	f013 0f20 	tst.w	r3, #32
 80044b4:	bf14      	ite	ne
 80044b6:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80044b8:	4010      	andeq	r0, r2
 80044ba:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80044bc:	4828      	ldr	r0, [pc, #160]	@ (8004560 <HAL_COMP_Init+0x134>)
 80044be:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80044c0:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80044c2:	f013 0f02 	tst.w	r3, #2
 80044c6:	bf14      	ite	ne
 80044c8:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044ca:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80044cc:	07db      	lsls	r3, r3, #31
 80044ce:	6045      	str	r5, [r0, #4]
 80044d0:	d515      	bpl.n	80044fe <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80044d2:	4b23      	ldr	r3, [pc, #140]	@ (8004560 <HAL_COMP_Init+0x134>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4311      	orrs	r1, r2
 80044d8:	6019      	str	r1, [r3, #0]
}
 80044da:	e009      	b.n	80044f0 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 80044dc:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 80044de:	b003      	add	sp, #12
 80044e0:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <HAL_COMP_Init+0x134>)
 80044e4:	6859      	ldr	r1, [r3, #4]
 80044e6:	4011      	ands	r1, r2
 80044e8:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	400a      	ands	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80044f0:	7f63      	ldrb	r3, [r4, #29]
 80044f2:	b90b      	cbnz	r3, 80044f8 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 80044f4:	2301      	movs	r3, #1
 80044f6:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2000      	movs	r0, #0
}
 80044fa:	b003      	add	sp, #12
 80044fc:	bd30      	pop	{r4, r5, pc}
 80044fe:	4918      	ldr	r1, [pc, #96]	@ (8004560 <HAL_COMP_Init+0x134>)
 8004500:	680b      	ldr	r3, [r1, #0]
 8004502:	4013      	ands	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
}
 8004506:	e7f3      	b.n	80044f0 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004508:	4b16      	ldr	r3, [pc, #88]	@ (8004564 <HAL_COMP_Init+0x138>)
 800450a:	4917      	ldr	r1, [pc, #92]	@ (8004568 <HAL_COMP_Init+0x13c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	fba1 1303 	umull	r1, r3, r1, r3
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	3301      	adds	r3, #1
 8004518:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8004520:	9b01      	ldr	r3, [sp, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0a6      	beq.n	8004474 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8004526:	9b01      	ldr	r3, [sp, #4]
 8004528:	3b01      	subs	r3, #1
 800452a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800452c:	9b01      	ldr	r3, [sp, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f9      	bne.n	8004526 <HAL_COMP_Init+0xfa>
 8004532:	e79f      	b.n	8004474 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8004534:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8004536:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8004538:	f7fe f856 	bl	80025e8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	e785      	b.n	800444c <HAL_COMP_Init+0x20>
 8004540:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004544:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004548:	e7a5      	b.n	8004496 <HAL_COMP_Init+0x6a>
 800454a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800454e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004552:	e7a0      	b.n	8004496 <HAL_COMP_Init+0x6a>
 8004554:	ff007e0f 	.word	0xff007e0f
 8004558:	40010200 	.word	0x40010200
 800455c:	40010204 	.word	0x40010204
 8004560:	40010400 	.word	0x40010400
 8004564:	20000694 	.word	0x20000694
 8004568:	053e2d63 	.word	0x053e2d63

0800456c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800456c:	b1b0      	cbz	r0, 800459c <HAL_CORDIC_Init+0x30>
{
 800456e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004570:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8004574:	4604      	mov	r4, r0
 8004576:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800457a:	b153      	cbz	r3, 8004592 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800457c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800457e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004580:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004582:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8004586:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 800458a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800458e:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004590:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004592:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004596:	f7fe f89b 	bl	80026d0 <HAL_CORDIC_MspInit>
 800459a:	e7ef      	b.n	800457c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 800459c:	2001      	movs	r0, #1
}
 800459e:	4770      	bx	lr

080045a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a0:	4907      	ldr	r1, [pc, #28]	@ (80045c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80045a2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ae:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045b2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80045ba:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004634 <HAL_NVIC_SetPriority+0x70>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ce:	f1c3 0e07 	rsb	lr, r3, #7
 80045d2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045da:	bf28      	it	cs
 80045dc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e0:	f1bc 0f06 	cmp.w	ip, #6
 80045e4:	d91c      	bls.n	8004620 <HAL_NVIC_SetPriority+0x5c>
 80045e6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	fa03 f30c 	lsl.w	r3, r3, ip
 80045f2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	fa03 f30e 	lsl.w	r3, r3, lr
 80045fe:	ea21 0303 	bic.w	r3, r1, r3
 8004602:	fa03 f30c 	lsl.w	r3, r3, ip
 8004606:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004608:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800460a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800460e:	db0a      	blt.n	8004626 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004614:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004618:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800461c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004620:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004622:	4694      	mov	ip, r2
 8004624:	e7e7      	b.n	80045f6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	4a04      	ldr	r2, [pc, #16]	@ (8004638 <HAL_NVIC_SetPriority+0x74>)
 8004628:	f000 000f 	and.w	r0, r0, #15
 800462c:	4402      	add	r2, r0
 800462e:	7613      	strb	r3, [r2, #24]
 8004630:	f85d fb04 	ldr.w	pc, [sp], #4
 8004634:	e000ed00 	.word	0xe000ed00
 8004638:	e000ecfc 	.word	0xe000ecfc

0800463c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800463c:	2800      	cmp	r0, #0
 800463e:	db07      	blt.n	8004650 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004640:	4a04      	ldr	r2, [pc, #16]	@ (8004654 <HAL_NVIC_EnableIRQ+0x18>)
 8004642:	0941      	lsrs	r1, r0, #5
 8004644:	2301      	movs	r3, #1
 8004646:	f000 001f 	and.w	r0, r0, #31
 800464a:	4083      	lsls	r3, r0
 800464c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004658:	3801      	subs	r0, #1
 800465a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800465e:	d301      	bcc.n	8004664 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004660:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004662:	4770      	bx	lr
{
 8004664:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004666:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	4c07      	ldr	r4, [pc, #28]	@ (8004688 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004672:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004676:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004678:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800467a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800467c:	619a      	str	r2, [r3, #24]
}
 800467e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004682:	6119      	str	r1, [r3, #16]
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <HAL_SYSTICK_IRQHandler>:
{
 8004690:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004692:	f7ff fffb 	bl	800468c <HAL_SYSTICK_Callback>
}
 8004696:	bd08      	pop	{r3, pc}

08004698 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004698:	b188      	cbz	r0, 80046be <HAL_DAC_Init+0x26>
{
 800469a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800469c:	7903      	ldrb	r3, [r0, #4]
 800469e:	4604      	mov	r4, r0
 80046a0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80046a4:	b13b      	cbz	r3, 80046b6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046a6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80046a8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046aa:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ac:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046ae:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80046b0:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80046b2:	4618      	mov	r0, r3
}
 80046b4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80046b6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80046b8:	f7fe f822 	bl	8002700 <HAL_DAC_MspInit>
 80046bc:	e7f3      	b.n	80046a6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80046be:	2001      	movs	r0, #1
}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop

080046c4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046c8:	7943      	ldrb	r3, [r0, #5]
 80046ca:	2b01      	cmp	r3, #1
{
 80046cc:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80046ce:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 80046d0:	f000 80d2 	beq.w	8004878 <HAL_DAC_ConfigChannel+0x1b4>
 80046d4:	2301      	movs	r3, #1
 80046d6:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046d8:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 80046da:	f04f 0302 	mov.w	r3, #2
 80046de:	4688      	mov	r8, r1
 80046e0:	4616      	mov	r6, r2
 80046e2:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046e4:	d07f      	beq.n	80047e6 <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046e6:	682f      	ldr	r7, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80046e8:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d109      	bne.n	8004708 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 80046f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046f6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046fa:	211f      	movs	r1, #31
 80046fc:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046fe:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004700:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004704:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004706:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004708:	f8d8 2018 	ldr.w	r2, [r8, #24]
  tmpreg1 = hdac->Instance->MCR;
 800470c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800470e:	f8d8 e014 	ldr.w	lr, [r8, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004712:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004714:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004716:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800471a:	d060      	beq.n	80047de <HAL_DAC_ConfigChannel+0x11a>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800471c:	2a02      	cmp	r2, #2
 800471e:	d060      	beq.n	80047e2 <HAL_DAC_ConfigChannel+0x11e>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004720:	fabe f28e 	clz	r2, lr
 8004724:	0952      	lsrs	r2, r2, #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004726:	f898 4005 	ldrb.w	r4, [r8, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800472a:	f898 c004 	ldrb.w	ip, [r8, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800472e:	f1a4 0401 	sub.w	r4, r4, #1
 8004732:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004736:	f1ac 0c01 	sub.w	ip, ip, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800473a:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800473c:	fabc fc8c 	clz	ip, ip
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004740:	0264      	lsls	r4, r4, #9
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004742:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004746:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 800474a:	ea44 040e 	orr.w	r4, r4, lr
 800474e:	4304      	orrs	r4, r0
 8004750:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004756:	40b2      	lsls	r2, r6
 8004758:	430a      	orrs	r2, r1
 800475a:	ea23 0902 	bic.w	r9, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800475e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004762:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004764:	ea29 0903 	bic.w	r9, r9, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004768:	f8d8 3000 	ldr.w	r3, [r8]
 800476c:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800476e:	f429 4940 	bic.w	r9, r9, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004772:	d078      	beq.n	8004866 <HAL_DAC_ConfigChannel+0x1a2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004774:	ea49 0903 	orr.w	r9, r9, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004778:	40b4      	lsls	r4, r6
 800477a:	ea44 0409 	orr.w	r4, r4, r9
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800477e:	63fc      	str	r4, [r7, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004786:	40b2      	lsls	r2, r6
 8004788:	ea23 0302 	bic.w	r3, r3, r2
 800478c:	603b      	str	r3, [r7, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800478e:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
  tmpreg1 = hdac->Instance->CR;
 8004792:	6838      	ldr	r0, [r7, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004794:	f640 71fe 	movw	r1, #4094	@ 0xffe
 8004798:	40b1      	lsls	r1, r6
 800479a:	ea20 0001 	bic.w	r0, r0, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800479e:	fa02 f106 	lsl.w	r1, r2, r6
 80047a2:	4301      	orrs	r1, r0
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047a4:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 80047a6:	6039      	str	r1, [r7, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80047a8:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047b0:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80047b2:	20c0      	movs	r0, #192	@ 0xc0
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	40b0      	lsls	r0, r6
 80047b8:	ea22 0200 	bic.w	r2, r2, r0
 80047bc:	603a      	str	r2, [r7, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047c0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80047c4:	40b1      	lsls	r1, r6
 80047c6:	ea22 0201 	bic.w	r2, r2, r1
 80047ca:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047cc:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047ce:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 80047d0:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047d2:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Return function status */
  return HAL_OK;
 80047d4:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80047d6:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 80047d8:	7169      	strb	r1, [r5, #5]
}
 80047da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    connectOnChip = 0x00000000UL;
 80047de:	2200      	movs	r2, #0
 80047e0:	e7a1      	b.n	8004726 <HAL_DAC_ConfigChannel+0x62>
    connectOnChip = DAC_MCR_MODE1_0;
 80047e2:	2201      	movs	r2, #1
 80047e4:	e79f      	b.n	8004726 <HAL_DAC_ConfigChannel+0x62>
    tickstart = HAL_GetTick();
 80047e6:	f7fe ff79 	bl	80036dc <HAL_GetTick>
 80047ea:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 80047ec:	b12e      	cbz	r6, 80047fa <HAL_DAC_ConfigChannel+0x136>
 80047ee:	e015      	b.n	800481c <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047f0:	f7fe ff74 	bl	80036dc <HAL_GetTick>
 80047f4:	1b00      	subs	r0, r0, r4
 80047f6:	2801      	cmp	r0, #1
 80047f8:	d841      	bhi.n	800487e <HAL_DAC_ConfigChannel+0x1ba>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	d4f6      	bmi.n	80047f0 <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 8004802:	2001      	movs	r0, #1
 8004804:	f7fe ff70 	bl	80036e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004808:	682f      	ldr	r7, [r5, #0]
 800480a:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800480e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004810:	e00f      	b.n	8004832 <HAL_DAC_ConfigChannel+0x16e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004812:	f7fe ff63 	bl	80036dc <HAL_GetTick>
 8004816:	1b00      	subs	r0, r0, r4
 8004818:	2801      	cmp	r0, #1
 800481a:	d830      	bhi.n	800487e <HAL_DAC_ConfigChannel+0x1ba>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004820:	2b00      	cmp	r3, #0
 8004822:	dbf6      	blt.n	8004812 <HAL_DAC_ConfigChannel+0x14e>
      HAL_Delay(1U);
 8004824:	2001      	movs	r0, #1
 8004826:	f7fe ff5f 	bl	80036e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800482a:	682f      	ldr	r7, [r5, #0]
 800482c:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004834:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004838:	f8d8 0008 	ldr.w	r0, [r8, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800483c:	f006 0610 	and.w	r6, r6, #16
 8004840:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004844:	40b1      	lsls	r1, r6
 8004846:	40b2      	lsls	r2, r6
 8004848:	ea23 0301 	bic.w	r3, r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	64bb      	str	r3, [r7, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004852:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8004856:	21ff      	movs	r1, #255	@ 0xff
 8004858:	40b1      	lsls	r1, r6
 800485a:	40b2      	lsls	r2, r6
 800485c:	ea23 0301 	bic.w	r3, r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004864:	e742      	b.n	80046ec <HAL_DAC_ConfigChannel+0x28>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004866:	f000 fd97 	bl	8005398 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <HAL_DAC_ConfigChannel+0x1dc>)
 800486c:	4298      	cmp	r0, r3
 800486e:	d90e      	bls.n	800488e <HAL_DAC_ConfigChannel+0x1ca>
  hdac->Instance->MCR = tmpreg1;
 8004870:	682f      	ldr	r7, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004872:	f449 4900 	orr.w	r9, r9, #32768	@ 0x8000
 8004876:	e77f      	b.n	8004778 <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 8004878:	2002      	movs	r0, #2
}
 800487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800487e:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004880:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004882:	f043 0308 	orr.w	r3, r3, #8
 8004886:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8004888:	2003      	movs	r0, #3
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800488a:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 800488c:	e7a5      	b.n	80047da <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_DAC_ConfigChannel+0x1e0>)
  hdac->Instance->MCR = tmpreg1;
 8004890:	682f      	ldr	r7, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004892:	4298      	cmp	r0, r3
 8004894:	f67f af70 	bls.w	8004778 <HAL_DAC_ConfigChannel+0xb4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004898:	f449 4980 	orr.w	r9, r9, #16384	@ 0x4000
 800489c:	e76c      	b.n	8004778 <HAL_DAC_ConfigChannel+0xb4>
 800489e:	bf00      	nop
 80048a0:	09896800 	.word	0x09896800
 80048a4:	04c4b400 	.word	0x04c4b400

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048ac:	680c      	ldr	r4, [r1, #0]
{
 80048ae:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048b0:	2c00      	cmp	r4, #0
 80048b2:	f000 8089 	beq.w	80049c8 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 80048b6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048b8:	f04f 0b01 	mov.w	fp, #1
 80048bc:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80048c0:	ea1e 0a04 	ands.w	sl, lr, r4
 80048c4:	d07b      	beq.n	80049be <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048c6:	684d      	ldr	r5, [r1, #4]
 80048c8:	f005 0203 	and.w	r2, r5, #3
 80048cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d0:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048d2:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d6:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048da:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048de:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048e2:	d974      	bls.n	80049ce <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e4:	2a03      	cmp	r2, #3
 80048e6:	f040 80b0 	bne.w	8004a4a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048ea:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80048ee:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048f2:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048f6:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048f8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80048fc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048fe:	d05e      	beq.n	80049be <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004900:	4f66      	ldr	r7, [pc, #408]	@ (8004a9c <HAL_GPIO_Init+0x1f4>)
 8004902:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	663a      	str	r2, [r7, #96]	@ 0x60
 800490a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800490c:	f002 0201 	and.w	r2, r2, #1
 8004910:	9203      	str	r2, [sp, #12]
 8004912:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004914:	f023 0203 	bic.w	r2, r3, #3
 8004918:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800491c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004920:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004924:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004926:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800492a:	260f      	movs	r6, #15
 800492c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004930:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004934:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004938:	d01d      	beq.n	8004976 <HAL_GPIO_Init+0xce>
 800493a:	4e59      	ldr	r6, [pc, #356]	@ (8004aa0 <HAL_GPIO_Init+0x1f8>)
 800493c:	42b0      	cmp	r0, r6
 800493e:	f000 8097 	beq.w	8004a70 <HAL_GPIO_Init+0x1c8>
 8004942:	4e58      	ldr	r6, [pc, #352]	@ (8004aa4 <HAL_GPIO_Init+0x1fc>)
 8004944:	42b0      	cmp	r0, r6
 8004946:	f000 809a 	beq.w	8004a7e <HAL_GPIO_Init+0x1d6>
 800494a:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8004aac <HAL_GPIO_Init+0x204>
 800494e:	4570      	cmp	r0, lr
 8004950:	f000 8087 	beq.w	8004a62 <HAL_GPIO_Init+0x1ba>
 8004954:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8004ab0 <HAL_GPIO_Init+0x208>
 8004958:	4570      	cmp	r0, lr
 800495a:	f000 8097 	beq.w	8004a8c <HAL_GPIO_Init+0x1e4>
 800495e:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8004ab4 <HAL_GPIO_Init+0x20c>
 8004962:	4570      	cmp	r0, lr
 8004964:	bf0c      	ite	eq
 8004966:	f04f 0e05 	moveq.w	lr, #5
 800496a:	f04f 0e06 	movne.w	lr, #6
 800496e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004972:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004976:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004978:	4a4b      	ldr	r2, [pc, #300]	@ (8004aa8 <HAL_GPIO_Init+0x200>)
 800497a:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800497c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800497e:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004982:	4e49      	ldr	r6, [pc, #292]	@ (8004aa8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004984:	bf54      	ite	pl
 8004986:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004988:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800498c:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800498e:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004990:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004992:	4e45      	ldr	r6, [pc, #276]	@ (8004aa8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004994:	bf54      	ite	pl
 8004996:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004998:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800499c:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 800499e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049a0:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80049a2:	4e41      	ldr	r6, [pc, #260]	@ (8004aa8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 80049a4:	bf54      	ite	pl
 80049a6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80049a8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80049ac:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049ae:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80049b2:	4d3d      	ldr	r5, [pc, #244]	@ (8004aa8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 80049b4:	bf54      	ite	pl
 80049b6:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80049b8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80049bc:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80049be:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049c0:	fa34 f203 	lsrs.w	r2, r4, r3
 80049c4:	f47f af7a 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 80049c8:	b005      	add	sp, #20
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80049ce:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d2:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049d4:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d8:	fa06 f80c 	lsl.w	r8, r6, ip
 80049dc:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80049e0:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80049e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049e8:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ea:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ee:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80049f2:	fa0e fe03 	lsl.w	lr, lr, r3
 80049f6:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80049fa:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80049fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a02:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a06:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a0e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004a10:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a14:	f47f af69 	bne.w	80048ea <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a18:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004a1a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a1e:	f003 0e07 	and.w	lr, r3, #7
 8004a22:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004a26:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a2a:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8004a2e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a32:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a34:	260f      	movs	r6, #15
 8004a36:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a3a:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a3c:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a40:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8004a44:	f8c8 e020 	str.w	lr, [r8, #32]
 8004a48:	e74f      	b.n	80048ea <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8004a4a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a4e:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a50:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a54:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004a58:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8004a5c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a60:	e743      	b.n	80048ea <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a62:	f04f 0e03 	mov.w	lr, #3
 8004a66:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004a6a:	ea47 070c 	orr.w	r7, r7, ip
 8004a6e:	e782      	b.n	8004976 <HAL_GPIO_Init+0xce>
 8004a70:	f04f 0e01 	mov.w	lr, #1
 8004a74:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004a78:	ea47 070c 	orr.w	r7, r7, ip
 8004a7c:	e77b      	b.n	8004976 <HAL_GPIO_Init+0xce>
 8004a7e:	f04f 0e02 	mov.w	lr, #2
 8004a82:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004a86:	ea47 070c 	orr.w	r7, r7, ip
 8004a8a:	e774      	b.n	8004976 <HAL_GPIO_Init+0xce>
 8004a8c:	f04f 0e04 	mov.w	lr, #4
 8004a90:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004a94:	ea47 070c 	orr.w	r7, r7, ip
 8004a98:	e76d      	b.n	8004976 <HAL_GPIO_Init+0xce>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	48000400 	.word	0x48000400
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	48000c00 	.word	0x48000c00
 8004ab0:	48001000 	.word	0x48001000
 8004ab4:	48001400 	.word	0x48001400

08004ab8 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d06f      	beq.n	8004b9c <HAL_OPAMP_Init+0xe4>
{
 8004abc:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004abe:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8004ac2:	2b05      	cmp	r3, #5
{
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004ac8:	d056      	beq.n	8004b78 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004aca:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d052      	beq.n	8004b78 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad2:	4b33      	ldr	r3, [pc, #204]	@ (8004ba0 <HAL_OPAMP_Init+0xe8>)
 8004ad4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	661a      	str	r2, [r3, #96]	@ 0x60
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004ae6:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8004aea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004aee:	b90b      	cbnz	r3, 8004af4 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004af0:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7fd fe1b 	bl	8002730 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004afa:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004afc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004afe:	f023 0220 	bic.w	r2, r3, #32
 8004b02:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004b08:	d039      	beq.n	8004b7e <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004b0a:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8004b0c:	f021 0110 	bic.w	r1, r1, #16
 8004b10:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004b12:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8004b14:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004b16:	432b      	orrs	r3, r5
 8004b18:	4303      	orrs	r3, r0
 8004b1a:	6920      	ldr	r0, [r4, #16]
 8004b1c:	6811      	ldr	r1, [r2, #0]
 8004b1e:	4303      	orrs	r3, r0
 8004b20:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004b22:	4303      	orrs	r3, r0
 8004b24:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004b26:	4303      	orrs	r3, r0
 8004b28:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004b2a:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8004b2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004b30:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004b34:	481b      	ldr	r0, [pc, #108]	@ (8004ba4 <HAL_OPAMP_Init+0xec>)
 8004b36:	4008      	ands	r0, r1
 8004b38:	7d21      	ldrb	r1, [r4, #20]
 8004b3a:	f1a1 0101 	sub.w	r1, r1, #1
 8004b3e:	fab1 f181 	clz	r1, r1
 8004b42:	4303      	orrs	r3, r0
 8004b44:	0949      	lsrs	r1, r1, #5
 8004b46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b4a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004b4c:	6993      	ldr	r3, [r2, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	db09      	blt.n	8004b66 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004b52:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8004b56:	6991      	ldr	r1, [r2, #24]
 8004b58:	4303      	orrs	r3, r0
 8004b5a:	6a20      	ldr	r0, [r4, #32]
 8004b5c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004b60:	4303      	orrs	r3, r0
 8004b62:	430b      	orrs	r3, r1
 8004b64:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004b66:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8004b6a:	b913      	cbnz	r3, 8004b72 <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004b72:	2000      	movs	r0, #0
  }
}
 8004b74:	b003      	add	sp, #12
 8004b76:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004b78:	2001      	movs	r0, #1
}
 8004b7a:	b003      	add	sp, #12
 8004b7c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004b7e:	f021 0110 	bic.w	r1, r1, #16
 8004b82:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004b84:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8004b86:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004b88:	4303      	orrs	r3, r0
 8004b8a:	6920      	ldr	r0, [r4, #16]
 8004b8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004b8e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8004b90:	4303      	orrs	r3, r0
 8004b92:	430b      	orrs	r3, r1
 8004b94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	432b      	orrs	r3, r5
 8004b9a:	e7c6      	b.n	8004b2a <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
}
 8004b9e:	4770      	bx	lr
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	e0003e11 	.word	0xe0003e11

08004ba8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ba8:	4a35      	ldr	r2, [pc, #212]	@ (8004c80 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004baa:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bac:	b960      	cbnz	r0, 8004bc8 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bba:	d01b      	beq.n	8004bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004bc4:	2000      	movs	r0, #0
}
 8004bc6:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bc8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004bcc:	d006      	beq.n	8004bdc <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bd6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004bd8:	2000      	movs	r0, #0
}
 8004bda:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004be8:	d029      	beq.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bf2:	e7f1      	b.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bfc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bfe:	4821      	ldr	r0, [pc, #132]	@ (8004c84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c00:	4921      	ldr	r1, [pc, #132]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c0a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c0c:	6803      	ldr	r3, [r0, #0]
 8004c0e:	2032      	movs	r0, #50	@ 0x32
 8004c10:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c14:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c16:	fba1 1303 	umull	r1, r3, r1, r3
 8004c1a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c1e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c22:	d506      	bpl.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c24:	e000      	b.n	8004c28 <HAL_PWREx_ControlVoltageScaling+0x80>
 8004c26:	b123      	cbz	r3, 8004c32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c28:	6951      	ldr	r1, [r2, #20]
 8004c2a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004c2c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c30:	d4f9      	bmi.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c32:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	055b      	lsls	r3, r3, #21
 8004c38:	d5ce      	bpl.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c46:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c48:	480e      	ldr	r0, [pc, #56]	@ (8004c84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c4a:	490f      	ldr	r1, [pc, #60]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c54:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c56:	6803      	ldr	r3, [r0, #0]
 8004c58:	2032      	movs	r0, #50	@ 0x32
 8004c5a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5e:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c60:	fba1 1303 	umull	r1, r3, r1, r3
 8004c64:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c66:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c68:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c6c:	d5e1      	bpl.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c6e:	e001      	b.n	8004c74 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0de      	beq.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c74:	6951      	ldr	r1, [r2, #20]
 8004c76:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004c78:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7c:	d5d9      	bpl.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004c7e:	e7f7      	b.n	8004c70 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8004c80:	40007000 	.word	0x40007000
 8004c84:	20000694 	.word	0x20000694
 8004c88:	431bde83 	.word	0x431bde83

08004c8c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c8c:	4a02      	ldr	r2, [pc, #8]	@ (8004c98 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004c8e:	6893      	ldr	r3, [r2, #8]
 8004c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c94:	6093      	str	r3, [r2, #8]
}
 8004c96:	4770      	bx	lr
 8004c98:	40007000 	.word	0x40007000

08004c9c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f000 8239 	beq.w	8005114 <HAL_RCC_OscConfig+0x478>
{
 8004ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca6:	6803      	ldr	r3, [r0, #0]
 8004ca8:	07d9      	lsls	r1, r3, #31
{
 8004caa:	b082      	sub	sp, #8
 8004cac:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cae:	d512      	bpl.n	8004cd6 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb0:	49a3      	ldr	r1, [pc, #652]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004cb2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cba:	2a0c      	cmp	r2, #12
 8004cbc:	f000 80d6 	beq.w	8004e6c <HAL_RCC_OscConfig+0x1d0>
 8004cc0:	2a08      	cmp	r2, #8
 8004cc2:	f040 80d8 	bne.w	8004e76 <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc6:	4a9e      	ldr	r2, [pc, #632]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	0392      	lsls	r2, r2, #14
 8004ccc:	d503      	bpl.n	8004cd6 <HAL_RCC_OscConfig+0x3a>
 8004cce:	6862      	ldr	r2, [r4, #4]
 8004cd0:	2a00      	cmp	r2, #0
 8004cd2:	f000 81a4 	beq.w	800501e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	079a      	lsls	r2, r3, #30
 8004cd8:	d522      	bpl.n	8004d20 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cda:	4a99      	ldr	r2, [pc, #612]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004cdc:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cde:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce0:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	f000 80fe 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x24a>
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	f040 8100 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf0:	4b93      	ldr	r3, [pc, #588]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	055b      	lsls	r3, r3, #21
 8004cf6:	d503      	bpl.n	8004d00 <HAL_RCC_OscConfig+0x64>
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 818f 	beq.w	800501e <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4a8f      	ldr	r2, [pc, #572]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004d02:	6920      	ldr	r0, [r4, #16]
 8004d04:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d06:	498f      	ldr	r1, [pc, #572]	@ (8004f44 <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004d0c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004d10:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d12:	6808      	ldr	r0, [r1, #0]
 8004d14:	f7fe fca0 	bl	8003658 <HAL_InitTick>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f040 8180 	bne.w	800501e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	071a      	lsls	r2, r3, #28
 8004d22:	d519      	bpl.n	8004d58 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d24:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d26:	4d86      	ldr	r5, [pc, #536]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80c8 	beq.w	8004ebe <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 8004d2e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3a:	f7fe fccf 	bl	80036dc <HAL_GetTick>
 8004d3e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d40:	e005      	b.n	8004d4e <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d42:	f7fe fccb 	bl	80036dc <HAL_GetTick>
 8004d46:	1b80      	subs	r0, r0, r6
 8004d48:	2802      	cmp	r0, #2
 8004d4a:	f200 8118 	bhi.w	8004f7e <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d4e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004d52:	079b      	lsls	r3, r3, #30
 8004d54:	d5f5      	bpl.n	8004d42 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	075d      	lsls	r5, r3, #29
 8004d5a:	d541      	bpl.n	8004de0 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d5c:	4b78      	ldr	r3, [pc, #480]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004d5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d60:	00d0      	lsls	r0, r2, #3
 8004d62:	f100 8110 	bmi.w	8004f86 <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d66:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d78:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d7a:	4e73      	ldr	r6, [pc, #460]	@ (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	6833      	ldr	r3, [r6, #0]
 8004d7e:	05d9      	lsls	r1, r3, #23
 8004d80:	f140 812f 	bpl.w	8004fe2 <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	68a3      	ldr	r3, [r4, #8]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	f000 80ff 	beq.w	8004f8a <HAL_RCC_OscConfig+0x2ee>
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	f000 8185 	beq.w	800509c <HAL_RCC_OscConfig+0x400>
 8004d92:	4e6b      	ldr	r6, [pc, #428]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004d94:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8004da0:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8004da4:	f022 0204 	bic.w	r2, r2, #4
 8004da8:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f040 80f3 	bne.w	8004f98 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fe fc93 	bl	80036dc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004dba:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dbc:	e005      	b.n	8004dca <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fe fc8d 	bl	80036dc <HAL_GetTick>
 8004dc2:	1bc0      	subs	r0, r0, r7
 8004dc4:	4540      	cmp	r0, r8
 8004dc6:	f200 80da 	bhi.w	8004f7e <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dca:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8004dce:	0799      	lsls	r1, r3, #30
 8004dd0:	d4f5      	bmi.n	8004dbe <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd2:	b125      	cbz	r5, 8004dde <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004dd6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	069a      	lsls	r2, r3, #26
 8004de2:	d518      	bpl.n	8004e16 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de4:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de6:	4d56      	ldr	r5, [pc, #344]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80e6 	beq.w	8004fba <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 8004dee:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fc6f 	bl	80036dc <HAL_GetTick>
 8004dfe:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e00:	e005      	b.n	8004e0e <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e02:	f7fe fc6b 	bl	80036dc <HAL_GetTick>
 8004e06:	1b80      	subs	r0, r0, r6
 8004e08:	2802      	cmp	r0, #2
 8004e0a:	f200 80b8 	bhi.w	8004f7e <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e0e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004e12:	079b      	lsls	r3, r3, #30
 8004e14:	d5f5      	bpl.n	8004e02 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e16:	69e3      	ldr	r3, [r4, #28]
 8004e18:	b323      	cbz	r3, 8004e64 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e1a:	4d49      	ldr	r5, [pc, #292]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004e1c:	68aa      	ldr	r2, [r5, #8]
 8004e1e:	f002 020c 	and.w	r2, r2, #12
 8004e22:	2a0c      	cmp	r2, #12
 8004e24:	f000 8148 	beq.w	80050b8 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e28:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e30:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e32:	f000 80f6 	beq.w	8005022 <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e36:	68eb      	ldr	r3, [r5, #12]
 8004e38:	f023 0303 	bic.w	r3, r3, #3
 8004e3c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e3e:	68eb      	ldr	r3, [r5, #12]
 8004e40:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e48:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7fe fc47 	bl	80036dc <HAL_GetTick>
 8004e4e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e50:	e005      	b.n	8004e5e <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fe fc43 	bl	80036dc <HAL_GetTick>
 8004e56:	1b00      	subs	r0, r0, r4
 8004e58:	2802      	cmp	r0, #2
 8004e5a:	f200 8090 	bhi.w	8004f7e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e5e:	682b      	ldr	r3, [r5, #0]
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	d4f6      	bmi.n	8004e52 <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 8004e64:	2000      	movs	r0, #0
}
 8004e66:	b002      	add	sp, #8
 8004e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e6c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e70:	2903      	cmp	r1, #3
 8004e72:	f43f af28 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7c:	d055      	beq.n	8004f2a <HAL_RCC_OscConfig+0x28e>
 8004e7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e82:	f000 80bf 	beq.w	8005004 <HAL_RCC_OscConfig+0x368>
 8004e86:	4d2e      	ldr	r5, [pc, #184]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004e88:	682a      	ldr	r2, [r5, #0]
 8004e8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e8e:	602a      	str	r2, [r5, #0]
 8004e90:	682a      	ldr	r2, [r5, #0]
 8004e92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e96:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d14b      	bne.n	8004f34 <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fc1e 	bl	80036dc <HAL_GetTick>
 8004ea0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ea2:	e004      	b.n	8004eae <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fe fc1a 	bl	80036dc <HAL_GetTick>
 8004ea8:	1b80      	subs	r0, r0, r6
 8004eaa:	2864      	cmp	r0, #100	@ 0x64
 8004eac:	d867      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eae:	682b      	ldr	r3, [r5, #0]
 8004eb0:	0399      	lsls	r1, r3, #14
 8004eb2:	d4f7      	bmi.n	8004ea4 <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	079a      	lsls	r2, r3, #30
 8004eb8:	f57f af32 	bpl.w	8004d20 <HAL_RCC_OscConfig+0x84>
 8004ebc:	e70d      	b.n	8004cda <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8004ebe:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004eca:	f7fe fc07 	bl	80036dc <HAL_GetTick>
 8004ece:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed0:	e004      	b.n	8004edc <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fe fc03 	bl	80036dc <HAL_GetTick>
 8004ed6:	1b80      	subs	r0, r0, r6
 8004ed8:	2802      	cmp	r0, #2
 8004eda:	d850      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004edc:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004ee0:	079f      	lsls	r7, r3, #30
 8004ee2:	d4f6      	bmi.n	8004ed2 <HAL_RCC_OscConfig+0x236>
 8004ee4:	e737      	b.n	8004d56 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eea:	2a02      	cmp	r2, #2
 8004eec:	f43f af00 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004ef2:	4d13      	ldr	r5, [pc, #76]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d032      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f00:	f7fe fbec 	bl	80036dc <HAL_GetTick>
 8004f04:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f06:	e004      	b.n	8004f12 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f08:	f7fe fbe8 	bl	80036dc <HAL_GetTick>
 8004f0c:	1b80      	subs	r0, r0, r6
 8004f0e:	2802      	cmp	r0, #2
 8004f10:	d835      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	055f      	lsls	r7, r3, #21
 8004f16:	d5f7      	bpl.n	8004f08 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	686b      	ldr	r3, [r5, #4]
 8004f1a:	6922      	ldr	r2, [r4, #16]
 8004f1c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f24:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	e6fa      	b.n	8004d20 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2a:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
 8004f2c:	6813      	ldr	r3, [r2, #0]
 8004f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f34:	f7fe fbd2 	bl	80036dc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f38:	4e01      	ldr	r6, [pc, #4]	@ (8004f40 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8004f3a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f3c:	e00b      	b.n	8004f56 <HAL_RCC_OscConfig+0x2ba>
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	2000069c 	.word	0x2000069c
 8004f48:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fe fbc6 	bl	80036dc <HAL_GetTick>
 8004f50:	1b40      	subs	r0, r0, r5
 8004f52:	2864      	cmp	r0, #100	@ 0x64
 8004f54:	d813      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f56:	6833      	ldr	r3, [r6, #0]
 8004f58:	039f      	lsls	r7, r3, #14
 8004f5a:	d5f7      	bpl.n	8004f4c <HAL_RCC_OscConfig+0x2b0>
 8004f5c:	e7aa      	b.n	8004eb4 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	682b      	ldr	r3, [r5, #0]
 8004f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f66:	f7fe fbb9 	bl	80036dc <HAL_GetTick>
 8004f6a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	0559      	lsls	r1, r3, #21
 8004f70:	f57f aed5 	bpl.w	8004d1e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fe fbb2 	bl	80036dc <HAL_GetTick>
 8004f78:	1b80      	subs	r0, r0, r6
 8004f7a:	2802      	cmp	r0, #2
 8004f7c:	d9f6      	bls.n	8004f6c <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 8004f7e:	2003      	movs	r0, #3
}
 8004f80:	b002      	add	sp, #8
 8004f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004f86:	2500      	movs	r5, #0
 8004f88:	e6f7      	b.n	8004d7a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8a:	4a63      	ldr	r2, [pc, #396]	@ (8005118 <HAL_RCC_OscConfig+0x47c>)
 8004f8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004f98:	f7fe fba0 	bl	80036dc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9c:	4f5e      	ldr	r7, [pc, #376]	@ (8005118 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 8004f9e:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa4:	e004      	b.n	8004fb0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fe fb99 	bl	80036dc <HAL_GetTick>
 8004faa:	1b80      	subs	r0, r0, r6
 8004fac:	4540      	cmp	r0, r8
 8004fae:	d8e6      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004fb4:	079b      	lsls	r3, r3, #30
 8004fb6:	d5f6      	bpl.n	8004fa6 <HAL_RCC_OscConfig+0x30a>
 8004fb8:	e70b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8004fba:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004fc6:	f7fe fb89 	bl	80036dc <HAL_GetTick>
 8004fca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fce:	f7fe fb85 	bl	80036dc <HAL_GetTick>
 8004fd2:	1b80      	subs	r0, r0, r6
 8004fd4:	2802      	cmp	r0, #2
 8004fd6:	d8d2      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fd8:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004fdc:	079f      	lsls	r7, r3, #30
 8004fde:	d4f6      	bmi.n	8004fce <HAL_RCC_OscConfig+0x332>
 8004fe0:	e719      	b.n	8004e16 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe2:	6833      	ldr	r3, [r6, #0]
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004fea:	f7fe fb77 	bl	80036dc <HAL_GetTick>
 8004fee:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	05da      	lsls	r2, r3, #23
 8004ff4:	f53f aec6 	bmi.w	8004d84 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff8:	f7fe fb70 	bl	80036dc <HAL_GetTick>
 8004ffc:	1bc0      	subs	r0, r0, r7
 8004ffe:	2802      	cmp	r0, #2
 8005000:	d9f6      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x354>
 8005002:	e7bc      	b.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005008:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800501a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800501c:	e78a      	b.n	8004f34 <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 800501e:	2001      	movs	r0, #1
 8005020:	e721      	b.n	8004e66 <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 8005022:	f7fe fb5b 	bl	80036dc <HAL_GetTick>
 8005026:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	e004      	b.n	8005034 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502a:	f7fe fb57 	bl	80036dc <HAL_GetTick>
 800502e:	1b80      	subs	r0, r0, r6
 8005030:	2802      	cmp	r0, #2
 8005032:	d8a4      	bhi.n	8004f7e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	0199      	lsls	r1, r3, #6
 8005038:	d4f7      	bmi.n	800502a <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800503a:	68e9      	ldr	r1, [r5, #12]
 800503c:	4b37      	ldr	r3, [pc, #220]	@ (800511c <HAL_RCC_OscConfig+0x480>)
 800503e:	6a22      	ldr	r2, [r4, #32]
 8005040:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005042:	4e35      	ldr	r6, [pc, #212]	@ (8005118 <HAL_RCC_OscConfig+0x47c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005044:	400b      	ands	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 800504c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005050:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005054:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8005058:	3801      	subs	r0, #1
 800505a:	0849      	lsrs	r1, r1, #1
 800505c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005060:	3901      	subs	r1, #1
 8005062:	0852      	lsrs	r2, r2, #1
 8005064:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005068:	3a01      	subs	r2, #1
 800506a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800506e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005076:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005078:	68eb      	ldr	r3, [r5, #12]
 800507a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005080:	f7fe fb2c 	bl	80036dc <HAL_GetTick>
 8005084:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	e005      	b.n	8005094 <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005088:	f7fe fb28 	bl	80036dc <HAL_GetTick>
 800508c:	1b00      	subs	r0, r0, r4
 800508e:	2802      	cmp	r0, #2
 8005090:	f63f af75 	bhi.w	8004f7e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005094:	6833      	ldr	r3, [r6, #0]
 8005096:	019a      	lsls	r2, r3, #6
 8005098:	d5f6      	bpl.n	8005088 <HAL_RCC_OscConfig+0x3ec>
 800509a:	e6e3      	b.n	8004e64 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800509c:	4b1e      	ldr	r3, [pc, #120]	@ (8005118 <HAL_RCC_OscConfig+0x47c>)
 800509e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050a2:	f042 0204 	orr.w	r2, r2, #4
 80050a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80050aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b6:	e76f      	b.n	8004f98 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d0b0      	beq.n	800501e <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 80050bc:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	6a22      	ldr	r2, [r4, #32]
 80050c0:	f003 0103 	and.w	r1, r3, #3
 80050c4:	4291      	cmp	r1, r2
 80050c6:	d1aa      	bne.n	800501e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80050ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050ce:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80050d4:	d1a3      	bne.n	800501e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050d6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80050d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80050e0:	d19d      	bne.n	800501e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80050e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80050ec:	d197      	bne.n	800501e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80050f0:	0852      	lsrs	r2, r2, #1
 80050f2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80050f6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050f8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80050fc:	d18f      	bne.n	800501e <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005100:	0852      	lsrs	r2, r2, #1
 8005102:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005106:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005108:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800510c:	bf14      	ite	ne
 800510e:	2001      	movne	r0, #1
 8005110:	2000      	moveq	r0, #0
 8005112:	e6a8      	b.n	8004e66 <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 8005114:	2001      	movs	r0, #1
}
 8005116:	4770      	bx	lr
 8005118:	40021000 	.word	0x40021000
 800511c:	019f800c 	.word	0x019f800c

08005120 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005120:	4b18      	ldr	r3, [pc, #96]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x64>)
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	f002 020c 	and.w	r2, r2, #12
 8005128:	2a04      	cmp	r2, #4
 800512a:	d026      	beq.n	800517a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	f002 020c 	and.w	r2, r2, #12
 8005132:	2a08      	cmp	r2, #8
 8005134:	d023      	beq.n	800517e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	f002 020c 	and.w	r2, r2, #12
 800513c:	2a0c      	cmp	r2, #12
 800513e:	d001      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005140:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005142:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005144:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005146:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005148:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800514a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800514e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005150:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005154:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005158:	bf0c      	ite	eq
 800515a:	4b0b      	ldreq	r3, [pc, #44]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800515c:	4b0b      	ldrne	r3, [pc, #44]	@ (800518c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800515e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005160:	fbb3 f3f2 	udiv	r3, r3, r2
 8005164:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005168:	4b06      	ldr	r3, [pc, #24]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x64>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005170:	3301      	adds	r3, #1
 8005172:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005174:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005178:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800517a:	4804      	ldr	r0, [pc, #16]	@ (800518c <HAL_RCC_GetSysClockFreq+0x6c>)
 800517c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800517e:	4802      	ldr	r0, [pc, #8]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x68>)
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	007a1200 	.word	0x007a1200
 800518c:	00f42400 	.word	0x00f42400

08005190 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005190:	2800      	cmp	r0, #0
 8005192:	f000 80ee 	beq.w	8005372 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005196:	4a78      	ldr	r2, [pc, #480]	@ (8005378 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	6813      	ldr	r3, [r2, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	428b      	cmp	r3, r1
 80051a4:	460d      	mov	r5, r1
 80051a6:	4604      	mov	r4, r0
 80051a8:	d20c      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	428b      	cmp	r3, r1
 80051bc:	d002      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80051be:	2001      	movs	r0, #1
}
 80051c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	07df      	lsls	r7, r3, #31
 80051c8:	d569      	bpl.n	800529e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ca:	6867      	ldr	r7, [r4, #4]
 80051cc:	2f03      	cmp	r7, #3
 80051ce:	f000 80a0 	beq.w	8005312 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d2:	4b6a      	ldr	r3, [pc, #424]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d4:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d6:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d8:	f000 8097 	beq.w	800530a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051dc:	055b      	lsls	r3, r3, #21
 80051de:	d5ee      	bpl.n	80051be <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051e0:	f7ff ff9e 	bl	8005120 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80051e4:	4b66      	ldr	r3, [pc, #408]	@ (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051e6:	4298      	cmp	r0, r3
 80051e8:	f240 80c0 	bls.w	800536c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051ec:	4a63      	ldr	r2, [pc, #396]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 80051ee:	6893      	ldr	r3, [r2, #8]
 80051f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051fa:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051fe:	4e5f      	ldr	r6, [pc, #380]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 8005200:	68b3      	ldr	r3, [r6, #8]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	433b      	orrs	r3, r7
 8005208:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800520a:	f7fe fa67 	bl	80036dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005212:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005214:	e004      	b.n	8005220 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005216:	f7fe fa61 	bl	80036dc <HAL_GetTick>
 800521a:	1bc0      	subs	r0, r0, r7
 800521c:	4540      	cmp	r0, r8
 800521e:	d871      	bhi.n	8005304 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005220:	68b3      	ldr	r3, [r6, #8]
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800522c:	d1f3      	bne.n	8005216 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	079f      	lsls	r7, r3, #30
 8005232:	d436      	bmi.n	80052a2 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	d003      	beq.n	8005242 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800523a:	68b3      	ldr	r3, [r6, #8]
 800523c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005240:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005242:	4e4d      	ldr	r6, [pc, #308]	@ (8005378 <HAL_RCC_ClockConfig+0x1e8>)
 8005244:	6833      	ldr	r3, [r6, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	42ab      	cmp	r3, r5
 800524c:	d846      	bhi.n	80052dc <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	075a      	lsls	r2, r3, #29
 8005252:	d506      	bpl.n	8005262 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005254:	4949      	ldr	r1, [pc, #292]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 8005256:	68e0      	ldr	r0, [r4, #12]
 8005258:	688a      	ldr	r2, [r1, #8]
 800525a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800525e:	4302      	orrs	r2, r0
 8005260:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005262:	071b      	lsls	r3, r3, #28
 8005264:	d507      	bpl.n	8005276 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4a45      	ldr	r2, [pc, #276]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 8005268:	6921      	ldr	r1, [r4, #16]
 800526a:	6893      	ldr	r3, [r2, #8]
 800526c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005270:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005274:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005276:	f7ff ff53 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 800527a:	4a40      	ldr	r2, [pc, #256]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 800527c:	4c41      	ldr	r4, [pc, #260]	@ (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 800527e:	6892      	ldr	r2, [r2, #8]
 8005280:	4941      	ldr	r1, [pc, #260]	@ (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005282:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005286:	4603      	mov	r3, r0
 8005288:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800528a:	4840      	ldr	r0, [pc, #256]	@ (800538c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800528c:	f002 021f 	and.w	r2, r2, #31
 8005290:	40d3      	lsrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005294:	6800      	ldr	r0, [r0, #0]
}
 8005296:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800529a:	f7fe b9dd 	b.w	8003658 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529e:	079e      	lsls	r6, r3, #30
 80052a0:	d5cf      	bpl.n	8005242 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a2:	0758      	lsls	r0, r3, #29
 80052a4:	d504      	bpl.n	80052b0 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a6:	4935      	ldr	r1, [pc, #212]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80052ae:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b0:	0719      	lsls	r1, r3, #28
 80052b2:	d506      	bpl.n	80052c2 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052b4:	4a31      	ldr	r2, [pc, #196]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 80052b6:	6893      	ldr	r3, [r2, #8]
 80052b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052bc:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052c0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c2:	4a2e      	ldr	r2, [pc, #184]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 80052c4:	68a1      	ldr	r1, [r4, #8]
 80052c6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c8:	4e2b      	ldr	r6, [pc, #172]	@ (8005378 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	42ab      	cmp	r3, r5
 80052da:	d9b8      	bls.n	800524e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	f023 030f 	bic.w	r3, r3, #15
 80052e2:	432b      	orrs	r3, r5
 80052e4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80052e6:	f7fe f9f9 	bl	80036dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ea:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80052ee:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	42ab      	cmp	r3, r5
 80052f8:	d0a9      	beq.n	800524e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fa:	f7fe f9ef 	bl	80036dc <HAL_GetTick>
 80052fe:	1bc0      	subs	r0, r0, r7
 8005300:	4540      	cmp	r0, r8
 8005302:	d9f5      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005304:	2003      	movs	r0, #3
}
 8005306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530a:	039a      	lsls	r2, r3, #14
 800530c:	f53f af68 	bmi.w	80051e0 <HAL_RCC_ClockConfig+0x50>
 8005310:	e755      	b.n	80051be <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005312:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
 8005314:	6811      	ldr	r1, [r2, #0]
 8005316:	0188      	lsls	r0, r1, #6
 8005318:	f57f af51 	bpl.w	80051be <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800531c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800531e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005320:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8005322:	4e17      	ldr	r6, [pc, #92]	@ (8005380 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005324:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005328:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800532a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800532e:	bf0c      	ite	eq
 8005330:	4817      	ldreq	r0, [pc, #92]	@ (8005390 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005332:	4818      	ldrne	r0, [pc, #96]	@ (8005394 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005334:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005336:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800533a:	4810      	ldr	r0, [pc, #64]	@ (800537c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800533c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8005340:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005344:	68c1      	ldr	r1, [r0, #12]
 8005346:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800534a:	3101      	adds	r1, #1
 800534c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800534e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8005352:	42b2      	cmp	r2, r6
 8005354:	d90a      	bls.n	800536c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005356:	6882      	ldr	r2, [r0, #8]
 8005358:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 800535c:	f43f af46 	beq.w	80051ec <HAL_RCC_ClockConfig+0x5c>
 8005360:	0799      	lsls	r1, r3, #30
 8005362:	d503      	bpl.n	800536c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005364:	68a3      	ldr	r3, [r4, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f43f af40 	beq.w	80051ec <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800536c:	f04f 0900 	mov.w	r9, #0
 8005370:	e745      	b.n	80051fe <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005372:	2001      	movs	r0, #1
}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40022000 	.word	0x40022000
 800537c:	40021000 	.word	0x40021000
 8005380:	04c4b400 	.word	0x04c4b400
 8005384:	08008cec 	.word	0x08008cec
 8005388:	20000694 	.word	0x20000694
 800538c:	2000069c 	.word	0x2000069c
 8005390:	007a1200 	.word	0x007a1200
 8005394:	00f42400 	.word	0x00f42400

08005398 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005398:	4b01      	ldr	r3, [pc, #4]	@ (80053a0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000694 	.word	0x20000694

080053a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053a4:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80053a6:	4a06      	ldr	r2, [pc, #24]	@ (80053c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80053a8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80053aa:	4906      	ldr	r1, [pc, #24]	@ (80053c4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053b0:	6808      	ldr	r0, [r1, #0]
 80053b2:	5cd3      	ldrb	r3, [r2, r3]
 80053b4:	f003 031f 	and.w	r3, r3, #31
}
 80053b8:	40d8      	lsrs	r0, r3
 80053ba:	4770      	bx	lr
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08008ce4 	.word	0x08008ce4
 80053c4:	20000694 	.word	0x20000694

080053c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80053ca:	4a06      	ldr	r2, [pc, #24]	@ (80053e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053cc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80053ce:	4906      	ldr	r1, [pc, #24]	@ (80053e8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053d0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	f003 031f 	and.w	r3, r3, #31
}
 80053dc:	40d8      	lsrs	r0, r3
 80053de:	4770      	bx	lr
 80053e0:	40021000 	.word	0x40021000
 80053e4:	08008ce4 	.word	0x08008ce4
 80053e8:	20000694 	.word	0x20000694

080053ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f0:	6803      	ldr	r3, [r0, #0]
{
 80053f2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f4:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 80053f8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053fa:	d052      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80053fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005400:	00d5      	lsls	r5, r2, #3
 8005402:	f140 8108 	bpl.w	8005616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 8005406:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005408:	4d9f      	ldr	r5, [pc, #636]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800540a:	682b      	ldr	r3, [r5, #0]
 800540c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005410:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005412:	f7fe f963 	bl	80036dc <HAL_GetTick>
 8005416:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005418:	e005      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541a:	f7fe f95f 	bl	80036dc <HAL_GetTick>
 800541e:	1b83      	subs	r3, r0, r6
 8005420:	2b02      	cmp	r3, #2
 8005422:	f200 8103 	bhi.w	800562c <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	05d8      	lsls	r0, r3, #23
 800542a:	d5f6      	bpl.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800542c:	4d95      	ldr	r5, [pc, #596]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800542e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005430:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005434:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005438:	d026      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800543a:	4293      	cmp	r3, r2
 800543c:	d024      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800543e:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005442:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800544e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005456:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800545a:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800545e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005460:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005464:	d510      	bpl.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fe f939 	bl	80036dc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800546e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005470:	e005      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fe f933 	bl	80036dc <HAL_GetTick>
 8005476:	1b80      	subs	r0, r0, r6
 8005478:	4540      	cmp	r0, r8
 800547a:	f200 80d7 	bhi.w	800562c <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005482:	079b      	lsls	r3, r3, #30
 8005484:	d5f5      	bpl.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005486:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005488:	497e      	ldr	r1, [pc, #504]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800548a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800548e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005498:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800549a:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 800549c:	2f00      	cmp	r7, #0
 800549e:	f040 80ca 	bne.w	8005636 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054a2:	07de      	lsls	r6, r3, #31
 80054a4:	d508      	bpl.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054a6:	4977      	ldr	r1, [pc, #476]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80054a8:	6865      	ldr	r5, [r4, #4]
 80054aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054ae:	f022 0203 	bic.w	r2, r2, #3
 80054b2:	432a      	orrs	r2, r5
 80054b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054b8:	079d      	lsls	r5, r3, #30
 80054ba:	d508      	bpl.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054bc:	4971      	ldr	r1, [pc, #452]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80054be:	68a5      	ldr	r5, [r4, #8]
 80054c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054c4:	f022 020c 	bic.w	r2, r2, #12
 80054c8:	432a      	orrs	r2, r5
 80054ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ce:	0759      	lsls	r1, r3, #29
 80054d0:	d508      	bpl.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d2:	496c      	ldr	r1, [pc, #432]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80054d4:	68e5      	ldr	r5, [r4, #12]
 80054d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054da:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80054de:	432a      	orrs	r2, r5
 80054e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054e4:	071a      	lsls	r2, r3, #28
 80054e6:	d508      	bpl.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e8:	4966      	ldr	r1, [pc, #408]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80054ea:	6925      	ldr	r5, [r4, #16]
 80054ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054f0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80054f4:	432a      	orrs	r2, r5
 80054f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054fa:	069f      	lsls	r7, r3, #26
 80054fc:	d508      	bpl.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fe:	4961      	ldr	r1, [pc, #388]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005500:	6965      	ldr	r5, [r4, #20]
 8005502:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005506:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800550a:	432a      	orrs	r2, r5
 800550c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005510:	065e      	lsls	r6, r3, #25
 8005512:	d508      	bpl.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005514:	495b      	ldr	r1, [pc, #364]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005516:	69a5      	ldr	r5, [r4, #24]
 8005518:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800551c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005520:	432a      	orrs	r2, r5
 8005522:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005526:	061d      	lsls	r5, r3, #24
 8005528:	d508      	bpl.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800552a:	4956      	ldr	r1, [pc, #344]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800552c:	69e5      	ldr	r5, [r4, #28]
 800552e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005532:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005536:	432a      	orrs	r2, r5
 8005538:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800553c:	05d9      	lsls	r1, r3, #23
 800553e:	d508      	bpl.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005540:	4950      	ldr	r1, [pc, #320]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005542:	6a25      	ldr	r5, [r4, #32]
 8005544:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005548:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800554c:	432a      	orrs	r2, r5
 800554e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005552:	059a      	lsls	r2, r3, #22
 8005554:	d508      	bpl.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005556:	494b      	ldr	r1, [pc, #300]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005558:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800555a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800555e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005562:	432a      	orrs	r2, r5
 8005564:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005568:	055f      	lsls	r7, r3, #21
 800556a:	d50b      	bpl.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800556c:	4945      	ldr	r1, [pc, #276]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800556e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005570:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005574:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005578:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800557a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800557e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005582:	d05e      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005584:	051e      	lsls	r6, r3, #20
 8005586:	d50b      	bpl.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005588:	493e      	ldr	r1, [pc, #248]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800558a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800558c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005590:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005594:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005596:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800559a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800559e:	d055      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055a0:	04dd      	lsls	r5, r3, #19
 80055a2:	d50b      	bpl.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055a4:	4937      	ldr	r1, [pc, #220]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80055a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80055a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80055ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80055b0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055b2:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055b6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055ba:	d04c      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055bc:	0499      	lsls	r1, r3, #18
 80055be:	d50b      	bpl.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c0:	4930      	ldr	r1, [pc, #192]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80055c2:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80055c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80055c8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80055cc:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ce:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055d6:	d043      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d8:	045a      	lsls	r2, r3, #17
 80055da:	d50b      	bpl.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055dc:	4929      	ldr	r1, [pc, #164]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80055de:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80055e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80055e4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80055e8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ea:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f2:	d03a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	d50b      	bpl.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055f8:	4a22      	ldr	r2, [pc, #136]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80055fa:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80055fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005600:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005604:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005606:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800560a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800560e:	d031      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 8005610:	b002      	add	sp, #8
 8005612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005616:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005618:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800561c:	659a      	str	r2, [r3, #88]	@ 0x58
 800561e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005628:	2701      	movs	r7, #1
 800562a:	e6ed      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800562c:	6823      	ldr	r3, [r4, #0]
        status = ret;
 800562e:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8005630:	2f00      	cmp	r7, #0
 8005632:	f43f af36 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005636:	4913      	ldr	r1, [pc, #76]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005638:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800563a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800563e:	658a      	str	r2, [r1, #88]	@ 0x58
 8005640:	e72f      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005642:	68ca      	ldr	r2, [r1, #12]
 8005644:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005648:	60ca      	str	r2, [r1, #12]
 800564a:	e79b      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	68ca      	ldr	r2, [r1, #12]
 800564e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005652:	60ca      	str	r2, [r1, #12]
 8005654:	e7a4      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005656:	68ca      	ldr	r2, [r1, #12]
 8005658:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800565c:	60ca      	str	r2, [r1, #12]
 800565e:	e7ad      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005660:	68ca      	ldr	r2, [r1, #12]
 8005662:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005666:	60ca      	str	r2, [r1, #12]
 8005668:	e7b6      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800566a:	68ca      	ldr	r2, [r1, #12]
 800566c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005670:	60ca      	str	r2, [r1, #12]
 8005672:	e7bf      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005674:	68d3      	ldr	r3, [r2, #12]
 8005676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800567a:	60d3      	str	r3, [r2, #12]
}
 800567c:	b002      	add	sp, #8
 800567e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	40007000 	.word	0x40007000

0800568c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800568c:	6a03      	ldr	r3, [r0, #32]
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005694:	6a03      	ldr	r3, [r0, #32]
{
 8005696:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800569c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800569e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80056a2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80056a6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056a8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80056aa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80056ae:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b0:	4d13      	ldr	r5, [pc, #76]	@ (8005700 <TIM_OC1_SetConfig+0x74>)
 80056b2:	42a8      	cmp	r0, r5
 80056b4:	d00f      	beq.n	80056d6 <TIM_OC1_SetConfig+0x4a>
 80056b6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80056ba:	42a8      	cmp	r0, r5
 80056bc:	d00b      	beq.n	80056d6 <TIM_OC1_SetConfig+0x4a>
 80056be:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80056c2:	42a8      	cmp	r0, r5
 80056c4:	d007      	beq.n	80056d6 <TIM_OC1_SetConfig+0x4a>
 80056c6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056ca:	42a8      	cmp	r0, r5
 80056cc:	d003      	beq.n	80056d6 <TIM_OC1_SetConfig+0x4a>
 80056ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056d2:	42a8      	cmp	r0, r5
 80056d4:	d10d      	bne.n	80056f2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80056dc:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056de:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056e2:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80056e6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ea:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ee:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80056f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056f6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80056f8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80056fa:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80056fc:	6203      	str	r3, [r0, #32]
}
 80056fe:	4770      	bx	lr
 8005700:	40012c00 	.word	0x40012c00

08005704 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005704:	6a03      	ldr	r3, [r0, #32]
 8005706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800570a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570c:	6a03      	ldr	r3, [r0, #32]
{
 800570e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005714:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005716:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800571a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800571e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005720:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005722:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005726:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572a:	4d14      	ldr	r5, [pc, #80]	@ (800577c <TIM_OC3_SetConfig+0x78>)
 800572c:	42a8      	cmp	r0, r5
 800572e:	d00f      	beq.n	8005750 <TIM_OC3_SetConfig+0x4c>
 8005730:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005734:	42a8      	cmp	r0, r5
 8005736:	d00b      	beq.n	8005750 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	4d11      	ldr	r5, [pc, #68]	@ (8005780 <TIM_OC3_SetConfig+0x7c>)
 800573a:	42a8      	cmp	r0, r5
 800573c:	d00f      	beq.n	800575e <TIM_OC3_SetConfig+0x5a>
 800573e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005742:	42a8      	cmp	r0, r5
 8005744:	d00b      	beq.n	800575e <TIM_OC3_SetConfig+0x5a>
 8005746:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800574a:	42a8      	cmp	r0, r5
 800574c:	d10f      	bne.n	800576e <TIM_OC3_SetConfig+0x6a>
 800574e:	e006      	b.n	800575e <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005750:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005756:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800575a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800575e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005762:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005766:	ea46 0c05 	orr.w	ip, r6, r5
 800576a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800576e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005770:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005772:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005774:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005776:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005778:	6203      	str	r3, [r0, #32]
}
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40014000 	.word	0x40014000

08005784 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005784:	6a03      	ldr	r3, [r0, #32]
 8005786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800578a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578c:	6a03      	ldr	r3, [r0, #32]
{
 800578e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005794:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005796:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800579a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800579e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80057a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057ac:	4d14      	ldr	r5, [pc, #80]	@ (8005800 <TIM_OC4_SetConfig+0x7c>)
 80057ae:	42a8      	cmp	r0, r5
 80057b0:	d00f      	beq.n	80057d2 <TIM_OC4_SetConfig+0x4e>
 80057b2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80057b6:	42a8      	cmp	r0, r5
 80057b8:	d00b      	beq.n	80057d2 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ba:	4d12      	ldr	r5, [pc, #72]	@ (8005804 <TIM_OC4_SetConfig+0x80>)
 80057bc:	42a8      	cmp	r0, r5
 80057be:	d00f      	beq.n	80057e0 <TIM_OC4_SetConfig+0x5c>
 80057c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80057c4:	42a8      	cmp	r0, r5
 80057c6:	d00b      	beq.n	80057e0 <TIM_OC4_SetConfig+0x5c>
 80057c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80057cc:	42a8      	cmp	r0, r5
 80057ce:	d10f      	bne.n	80057f0 <TIM_OC4_SetConfig+0x6c>
 80057d0:	e006      	b.n	80057e0 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80057d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057d8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80057dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057e0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80057e4:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057e8:	ea46 0c05 	orr.w	ip, r6, r5
 80057ec:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057f2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80057f4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80057f6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80057f8:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80057fa:	6203      	str	r3, [r0, #32]
}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40014000 	.word	0x40014000

08005808 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005808:	2800      	cmp	r0, #0
 800580a:	d06d      	beq.n	80058e8 <HAL_TIM_Base_Init+0xe0>
{
 800580c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005812:	4604      	mov	r4, r0
 8005814:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005818:	2b00      	cmp	r3, #0
 800581a:	d060      	beq.n	80058de <HAL_TIM_Base_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800581c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800581e:	4e33      	ldr	r6, [pc, #204]	@ (80058ec <HAL_TIM_Base_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8005820:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005822:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005826:	2302      	movs	r3, #2
 8005828:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800582e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	d044      	beq.n	80058bc <HAL_TIM_Base_Init+0xb4>
 8005832:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005836:	d017      	beq.n	8005868 <HAL_TIM_Base_Init+0x60>
 8005838:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800583c:	42b2      	cmp	r2, r6
 800583e:	d013      	beq.n	8005868 <HAL_TIM_Base_Init+0x60>
 8005840:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005844:	42b2      	cmp	r2, r6
 8005846:	d00f      	beq.n	8005868 <HAL_TIM_Base_Init+0x60>
 8005848:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 800584c:	42b2      	cmp	r2, r6
 800584e:	d035      	beq.n	80058bc <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005850:	4e27      	ldr	r6, [pc, #156]	@ (80058f0 <HAL_TIM_Base_Init+0xe8>)
 8005852:	42b2      	cmp	r2, r6
 8005854:	d036      	beq.n	80058c4 <HAL_TIM_Base_Init+0xbc>
 8005856:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800585a:	42b2      	cmp	r2, r6
 800585c:	d032      	beq.n	80058c4 <HAL_TIM_Base_Init+0xbc>
 800585e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005862:	42b2      	cmp	r2, r6
 8005864:	d108      	bne.n	8005878 <HAL_TIM_Base_Init+0x70>
 8005866:	e02d      	b.n	80058c4 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8005868:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800586e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005870:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800587c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800587e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005882:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005884:	2301      	movs	r3, #1
 8005886:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005890:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005894:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005898:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800589c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80058a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80058ac:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80058b0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80058b8:	2000      	movs	r0, #0
}
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80058bc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80058c2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ca:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80058d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058d6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80058d8:	6963      	ldr	r3, [r4, #20]
 80058da:	6313      	str	r3, [r2, #48]	@ 0x30
 80058dc:	e7d2      	b.n	8005884 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80058de:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058e2:	f7fc ff99 	bl	8002818 <HAL_TIM_Base_MspInit>
 80058e6:	e799      	b.n	800581c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80058e8:	2001      	movs	r0, #1
}
 80058ea:	4770      	bx	lr
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop

080058f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d06d      	beq.n	80059d8 <HAL_TIM_PWM_Init+0xe0>
{
 80058fc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005902:	4604      	mov	r4, r0
 8005904:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005908:	2b00      	cmp	r3, #0
 800590a:	d060      	beq.n	80059ce <HAL_TIM_PWM_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590e:	4e33      	ldr	r6, [pc, #204]	@ (80059dc <HAL_TIM_PWM_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8005910:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005912:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005914:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800591e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005920:	d044      	beq.n	80059ac <HAL_TIM_PWM_Init+0xb4>
 8005922:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005926:	d017      	beq.n	8005958 <HAL_TIM_PWM_Init+0x60>
 8005928:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800592c:	42b2      	cmp	r2, r6
 800592e:	d013      	beq.n	8005958 <HAL_TIM_PWM_Init+0x60>
 8005930:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005934:	42b2      	cmp	r2, r6
 8005936:	d00f      	beq.n	8005958 <HAL_TIM_PWM_Init+0x60>
 8005938:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 800593c:	42b2      	cmp	r2, r6
 800593e:	d035      	beq.n	80059ac <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005940:	4e27      	ldr	r6, [pc, #156]	@ (80059e0 <HAL_TIM_PWM_Init+0xe8>)
 8005942:	42b2      	cmp	r2, r6
 8005944:	d036      	beq.n	80059b4 <HAL_TIM_PWM_Init+0xbc>
 8005946:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800594a:	42b2      	cmp	r2, r6
 800594c:	d032      	beq.n	80059b4 <HAL_TIM_PWM_Init+0xbc>
 800594e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005952:	42b2      	cmp	r2, r6
 8005954:	d108      	bne.n	8005968 <HAL_TIM_PWM_Init+0x70>
 8005956:	e02d      	b.n	80059b4 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8005958:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800595e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005960:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800596e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005970:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005972:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005974:	2301      	movs	r3, #1
 8005976:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005980:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005984:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005988:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800598c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005998:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800599c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80059a0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80059a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80059a8:	2000      	movs	r0, #0
}
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80059ac:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80059b2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ba:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80059c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059c6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	6963      	ldr	r3, [r4, #20]
 80059ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80059cc:	e7d2      	b.n	8005974 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80059ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80059d2:	f7ff ff8f 	bl	80058f4 <HAL_TIM_PWM_MspInit>
 80059d6:	e799      	b.n	800590c <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 80059d8:	2001      	movs	r0, #1
}
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40014000 	.word	0x40014000

080059e4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80059e4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d069      	beq.n	8005ac0 <HAL_TIM_SlaveConfigSynchro+0xdc>
 80059ec:	4684      	mov	ip, r0
 80059ee:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f0:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80059f2:	2302      	movs	r3, #2
{
 80059f4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80059f6:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80059fa:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80059fe:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a00:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a02:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a04:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005a08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a0c:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005a0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005a12:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a16:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a18:	2b60      	cmp	r3, #96	@ 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005a1a:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005a1c:	d05e      	beq.n	8005adc <HAL_TIM_SlaveConfigSynchro+0xf8>
 8005a1e:	d816      	bhi.n	8005a4e <HAL_TIM_SlaveConfigSynchro+0x6a>
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	d06e      	beq.n	8005b02 <HAL_TIM_SlaveConfigSynchro+0x11e>
 8005a24:	d933      	bls.n	8005a8e <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005a26:	2b50      	cmp	r3, #80	@ 0x50
 8005a28:	d141      	bne.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a2a:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2c:	688a      	ldr	r2, [r1, #8]
 8005a2e:	6909      	ldr	r1, [r1, #16]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a30:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005a34:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a36:	6a03      	ldr	r3, [r0, #32]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a44:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a48:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005a4a:	6202      	str	r2, [r0, #32]
 8005a4c:	e00d      	b.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8005a4e:	2b70      	cmp	r3, #112	@ 0x70
 8005a50:	d038      	beq.n	8005ac4 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8005a52:	2b6f      	cmp	r3, #111	@ 0x6f
 8005a54:	d92b      	bls.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
 8005a56:	4a2f      	ldr	r2, [pc, #188]	@ (8005b14 <HAL_TIM_SlaveConfigSynchro+0x130>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d006      	beq.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a5c:	d91d      	bls.n	8005a9a <HAL_TIM_SlaveConfigSynchro+0xb6>
 8005a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8005b18 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d002      	beq.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a64:	3230      	adds	r2, #48	@ 0x30
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d121      	bne.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a6a:	68c3      	ldr	r3, [r0, #12]
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a70:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a72:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8005a74:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a7c:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	f88c 103d 	strb.w	r1, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005a82:	f88c 203c 	strb.w	r2, [ip, #60]	@ 0x3c
  return HAL_OK;
 8005a86:	4610      	mov	r0, r2
}
 8005a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a8c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d0eb      	beq.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a92:	d909      	bls.n	8005aa8 <HAL_TIM_SlaveConfigSynchro+0xc4>
 8005a94:	2b30      	cmp	r3, #48	@ 0x30
 8005a96:	d10a      	bne.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
 8005a98:	e7e7      	b.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a9a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a9e:	d0e4      	beq.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
 8005aa0:	3a10      	subs	r2, #16
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d0e1      	beq.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
 8005aa6:	e002      	b.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
 8005aa8:	f033 0310 	bics.w	r3, r3, #16
 8005aac:	d0dd      	beq.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8005aae:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005ab0:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005ab2:	f88c 003d 	strb.w	r0, [ip, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005ab6:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8005aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005abe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005ac0:	2002      	movs	r0, #2
}
 8005ac2:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac4:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005ac8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aca:	6909      	ldr	r1, [r1, #16]
 8005acc:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ace:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ad6:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad8:	6083      	str	r3, [r0, #8]
 8005ada:	e7c6      	b.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005adc:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ade:	688c      	ldr	r4, [r1, #8]
 8005ae0:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae2:	f023 0310 	bic.w	r3, r3, #16
 8005ae6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005aea:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aec:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005af4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005afc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005afe:	6203      	str	r3, [r0, #32]
 8005b00:	e7b3      	b.n	8005a6a <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005b02:	2c05      	cmp	r4, #5
 8005b04:	d0d3      	beq.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
 8005b06:	f1b4 1f01 	cmp.w	r4, #65537	@ 0x10001
 8005b0a:	d0d0      	beq.n	8005aae <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8005b0c:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b0e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b10:	6a03      	ldr	r3, [r0, #32]
 8005b12:	e791      	b.n	8005a38 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005b14:	00100030 	.word	0x00100030
 8005b18:	00100040 	.word	0x00100040

08005b1c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1c:	6a03      	ldr	r3, [r0, #32]
 8005b1e:	f023 0310 	bic.w	r3, r3, #16
 8005b22:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005b24:	6a03      	ldr	r3, [r0, #32]
{
 8005b26:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005b28:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005b2a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b2e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005b32:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005b3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b44:	4d14      	ldr	r5, [pc, #80]	@ (8005b98 <TIM_OC2_SetConfig+0x7c>)
 8005b46:	42a8      	cmp	r0, r5
 8005b48:	d00f      	beq.n	8005b6a <TIM_OC2_SetConfig+0x4e>
 8005b4a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005b4e:	42a8      	cmp	r0, r5
 8005b50:	d00b      	beq.n	8005b6a <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b52:	4d12      	ldr	r5, [pc, #72]	@ (8005b9c <TIM_OC2_SetConfig+0x80>)
 8005b54:	42a8      	cmp	r0, r5
 8005b56:	d00f      	beq.n	8005b78 <TIM_OC2_SetConfig+0x5c>
 8005b58:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005b5c:	42a8      	cmp	r0, r5
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC2_SetConfig+0x5c>
 8005b60:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005b64:	42a8      	cmp	r0, r5
 8005b66:	d10f      	bne.n	8005b88 <TIM_OC2_SetConfig+0x6c>
 8005b68:	e006      	b.n	8005b78 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b6a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b78:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b7c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b80:	ea46 0c05 	orr.w	ip, r6, r5
 8005b84:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005b88:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005b8a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005b8c:	6182      	str	r2, [r0, #24]
}
 8005b8e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005b90:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005b92:	6203      	str	r3, [r0, #32]
}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40014000 	.word	0x40014000

08005ba0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005ba0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f000 80dc 	beq.w	8005d62 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8005baa:	2301      	movs	r3, #1
{
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4604      	mov	r4, r0
 8005bb0:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005bb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005bb6:	2a14      	cmp	r2, #20
 8005bb8:	d80c      	bhi.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005bba:	e8df f002 	tbb	[pc, r2]
 8005bbe:	0b4f      	.short	0x0b4f
 8005bc0:	0b630b0b 	.word	0x0b630b0b
 8005bc4:	0b740b0b 	.word	0x0b740b0b
 8005bc8:	0b840b0b 	.word	0x0b840b0b
 8005bcc:	0b950b0b 	.word	0x0b950b0b
 8005bd0:	0b0b      	.short	0x0b0b
 8005bd2:	10          	.byte	0x10
 8005bd3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8005bda:	2001      	movs	r0, #1
}
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bde:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be0:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005be8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005bea:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005bec:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005bee:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf0:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005bf4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bfc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bfe:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c02:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c06:	4e58      	ldr	r6, [pc, #352]	@ (8005d68 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8005c08:	42b3      	cmp	r3, r6
 8005c0a:	d00f      	beq.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005c0c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005c10:	42b3      	cmp	r3, r6
 8005c12:	d00b      	beq.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005c14:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8005c18:	42b3      	cmp	r3, r6
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005c1c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005c20:	42b3      	cmp	r3, r6
 8005c22:	d003      	beq.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005c24:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005c28:	42b3      	cmp	r3, r6
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c2c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c2e:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c32:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005c36:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005c38:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005c3a:	6869      	ldr	r1, [r5, #4]
 8005c3c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8005c3e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c42:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c48:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c50:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c5a:	e00e      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c5c:	6800      	ldr	r0, [r0, #0]
 8005c5e:	f7ff fd15 	bl	800568c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c62:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c64:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c66:	f043 0308 	orr.w	r3, r3, #8
 8005c6a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c6c:	6983      	ldr	r3, [r0, #24]
 8005c6e:	f023 0304 	bic.w	r3, r3, #4
 8005c72:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c74:	6983      	ldr	r3, [r0, #24]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2000      	movs	r0, #0
}
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c84:	6800      	ldr	r0, [r0, #0]
 8005c86:	f7ff ff49 	bl	8005b1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c8a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c8c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c92:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c94:	6983      	ldr	r3, [r0, #24]
 8005c96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c9a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c9c:	6983      	ldr	r3, [r0, #24]
 8005c9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ca2:	6183      	str	r3, [r0, #24]
      break;
 8005ca4:	e7e9      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ca6:	6800      	ldr	r0, [r0, #0]
 8005ca8:	f7ff fd2c 	bl	8005704 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cac:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb0:	f043 0308 	orr.w	r3, r3, #8
 8005cb4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cb6:	69c3      	ldr	r3, [r0, #28]
 8005cb8:	f023 0304 	bic.w	r3, r3, #4
 8005cbc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cbe:	69c3      	ldr	r3, [r0, #28]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61c3      	str	r3, [r0, #28]
      break;
 8005cc4:	e7d9      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cc6:	6800      	ldr	r0, [r0, #0]
 8005cc8:	f7ff fd5c 	bl	8005784 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ccc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cce:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005cd4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd6:	69c3      	ldr	r3, [r0, #28]
 8005cd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cdc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cde:	69c3      	ldr	r3, [r0, #28]
 8005ce0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ce4:	61c3      	str	r3, [r0, #28]
      break;
 8005ce6:	e7c8      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ce8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005cea:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cec:	6a1a      	ldr	r2, [r3, #32]
 8005cee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005cf2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005cf6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005cf8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cfa:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005cfe:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005d02:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d04:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005d06:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d0a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	4e16      	ldr	r6, [pc, #88]	@ (8005d68 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8005d10:	42b3      	cmp	r3, r6
 8005d12:	d00f      	beq.n	8005d34 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005d14:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005d18:	42b3      	cmp	r3, r6
 8005d1a:	d00b      	beq.n	8005d34 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005d1c:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8005d20:	42b3      	cmp	r3, r6
 8005d22:	d007      	beq.n	8005d34 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005d24:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005d28:	42b3      	cmp	r3, r6
 8005d2a:	d003      	beq.n	8005d34 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005d2c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005d30:	42b3      	cmp	r3, r6
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d34:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d36:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d3a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005d3e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005d40:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005d42:	6869      	ldr	r1, [r5, #4]
 8005d44:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8005d46:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d4a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d4c:	f042 0208 	orr.w	r2, r2, #8
 8005d50:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d54:	f022 0204 	bic.w	r2, r2, #4
 8005d58:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d60:	e78b      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8005d62:	2002      	movs	r0, #2
}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00

08005d6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d046      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8005d74:	b470      	push	{r4, r5, r6}
 8005d76:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d78:	4e23      	ldr	r6, [pc, #140]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8005d7a:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d82:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8005d84:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d86:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d8a:	d024      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8005d8c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005d90:	42b0      	cmp	r0, r6
 8005d92:	d02b      	beq.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d94:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d9c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005da2:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da4:	d00a      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005da6:	4b19      	ldr	r3, [pc, #100]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8005da8:	4298      	cmp	r0, r3
 8005daa:	d007      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005dac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005db0:	4298      	cmp	r0, r3
 8005db2:	d003      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005db4:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8005db8:	4298      	cmp	r0, r3
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dbc:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dbe:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc4:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005dc6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005dce:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8005dd2:	bc70      	pop	{r4, r5, r6}
 8005dd4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ddc:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dde:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de6:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005de8:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	e7e7      	b.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dec:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005df2:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfc:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8005dfe:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	e7dc      	b.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8005e02:	2002      	movs	r0, #2
}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40000400 	.word	0x40000400

08005e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e10:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d045      	beq.n	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8005e18:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e1a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e22:	4602      	mov	r2, r0
 8005e24:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e26:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e28:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e34:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e36:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e3c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e3e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e44:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e46:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e4c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e50:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e54:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e5a:	4c13      	ldr	r4, [pc, #76]	@ (8005ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005e5c:	42a0      	cmp	r0, r4
 8005e5e:	d00b      	beq.n	8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005e60:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8005e64:	42a0      	cmp	r0, r4
 8005e66:	d007      	beq.n	8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005e68:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005e6a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005e6c:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005e70:	4608      	mov	r0, r1
}
 8005e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e76:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e78:	69cc      	ldr	r4, [r1, #28]
 8005e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e7e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e80:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8005e82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e86:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e8a:	6a0c      	ldr	r4, [r1, #32]
 8005e8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e90:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e92:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e94:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e9a:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	e7e1      	b.n	8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005ea4:	2002      	movs	r0, #2
}
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00

08005eac <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8005eac:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eae:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8005eb2:	2801      	cmp	r0, #1
 8005eb4:	d047      	beq.n	8005f46 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8005eb6:	6810      	ldr	r0, [r2, #0]
 8005eb8:	3801      	subs	r0, #1
 8005eba:	280f      	cmp	r0, #15
{
 8005ebc:	b4f0      	push	{r4, r5, r6, r7}
 8005ebe:	d825      	bhi.n	8005f0c <HAL_TIMEx_ConfigBreakInput+0x60>
 8005ec0:	4c22      	ldr	r4, [pc, #136]	@ (8005f4c <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8005ec2:	4e23      	ldr	r6, [pc, #140]	@ (8005f50 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8005ec4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8005ec8:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8005ecc:	4c21      	ldr	r4, [pc, #132]	@ (8005f54 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8005ece:	4e22      	ldr	r6, [pc, #136]	@ (8005f58 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8005ed0:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005ed4:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8005ed8:	2901      	cmp	r1, #1
 8005eda:	d01d      	beq.n	8005f18 <HAL_TIMEx_ConfigBreakInput+0x6c>
 8005edc:	2902      	cmp	r1, #2
 8005ede:	d12c      	bne.n	8005f3a <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ee0:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 8005ee2:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ee4:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ee6:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8005ee8:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005eea:	fa01 f10c 	lsl.w	r1, r1, ip
 8005eee:	ea81 0207 	eor.w	r2, r1, r7
 8005ef2:	402a      	ands	r2, r5
 8005ef4:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ef6:	ea80 0102 	eor.w	r1, r0, r2
 8005efa:	4021      	ands	r1, r4
 8005efc:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8005efe:	6672      	str	r2, [r6, #100]	@ 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2000      	movs	r0, #0

  return status;
}
 8005f08:	bcf0      	pop	{r4, r5, r6, r7}
 8005f0a:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8005f0c:	2700      	movs	r7, #0
  switch (BreakInput)
 8005f0e:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8005f10:	46bc      	mov	ip, r7
 8005f12:	463c      	mov	r4, r7
 8005f14:	463d      	mov	r5, r7
  switch (BreakInput)
 8005f16:	d1e1      	bne.n	8005edc <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005f18:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8005f1a:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005f1c:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005f1e:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8005f20:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005f22:	fa01 f10c 	lsl.w	r1, r1, ip
 8005f26:	ea81 0207 	eor.w	r2, r1, r7
 8005f2a:	402a      	ands	r2, r5
 8005f2c:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005f2e:	ea80 0102 	eor.w	r1, r0, r2
 8005f32:	4021      	ands	r1, r4
 8005f34:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8005f36:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8005f38:	e7e2      	b.n	8005f00 <HAL_TIMEx_ConfigBreakInput+0x54>
  __HAL_UNLOCK(htim);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8005f40:	2001      	movs	r0, #1
}
 8005f42:	bcf0      	pop	{r4, r5, r6, r7}
 8005f44:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005f46:	2002      	movs	r0, #2
}
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	08008dbc 	.word	0x08008dbc
 8005f50:	08008d3c 	.word	0x08008d3c
 8005f54:	08008d7c 	.word	0x08008d7c
 8005f58:	08008cfc 	.word	0x08008cfc

08005f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f60:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f62:	6882      	ldr	r2, [r0, #8]
 8005f64:	6900      	ldr	r0, [r0, #16]
 8005f66:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f6a:	4302      	orrs	r2, r0
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f70:	4995      	ldr	r1, [pc, #596]	@ (80061c8 <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f72:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f74:	4029      	ands	r1, r5
 8005f76:	430a      	orrs	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f7e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005f84:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f86:	4991      	ldr	r1, [pc, #580]	@ (80061cc <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f88:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f8a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f8c:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f90:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8005f94:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f98:	f000 80bb 	beq.w	8006112 <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 8005f9c:	6a26      	ldr	r6, [r4, #32]
 8005f9e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	f022 020f 	bic.w	r2, r2, #15
 8005faa:	432a      	orrs	r2, r5
 8005fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fae:	4a88      	ldr	r2, [pc, #544]	@ (80061d0 <UART_SetConfig+0x274>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d035      	beq.n	8006020 <UART_SetConfig+0xc4>
 8005fb4:	4a87      	ldr	r2, [pc, #540]	@ (80061d4 <UART_SetConfig+0x278>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <UART_SetConfig+0x7c>
 8005fba:	4a87      	ldr	r2, [pc, #540]	@ (80061d8 <UART_SetConfig+0x27c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	f000 8098 	beq.w	80060f2 <UART_SetConfig+0x196>
 8005fc2:	4a86      	ldr	r2, [pc, #536]	@ (80061dc <UART_SetConfig+0x280>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d03f      	beq.n	8006048 <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8005fc8:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fca:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005fcc:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8005fd0:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 8005fd4:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd8:	4b81      	ldr	r3, [pc, #516]	@ (80061e0 <UART_SetConfig+0x284>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d8f0      	bhi.n	8005fc8 <UART_SetConfig+0x6c>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <UART_SetConfig+0x90>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	080060e7 	.word	0x080060e7
 8005ff0:	08005fc9 	.word	0x08005fc9
 8005ff4:	08005fc9 	.word	0x08005fc9
 8005ff8:	08005fc9 	.word	0x08005fc9
 8005ffc:	08006061 	.word	0x08006061
 8006000:	08005fc9 	.word	0x08005fc9
 8006004:	08005fc9 	.word	0x08005fc9
 8006008:	08005fc9 	.word	0x08005fc9
 800600c:	080060a9 	.word	0x080060a9
 8006010:	08005fc9 	.word	0x08005fc9
 8006014:	08005fc9 	.word	0x08005fc9
 8006018:	08005fc9 	.word	0x08005fc9
 800601c:	08006079 	.word	0x08006079
 8006020:	4b6f      	ldr	r3, [pc, #444]	@ (80061e0 <UART_SetConfig+0x284>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d03c      	beq.n	80060a8 <UART_SetConfig+0x14c>
 800602e:	2b03      	cmp	r3, #3
 8006030:	d022      	beq.n	8006078 <UART_SetConfig+0x11c>
 8006032:	2b01      	cmp	r3, #1
 8006034:	d014      	beq.n	8006060 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006036:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800603a:	f000 80bc 	beq.w	80061b6 <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800603e:	f7ff f9c3 	bl	80053c8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006042:	b9a8      	cbnz	r0, 8006070 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8006044:	2000      	movs	r0, #0
 8006046:	e7c0      	b.n	8005fca <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006048:	4b65      	ldr	r3, [pc, #404]	@ (80061e0 <UART_SetConfig+0x284>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006052:	2b80      	cmp	r3, #128	@ 0x80
 8006054:	d028      	beq.n	80060a8 <UART_SetConfig+0x14c>
 8006056:	d859      	bhi.n	800610c <UART_SetConfig+0x1b0>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d044      	beq.n	80060e6 <UART_SetConfig+0x18a>
 800605c:	2b40      	cmp	r3, #64	@ 0x40
 800605e:	d1b3      	bne.n	8005fc8 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006060:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006064:	f000 80aa 	beq.w	80061bc <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8006068:	f7ff f85a 	bl	8005120 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800606c:	2800      	cmp	r0, #0
 800606e:	d0e9      	beq.n	8006044 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006070:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006072:	e006      	b.n	8006082 <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006074:	2b30      	cmp	r3, #48	@ 0x30
 8006076:	d1a7      	bne.n	8005fc8 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006078:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800607c:	d018      	beq.n	80060b0 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 800607e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	4a57      	ldr	r2, [pc, #348]	@ (80061e4 <UART_SetConfig+0x288>)
 8006086:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 800608a:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800608e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006092:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006096:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609a:	f1a0 0310 	sub.w	r3, r0, #16
 800609e:	4293      	cmp	r3, r2
 80060a0:	d892      	bhi.n	8005fc8 <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	60d8      	str	r0, [r3, #12]
 80060a6:	e7cd      	b.n	8006044 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	484e      	ldr	r0, [pc, #312]	@ (80061e8 <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ae:	d1e8      	bne.n	8006082 <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b0:	6862      	ldr	r2, [r4, #4]
 80060b2:	4b4c      	ldr	r3, [pc, #304]	@ (80061e4 <UART_SetConfig+0x288>)
 80060b4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80060b8:	fbb0 f0f1 	udiv	r0, r0, r1
 80060bc:	0853      	lsrs	r3, r2, #1
 80060be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ca:	f1a3 0210 	sub.w	r2, r3, #16
 80060ce:	428a      	cmp	r2, r1
 80060d0:	f63f af7a 	bhi.w	8005fc8 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80060d8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060da:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60cb      	str	r3, [r1, #12]
 80060e4:	e7ae      	b.n	8006044 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80060ea:	d05d      	beq.n	80061a8 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7ff f95a 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
        break;
 80060f0:	e7a7      	b.n	8006042 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060f2:	4b3b      	ldr	r3, [pc, #236]	@ (80061e0 <UART_SetConfig+0x284>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d0d3      	beq.n	80060a8 <UART_SetConfig+0x14c>
 8006100:	d8b8      	bhi.n	8006074 <UART_SetConfig+0x118>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0ef      	beq.n	80060e6 <UART_SetConfig+0x18a>
 8006106:	2b10      	cmp	r3, #16
 8006108:	d0aa      	beq.n	8006060 <UART_SetConfig+0x104>
 800610a:	e75d      	b.n	8005fc8 <UART_SetConfig+0x6c>
 800610c:	2bc0      	cmp	r3, #192	@ 0xc0
 800610e:	d0b3      	beq.n	8006078 <UART_SetConfig+0x11c>
 8006110:	e75a      	b.n	8005fc8 <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006112:	4311      	orrs	r1, r2
 8006114:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006118:	4931      	ldr	r1, [pc, #196]	@ (80061e0 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800611a:	f022 020f 	bic.w	r2, r2, #15
 800611e:	432a      	orrs	r2, r5
 8006120:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006122:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006126:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800612e:	d048      	beq.n	80061c2 <UART_SetConfig+0x266>
 8006130:	d833      	bhi.n	800619a <UART_SetConfig+0x23e>
 8006132:	b37b      	cbz	r3, 8006194 <UART_SetConfig+0x238>
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006138:	f47f af46 	bne.w	8005fc8 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 800613c:	f7fe fff0 	bl	8005120 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006140:	2800      	cmp	r0, #0
 8006142:	f43f af7f 	beq.w	8006044 <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006146:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006148:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800614a:	4b26      	ldr	r3, [pc, #152]	@ (80061e4 <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800614c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006150:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006154:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006158:	4299      	cmp	r1, r3
 800615a:	f63f af35 	bhi.w	8005fc8 <UART_SetConfig+0x6c>
 800615e:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006162:	f63f af31 	bhi.w	8005fc8 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006166:	2300      	movs	r3, #0
 8006168:	4619      	mov	r1, r3
 800616a:	f7fa f855 	bl	8000218 <__aeabi_uldivmod>
 800616e:	0872      	lsrs	r2, r6, #1
 8006170:	0203      	lsls	r3, r0, #8
 8006172:	0209      	lsls	r1, r1, #8
 8006174:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006178:	1898      	adds	r0, r3, r2
 800617a:	f141 0100 	adc.w	r1, r1, #0
 800617e:	4632      	mov	r2, r6
 8006180:	2300      	movs	r3, #0
 8006182:	f7fa f849 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006186:	4b19      	ldr	r3, [pc, #100]	@ (80061ec <UART_SetConfig+0x290>)
 8006188:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800618c:	429a      	cmp	r2, r3
 800618e:	f63f af1b 	bhi.w	8005fc8 <UART_SetConfig+0x6c>
 8006192:	e786      	b.n	80060a2 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7ff f906 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
        break;
 8006198:	e7d2      	b.n	8006140 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800619e:	f47f af13 	bne.w	8005fc8 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80061a6:	e7cf      	b.n	8006148 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a8:	f7ff f8fc 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f43f af49 	beq.w	8006044 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80061b4:	e77c      	b.n	80060b0 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b6:	f7ff f907 	bl	80053c8 <HAL_RCC_GetPCLK2Freq>
        break;
 80061ba:	e7f7      	b.n	80061ac <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 80061bc:	f7fe ffb0 	bl	8005120 <HAL_RCC_GetSysClockFreq>
        break;
 80061c0:	e7f4      	b.n	80061ac <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 80061c2:	4809      	ldr	r0, [pc, #36]	@ (80061e8 <UART_SetConfig+0x28c>)
 80061c4:	e7c0      	b.n	8006148 <UART_SetConfig+0x1ec>
 80061c6:	bf00      	nop
 80061c8:	cfff69f3 	.word	0xcfff69f3
 80061cc:	40008000 	.word	0x40008000
 80061d0:	40013800 	.word	0x40013800
 80061d4:	40004400 	.word	0x40004400
 80061d8:	40004800 	.word	0x40004800
 80061dc:	40004c00 	.word	0x40004c00
 80061e0:	40021000 	.word	0x40021000
 80061e4:	08008dfc 	.word	0x08008dfc
 80061e8:	00f42400 	.word	0x00f42400
 80061ec:	000ffcff 	.word	0x000ffcff

080061f0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80061f2:	07da      	lsls	r2, r3, #31
{
 80061f4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f6:	d506      	bpl.n	8006206 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061f8:	6801      	ldr	r1, [r0, #0]
 80061fa:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80061fc:	684a      	ldr	r2, [r1, #4]
 80061fe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006202:	4322      	orrs	r2, r4
 8006204:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006206:	079c      	lsls	r4, r3, #30
 8006208:	d506      	bpl.n	8006218 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800620a:	6801      	ldr	r1, [r0, #0]
 800620c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800620e:	684a      	ldr	r2, [r1, #4]
 8006210:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006214:	4322      	orrs	r2, r4
 8006216:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006218:	0759      	lsls	r1, r3, #29
 800621a:	d506      	bpl.n	800622a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800621c:	6801      	ldr	r1, [r0, #0]
 800621e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006220:	684a      	ldr	r2, [r1, #4]
 8006222:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006226:	4322      	orrs	r2, r4
 8006228:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622a:	071a      	lsls	r2, r3, #28
 800622c:	d506      	bpl.n	800623c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622e:	6801      	ldr	r1, [r0, #0]
 8006230:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006232:	684a      	ldr	r2, [r1, #4]
 8006234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006238:	4322      	orrs	r2, r4
 800623a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800623c:	06dc      	lsls	r4, r3, #27
 800623e:	d506      	bpl.n	800624e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006240:	6801      	ldr	r1, [r0, #0]
 8006242:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006244:	688a      	ldr	r2, [r1, #8]
 8006246:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800624a:	4322      	orrs	r2, r4
 800624c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	0699      	lsls	r1, r3, #26
 8006250:	d506      	bpl.n	8006260 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006252:	6801      	ldr	r1, [r0, #0]
 8006254:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006256:	688a      	ldr	r2, [r1, #8]
 8006258:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800625c:	4322      	orrs	r2, r4
 800625e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006260:	065a      	lsls	r2, r3, #25
 8006262:	d509      	bpl.n	8006278 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006264:	6801      	ldr	r1, [r0, #0]
 8006266:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006268:	684a      	ldr	r2, [r1, #4]
 800626a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800626e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006270:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006274:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006276:	d00b      	beq.n	8006290 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006278:	061b      	lsls	r3, r3, #24
 800627a:	d506      	bpl.n	800628a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800627c:	6802      	ldr	r2, [r0, #0]
 800627e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006280:	6853      	ldr	r3, [r2, #4]
 8006282:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006286:	430b      	orrs	r3, r1
 8006288:	6053      	str	r3, [r2, #4]
  }
}
 800628a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006290:	684a      	ldr	r2, [r1, #4]
 8006292:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006294:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006298:	4322      	orrs	r2, r4
 800629a:	604a      	str	r2, [r1, #4]
 800629c:	e7ec      	b.n	8006278 <UART_AdvFeatureConfig+0x88>
 800629e:	bf00      	nop

080062a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a8:	6804      	ldr	r4, [r0, #0]
 80062aa:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 80062ae:	460d      	mov	r5, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d10a      	bne.n	80062ca <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b4:	69e3      	ldr	r3, [r4, #28]
 80062b6:	ea35 0303 	bics.w	r3, r5, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	429e      	cmp	r6, r3
 80062c2:	d0f7      	beq.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80062c4:	2000      	movs	r0, #0
}
 80062c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ca:	4607      	mov	r7, r0
 80062cc:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ce:	69e2      	ldr	r2, [r4, #28]
 80062d0:	ea35 0202 	bics.w	r2, r5, r2
 80062d4:	bf0c      	ite	eq
 80062d6:	2301      	moveq	r3, #1
 80062d8:	2300      	movne	r3, #0
 80062da:	42b3      	cmp	r3, r6
 80062dc:	d1f2      	bne.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fd f9fd 	bl	80036dc <HAL_GetTick>
 80062e2:	eba0 0009 	sub.w	r0, r0, r9
 80062e6:	4540      	cmp	r0, r8
 80062e8:	d830      	bhi.n	800634c <UART_WaitOnFlagUntilTimeout+0xac>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062ea:	683c      	ldr	r4, [r7, #0]
 80062ec:	4622      	mov	r2, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ee:	f1b8 0f00 	cmp.w	r8, #0
 80062f2:	d02c      	beq.n	800634e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	0758      	lsls	r0, r3, #29
 80062f8:	d5e9      	bpl.n	80062ce <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062fa:	69e3      	ldr	r3, [r4, #28]
 80062fc:	0519      	lsls	r1, r3, #20
 80062fe:	d5e6      	bpl.n	80062ce <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006300:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006304:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800630a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	e844 3100 	strex	r1, r3, [r4]
 8006312:	b139      	cbz	r1, 8006324 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	e852 3f00 	ldrex	r3, [r2]
 8006318:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	e842 3100 	strex	r1, r3, [r2]
 8006320:	2900      	cmp	r1, #0
 8006322:	d1f7      	bne.n	8006314 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f102 0308 	add.w	r3, r2, #8
 8006328:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	f102 0008 	add.w	r0, r2, #8
 8006334:	e840 3100 	strex	r1, r3, [r0]
 8006338:	2900      	cmp	r1, #0
 800633a:	d1f3      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800633c:	2320      	movs	r3, #32
 800633e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          return HAL_TIMEOUT;
 800634a:	e019      	b.n	8006380 <UART_WaitOnFlagUntilTimeout+0xe0>
 800634c:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006352:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	e842 3100 	strex	r1, r3, [r2]
 800635a:	2900      	cmp	r1, #0
 800635c:	d1f7      	bne.n	800634e <UART_WaitOnFlagUntilTimeout+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	f102 0308 	add.w	r3, r2, #8
 8006362:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	f102 0008 	add.w	r0, r2, #8
 800636e:	e840 3100 	strex	r1, r3, [r0]
 8006372:	2900      	cmp	r1, #0
 8006374:	d1f3      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0xbe>
        huart->gState = HAL_UART_STATE_READY;
 8006376:	2320      	movs	r3, #32
 8006378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800637c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006386:	2003      	movs	r0, #3
 8006388:	e79d      	b.n	80062c6 <UART_WaitOnFlagUntilTimeout+0x26>
 800638a:	bf00      	nop

0800638c <HAL_UART_Init>:
  if (huart == NULL)
 800638c:	2800      	cmp	r0, #0
 800638e:	d066      	beq.n	800645e <HAL_UART_Init+0xd2>
{
 8006390:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006392:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8006396:	b082      	sub	sp, #8
 8006398:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	2b00      	cmp	r3, #0
 800639c:	d04c      	beq.n	8006438 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800639e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80063a0:	2324      	movs	r3, #36	@ 0x24
 80063a2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ac:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80063ae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063b0:	f7ff fdd4 	bl	8005f5c <UART_SetConfig>
 80063b4:	2801      	cmp	r0, #1
 80063b6:	d03c      	beq.n	8006432 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d135      	bne.n	800642a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 80063c6:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c8:	6899      	ldr	r1, [r3, #8]
 80063ca:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 80063ce:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80063d0:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d2:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80063d4:	f041 0101 	orr.w	r1, r1, #1
 80063d8:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 80063de:	f7fd f97d 	bl	80036dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80063e8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ea:	d40e      	bmi.n	800640a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	075b      	lsls	r3, r3, #29
 80063f0:	d427      	bmi.n	8006442 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 80063fa:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80063fe:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8006402:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8006406:	b002      	add	sp, #8
 8006408:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800640a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	462a      	mov	r2, r5
 8006412:	4603      	mov	r3, r0
 8006414:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff ff41 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 800641e:	b9e0      	cbnz	r0, 800645a <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	075b      	lsls	r3, r3, #29
 8006426:	d40c      	bmi.n	8006442 <HAL_UART_Init+0xb6>
 8006428:	e7e3      	b.n	80063f2 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff fee0 	bl	80061f0 <UART_AdvFeatureConfig>
 8006430:	e7c5      	b.n	80063be <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006432:	2001      	movs	r0, #1
}
 8006434:	b002      	add	sp, #8
 8006436:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8006438:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800643c:	f7fc fa60 	bl	8002900 <HAL_UART_MspInit>
 8006440:	e7ad      	b.n	800639e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006442:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2200      	movs	r2, #0
 800644a:	4633      	mov	r3, r6
 800644c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006450:	4620      	mov	r0, r4
 8006452:	f7ff ff25 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0cb      	beq.n	80063f2 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800645a:	2003      	movs	r0, #3
 800645c:	e7d3      	b.n	8006406 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800645e:	2001      	movs	r0, #1
}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006464:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006468:	2b01      	cmp	r3, #1
 800646a:	d017      	beq.n	800649c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800646c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800646e:	2324      	movs	r3, #36	@ 0x24
{
 8006470:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8006472:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006476:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006478:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800647a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800647c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006480:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8006484:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006486:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006488:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648a:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 800648e:	2220      	movs	r2, #32
 8006490:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 8006494:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8006498:	4618      	mov	r0, r3
}
 800649a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800649c:	2002      	movs	r0, #2
}
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a0:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 80064a4:	2a01      	cmp	r2, #1
 80064a6:	d037      	beq.n	8006518 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80064a8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064aa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80064ac:	2024      	movs	r0, #36	@ 0x24
{
 80064ae:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b6:	6810      	ldr	r0, [r2, #0]
 80064b8:	f020 0001 	bic.w	r0, r0, #1
 80064bc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064be:	6890      	ldr	r0, [r2, #8]
 80064c0:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80064c4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064c6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064c8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064ca:	b310      	cbz	r0, 8006512 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064cc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ce:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80064d0:	4d12      	ldr	r5, [pc, #72]	@ (800651c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064d6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064da:	4911      	ldr	r1, [pc, #68]	@ (8006520 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80064dc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064e0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80064e4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80064e8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ec:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ee:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064f0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064f4:	fbb1 f1f5 	udiv	r1, r1, r5
 80064f8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80064fc:	2100      	movs	r1, #0
 80064fe:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006502:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006504:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006506:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800650a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800650c:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8006510:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006512:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006514:	4608      	mov	r0, r1
 8006516:	e7ef      	b.n	80064f8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006518:	2002      	movs	r0, #2
}
 800651a:	4770      	bx	lr
 800651c:	08008e14 	.word	0x08008e14
 8006520:	08008e1c 	.word	0x08008e1c

08006524 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006524:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8006528:	2a01      	cmp	r2, #1
 800652a:	d037      	beq.n	800659c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	2024      	movs	r0, #36	@ 0x24
{
 8006532:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006538:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800653a:	6810      	ldr	r0, [r2, #0]
 800653c:	f020 0001 	bic.w	r0, r0, #1
 8006540:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006542:	6890      	ldr	r0, [r2, #8]
 8006544:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8006548:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800654a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800654c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800654e:	b310      	cbz	r0, 8006596 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006550:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006552:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006554:	4d12      	ldr	r5, [pc, #72]	@ (80065a0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006556:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800655a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800655e:	4911      	ldr	r1, [pc, #68]	@ (80065a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006560:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006564:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006568:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800656c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006570:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006572:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006574:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006578:	fbb1 f1f5 	udiv	r1, r1, r5
 800657c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006580:	2100      	movs	r1, #0
 8006582:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006586:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006588:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800658a:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800658e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006590:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8006594:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006596:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006598:	4608      	mov	r0, r1
 800659a:	e7ef      	b.n	800657c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800659c:	2002      	movs	r0, #2
}
 800659e:	4770      	bx	lr
 80065a0:	08008e14 	.word	0x08008e14
 80065a4:	08008e1c 	.word	0x08008e1c

080065a8 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80065a8:	88c0      	ldrh	r0, [r0, #6]
 80065aa:	4770      	bx	lr

080065ac <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80065ac:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80065ae:	8840      	ldrh	r0, [r0, #2]
 80065b0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80065b4:	0c00      	lsrs	r0, r0, #16
 80065b6:	4770      	bx	lr

080065b8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80065b8:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065ba:	8802      	ldrh	r2, [r0, #0]
 80065bc:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80065be:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80065c2:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065c6:	fb02 f202 	mul.w	r2, r2, r2
 80065ca:	4594      	cmp	ip, r2
{
 80065cc:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065ce:	d919      	bls.n	8006604 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80065d0:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 80065d4:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80065de:	8882      	ldrh	r2, [r0, #4]
 80065e0:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80065e4:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80065ea:	bfbc      	itt	lt
 80065ec:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 80065f0:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfbc      	itt	lt
 80065f6:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 80065fa:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80065fc:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006600:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8006604:	b289      	uxth	r1, r1
 8006606:	2000      	movs	r0, #0
 8006608:	f361 000f 	bfi	r0, r1, #0, #16
 800660c:	b29b      	uxth	r3, r3
 800660e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006612:	b004      	add	sp, #16
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop

08006618 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 800661c:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 800661e:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006622:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8006626:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 800662a:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 800662e:	4770      	bx	lr

08006630 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006630:	b120      	cbz	r0, 800663c <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006632:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8006636:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	60c3      	str	r3, [r0, #12]
  }
}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006640:	b178      	cbz	r0, 8006662 <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006642:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006644:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8006646:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006648:	b139      	cbz	r1, 800665a <FCP_CalcCRC+0x1a>
 800664a:	3001      	adds	r0, #1
 800664c:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 800664e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006652:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006654:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006656:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006658:	d1f9      	bne.n	800664e <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800665a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 800665e:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 8006662:	4770      	bx	lr

08006664 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006664:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8006666:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800666a:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 800666c:	2100      	movs	r1, #0
 800666e:	f002 fa59 	bl	8008b24 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006672:	2300      	movs	r3, #0
 8006674:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006678:	bd10      	pop	{r4, pc}
 800667a:	bf00      	nop

0800667c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800667c:	f8b0 c100 	ldrh.w	ip, [r0, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006680:	f10c 0201 	add.w	r2, ip, #1
 8006684:	b292      	uxth	r2, r2
{
 8006686:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8006688:	2a80      	cmp	r2, #128	@ 0x80
{
 800668a:	4604      	mov	r4, r0
    pHandle->hNextMeasBufferIndex = 0u;
 800668c:	bf28      	it	cs
 800668e:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006690:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
{
 8006694:	4608      	mov	r0, r1
 8006696:	f8a4 2100 	strh.w	r2, [r4, #256]	@ 0x100
 800669a:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800669c:	f8a4 c102 	strh.w	ip, [r4, #258]	@ 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80066a0:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
  int32_t wAux = 0;
 80066a4:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80066a6:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80066aa:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80066ac:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80066ae:	d1fa      	bne.n	80066a6 <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	bfb8      	it	lt
 80066b4:	327f      	addlt	r2, #127	@ 0x7f
 80066b6:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80066b8:	f8a4 2104 	strh.w	r2, [r4, #260]	@ 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	bf00      	nop

080066c0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 80066c0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop

080066c8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80066c8:	8a03      	ldrh	r3, [r0, #16]
 80066ca:	8b42      	ldrh	r2, [r0, #26]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d306      	bcc.n	80066de <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80066d0:	8b82      	ldrh	r2, [r0, #28]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d901      	bls.n	80066da <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80066d6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80066d8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80066da:	8ac0      	ldrh	r0, [r0, #22]
 80066dc:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80066de:	2008      	movs	r0, #8
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80066e4:	2300      	movs	r3, #0
 80066e6:	8203      	strh	r3, [r0, #16]
}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop

080066ec <NTC_Init>:
{
 80066ec:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80066ee:	7803      	ldrb	r3, [r0, #0]
{
 80066f0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80066f2:	b123      	cbz	r3, 80066fe <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80066f4:	8a43      	ldrh	r3, [r0, #18]
 80066f6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80066f8:	2200      	movs	r2, #0
 80066fa:	82c2      	strh	r2, [r0, #22]
}
 80066fc:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80066fe:	3004      	adds	r0, #4
 8006700:	f7fb fc50 	bl	8001fa4 <RCM_RegisterRegConv>
 8006704:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 8006708:	4620      	mov	r0, r4
 800670a:	f7ff ffeb 	bl	80066e4 <NTC_Clear>
}
 800670e:	bd10      	pop	{r4, pc}

08006710 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006710:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006712:	7803      	ldrb	r3, [r0, #0]
{
 8006714:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006716:	b113      	cbz	r3, 800671e <NTC_CalcAvTemp+0xe>
 8006718:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800671a:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 800671c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800671e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8006722:	f7fb fd41 	bl	80021a8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800672a:	4298      	cmp	r0, r3
 800672c:	d007      	beq.n	800673e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800672e:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006730:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006732:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8006734:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006738:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800673c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff ffc2 	bl	80066c8 <NTC_SetFaultState>
 8006744:	82e0      	strh	r0, [r4, #22]
}
 8006746:	bd10      	pop	{r4, pc}

08006748 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006748:	7803      	ldrb	r3, [r0, #0]
 800674a:	b983      	cbnz	r3, 800676e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800674c:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800674e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006750:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006754:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006756:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8006758:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800675c:	2b00      	cmp	r3, #0
 800675e:	bfbc      	itt	lt
 8006760:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8006764:	33ff      	addlt	r3, #255	@ 0xff
 8006766:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800676a:	b200      	sxth	r0, r0
 800676c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800676e:	8a80      	ldrh	r0, [r0, #20]
}
 8006770:	b200      	sxth	r0, r0
 8006772:	4770      	bx	lr

08006774 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006774:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006776:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006778:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800677a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800677c:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800677e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006780:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8006782:	4770      	bx	lr

08006784 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006784:	8081      	strh	r1, [r0, #4]
}
 8006786:	4770      	bx	lr

08006788 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006788:	80c1      	strh	r1, [r0, #6]
}
 800678a:	4770      	bx	lr

0800678c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 800678c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006794:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 800679c:	6081      	str	r1, [r0, #8]

  return;
}
 800679e:	4770      	bx	lr

080067a0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80067a0:	8b00      	ldrh	r0, [r0, #24]
 80067a2:	4770      	bx	lr

080067a4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80067a4:	8b40      	ldrh	r0, [r0, #26]
 80067a6:	4770      	bx	lr

080067a8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80067a8:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 80067aa:	4770      	bx	lr

080067ac <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80067ac:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80067b4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80067b8:	4603      	mov	r3, r0
 80067ba:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80067bc:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80067c0:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80067c4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80067c8:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 80067cc:	b17c      	cbz	r4, 80067ee <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80067ce:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80067d2:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 80067d6:	eb15 0e01 	adds.w	lr, r5, r1
 80067da:	d41d      	bmi.n	8006818 <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 80067dc:	420d      	tst	r5, r1
 80067de:	4914      	ldr	r1, [pc, #80]	@ (8006830 <PI_Controller+0x7c>)
 80067e0:	bf48      	it	mi
 80067e2:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80067e4:	45a6      	cmp	lr, r4
 80067e6:	dc02      	bgt.n	80067ee <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80067e8:	691c      	ldr	r4, [r3, #16]
 80067ea:	4574      	cmp	r4, lr
 80067ec:	dd1d      	ble.n	800682a <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80067ee:	8b99      	ldrh	r1, [r3, #28]
 80067f0:	410a      	asrs	r2, r1
 80067f2:	8bd9      	ldrh	r1, [r3, #30]
 80067f4:	fa44 f101 	asr.w	r1, r4, r1
 80067f8:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80067fa:	4290      	cmp	r0, r2
 80067fc:	da03      	bge.n	8006806 <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80067fe:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006800:	4414      	add	r4, r2
 8006802:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006804:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006806:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006808:	bfc5      	ittet	gt
 800680a:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 800680e:	18a4      	addgt	r4, r4, r2
  return ( ( int16_t )( wOutput_32 ) );
 8006810:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 8006812:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 8006814:	609c      	str	r4, [r3, #8]
}
 8006816:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006818:	2d00      	cmp	r5, #0
 800681a:	dde3      	ble.n	80067e4 <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 800681c:	2900      	cmp	r1, #0
 800681e:	dde1      	ble.n	80067e4 <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006824:	428c      	cmp	r4, r1
 8006826:	d1e2      	bne.n	80067ee <PI_Controller+0x3a>
 8006828:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800682a:	4674      	mov	r4, lr
 800682c:	e7df      	b.n	80067ee <PI_Controller+0x3a>
 800682e:	bf00      	nop
 8006830:	80000001 	.word	0x80000001

08006834 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006834:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
{
 8006838:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800683a:	89d1      	ldrh	r1, [r2, #14]
 800683c:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800683e:	8993      	ldrh	r3, [r2, #12]
{
 8006840:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006842:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006844:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006848:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800684c:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006850:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8006854:	f7ff feaa 	bl	80065ac <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8006858:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800685a:	490f      	ldr	r1, [pc, #60]	@ (8006898 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800685c:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006860:	bfb8      	it	lt
 8006862:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006866:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 800686a:	bfb8      	it	lt
 800686c:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800686e:	fb81 1000 	smull	r1, r0, r1, r0
 8006872:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 8006876:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006878:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800687c:	4907      	ldr	r1, [pc, #28]	@ (800689c <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800687e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006882:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006884:	fb81 2103 	smull	r2, r1, r1, r3
 8006888:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800688a:	4628      	mov	r0, r5
 800688c:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006894:	f7ff bef2 	b.w	800667c <MPM_CalcElMotorPower>
 8006898:	1b4e81b5 	.word	0x1b4e81b5
 800689c:	66666667 	.word	0x66666667

080068a0 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 80068a0:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80068a2:	4b19      	ldr	r3, [pc, #100]	@ (8006908 <startTimers+0x68>)
 80068a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80068a6:	07d2      	lsls	r2, r2, #31
 80068a8:	b083      	sub	sp, #12
 80068aa:	d416      	bmi.n	80068da <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80068ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80068b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80068b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80068ba:	f002 0201 	and.w	r2, r2, #1
 80068be:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	694a      	ldr	r2, [r1, #20]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80068ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80068cc:	f022 0201 	bic.w	r2, r2, #1
 80068d0:	659a      	str	r2, [r3, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 80068d2:	b003      	add	sp, #12
 80068d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d8:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80068da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80068de:	480b      	ldr	r0, [pc, #44]	@ (800690c <startTimers+0x6c>)
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	4c0a      	ldr	r4, [pc, #40]	@ (8006910 <startTimers+0x70>)
 80068e6:	4001      	ands	r1, r0
 80068e8:	f041 0120 	orr.w	r1, r1, #32
 80068ec:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80068ee:	6959      	ldr	r1, [r3, #20]
 80068f0:	f041 0101 	orr.w	r1, r1, #1
 80068f4:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80068f6:	6859      	ldr	r1, [r3, #4]
 80068f8:	4022      	ands	r2, r4
 80068fa:	4001      	ands	r1, r0
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
}
 8006900:	b003      	add	sp, #12
 8006902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	40021000 	.word	0x40021000
 800690c:	fdffff8f 	.word	0xfdffff8f
 8006910:	02000070 	.word	0x02000070

08006914 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006914:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006916:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006918:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800691c:	f102 0201 	add.w	r2, r2, #1
 8006920:	d11b      	bne.n	800695a <waitForPolarizationEnd+0x46>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006922:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006924:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006926:	f06f 0602 	mvn.w	r6, #2
 800692a:	0155      	lsls	r5, r2, #5
 800692c:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800692e:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006930:	f893 c000 	ldrb.w	ip, [r3]
 8006934:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006938:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 800693c:	d80c      	bhi.n	8006958 <waitForPolarizationEnd+0x44>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800693e:	6904      	ldr	r4, [r0, #16]
 8006940:	07a4      	lsls	r4, r4, #30
 8006942:	d5f5      	bpl.n	8006930 <waitForPolarizationEnd+0x1c>
      hCalibrationPeriodCounter++;
 8006944:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006948:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800694a:	6106      	str	r6, [r0, #16]
 800694c:	d8f0      	bhi.n	8006930 <waitForPolarizationEnd+0x1c>
      {
        if (*cnt < NB_CONVERSIONS)
 800694e:	781c      	ldrb	r4, [r3, #0]
 8006950:	2c0f      	cmp	r4, #15
 8006952:	d8ed      	bhi.n	8006930 <waitForPolarizationEnd+0x1c>
        {
          *SWerror = 1u;
 8006954:	2301      	movs	r3, #1
 8006956:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006958:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800695a:	2c60      	cmp	r4, #96	@ 0x60
 800695c:	d0e3      	beq.n	8006926 <waitForPolarizationEnd+0x12>
 800695e:	e7e1      	b.n	8006924 <waitForPolarizationEnd+0x10>

08006960 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006960:	6843      	ldr	r3, [r0, #4]
 8006962:	4718      	bx	r3

08006964 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006964:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006966:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800696a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800696c:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006970:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006972:	fb04 fc0c 	mul.w	ip, r4, ip
 8006976:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800697a:	fb02 f303 	mul.w	r3, r2, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 800697e:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006982:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006986:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800698a:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800698e:	1c55      	adds	r5, r2, #1
{
 8006990:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006992:	ea4f 0494 	mov.w	r4, r4, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006996:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800699a:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800699e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  if ( wY < 0 )
 80069a2:	db7a      	blt.n	8006a9a <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 80069a4:	1c5d      	adds	r5, r3, #1
 80069a6:	db57      	blt.n	8006a58 <PWMC_SetPhaseVoltage+0xf4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80069a8:	ebb1 010e 	subs.w	r1, r1, lr
 80069ac:	bf44      	itt	mi
 80069ae:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80069b2:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfbc      	itt	lt
 80069ba:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80069be:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	bfb8      	it	lt
 80069c6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80069ca:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80069ce:	bfb8      	it	lt
 80069d0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80069d4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80069d8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 80069dc:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 80069e0:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 80069e4:	b294      	uxth	r4, r2
 80069e6:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 80069e8:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 80069ec:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
        pHandle->Sector = SECTOR_4;
 80069f0:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80069f4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80069f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80069fc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006a00:	b289      	uxth	r1, r1
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 8006a06:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 8006a08:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 8006a0c:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006a10:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006a12:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006a14:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 8006a16:	d11a      	bne.n	8006a4e <PWMC_SetPhaseVoltage+0xea>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006a18:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006a1c:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 8006a20:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006a22:	bfcc      	ite	gt
 8006a24:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006a26:	1b09      	suble	r1, r1, r4
 8006a28:	b289      	uxth	r1, r1
 8006a2a:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 8006a2c:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 8006a30:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006a32:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006a36:	bfcc      	ite	gt
 8006a38:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006a3a:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8006a3c:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006a3e:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006a40:	bfcc      	ite	gt
 8006a42:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006a44:	1b12      	suble	r2, r2, r4
 8006a46:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006a48:	bfcc      	ite	gt
 8006a4a:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006a4c:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006a4e:	6983      	ldr	r3, [r0, #24]
}
 8006a50:	b003      	add	sp, #12
 8006a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006a56:	4718      	bx	r3
      if ( wX <= 0 )
 8006a58:	f1bc 0f00 	cmp.w	ip, #0
 8006a5c:	dd3d      	ble.n	8006ada <PWMC_SetPhaseVoltage+0x176>
        wTimePhB = wTimePhA + wZ / 131072;
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006a66:	ebac 0e0e 	sub.w	lr, ip, lr
        wTimePhB = wTimePhA + wZ / 131072;
 8006a6a:	bfb8      	it	lt
 8006a6c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8006a70:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006a74:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006a78:	bfb8      	it	lt
 8006a7a:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006a7e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006a82:	bfb8      	it	lt
 8006a84:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8006a88:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8006a8c:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8006a90:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8006a94:	b294      	uxth	r4, r2
 8006a96:	2500      	movs	r5, #0
 8006a98:	e7a6      	b.n	80069e8 <PWMC_SetPhaseVoltage+0x84>
    if ( wZ < 0 )
 8006a9a:	1c5d      	adds	r5, r3, #1
 8006a9c:	db5d      	blt.n	8006b5a <PWMC_SetPhaseVoltage+0x1f6>
      if ( wX <= 0 )
 8006a9e:	f1bc 0f00 	cmp.w	ip, #0
 8006aa2:	dd38      	ble.n	8006b16 <PWMC_SetPhaseVoltage+0x1b2>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006aa4:	ebb1 010c 	subs.w	r1, r1, ip
 8006aa8:	bf44      	itt	mi
 8006aaa:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8006aae:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	bfb8      	it	lt
 8006ab6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006aba:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006abe:	bfb8      	it	lt
 8006ac0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 8006ac4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006ac8:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006acc:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8006ad0:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 8006ad4:	b28c      	uxth	r4, r1
 8006ad6:	2502      	movs	r5, #2
 8006ad8:	e786      	b.n	80069e8 <PWMC_SetPhaseVoltage+0x84>
        wTimePhC = wTimePhA - wY / 131072;
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	bfb8      	it	lt
 8006ade:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006ae2:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 8006ae6:	bfb8      	it	lt
 8006ae8:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 8006aec:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006af0:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006af4:	bfb8      	it	lt
 8006af6:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006afa:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006afe:	bfb8      	it	lt
 8006b00:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8006b04:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8006b08:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 8006b0c:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 8006b10:	b29c      	uxth	r4, r3
 8006b12:	2505      	movs	r5, #5
 8006b14:	e768      	b.n	80069e8 <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006b16:	ebbc 0e0e 	subs.w	lr, ip, lr
 8006b1a:	bf44      	itt	mi
 8006b1c:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8006b20:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfbc      	itt	lt
 8006b28:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8006b2c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8006b30:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006b34:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006b38:	bfb8      	it	lt
 8006b3a:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006b3e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006b42:	bfb8      	it	lt
 8006b44:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8006b48:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8006b4c:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8006b50:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8006b54:	b28c      	uxth	r4, r1
 8006b56:	2503      	movs	r5, #3
 8006b58:	e746      	b.n	80069e8 <PWMC_SetPhaseVoltage+0x84>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006b5a:	ebb1 010e 	subs.w	r1, r1, lr
 8006b5e:	bf44      	itt	mi
 8006b60:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8006b64:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bfbc      	itt	lt
 8006b6c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8006b70:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006b74:	2a00      	cmp	r2, #0
 8006b76:	bfb8      	it	lt
 8006b78:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006b7c:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006b80:	bfb8      	it	lt
 8006b82:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006b86:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006b8a:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8006b8e:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8006b92:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 8006b96:	b29c      	uxth	r4, r3
 8006b98:	2504      	movs	r5, #4
 8006b9a:	e725      	b.n	80069e8 <PWMC_SetPhaseVoltage+0x84>

08006b9c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006b9c:	6883      	ldr	r3, [r0, #8]
 8006b9e:	4718      	bx	r3

08006ba0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8006ba4:	b179      	cbz	r1, 8006bc6 <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006ba6:	2901      	cmp	r1, #1
 8006ba8:	d001      	beq.n	8006bae <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8006baa:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006bac:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006bae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8006bb2:	b19b      	cbz	r3, 8006bdc <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f4      	bne.n	8006baa <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006bc0:	6903      	ldr	r3, [r0, #16]
 8006bc2:	4798      	blx	r3
        retVal = true;
 8006bc4:	e00a      	b.n	8006bdc <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 8006bc6:	f7ff ffe9 	bl	8006b9c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006bca:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006bce:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e9      	bne.n	8006baa <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4798      	blx	r3
      retVal = true;
 8006bdc:	2001      	movs	r0, #1
}
 8006bde:	bd10      	pop	{r4, pc}

08006be0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006be0:	69c3      	ldr	r3, [r0, #28]
 8006be2:	4718      	bx	r3

08006be4 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006be4:	6883      	ldr	r3, [r0, #8]
 8006be6:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006bea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bee:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006bf0:	6883      	ldr	r3, [r0, #8]
 8006bf2:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	d418      	bmi.n	8006c2a <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006bf8:	4b24      	ldr	r3, [pc, #144]	@ (8006c8c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8006bfa:	6882      	ldr	r2, [r0, #8]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4924      	ldr	r1, [pc, #144]	@ (8006c90 <R3_2_ADCxInit+0xac>)
 8006c00:	099b      	lsrs	r3, r3, #6
 8006c02:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8006c06:	fba1 1303 	umull	r1, r3, r1, r3
 8006c0a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006c0e:	099b      	lsrs	r3, r3, #6
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006c16:	6082      	str	r2, [r0, #8]
 8006c18:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	b12b      	cbz	r3, 8006c2a <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f9      	bne.n	8006c1e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8006c2a:	6883      	ldr	r3, [r0, #8]
 8006c2c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c38:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006c3a:	6883      	ldr	r3, [r0, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dbfc      	blt.n	8006c3a <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006c40:	6803      	ldr	r3, [r0, #0]
 8006c42:	07da      	lsls	r2, r3, #31
 8006c44:	d408      	bmi.n	8006c58 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8006c46:	4a13      	ldr	r2, [pc, #76]	@ (8006c94 <R3_2_ADCxInit+0xb0>)
 8006c48:	6883      	ldr	r3, [r0, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006c52:	6803      	ldr	r3, [r0, #0]
 8006c54:	07db      	lsls	r3, r3, #31
 8006c56:	d5f7      	bpl.n	8006c48 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8006c58:	6883      	ldr	r3, [r0, #8]
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c94 <R3_2_ADCxInit+0xb0>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	f043 0308 	orr.w	r3, r3, #8
 8006c62:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8006c64:	6883      	ldr	r3, [r0, #8]
 8006c66:	4013      	ands	r3, r2
 8006c68:	f043 0320 	orr.w	r3, r3, #32
 8006c6c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8006c6e:	68c3      	ldr	r3, [r0, #12]
 8006c70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c7c:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8006c7e:	6883      	ldr	r3, [r0, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8006c88:	b002      	add	sp, #8
 8006c8a:	4770      	bx	lr
 8006c8c:	20000694 	.word	0x20000694
 8006c90:	053e2d63 	.word	0x053e2d63
 8006c94:	7fffffc0 	.word	0x7fffffc0

08006c98 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c98:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8006c9a:	f890 203a 	ldrb.w	r2, [r0, #58]	@ 0x3a
{
 8006c9e:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ca0:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006ca2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006ca6:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006caa:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006cac:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb8:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8006cba:	2a05      	cmp	r2, #5
 8006cbc:	f200 8097 	bhi.w	8006dee <R3_2_GetPhaseCurrents+0x156>
 8006cc0:	e8df f002 	tbb	[pc, r2]
 8006cc4:	031b1b33 	.word	0x031b1b33
 8006cc8:	3303      	.short	0x3303
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006cca:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8006ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8006dfc <R3_2_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006cce:	1b5b      	subs	r3, r3, r5
      if ( Aux < -INT16_MAX )
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	db53      	blt.n	8006d7c <R3_2_GetPhaseCurrents+0xe4>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
 8006cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd8:	f280 8082 	bge.w	8006de0 <R3_2_GetPhaseCurrents+0x148>
      {
        Iab->a = INT16_MAX;
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 8006cdc:	fa0f fc83 	sxth.w	ip, r3
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006ce0:	6e02      	ldr	r2, [r0, #96]	@ 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8006ce2:	4d46      	ldr	r5, [pc, #280]	@ (8006dfc <R3_2_GetPhaseCurrents+0x164>)
        Iab->a = -INT16_MAX;
 8006ce4:	f8a1 c000 	strh.w	ip, [r1]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006ce8:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8006cea:	42aa      	cmp	r2, r5
 8006cec:	da57      	bge.n	8006d9e <R3_2_GetPhaseCurrents+0x106>
      {
        Iab->b = -INT16_MAX;
 8006cee:	804d      	strh	r5, [r1, #2]
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006cf0:	fa1f f38c 	uxth.w	r3, ip
 8006cf4:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006cf8:	e02c      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006cfa:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
      if ( Aux < -INT16_MAX )
 8006cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <R3_2_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006cfe:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006d00:	429c      	cmp	r4, r3
 8006d02:	db36      	blt.n	8006d72 <R3_2_GetPhaseCurrents+0xda>
      else  if ( Aux > INT16_MAX )
 8006d04:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8006d08:	da5f      	bge.n	8006dca <R3_2_GetPhaseCurrents+0x132>
        Iab->a = ( int16_t )Aux;
 8006d0a:	fa0f fc84 	sxth.w	ip, r4
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006d0e:	b2a3      	uxth	r3, r4
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006d10:	6e42      	ldr	r2, [r0, #100]	@ 0x64
        Iab->a = -INT16_MAX;
 8006d12:	f8a1 c000 	strh.w	ip, [r1]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006d16:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8006d18:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8006d1a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006d1e:	db37      	blt.n	8006d90 <R3_2_GetPhaseCurrents+0xf8>
        Iab->b = INT16_MAX;
 8006d20:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006d24:	804a      	strh	r2, [r1, #2]
 8006d26:	4615      	mov	r5, r2
 8006d28:	e014      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006d2a:	6e04      	ldr	r4, [r0, #96]	@ 0x60
      if ( Aux < -INT16_MAX )
 8006d2c:	4b33      	ldr	r3, [pc, #204]	@ (8006dfc <R3_2_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006d2e:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006d30:	429c      	cmp	r4, r3
 8006d32:	db19      	blt.n	8006d68 <R3_2_GetPhaseCurrents+0xd0>
      else  if ( Aux > INT16_MAX )
 8006d34:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8006d38:	da3c      	bge.n	8006db4 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = ( int16_t )Aux;
 8006d3a:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006d3c:	b2a2      	uxth	r2, r4
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006d3e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
        Iab->b = -INT16_MAX;
 8006d40:	804d      	strh	r5, [r1, #2]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006d42:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8006d44:	1b1b      	subs	r3, r3, r4
      if ( Aux > INT16_MAX )
 8006d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4a:	db19      	blt.n	8006d80 <R3_2_GetPhaseCurrents+0xe8>
        Iab->a = INT16_MAX;
 8006d4c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006d50:	800b      	strh	r3, [r1, #0]
 8006d52:	469c      	mov	ip, r3
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006d54:	4413      	add	r3, r2
 8006d56:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 8006d58:	f8a0 504a 	strh.w	r5, [r0, #74]	@ 0x4a
  pHandle->_Super.Ia = Iab->a;
 8006d5c:	f8a0 c048 	strh.w	ip, [r0, #72]	@ 0x48
}
 8006d60:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006d62:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 8006d66:	4770      	bx	lr
 8006d68:	461c      	mov	r4, r3
 8006d6a:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006d6e:	461d      	mov	r5, r3
 8006d70:	e7e5      	b.n	8006d3e <R3_2_GetPhaseCurrents+0xa6>
 8006d72:	461c      	mov	r4, r3
 8006d74:	46a4      	mov	ip, r4
 8006d76:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006d7a:	e7c9      	b.n	8006d10 <R3_2_GetPhaseCurrents+0x78>
 8006d7c:	4694      	mov	ip, r2
 8006d7e:	e7af      	b.n	8006ce0 <R3_2_GetPhaseCurrents+0x48>
      else  if ( Aux < -INT16_MAX )
 8006d80:	4c1e      	ldr	r4, [pc, #120]	@ (8006dfc <R3_2_GetPhaseCurrents+0x164>)
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	da26      	bge.n	8006dd4 <R3_2_GetPhaseCurrents+0x13c>
        Iab->a = -INT16_MAX;
 8006d86:	800c      	strh	r4, [r1, #0]
 8006d88:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006d8c:	46a4      	mov	ip, r4
 8006d8e:	e7e1      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
      else  if ( Aux < -INT16_MAX )
 8006d90:	4d1a      	ldr	r5, [pc, #104]	@ (8006dfc <R3_2_GetPhaseCurrents+0x164>)
 8006d92:	42aa      	cmp	r2, r5
 8006d94:	da27      	bge.n	8006de6 <R3_2_GetPhaseCurrents+0x14e>
        Iab->b = -INT16_MAX;
 8006d96:	804d      	strh	r5, [r1, #2]
 8006d98:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006d9c:	e7da      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
      else  if ( Aux > INT16_MAX )
 8006d9e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006da2:	db0c      	blt.n	8006dbe <R3_2_GetPhaseCurrents+0x126>
        Iab->b = INT16_MAX;
 8006da4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006da8:	461a      	mov	r2, r3
 8006daa:	804b      	strh	r3, [r1, #2]
 8006dac:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006dae:	fa1f f38c 	uxth.w	r3, ip
 8006db2:	e7cf      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
 8006db4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006db8:	4614      	mov	r4, r2
 8006dba:	4615      	mov	r5, r2
 8006dbc:	e7bf      	b.n	8006d3e <R3_2_GetPhaseCurrents+0xa6>
        Iab->b = ( int16_t )Aux;
 8006dbe:	b215      	sxth	r5, r2
 8006dc0:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006dc2:	fa1f f38c 	uxth.w	r3, ip
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	e7c4      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
 8006dca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006dce:	461c      	mov	r4, r3
 8006dd0:	469c      	mov	ip, r3
 8006dd2:	e79d      	b.n	8006d10 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 8006dd4:	fa0f fc83 	sxth.w	ip, r3
 8006dd8:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	e7b9      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
 8006de0:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8006de4:	e77c      	b.n	8006ce0 <R3_2_GetPhaseCurrents+0x48>
        Iab->b = ( int16_t )Aux;
 8006de6:	b215      	sxth	r5, r2
 8006de8:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006dea:	b292      	uxth	r2, r2
 8006dec:	e7b2      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
  pHandle->_Super.Ia = Iab->a;
 8006dee:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 8006df2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006df6:	880b      	ldrh	r3, [r1, #0]
 8006df8:	884a      	ldrh	r2, [r1, #2]
 8006dfa:	e7ab      	b.n	8006d54 <R3_2_GetPhaseCurrents+0xbc>
 8006dfc:	ffff8001 	.word	0xffff8001

08006e00 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8006e00:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e02:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8006e04:	f890 406d 	ldrb.w	r4, [r0, #109]	@ 0x6d
 8006e08:	f880 403a 	strb.w	r4, [r0, #58]	@ 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006e0c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e10:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006e12:	8e44      	ldrh	r4, [r0, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e14:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006e16:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006e18:	8e84      	ldrh	r4, [r0, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006e1a:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e1c:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006e1e:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e20:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006e22:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006e24:	4904      	ldr	r1, [pc, #16]	@ (8006e38 <R3_2_SetADCSampPointPolarization+0x38>)
 8006e26:	685b      	ldr	r3, [r3, #4]
}
 8006e28:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006e2c:	420b      	tst	r3, r1
}
 8006e2e:	bf14      	ite	ne
 8006e30:	2001      	movne	r0, #1
 8006e32:	2000      	moveq	r0, #0
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	02000070 	.word	0x02000070

08006e3c <R3_2_SetADCSampPointSectX>:
{
 8006e3c:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8006e3e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8006e40:	f8b0 e068 	ldrh.w	lr, [r0, #104]	@ 0x68
 8006e44:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8006e46:	ebae 0203 	sub.w	r2, lr, r3
 8006e4a:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	@ 0xb2
 8006e4e:	b292      	uxth	r2, r2
 8006e50:	42a2      	cmp	r2, r4
 8006e52:	d914      	bls.n	8006e7e <R3_2_SetADCSampPointSectX+0x42>
    pHandle->_Super.Sector = SECTOR_5;
 8006e54:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006e56:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006e5a:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006e5e:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e60:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006e62:	8e45      	ldrh	r5, [r0, #50]	@ 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006e64:	8e84      	ldrh	r4, [r0, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006e66:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e68:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e6a:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e6c:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006e6e:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006e70:	6852      	ldr	r2, [r2, #4]
 8006e72:	4b10      	ldr	r3, [pc, #64]	@ (8006eb4 <R3_2_SetADCSampPointSectX+0x78>)
 8006e74:	421a      	tst	r2, r3
}
 8006e76:	bf14      	ite	ne
 8006e78:	2001      	movne	r0, #1
 8006e7a:	2000      	moveq	r0, #0
 8006e7c:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8006e7e:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8006e82:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8006e86:	fa1f fc8c 	uxth.w	ip, ip
 8006e8a:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006e8e:	d904      	bls.n	8006e9a <R3_2_SetADCSampPointSectX+0x5e>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8006e90:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	@ 0xb4
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	e7e2      	b.n	8006e60 <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8006e9a:	4423      	add	r3, r4
 8006e9c:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8006e9e:	459e      	cmp	lr, r3
 8006ea0:	d8de      	bhi.n	8006e60 <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006ea2:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006ea8:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006eac:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	e7d5      	b.n	8006e60 <R3_2_SetADCSampPointSectX+0x24>
 8006eb4:	02000070 	.word	0x02000070

08006eb8 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8006eb8:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006eba:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8006ebc:	f890 406d 	ldrb.w	r4, [r0, #109]	@ 0x6d
 8006ec0:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8006ec2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006ec6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8006eca:	6824      	ldr	r4, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006ecc:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006ece:	6853      	ldr	r3, [r2, #4]
 8006ed0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed8:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006eda:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	d80b      	bhi.n	8006efa <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006ee2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006ee4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006ee6:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 8006ee8:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006eec:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8006eee:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006ef0:	e9c0 4217 	strd	r4, r2, [r0, #92]	@ 0x5c
    pHandle->PolarizationCounter++;
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006efa:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006efc:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8006efe:	600b      	str	r3, [r1, #0]
}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f04:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006f06:	f890 c06d 	ldrb.w	ip, [r0, #109]	@ 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f0a:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006f0c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8006f10:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f14:	681c      	ldr	r4, [r3, #0]
 8006f16:	6853      	ldr	r3, [r2, #4]
 8006f18:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f20:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006f22:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 8006f26:	2b0f      	cmp	r3, #15
 8006f28:	d808      	bhi.n	8006f3c <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8006f2a:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006f2e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
    pHandle->PolarizationCounter++;
 8006f30:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006f32:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006f34:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006f36:	6642      	str	r2, [r0, #100]	@ 0x64
    pHandle->PolarizationCounter++;
 8006f38:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006f3c:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8006f42:	600b      	str	r3, [r1, #0]
}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop

08006f48 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f48:	6f41      	ldr	r1, [r0, #116]	@ 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006f4a:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f4e:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006f50:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f54:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f56:	f06f 0001 	mvn.w	r0, #1
 8006f5a:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f5c:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006f5e:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006f60:	63d3      	str	r3, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006f62:	6913      	ldr	r3, [r2, #16]
 8006f64:	07db      	lsls	r3, r3, #31
 8006f66:	d5fc      	bpl.n	8006f62 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006f68:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6e:	6453      	str	r3, [r2, #68]	@ 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006f70:	f891 30ba 	ldrb.w	r3, [r1, #186]	@ 0xba
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d000      	beq.n	8006f7a <R3_2_TurnOnLowSides+0x32>
 8006f78:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006f7a:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
{
 8006f7e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006f80:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006f82:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006f86:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006f88:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006f8c:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	@ 0xb0
 8006f90:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8006f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f96:	619a      	str	r2, [r3, #24]
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f9c:	6f41      	ldr	r1, [r0, #116]	@ 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8006f9e:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fa2:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked=true; 
 8006fa4:	f04f 0c01 	mov.w	ip, #1
{
 8006fa8:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked=true; 
 8006faa:	f880 c078 	strb.w	ip, [r0, #120]	@ 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006fae:	f04f 0c00 	mov.w	ip, #0
 8006fb2:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8006fb6:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006fb8:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8006fba:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006fbc:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006fbe:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006fc0:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006fc6:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	07d2      	lsls	r2, r2, #31
 8006fcc:	d5fc      	bpl.n	8006fc8 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006fce:	f06f 0201 	mvn.w	r2, #1
 8006fd2:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fda:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006fe4:	f891 20ba 	ldrb.w	r2, [r1, #186]	@ 0xba
 8006fe8:	2a02      	cmp	r2, #2
 8006fea:	d008      	beq.n	8006ffe <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006fec:	f06f 0201 	mvn.w	r2, #1
 8006ff0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8006ff8:	bcf0      	pop	{r4, r5, r6, r7}
 8006ffa:	60da      	str	r2, [r3, #12]
 8006ffc:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006ffe:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007000:	6a0f      	ldr	r7, [r1, #32]
 8007002:	f8b1 c0ac 	ldrh.w	ip, [r1, #172]	@ 0xac
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007006:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8007008:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	@ 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800700c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800700e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007012:	f240 5255 	movw	r2, #1365	@ 0x555
 8007016:	4210      	tst	r0, r2
 8007018:	d004      	beq.n	8007024 <R3_2_SwitchOnPWM+0x88>
 800701a:	f8c7 c018 	str.w	ip, [r7, #24]
 800701e:	61ae      	str	r6, [r5, #24]
 8007020:	61a1      	str	r1, [r4, #24]
}
 8007022:	e7e3      	b.n	8006fec <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007024:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8007028:	62ae      	str	r6, [r5, #40]	@ 0x28
 800702a:	62a1      	str	r1, [r4, #40]	@ 0x28
}
 800702c:	e7de      	b.n	8006fec <R3_2_SwitchOnPWM+0x50>
 800702e:	bf00      	nop

08007030 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007030:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8007032:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007034:	68d3      	ldr	r3, [r2, #12]
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800703c:	6c53      	ldr	r3, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800703e:	f04f 0c00 	mov.w	ip, #0
 8007042:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007046:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 800704a:	6453      	str	r3, [r2, #68]	@ 0x44
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 800704c:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
 8007050:	b91b      	cbnz	r3, 800705a <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007052:	f891 30ba 	ldrb.w	r3, [r1, #186]	@ 0xba
 8007056:	2b02      	cmp	r3, #2
 8007058:	d00c      	beq.n	8007074 <R3_2_SwitchOffPWM+0x44>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800705a:	f06f 0301 	mvn.w	r3, #1
 800705e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007060:	6913      	ldr	r3, [r2, #16]
 8007062:	07db      	lsls	r3, r3, #31
 8007064:	d5fc      	bpl.n	8007060 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007066:	f06f 0101 	mvn.w	r1, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800706a:	2300      	movs	r3, #0
 800706c:	6111      	str	r1, [r2, #16]
 800706e:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
 8007072:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007074:	6a0b      	ldr	r3, [r1, #32]
{
 8007076:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007078:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800707c:	629c      	str	r4, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800707e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007080:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
 8007084:	629c      	str	r4, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007086:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8007088:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
 800708c:	6299      	str	r1, [r3, #40]	@ 0x28
 800708e:	f06f 0301 	mvn.w	r3, #1
 8007092:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007094:	6913      	ldr	r3, [r2, #16]
 8007096:	07d9      	lsls	r1, r3, #31
 8007098:	d5fc      	bpl.n	8007094 <R3_2_SwitchOffPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800709a:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked=false; 
 800709e:	2300      	movs	r3, #0
 80070a0:	6111      	str	r1, [r2, #16]
}
 80070a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked=false; 
 80070a6:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
}
 80070aa:	4770      	bx	lr

080070ac <R3_2_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070ac:	6f42      	ldr	r2, [r0, #116]	@ 0x74
{
 80070ae:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070b0:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070bc:	6063      	str	r3, [r4, #4]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80070be:	f890 403a 	ldrb.w	r4, [r0, #58]	@ 0x3a
 80070c2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80070c4:	480b      	ldr	r0, [pc, #44]	@ (80070f4 <R3_2_RLGetPhaseCurrents+0x48>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80070c6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80070ca:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80070cc:	6824      	ldr	r4, [r4, #0]
    if ( wAux < INT16_MAX )
 80070ce:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80070d2:	1b1b      	subs	r3, r3, r4
    if ( wAux < INT16_MAX )
 80070d4:	4293      	cmp	r3, r2
 80070d6:	bfa8      	it	ge
 80070d8:	4613      	movge	r3, r2
  pStator_Currents->a = (int16_t)wAux;
 80070da:	4283      	cmp	r3, r0
 80070dc:	bfb8      	it	lt
 80070de:	4603      	movlt	r3, r0
 80070e0:	b21b      	sxth	r3, r3
 80070e2:	2200      	movs	r2, #0
 80070e4:	f363 020f 	bfi	r2, r3, #0, #16
 80070e8:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 80070ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 80070f0:	600a      	str	r2, [r1, #0]
}
 80070f2:	4770      	bx	lr
 80070f4:	ffff8001 	.word	0xffff8001

080070f8 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070f8:	6f41      	ldr	r1, [r0, #116]	@ 0x74

  pHandle->ADCRegularLocked=true;
 80070fa:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070fc:	688a      	ldr	r2, [r1, #8]
{
 80070fe:	b410      	push	{r4}
  pHandle->ADCRegularLocked=true;
 8007100:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007104:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007106:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800710a:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800710c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800710e:	6913      	ldr	r3, [r2, #16]
 8007110:	07db      	lsls	r3, r3, #31
 8007112:	d5fc      	bpl.n	800710e <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007114:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8007116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800711a:	6453      	str	r3, [r2, #68]	@ 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800711c:	f891 30ba 	ldrb.w	r3, [r1, #186]	@ 0xba
 8007120:	2b02      	cmp	r3, #2
 8007122:	d10b      	bne.n	800713c <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007124:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007128:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	@ 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800712c:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800712e:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007130:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	@ 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007134:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	@ 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8007138:	6284      	str	r4, [r0, #40]	@ 0x28
 800713a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  return;
}
 800713c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop

08007144 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007144:	6f41      	ldr	r1, [r0, #116]	@ 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 8007146:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007148:	688b      	ldr	r3, [r1, #8]
{
 800714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800714e:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8007152:	f880 2078 	strb.w	r2, [r0, #120]	@ 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007156:	f06f 0201 	mvn.w	r2, #1
 800715a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	07d6      	lsls	r6, r2, #31
 8007160:	d5fc      	bpl.n	800715c <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8007162:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007166:	f06f 0601 	mvn.w	r6, #1
 800716a:	611e      	str	r6, [r3, #16]
 800716c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800716e:	2601      	movs	r6, #1
 8007170:	635e      	str	r6, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007172:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	07d2      	lsls	r2, r2, #31
 8007178:	d5fc      	bpl.n	8007174 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007182:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007184:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007188:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800718a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800718c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007190:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007192:	f891 20ba 	ldrb.w	r2, [r1, #186]	@ 0xba
 8007196:	2a02      	cmp	r2, #2
 8007198:	d117      	bne.n	80071ca <R3_2_RLSwitchOnPWM+0x86>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800719a:	6a1a      	ldr	r2, [r3, #32]
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800719c:	f8d1 e020 	ldr.w	lr, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80071a0:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80071a2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80071a4:	f8b1 80ac 	ldrh.w	r8, [r1, #172]	@ 0xac
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80071a8:	f8b1 c0ae 	ldrh.w	ip, [r1, #174]	@ 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80071ac:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80071b0:	f240 5355 	movw	r3, #1365	@ 0x555
 80071b4:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071b6:	bf15      	itete	ne
 80071b8:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80071bc:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071c0:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80071c4:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 80071c8:	62b1      	str	r1, [r6, #40]	@ 0x28
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 80071ca:	2303      	movs	r3, #3
 80071cc:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
  MODIFY_REG(ADCx->CR,
 80071d0:	68ab      	ldr	r3, [r5, #8]
 80071d2:	4a06      	ldr	r2, [pc, #24]	@ (80071ec <R3_2_RLSwitchOnPWM+0xa8>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	f043 0308 	orr.w	r3, r3, #8
 80071da:	60ab      	str	r3, [r5, #8]
 80071dc:	68a3      	ldr	r3, [r4, #8]
 80071de:	4013      	ands	r3, r2
 80071e0:	f043 0308 	orr.w	r3, r3, #8
 80071e4:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80071e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ea:	bf00      	nop
 80071ec:	7fffffc0 	.word	0x7fffffc0

080071f0 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80071f0:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80071f4:	b510      	push	{r4, lr}
 80071f6:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 80071fa:	f101 0e08 	add.w	lr, r1, #8
 80071fe:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007200:	f85e 300c 	ldr.w	r3, [lr, ip]
 8007204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007208:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800720c:	4313      	orrs	r3, r2
 800720e:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8007212:	684a      	ldr	r2, [r1, #4]
 8007214:	f000 0303 	and.w	r3, r0, #3
 8007218:	4313      	orrs	r3, r2
 800721a:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800721c:	680a      	ldr	r2, [r1, #0]
 800721e:	f000 0010 	and.w	r0, r0, #16
 8007222:	2301      	movs	r3, #1
 8007224:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007226:	ea33 0202 	bics.w	r2, r3, r2
 800722a:	d014      	beq.n	8007256 <R3_2_SetAOReferenceVoltage+0x66>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800722c:	4a14      	ldr	r2, [pc, #80]	@ (8007280 <R3_2_SetAOReferenceVoltage+0x90>)
 800722e:	4815      	ldr	r0, [pc, #84]	@ (8007284 <R3_2_SetAOReferenceVoltage+0x94>)
 8007230:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8007232:	680c      	ldr	r4, [r1, #0]
 8007234:	fba0 0202 	umull	r0, r2, r0, r2
 8007238:	0cd2      	lsrs	r2, r2, #19
 800723a:	4323      	orrs	r3, r4
 800723c:	00d2      	lsls	r2, r2, #3
 800723e:	600b      	str	r3, [r1, #0]
 8007240:	9200      	str	r2, [sp, #0]
    while(wait_loop_index != 0UL)
 8007242:	9b00      	ldr	r3, [sp, #0]
 8007244:	b12b      	cbz	r3, 8007252 <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	3b01      	subs	r3, #1
 800724a:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1f9      	bne.n	8007246 <R3_2_SetAOReferenceVoltage+0x56>
}
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007256:	4b0a      	ldr	r3, [pc, #40]	@ (8007280 <R3_2_SetAOReferenceVoltage+0x90>)
 8007258:	4a0a      	ldr	r2, [pc, #40]	@ (8007284 <R3_2_SetAOReferenceVoltage+0x94>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	0cdb      	lsrs	r3, r3, #19
 8007262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007266:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007268:	9b01      	ldr	r3, [sp, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f1      	beq.n	8007252 <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	3b01      	subs	r3, #1
 8007272:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007274:	9b01      	ldr	r3, [sp, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f9      	bne.n	800726e <R3_2_SetAOReferenceVoltage+0x7e>
}
 800727a:	b002      	add	sp, #8
 800727c:	bd10      	pop	{r4, pc}
 800727e:	bf00      	nop
 8007280:	20000694 	.word	0x20000694
 8007284:	431bde83 	.word	0x431bde83

08007288 <R3_2_Init>:
{
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800728c:	6f44      	ldr	r4, [r0, #116]	@ 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800728e:	6827      	ldr	r7, [r4, #0]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007290:	6866      	ldr	r6, [r4, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007292:	687a      	ldr	r2, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007294:	68a5      	ldr	r5, [r4, #8]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8007296:	f8d4 b014 	ldr.w	fp, [r4, #20]
{
 800729a:	4680      	mov	r8, r0
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800729c:	e9d4 c00b 	ldrd	ip, r0, [r4, #44]	@ 0x2c
{
 80072a0:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80072a2:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80072a6:	f022 0204 	bic.w	r2, r2, #4
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80072aa:	9000      	str	r0, [sp, #0]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80072ac:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80072ae:	9001      	str	r0, [sp, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 80072b0:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80072b4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80072b6:	9002      	str	r0, [sp, #8]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80072b8:	e9d4 a906 	ldrd	sl, r9, [r4, #24]
 80072bc:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80072be:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80072c2:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80072c4:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80072c6:	f022 0220 	bic.w	r2, r2, #32
 80072ca:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80072cc:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80072ce:	6872      	ldr	r2, [r6, #4]
 80072d0:	f022 0204 	bic.w	r2, r2, #4
 80072d4:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80072d6:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80072da:	6872      	ldr	r2, [r6, #4]
 80072dc:	f022 0220 	bic.w	r2, r2, #32
 80072e0:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80072e2:	6030      	str	r0, [r6, #0]
    if ( TIMx == TIM1 )
 80072e4:	4a87      	ldr	r2, [pc, #540]	@ (8007504 <R3_2_Init+0x27c>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80072e6:	4888      	ldr	r0, [pc, #544]	@ (8007508 <R3_2_Init+0x280>)
 80072e8:	4295      	cmp	r5, r2
 80072ea:	6902      	ldr	r2, [r0, #16]
 80072ec:	bf0c      	ite	eq
 80072ee:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 80072f2:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 80072f6:	6102      	str	r2, [r0, #16]
    if ( OPAMPParams != NULL )
 80072f8:	b189      	cbz	r1, 800731e <R3_2_Init+0x96>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 80072fa:	680a      	ldr	r2, [r1, #0]
 80072fc:	b11a      	cbz	r2, 8007306 <R3_2_Init+0x7e>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80072fe:	6810      	ldr	r0, [r2, #0]
 8007300:	f040 0001 	orr.w	r0, r0, #1
 8007304:	6010      	str	r0, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8007306:	684a      	ldr	r2, [r1, #4]
 8007308:	b11a      	cbz	r2, 8007312 <R3_2_Init+0x8a>
 800730a:	6810      	ldr	r0, [r2, #0]
 800730c:	f040 0001 	orr.w	r0, r0, #1
 8007310:	6010      	str	r0, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8007312:	688a      	ldr	r2, [r1, #8]
 8007314:	b11a      	cbz	r2, 800731e <R3_2_Init+0x96>
 8007316:	6811      	ldr	r1, [r2, #0]
 8007318:	f041 0101 	orr.w	r1, r1, #1
 800731c:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 800731e:	b1b3      	cbz	r3, 800734e <R3_2_Init+0xc6>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 8007320:	f894 20bd 	ldrb.w	r2, [r4, #189]	@ 0xbd
 8007324:	2a01      	cmp	r2, #1
 8007326:	d00a      	beq.n	800733e <R3_2_Init+0xb6>
 8007328:	f1bc 0f00 	cmp.w	ip, #0
 800732c:	d007      	beq.n	800733e <R3_2_Init+0xb6>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800732e:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	@ 0xb6
 8007332:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	4661      	mov	r1, ip
 8007338:	f7ff ff5a 	bl	80071f0 <R3_2_SetAOReferenceVoltage>
 800733c:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800734c:	601a      	str	r2, [r3, #0]
    if ( COMP_OCPBx != NULL )
 800734e:	f1bb 0f00 	cmp.w	fp, #0
 8007352:	d017      	beq.n	8007384 <R3_2_Init+0xfc>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8007354:	f894 30be 	ldrb.w	r3, [r4, #190]	@ 0xbe
 8007358:	2b01      	cmp	r3, #1
 800735a:	d007      	beq.n	800736c <R3_2_Init+0xe4>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	b12b      	cbz	r3, 800736c <R3_2_Init+0xe4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007360:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	@ 0xb6
 8007364:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007366:	4619      	mov	r1, r3
 8007368:	f7ff ff42 	bl	80071f0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800736c:	f8db 3000 	ldr.w	r3, [fp]
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007378:	f8db 3000 	ldr.w	r3, [fp]
 800737c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007380:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPCx != NULL )
 8007384:	f1ba 0f00 	cmp.w	sl, #0
 8007388:	d017      	beq.n	80073ba <R3_2_Init+0x132>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800738a:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 800738e:	2b01      	cmp	r3, #1
 8007390:	d007      	beq.n	80073a2 <R3_2_Init+0x11a>
 8007392:	9b01      	ldr	r3, [sp, #4]
 8007394:	b12b      	cbz	r3, 80073a2 <R3_2_Init+0x11a>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007396:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	@ 0xb6
 800739a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800739c:	4619      	mov	r1, r3
 800739e:	f7ff ff27 	bl	80071f0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80073a2:	f8da 3000 	ldr.w	r3, [sl]
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80073ae:	f8da 3000 	ldr.w	r3, [sl]
 80073b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073b6:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OVPx != NULL )
 80073ba:	f1b9 0f00 	cmp.w	r9, #0
 80073be:	d017      	beq.n	80073f0 <R3_2_Init+0x168>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 80073c0:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d007      	beq.n	80073d8 <R3_2_Init+0x150>
 80073c8:	9b02      	ldr	r3, [sp, #8]
 80073ca:	b12b      	cbz	r3, 80073d8 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 80073cc:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 80073d0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80073d2:	4619      	mov	r1, r3
 80073d4:	f7ff ff0c 	bl	80071f0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80073d8:	f8d9 3000 	ldr.w	r3, [r9]
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80073e4:	f8d9 3000 	ldr.w	r3, [r9]
 80073e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073ec:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	07d8      	lsls	r0, r3, #31
 80073f4:	d555      	bpl.n	80074a2 <R3_2_Init+0x21a>
 80073f6:	68b3      	ldr	r3, [r6, #8]
 80073f8:	07d9      	lsls	r1, r3, #31
 80073fa:	d54e      	bpl.n	800749a <R3_2_Init+0x212>
  volatile uint32_t Brk2Timeout = 1000;
 80073fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007400:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800740a:	686b      	ldr	r3, [r5, #4]
 800740c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007416:	69ab      	ldr	r3, [r5, #24]
 8007418:	f043 0308 	orr.w	r3, r3, #8
 800741c:	61ab      	str	r3, [r5, #24]
 800741e:	69ab      	ldr	r3, [r5, #24]
 8007420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007424:	61ab      	str	r3, [r5, #24]
 8007426:	69eb      	ldr	r3, [r5, #28]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	61eb      	str	r3, [r5, #28]
 800742e:	69eb      	ldr	r3, [r5, #28]
 8007430:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007434:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007436:	696b      	ldr	r3, [r5, #20]
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	616b      	str	r3, [r5, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800743e:	f894 30c1 	ldrb.w	r3, [r4, #193]	@ 0xc1
 8007442:	2b02      	cmp	r3, #2
 8007444:	d03a      	beq.n	80074bc <R3_2_Init+0x234>
    if ( pHandle->_Super.Motor == M1 )
 8007446:	f898 3046 	ldrb.w	r3, [r8, #70]	@ 0x46
 800744a:	b92b      	cbnz	r3, 8007458 <R3_2_Init+0x1d0>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800744c:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 8007450:	2b01      	cmp	r3, #1
 8007452:	d037      	beq.n	80074c4 <R3_2_Init+0x23c>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007454:	2b03      	cmp	r3, #3
 8007456:	d04c      	beq.n	80074f2 <R3_2_Init+0x26a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007458:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800745c:	612b      	str	r3, [r5, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800745e:	f894 30bc 	ldrb.w	r3, [r4, #188]	@ 0xbc
 8007462:	b16b      	cbz	r3, 8007480 <R3_2_Init+0x1f8>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007464:	692b      	ldr	r3, [r5, #16]
 8007466:	05da      	lsls	r2, r3, #23
 8007468:	d50a      	bpl.n	8007480 <R3_2_Init+0x1f8>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800746a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800746e:	9b05      	ldr	r3, [sp, #20]
 8007470:	b133      	cbz	r3, 8007480 <R3_2_Init+0x1f8>
 8007472:	612a      	str	r2, [r5, #16]
      Brk2Timeout--;
 8007474:	9b05      	ldr	r3, [sp, #20]
 8007476:	3b01      	subs	r3, #1
 8007478:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800747a:	692b      	ldr	r3, [r5, #16]
 800747c:	05db      	lsls	r3, r3, #23
 800747e:	d4f6      	bmi.n	800746e <R3_2_Init+0x1e6>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007480:	68eb      	ldr	r3, [r5, #12]
 8007482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007486:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007488:	6a2b      	ldr	r3, [r5, #32]
 800748a:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800748e:	f043 0305 	orr.w	r3, r3, #5
 8007492:	622b      	str	r3, [r5, #32]
}
 8007494:	b007      	add	sp, #28
 8007496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      R3_2_ADCxInit (ADCx_2);
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff fba2 	bl	8006be4 <R3_2_ADCxInit>
 80074a0:	e7ac      	b.n	80073fc <R3_2_Init+0x174>
      R3_2_ADCxInit (ADCx_1);
 80074a2:	4638      	mov	r0, r7
 80074a4:	f7ff fb9e 	bl	8006be4 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80074a8:	2340      	movs	r3, #64	@ 0x40
 80074aa:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074b2:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074b4:	68b3      	ldr	r3, [r6, #8]
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	d4a0      	bmi.n	80073fc <R3_2_Init+0x174>
 80074ba:	e7ee      	b.n	800749a <R3_2_Init+0x212>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80074bc:	f894 30c2 	ldrb.w	r3, [r4, #194]	@ 0xc2
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d00b      	beq.n	80074dc <R3_2_Init+0x254>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80074c4:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 80074c8:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80074ca:	626b      	str	r3, [r5, #36]	@ 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80074cc:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 80074d0:	612b      	str	r3, [r5, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80074d2:	f894 30bc 	ldrb.w	r3, [r4, #188]	@ 0xbc
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1c4      	bne.n	8007464 <R3_2_Init+0x1dc>
 80074da:	e7d1      	b.n	8007480 <R3_2_Init+0x1f8>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80074dc:	f894 20bb 	ldrb.w	r2, [r4, #187]	@ 0xbb
 80074e0:	2a03      	cmp	r2, #3
 80074e2:	d1ef      	bne.n	80074c4 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80074e4:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80074e6:	696b      	ldr	r3, [r5, #20]
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80074ee:	632a      	str	r2, [r5, #48]	@ 0x30
}
 80074f0:	e7e8      	b.n	80074c4 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80074f2:	2201      	movs	r2, #1
 80074f4:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80074f6:	696a      	ldr	r2, [r5, #20]
 80074f8:	f042 0201 	orr.w	r2, r2, #1
 80074fc:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80074fe:	632b      	str	r3, [r5, #48]	@ 0x30
}
 8007500:	e7aa      	b.n	8007458 <R3_2_Init+0x1d0>
 8007502:	bf00      	nop
 8007504:	40012c00 	.word	0x40012c00
 8007508:	e0042000 	.word	0xe0042000

0800750c <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800750c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
{
 800750e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007512:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007514:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PhaseAOffset = 0u;
 8007518:	2300      	movs	r3, #0
 800751a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  pHandle->PolarizationCounter = 0u;
 800751e:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
  pHandle->PhaseCOffset = 0u;
 8007522:	6643      	str	r3, [r0, #100]	@ 0x64
  CLEAR_BIT(TIMx->CCER, Channels);
 8007524:	6a2b      	ldr	r3, [r5, #32]
 8007526:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800752a:	f023 0305 	bic.w	r3, r3, #5
 800752e:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8007530:	2304      	movs	r3, #4
 8007532:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8007536:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800753a:	4b3b      	ldr	r3, [pc, #236]	@ (8007628 <R3_2_CurrentReadingPolarization+0x11c>)
 800753c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800753e:	4b3b      	ldr	r3, [pc, #236]	@ (800762c <R3_2_CurrentReadingPolarization+0x120>)
 8007540:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007542:	2380      	movs	r3, #128	@ 0x80
 8007544:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
{
 8007548:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800754a:	f7ff fd27 	bl	8006f9c <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800754e:	4a38      	ldr	r2, [pc, #224]	@ (8007630 <R3_2_CurrentReadingPolarization+0x124>)
 8007550:	686b      	ldr	r3, [r5, #4]
 8007552:	4013      	ands	r3, r2
 8007554:	2b70      	cmp	r3, #112	@ 0x70
 8007556:	d1fb      	bne.n	8007550 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a36      	ldr	r2, [pc, #216]	@ (8007634 <R3_2_CurrentReadingPolarization+0x128>)
 800755c:	4013      	ands	r3, r2
 800755e:	f043 0308 	orr.w	r3, r3, #8
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	68b3      	ldr	r3, [r6, #8]
 8007566:	4013      	ands	r3, r2
 8007568:	f043 0308 	orr.w	r3, r3, #8
  						  pHandle->pParams_str->RepetitionCounter,
 800756c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800756e:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8007570:	f104 0738 	add.w	r7, r4, #56	@ 0x38
 8007574:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8007578:	f892 20bb 	ldrb.w	r2, [r2, #187]	@ 0xbb
 800757c:	4639      	mov	r1, r7
 800757e:	4643      	mov	r3, r8
 8007580:	4628      	mov	r0, r5
 8007582:	f7ff f9c7 	bl	8006914 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8007586:	4620      	mov	r0, r4
 8007588:	f7ff fd52 	bl	8007030 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 800758c:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800758e:	4b2a      	ldr	r3, [pc, #168]	@ (8007638 <R3_2_CurrentReadingPolarization+0x12c>)
 8007590:	6063      	str	r3, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007592:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8007594:	f884 606c 	strb.w	r6, [r4, #108]	@ 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 8007598:	f884 606d 	strb.w	r6, [r4, #109]	@ 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 800759c:	f884 603a 	strb.w	r6, [r4, #58]	@ 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80075a0:	f7ff fcfc 	bl	8006f9c <R3_2_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 80075a4:	6f62      	ldr	r2, [r4, #116]	@ 0x74
  waitForPolarizationEnd( TIMx,
 80075a6:	4643      	mov	r3, r8
 80075a8:	f892 20bb 	ldrb.w	r2, [r2, #187]	@ 0xbb
 80075ac:	4639      	mov	r1, r7
 80075ae:	4628      	mov	r0, r5
 80075b0:	f7ff f9b0 	bl	8006914 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7ff fd3b 	bl	8007030 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80075ba:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	@ 0x5c
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80075be:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	e9c4 2317 	strd	r2, r3, [r4, #92]	@ 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80075c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80075c8:	4a1c      	ldr	r2, [pc, #112]	@ (800763c <R3_2_CurrentReadingPolarization+0x130>)
 80075ca:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80075cc:	091b      	lsrs	r3, r3, #4
 80075ce:	6663      	str	r3, [r4, #100]	@ 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80075d0:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 80075d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007640 <R3_2_CurrentReadingPolarization+0x134>)
 80075d4:	61a2      	str	r2, [r4, #24]
 80075d6:	f023 0308 	bic.w	r3, r3, #8
 80075da:	61ab      	str	r3, [r5, #24]
 80075dc:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80075de:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80075e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075e6:	61aa      	str	r2, [r5, #24]
 80075e8:	69ea      	ldr	r2, [r5, #28]
 80075ea:	f022 0208 	bic.w	r2, r2, #8
 80075ee:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80075f0:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80075f2:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80075f4:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80075f6:	69ab      	ldr	r3, [r5, #24]
 80075f8:	f043 0308 	orr.w	r3, r3, #8
 80075fc:	61ab      	str	r3, [r5, #24]
 80075fe:	69ab      	ldr	r3, [r5, #24]
 8007600:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007604:	61ab      	str	r3, [r5, #24]
 8007606:	69eb      	ldr	r3, [r5, #28]
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800760e:	6a2b      	ldr	r3, [r5, #32]
 8007610:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector=SECTOR_5;
 8007614:	2204      	movs	r2, #4
 8007616:	f043 0305 	orr.w	r3, r3, #5
 800761a:	622b      	str	r3, [r5, #32]
 800761c:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
  pHandle->BrakeActionLock = false;
 8007620:	f884 6070 	strb.w	r6, [r4, #112]	@ 0x70
}
 8007624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007628:	08006eb9 	.word	0x08006eb9
 800762c:	08006e01 	.word	0x08006e01
 8007630:	02000070 	.word	0x02000070
 8007634:	7fffffc0 	.word	0x7fffffc0
 8007638:	08006f05 	.word	0x08006f05
 800763c:	08006c99 	.word	0x08006c99
 8007640:	08006e3d 	.word	0x08006e3d

08007644 <R3_2_TIMx_UP_IRQHandler>:
{
 8007644:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007646:	6f42      	ldr	r2, [r0, #116]	@ 0x74
{
 8007648:	4684      	mov	ip, r0
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800764a:	68d0      	ldr	r0, [r2, #12]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800764c:	6894      	ldr	r4, [r2, #8]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800764e:	f89c e03a 	ldrb.w	lr, [ip, #58]	@ 0x3a
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007652:	e9d2 1500 	ldrd	r1, r5, [r2]
  if ( OPAMPParams != NULL )
 8007656:	b378      	cbz	r0, 80076b8 <R3_2_TIMx_UP_IRQHandler+0x74>
    while (ADCx_1->JSQR != 0x0u)
 8007658:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1fc      	bne.n	8007658 <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800765e:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 8007662:	fa0f fe8e 	sxth.w	lr, lr
 8007666:	68de      	ldr	r6, [r3, #12]
    if (Opamp != NULL )
 8007668:	b12e      	cbz	r6, 8007676 <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800766a:	6830      	ldr	r0, [r6, #0]
 800766c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 800766e:	f420 7086 	bic.w	r0, r0, #268	@ 0x10c
 8007672:	4338      	orrs	r0, r7
 8007674:	6030      	str	r0, [r6, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007676:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    if (Opamp != NULL )
 8007678:	b128      	cbz	r0, 8007686 <R3_2_TIMx_UP_IRQHandler+0x42>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800767a:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800767c:	6803      	ldr	r3, [r0, #0]
 800767e:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 8007682:	4333      	orrs	r3, r6
 8007684:	6003      	str	r3, [r0, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007686:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800768a:	f8bc 306a 	ldrh.w	r3, [ip, #106]	@ 0x6a
 800768e:	6fd0      	ldr	r0, [r2, #124]	@ 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007690:	f8d2 6094 	ldr.w	r6, [r2, #148]	@ 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007694:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007696:	4333      	orrs	r3, r6
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007698:	64c8      	str	r0, [r1, #76]	@ 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800769a:	64eb      	str	r3, [r5, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800769c:	6863      	ldr	r3, [r4, #4]
 800769e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80076a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80076a6:	2280      	movs	r2, #128	@ 0x80
 80076a8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80076ac:	6063      	str	r3, [r4, #4]
}
 80076ae:	f10c 0046 	add.w	r0, ip, #70	@ 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80076b2:	f8ac 206a 	strh.w	r2, [ip, #106]	@ 0x6a
}
 80076b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b8:	fa0f fe8e 	sxth.w	lr, lr
 80076bc:	e7e3      	b.n	8007686 <R3_2_TIMx_UP_IRQHandler+0x42>
 80076be:	bf00      	nop

080076c0 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80076c0:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
 80076c4:	b923      	cbnz	r3, 80076d0 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80076c6:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80076c8:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 80076cc:	2a02      	cmp	r2, #2
 80076ce:	d004      	beq.n	80076da <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f880 306e 	strb.w	r3, [r0, #110]	@ 0x6e
}
 80076d6:	3046      	adds	r0, #70	@ 0x46
 80076d8:	4770      	bx	lr
{
 80076da:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80076dc:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80076e0:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	@ 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80076e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076e6:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80076e8:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	@ 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80076ec:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80076f0:	628c      	str	r4, [r1, #40]	@ 0x28
 80076f2:	6293      	str	r3, [r2, #40]	@ 0x28
  pHandle->OverCurrentFlag = true;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f880 306e 	strb.w	r3, [r0, #110]	@ 0x6e
}
 80076fa:	bc30      	pop	{r4, r5}
 80076fc:	3046      	adds	r0, #70	@ 0x46
 80076fe:	4770      	bx	lr

08007700 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007700:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8007702:	6891      	ldr	r1, [r2, #8]
 8007704:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8007706:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 8007708:	f240 1c01 	movw	ip, #257	@ 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800770c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007710:	644a      	str	r2, [r1, #68]	@ 0x44
}
 8007712:	3046      	adds	r0, #70	@ 0x46
  pHandle->OverVoltageFlag = true;
 8007714:	f8a3 c06f 	strh.w	ip, [r3, #111]	@ 0x6f
}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop

0800771c <R3_2_IsOverCurrentOccurred>:
{
 800771c:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 800771e:	f890 006f 	ldrb.w	r0, [r0, #111]	@ 0x6f
 8007722:	b160      	cbz	r0, 800773e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8007724:	2200      	movs	r2, #0
 8007726:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
 800772a:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 800772c:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800772e:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
 8007732:	b11a      	cbz	r2, 800773c <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8007734:	2200      	movs	r2, #0
 8007736:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
    retVal |= MC_BREAK_IN;
 800773a:	4608      	mov	r0, r1
}
 800773c:	4770      	bx	lr
 800773e:	2140      	movs	r1, #64	@ 0x40
 8007740:	e7f5      	b.n	800772e <R3_2_IsOverCurrentOccurred+0x12>
 8007742:	bf00      	nop

08007744 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8007744:	f890 1047 	ldrb.w	r1, [r0, #71]	@ 0x47
{
 8007748:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 800774a:	2900      	cmp	r1, #0
 800774c:	d13c      	bne.n	80077c8 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800774e:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8007750:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007758:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800775c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007760:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800776a:	6a1a      	ldr	r2, [r3, #32]
 800776c:	f022 0204 	bic.w	r2, r2, #4
 8007770:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007772:	6359      	str	r1, [r3, #52]	@ 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007774:	f895 20ba 	ldrb.w	r2, [r5, #186]	@ 0xba
 8007778:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800777a:	f103 0418 	add.w	r4, r3, #24
 800777e:	d030      	beq.n	80077e2 <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007780:	2a02      	cmp	r2, #2
 8007782:	d10f      	bne.n	80077a4 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800778a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800778e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007792:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007794:	6a1a      	ldr	r2, [r3, #32]
 8007796:	f042 0210 	orr.w	r2, r2, #16
 800779a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a2:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80077a4:	6862      	ldr	r2, [r4, #4]
 80077a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80077aa:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80077ae:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 80077b2:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80077b4:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 80077b6:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80077b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077bc:	621a      	str	r2, [r3, #32]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077c4:	621a      	str	r2, [r3, #32]
 80077c6:	65c1      	str	r1, [r0, #92]	@ 0x5c
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80077c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007804 <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 80077ca:	490f      	ldr	r1, [pc, #60]	@ (8007808 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80077cc:	4a0f      	ldr	r2, [pc, #60]	@ (800780c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80077ce:	4c10      	ldr	r4, [pc, #64]	@ (8007810 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80077d0:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 80077d2:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80077d4:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80077d6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80077da:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80077dc:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
}
 80077e0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80077e8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80077ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	f022 0210 	bic.w	r2, r2, #16
 80077f8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007800:	621a      	str	r2, [r3, #32]
}
 8007802:	e7cf      	b.n	80077a4 <R3_2_RLDetectionModeEnable+0x60>
 8007804:	080070f9 	.word	0x080070f9
 8007808:	08007145 	.word	0x08007145
 800780c:	08007031 	.word	0x08007031
 8007810:	080070ad 	.word	0x080070ad

08007814 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8007814:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 8007818:	2b00      	cmp	r3, #0
 800781a:	d03c      	beq.n	8007896 <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800781c:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 800781e:	688b      	ldr	r3, [r1, #8]
{
 8007820:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	4c40      	ldr	r4, [pc, #256]	@ (8007928 <R3_2_RLDetectionModeDisable+0x114>)
 8007826:	4022      	ands	r2, r4
 8007828:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800782c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800782e:	6a1a      	ldr	r2, [r3, #32]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007836:	f891 10ba 	ldrb.w	r1, [r1, #186]	@ 0xba
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800783a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800783e:	2901      	cmp	r1, #1
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007840:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007844:	d028      	beq.n	8007898 <R3_2_RLDetectionModeDisable+0x84>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007846:	2902      	cmp	r1, #2
 8007848:	d04a      	beq.n	80078e0 <R3_2_RLDetectionModeDisable+0xcc>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800784a:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800784c:	6999      	ldr	r1, [r3, #24]
 800784e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8007852:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 8007856:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 800785a:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800785c:	6a19      	ldr	r1, [r3, #32]
 800785e:	f041 0110 	orr.w	r1, r1, #16
 8007862:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	4021      	ands	r1, r4
 800786a:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 800786e:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007870:	6a19      	ldr	r1, [r3, #32]
 8007872:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8007876:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007878:	492c      	ldr	r1, [pc, #176]	@ (800792c <R3_2_RLDetectionModeDisable+0x118>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800787a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800787c:	4a2c      	ldr	r2, [pc, #176]	@ (8007930 <R3_2_RLDetectionModeDisable+0x11c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800787e:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007880:	492c      	ldr	r1, [pc, #176]	@ (8007934 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007882:	4c2d      	ldr	r4, [pc, #180]	@ (8007938 <R3_2_RLDetectionModeDisable+0x124>)
 8007884:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007886:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007888:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800788c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8007890:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
}
 8007894:	4770      	bx	lr
 8007896:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007898:	6a19      	ldr	r1, [r3, #32]
 800789a:	f041 0104 	orr.w	r1, r1, #4
 800789e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80078a0:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80078a2:	6999      	ldr	r1, [r3, #24]
 80078a4:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80078a8:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 80078ac:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 80078b0:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80078b2:	6a19      	ldr	r1, [r3, #32]
 80078b4:	f041 0110 	orr.w	r1, r1, #16
 80078b8:	6219      	str	r1, [r3, #32]
 80078ba:	6a19      	ldr	r1, [r3, #32]
 80078bc:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80078c0:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80078c2:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80078c4:	69d9      	ldr	r1, [r3, #28]
 80078c6:	4021      	ands	r1, r4
 80078c8:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80078cc:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80078ce:	6a19      	ldr	r1, [r3, #32]
 80078d0:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80078d4:	6219      	str	r1, [r3, #32]
 80078d6:	6a19      	ldr	r1, [r3, #32]
 80078d8:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80078dc:	6219      	str	r1, [r3, #32]
}
 80078de:	e7cb      	b.n	8007878 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 80078e0:	6a19      	ldr	r1, [r3, #32]
 80078e2:	f021 0104 	bic.w	r1, r1, #4
 80078e6:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80078e8:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80078ea:	6999      	ldr	r1, [r3, #24]
 80078ec:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80078f0:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 80078f4:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 80078f8:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80078fa:	6a19      	ldr	r1, [r3, #32]
 80078fc:	f041 0110 	orr.w	r1, r1, #16
 8007900:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007902:	6a19      	ldr	r1, [r3, #32]
 8007904:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8007908:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800790a:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800790c:	69d9      	ldr	r1, [r3, #28]
 800790e:	4021      	ands	r1, r4
 8007910:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 8007914:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007916:	6a19      	ldr	r1, [r3, #32]
 8007918:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800791c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800791e:	6a19      	ldr	r1, [r3, #32]
 8007920:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8007924:	6219      	str	r1, [r3, #32]
}
 8007926:	e7a7      	b.n	8007878 <R3_2_RLDetectionModeDisable+0x64>
 8007928:	fffeff8c 	.word	0xfffeff8c
 800792c:	08006c99 	.word	0x08006c99
 8007930:	08007031 	.word	0x08007031
 8007934:	08006f9d 	.word	0x08006f9d
 8007938:	08006f49 	.word	0x08006f49

0800793c <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800793c:	6f42      	ldr	r2, [r0, #116]	@ 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800793e:	f8b0 c068 	ldrh.w	ip, [r0, #104]	@ 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007942:	6892      	ldr	r2, [r2, #8]
{
 8007944:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007946:	69d0      	ldr	r0, [r2, #28]
 8007948:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800794c:	fb01 f10c 	mul.w	r1, r1, ip
 8007950:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 8007954:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007956:	0c09      	lsrs	r1, r1, #16
  pHandle->ADCRegularLocked=true;
 8007958:	2401      	movs	r4, #1
 800795a:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800795e:	f883 4078 	strb.w	r4, [r3, #120]	@ 0x78
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007962:	8659      	strh	r1, [r3, #50]	@ 0x32
 8007964:	61d0      	str	r0, [r2, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007966:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 800796a:	f8b3 4058 	ldrh.w	r4, [r3, #88]	@ 0x58
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800796e:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007972:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007974:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007976:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007978:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800797a:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
 800797c:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8007980:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  pHdl->Sector = SECTOR_4;
 8007984:	f04f 0c03 	mov.w	ip, #3
 8007988:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800798c:	6051      	str	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800798e:	2801      	cmp	r0, #1
  pHdl->Sector = SECTOR_4;
 8007990:	f883 c03a 	strb.w	ip, [r3, #58]	@ 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007994:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007996:	d007      	beq.n	80079a8 <R3_2_RLDetectionModeSetDuty+0x6c>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 800799a:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800799e:	421a      	tst	r2, r3
 80079a0:	bf14      	ite	ne
 80079a2:	2001      	movne	r0, #1
 80079a4:	2000      	moveq	r0, #0
}
 80079a6:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 80079a8:	2200      	movs	r2, #0
}
 80079aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.SWerror = 0u;
 80079ae:	871a      	strh	r2, [r3, #56]	@ 0x38
}
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	02000070 	.word	0x02000070

080079b8 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80079b8:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 80079bc:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80079be:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80079c0:	4494      	add	ip, r2
 80079c2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80079c6:	b430      	push	{r4, r5}
 80079c8:	2500      	movs	r5, #0
 80079ca:	f36c 050f 	bfi	r5, ip, #0, #16
 80079ce:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80079d2:	b14b      	cbz	r3, 80079e8 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 80079d4:	6a04      	ldr	r4, [r0, #32]
 80079d6:	2300      	movs	r3, #0
 80079d8:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80079da:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 80079dc:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80079e0:	8b01      	ldrh	r1, [r0, #24]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	4291      	cmp	r1, r2
 80079e6:	d8f7      	bhi.n	80079d8 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80079e8:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 80079ea:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 80079ec:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
}
 80079f0:	bc30      	pop	{r4, r5}
 80079f2:	4770      	bx	lr

080079f4 <RVBS_Init>:
{
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80079f8:	300c      	adds	r0, #12
 80079fa:	f7fa fad3 	bl	8001fa4 <RCM_RegisterRegConv>
 80079fe:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
  RVBS_Clear( pHandle );
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7ff ffd8 	bl	80079b8 <RVBS_Clear>
}
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	bf00      	nop

08007a0c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007a0c:	88c3      	ldrh	r3, [r0, #6]
 8007a0e:	8b42      	ldrh	r2, [r0, #26]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d306      	bcc.n	8007a22 <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007a14:	8b80      	ldrh	r0, [r0, #28]
 8007a16:	4298      	cmp	r0, r3
 8007a18:	bf94      	ite	ls
 8007a1a:	2000      	movls	r0, #0
 8007a1c:	2001      	movhi	r0, #1
 8007a1e:	0080      	lsls	r0, r0, #2
 8007a20:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007a22:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop

08007a28 <RVBS_CalcAvVbus>:
{
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007a2c:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8007a30:	f7fa fbba 	bl	80021a8 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	d01e      	beq.n	8007a7a <RVBS_CalcAvVbus+0x52>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007a3c:	6a26      	ldr	r6, [r4, #32]
 8007a3e:	f894 c025 	ldrb.w	ip, [r4, #37]	@ 0x25
 8007a42:	f826 001c 	strh.w	r0, [r6, ip, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007a46:	8b25      	ldrh	r5, [r4, #24]
 8007a48:	b1e5      	cbz	r5, 8007a84 <RVBS_CalcAvVbus+0x5c>
 8007a4a:	2300      	movs	r3, #0
    wtemp = 0;
 8007a4c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007a4e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007a52:	3301      	adds	r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 8007a58:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007a5a:	d3f8      	bcc.n	8007a4e <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007a5c:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007a60:	1e6b      	subs	r3, r5, #1
 8007a62:	459c      	cmp	ip, r3
      pHandle->index++;
 8007a64:	bfb4      	ite	lt
 8007a66:	f10c 0c01 	addlt.w	ip, ip, #1
      pHandle->index = 0;
 8007a6a:	2300      	movge	r3, #0
    pHandle->_Super.LatestConv = hAux;
 8007a6c:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007a6e:	80e2      	strh	r2, [r4, #6]
      pHandle->index++;
 8007a70:	bfb4      	ite	lt
 8007a72:	f884 c025 	strblt.w	ip, [r4, #37]	@ 0x25
      pHandle->index = 0;
 8007a76:	f884 3025 	strbge.w	r3, [r4, #37]	@ 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff ffc6 	bl	8007a0c <RVBS_CheckFaultState>
 8007a80:	8120      	strh	r0, [r4, #8]
}
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
    wtemp /= pHandle->LowPassFilterBW;
 8007a84:	deff      	udf	#255	@ 0xff
 8007a86:	bf00      	nop

08007a88 <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 8007a88:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007a8a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007a8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007a90:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007a94:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007a96:	4770      	bx	lr

08007a98 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8007a98:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007a9c:	2901      	cmp	r1, #1
{
 8007a9e:	b410      	push	{r4}
 8007aa0:	4603      	mov	r3, r0
    pHandle->RampRemainingStep --;
  }
  else if ( pHandle->RampRemainingStep == 1u )
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007aa2:	6944      	ldr	r4, [r0, #20]
  if ( pHandle->RampRemainingStep > 1u )
 8007aa4:	d909      	bls.n	8007aba <REMNG_Calc+0x22>
    current_ref += pHandle->IncDecAmount;
 8007aa6:	6900      	ldr	r0, [r0, #16]
    pHandle->RampRemainingStep --;
 8007aa8:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007aaa:	4402      	add	r2, r0
    pHandle->RampRemainingStep --;
 8007aac:	60d9      	str	r1, [r3, #12]
  pHandle->Ext = current_ref;

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007aae:	fb92 f0f4 	sdiv	r0, r2, r4
  pHandle->Ext = current_ref;
 8007ab2:	609a      	str	r2, [r3, #8]
#endif

  return ret_val;
}
 8007ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab8:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8007aba:	d005      	beq.n	8007ac8 <REMNG_Calc+0x30>
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007abc:	fb92 f0f4 	sdiv	r0, r2, r4
}
 8007ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->Ext = current_ref;
 8007ac4:	609a      	str	r2, [r3, #8]
}
 8007ac6:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007ac8:	6840      	ldr	r0, [r0, #4]
 8007aca:	fb04 f200 	mul.w	r2, r4, r0
    pHandle->RampRemainingStep = 0u;
 8007ace:	2100      	movs	r1, #0
}
 8007ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0u;
 8007ad4:	60d9      	str	r1, [r3, #12]
  pHandle->Ext = current_ref;
 8007ad6:	609a      	str	r2, [r3, #8]
}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop

08007adc <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8007adc:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8007ade:	fab0 f080 	clz	r0, r0
 8007ae2:	0940      	lsrs	r0, r0, #5
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop

08007ae8 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bfb8      	it	lt
 8007aec:	4240      	neglt	r0, r0
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
    if ( TargetAbs >= limit )
 8007aee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007af2:	d213      	bcs.n	8007b1c <getScalingFactor+0x34>
 8007af4:	2302      	movs	r3, #2
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007af6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007afa:	e001      	b.n	8007b00 <getScalingFactor+0x18>
  for ( i = 1u; i < 32u; i++ )
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d00a      	beq.n	8007b16 <getScalingFactor+0x2e>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007b00:	fa2c f203 	lsr.w	r2, ip, r3
    if ( TargetAbs >= limit )
 8007b04:	4290      	cmp	r0, r2
 8007b06:	4619      	mov	r1, r3
 8007b08:	f103 0301 	add.w	r3, r3, #1
 8007b0c:	d3f6      	bcc.n	8007afc <getScalingFactor+0x14>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 8007b0e:	3901      	subs	r1, #1
 8007b10:	2001      	movs	r0, #1
 8007b12:	4088      	lsls	r0, r1
 8007b14:	4770      	bx	lr
 8007b16:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007b1a:	4770      	bx	lr
    if ( TargetAbs >= limit )
 8007b1c:	2001      	movs	r0, #1
}
 8007b1e:	4770      	bx	lr

08007b20 <REMNG_ExecRamp>:
{
 8007b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	4604      	mov	r4, r0
 8007b26:	460e      	mov	r6, r1
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007b28:	6880      	ldr	r0, [r0, #8]
 8007b2a:	6963      	ldr	r3, [r4, #20]
  if ( Durationms == 0u )
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	b962      	cbnz	r2, 8007b4a <REMNG_ExecRamp+0x2a>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007b30:	4608      	mov	r0, r1
 8007b32:	f7ff ffd9 	bl	8007ae8 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007b36:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007b3a:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007b3c:	4628      	mov	r0, r5
    pHandle->IncDecAmount = 0;
 8007b3e:	e9c4 5003 	strd	r5, r0, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007b42:	60a6      	str	r6, [r4, #8]
}
 8007b44:	2001      	movs	r0, #1
 8007b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007b4a:	fb90 f8f3 	sdiv	r8, r0, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007b4e:	eba1 0708 	sub.w	r7, r1, r8
 8007b52:	4638      	mov	r0, r7
 8007b54:	f7ff ffc8 	bl	8007ae8 <getScalingFactor>
 8007b58:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	f7ff ffc4 	bl	8007ae8 <getScalingFactor>
 8007b60:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7ff ffc0 	bl	8007ae8 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8007b68:	45ca      	cmp	sl, r9
 8007b6a:	d318      	bcc.n	8007b9e <REMNG_ExecRamp+0x7e>
      if ( wScalingFactor2 < wScalingFactor3 )
 8007b6c:	4548      	cmp	r0, r9
 8007b6e:	bf28      	it	cs
 8007b70:	4648      	movcs	r0, r9
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007b72:	fb08 f300 	mul.w	r3, r8, r0
 8007b76:	60a3      	str	r3, [r4, #8]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007b78:	6823      	ldr	r3, [r4, #0]
    aux /= 1000u;
 8007b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8007ba8 <REMNG_ExecRamp+0x88>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8007b7c:	6160      	str	r0, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007b7e:	fb05 f303 	mul.w	r3, r5, r3
    aux /= 1000u;
 8007b82:	fba2 2303 	umull	r2, r3, r2, r3
 8007b86:	099b      	lsrs	r3, r3, #6
    pHandle->RampRemainingStep++;
 8007b88:	1c5d      	adds	r5, r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8007b8a:	fb07 f000 	mul.w	r0, r7, r0
    pHandle->TargetFinal = TargetFinal;
 8007b8e:	6066      	str	r6, [r4, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8007b90:	fb90 f0f5 	sdiv	r0, r0, r5
    pHandle->IncDecAmount = 0;
 8007b94:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8007b98:	2001      	movs	r0, #1
 8007b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ( wScalingFactor < wScalingFactor3 )
 8007b9e:	4550      	cmp	r0, sl
 8007ba0:	bf28      	it	cs
 8007ba2:	4650      	movcs	r0, sl
 8007ba4:	e7e5      	b.n	8007b72 <REMNG_ExecRamp+0x52>
 8007ba6:	bf00      	nop
 8007ba8:	10624dd3 	.word	0x10624dd3

08007bac <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8007bac:	b500      	push	{lr}
  RevUpCtrl_PhaseParams_t * pRUCPhaseParams = &pHandle->ParamsData[0];
  uint8_t bPhase = 0u;

  pHandle->pSTC = pSTC;
 8007bae:	6681      	str	r1, [r0, #104]	@ 0x68
  pHandle->OTFSCLowside = false;
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007bb0:	6941      	ldr	r1, [r0, #20]
  pHandle->pSNSL = pSNSL;
 8007bb2:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
  pHandle->OTFSCLowside = false;
 8007bb6:	f04f 0c00 	mov.w	ip, #0
  pHandle->pPWM = pPWM;
 8007bba:	9b01      	ldr	r3, [sp, #4]
  pHandle->OTFSCLowside = false;
 8007bbc:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
  pHandle->pPWM = pPWM;
 8007bc0:	6743      	str	r3, [r0, #116]	@ 0x74
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007bc2:	b309      	cbz	r1, 8007c08 <RUC_Init+0x5c>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007bc4:	688b      	ldr	r3, [r1, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007bc6:	b323      	cbz	r3, 8007c12 <RUC_Init+0x66>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007bc8:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007bca:	b32b      	cbz	r3, 8007c18 <RUC_Init+0x6c>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007bcc:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007bce:	b333      	cbz	r3, 8007c1e <RUC_Init+0x72>
 8007bd0:	689b      	ldr	r3, [r3, #8]
    bPhase++;
 8007bd2:	f04f 0c05 	mov.w	ip, #5
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007bd6:	b1cb      	cbz	r3, 8007c0c <RUC_Init+0x60>
 8007bd8:	2204      	movs	r2, #4
 8007bda:	f04f 0c05 	mov.w	ip, #5
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

  pHandle->bPhaseNbr = bPhase;

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007bde:	8803      	ldrh	r3, [r0, #0]
 8007be0:	4910      	ldr	r1, [pc, #64]	@ (8007c24 <RUC_Init+0x78>)
 8007be2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8007be6:	fb0e f303 	mul.w	r3, lr, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007bea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007bee:	fba1 1303 	umull	r1, r3, r1, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007bf2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007bf6:	2100      	movs	r1, #0
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007bf8:	099b      	lsrs	r3, r3, #6
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007bfa:	6151      	str	r1, [r2, #20]
  pHandle->bPhaseNbr = bPhase;
 8007bfc:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007c00:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56

}
 8007c04:	f85d fb04 	ldr.w	pc, [sp], #4
    bPhase++;
 8007c08:	f04f 0c01 	mov.w	ip, #1
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007c0c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8007c10:	e7e5      	b.n	8007bde <RUC_Init+0x32>
    bPhase++;
 8007c12:	f04f 0c02 	mov.w	ip, #2
 8007c16:	e7f9      	b.n	8007c0c <RUC_Init+0x60>
 8007c18:	f04f 0c03 	mov.w	ip, #3
 8007c1c:	e7f6      	b.n	8007c0c <RUC_Init+0x60>
 8007c1e:	f04f 0c04 	mov.w	ip, #4
 8007c22:	e7f3      	b.n	8007c0c <RUC_Init+0x60>
 8007c24:	10624dd3 	.word	0x10624dd3

08007c28 <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
 8007c2c:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8007c2e:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
  RevUpCtrl_PhaseParams_t * pPhaseParams = pHandle->ParamsData;

  pHandle->hDirection = hMotorDirection;
 8007c32:	80c1      	strh	r1, [r0, #6]
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 8007c34:	2600      	movs	r6, #0
{
 8007c36:	4604      	mov	r4, r0
  pHandle->bStageCnt = 0u;
 8007c38:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
  pHandle->bOTFRelCounter = 0u;
 8007c3c:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
  pHandle->OTFSCLowside = false;
 8007c40:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8007c44:	4638      	mov	r0, r7

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007c46:	b28d      	uxth	r5, r1
  VSS_Clear( pVSS );
 8007c48:	f000 fe6e 	bl	8008928 <VSS_Clear>
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4640      	mov	r0, r8
 8007c50:	f000 f918 	bl	8007e84 <STC_SetControlMode>
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007c54:	8861      	ldrh	r1, [r4, #2]
 8007c56:	fb11 f105 	smulbb	r1, r1, r5
 8007c5a:	b209      	sxth	r1, r1
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f000 ff11 	bl	8008a84 <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8007c62:	4632      	mov	r2, r6
 8007c64:	4631      	mov	r1, r6
 8007c66:	4640      	mov	r0, r8
 8007c68:	f000 f910 	bl	8007e8c <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 8007c6c:	8a21      	ldrh	r1, [r4, #16]
 8007c6e:	89a2      	ldrh	r2, [r4, #12]
 8007c70:	fb11 f105 	smulbb	r1, r1, r5
 8007c74:	b209      	sxth	r1, r1
 8007c76:	4640      	mov	r0, r8
 8007c78:	f000 f908 	bl	8007e8c <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 8007c7c:	89e1      	ldrh	r1, [r4, #14]
 8007c7e:	89a2      	ldrh	r2, [r4, #12]
 8007c80:	fb11 f105 	smulbb	r1, r1, r5
 8007c84:	b209      	sxth	r1, r1
 8007c86:	4638      	mov	r0, r7
 8007c88:	f000 ff04 	bl	8008a94 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007c8e:	8821      	ldrh	r1, [r4, #0]
 8007c90:	4a06      	ldr	r2, [pc, #24]	@ (8007cac <RUC_Clear+0x84>)

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8007c92:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	099b      	lsrs	r3, r3, #6
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8007ca0:	6962      	ldr	r2, [r4, #20]
 8007ca2:	60a2      	str	r2, [r4, #8]
  pHandle->hPhaseRemainingTicks++;
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	80a3      	strh	r3, [r4, #4]
}
 8007ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cac:	10624dd3 	.word	0x10624dd3

08007cb0 <RUC_Exec>:
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007cb0:	8883      	ldrh	r3, [r0, #4]
{
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007cb6:	bb43      	cbnz	r3, 8007d0a <RUC_Exec+0x5a>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8007cb8:	68a0      	ldr	r0, [r4, #8]
 8007cba:	b328      	cbz	r0, 8007d08 <RUC_Exec+0x58>
    {

      /* If it becomes zero the current phase has been completed.*/
      /* Gives the next command to STC and VSS.*/
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007cbc:	8881      	ldrh	r1, [r0, #4]
 8007cbe:	88e3      	ldrh	r3, [r4, #6]
 8007cc0:	8802      	ldrh	r2, [r0, #0]
 8007cc2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8007cc4:	fb11 f103 	smulbb	r1, r1, r3
 8007cc8:	b209      	sxth	r1, r1
 8007cca:	f000 f8df 	bl	8007e8c <STC_ExecRamp>
                    ( uint32_t )( pHandle->pCurrentPhaseParams->hDurationms ) );

      VSS_SetMecAcceleration( pHandle->pVSS,
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	88e0      	ldrh	r0, [r4, #6]
 8007cd2:	8859      	ldrh	r1, [r3, #2]
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007cd4:	881a      	ldrh	r2, [r3, #0]
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007cd6:	fb11 f100 	smulbb	r1, r1, r0
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007cda:	b209      	sxth	r1, r1
 8007cdc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8007cde:	f000 fed9 	bl	8008a94 <VSS_SetMecAcceleration>
                              pHandle->pCurrentPhaseParams->hDurationms );

      /* Compute hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks =
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007ce2:	68a1      	ldr	r1, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007ce4:	8820      	ldrh	r0, [r4, #0]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007ce6:	880b      	ldrh	r3, [r1, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d18 <RUC_Exec+0x68>)
      pHandle->hPhaseRemainingTicks++;

      /*Set the next phases parameter pointer.*/
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8007cea:	6889      	ldr	r1, [r1, #8]
 8007cec:	60a1      	str	r1, [r4, #8]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007cee:	fb00 f303 	mul.w	r3, r0, r3
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3

      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
 8007cf6:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007cfa:	099b      	lsrs	r3, r3, #6
      pHandle->hPhaseRemainingTicks++;
 8007cfc:	3301      	adds	r3, #1
      pHandle->bStageCnt++;
 8007cfe:	3201      	adds	r2, #1
      pHandle->hPhaseRemainingTicks++;
 8007d00:	80a3      	strh	r3, [r4, #4]
      pHandle->bStageCnt++;
 8007d02:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 8007d06:	2001      	movs	r0, #1
    {
      retVal = false;
    }
  }
  return retVal;
}
 8007d08:	bd10      	pop	{r4, pc}
    pHandle->hPhaseRemainingTicks--;
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0d1      	beq.n	8007cb8 <RUC_Exec+0x8>
  bool retVal = true;
 8007d14:	2001      	movs	r0, #1
}
 8007d16:	bd10      	pop	{r4, pc}
 8007d18:	10624dd3 	.word	0x10624dd3

08007d1c <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 8007d1c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8007d20:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
  {
    retVal = true;
  }
  return retVal;
}
 8007d24:	4282      	cmp	r2, r0
 8007d26:	bf34      	ite	cc
 8007d28:	2000      	movcc	r0, #0
 8007d2a:	2001      	movcs	r0, #1
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop

08007d30 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8007d30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d34:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007d38:	8182      	strh	r2, [r0, #12]
}
 8007d3a:	4770      	bx	lr

08007d3c <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007d3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007d44:	81c2      	strh	r2, [r0, #14]
}
 8007d46:	4770      	bx	lr

08007d48 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8007d48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d4c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007d50:	8202      	strh	r2, [r0, #16]
}
 8007d52:	4770      	bx	lr

08007d54 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8007d54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d58:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8007d5c:	8980      	ldrh	r0, [r0, #12]
 8007d5e:	4770      	bx	lr

08007d60 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8007d60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d64:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8007d68:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop

08007d70 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8007d70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8007d78:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8007d80:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8007d88:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8007d90:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop

08007d98 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007d98:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop

08007da0 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8007da0:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8007da4:	4603      	mov	r3, r0
 8007da6:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 8007da8:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 8007dac:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 8007db0:	bfb8      	it	lt
 8007db2:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007db4:	f8b3 e016 	ldrh.w	lr, [r3, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007db8:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007dba:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007dbc:	8a9c      	ldrh	r4, [r3, #20]
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8007dbe:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
    hAux = -( *pMecSpeedUnit );
 8007dc2:	bfb8      	it	lt
 8007dc4:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007dc6:	458e      	cmp	lr, r1
 8007dc8:	d816      	bhi.n	8007df8 <SPD_IsMecSpeedReliable+0x58>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8007dca:	fa1f fe8c 	uxth.w	lr, ip
  if ( pHandle->hMecAccelUnitP < 0 )
 8007dce:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8007dd2:	bfb8      	it	lt
 8007dd4:	f1ce 0e00 	rsblt	lr, lr, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007dd8:	f8b3 c018 	ldrh.w	ip, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8007ddc:	bfb8      	it	lt
 8007dde:	fa1f fe8e 	uxthlt.w	lr, lr
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007de2:	45f4      	cmp	ip, lr
 8007de4:	d308      	bcc.n	8007df8 <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8007de6:	428c      	cmp	r4, r1
 8007de8:	d306      	bcc.n	8007df8 <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007dea:	4290      	cmp	r0, r2
 8007dec:	d809      	bhi.n	8007e02 <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8007dee:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007df0:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8007df2:	bf18      	it	ne
 8007df4:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 8007df6:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007df8:	4290      	cmp	r0, r2
 8007dfa:	d9f8      	bls.n	8007dee <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	e7f5      	b.n	8007dee <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 8007e02:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007e04:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8007e06:	2001      	movs	r0, #1
}
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop

08007e0c <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8007e0c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007e10:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8007e14:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007e18:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8007e1c:	b200      	sxth	r0, r0
 8007e1e:	4770      	bx	lr

08007e20 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007e20:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 8007e24:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007e26:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->SPD = SPD_Handle;
 8007e2a:	6142      	str	r2, [r0, #20]
{
 8007e2c:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8007e2e:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8007e32:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8007e34:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007e36:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007e3a:	0409      	lsls	r1, r1, #16
 8007e3c:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8007e40:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8007e42:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8007e46:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007e48:	6183      	str	r3, [r0, #24]
}
 8007e4a:	4770      	bx	lr

08007e4c <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8007e4c:	6141      	str	r1, [r0, #20]
}
 8007e4e:	4770      	bx	lr

08007e50 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007e50:	6940      	ldr	r0, [r0, #20]
 8007e52:	4770      	bx	lr

08007e54 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007e54:	7803      	ldrb	r3, [r0, #0]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d000      	beq.n	8007e5c <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8007e5a:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8007e5c:	6900      	ldr	r0, [r0, #16]
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f7fe bc9c 	b.w	800679c <PID_SetIntegralTerm>

08007e64 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8007e64:	6840      	ldr	r0, [r0, #4]
 8007e66:	2800      	cmp	r0, #0
 8007e68:	bfbc      	itt	lt
 8007e6a:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8007e6e:	30ff      	addlt	r0, #255	@ 0xff
}
 8007e70:	1400      	asrs	r0, r0, #16
 8007e72:	4770      	bx	lr

08007e74 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8007e74:	6880      	ldr	r0, [r0, #8]
 8007e76:	2800      	cmp	r0, #0
 8007e78:	bfbc      	itt	lt
 8007e7a:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8007e7e:	30ff      	addlt	r0, #255	@ 0xff
}
 8007e80:	1400      	asrs	r0, r0, #16
 8007e82:	4770      	bx	lr

08007e84 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007e84:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8007e86:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007e88:	60c3      	str	r3, [r0, #12]
}
 8007e8a:	4770      	bx	lr

08007e8c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8007e8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007e8e:	7803      	ldrb	r3, [r0, #0]
{
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007e96:	b31b      	cbz	r3, 8007ee0 <STC_ExecRamp+0x54>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007e98:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007e9a:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	bfbc      	itt	lt
 8007ea0:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8007ea4:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007ea6:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007ea8:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007eac:	dd01      	ble.n	8007eb2 <STC_ExecRamp+0x26>
 8007eae:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8007eb2:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8007eb6:	428b      	cmp	r3, r1
 8007eb8:	dcf9      	bgt.n	8007eae <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8007eba:	8c23      	ldrh	r3, [r4, #32]
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	da03      	bge.n	8007ec8 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8007ec0:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8007ec4:	428b      	cmp	r3, r1
 8007ec6:	dbf2      	blt.n	8007eae <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8007ec8:	b9a6      	cbnz	r6, 8007ef4 <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007eca:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007ecc:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007ece:	2b01      	cmp	r3, #1
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007ed0:	bf0c      	ite	eq
 8007ed2:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8007ed4:	60a5      	strne	r5, [r4, #8]
      pHandle->IncDecAmount = 0;
 8007ed6:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
 8007ed8:	61a0      	str	r0, [r4, #24]
      pHandle->RampRemainingStep++;
 8007eda:	60e6      	str	r6, [r4, #12]
      pHandle->IncDecAmount = wAux1;
 8007edc:	2001      	movs	r0, #1
}
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8007ee0:	f7ff ffc8 	bl	8007e74 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8007ee4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007ee6:	42ab      	cmp	r3, r5
 8007ee8:	dbe1      	blt.n	8007eae <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8007eea:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8007eee:	42ab      	cmp	r3, r5
 8007ef0:	dcdd      	bgt.n	8007eae <STC_ExecRamp+0x22>
 8007ef2:	e7e9      	b.n	8007ec8 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007ef4:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8007ef6:	4a06      	ldr	r2, [pc, #24]	@ (8007f10 <STC_ExecRamp+0x84>)
      pHandle->TargetFinal = hTargetFinal;
 8007ef8:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007efa:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8007f02:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 8007f04:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8007f06:	1c5e      	adds	r6, r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8007f08:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8007f0a:	fb90 f0f6 	sdiv	r0, r0, r6
      pHandle->IncDecAmount = wAux1;
 8007f0e:	e7e3      	b.n	8007ed8 <STC_ExecRamp+0x4c>
 8007f10:	10624dd3 	.word	0x10624dd3

08007f14 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007f18:	6183      	str	r3, [r0, #24]
}
 8007f1a:	4770      	bx	lr

08007f1c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007f1c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007f1e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007f20:	68c3      	ldr	r3, [r0, #12]
{
 8007f22:	4604      	mov	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007f24:	b96a      	cbnz	r2, 8007f42 <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 8007f26:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 8007f28:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8007f2a:	d923      	bls.n	8007f74 <STC_CalcTorqueReference+0x58>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8007f2c:	6982      	ldr	r2, [r0, #24]
 8007f2e:	4416      	add	r6, r2

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8007f30:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007f32:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8007f34:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007f36:	4630      	mov	r0, r6
 8007f38:	db20      	blt.n	8007f7c <STC_CalcTorqueReference+0x60>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8007f3a:	1405      	asrs	r5, r0, #16
 8007f3c:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8007f3e:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8007f42:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8007f44:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8007f46:	d91d      	bls.n	8007f84 <STC_CalcTorqueReference+0x68>
    wCurrentReference += pHandle->IncDecAmount;
 8007f48:	6981      	ldr	r1, [r0, #24]
 8007f4a:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 8007f4c:	3b01      	subs	r3, #1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007f4e:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8007f50:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007f52:	4630      	mov	r0, r6
 8007f54:	db1a      	blt.n	8007f8c <STC_CalcTorqueReference+0x70>
 8007f56:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007f58:	2a01      	cmp	r2, #1
 8007f5a:	d1ef      	bne.n	8007f3c <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8007f5c:	6960      	ldr	r0, [r4, #20]
 8007f5e:	f7ff ff17 	bl	8007d90 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8007f62:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8007f64:	b209      	sxth	r1, r1
 8007f66:	6920      	ldr	r0, [r4, #16]
 8007f68:	f7fe fc24 	bl	80067b4 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8007f6c:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8007f6e:	0406      	lsls	r6, r0, #16
 8007f70:	60a6      	str	r6, [r4, #8]
}
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8007f74:	d014      	beq.n	8007fa0 <STC_CalcTorqueReference+0x84>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	4630      	mov	r0, r6
 8007f7a:	dade      	bge.n	8007f3a <STC_CalcTorqueReference+0x1e>
 8007f7c:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8007f80:	30ff      	adds	r0, #255	@ 0xff
 8007f82:	e7da      	b.n	8007f3a <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 8007f84:	d006      	beq.n	8007f94 <STC_CalcTorqueReference+0x78>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007f86:	2e00      	cmp	r6, #0
 8007f88:	4630      	mov	r0, r6
 8007f8a:	dae4      	bge.n	8007f56 <STC_CalcTorqueReference+0x3a>
 8007f8c:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8007f90:	30ff      	adds	r0, #255	@ 0xff
 8007f92:	e7e0      	b.n	8007f56 <STC_CalcTorqueReference+0x3a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007f94:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8007f98:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007f9a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8007f9c:	60c3      	str	r3, [r0, #12]
 8007f9e:	e7db      	b.n	8007f58 <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007fa0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8007fa4:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007fa6:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007fa8:	e7c8      	b.n	8007f3c <STC_CalcTorqueReference+0x20>
 8007faa:	bf00      	nop

08007fac <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8007fac:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop

08007fb4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8007fb4:	8bc0      	ldrh	r0, [r0, #30]
 8007fb6:	4770      	bx	lr

08007fb8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8007fb8:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8007fc0:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	b299      	uxth	r1, r3
 8007fc8:	f361 020f 	bfi	r2, r1, #0, #16
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007fd2:	b082      	sub	sp, #8
}
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	b002      	add	sp, #8
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop

08007fdc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8007fe0:	6940      	ldr	r0, [r0, #20]
 8007fe2:	f7ff fed5 	bl	8007d90 <SPD_GetAvrgMecSpeedUnit>
 8007fe6:	0400      	lsls	r0, r0, #16
 8007fe8:	6060      	str	r0, [r4, #4]
}
 8007fea:	bd10      	pop	{r4, pc}

08007fec <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8007ff0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop

08007ff8 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8007ff8:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007ffa:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007ffc:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8008000:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008002:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8008004:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008006:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800800a:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800800e:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8008010:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008012:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008016:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 800801a:	d008      	beq.n	800802e <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800801c:	b90a      	cbnz	r2, 8008022 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800801e:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8008022:	230a      	movs	r3, #10
 8008024:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 8008028:	200a      	movs	r0, #10
}
 800802a:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800802e:	2a00      	cmp	r2, #0
 8008030:	d1fa      	bne.n	8008028 <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 8008032:	200b      	movs	r0, #11
 8008034:	f88c 0000 	strb.w	r0, [ip]
}
 8008038:	f85d fb04 	ldr.w	pc, [sp], #4

0800803c <STM_NextState>:
{
 800803c:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 800803e:	7803      	ldrb	r3, [r0, #0]
 8008040:	2b14      	cmp	r3, #20
 8008042:	d820      	bhi.n	8008086 <STM_NextState+0x4a>
 8008044:	e8df f003 	tbb	[pc, r3]
 8008048:	530d2930 	.word	0x530d2930
 800804c:	260d6547 	.word	0x260d6547
 8008050:	1f1f421d 	.word	0x1f1f421d
 8008054:	3a3d0b19 	.word	0x3a3d0b19
 8008058:	61506937 	.word	0x61506937
 800805c:	5e          	.byte	0x5e
 800805d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800805e:	290e      	cmp	r1, #14
 8008060:	d00c      	beq.n	800807c <STM_NextState+0x40>
      if ( bState == ANY_STOP )
 8008062:	2907      	cmp	r1, #7
 8008064:	d00a      	beq.n	800807c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008066:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 800806a:	2901      	cmp	r1, #1
 800806c:	d003      	beq.n	8008076 <STM_NextState+0x3a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800806e:	2200      	movs	r2, #0
 8008070:	2180      	movs	r1, #128	@ 0x80
 8008072:	f7ff ffc1 	bl	8007ff8 <STM_FaultProcessing>
 8008076:	2000      	movs	r0, #0
}
 8008078:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 800807a:	b921      	cbnz	r1, 8008086 <STM_NextState+0x4a>
    pHandle->bState = bNewState;
 800807c:	7001      	strb	r1, [r0, #0]
 800807e:	2001      	movs	r0, #1
}
 8008080:	bd08      	pop	{r3, pc}
      if ( bState == STOP_IDLE )
 8008082:	2909      	cmp	r1, #9
 8008084:	d0fa      	beq.n	800807c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008086:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 800808a:	2b01      	cmp	r3, #1
 800808c:	d0f3      	beq.n	8008076 <STM_NextState+0x3a>
 800808e:	2907      	cmp	r1, #7
 8008090:	d0f1      	beq.n	8008076 <STM_NextState+0x3a>
 8008092:	e7ec      	b.n	800806e <STM_NextState+0x32>
      if ( bState == STOP )
 8008094:	2908      	cmp	r1, #8
 8008096:	d1f6      	bne.n	8008086 <STM_NextState+0x4a>
 8008098:	e7f0      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800809a:	2907      	cmp	r1, #7
 800809c:	d0ee      	beq.n	800807c <STM_NextState+0x40>
 800809e:	f1a1 030d 	sub.w	r3, r1, #13
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d8df      	bhi.n	8008066 <STM_NextState+0x2a>
 80080a6:	e7e9      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80080a8:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d0e5      	beq.n	800807c <STM_NextState+0x40>
           || ( bState == ICLWAIT ) )
 80080b0:	290c      	cmp	r1, #12
 80080b2:	d1ec      	bne.n	800808e <STM_NextState+0x52>
 80080b4:	e7e2      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80080b6:	2911      	cmp	r1, #17
 80080b8:	d1d3      	bne.n	8008062 <STM_NextState+0x26>
 80080ba:	e7df      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80080bc:	2902      	cmp	r1, #2
 80080be:	d1d0      	bne.n	8008062 <STM_NextState+0x26>
 80080c0:	e7dc      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80080c2:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 80080c6:	2b07      	cmp	r3, #7
 80080c8:	d1cd      	bne.n	8008066 <STM_NextState+0x2a>
 80080ca:	e7d7      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d0d5      	beq.n	800807c <STM_NextState+0x40>
 80080d0:	290c      	cmp	r1, #12
 80080d2:	d1d8      	bne.n	8008086 <STM_NextState+0x4a>
 80080d4:	e7d2      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80080d6:	2913      	cmp	r1, #19
 80080d8:	d0d0      	beq.n	800807c <STM_NextState+0x40>
 80080da:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 80080de:	2b05      	cmp	r3, #5
 80080e0:	d0cc      	beq.n	800807c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d1c3      	bne.n	800806e <STM_NextState+0x32>
 80080e6:	e7c6      	b.n	8008076 <STM_NextState+0x3a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80080e8:	2904      	cmp	r1, #4
 80080ea:	d1ba      	bne.n	8008062 <STM_NextState+0x26>
 80080ec:	e7c6      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 80080ee:	2907      	cmp	r1, #7
 80080f0:	d0c4      	beq.n	800807c <STM_NextState+0x40>
 80080f2:	2911      	cmp	r1, #17
 80080f4:	d8bb      	bhi.n	800806e <STM_NextState+0x32>
 80080f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <STM_NextState+0xec>)
 80080f8:	40cb      	lsrs	r3, r1
 80080fa:	07da      	lsls	r2, r3, #31
 80080fc:	d4be      	bmi.n	800807c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80080fe:	2903      	cmp	r1, #3
 8008100:	d0b9      	beq.n	8008076 <STM_NextState+0x3a>
 8008102:	e7b4      	b.n	800806e <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8008104:	2912      	cmp	r1, #18
 8008106:	d1ac      	bne.n	8008062 <STM_NextState+0x26>
 8008108:	e7b8      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800810a:	1f0b      	subs	r3, r1, #4
 800810c:	2b01      	cmp	r3, #1
 800810e:	d8a8      	bhi.n	8008062 <STM_NextState+0x26>
 8008110:	e7b4      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008112:	1f8b      	subs	r3, r1, #6
 8008114:	2b01      	cmp	r3, #1
 8008116:	d8a6      	bhi.n	8008066 <STM_NextState+0x2a>
 8008118:	e7b0      	b.n	800807c <STM_NextState+0x40>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800811a:	2914      	cmp	r1, #20
 800811c:	d8a3      	bhi.n	8008066 <STM_NextState+0x2a>
 800811e:	4b03      	ldr	r3, [pc, #12]	@ (800812c <STM_NextState+0xf0>)
 8008120:	410b      	asrs	r3, r1
 8008122:	07db      	lsls	r3, r3, #31
 8008124:	d5aa      	bpl.n	800807c <STM_NextState+0x40>
 8008126:	e79e      	b.n	8008066 <STM_NextState+0x2a>
 8008128:	00030012 	.word	0x00030012
 800812c:	ffebff7f 	.word	0xffebff7f

08008130 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8008130:	7800      	ldrb	r0, [r0, #0]
 8008132:	4770      	bx	lr

08008134 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8008134:	7803      	ldrb	r3, [r0, #0]
 8008136:	2b0b      	cmp	r3, #11
 8008138:	d001      	beq.n	800813e <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800813a:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800813c:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800813e:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008140:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8008142:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008144:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8008146:	2001      	movs	r0, #1
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop

0800814c <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800814c:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800814e:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8008150:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop

08008158 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 800815c:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8008160:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8008162:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008166:	429f      	cmp	r7, r3
{
 8008168:	b087      	sub	sp, #28
 800816a:	4604      	mov	r4, r0
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 800816c:	f340 80c9 	ble.w	8008302 <STO_PLL_CalcElAngle+0x1aa>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 8008170:	6683      	str	r3, [r0, #104]	@ 0x68
 8008172:	461f      	mov	r7, r3
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8008174:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008178:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 800817a:	fa47 f205 	asr.w	r2, r7, r5
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800817e:	42b3      	cmp	r3, r6
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8008180:	9200      	str	r2, [sp, #0]
 8008182:	fa0f fc82 	sxth.w	ip, r2
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008186:	f2c0 80b9 	blt.w	80082fc <STO_PLL_CalcElAngle+0x1a4>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
  }
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800818a:	425b      	negs	r3, r3
 800818c:	429e      	cmp	r6, r3
 800818e:	f340 80b5 	ble.w	80082fc <STO_PLL_CalcElAngle+0x1a4>
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008192:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8008196:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800819a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 800819e:	fa46 f205 	asr.w	r2, r6, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80081a2:	4599      	cmp	r9, r3
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 80081a4:	9201      	str	r2, [sp, #4]
 80081a6:	b210      	sxth	r0, r2
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80081a8:	f340 80b1 	ble.w	800830e <STO_PLL_CalcElAngle+0x1b6>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 80081ac:	6623      	str	r3, [r4, #96]	@ 0x60
 80081ae:	4699      	mov	r9, r3
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80081b0:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 80081b4:	4543      	cmp	r3, r8
 80081b6:	f2c0 809e 	blt.w	80082f6 <STO_PLL_CalcElAngle+0x19e>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
  }
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80081ba:	425b      	negs	r3, r3
 80081bc:	4598      	cmp	r8, r3
 80081be:	f340 809a 	ble.w	80082f6 <STO_PLL_CalcElAngle+0x19e>
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80081c2:	88cb      	ldrh	r3, [r1, #6]

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 80081c4:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80081c8:	f8ad 300c 	strh.w	r3, [sp, #12]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 80081cc:	f9b1 3000 	ldrsh.w	r3, [r1]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80081d0:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80081d4:	888d      	ldrh	r5, [r1, #4]
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 80081d6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 80081da:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
  wAux = wAux * pHandle->hC6;
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
 80081de:	f8a4 c070 	strh.w	ip, [r4, #112]	@ 0x70
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 80081e2:	fb0a f303 	mul.w	r3, sl, r3
  hValfa = ( int16_t ) ( wAux >> 16 );
 80081e6:	141b      	asrs	r3, r3, #16
 80081e8:	9302      	str	r3, [sp, #8]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80081ea:	fa49 f302 	asr.w	r3, r9, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80081ee:	1b59      	subs	r1, r3, r5
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80081f0:	9d03      	ldr	r5, [sp, #12]
  pHandle->hBemf_beta_est = hAux_Beta;
 80081f2:	f8a4 0072 	strh.w	r0, [r4, #114]	@ 0x72
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 80081f6:	fa48 f202 	asr.w	r2, r8, r2
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 80081fa:	fb0a fe0e 	mul.w	lr, sl, lr
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80081fe:	eba2 0a05 	sub.w	sl, r2, r5
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 8008202:	fb12 f20b 	smulbb	r2, r2, fp
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8008206:	eba8 0202 	sub.w	r2, r8, r2
  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 800820a:	fb13 f30b 	smulbb	r3, r3, fp
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 800820e:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
  wIalfa_est_Next += wAux;
 8008212:	9d02      	ldr	r5, [sp, #8]
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8008214:	eba9 0303 	sub.w	r3, r9, r3
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008218:	b209      	sxth	r1, r1
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 800821a:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800821e:	fa0f fa8a 	sxth.w	sl, sl
  wIalfa_est_Next += wAux;
 8008222:	fb08 3301 	mla	r3, r8, r1, r3
  hVbeta = ( int16_t ) ( wAux >> 16 );
 8008226:	ea4f 4e2e 	mov.w	lr, lr, asr #16
  wIbeta_est_Next += wAux;
 800822a:	fb08 280a 	mla	r8, r8, sl, r2
  wIbeta_est_Next += wAux;
 800822e:	fb09 880e 	mla	r8, r9, lr, r8
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 8008232:	f9b4 e026 	ldrsh.w	lr, [r4, #38]	@ 0x26
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 8008236:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8008238:	fb01 710e 	mla	r1, r1, lr, r7
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800823c:	fb0e 6e0a 	mla	lr, lr, sl, r6
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 8008240:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
  wIalfa_est_Next += wAux;
 8008244:	fb09 3305 	mla	r3, r9, r5, r3
  wAux = wAux * pHandle->hC6;
 8008248:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
  wIalfa_est_Next -= wAux;
 800824c:	fb06 371c 	mls	r7, r6, ip, r3
  wIbeta_est_Next -= wAux;
 8008250:	fb06 8610 	mls	r6, r6, r0, r8
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 8008254:	fa4c fc02 	asr.w	ip, ip, r2
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 8008258:	4110      	asrs	r0, r2
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800825a:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  wAux = wAux * pHandle->hC6;
 800825e:	fb0c f309 	mul.w	r3, ip, r9
  wBemf_beta_est_Next -= wAux;
 8008262:	fb03 e812 	mls	r8, r3, r2, lr

  if (pHandle->hForcedDirection ==0)
 8008266:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
  wAux = wAux * pHandle->hC6;
 800826a:	fb00 f009 	mul.w	r0, r0, r9
  wBemf_alfa_est_Next += wAux;
 800826e:	fb00 1902 	mla	r9, r0, r2, r1
  if (pHandle->hForcedDirection ==0)
 8008272:	2b00      	cmp	r3, #0
 8008274:	d151      	bne.n	800831a <STO_PLL_CalcElAngle+0x1c2>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 8008276:	2a00      	cmp	r2, #0
 8008278:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800827c:	bfa8      	it	ge
 800827e:	f04f 0a01 	movge.w	sl, #1
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 8008282:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008286:	f7f8 fdf3 	bl	8000e70 <MCM_Trig_Functions>
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	fb13 f50a 	smulbb	r5, r3, sl
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8008290:	9b00      	ldr	r3, [sp, #0]
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 8008292:	426d      	negs	r5, r5
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8008294:	fb13 f30a 	smulbb	r3, r3, sl

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 8008298:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 800829c:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 80082a0:	f345 35cf 	sbfx	r5, r5, #15, #16
 80082a4:	f340 31cf 	sbfx	r1, r0, #15, #16
 80082a8:	1a69      	subs	r1, r5, r1
 80082aa:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80082ae:	f7fe fa81 	bl	80067b4 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 80082b2:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 80082b6:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 80082ba:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 80082bc:	3301      	adds	r3, #1
 80082be:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 80082c0:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80082c2:	bf12      	itee	ne
 80082c4:	461a      	movne	r2, r3
 80082c6:	2200      	moveq	r2, #0
    bBuffer_index = 0u;
 80082c8:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80082ca:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80082ce:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 80082d2:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 80082d6:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 80082da:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
  pHandle->_Super.hElAngle += hRotor_Speed;
 80082de:	88a3      	ldrh	r3, [r4, #4]
  pHandle->Ialfa_est = wIalfa_est_Next;
 80082e0:	6627      	str	r7, [r4, #96]	@ 0x60
  pHandle->_Super.hElAngle += hRotor_Speed;
 80082e2:	4418      	add	r0, r3
 80082e4:	b200      	sxth	r0, r0
  pHandle->Ibeta_est = wIbeta_est_Next;
 80082e6:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 80082ea:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
  pHandle->_Super.hElAngle += hRotor_Speed;
 80082ee:	80a0      	strh	r0, [r4, #4]
}
 80082f0:	b007      	add	sp, #28
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80082f6:	6663      	str	r3, [r4, #100]	@ 0x64
 80082f8:	4698      	mov	r8, r3
 80082fa:	e762      	b.n	80081c2 <STO_PLL_CalcElAngle+0x6a>
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80082fc:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80082fe:	461e      	mov	r6, r3
 8008300:	e747      	b.n	8008192 <STO_PLL_CalcElAngle+0x3a>
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008302:	425a      	negs	r2, r3
 8008304:	4297      	cmp	r7, r2
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 8008306:	bfdc      	itt	le
 8008308:	6682      	strle	r2, [r0, #104]	@ 0x68
 800830a:	4617      	movle	r7, r2
 800830c:	e732      	b.n	8008174 <STO_PLL_CalcElAngle+0x1c>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800830e:	425a      	negs	r2, r3
 8008310:	4591      	cmp	r9, r2
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 8008312:	bfdc      	itt	le
 8008314:	6622      	strle	r2, [r4, #96]	@ 0x60
 8008316:	4691      	movle	r9, r2
 8008318:	e74a      	b.n	80081b0 <STO_PLL_CalcElAngle+0x58>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 800831a:	fa1f fa83 	uxth.w	sl, r3
 800831e:	e7b0      	b.n	8008282 <STO_PLL_CalcElAngle+0x12a>

08008320 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8008320:	b570      	push	{r4, r5, r6, lr}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8008322:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8008326:	2d00      	cmp	r5, #0
 8008328:	f000 8091 	beq.w	800844e <STO_PLL_CalcAvrgMecSpeedUnit+0x12e>
 800832c:	f100 0c72 	add.w	ip, r0, #114	@ 0x72
 8008330:	eb0c 0445 	add.w	r4, ip, r5, lsl #1
 8008334:	4662      	mov	r2, ip
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 8008336:	2300      	movs	r3, #0
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 8008338:	f932 ef02 	ldrsh.w	lr, [r2, #2]!
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800833c:	42a2      	cmp	r2, r4
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 800833e:	4473      	add	r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8008340:	d1fa      	bne.n	8008338 <STO_PLL_CalcAvrgMecSpeedUnit+0x18>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 8008342:	fb93 f2f5 	sdiv	r2, r3, r5
  int32_t wError, wAux, wAvrSquareSpeed, wAvrQuadraticError = 0;
 8008346:	f04f 0e00 	mov.w	lr, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 800834a:	f93c 3f02 	ldrsh.w	r3, [ip, #2]!
 800834e:	1a9b      	subs	r3, r3, r2
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8008350:	45a4      	cmp	ip, r4
    wAvrQuadraticError += wError;
 8008352:	fb03 ee03 	mla	lr, r3, r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8008356:	d1f8      	bne.n	800834a <STO_PLL_CalcAvrgMecSpeedUnit+0x2a>
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 8008358:	fbbe fef5 	udiv	lr, lr, r5
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 800835c:	f8b0 4110 	ldrh.w	r4, [r0, #272]	@ 0x110
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8008360:	8b45      	ldrh	r5, [r0, #26]
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 8008362:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8008366:	fb02 f302 	mul.w	r3, r2, r2
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 800836a:	fb04 f303 	mul.w	r3, r4, r3
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 800836e:	fb02 f505 	mul.w	r5, r2, r5
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008372:	ebbe 1fe3 	cmp.w	lr, r3, asr #7
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8008376:	ea4f 12e3 	mov.w	r2, r3, asr #7
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 800837a:	7883      	ldrb	r3, [r0, #2]
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 800837c:	69c4      	ldr	r4, [r0, #28]
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 800837e:	fb05 f303 	mul.w	r3, r5, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008382:	bfb4      	ite	lt
 8008384:	2501      	movlt	r5, #1
 8008386:	2500      	movge	r5, #0
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008388:	fb93 f3f4 	sdiv	r3, r3, r4
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 800838c:	7844      	ldrb	r4, [r0, #1]
 800838e:	fb93 f3f4 	sdiv	r3, r3, r4
  *pMecSpeedUnit = ( int16_t )wAux;
 8008392:	b21c      	sxth	r4, r3
 8008394:	800c      	strh	r4, [r1, #0]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008396:	f880 50f5 	strb.w	r5, [r0, #245]	@ 0xf5
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 800839a:	8184      	strh	r4, [r0, #12]
  if ( pHandle->IsAlgorithmConverged == false )
 800839c:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 80083a0:	b30e      	cbz	r6, 80083e6 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 80083a2:	2b00      	cmp	r3, #0
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 80083a4:	f8b0 411a 	ldrh.w	r4, [r0, #282]	@ 0x11a
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 80083a8:	bfb8      	it	lt
 80083aa:	425b      	neglt	r3, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 80083ac:	429c      	cmp	r4, r3
 80083ae:	dc24      	bgt.n	80083fa <STO_PLL_CalcAvrgMecSpeedUnit+0xda>
  bool bIs_Bemf_Consistent = false;
 80083b0:	2400      	movs	r4, #0
  int32_t wObsBemfSq = 0, wEstBemfSq = 0;
 80083b2:	4623      	mov	r3, r4
 80083b4:	4626      	mov	r6, r4
    pHandle->Est_Bemf_Level = wEstBemfSq;
 80083b6:	e9c0 633f 	strd	r6, r3, [r0, #252]	@ 0xfc
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80083ba:	f880 40f9 	strb.w	r4, [r0, #249]	@ 0xf9
  if ( pHandle->IsAlgorithmConverged == false )
 80083be:	b1c5      	cbz	r5, 80083f2 <STO_PLL_CalcAvrgMecSpeedUnit+0xd2>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 80083c0:	4596      	cmp	lr, r2
 80083c2:	db41      	blt.n	8008448 <STO_PLL_CalcAvrgMecSpeedUnit+0x128>
      pHandle->ReliabilityCounter++;
 80083c4:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 80083c8:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
      pHandle->ReliabilityCounter++;
 80083cc:	3301      	adds	r3, #1
 80083ce:	b2db      	uxtb	r3, r3
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 80083d0:	429a      	cmp	r2, r3
      pHandle->ReliabilityCounter++;
 80083d2:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 80083d6:	d80c      	bhi.n	80083f2 <STO_PLL_CalcAvrgMecSpeedUnit+0xd2>
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80083d8:	78c2      	ldrb	r2, [r0, #3]
 80083da:	7002      	strb	r2, [r0, #0]
        pHandle->ReliabilityCounter = 0u;
 80083dc:	2300      	movs	r3, #0
 80083de:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->IsAlgorithmConverged == false )
 80083e6:	b125      	cbz	r5, 80083f2 <STO_PLL_CalcAvrgMecSpeedUnit+0xd2>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 80083e8:	4596      	cmp	lr, r2
 80083ea:	daeb      	bge.n	80083c4 <STO_PLL_CalcAvrgMecSpeedUnit+0xa4>
      pHandle->ReliabilityCounter = 0u;
 80083ec:	2300      	movs	r3, #0
 80083ee:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 80083f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 80083f6:	f7ff bcd3 	b.w	8007da0 <SPD_IsMecSpeedReliable>
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 80083fa:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	@ 0x70
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 80083fe:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	@ 0x72
      wObsBemfSq = wObsBemf * wObsBemf;
 8008402:	fb04 fc04 	mul.w	ip, r4, r4
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 8008406:	f890 4119 	ldrb.w	r4, [r0, #281]	@ 0x119
      wObsBemfSq += wObsBemf * wObsBemf;
 800840a:	fb06 c606 	mla	r6, r6, r6, ip
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 800840e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008412:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8008416:	fb93 f3fc 	sdiv	r3, r3, ip
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 800841a:	fb03 f404 	mul.w	r4, r3, r4
 800841e:	2c00      	cmp	r4, #0
 8008420:	bfb8      	it	lt
 8008422:	343f      	addlt	r4, #63	@ 0x3f
 8008424:	11a4      	asrs	r4, r4, #6
      wEstBemfSq *= wEstBemf;
 8008426:	fb04 f303 	mul.w	r3, r4, r3
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 800842a:	2b00      	cmp	r3, #0
 800842c:	461c      	mov	r4, r3
 800842e:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 8008432:	bfb8      	it	lt
 8008434:	f103 043f 	addlt.w	r4, r3, #63	@ 0x3f
 8008438:	11a4      	asrs	r4, r4, #6
      wEstBemfSqLo = wEstBemfSq -
 800843a:	fb0c 3414 	mls	r4, ip, r4, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 800843e:	42a6      	cmp	r6, r4
 8008440:	bfd4      	ite	le
 8008442:	2400      	movle	r4, #0
 8008444:	2401      	movgt	r4, #1
 8008446:	e7b6      	b.n	80083b6 <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8008448:	2c00      	cmp	r4, #0
 800844a:	d0bb      	beq.n	80083c4 <STO_PLL_CalcAvrgMecSpeedUnit+0xa4>
 800844c:	e7ce      	b.n	80083ec <STO_PLL_CalcAvrgMecSpeedUnit+0xcc>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 800844e:	deff      	udf	#255	@ 0xff

08008450 <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 8008450:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 8008454:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008458:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800845c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8008460:	b410      	push	{r4}
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008462:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8008466:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800846a:	ebac 0101 	sub.w	r1, ip, r1
 800846e:	b289      	uxth	r1, r1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008470:	4423      	add	r3, r4
  if ( hBufferSizeDiff == 0 )
 8008472:	b959      	cbnz	r1, 800848c <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
           pHandle->SpeedBufferOldestEl;
 8008474:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008478:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800847a:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
  pHandle->DppBufferSum = wSum;
 800847e:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8008482:	4113      	asrs	r3, r2
}
 8008484:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 8008488:	81c3      	strh	r3, [r0, #14]
}
 800848a:	4770      	bx	lr
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800848c:	440a      	add	r2, r1
 800848e:	b291      	uxth	r1, r2
 8008490:	b212      	sxth	r2, r2
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8008492:	4594      	cmp	ip, r2
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8008494:	bfdc      	itt	le
 8008496:	eba1 010c 	suble.w	r1, r1, ip
 800849a:	b20a      	sxthle	r2, r1
           pHandle->Speed_Buffer[hIndexOld];
 800849c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80084a0:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	e7e8      	b.n	800847a <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

080084a8 <STO_PLL_Clear>:
{
 80084a8:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 80084aa:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
  pHandle->Ialfa_est = ( int32_t )0;
 80084ae:	2100      	movs	r1, #0
  pHandle->Ibeta_est = ( int32_t )0;
 80084b0:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
  pHandle->wBemf_beta_est = ( int32_t )0;
 80084b4:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
  pHandle->Est_Bemf_Level = ( int32_t )0;
 80084b8:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 80084bc:	4604      	mov	r4, r0
  pHandle->_Super.hElAngle = ( int16_t )0;
 80084be:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 80084c0:	81c1      	strh	r1, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 80084c2:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
  pHandle->IsAlgorithmConverged = false;
 80084c6:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
  pHandle->DppBufferSum = ( int32_t )0;
 80084ca:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
  pHandle->ForceConvergency = false;
 80084ce:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 80084d2:	b11a      	cbz	r2, 80084dc <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 80084d4:	0052      	lsls	r2, r2, #1
 80084d6:	3074      	adds	r0, #116	@ 0x74
 80084d8:	f000 fb24 	bl	8008b24 <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 80084dc:	2100      	movs	r1, #0
 80084de:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 80084e2:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80084e6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 80084ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80084ee:	f7fe b955 	b.w	800679c <PID_SetIntegralTerm>
 80084f2:	bf00      	nop

080084f4 <STO_PLL_Init>:
{
 80084f4:	b510      	push	{r4, lr}
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80084f6:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80084fa:	4b19      	ldr	r3, [pc, #100]	@ (8008560 <STO_PLL_Init+0x6c>)
 80084fc:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8008500:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
  pHandle->EnableDualCheck = true;
 8008504:	2201      	movs	r2, #1
  pHandle->F3POW2 = 0u;
 8008506:	2100      	movs	r1, #0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 8008508:	fb93 f3fe 	sdiv	r3, r3, lr
 800850c:	b21b      	sxth	r3, r3
{
 800850e:	4604      	mov	r4, r0
  pHandle->EnableDualCheck = true;
 8008510:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
  pHandle->F3POW2 = 0u;
 8008514:	8641      	strh	r1, [r0, #50]	@ 0x32
  while ( htempk != 0 )
 8008516:	b30b      	cbz	r3, 800855c <STO_PLL_Init+0x68>
  wAux = ( int32_t )1;
 8008518:	4611      	mov	r1, r2
    htempk /= ( int16_t )2;
 800851a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  while ( htempk != 0 )
 800851e:	f102 0c01 	add.w	ip, r2, #1
 8008522:	105b      	asrs	r3, r3, #1
 8008524:	4610      	mov	r0, r2
    wAux *= ( int32_t )2;
 8008526:	ea4f 0141 	mov.w	r1, r1, lsl #1
  while ( htempk != 0 )
 800852a:	fa1f f28c 	uxth.w	r2, ip
 800852e:	d1f4      	bne.n	800851a <STO_PLL_Init+0x26>
  pHandle->hF3 = ( int16_t )wAux;
 8008530:	b20a      	sxth	r2, r1
 8008532:	8660      	strh	r0, [r4, #50]	@ 0x32
  wAux = ( int32_t )( pHandle->hF2 ) * pHandle->hF3;
 8008534:	fb0e f102 	mul.w	r1, lr, r2
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8008538:	480a      	ldr	r0, [pc, #40]	@ (8008564 <STO_PLL_Init+0x70>)
  pHandle->hF3 = ( int16_t )wAux;
 800853a:	8622      	strh	r2, [r4, #48]	@ 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 800853c:	17cb      	asrs	r3, r1, #31
 800853e:	fb80 0101 	smull	r0, r1, r0, r1
 8008542:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8008546:	8563      	strh	r3, [r4, #42]	@ 0x2a
  STO_PLL_Clear( pHandle );
 8008548:	4620      	mov	r0, r4
 800854a:	f7ff ffad 	bl	80084a8 <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 800854e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8008552:	f7fe f90f 	bl	8006774 <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	8263      	strh	r3, [r4, #18]
}
 800855a:	bd10      	pop	{r4, pc}
 800855c:	4671      	mov	r1, lr
 800855e:	e7eb      	b.n	8008538 <STO_PLL_Init+0x44>
 8008560:	000fea5e 	.word	0x000fea5e
 8008564:	06488dc5 	.word	0x06488dc5

08008568 <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 8008568:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800856c:	4603      	mov	r3, r0
  if ( pHandle->ForceConvergency2 == true )
 800856e:	b10a      	cbz	r2, 8008574 <STO_PLL_IsObserverConverged+0xc>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008570:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  }

  if ( pHandle->ForceConvergency == true )
 8008574:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8008578:	b128      	cbz	r0, 8008586 <STO_PLL_IsObserverConverged+0x1e>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 800857a:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 800857c:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 800857e:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008582:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ( bAux );
}
 8008584:	4770      	bx	lr
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008586:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 800858a:	fb02 fc01 	mul.w	ip, r2, r1
    if ( wtemp > 0 )
 800858e:	f1bc 0f00 	cmp.w	ip, #0
{
 8008592:	b530      	push	{r4, r5, lr}
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8008594:	468e      	mov	lr, r1
    if ( wtemp > 0 )
 8008596:	dd37      	ble.n	8008608 <STO_PLL_IsObserverConverged+0xa0>
      if ( hEstimatedSpeedUnit < 0 )
 8008598:	2a00      	cmp	r2, #0
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800859a:	bfbc      	itt	lt
 800859c:	4252      	neglt	r2, r2
 800859e:	b212      	sxthlt	r2, r2
      if ( pHandle->IsSpeedReliable == true )
 80085a0:	f893 40f5 	ldrb.w	r4, [r3, #245]	@ 0xf5
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 80085a4:	f893 c112 	ldrb.w	ip, [r3, #274]	@ 0x112
      if ( hForcedMecSpeedUnit < 0 )
 80085a8:	2900      	cmp	r1, #0
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 80085aa:	bfbc      	itt	lt
 80085ac:	4249      	neglt	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 80085ae:	fa0f fe81 	sxthlt.w	lr, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 80085b2:	f893 1113 	ldrb.w	r1, [r3, #275]	@ 0x113
      if ( pHandle->IsSpeedReliable == true )
 80085b6:	b344      	cbz	r4, 800860a <STO_PLL_IsObserverConverged+0xa2>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 80085b8:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 80085bc:	b294      	uxth	r4, r2
 80085be:	42a5      	cmp	r5, r4
 80085c0:	d223      	bcs.n	800860a <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 80085c2:	fb0e f101 	mul.w	r1, lr, r1
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 80085c6:	2900      	cmp	r1, #0
 80085c8:	bfb8      	it	lt
 80085ca:	310f      	addlt	r1, #15
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 80085cc:	f341 110f 	sbfx	r1, r1, #4, #16
 80085d0:	428a      	cmp	r2, r1
 80085d2:	db1a      	blt.n	800860a <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 80085d4:	fb0e fc0c 	mul.w	ip, lr, ip
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 80085d8:	f1bc 0f00 	cmp.w	ip, #0
 80085dc:	bfb8      	it	lt
 80085de:	f10c 0c0f 	addlt.w	ip, ip, #15
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 80085e2:	f34c 1c0f 	sbfx	ip, ip, #4, #16
 80085e6:	4562      	cmp	r2, ip
 80085e8:	dc0f      	bgt.n	800860a <STO_PLL_IsObserverConverged+0xa2>
              pHandle->ConsistencyCounter++;
 80085ea:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
              if ( pHandle->ConsistencyCounter >=
 80085ee:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
              pHandle->ConsistencyCounter++;
 80085f2:	3201      	adds	r2, #1
 80085f4:	b2d2      	uxtb	r2, r2
              if ( pHandle->ConsistencyCounter >=
 80085f6:	4291      	cmp	r1, r2
              pHandle->ConsistencyCounter++;
 80085f8:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
              if ( pHandle->ConsistencyCounter >=
 80085fc:	d804      	bhi.n	8008608 <STO_PLL_IsObserverConverged+0xa0>
    pHandle->IsAlgorithmConverged = true;
 80085fe:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008600:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 8008602:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008606:	701a      	strb	r2, [r3, #0]
}
 8008608:	bd30      	pop	{r4, r5, pc}
              pHandle->ConsistencyCounter = 0u;
 800860a:	2200      	movs	r2, #0
 800860c:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 8008610:	bd30      	pop	{r4, r5, pc}
 8008612:	bf00      	nop

08008614 <STO_PLL_GetEstimatedBemf>:
__weak alphabeta_t STO_PLL_GetEstimatedBemf( STO_PLL_Handle_t * pHandle )
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
 8008614:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008616:	2200      	movs	r2, #0
 8008618:	b299      	uxth	r1, r3
 800861a:	f361 020f 	bfi	r2, r1, #0, #16
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008624:	b082      	sub	sp, #8
}
 8008626:	4610      	mov	r0, r2
 8008628:	b002      	add	sp, #8
 800862a:	4770      	bx	lr

0800862c <STO_PLL_GetEstimatedCurrent>:
  *         observer
  * @param  pHandle: handler of the current instance of the STO component
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent( STO_PLL_Handle_t * pHandle )
{
 800862c:	4603      	mov	r3, r0
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  return ( Iaux );
 800862e:	2000      	movs	r0, #0
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008630:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8008634:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008638:	410a      	asrs	r2, r1
  return ( Iaux );
 800863a:	410b      	asrs	r3, r1
 800863c:	b292      	uxth	r2, r2
 800863e:	f362 000f 	bfi	r0, r2, #0, #16
 8008642:	b29b      	uxth	r3, r3
{
 8008644:	b082      	sub	sp, #8
  return ( Iaux );
 8008646:	f363 401f 	bfi	r0, r3, #16, #16
}
 800864a:	b002      	add	sp, #8
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop

08008650 <STO_PLL_GetObserverGains>:
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
  *phC2 = pHandle->hC2;
 8008650:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8008654:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 8008656:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800865a:	8013      	strh	r3, [r2, #0]
}
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop

08008660 <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 8008660:	8441      	strh	r1, [r0, #34]	@ 0x22
  pHandle->hC4 = hhC2;
 8008662:	84c2      	strh	r2, [r0, #38]	@ 0x26
}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop

08008668 <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 8008668:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 800866a:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800866e:	4620      	mov	r0, r4
{
 8008670:	460e      	mov	r6, r1
 8008672:	4615      	mov	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8008674:	f7fe f88a 	bl	800678c <PID_GetKP>
 8008678:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 800867a:	4620      	mov	r0, r4
 800867c:	f7fe f88a 	bl	8006794 <PID_GetKI>
 8008680:	8028      	strh	r0, [r5, #0]
}
 8008682:	bd70      	pop	{r4, r5, r6, pc}

08008684 <STO_SetPLLGains>:
  * @param  hPgain new value for PLL proportional gain
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
 8008684:	b538      	push	{r3, r4, r5, lr}
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8008686:	f100 0434 	add.w	r4, r0, #52	@ 0x34
{
 800868a:	4615      	mov	r5, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 800868c:	4620      	mov	r0, r4
 800868e:	f7fe f879 	bl	8006784 <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8008692:	4629      	mov	r1, r5
 8008694:	4620      	mov	r0, r4
}
 8008696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 800869a:	f7fe b875 	b.w	8006788 <PID_SetKI>
 800869e:	bf00      	nop

080086a0 <STO_OTF_ResetPLL>:
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 80086a0:	6800      	ldr	r0, [r0, #0]
 80086a2:	2100      	movs	r1, #0
 80086a4:	3034      	adds	r0, #52	@ 0x34
 80086a6:	f7fe b879 	b.w	800679c <PID_SetIntegralTerm>
 80086aa:	bf00      	nop

080086ac <STO_ResetPLL>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 80086ac:	2100      	movs	r1, #0
 80086ae:	3034      	adds	r0, #52	@ 0x34
 80086b0:	f7fe b874 	b.w	800679c <PID_SetIntegralTerm>

080086b4 <STO_PLL_GetEstimatedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
}
 80086b4:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop

080086bc <STO_PLL_GetObservedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
}
 80086bc:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop

080086c4 <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 80086c4:	6803      	ldr	r3, [r0, #0]
}
 80086c6:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 80086ca:	4770      	bx	lr

080086cc <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 80086cc:	6803      	ldr	r3, [r0, #0]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 80086d8:	6803      	ldr	r3, [r0, #0]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
}
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop

080086e4 <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 80086e4:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
}
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop

080086ec <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80086ec:	f7fd bf94 	b.w	8006618 <FCP_Init>

080086f0 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80086f0:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
 80086f4:	b17b      	cbz	r3, 8008716 <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80086f6:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80086fa:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
 80086fe:	4602      	mov	r2, r0
    switch ( pBaseHandle->TxFrameLevel )
 8008700:	b183      	cbz	r3, 8008724 <UFCP_TX_IRQ_Handler+0x34>
 8008702:	2b01      	cmp	r3, #1
 8008704:	d008      	beq.n	8008718 <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008706:	7d40      	ldrb	r0, [r0, #21]
 8008708:	3001      	adds	r0, #1
 800870a:	4283      	cmp	r3, r0
 800870c:	dc10      	bgt.n	8008730 <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800870e:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8008710:	7d00      	ldrb	r0, [r0, #20]
 8008712:	6288      	str	r0, [r1, #40]	@ 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008714:	e002      	b.n	800871c <UFCP_TX_IRQ_Handler+0x2c>
 8008716:	4770      	bx	lr
 8008718:	7d40      	ldrb	r0, [r0, #21]
 800871a:	6288      	str	r0, [r1, #40]	@ 0x28
    {
      pBaseHandle->TxFrameLevel++;
 800871c:	3301      	adds	r3, #1
 800871e:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8008722:	4770      	bx	lr
 8008724:	7d00      	ldrb	r0, [r0, #20]
 8008726:	6288      	str	r0, [r1, #40]	@ 0x28
 8008728:	3301      	adds	r3, #1
 800872a:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 800872e:	4770      	bx	lr
{
 8008730:	b410      	push	{r4}
 8008732:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8008736:	628b      	str	r3, [r1, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800873c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	e841 3400 	strex	r4, r3, [r1]
 8008744:	2c00      	cmp	r4, #0
 8008746:	d1f7      	bne.n	8008738 <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008748:	f882 4097 	strb.w	r4, [r2, #151]	@ 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800874c:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008750:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008754:	4718      	bx	r3
 8008756:	bf00      	nop

08008758 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008758:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 800875c:	b973      	cbnz	r3, 800877c <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800875e:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008760:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
 8008764:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	e852 3f00 	ldrex	r3, [r2]
 800876c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	e842 3100 	strex	r1, r3, [r2]
 8008774:	2900      	cmp	r1, #0
 8008776:	d1f7      	bne.n	8008768 <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008778:	2002      	movs	r0, #2
 800877a:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800877c:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800877e:	4770      	bx	lr

08008780 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8008784:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8008788:	bb80      	cbnz	r0, 80087ec <UFCP_Send+0x6c>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 800878a:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800878c:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800878e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8008790:	b2c0      	uxtb	r0, r0
 8008792:	b19b      	cbz	r3, 80087bc <UFCP_Send+0x3c>
 8008794:	2805      	cmp	r0, #5
 8008796:	d94d      	bls.n	8008834 <UFCP_Send+0xb4>
 8008798:	f104 0616 	add.w	r6, r4, #22
 800879c:	1c51      	adds	r1, r2, #1
 800879e:	1a75      	subs	r5, r6, r1
 80087a0:	2d02      	cmp	r5, #2
 80087a2:	d825      	bhi.n	80087f0 <UFCP_Send+0x70>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f104 0315 	add.w	r3, r4, #21
 80087aa:	4402      	add	r2, r0
 80087ac:	e000      	b.n	80087b0 <UFCP_Send+0x30>
 80087ae:	3101      	adds	r1, #1
 80087b0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80087b4:	f803 0f01 	strb.w	r0, [r3, #1]!
 80087b8:	428a      	cmp	r2, r1
 80087ba:	d1f8      	bne.n	80087ae <UFCP_Send+0x2e>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80087bc:	f104 0014 	add.w	r0, r4, #20
 80087c0:	f7fd ff3e 	bl	8006640 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 80087c4:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80087c6:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80087c8:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80087cc:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
    pHandle->TxFrameLevel = 0;
 80087d0:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80087d4:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	e852 3f00 	ldrex	r3, [r2]
 80087dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	e842 3100 	strex	r1, r3, [r2]
 80087e4:	2900      	cmp	r1, #0
 80087e6:	d1f7      	bne.n	80087d8 <UFCP_Send+0x58>
 80087e8:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80087ec:	2001      	movs	r0, #1
}
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	089d      	lsrs	r5, r3, #2
 80087f2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80087f6:	4611      	mov	r1, r2
 80087f8:	46b4      	mov	ip, r6
    while ( size-- ) *dest++ = *buffer++;
 80087fa:	f851 eb04 	ldr.w	lr, [r1], #4
 80087fe:	f84c eb04 	str.w	lr, [ip], #4
 8008802:	42a9      	cmp	r1, r5
 8008804:	d1f9      	bne.n	80087fa <UFCP_Send+0x7a>
 8008806:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 800880a:	1a40      	subs	r0, r0, r1
 800880c:	079b      	lsls	r3, r3, #30
 800880e:	b2c0      	uxtb	r0, r0
 8008810:	eb02 0c01 	add.w	ip, r2, r1
 8008814:	eb06 0501 	add.w	r5, r6, r1
 8008818:	d0d0      	beq.n	80087bc <UFCP_Send+0x3c>
 800881a:	5c53      	ldrb	r3, [r2, r1]
 800881c:	5473      	strb	r3, [r6, r1]
 800881e:	2800      	cmp	r0, #0
 8008820:	d0cc      	beq.n	80087bc <UFCP_Send+0x3c>
 8008822:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8008826:	706b      	strb	r3, [r5, #1]
 8008828:	2801      	cmp	r0, #1
 800882a:	d0c7      	beq.n	80087bc <UFCP_Send+0x3c>
 800882c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8008830:	70ab      	strb	r3, [r5, #2]
 8008832:	e7c3      	b.n	80087bc <UFCP_Send+0x3c>
 8008834:	1c51      	adds	r1, r2, #1
 8008836:	e7b5      	b.n	80087a4 <UFCP_Send+0x24>

08008838 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008838:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 800883c:	b90b      	cbnz	r3, 8008842 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800883e:	482d      	ldr	r0, [pc, #180]	@ (80088f4 <UFCP_RX_IRQ_Handler+0xbc>)
}
 8008840:	4770      	bx	lr
{
 8008842:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008844:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
{
 8008848:	b083      	sub	sp, #12
 800884a:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 800884c:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800884e:	b393      	cbz	r3, 80088b6 <UFCP_RX_IRQ_Handler+0x7e>
 8008850:	2b01      	cmp	r3, #1
 8008852:	d03a      	beq.n	80088ca <UFCP_RX_IRQ_Handler+0x92>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008854:	f890 109a 	ldrb.w	r1, [r0, #154]	@ 0x9a
 8008858:	3101      	adds	r1, #1
 800885a:	428b      	cmp	r3, r1
 800885c:	dc08      	bgt.n	8008870 <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800885e:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008860:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008862:	f881 2099 	strb.w	r2, [r1, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 8008866:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800886a:	4822      	ldr	r0, [pc, #136]	@ (80088f4 <UFCP_RX_IRQ_Handler+0xbc>)
}
 800886c:	b003      	add	sp, #12
 800886e:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8008870:	2300      	movs	r3, #0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008872:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008876:	f880 211b 	strb.w	r2, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 800887a:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	e851 3f00 	ldrex	r3, [r1]
 8008880:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	e841 3200 	strex	r2, r3, [r1]
 8008888:	2a00      	cmp	r2, #0
 800888a:	d1f7      	bne.n	800887c <UFCP_RX_IRQ_Handler+0x44>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800888c:	f884 211c 	strb.w	r2, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008890:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 8008894:	f7fd fed4 	bl	8006640 <FCP_CalcCRC>
 8008898:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800889c:	4283      	cmp	r3, r0
 800889e:	d11d      	bne.n	80088dc <UFCP_RX_IRQ_Handler+0xa4>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80088a0:	68a5      	ldr	r5, [r4, #8]
 80088a2:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 80088a6:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 80088aa:	6820      	ldr	r0, [r4, #0]
 80088ac:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 80088b0:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80088b2:	4811      	ldr	r0, [pc, #68]	@ (80088f8 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 80088b4:	e7da      	b.n	800886c <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80088b6:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80088b8:	4810      	ldr	r0, [pc, #64]	@ (80088fc <UFCP_RX_IRQ_Handler+0xc4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80088ba:	f884 2099 	strb.w	r2, [r4, #153]	@ 0x99
        pBaseHandle->RxFrameLevel++;
 80088be:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80088c0:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80088c2:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 80088c6:	b003      	add	sp, #12
 80088c8:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80088ca:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 80088cc:	bf54      	ite	pl
 80088ce:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80088d0:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 80088d2:	f880 209a 	strb.w	r2, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 80088d6:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 80088da:	e7c6      	b.n	800886a <UFCP_RX_IRQ_Handler+0x32>
            error_code = FCP_MSG_RX_BAD_CRC;
 80088dc:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80088de:	2301      	movs	r3, #1
 80088e0:	f10d 0207 	add.w	r2, sp, #7
 80088e4:	21ff      	movs	r1, #255	@ 0xff
 80088e6:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80088e8:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80088ec:	f7ff ff48 	bl	8008780 <UFCP_Send>
 80088f0:	e7df      	b.n	80088b2 <UFCP_RX_IRQ_Handler+0x7a>
 80088f2:	bf00      	nop
 80088f4:	08008e28 	.word	0x08008e28
 80088f8:	08008e24 	.word	0x08008e24
 80088fc:	08008e26 	.word	0x08008e26

08008900 <UFCP_OVR_IRQ_Handler>:
{
 8008900:	b500      	push	{lr}
 8008902:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8008904:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008908:	2301      	movs	r3, #1
 800890a:	f10d 0207 	add.w	r2, sp, #7
 800890e:	21ff      	movs	r1, #255	@ 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008910:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008914:	f7ff ff34 	bl	8008780 <UFCP_Send>
}
 8008918:	b003      	add	sp, #12
 800891a:	f85d fb04 	ldr.w	pc, [sp], #4
 800891e:	bf00      	nop

08008920 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008920:	2300      	movs	r3, #0
 8008922:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 8008926:	4770      	bx	lr

08008928 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008928:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800892a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800892c:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 800892e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 8008932:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008934:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008936:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008938:	8503      	strh	r3, [r0, #40]	@ 0x28
  pHandle->bTransitionStarted = false;
 800893a:	8583      	strh	r3, [r0, #44]	@ 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800893c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  pHandle->hElAngleAccu = 0;
 800893e:	6303      	str	r3, [r0, #48]	@ 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <VSS_Init>:
{
 8008944:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008946:	f7ff ffef 	bl	8008928 <VSS_Clear>
}
 800894a:	bd08      	pop	{r3, pc}

0800894c <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 800894c:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8008950:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 8008952:	b11a      	cbz	r2, 800895c <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8008954:	f9b1 0000 	ldrsh.w	r0, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8008958:	8098      	strh	r0, [r3, #4]
  return hRetAngle;
}
 800895a:	4770      	bx	lr
{
 800895c:	b530      	push	{r4, r5, lr}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800895e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008962:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008964:	88dd      	ldrh	r5, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8008966:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800896a:	785a      	ldrb	r2, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800896c:	fb9c f2f2 	sdiv	r2, ip, r2
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008970:	4460      	add	r0, ip
 8008972:	fa1f fe80 	uxth.w	lr, r0
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008976:	442a      	add	r2, r5
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008978:	b200      	sxth	r0, r0
 800897a:	8618      	strh	r0, [r3, #48]	@ 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800897c:	80da      	strh	r2, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 800897e:	b1fc      	cbz	r4, 80089c0 <VSS_CalcElAngle+0x74>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8008980:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8008984:	b1f2      	cbz	r2, 80089c4 <VSS_CalcElAngle+0x78>
        pHandle->hTransitionRemainingSteps--;
 8008986:	3a01      	subs	r2, #1
 8008988:	b212      	sxth	r2, r2
 800898a:	85da      	strh	r2, [r3, #46]	@ 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800898c:	f1bc 0f00 	cmp.w	ip, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008990:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008992:	db26      	blt.n	80089e2 <VSS_CalcElAngle+0x96>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008994:	eba1 0e0e 	sub.w	lr, r1, lr
 8008998:	fa0f fe8e 	sxth.w	lr, lr
 800899c:	2501      	movs	r5, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800899e:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80089a2:	fb0e f202 	mul.w	r2, lr, r2
        if ( hAngleDiff >= 0 )
 80089a6:	f1be 0f00 	cmp.w	lr, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80089aa:	fb92 f2f4 	sdiv	r2, r2, r4
        hAngleCorr *= hSignCorr;
 80089ae:	fb12 f205 	smulbb	r2, r2, r5
 80089b2:	b292      	uxth	r2, r2
        if ( hAngleDiff >= 0 )
 80089b4:	db0e      	blt.n	80089d4 <VSS_CalcElAngle+0x88>
          pHandle->bTransitionLocked = true;
 80089b6:	2001      	movs	r0, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80089b8:	1a8a      	subs	r2, r1, r2
          pHandle->bTransitionLocked = true;
 80089ba:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80089be:	b210      	sxth	r0, r2
  pHandle->_Super.hElAngle = hRetAngle;
 80089c0:	8098      	strh	r0, [r3, #4]
}
 80089c2:	bd30      	pop	{r4, r5, pc}
        hRetAngle = *( int16_t * )pInputVars_str;
 80089c4:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80089c8:	701a      	strb	r2, [r3, #0]
        pHandle->bTransitionEnded = true;
 80089ca:	2401      	movs	r4, #1
 80089cc:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 80089d0:	8098      	strh	r0, [r3, #4]
}
 80089d2:	bd30      	pop	{r4, r5, pc}
          if ( pHandle->bTransitionLocked == false )
 80089d4:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 80089d8:	2c00      	cmp	r4, #0
 80089da:	d0f1      	beq.n	80089c0 <VSS_CalcElAngle+0x74>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 80089dc:	440a      	add	r2, r1
 80089de:	b210      	sxth	r0, r2
 80089e0:	e7ee      	b.n	80089c0 <VSS_CalcElAngle+0x74>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 80089e2:	ebae 0e01 	sub.w	lr, lr, r1
 80089e6:	fa0f fe8e 	sxth.w	lr, lr
 80089ea:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80089ee:	e7d6      	b.n	800899e <VSS_CalcElAngle+0x52>

080089f0 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 80089f0:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 80089f2:	2a01      	cmp	r2, #1
{
 80089f4:	4603      	mov	r3, r0
  if ( pHandle->hRemainingStep > 1u )
 80089f6:	d924      	bls.n	8008a42 <VSS_CalcAvrgMecSpeedUnit+0x52>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80089f8:	e9d0 0208 	ldrd	r0, r2, [r0, #32]
 80089fc:	4410      	add	r0, r2
 80089fe:	6258      	str	r0, [r3, #36]	@ 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008a00:	2800      	cmp	r0, #0
 8008a02:	bfb8      	it	lt
 8008a04:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008a08:	8b5a      	ldrh	r2, [r3, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008a0a:	f893 c001 	ldrb.w	ip, [r3, #1]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008a0e:	bfb8      	it	lt
 8008a10:	30ff      	addlt	r0, #255	@ 0xff
 8008a12:	1400      	asrs	r0, r0, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008a14:	fb00 f202 	mul.w	r2, r0, r2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008a18:	81d8      	strh	r0, [r3, #14]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008a1a:	69d8      	ldr	r0, [r3, #28]
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008a1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008a20:	fb00 f00c 	mul.w	r0, r0, ip
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008a24:	0052      	lsls	r2, r2, #1
 8008a26:	fb92 f2f0 	sdiv	r2, r2, r0
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008a2a:	b212      	sxth	r2, r2
 8008a2c:	800a      	strh	r2, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8008a2e:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008a30:	819a      	strh	r2, [r3, #12]
    pHandle->hRemainingStep--;
 8008a32:	1e42      	subs	r2, r0, #1
 8008a34:	851a      	strh	r2, [r3, #40]	@ 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8008a36:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
 8008a3a:	b950      	cbnz	r0, 8008a52 <VSS_CalcAvrgMecSpeedUnit+0x62>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008a3c:	78da      	ldrb	r2, [r3, #3]
 8008a3e:	701a      	strb	r2, [r3, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8008a40:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8008a42:	d009      	beq.n	8008a58 <VSS_CalcAvrgMecSpeedUnit+0x68>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008a44:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
  if ( pHandle->bTransitionEnded == false )
 8008a48:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008a4c:	800a      	strh	r2, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d0f4      	beq.n	8008a3c <VSS_CalcAvrgMecSpeedUnit+0x4c>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff b9a4 	b.w	8007da0 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008a58:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8008a5c:	f8a1 c000 	strh.w	ip, [r1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a60:	8b42      	ldrh	r2, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008a62:	69c0      	ldr	r0, [r0, #28]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008a64:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008a6c:	0052      	lsls	r2, r2, #1
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008a6e:	fb00 f00c 	mul.w	r0, r0, ip
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8008a72:	fb90 f0f2 	sdiv	r0, r0, r2
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a76:	785a      	ldrb	r2, [r3, #1]
 8008a78:	fb12 f200 	smulbb	r2, r2, r0
    pHandle->hRemainingStep = 0u;
 8008a7c:	2000      	movs	r0, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a7e:	81da      	strh	r2, [r3, #14]
    pHandle->hRemainingStep = 0u;
 8008a80:	8518      	strh	r0, [r3, #40]	@ 0x28
 8008a82:	e7d8      	b.n	8008a36 <VSS_CalcAvrgMecSpeedUnit+0x46>

08008a84 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a84:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008a86:	8601      	strh	r1, [r0, #48]	@ 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a88:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8008a8c:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a8e:	80c3      	strh	r3, [r0, #6]
}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop

08008a94 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008a94:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8008a98:	b9a3      	cbnz	r3, 8008ac4 <VSS_SetMecAcceleration+0x30>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a9a:	8b43      	ldrh	r3, [r0, #26]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a9c:	f890 c001 	ldrb.w	ip, [r0, #1]
{
 8008aa0:	b510      	push	{r4, lr}
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008aa2:	69c4      	ldr	r4, [r0, #28]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008aa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008aa8:	fb04 fe01 	mul.w	lr, r4, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008aac:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008aae:	fb9e fef3 	sdiv	lr, lr, r3
    if ( hDurationms == 0u )
 8008ab2:	b942      	cbnz	r2, 8008ac6 <VSS_SetMecAcceleration+0x32>
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008ab4:	fb1e fe0c 	smulbb	lr, lr, ip
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008ab8:	8181      	strh	r1, [r0, #12]
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008aba:	f8a0 e00e 	strh.w	lr, [r0, #14]

      pHandle->hRemainingStep = 0u;
 8008abe:	8502      	strh	r2, [r0, #40]	@ 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008ac0:	8541      	strh	r1, [r0, #42]	@ 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008ac2:	bd10      	pop	{r4, pc}
 8008ac4:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008ac6:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008ac8:	8541      	strh	r1, [r0, #42]	@ 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008aca:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008ace:	4a0b      	ldr	r2, [pc, #44]	@ (8008afc <VSS_SetMecAcceleration+0x68>)
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008ad0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008ad4:	fba2 2303 	umull	r2, r3, r2, r3
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008ad8:	f3c3 138f 	ubfx	r3, r3, #6, #16
      hNbrStep++;
 8008adc:	3301      	adds	r3, #1
 8008ade:	b29b      	uxth	r3, r3
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008ae0:	fb91 f2fc 	sdiv	r2, r1, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008ae4:	ebae 0202 	sub.w	r2, lr, r2
      pHandle->hRemainingStep = hNbrStep;
 8008ae8:	8503      	strh	r3, [r0, #40]	@ 0x28
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008aea:	0412      	lsls	r2, r2, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008aec:	0409      	lsls	r1, r1, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008aee:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008af2:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008af6:	e9c0 3108 	strd	r3, r1, [r0, #32]
}
 8008afa:	bd10      	pop	{r4, pc}
 8008afc:	10624dd3 	.word	0x10624dd3

08008b00 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8008b00:	b151      	cbz	r1, 8008b18 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8008b02:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
    pHandle->bTransitionStarted = true;
 8008b06:	2201      	movs	r2, #1
 8008b08:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8008b0c:	b923      	cbnz	r3, 8008b18 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8008b0e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8008b12:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8008b14:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8008b16:	4770      	bx	lr
  bool bAux = true;
 8008b18:	2001      	movs	r0, #1
 8008b1a:	4770      	bx	lr

08008b1c <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8008b1c:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop

08008b24 <memset>:
 8008b24:	4402      	add	r2, r0
 8008b26:	4603      	mov	r3, r0
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d100      	bne.n	8008b2e <memset+0xa>
 8008b2c:	4770      	bx	lr
 8008b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b32:	e7f9      	b.n	8008b28 <memset+0x4>

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4d0d      	ldr	r5, [pc, #52]	@ (8008b6c <__libc_init_array+0x38>)
 8008b38:	4c0d      	ldr	r4, [pc, #52]	@ (8008b70 <__libc_init_array+0x3c>)
 8008b3a:	1b64      	subs	r4, r4, r5
 8008b3c:	10a4      	asrs	r4, r4, #2
 8008b3e:	2600      	movs	r6, #0
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	4d0b      	ldr	r5, [pc, #44]	@ (8008b74 <__libc_init_array+0x40>)
 8008b46:	4c0c      	ldr	r4, [pc, #48]	@ (8008b78 <__libc_init_array+0x44>)
 8008b48:	f000 f818 	bl	8008b7c <_init>
 8008b4c:	1b64      	subs	r4, r4, r5
 8008b4e:	10a4      	asrs	r4, r4, #2
 8008b50:	2600      	movs	r6, #0
 8008b52:	42a6      	cmp	r6, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5c:	4798      	blx	r3
 8008b5e:	3601      	adds	r6, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b66:	4798      	blx	r3
 8008b68:	3601      	adds	r6, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	08008e34 	.word	0x08008e34
 8008b70:	08008e34 	.word	0x08008e34
 8008b74:	08008e34 	.word	0x08008e34
 8008b78:	08008e38 	.word	0x08008e38

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
