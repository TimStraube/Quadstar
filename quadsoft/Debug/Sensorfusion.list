
Sensorfusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023750  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  080238f0  080238f0  000248f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024370  08024370  00026528  2**0
                  CONTENTS
  4 .ARM          00000008  08024370  08024370  00025370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024378  08024378  00026528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024378  08024378  00025378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802437c  0802437c  0002537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000528  20000000  08024380  00026000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  20000528  080248a8  00026528  2**3
                  ALLOC
 10 ._user_heap_stack 00008200  20002458  080248a8  00027458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026528  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003daa4  00000000  00000000  00026558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061ae  00000000  00000000  00063ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003700  00000000  00000000  0006a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a99  00000000  00000000  0006d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203f7  00000000  00000000  00070349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000323bc  00000000  00000000  00090740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcae6  00000000  00000000  000c2afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000093  00000000  00000000  0017f5e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001072c  00000000  00000000  0017f678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000528 	.word	0x20000528
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080238d8 	.word	0x080238d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000052c 	.word	0x2000052c
 80001dc:	080238d8 	.word	0x080238d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4313      	orrs	r3, r2
 800102a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800102e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4013      	ands	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40023800 	.word	0x40023800

08001048 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <LL_APB1_GRP1_EnableClock+0x2c>)
 800105e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4013      	ands	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40023800 	.word	0x40023800

08001078 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	@ 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800109e:	2320      	movs	r3, #32
 80010a0:	e003      	b.n	80010aa <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2103      	movs	r1, #3
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	401a      	ands	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	61fb      	str	r3, [r7, #28]
  return result;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80010cc:	2320      	movs	r3, #32
 80010ce:	e003      	b.n	80010d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	431a      	orrs	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	372c      	adds	r7, #44	@ 0x2c
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	fb01 f303 	mul.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001122:	b480      	push	{r7}
 8001124:	b08b      	sub	sp, #44	@ 0x2c
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	613b      	str	r3, [r7, #16]
  return result;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001148:	2320      	movs	r3, #32
 800114a:	e003      	b.n	8001154 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2103      	movs	r1, #3
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	61fb      	str	r3, [r7, #28]
  return result;
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001176:	2320      	movs	r3, #32
 8001178:	e003      	b.n	8001182 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	431a      	orrs	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001190:	bf00      	nop
 8001192:	372c      	adds	r7, #44	@ 0x2c
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800119c:	b480      	push	{r7}
 800119e:	b08b      	sub	sp, #44	@ 0x2c
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	613b      	str	r3, [r7, #16]
  return result;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80011c2:	2320      	movs	r3, #32
 80011c4:	e003      	b.n	80011ce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2103      	movs	r1, #3
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	401a      	ands	r2, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	61fb      	str	r3, [r7, #28]
  return result;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80011f0:	2320      	movs	r3, #32
 80011f2:	e003      	b.n	80011fc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	431a      	orrs	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	60da      	str	r2, [r3, #12]
}
 800120a:	bf00      	nop
 800120c:	372c      	adds	r7, #44	@ 0x2c
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001216:	b480      	push	{r7}
 8001218:	b08b      	sub	sp, #44	@ 0x2c
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	613b      	str	r3, [r7, #16]
  return result;
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800123c:	2320      	movs	r3, #32
 800123e:	e003      	b.n	8001248 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	210f      	movs	r1, #15
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	401a      	ands	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	61fb      	str	r3, [r7, #28]
  return result;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800126a:	2320      	movs	r3, #32
 800126c:	e003      	b.n	8001276 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	431a      	orrs	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001284:	bf00      	nop
 8001286:	372c      	adds	r7, #44	@ 0x2c
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4013      	ands	r3, r2
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43d9      	mvns	r1, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	400b      	ands	r3, r1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	@ 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	330c      	adds	r3, #12
 800130e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	e853 3f00 	ldrex	r3, [r3]
 8001316:	60bb      	str	r3, [r7, #8]
   return(result);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f023 030c 	bic.w	r3, r3, #12
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	4313      	orrs	r3, r2
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	330c      	adds	r3, #12
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	61ba      	str	r2, [r7, #24]
 800132c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800132e:	6979      	ldr	r1, [r7, #20]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	e841 2300 	strex	r3, r2, [r1]
 8001336:	613b      	str	r3, [r7, #16]
   return(result);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1e5      	bne.n	800130a <LL_USART_SetTransferDirection+0xa>
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	@ 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_USART_ConfigCharacter>:
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f423 52b0 	bic.w	r2, r3, #5632	@ 0x1600
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	430b      	orrs	r3, r1
 8001368:	431a      	orrs	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	431a      	orrs	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	611a      	str	r2, [r3, #16]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800138c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001390:	b0c0      	sub	sp, #256	@ 0x100
 8001392:	af00      	add	r7, sp, #0
 8001394:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001398:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800139c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80013a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80013ac:	f040 810c 	bne.w	80015c8 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80013b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80013ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80013be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80013c2:	4622      	mov	r2, r4
 80013c4:	462b      	mov	r3, r5
 80013c6:	1891      	adds	r1, r2, r2
 80013c8:	6639      	str	r1, [r7, #96]	@ 0x60
 80013ca:	415b      	adcs	r3, r3
 80013cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80013ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80013d2:	4621      	mov	r1, r4
 80013d4:	eb12 0801 	adds.w	r8, r2, r1
 80013d8:	4629      	mov	r1, r5
 80013da:	eb43 0901 	adc.w	r9, r3, r1
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f2:	4690      	mov	r8, r2
 80013f4:	4699      	mov	r9, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	eb18 0303 	adds.w	r3, r8, r3
 80013fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001400:	462b      	mov	r3, r5
 8001402:	eb49 0303 	adc.w	r3, r9, r3
 8001406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800140a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800140e:	2200      	movs	r2, #0
 8001410:	469a      	mov	sl, r3
 8001412:	4693      	mov	fp, r2
 8001414:	eb1a 030a 	adds.w	r3, sl, sl
 8001418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800141a:	eb4b 030b 	adc.w	r3, fp, fp
 800141e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001428:	f7ff fc36 	bl	8000c98 <__aeabi_uldivmod>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4b64      	ldr	r3, [pc, #400]	@ (80015c4 <LL_USART_SetBaudRate+0x238>)
 8001432:	fba3 2302 	umull	r2, r3, r3, r2
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b29b      	uxth	r3, r3
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	b29c      	uxth	r4, r3
 800143e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001442:	2200      	movs	r2, #0
 8001444:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001448:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800144c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001450:	4642      	mov	r2, r8
 8001452:	464b      	mov	r3, r9
 8001454:	1891      	adds	r1, r2, r2
 8001456:	6539      	str	r1, [r7, #80]	@ 0x50
 8001458:	415b      	adcs	r3, r3
 800145a:	657b      	str	r3, [r7, #84]	@ 0x54
 800145c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001460:	4641      	mov	r1, r8
 8001462:	1851      	adds	r1, r2, r1
 8001464:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001466:	4649      	mov	r1, r9
 8001468:	414b      	adcs	r3, r1
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001478:	4659      	mov	r1, fp
 800147a:	00cb      	lsls	r3, r1, #3
 800147c:	4651      	mov	r1, sl
 800147e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001482:	4651      	mov	r1, sl
 8001484:	00ca      	lsls	r2, r1, #3
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	4603      	mov	r3, r0
 800148c:	4642      	mov	r2, r8
 800148e:	189b      	adds	r3, r3, r2
 8001490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001494:	464b      	mov	r3, r9
 8001496:	460a      	mov	r2, r1
 8001498:	eb42 0303 	adc.w	r3, r2, r3
 800149c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80014a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014aa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80014ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80014b2:	460b      	mov	r3, r1
 80014b4:	18db      	adds	r3, r3, r3
 80014b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80014b8:	4613      	mov	r3, r2
 80014ba:	eb42 0303 	adc.w	r3, r2, r3
 80014be:	647b      	str	r3, [r7, #68]	@ 0x44
 80014c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80014c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80014c8:	f7ff fbe6 	bl	8000c98 <__aeabi_uldivmod>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4611      	mov	r1, r2
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <LL_USART_SetBaudRate+0x238>)
 80014d4:	fba3 2301 	umull	r2, r3, r3, r1
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	2264      	movs	r2, #100	@ 0x64
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	1acb      	subs	r3, r1, r3
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80014e8:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <LL_USART_SetBaudRate+0x238>)
 80014ea:	fba3 2302 	umull	r2, r3, r3, r2
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4423      	add	r3, r4
 80014fe:	b29c      	uxth	r4, r3
 8001500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001504:	2200      	movs	r2, #0
 8001506:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800150a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800150e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001512:	4642      	mov	r2, r8
 8001514:	464b      	mov	r3, r9
 8001516:	1891      	adds	r1, r2, r2
 8001518:	63b9      	str	r1, [r7, #56]	@ 0x38
 800151a:	415b      	adcs	r3, r3
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800151e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001522:	4641      	mov	r1, r8
 8001524:	1851      	adds	r1, r2, r1
 8001526:	6339      	str	r1, [r7, #48]	@ 0x30
 8001528:	4649      	mov	r1, r9
 800152a:	414b      	adcs	r3, r1
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800153a:	4659      	mov	r1, fp
 800153c:	00cb      	lsls	r3, r1, #3
 800153e:	4651      	mov	r1, sl
 8001540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001544:	4651      	mov	r1, sl
 8001546:	00ca      	lsls	r2, r1, #3
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	4603      	mov	r3, r0
 800154e:	4642      	mov	r2, r8
 8001550:	189b      	adds	r3, r3, r2
 8001552:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001556:	464b      	mov	r3, r9
 8001558:	460a      	mov	r2, r1
 800155a:	eb42 0303 	adc.w	r3, r2, r3
 800155e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001562:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001566:	2200      	movs	r2, #0
 8001568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800156c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001570:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8001574:	460b      	mov	r3, r1
 8001576:	18db      	adds	r3, r3, r3
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800157a:	4613      	mov	r3, r2
 800157c:	eb42 0303 	adc.w	r3, r2, r3
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001586:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800158a:	f7ff fb85 	bl	8000c98 <__aeabi_uldivmod>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <LL_USART_SetBaudRate+0x238>)
 8001594:	fba3 1302 	umull	r1, r3, r3, r2
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	2164      	movs	r1, #100	@ 0x64
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	3332      	adds	r3, #50	@ 0x32
 80015a6:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <LL_USART_SetBaudRate+0x238>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	095b      	lsrs	r3, r3, #5
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4423      	add	r3, r4
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80015c2:	e108      	b.n	80017d6 <LL_USART_SetBaudRate+0x44a>
 80015c4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80015c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80015cc:	2200      	movs	r2, #0
 80015ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80015d2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80015d6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80015da:	4642      	mov	r2, r8
 80015dc:	464b      	mov	r3, r9
 80015de:	1891      	adds	r1, r2, r2
 80015e0:	6239      	str	r1, [r7, #32]
 80015e2:	415b      	adcs	r3, r3
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ea:	4641      	mov	r1, r8
 80015ec:	1854      	adds	r4, r2, r1
 80015ee:	4649      	mov	r1, r9
 80015f0:	eb43 0501 	adc.w	r5, r3, r1
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	00eb      	lsls	r3, r5, #3
 80015fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001602:	00e2      	lsls	r2, r4, #3
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	4643      	mov	r3, r8
 800160a:	18e3      	adds	r3, r4, r3
 800160c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001610:	464b      	mov	r3, r9
 8001612:	eb45 0303 	adc.w	r3, r5, r3
 8001616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800161a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800161e:	2200      	movs	r2, #0
 8001620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001624:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001634:	4629      	mov	r1, r5
 8001636:	008b      	lsls	r3, r1, #2
 8001638:	4621      	mov	r1, r4
 800163a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800163e:	4621      	mov	r1, r4
 8001640:	008a      	lsls	r2, r1, #2
 8001642:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001646:	f7ff fb27 	bl	8000c98 <__aeabi_uldivmod>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <LL_USART_SetBaudRate+0x458>)
 8001650:	fba3 2302 	umull	r2, r3, r3, r2
 8001654:	095b      	lsrs	r3, r3, #5
 8001656:	b29b      	uxth	r3, r3
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	b29c      	uxth	r4, r3
 800165c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001660:	2200      	movs	r2, #0
 8001662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800166a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800166e:	4642      	mov	r2, r8
 8001670:	464b      	mov	r3, r9
 8001672:	1891      	adds	r1, r2, r2
 8001674:	61b9      	str	r1, [r7, #24]
 8001676:	415b      	adcs	r3, r3
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800167e:	4641      	mov	r1, r8
 8001680:	1851      	adds	r1, r2, r1
 8001682:	6139      	str	r1, [r7, #16]
 8001684:	4649      	mov	r1, r9
 8001686:	414b      	adcs	r3, r1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001696:	4659      	mov	r1, fp
 8001698:	00cb      	lsls	r3, r1, #3
 800169a:	4651      	mov	r1, sl
 800169c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016a0:	4651      	mov	r1, sl
 80016a2:	00ca      	lsls	r2, r1, #3
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	4603      	mov	r3, r0
 80016aa:	4642      	mov	r2, r8
 80016ac:	189b      	adds	r3, r3, r2
 80016ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016b2:	464b      	mov	r3, r9
 80016b4:	460a      	mov	r2, r1
 80016b6:	eb42 0303 	adc.w	r3, r2, r3
 80016ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80016be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80016c2:	2200      	movs	r2, #0
 80016c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80016d8:	4649      	mov	r1, r9
 80016da:	008b      	lsls	r3, r1, #2
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016e2:	4641      	mov	r1, r8
 80016e4:	008a      	lsls	r2, r1, #2
 80016e6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80016ea:	f7ff fad5 	bl	8000c98 <__aeabi_uldivmod>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <LL_USART_SetBaudRate+0x458>)
 80016f6:	fba3 2301 	umull	r2, r3, r3, r1
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2264      	movs	r2, #100	@ 0x64
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	1acb      	subs	r3, r1, r3
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	3332      	adds	r3, #50	@ 0x32
 8001708:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <LL_USART_SetBaudRate+0x458>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	b29b      	uxth	r3, r3
 8001712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001716:	b29b      	uxth	r3, r3
 8001718:	4423      	add	r3, r4
 800171a:	b29c      	uxth	r4, r3
 800171c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001720:	2200      	movs	r2, #0
 8001722:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001724:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001726:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800172a:	4642      	mov	r2, r8
 800172c:	464b      	mov	r3, r9
 800172e:	1891      	adds	r1, r2, r2
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	415b      	adcs	r3, r3
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800173a:	4641      	mov	r1, r8
 800173c:	1851      	adds	r1, r2, r1
 800173e:	6039      	str	r1, [r7, #0]
 8001740:	4649      	mov	r1, r9
 8001742:	414b      	adcs	r3, r1
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001752:	4659      	mov	r1, fp
 8001754:	00cb      	lsls	r3, r1, #3
 8001756:	4651      	mov	r1, sl
 8001758:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800175c:	4651      	mov	r1, sl
 800175e:	00ca      	lsls	r2, r1, #3
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	4603      	mov	r3, r0
 8001766:	4642      	mov	r2, r8
 8001768:	189b      	adds	r3, r3, r2
 800176a:	673b      	str	r3, [r7, #112]	@ 0x70
 800176c:	464b      	mov	r3, r9
 800176e:	460a      	mov	r2, r1
 8001770:	eb42 0303 	adc.w	r3, r2, r3
 8001774:	677b      	str	r3, [r7, #116]	@ 0x74
 8001776:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800177a:	2200      	movs	r2, #0
 800177c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800177e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800178c:	4649      	mov	r1, r9
 800178e:	008b      	lsls	r3, r1, #2
 8001790:	4641      	mov	r1, r8
 8001792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001796:	4641      	mov	r1, r8
 8001798:	008a      	lsls	r2, r1, #2
 800179a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800179e:	f7ff fa7b 	bl	8000c98 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <LL_USART_SetBaudRate+0x458>)
 80017a8:	fba3 1302 	umull	r1, r3, r3, r2
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	2164      	movs	r1, #100	@ 0x64
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	3332      	adds	r3, #50	@ 0x32
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LL_USART_SetBaudRate+0x458>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4423      	add	r3, r4
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017d4:	609a      	str	r2, [r3, #8]
}
 80017d6:	bf00      	nop
 80017d8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	51eb851f 	.word	0x51eb851f

080017e8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	330c      	adds	r3, #12
 80017f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	e853 3f00 	ldrex	r3, [r3]
 80017fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f043 0320 	orr.w	r3, r3, #32
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	330c      	adds	r3, #12
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	61ba      	str	r2, [r7, #24]
 800180e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001810:	6979      	ldr	r1, [r7, #20]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	e841 2300 	strex	r3, r2, [r1]
 8001818:	613b      	str	r3, [r7, #16]
   return(result);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e7      	bne.n	80017f0 <LL_USART_EnableIT_RXNE+0x8>
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800182e:	b480      	push	{r7}
 8001830:	b089      	sub	sp, #36	@ 0x24
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3314      	adds	r3, #20
 800183a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	e853 3f00 	ldrex	r3, [r3]
 8001842:	60bb      	str	r3, [r7, #8]
   return(result);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3314      	adds	r3, #20
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	61ba      	str	r2, [r7, #24]
 8001854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001856:	6979      	ldr	r1, [r7, #20]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	e841 2300 	strex	r3, r2, [r1]
 800185e:	613b      	str	r3, [r7, #16]
   return(result);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e7      	bne.n	8001836 <LL_USART_EnableIT_ERROR+0x8>
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	3724      	adds	r7, #36	@ 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	b2db      	uxtb	r3, r3
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <normQuaternion>:

// UART
char buffer[50];


double normQuaternion(Quaternion q) {
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	eeb0 4a40 	vmov.f32	s8, s0
 80018b6:	eef0 4a60 	vmov.f32	s9, s1
 80018ba:	eeb0 5a41 	vmov.f32	s10, s2
 80018be:	eef0 5a61 	vmov.f32	s11, s3
 80018c2:	eeb0 6a42 	vmov.f32	s12, s4
 80018c6:	eef0 6a62 	vmov.f32	s13, s5
 80018ca:	eeb0 7a43 	vmov.f32	s14, s6
 80018ce:	eef0 7a63 	vmov.f32	s15, s7
 80018d2:	ed87 4b00 	vstr	d4, [r7]
 80018d6:	ed87 5b02 	vstr	d5, [r7, #8]
 80018da:	ed87 6b04 	vstr	d6, [r7, #16]
 80018de:	ed87 7b06 	vstr	d7, [r7, #24]
	return sqrt(q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z);
 80018e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ea:	f7fe fe8d 	bl	8000608 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	461d      	mov	r5, r3
 80018f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018fe:	f7fe fe83 	bl	8000608 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7fe fcc7 	bl	800029c <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800191a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800191e:	f7fe fe73 	bl	8000608 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fcb7 	bl	800029c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800193a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800193e:	f7fe fe63 	bl	8000608 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe fca7 	bl	800029c <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b17 	vmov	d7, r2, r3
 8001956:	eeb0 0a47 	vmov.f32	s0, s14
 800195a:	eef0 0a67 	vmov.f32	s1, s15
 800195e:	f01d fe0b 	bl	801f578 <sqrt>
 8001962:	eeb0 7a40 	vmov.f32	s14, s0
 8001966:	eef0 7a60 	vmov.f32	s15, s1
}
 800196a:	eeb0 0a47 	vmov.f32	s0, s14
 800196e:	eef0 0a67 	vmov.f32	s1, s15
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}

08001978 <inverseQuaternion>:

Quaternion inverseQuaternion(Quaternion q) {
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b09a      	sub	sp, #104	@ 0x68
 800197e:	af00      	add	r7, sp, #0
 8001980:	eeb0 4a40 	vmov.f32	s8, s0
 8001984:	eef0 4a60 	vmov.f32	s9, s1
 8001988:	eeb0 5a41 	vmov.f32	s10, s2
 800198c:	eef0 5a61 	vmov.f32	s11, s3
 8001990:	eeb0 6a42 	vmov.f32	s12, s4
 8001994:	eef0 6a62 	vmov.f32	s13, s5
 8001998:	eeb0 7a43 	vmov.f32	s14, s6
 800199c:	eef0 7a63 	vmov.f32	s15, s7
 80019a0:	ed87 4b08 	vstr	d4, [r7, #32]
 80019a4:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80019a8:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80019ac:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	double norm = normQuaternion(q);
 80019b0:	ed97 4b08 	vldr	d4, [r7, #32]
 80019b4:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 80019b8:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80019bc:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80019c0:	eeb0 0a44 	vmov.f32	s0, s8
 80019c4:	eef0 0a64 	vmov.f32	s1, s9
 80019c8:	eeb0 1a45 	vmov.f32	s2, s10
 80019cc:	eef0 1a65 	vmov.f32	s3, s11
 80019d0:	eeb0 2a46 	vmov.f32	s4, s12
 80019d4:	eef0 2a66 	vmov.f32	s5, s13
 80019d8:	eeb0 3a47 	vmov.f32	s6, s14
 80019dc:	eef0 3a67 	vmov.f32	s7, s15
 80019e0:	f7ff ff64 	bl	80018ac <normQuaternion>
 80019e4:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	q.w =  q.w / norm;
 80019e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019f0:	f7fe ff34 	bl	800085c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	q.x = -q.x / norm;
 80019fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a00:	4692      	mov	sl, r2
 8001a02:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001a06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a0a:	4650      	mov	r0, sl
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	f7fe ff25 	bl	800085c <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	q.y = -q.y / norm;
 8001a1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a1e:	4690      	mov	r8, r2
 8001a20:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001a24:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe ff16 	bl	800085c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	q.z = -q.z / norm;
 8001a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a42:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe ff07 	bl	800085c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	return q;
 8001a56:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001a5a:	f107 0520 	add.w	r5, r7, #32
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a6a:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a6e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a7a:	ec49 8b14 	vmov	d4, r8, r9
 8001a7e:	ec45 4b15 	vmov	d5, r4, r5
 8001a82:	ec41 0b16 	vmov	d6, r0, r1
 8001a86:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a8a:	eeb0 0a44 	vmov.f32	s0, s8
 8001a8e:	eef0 0a64 	vmov.f32	s1, s9
 8001a92:	eeb0 1a45 	vmov.f32	s2, s10
 8001a96:	eef0 1a65 	vmov.f32	s3, s11
 8001a9a:	eeb0 2a46 	vmov.f32	s4, s12
 8001a9e:	eef0 2a66 	vmov.f32	s5, s13
 8001aa2:	eeb0 3a47 	vmov.f32	s6, s14
 8001aa6:	eef0 3a67 	vmov.f32	s7, s15
 8001aaa:	3768      	adds	r7, #104	@ 0x68
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ab2 <scaleQuaternion>:

Quaternion scaleQuaternion(Quaternion q, double scalar) {
 8001ab2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ab6:	b09a      	sub	sp, #104	@ 0x68
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	eeb0 5a41 	vmov.f32	s10, s2
 8001abe:	eef0 5a61 	vmov.f32	s11, s3
 8001ac2:	eeb0 6a42 	vmov.f32	s12, s4
 8001ac6:	eef0 6a62 	vmov.f32	s13, s5
 8001aca:	eeb0 7a43 	vmov.f32	s14, s6
 8001ace:	eef0 7a63 	vmov.f32	s15, s7
 8001ad2:	ed87 4b08 	vstr	d4, [r7, #32]
 8001ad6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8001ada:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 8001ade:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 8001ae2:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
	q.w = scalar * q.w;
 8001ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aee:	f7fe fd8b 	bl	8000608 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	q.x = scalar * q.x;
 8001afa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b02:	f7fe fd81 	bl	8000608 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	q.y = scalar * q.y;
 8001b0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b16:	f7fe fd77 	bl	8000608 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	q.z = scalar * q.z;
 8001b22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b2a:	f7fe fd6d 	bl	8000608 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	return q;
 8001b36:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001b3a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b4a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b4e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001b56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b5a:	ec49 8b14 	vmov	d4, r8, r9
 8001b5e:	ec45 4b15 	vmov	d5, r4, r5
 8001b62:	ec41 0b16 	vmov	d6, r0, r1
 8001b66:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b6a:	eeb0 0a44 	vmov.f32	s0, s8
 8001b6e:	eef0 0a64 	vmov.f32	s1, s9
 8001b72:	eeb0 1a45 	vmov.f32	s2, s10
 8001b76:	eef0 1a65 	vmov.f32	s3, s11
 8001b7a:	eeb0 2a46 	vmov.f32	s4, s12
 8001b7e:	eef0 2a66 	vmov.f32	s5, s13
 8001b82:	eeb0 3a47 	vmov.f32	s6, s14
 8001b86:	eef0 3a67 	vmov.f32	s7, s15
 8001b8a:	3768      	adds	r7, #104	@ 0x68
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b92 <kreuzproduktQuaternion>:

Quaternion kreuzproduktQuaternion(Quaternion q1, Quaternion q2) {
 8001b92:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b96:	b0a8      	sub	sp, #160	@ 0xa0
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
 8001b9e:	ed87 1b12 	vstr	d1, [r7, #72]	@ 0x48
 8001ba2:	ed87 2b14 	vstr	d2, [r7, #80]	@ 0x50
 8001ba6:	ed87 3b16 	vstr	d3, [r7, #88]	@ 0x58
 8001baa:	ed87 4b08 	vstr	d4, [r7, #32]
 8001bae:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001bb2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001bb6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	Quaternion returnQuaternion;
	returnQuaternion.w = (
		q1.w * q2.w -
 8001bba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bc2:	f7fe fd21 	bl	8000608 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4614      	mov	r4, r2
 8001bcc:	461d      	mov	r5, r3
		q1.x * q2.x -
 8001bce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bd6:	f7fe fd17 	bl	8000608 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
		q1.w * q2.w -
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fb59 	bl	8000298 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
		q1.y * q2.y -
 8001bee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bf6:	f7fe fd07 	bl	8000608 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
		q1.x * q2.x -
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fb49 	bl	8000298 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4614      	mov	r4, r2
 8001c0c:	461d      	mov	r5, r3
		q1.z * q2.z
 8001c0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001c12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c16:	f7fe fcf7 	bl	8000608 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
		q1.y * q2.y -
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fb39 	bl	8000298 <__aeabi_dsub>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
	returnQuaternion.w = (
 8001c2a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	);
	returnQuaternion.x = (
		q1.x * q2.w +
 8001c2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c36:	f7fe fce7 	bl	8000608 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4614      	mov	r4, r2
 8001c40:	461d      	mov	r5, r3
		q1.w * q2.x -
 8001c42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c4a:	f7fe fcdd 	bl	8000608 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
		q1.x * q2.w +
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb21 	bl	800029c <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
		q1.z * q2.y +
 8001c62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c6a:	f7fe fccd 	bl	8000608 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
		q1.w * q2.x -
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fb0f 	bl	8000298 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4614      	mov	r4, r2
 8001c80:	461d      	mov	r5, r3
		q1.y * q2.z
 8001c82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001c86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c8a:	f7fe fcbd 	bl	8000608 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
		q1.z * q2.y +
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fb01 	bl	800029c <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
	returnQuaternion.x = (
 8001c9e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	);
	returnQuaternion.y = (
		q1.y * q2.w +
 8001ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001caa:	f7fe fcad 	bl	8000608 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4614      	mov	r4, r2
 8001cb4:	461d      	mov	r5, r3
		q1.z * q2.x +
 8001cb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cbe:	f7fe fca3 	bl	8000608 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
		q1.y * q2.w +
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fae7 	bl	800029c <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	461d      	mov	r5, r3
		q1.w * q2.y -
 8001cd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001cda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cde:	f7fe fc93 	bl	8000608 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
		q1.z * q2.x +
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fad7 	bl	800029c <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	461d      	mov	r5, r3
		q1.x * q2.z
 8001cf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cfe:	f7fe fc83 	bl	8000608 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
		q1.w * q2.y -
 8001d06:	4620      	mov	r0, r4
 8001d08:	4629      	mov	r1, r5
 8001d0a:	f7fe fac5 	bl	8000298 <__aeabi_dsub>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
	returnQuaternion.y = (
 8001d12:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	);
	returnQuaternion.z = (
		q1.z * q2.w -
 8001d16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d1e:	f7fe fc73 	bl	8000608 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4614      	mov	r4, r2
 8001d28:	461d      	mov	r5, r3
		q1.y * q2.x +
 8001d2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d32:	f7fe fc69 	bl	8000608 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
		q1.z * q2.w -
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe faab 	bl	8000298 <__aeabi_dsub>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4614      	mov	r4, r2
 8001d48:	461d      	mov	r5, r3
		q1.x * q2.y +
 8001d4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d52:	f7fe fc59 	bl	8000608 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
		q1.y * q2.x +
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f7fe fa9d 	bl	800029c <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4614      	mov	r4, r2
 8001d68:	461d      	mov	r5, r3
		q1.w * q2.z
 8001d6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d72:	f7fe fc49 	bl	8000608 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
		q1.x * q2.y +
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f7fe fa8d 	bl	800029c <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
	returnQuaternion.z = (
 8001d86:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	);
	return returnQuaternion;
 8001d8a:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8001d8e:	f107 0560 	add.w	r5, r7, #96	@ 0x60
 8001d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d9e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001da2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001da6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001daa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001dae:	ec49 8b14 	vmov	d4, r8, r9
 8001db2:	ec45 4b15 	vmov	d5, r4, r5
 8001db6:	ec41 0b16 	vmov	d6, r0, r1
 8001dba:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dbe:	eeb0 0a44 	vmov.f32	s0, s8
 8001dc2:	eef0 0a64 	vmov.f32	s1, s9
 8001dc6:	eeb0 1a45 	vmov.f32	s2, s10
 8001dca:	eef0 1a65 	vmov.f32	s3, s11
 8001dce:	eeb0 2a46 	vmov.f32	s4, s12
 8001dd2:	eef0 2a66 	vmov.f32	s5, s13
 8001dd6:	eeb0 3a47 	vmov.f32	s6, s14
 8001dda:	eef0 3a67 	vmov.f32	s7, s15
 8001dde:	37a0      	adds	r7, #160	@ 0xa0
 8001de0:	46bd      	mov	sp, r7
 8001de2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dee:	f00c ff37 	bl	800ec60 <HAL_Init>
	// MotionFX_manager_init();

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001df2:	f000 f855 	bl	8001ea0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001df6:	f000 fa71 	bl	80022dc <MX_GPIO_Init>
	MX_CRC_Init();
 8001dfa:	f000 f8bd 	bl	8001f78 <MX_CRC_Init>
	MX_TIM3_Init();
 8001dfe:	f000 fa1f 	bl	8002240 <MX_TIM3_Init>
	MX_RTC_Init();
 8001e02:	f000 f8cd 	bl	8001fa0 <MX_RTC_Init>
	MX_TIM1_Init();
 8001e06:	f000 f925 	bl	8002054 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e0a:	f000 f9cb 	bl	80021a4 <MX_TIM2_Init>
	MX_MEMS_Init();
 8001e0e:	f013 fc91 	bl	8015734 <MX_MEMS_Init>
	/* USER CODE BEGIN 2 */
	MX_USART2_UART_Init();
 8001e12:	f000 faad 	bl	8002370 <MX_USART2_UART_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e16:	2100      	movs	r1, #0
 8001e18:	481c      	ldr	r0, [pc, #112]	@ (8001e8c <main+0xa4>)
 8001e1a:	f011 ff67 	bl	8013cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001e1e:	2104      	movs	r1, #4
 8001e20:	481a      	ldr	r0, [pc, #104]	@ (8001e8c <main+0xa4>)
 8001e22:	f011 ff63 	bl	8013cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001e26:	2108      	movs	r1, #8
 8001e28:	4818      	ldr	r0, [pc, #96]	@ (8001e8c <main+0xa4>)
 8001e2a:	f011 ff5f 	bl	8013cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e2e:	210c      	movs	r1, #12
 8001e30:	4816      	ldr	r0, [pc, #88]	@ (8001e8c <main+0xa4>)
 8001e32:	f011 ff5b 	bl	8013cec <HAL_TIM_PWM_Start>

	pegel = 0.5;
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <main+0xa8>)
 8001e38:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001e3c:	601a      	str	r2, [r3, #0]
	//		TIM1->CCR2 = pegel * 30259;
	//		TIM1->CCR3 = pegel * 30259;
	//		TIM1->CCR4 = pegel * 30259;
	//	}

	TIM1->CCR1 = 0.0;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <main+0xac>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0.0;
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <main+0xac>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0.0;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <main+0xac>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4 = 0.0;
 8001e50:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <main+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
	DWT_Start();
 8001e56:	f003 f9f5 	bl	8005244 <DWT_Start>

	// HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Base_Start(&htim2);
 8001e5a:	480f      	ldr	r0, [pc, #60]	@ (8001e98 <main+0xb0>)
 8001e5c:	f011 fe9c 	bl	8013b98 <HAL_TIM_Base_Start>

	timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 8001e60:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <main+0xb0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	80fb      	strh	r3, [r7, #6]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (__HAL_TIM_GET_COUNTER(&htim2) - timer_val >= 20)
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <main+0xb0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b13      	cmp	r3, #19
 8001e74:	d9f8      	bls.n	8001e68 <main+0x80>
		{
			timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <main+0xb0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	80fb      	strh	r3, [r7, #6]
			regelschritt();
 8001e7e:	f000 fb8f 	bl	80025a0 <regelschritt>
			LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8001e82:	2120      	movs	r1, #32
 8001e84:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <main+0xb4>)
 8001e86:	f7ff fa12 	bl	80012ae <LL_GPIO_TogglePin>
		if (__HAL_TIM_GET_COUNTER(&htim2) - timer_val >= 20)
 8001e8a:	e7ed      	b.n	8001e68 <main+0x80>
 8001e8c:	20000dc8 	.word	0x20000dc8
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	40010000 	.word	0x40010000
 8001e98:	20000e10 	.word	0x20000e10
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b094      	sub	sp, #80	@ 0x50
 8001ea4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	2230      	movs	r2, #48	@ 0x30
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f01b fb65 	bl	801d57e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <SystemClock_Config+0xd0>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <SystemClock_Config+0xd0>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed4:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <SystemClock_Config+0xd0>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <SystemClock_Config+0xd4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <SystemClock_Config+0xd4>)
 8001eea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <SystemClock_Config+0xd4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001efc:	230a      	movs	r3, #10
 8001efe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f00:	2301      	movs	r3, #1
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f04:	2310      	movs	r3, #16
 8001f06:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001f14:	2308      	movs	r3, #8
 8001f16:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 64;
 8001f18:	2340      	movs	r3, #64	@ 0x40
 8001f1a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f20:	2304      	movs	r3, #4
 8001f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f24:	f107 0320 	add.w	r3, r7, #32
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f010 fe1b 	bl	8012b64 <HAL_RCC_OscConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001f34:	f003 f9c0 	bl	80052b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f38:	230f      	movs	r3, #15
 8001f3a:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001f44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f48:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001f4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f4e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2102      	movs	r1, #2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f011 f87c 	bl	8013054 <HAL_RCC_ClockConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001f62:	f003 f9a9 	bl	80052b8 <Error_Handler>
	}
}
 8001f66:	bf00      	nop
 8001f68:	3750      	adds	r7, #80	@ 0x50
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000

08001f78 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_CRC_Init+0x20>)
 8001f7e:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <MX_CRC_Init+0x24>)
 8001f80:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_CRC_Init+0x20>)
 8001f84:	f00d f845 	bl	800f012 <HAL_CRC_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8001f8e:	f003 f993 	bl	80052b8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000da0 	.word	0x20000da0
 8001f9c:	40023000 	.word	0x40023000

08001fa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <MX_RTC_Init+0xac>)
 8001fba:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <MX_RTC_Init+0xb0>)
 8001fbc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <MX_RTC_Init+0xac>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <MX_RTC_Init+0xac>)
 8001fc6:	227f      	movs	r2, #127	@ 0x7f
 8001fc8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <MX_RTC_Init+0xac>)
 8001fcc:	22ff      	movs	r2, #255	@ 0xff
 8001fce:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <MX_RTC_Init+0xac>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <MX_RTC_Init+0xac>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <MX_RTC_Init+0xac>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fe2:	481a      	ldr	r0, [pc, #104]	@ (800204c <MX_RTC_Init+0xac>)
 8001fe4:	f011 fb46 	bl	8013674 <HAL_RTC_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_RTC_Init+0x52>
	{
		Error_Handler();
 8001fee:	f003 f963 	bl	80052b8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	*/
	sTime.Hours = 0x0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	480f      	ldr	r0, [pc, #60]	@ (800204c <MX_RTC_Init+0xac>)
 800200e:	f011 fbb4 	bl	801377a <HAL_RTC_SetTime>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 8002018:	f003 f94e 	bl	80052b8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800201c:	2301      	movs	r3, #1
 800201e:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8002020:	2301      	movs	r3, #1
 8002022:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8002024:	2301      	movs	r3, #1
 8002026:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8002028:	2300      	movs	r3, #0
 800202a:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	2201      	movs	r2, #1
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	@ (800204c <MX_RTC_Init+0xac>)
 8002034:	f011 fc3b 	bl	80138ae <HAL_RTC_SetDate>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 800203e:	f003 f93b 	bl	80052b8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000da8 	.word	0x20000da8
 8002050:	40002800 	.word	0x40002800

08002054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b092      	sub	sp, #72	@ 0x48
 8002058:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2220      	movs	r2, #32
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f01b fa7d 	bl	801d57e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002084:	4b45      	ldr	r3, [pc, #276]	@ (800219c <MX_TIM1_Init+0x148>)
 8002086:	4a46      	ldr	r2, [pc, #280]	@ (80021a0 <MX_TIM1_Init+0x14c>)
 8002088:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8;
 800208a:	4b44      	ldr	r3, [pc, #272]	@ (800219c <MX_TIM1_Init+0x148>)
 800208c:	2208      	movs	r2, #8
 800208e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b42      	ldr	r3, [pc, #264]	@ (800219c <MX_TIM1_Init+0x148>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 30259;
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <MX_TIM1_Init+0x148>)
 8002098:	f247 6233 	movw	r2, #30259	@ 0x7633
 800209c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b3f      	ldr	r3, [pc, #252]	@ (800219c <MX_TIM1_Init+0x148>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80020a4:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <MX_TIM1_Init+0x148>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b3c      	ldr	r3, [pc, #240]	@ (800219c <MX_TIM1_Init+0x148>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020b0:	483a      	ldr	r0, [pc, #232]	@ (800219c <MX_TIM1_Init+0x148>)
 80020b2:	f011 fdcb 	bl	8013c4c <HAL_TIM_PWM_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 80020bc:	f003 f8fc 	bl	80052b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020cc:	4619      	mov	r1, r3
 80020ce:	4833      	ldr	r0, [pc, #204]	@ (800219c <MX_TIM1_Init+0x148>)
 80020d0:	f012 fc36 	bl	8014940 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 80020da:	f003 f8ed 	bl	80052b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020de:	2360      	movs	r3, #96	@ 0x60
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ea:	2300      	movs	r3, #0
 80020ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fe:	2200      	movs	r2, #0
 8002100:	4619      	mov	r1, r3
 8002102:	4826      	ldr	r0, [pc, #152]	@ (800219c <MX_TIM1_Init+0x148>)
 8002104:	f011 ff92 	bl	801402c <HAL_TIM_PWM_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM1_Init+0xbe>
	{
		Error_Handler();
 800210e:	f003 f8d3 	bl	80052b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002116:	2204      	movs	r2, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4820      	ldr	r0, [pc, #128]	@ (800219c <MX_TIM1_Init+0x148>)
 800211c:	f011 ff86 	bl	801402c <HAL_TIM_PWM_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0xd6>
	{
		Error_Handler();
 8002126:	f003 f8c7 	bl	80052b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800212a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800212e:	2208      	movs	r2, #8
 8002130:	4619      	mov	r1, r3
 8002132:	481a      	ldr	r0, [pc, #104]	@ (800219c <MX_TIM1_Init+0x148>)
 8002134:	f011 ff7a 	bl	801402c <HAL_TIM_PWM_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM1_Init+0xee>
	{
		Error_Handler();
 800213e:	f003 f8bb 	bl	80052b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002146:	220c      	movs	r2, #12
 8002148:	4619      	mov	r1, r3
 800214a:	4814      	ldr	r0, [pc, #80]	@ (800219c <MX_TIM1_Init+0x148>)
 800214c:	f011 ff6e 	bl	801402c <HAL_TIM_PWM_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0x106>
	{
		Error_Handler();
 8002156:	f003 f8af 	bl	80052b8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002172:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4807      	ldr	r0, [pc, #28]	@ (800219c <MX_TIM1_Init+0x148>)
 800217e:	f012 fc4d 	bl	8014a1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0x138>
	{
		Error_Handler();
 8002188:	f003 f896 	bl	80052b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800218c:	4803      	ldr	r0, [pc, #12]	@ (800219c <MX_TIM1_Init+0x148>)
 800218e:	f003 f96d 	bl	800546c <HAL_TIM_MspPostInit>

}
 8002192:	bf00      	nop
 8002194:	3748      	adds	r7, #72	@ 0x48
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000dc8 	.word	0x20000dc8
 80021a0:	40010000 	.word	0x40010000

080021a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0308 	add.w	r3, r7, #8
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021c0:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <MX_TIM2_Init+0x98>)
 80021c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021c6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <MX_TIM2_Init+0x98>)
 80021ca:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80021ce:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_TIM2_Init+0x98>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MX_TIM2_Init+0x98>)
 80021d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021dc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_TIM2_Init+0x98>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <MX_TIM2_Init+0x98>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ea:	4814      	ldr	r0, [pc, #80]	@ (800223c <MX_TIM2_Init+0x98>)
 80021ec:	f011 fc84 	bl	8013af8 <HAL_TIM_Base_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80021f6:	f003 f85f 	bl	80052b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	4619      	mov	r1, r3
 8002206:	480d      	ldr	r0, [pc, #52]	@ (800223c <MX_TIM2_Init+0x98>)
 8002208:	f011 ffd2 	bl	80141b0 <HAL_TIM_ConfigClockSource>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8002212:	f003 f851 	bl	80052b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221e:	463b      	mov	r3, r7
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	@ (800223c <MX_TIM2_Init+0x98>)
 8002224:	f012 fb8c 	bl	8014940 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 800222e:	f003 f843 	bl	80052b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000e10 	.word	0x20000e10

08002240 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <MX_TIM3_Init+0x94>)
 800225e:	4a1e      	ldr	r2, [pc, #120]	@ (80022d8 <MX_TIM3_Init+0x98>)
 8002260:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002262:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <MX_TIM3_Init+0x94>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <MX_TIM3_Init+0x94>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65536-1;
 800226e:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <MX_TIM3_Init+0x94>)
 8002270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002274:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <MX_TIM3_Init+0x94>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227c:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <MX_TIM3_Init+0x94>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002282:	4814      	ldr	r0, [pc, #80]	@ (80022d4 <MX_TIM3_Init+0x94>)
 8002284:	f011 fc38 	bl	8013af8 <HAL_TIM_Base_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800228e:	f003 f813 	bl	80052b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002296:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	4619      	mov	r1, r3
 800229e:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <MX_TIM3_Init+0x94>)
 80022a0:	f011 ff86 	bl	80141b0 <HAL_TIM_ConfigClockSource>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80022aa:	f003 f805 	bl	80052b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b6:	463b      	mov	r3, r7
 80022b8:	4619      	mov	r1, r3
 80022ba:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <MX_TIM3_Init+0x94>)
 80022bc:	f012 fb40 	bl	8014940 <HAL_TIMEx_MasterConfigSynchronization>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80022c6:	f002 fff7 	bl	80052b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000e58 	.word	0x20000e58
 80022d8:	40000400 	.word	0x40000400

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b21      	ldr	r3, [pc, #132]	@ (800236c <MX_GPIO_Init+0x90>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a20      	ldr	r2, [pc, #128]	@ (800236c <MX_GPIO_Init+0x90>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <MX_GPIO_Init+0x90>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <MX_GPIO_Init+0x90>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a19      	ldr	r2, [pc, #100]	@ (800236c <MX_GPIO_Init+0x90>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <MX_GPIO_Init+0x90>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <MX_GPIO_Init+0x90>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a12      	ldr	r2, [pc, #72]	@ (800236c <MX_GPIO_Init+0x90>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <MX_GPIO_Init+0x90>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <MX_GPIO_Init+0x90>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a0b      	ldr	r2, [pc, #44]	@ (800236c <MX_GPIO_Init+0x90>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b09      	ldr	r3, [pc, #36]	@ (800236c <MX_GPIO_Init+0x90>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2028      	movs	r0, #40	@ 0x28
 8002358:	f00c fe17 	bl	800ef8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800235c:	2028      	movs	r0, #40	@ 0x28
 800235e:	f00c fe30 	bl	800efc2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 1 */
	/* (1) Enable GPIO clock and configures the USART pins *********************/

	/* Enable the peripheral clock of GPIO Port */
	USARTx_GPIO_CLK_ENABLE();
 8002374:	2001      	movs	r0, #1
 8002376:	f7fe fe4f 	bl	8001018 <LL_AHB1_GRP1_EnableClock>

	/* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
	LL_GPIO_SetPinMode(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 800237a:	2202      	movs	r2, #2
 800237c:	2104      	movs	r1, #4
 800237e:	483d      	ldr	r0, [pc, #244]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 8002380:	f7fe fe7a 	bl	8001078 <LL_GPIO_SetPinMode>
	USARTx_SET_TX_GPIO_AF();
 8002384:	2207      	movs	r2, #7
 8002386:	2104      	movs	r1, #4
 8002388:	483a      	ldr	r0, [pc, #232]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 800238a:	f7fe ff44 	bl	8001216 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 800238e:	2202      	movs	r2, #2
 8002390:	2104      	movs	r1, #4
 8002392:	4838      	ldr	r0, [pc, #224]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 8002394:	f7fe fec5 	bl	8001122 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8002398:	2200      	movs	r2, #0
 800239a:	2104      	movs	r1, #4
 800239c:	4835      	ldr	r0, [pc, #212]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 800239e:	f7fe fea8 	bl	80010f2 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(USARTx_TX_GPIO_PORT, USARTx_TX_PIN, LL_GPIO_PULL_UP);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2104      	movs	r1, #4
 80023a6:	4833      	ldr	r0, [pc, #204]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 80023a8:	f7fe fef8 	bl	800119c <LL_GPIO_SetPinPull>

	/* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
	LL_GPIO_SetPinMode(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 80023ac:	2202      	movs	r2, #2
 80023ae:	2108      	movs	r1, #8
 80023b0:	4830      	ldr	r0, [pc, #192]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 80023b2:	f7fe fe61 	bl	8001078 <LL_GPIO_SetPinMode>
	USARTx_SET_RX_GPIO_AF();
 80023b6:	2207      	movs	r2, #7
 80023b8:	2108      	movs	r1, #8
 80023ba:	482e      	ldr	r0, [pc, #184]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 80023bc:	f7fe ff2b 	bl	8001216 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 80023c0:	2202      	movs	r2, #2
 80023c2:	2108      	movs	r1, #8
 80023c4:	482b      	ldr	r0, [pc, #172]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 80023c6:	f7fe feac 	bl	8001122 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2108      	movs	r1, #8
 80023ce:	4829      	ldr	r0, [pc, #164]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 80023d0:	f7fe fe8f 	bl	80010f2 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(USARTx_RX_GPIO_PORT, USARTx_RX_PIN, LL_GPIO_PULL_UP);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2108      	movs	r1, #8
 80023d8:	4826      	ldr	r0, [pc, #152]	@ (8002474 <MX_USART2_UART_Init+0x104>)
 80023da:	f7fe fedf 	bl	800119c <LL_GPIO_SetPinPull>

	/* (2) NVIC Configuration for USART interrupts */
	/*  - Set priority for USARTx_IRQn */
	/*  - Enable USARTx_IRQn */
	NVIC_SetPriority(USARTx_IRQn, 0);
 80023de:	2100      	movs	r1, #0
 80023e0:	2026      	movs	r0, #38	@ 0x26
 80023e2:	f7fe fdef 	bl	8000fc4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USARTx_IRQn);
 80023e6:	2026      	movs	r0, #38	@ 0x26
 80023e8:	f7fe fdce 	bl	8000f88 <__NVIC_EnableIRQ>

	/* (3) Enable USART peripheral clock and clock source ***********************/
	USARTx_CLK_ENABLE();
 80023ec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80023f0:	f7fe fe2a 	bl	8001048 <LL_APB1_GRP1_EnableClock>
	/* Disable USART prior modifying configuration registers */
	/* Note: Commented as corresponding to Reset value */
	// LL_USART_Disable(USARTx_INSTANCE);

	/* TX/RX direction */
	LL_USART_SetTransferDirection(USARTx_INSTANCE, LL_USART_DIRECTION_TX_RX);
 80023f4:	210c      	movs	r1, #12
 80023f6:	4820      	ldr	r0, [pc, #128]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 80023f8:	f7fe ff82 	bl	8001300 <LL_USART_SetTransferDirection>

	/* 8 data bit, 1 start bit, 1 stop bit, no parity */
	LL_USART_ConfigCharacter(USARTx_INSTANCE, LL_USART_DATAWIDTH_8B, LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 80023fc:	2300      	movs	r3, #0
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	481d      	ldr	r0, [pc, #116]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 8002404:	f7fe ffa2 	bl	800134c <LL_USART_ConfigCharacter>
	/* Ex :
	  Periphclk = LL_RCC_GetUSARTClockFreq(Instance); or LL_RCC_GetUARTClockFreq(Instance); depending on USART/UART instance

	  In this example, Peripheral Clock is expected to be equal to 100000000/APB_Div Hz => equal to SystemCoreClock/APB_Div
	*/
	LL_USART_SetBaudRate(USARTx_INSTANCE, SystemCoreClock/APB_Div, LL_USART_OVERSAMPLING_16, 115200);
 8002408:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <MX_USART2_UART_Init+0x10c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0859      	lsrs	r1, r3, #1
 800240e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002412:	2200      	movs	r2, #0
 8002414:	4818      	ldr	r0, [pc, #96]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 8002416:	f7fe ffb9 	bl	800138c <LL_USART_SetBaudRate>

	/* (5) Enable USART *********************************************************/
	LL_USART_Enable(USARTx_INSTANCE);
 800241a:	4817      	ldr	r0, [pc, #92]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 800241c:	f7fe ff60 	bl	80012e0 <LL_USART_Enable>

	/* Enable RXNE and Error interrupts */
	LL_USART_EnableIT_RXNE(USARTx_INSTANCE);
 8002420:	4815      	ldr	r0, [pc, #84]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 8002422:	f7ff f9e1 	bl	80017e8 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USARTx_INSTANCE);
 8002426:	4814      	ldr	r0, [pc, #80]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 8002428:	f7ff fa01 	bl	800182e <LL_USART_EnableIT_ERROR>

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800242c:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 800242e:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <MX_USART2_UART_Init+0x108>)
 8002430:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002432:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 8002434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002438:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002446:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800245e:	4808      	ldr	r0, [pc, #32]	@ (8002480 <MX_USART2_UART_Init+0x110>)
 8002460:	f012 fb42 	bl	8014ae8 <HAL_UART_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_USART2_UART_Init+0xfe>
	{
	Error_Handler();
 800246a:	f002 ff25 	bl	80052b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40020000 	.word	0x40020000
 8002478:	40004400 	.word	0x40004400
 800247c:	2000013c 	.word	0x2000013c
 8002480:	20001524 	.word	0x20001524

08002484 <USART_CharReception_Callback>:


void USART_CharReception_Callback(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
__IO uint32_t received_char;

  /* Auslesen des Zeichens. RXNE flag wird gecleared durch das lesen des DR Registers */
  received_char = LL_USART_ReceiveData8(USARTx_INSTANCE);
 800248a:	483c      	ldr	r0, [pc, #240]	@ (800257c <USART_CharReception_Callback+0xf8>)
 800248c:	f7ff f9f2 	bl	8001874 <LL_USART_ReceiveData8>
 8002490:	4603      	mov	r3, r0
 8002492:	607b      	str	r3, [r7, #4]

  if (received_char == '\r') {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b0d      	cmp	r3, #13
 8002498:	d159      	bne.n	800254e <USART_CharReception_Callback+0xca>
	  rx_index = 0;
 800249a:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <USART_CharReception_Callback+0xfc>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]

	  joystick_schub = (100 * ((rx_buffer[0] - '0') - 1) + 10 * (rx_buffer[1] - '0') + (rx_buffer[2] - '0'));
 80024a0:	4b38      	ldr	r3, [pc, #224]	@ (8002584 <USART_CharReception_Callback+0x100>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	461a      	mov	r2, r3
 80024ac:	0091      	lsls	r1, r2, #2
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <USART_CharReception_Callback+0x100>)
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	4619      	mov	r1, r3
 80024be:	0089      	lsls	r1, r1, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002584 <USART_CharReception_Callback+0x100>)
 80024cc:	789b      	ldrb	r3, [r3, #2]
 80024ce:	4413      	add	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	3b34      	subs	r3, #52	@ 0x34
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002588 <USART_CharReception_Callback+0x104>)
 80024d8:	701a      	strb	r2, [r3, #0]
	  joystick_nicken = ((100 * (rx_buffer[3] - '0') + 10 * (rx_buffer[4] - '0') + (rx_buffer[5] - '0')) - 500);
 80024da:	4b2a      	ldr	r3, [pc, #168]	@ (8002584 <USART_CharReception_Callback+0x100>)
 80024dc:	78db      	ldrb	r3, [r3, #3]
 80024de:	3b30      	subs	r3, #48	@ 0x30
 80024e0:	2264      	movs	r2, #100	@ 0x64
 80024e2:	fb02 f103 	mul.w	r1, r2, r3
 80024e6:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <USART_CharReception_Callback+0x100>)
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	18ca      	adds	r2, r1, r3
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <USART_CharReception_Callback+0x100>)
 80024fa:	795b      	ldrb	r3, [r3, #5]
 80024fc:	3b30      	subs	r3, #48	@ 0x30
 80024fe:	4413      	add	r3, r2
 8002500:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002504:	4a21      	ldr	r2, [pc, #132]	@ (800258c <USART_CharReception_Callback+0x108>)
 8002506:	6013      	str	r3, [r2, #0]
	  joystick_rollen = ((100 * (rx_buffer[6] - '0') + 10 * (rx_buffer[7] - '0') + (rx_buffer[8] - '0')) - 500);
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <USART_CharReception_Callback+0x100>)
 800250a:	799b      	ldrb	r3, [r3, #6]
 800250c:	3b30      	subs	r3, #48	@ 0x30
 800250e:	2264      	movs	r2, #100	@ 0x64
 8002510:	fb02 f103 	mul.w	r1, r2, r3
 8002514:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <USART_CharReception_Callback+0x100>)
 8002516:	79db      	ldrb	r3, [r3, #7]
 8002518:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	18ca      	adds	r2, r1, r3
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <USART_CharReception_Callback+0x100>)
 8002528:	7a1b      	ldrb	r3, [r3, #8]
 800252a:	3b30      	subs	r3, #48	@ 0x30
 800252c:	4413      	add	r3, r2
 800252e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002532:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <USART_CharReception_Callback+0x10c>)
 8002534:	6013      	str	r3, [r2, #0]
	  regleran = rx_buffer[9] - '0';
 8002536:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <USART_CharReception_Callback+0x100>)
 8002538:	7a5b      	ldrb	r3, [r3, #9]
 800253a:	3b30      	subs	r3, #48	@ 0x30
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <USART_CharReception_Callback+0x110>)
 8002540:	701a      	strb	r2, [r3, #0]
	  schubnur = rx_buffer[10] - '0';
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <USART_CharReception_Callback+0x100>)
 8002544:	7a9b      	ldrb	r3, [r3, #10]
 8002546:	3b30      	subs	r3, #48	@ 0x30
 8002548:	4a13      	ldr	r2, [pc, #76]	@ (8002598 <USART_CharReception_Callback+0x114>)
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e00c      	b.n	8002568 <USART_CharReception_Callback+0xe4>
  } else {
	  rx_buffer[rx_index] = received_char;
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <USART_CharReception_Callback+0xfc>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	b2c9      	uxtb	r1, r1
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <USART_CharReception_Callback+0x100>)
 800255a:	5499      	strb	r1, [r3, r2]

	  rx_index += 1;
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <USART_CharReception_Callback+0xfc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <USART_CharReception_Callback+0xfc>)
 8002566:	701a      	strb	r2, [r3, #0]
  }

  LL_USART_TransmitData8(USARTx_INSTANCE, received_char);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	4803      	ldr	r0, [pc, #12]	@ (800257c <USART_CharReception_Callback+0xf8>)
 8002570:	f7ff f98d 	bl	800188e <LL_USART_TransmitData8>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40004400 	.word	0x40004400
 8002580:	20000ef0 	.word	0x20000ef0
 8002584:	20000ed0 	.word	0x20000ed0
 8002588:	20000ec4 	.word	0x20000ec4
 800258c:	20000ec8 	.word	0x20000ec8
 8002590:	20000ecc 	.word	0x20000ecc
 8002594:	20000ef1 	.word	0x20000ef1
 8002598:	20000138 	.word	0x20000138
 800259c:	00000000 	.word	0x00000000

080025a0 <regelschritt>:

// Regler
void regelschritt(void) {
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80025a8:	af00      	add	r7, sp, #0
	READ_ACCELEROMETER();
 80025aa:	f002 fd9f 	bl	80050ec <READ_ACCELEROMETER>
	READ_GYRO();
 80025ae:	f002 fdd3 	bl	8005158 <READ_GYRO>
	READ_MAG();
 80025b2:	f002 fe07 	bl	80051c4 <READ_MAG>

	/* Convert angular velocity from [md/s] to [deg/s] */
	// Gieren (Uhrzeigersinn)
	data_in.gyro[0] = (float) GyrValue.x * FROM_MDPS_TO_DPS;
 80025b6:	4bbc      	ldr	r3, [pc, #752]	@ (80028a8 <regelschritt+0x308>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80028ac <regelschritt+0x30c>
 80025c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ca:	4bb9      	ldr	r3, [pc, #740]	@ (80028b0 <regelschritt+0x310>)
 80025cc:	edc3 7a06 	vstr	s15, [r3, #24]
	// Nicken (Nase nach unten ist negatives nicken)
	data_in.gyro[1] = (float) GyrValue.y * FROM_MDPS_TO_DPS;
 80025d0:	4bb5      	ldr	r3, [pc, #724]	@ (80028a8 <regelschritt+0x308>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025dc:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80028ac <regelschritt+0x30c>
 80025e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e4:	4bb2      	ldr	r3, [pc, #712]	@ (80028b0 <regelschritt+0x310>)
 80025e6:	edc3 7a07 	vstr	s15, [r3, #28]
	// Rollen (Mit Blick von hinten im Uhrzeigersinn)
	data_in.gyro[2] = (float) GyrValue.z * FROM_MDPS_TO_DPS;
 80025ea:	4baf      	ldr	r3, [pc, #700]	@ (80028a8 <regelschritt+0x308>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f6:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80028ac <regelschritt+0x30c>
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fe:	4bac      	ldr	r3, [pc, #688]	@ (80028b0 <regelschritt+0x310>)
 8002600:	edc3 7a08 	vstr	s15, [r3, #32]

	// Norden in g
	data_in.acc[0] = (float) AccValue.x * FROM_MG_TO_G;
 8002604:	4bab      	ldr	r3, [pc, #684]	@ (80028b4 <regelschritt+0x314>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002610:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80028ac <regelschritt+0x30c>
 8002614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002618:	4ba5      	ldr	r3, [pc, #660]	@ (80028b0 <regelschritt+0x310>)
 800261a:	edc3 7a03 	vstr	s15, [r3, #12]
	// Osten in g
	data_in.acc[1] = (float) AccValue.y * FROM_MG_TO_G;
 800261e:	4ba5      	ldr	r3, [pc, #660]	@ (80028b4 <regelschritt+0x314>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80028ac <regelschritt+0x30c>
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	4b9f      	ldr	r3, [pc, #636]	@ (80028b0 <regelschritt+0x310>)
 8002634:	edc3 7a04 	vstr	s15, [r3, #16]
	// Oben in g
	data_in.acc[2] = (float) AccValue.z * FROM_MG_TO_G;
 8002638:	4b9e      	ldr	r3, [pc, #632]	@ (80028b4 <regelschritt+0x314>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002644:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80028ac <regelschritt+0x30c>
 8002648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264c:	4b98      	ldr	r3, [pc, #608]	@ (80028b0 <regelschritt+0x310>)
 800264e:	edc3 7a05 	vstr	s15, [r3, #20]

	data_in.mag[0] = (float) MagValue.x * FROM_MGAUSS_TO_UT50;
 8002652:	4b99      	ldr	r3, [pc, #612]	@ (80028b8 <regelschritt+0x318>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265e:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80028bc <regelschritt+0x31c>
 8002662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002666:	4b92      	ldr	r3, [pc, #584]	@ (80028b0 <regelschritt+0x310>)
 8002668:	edc3 7a00 	vstr	s15, [r3]
	data_in.mag[1] = (float) MagValue.y * FROM_MGAUSS_TO_UT50;
 800266c:	4b92      	ldr	r3, [pc, #584]	@ (80028b8 <regelschritt+0x318>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002678:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80028bc <regelschritt+0x31c>
 800267c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002680:	4b8b      	ldr	r3, [pc, #556]	@ (80028b0 <regelschritt+0x310>)
 8002682:	edc3 7a01 	vstr	s15, [r3, #4]
	data_in.mag[2] = (float) MagValue.z * FROM_MGAUSS_TO_UT50;
 8002686:	4b8c      	ldr	r3, [pc, #560]	@ (80028b8 <regelschritt+0x318>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002692:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80028bc <regelschritt+0x31c>
 8002696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800269a:	4b85      	ldr	r3, [pc, #532]	@ (80028b0 <regelschritt+0x310>)
 800269c:	edc3 7a02 	vstr	s15, [r3, #8]

	delta_t_s = DWT_Stop() * 1e-6f;
 80026a0:	f002 fde2 	bl	8005268 <DWT_Stop>
 80026a4:	ee07 0a90 	vmov	s15, r0
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80028c0 <regelschritt+0x320>
 80026b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b4:	ee17 0a90 	vmov	r0, s15
 80026b8:	f7fd ff4e 	bl	8000558 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4980      	ldr	r1, [pc, #512]	@ (80028c4 <regelschritt+0x324>)
 80026c2:	e9c1 2300 	strd	r2, r3, [r1]
	DWT_Start();
 80026c6:	f002 fdbd 	bl	8005244 <DWT_Start>

	MotionFX_manager_run(pdata_in, pdata_out, 0.01f);
 80026ca:	4b7f      	ldr	r3, [pc, #508]	@ (80028c8 <regelschritt+0x328>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b7f      	ldr	r3, [pc, #508]	@ (80028cc <regelschritt+0x32c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80028d0 <regelschritt+0x330>
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f013 fa77 	bl	8015bcc <MotionFX_manager_run>

	sollgeschwindigkeit.norden = joystick_nicken / 50.0f;
 80026de:	4b7d      	ldr	r3, [pc, #500]	@ (80028d4 <regelschritt+0x334>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80028d8 <regelschritt+0x338>
 80026ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026f2:	ee16 0a90 	vmov	r0, s13
 80026f6:	f7fd ff2f 	bl	8000558 <__aeabi_f2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4977      	ldr	r1, [pc, #476]	@ (80028dc <regelschritt+0x33c>)
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
	sollgeschwindigkeit.osten = joystick_rollen / 50.0f;
 8002704:	4b76      	ldr	r3, [pc, #472]	@ (80028e0 <regelschritt+0x340>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002710:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80028d8 <regelschritt+0x338>
 8002714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002718:	ee16 0a90 	vmov	r0, s13
 800271c:	f7fd ff1c 	bl	8000558 <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	496d      	ldr	r1, [pc, #436]	@ (80028dc <regelschritt+0x33c>)
 8002726:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sollgeschwindigkeit.unten = -joystick_schub / 50.0f;
 800272a:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <regelschritt+0x344>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	425b      	negs	r3, r3
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002738:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80028d8 <regelschritt+0x338>
 800273c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002740:	ee16 0a90 	vmov	r0, s13
 8002744:	f7fd ff08 	bl	8000558 <__aeabi_f2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4963      	ldr	r1, [pc, #396]	@ (80028dc <regelschritt+0x33c>)
 800274e:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// [m/s]
	geschwindigkeit[NORDEN] += delta_t_s * pdata_out->linear_acceleration[SENSOR_NORDEN] / 9.81f;
 8002752:	4b65      	ldr	r3, [pc, #404]	@ (80028e8 <regelschritt+0x348>)
 8002754:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002758:	4b5c      	ldr	r3, [pc, #368]	@ (80028cc <regelschritt+0x32c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fefa 	bl	8000558 <__aeabi_f2d>
 8002764:	4b57      	ldr	r3, [pc, #348]	@ (80028c4 <regelschritt+0x324>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fd ff4d 	bl	8000608 <__aeabi_dmul>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	a34a      	add	r3, pc, #296	@ (adr r3, 80028a0 <regelschritt+0x300>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fe f86e 	bl	800085c <__aeabi_ddiv>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4620      	mov	r0, r4
 8002786:	4629      	mov	r1, r5
 8002788:	f7fd fd88 	bl	800029c <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <regelschritt+0x348>)
 8002796:	e9c3 0100 	strd	r0, r1, [r3]
	// [m/s]
	geschwindigkeit[OSTEN] += delta_t_s * pdata_out->linear_acceleration[SENSOR_WESTEN] / 9.81f;
 800279a:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <regelschritt+0x348>)
 800279c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80027a0:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <regelschritt+0x32c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fed6 	bl	8000558 <__aeabi_f2d>
 80027ac:	4b45      	ldr	r3, [pc, #276]	@ (80028c4 <regelschritt+0x324>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff29 	bl	8000608 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	a338      	add	r3, pc, #224	@ (adr r3, 80028a0 <regelschritt+0x300>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fe f84a 	bl	800085c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4620      	mov	r0, r4
 80027ce:	4629      	mov	r1, r5
 80027d0:	f7fd fd64 	bl	800029c <__adddf3>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <regelschritt+0x348>)
 80027de:	e9c3 0102 	strd	r0, r1, [r3, #8]
	// [m/s]
	geschwindigkeit[UNTEN] += delta_t_s * pdata_out->linear_acceleration[SENSOR_OBEN] / 9.81f;
 80027e2:	4b41      	ldr	r3, [pc, #260]	@ (80028e8 <regelschritt+0x348>)
 80027e4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80027e8:	4b38      	ldr	r3, [pc, #224]	@ (80028cc <regelschritt+0x32c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd feb2 	bl	8000558 <__aeabi_f2d>
 80027f4:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <regelschritt+0x324>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd ff05 	bl	8000608 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	a326      	add	r3, pc, #152	@ (adr r3, 80028a0 <regelschritt+0x300>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fe f826 	bl	800085c <__aeabi_ddiv>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	f7fd fd40 	bl	800029c <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	4b30      	ldr	r3, [pc, #192]	@ (80028e8 <regelschritt+0x348>)
 8002826:	e9c3 0104 	strd	r0, r1, [r3, #16]

	drehlage.w = pdata_out->quaternion[QW];
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <regelschritt+0x32c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe91 	bl	8000558 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	492c      	ldr	r1, [pc, #176]	@ (80028ec <regelschritt+0x34c>)
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
	drehlage.x = pdata_out->quaternion[QX];
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <regelschritt+0x32c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe86 	bl	8000558 <__aeabi_f2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4926      	ldr	r1, [pc, #152]	@ (80028ec <regelschritt+0x34c>)
 8002852:	e9c1 2302 	strd	r2, r3, [r1, #8]
	drehlage.y = pdata_out->quaternion[QY];
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <regelschritt+0x32c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe7b 	bl	8000558 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4921      	ldr	r1, [pc, #132]	@ (80028ec <regelschritt+0x34c>)
 8002868:	e9c1 2304 	strd	r2, r3, [r1, #16]
	drehlage.z = pdata_out->quaternion[QZ];
 800286c:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <regelschritt+0x32c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe70 	bl	8000558 <__aeabi_f2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	491b      	ldr	r1, [pc, #108]	@ (80028ec <regelschritt+0x34c>)
 800287e:	e9c1 2306 	strd	r2, r3, [r1, #24]
//			0.0f * pdata_out->rotation[0] * 3.14f / 180.0f,
//			-pdata_out->rotation[1] * 3.14f / 180.0f,
//			pdata_out->rotation[2] * 3.14f / 180.0f
//	);

	if (drehlage.x != drehlage.x) {
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <regelschritt+0x34c>)
 8002884:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <regelschritt+0x34c>)
 800288a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800288e:	f7fe f923 	bl	8000ad8 <__aeabi_dcmpeq>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d12b      	bne.n	80028f0 <regelschritt+0x350>
		LED_Off();
 8002898:	f002 fcca 	bl	8005230 <LED_Off>
 800289c:	e02c      	b.n	80028f8 <regelschritt+0x358>
 800289e:	bf00      	nop
 80028a0:	60000000 	.word	0x60000000
 80028a4:	40239eb8 	.word	0x40239eb8
 80028a8:	20000eac 	.word	0x20000eac
 80028ac:	3a83126f 	.word	0x3a83126f
 80028b0:	20000ef4 	.word	0x20000ef4
 80028b4:	20000ea0 	.word	0x20000ea0
 80028b8:	20000eb8 	.word	0x20000eb8
 80028bc:	3b03126f 	.word	0x3b03126f
 80028c0:	358637bd 	.word	0x358637bd
 80028c4:	200010f8 	.word	0x200010f8
 80028c8:	20000010 	.word	0x20000010
 80028cc:	20000014 	.word	0x20000014
 80028d0:	3c23d70a 	.word	0x3c23d70a
 80028d4:	20000ec8 	.word	0x20000ec8
 80028d8:	42480000 	.word	0x42480000
 80028dc:	20001088 	.word	0x20001088
 80028e0:	20000ecc 	.word	0x20000ecc
 80028e4:	20000ec4 	.word	0x20000ec4
 80028e8:	20000f70 	.word	0x20000f70
 80028ec:	20000f88 	.word	0x20000f88
	} else {
		LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80028f0:	2120      	movs	r1, #32
 80028f2:	48a9      	ldr	r0, [pc, #676]	@ (8002b98 <regelschritt+0x5f8>)
 80028f4:	f7fe fcdb 	bl	80012ae <LL_GPIO_TogglePin>
	}

	// Controller
	// Rollwinkel [deg/s]
	drehrate.rollen = (pdata_out->rotation[2] - drehlage_tminus1.rollen) / delta_t_s;
 80028f8:	4ba8      	ldr	r3, [pc, #672]	@ (8002b9c <regelschritt+0x5fc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe2a 	bl	8000558 <__aeabi_f2d>
 8002904:	4ba6      	ldr	r3, [pc, #664]	@ (8002ba0 <regelschritt+0x600>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd fcc5 	bl	8000298 <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4ba3      	ldr	r3, [pc, #652]	@ (8002ba4 <regelschritt+0x604>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fd ff9e 	bl	800085c <__aeabi_ddiv>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	4b9f      	ldr	r3, [pc, #636]	@ (8002ba8 <regelschritt+0x608>)
 800292a:	e9c3 0100 	strd	r0, r1, [r3]
	// Nickwinkel [deg/s]
	drehrate.nicken = (pdata_out->rotation[1] - drehlage_tminus1.nicken) / delta_t_s;
 800292e:	4b9b      	ldr	r3, [pc, #620]	@ (8002b9c <regelschritt+0x5fc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fe0f 	bl	8000558 <__aeabi_f2d>
 800293a:	4b99      	ldr	r3, [pc, #612]	@ (8002ba0 <regelschritt+0x600>)
 800293c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002940:	f7fd fcaa 	bl	8000298 <__aeabi_dsub>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	4b95      	ldr	r3, [pc, #596]	@ (8002ba4 <regelschritt+0x604>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fd ff83 	bl	800085c <__aeabi_ddiv>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	4b92      	ldr	r3, [pc, #584]	@ (8002ba8 <regelschritt+0x608>)
 8002960:	e9c3 0102 	strd	r0, r1, [r3, #8]
	// Gierwinkel [deg/s]
	drehrate.gieren = 0.0f * data_in.gyro[0];
 8002964:	4b91      	ldr	r3, [pc, #580]	@ (8002bac <regelschritt+0x60c>)
 8002966:	edd3 7a06 	vldr	s15, [r3, #24]
 800296a:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8002bb0 <regelschritt+0x610>
 800296e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002972:	ee17 0a90 	vmov	r0, s15
 8002976:	f7fd fdef 	bl	8000558 <__aeabi_f2d>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	498a      	ldr	r1, [pc, #552]	@ (8002ba8 <regelschritt+0x608>)
 8002980:	e9c1 2304 	strd	r2, r3, [r1, #16]

	drehlage_tminus1.rollen = pdata_out->rotation[2];
 8002984:	4b85      	ldr	r3, [pc, #532]	@ (8002b9c <regelschritt+0x5fc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fde4 	bl	8000558 <__aeabi_f2d>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4982      	ldr	r1, [pc, #520]	@ (8002ba0 <regelschritt+0x600>)
 8002996:	e9c1 2300 	strd	r2, r3, [r1]
	drehlage_tminus1.nicken = pdata_out->rotation[1];
 800299a:	4b80      	ldr	r3, [pc, #512]	@ (8002b9c <regelschritt+0x5fc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdd9 	bl	8000558 <__aeabi_f2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	497d      	ldr	r1, [pc, #500]	@ (8002ba0 <regelschritt+0x600>)
 80029ac:	e9c1 2302 	strd	r2, r3, [r1, #8]

	omega_dot.rollen = 0.0f; // (drehrate.rollen - drehgeschwindigkeit_tminus1.rollen) / delta_t_s;
 80029b0:	4980      	ldr	r1, [pc, #512]	@ (8002bb4 <regelschritt+0x614>)
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9c1 2300 	strd	r2, r3, [r1]
	omega_dot.nicken = 0.0f; // (drehrate.nicken - drehgeschwindigkeit_tminus1.nicken) / delta_t_s;
 80029be:	497d      	ldr	r1, [pc, #500]	@ (8002bb4 <regelschritt+0x614>)
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	omega_dot.gieren = 0.0f;
 80029cc:	4979      	ldr	r1, [pc, #484]	@ (8002bb4 <regelschritt+0x614>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c1 2304 	strd	r2, r3, [r1, #16]

	drehgeschwindigkeit_tminus1.rollen = drehrate.rollen;
 80029da:	4b73      	ldr	r3, [pc, #460]	@ (8002ba8 <regelschritt+0x608>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	4975      	ldr	r1, [pc, #468]	@ (8002bb8 <regelschritt+0x618>)
 80029e2:	e9c1 2300 	strd	r2, r3, [r1]
	drehgeschwindigkeit_tminus1.nicken = drehrate.nicken;
 80029e6:	4b70      	ldr	r3, [pc, #448]	@ (8002ba8 <regelschritt+0x608>)
 80029e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029ec:	4972      	ldr	r1, [pc, #456]	@ (8002bb8 <regelschritt+0x618>)
 80029ee:	e9c1 2302 	strd	r2, r3, [r1, #8]


	// Geschwindigkeitsregler

	// m/s
	geschwindigkeitsfehler[UNTEN] = 0.0f; // sollgeschwindigkeit.unten - geschwindigkeit[UNTEN];
 80029f2:	4972      	ldr	r1, [pc, #456]	@ (8002bbc <regelschritt+0x61c>)
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9c1 2304 	strd	r2, r3, [r1, #16]

	sollschub[UNTEN] = vel_p_gain[UNTEN] * geschwindigkeitsfehler[UNTEN] - vel_d_gain[UNTEN] * beschleunigung[UNTEN] + masse * (acc_setpoint[UNTEN] - gravitation_constant) + thr_int[UNTEN];
 8002a00:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc0 <regelschritt+0x620>)
 8002a02:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a06:	4b6d      	ldr	r3, [pc, #436]	@ (8002bbc <regelschritt+0x61c>)
 8002a08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a0c:	f7fd fdfc 	bl	8000608 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4614      	mov	r4, r2
 8002a16:	461d      	mov	r5, r3
 8002a18:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc4 <regelschritt+0x624>)
 8002a1a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc8 <regelschritt+0x628>)
 8002a20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a24:	f7fd fdf0 	bl	8000608 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f7fd fc32 	bl	8000298 <__aeabi_dsub>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4b63      	ldr	r3, [pc, #396]	@ (8002bcc <regelschritt+0x62c>)
 8002a3e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a42:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <regelschritt+0x630>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fc26 	bl	8000298 <__aeabi_dsub>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd4 <regelschritt+0x634>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fdd5 	bl	8000608 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fd fc19 	bl	800029c <__adddf3>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4b59      	ldr	r3, [pc, #356]	@ (8002bd8 <regelschritt+0x638>)
 8002a74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a78:	f7fd fc10 	bl	800029c <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	4b55      	ldr	r3, [pc, #340]	@ (8002bdc <regelschritt+0x63c>)
 8002a86:	e9c3 0104 	strd	r0, r1, [r3, #16]

	double uMax = -0.4;
 8002a8a:	a341      	add	r3, pc, #260	@ (adr r3, 8002b90 <regelschritt+0x5f0>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	double uMin = -16 * gravitation_constant;
 8002a94:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd0 <regelschritt+0x630>)
 8002a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <regelschritt+0x640>)
 8002aa0:	f7fd fdb2 	bl	8000608 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208

	// sollschub[2] = thrust_z;
	if (sollschub[UNTEN] < uMin) {
 8002aac:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <regelschritt+0x63c>)
 8002aae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ab2:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8002ab6:	f7fe f837 	bl	8000b28 <__aeabi_dcmpgt>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <regelschritt+0x52a>
		sollschub[UNTEN] = uMin;
 8002ac0:	4946      	ldr	r1, [pc, #280]	@ (8002bdc <regelschritt+0x63c>)
 8002ac2:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8002ac6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	if (sollschub[UNTEN] > uMax) {
 8002aca:	4b44      	ldr	r3, [pc, #272]	@ (8002bdc <regelschritt+0x63c>)
 8002acc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ad0:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8002ad4:	f7fe f80a 	bl	8000aec <__aeabi_dcmplt>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <regelschritt+0x548>
		sollschub[UNTEN] = uMax;
 8002ade:	493f      	ldr	r1, [pc, #252]	@ (8002bdc <regelschritt+0x63c>)
 8002ae0:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8002ae4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}

	// XY Velocity Control (Thrust in NE-direction)
	geschwindigkeitsfehler[NORDEN] = sollgeschwindigkeit.norden - geschwindigkeit[NORDEN];
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8002be4 <regelschritt+0x644>)
 8002aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aee:	4b3e      	ldr	r3, [pc, #248]	@ (8002be8 <regelschritt+0x648>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fbd0 	bl	8000298 <__aeabi_dsub>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <regelschritt+0x61c>)
 8002b02:	e9c3 0100 	strd	r0, r1, [r3]
	geschwindigkeitsfehler[OSTEN] = sollgeschwindigkeit.osten - geschwindigkeit[OSTEN];
 8002b06:	4b37      	ldr	r3, [pc, #220]	@ (8002be4 <regelschritt+0x644>)
 8002b08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <regelschritt+0x648>)
 8002b0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b12:	f7fd fbc1 	bl	8000298 <__aeabi_dsub>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <regelschritt+0x61c>)
 8002b20:	e9c3 0102 	strd	r0, r1, [r3, #8]
	sollschub[X] = (
		vel_p_gain[NORDEN] * geschwindigkeitsfehler[NORDEN] -
 8002b24:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <regelschritt+0x620>)
 8002b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <regelschritt+0x61c>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fd6a 	bl	8000608 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
		vel_d_gain[NORDEN] *  beschleunigung[NORDEN] +
 8002b3c:	4b21      	ldr	r3, [pc, #132]	@ (8002bc4 <regelschritt+0x624>)
 8002b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b42:	4b21      	ldr	r3, [pc, #132]	@ (8002bc8 <regelschritt+0x628>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fd5e 	bl	8000608 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
		vel_p_gain[NORDEN] * geschwindigkeitsfehler[NORDEN] -
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fba0 	bl	8000298 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	461d      	mov	r5, r3
		masse * acc_setpoint[NORDEN] +
 8002b60:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <regelschritt+0x62c>)
 8002b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b66:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <regelschritt+0x634>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f7fd fd4c 	bl	8000608 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
		vel_d_gain[NORDEN] *  beschleunigung[NORDEN] +
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb90 	bl	800029c <__adddf3>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
		thr_int[NORDEN]
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <regelschritt+0x638>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
		masse * acc_setpoint[NORDEN] +
 8002b8a:	f7fd fb87 	bl	800029c <__adddf3>
 8002b8e:	e02d      	b.n	8002bec <regelschritt+0x64c>
 8002b90:	9999999a 	.word	0x9999999a
 8002b94:	bfd99999 	.word	0xbfd99999
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	20000014 	.word	0x20000014
 8002ba0:	20001100 	.word	0x20001100
 8002ba4:	200010f8 	.word	0x200010f8
 8002ba8:	20001118 	.word	0x20001118
 8002bac:	20000ef4 	.word	0x20000ef4
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	20001148 	.word	0x20001148
 8002bb8:	20001130 	.word	0x20001130
 8002bbc:	20001218 	.word	0x20001218
 8002bc0:	200000a8 	.word	0x200000a8
 8002bc4:	200000c0 	.word	0x200000c0
 8002bc8:	20000f58 	.word	0x20000f58
 8002bcc:	200010e0 	.word	0x200010e0
 8002bd0:	20000018 	.word	0x20000018
 8002bd4:	20000020 	.word	0x20000020
 8002bd8:	20001050 	.word	0x20001050
 8002bdc:	200010a8 	.word	0x200010a8
 8002be0:	c0300000 	.word	0xc0300000
 8002be4:	20001088 	.word	0x20001088
 8002be8:	20000f70 	.word	0x20000f70
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
	sollschub[X] = (
 8002bf4:	4bc0      	ldr	r3, [pc, #768]	@ (8002ef8 <regelschritt+0x958>)
 8002bf6:	e9c3 0100 	strd	r0, r1, [r3]
	);
	sollschub[Y] = (
		vel_p_gain[OSTEN] * geschwindigkeitsfehler[OSTEN] -
 8002bfa:	4bc0      	ldr	r3, [pc, #768]	@ (8002efc <regelschritt+0x95c>)
 8002bfc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c00:	4bbf      	ldr	r3, [pc, #764]	@ (8002f00 <regelschritt+0x960>)
 8002c02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c06:	f7fd fcff 	bl	8000608 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4614      	mov	r4, r2
 8002c10:	461d      	mov	r5, r3
		vel_d_gain[OSTEN] *  beschleunigung[OSTEN] +
 8002c12:	4bbc      	ldr	r3, [pc, #752]	@ (8002f04 <regelschritt+0x964>)
 8002c14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c18:	4bbb      	ldr	r3, [pc, #748]	@ (8002f08 <regelschritt+0x968>)
 8002c1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c1e:	f7fd fcf3 	bl	8000608 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
		vel_p_gain[OSTEN] * geschwindigkeitsfehler[OSTEN] -
 8002c26:	4620      	mov	r0, r4
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7fd fb35 	bl	8000298 <__aeabi_dsub>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
		masse * acc_setpoint[OSTEN] +
 8002c36:	4bb5      	ldr	r3, [pc, #724]	@ (8002f0c <regelschritt+0x96c>)
 8002c38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c3c:	4bb4      	ldr	r3, [pc, #720]	@ (8002f10 <regelschritt+0x970>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fce1 	bl	8000608 <__aeabi_dmul>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
		vel_d_gain[OSTEN] *  beschleunigung[OSTEN] +
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7fd fb25 	bl	800029c <__adddf3>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
		thr_int[OSTEN]
 8002c5a:	4bae      	ldr	r3, [pc, #696]	@ (8002f14 <regelschritt+0x974>)
 8002c5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
		masse * acc_setpoint[OSTEN] +
 8002c60:	f7fd fb1c 	bl	800029c <__adddf3>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
	sollschub[Y] = (
 8002c6c:	4ba2      	ldr	r3, [pc, #648]	@ (8002ef8 <regelschritt+0x958>)
 8002c6e:	e9c3 0102 	strd	r0, r1, [r3, #8]
	);

	double thrust_max_xy_tilt = (
		abs(sollschub[UNTEN]) * tan(tiltMax)
 8002c72:	4ba1      	ldr	r3, [pc, #644]	@ (8002ef8 <regelschritt+0x958>)
 8002c74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ff74 	bl	8000b68 <__aeabi_d2iz>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bfb8      	it	lt
 8002c86:	425b      	neglt	r3, r3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc53 	bl	8000534 <__aeabi_i2d>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
 8002c92:	4ba1      	ldr	r3, [pc, #644]	@ (8002f18 <regelschritt+0x978>)
 8002c94:	ed93 7b00 	vldr	d7, [r3]
 8002c98:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ca0:	f01c fd46 	bl	801f730 <tan>
 8002ca4:	ec53 2b10 	vmov	r2, r3, d0
	double thrust_max_xy_tilt = (
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd fcac 	bl	8000608 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	);
	double thrust_max_xy = sqrt(
		pow(maxThr, 2) -
 8002cb8:	4b98      	ldr	r3, [pc, #608]	@ (8002f1c <regelschritt+0x97c>)
 8002cba:	ed93 7b00 	vldr	d7, [r3]
 8002cbe:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8002ef0 <regelschritt+0x950>
 8002cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cc6:	eef0 0a67 	vmov.f32	s1, s15
 8002cca:	f01c fbe5 	bl	801f498 <pow>
 8002cce:	ec55 4b10 	vmov	r4, r5, d0
		pow(sollschub[UNTEN], 2)
 8002cd2:	4b89      	ldr	r3, [pc, #548]	@ (8002ef8 <regelschritt+0x958>)
 8002cd4:	ed93 7b04 	vldr	d7, [r3, #16]
 8002cd8:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 8002ef0 <regelschritt+0x950>
 8002cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce0:	eef0 0a67 	vmov.f32	s1, s15
 8002ce4:	f01c fbd8 	bl	801f498 <pow>
 8002ce8:	ec53 2b10 	vmov	r2, r3, d0
	double thrust_max_xy = sqrt(
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd fad2 	bl	8000298 <__aeabi_dsub>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	ec43 2b17 	vmov	d7, r2, r3
 8002cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002d00:	eef0 0a67 	vmov.f32	s1, s15
 8002d04:	f01c fc38 	bl	801f578 <sqrt>
 8002d08:	ed87 0b90 	vstr	d0, [r7, #576]	@ 0x240
	);

	if (thrust_max_xy > thrust_max_xy_tilt) {
 8002d0c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8002d10:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8002d14:	f7fd ff08 	bl	8000b28 <__aeabi_dcmpgt>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <regelschritt+0x786>
		thrust_max_xy = thrust_max_xy_tilt;
 8002d1e:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8002d22:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
	}

	if (
		sollschub[NORDEN] * sollschub[NORDEN] + sollschub[OSTEN] * sollschub[OSTEN] >
 8002d26:	4b74      	ldr	r3, [pc, #464]	@ (8002ef8 <regelschritt+0x958>)
 8002d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d2c:	4b72      	ldr	r3, [pc, #456]	@ (8002ef8 <regelschritt+0x958>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc69 	bl	8000608 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	461d      	mov	r5, r3
 8002d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ef8 <regelschritt+0x958>)
 8002d40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <regelschritt+0x958>)
 8002d46:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d4a:	f7fd fc5d 	bl	8000608 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7fd faa1 	bl	800029c <__adddf3>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4614      	mov	r4, r2
 8002d60:	461d      	mov	r5, r3
		pow(thrust_max_xy, 2)) {
 8002d62:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8002ef0 <regelschritt+0x950>
 8002d66:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 8002d6a:	f01c fb95 	bl	801f498 <pow>
 8002d6e:	ec53 2b10 	vmov	r2, r3, d0
	if (
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f7fd fed7 	bl	8000b28 <__aeabi_dcmpgt>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d055      	beq.n	8002e2c <regelschritt+0x88c>

		double mag = sqrt(
			pow(sollschub[NORDEN], 2) +
 8002d80:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef8 <regelschritt+0x958>)
 8002d82:	ed93 7b00 	vldr	d7, [r3]
 8002d86:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 8002ef0 <regelschritt+0x950>
 8002d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d8e:	eef0 0a67 	vmov.f32	s1, s15
 8002d92:	f01c fb81 	bl	801f498 <pow>
 8002d96:	ec55 4b10 	vmov	r4, r5, d0
			pow(sollschub[OSTEN], 2)
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <regelschritt+0x958>)
 8002d9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8002da0:	ed9f 1b53 	vldr	d1, [pc, #332]	@ 8002ef0 <regelschritt+0x950>
 8002da4:	eeb0 0a47 	vmov.f32	s0, s14
 8002da8:	eef0 0a67 	vmov.f32	s1, s15
 8002dac:	f01c fb74 	bl	801f498 <pow>
 8002db0:	ec53 2b10 	vmov	r2, r3, d0
		double mag = sqrt(
 8002db4:	4620      	mov	r0, r4
 8002db6:	4629      	mov	r1, r5
 8002db8:	f7fd fa70 	bl	800029c <__adddf3>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	ec43 2b17 	vmov	d7, r2, r3
 8002dc4:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc8:	eef0 0a67 	vmov.f32	s1, s15
 8002dcc:	f01c fbd4 	bl	801f578 <sqrt>
 8002dd0:	ed87 0b7e 	vstr	d0, [r7, #504]	@ 0x1f8
		);

		sollschub[NORDEN] = (
			sollschub[NORDEN] * thrust_max_xy / mag
 8002dd4:	4b48      	ldr	r3, [pc, #288]	@ (8002ef8 <regelschritt+0x958>)
 8002dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dda:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 8002dde:	f7fd fc13 	bl	8000608 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002dee:	f7fd fd35 	bl	800085c <__aeabi_ddiv>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
		sollschub[NORDEN] = (
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef8 <regelschritt+0x958>)
 8002dfc:	e9c3 0100 	strd	r0, r1, [r3]
		);
		sollschub[OSTEN] = (
			sollschub[OSTEN] * thrust_max_xy / mag
 8002e00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <regelschritt+0x958>)
 8002e02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e06:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 8002e0a:	f7fd fbfd 	bl	8000608 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002e1a:	f7fd fd1f 	bl	800085c <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
		sollschub[OSTEN] = (
 8002e26:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <regelschritt+0x958>)
 8002e28:	e9c3 0102 	strd	r0, r1, [r3, #8]
	}

	// Use tracking Anti-Windup for NE-direction: during saturation, the integrator is used to unsaturate the output
	// see Anti-Reset Windup for PID controllers, L.Rundqwist, 1990

	geschwindigkeitsfehlerlimit.norden = geschwindigkeitsfehler[NORDEN] - (
 8002e2c:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <regelschritt+0x960>)
 8002e2e:	e9d3 4500 	ldrd	r4, r5, [r3]
		sollschub[NORDEN] - sollschub[NORDEN]
 8002e32:	4b31      	ldr	r3, [pc, #196]	@ (8002ef8 <regelschritt+0x958>)
 8002e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e38:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <regelschritt+0x958>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd fa2b 	bl	8000298 <__aeabi_dsub>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
		) * 2.0 / vel_p_gain[NORDEN];
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	f7fd fa25 	bl	800029c <__adddf3>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <regelschritt+0x95c>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fcfc 	bl	800085c <__aeabi_ddiv>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
	geschwindigkeitsfehlerlimit.norden = geschwindigkeitsfehler[NORDEN] - (
 8002e68:	4620      	mov	r0, r4
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	f7fd fa14 	bl	8000298 <__aeabi_dsub>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <regelschritt+0x980>)
 8002e7a:	e9c3 0100 	strd	r0, r1, [r3]
	geschwindigkeitsfehlerlimit.osten = geschwindigkeitsfehler[OSTEN] - (
 8002e7e:	4b20      	ldr	r3, [pc, #128]	@ (8002f00 <regelschritt+0x960>)
 8002e80:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		sollschub[OSTEN] - sollschub[OSTEN]
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <regelschritt+0x958>)
 8002e86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <regelschritt+0x958>)
 8002e8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e90:	f7fd fa02 	bl	8000298 <__aeabi_dsub>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
		) * 2.0 / vel_p_gain[OSTEN];
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	f7fd f9fc 	bl	800029c <__adddf3>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <regelschritt+0x95c>)
 8002eae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002eb2:	f7fd fcd3 	bl	800085c <__aeabi_ddiv>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
	geschwindigkeitsfehlerlimit.osten = geschwindigkeitsfehler[OSTEN] - (
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd f9eb 	bl	8000298 <__aeabi_dsub>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <regelschritt+0x980>)
 8002ecc:	e9c3 0102 	strd	r0, r1, [r3, #8]

	double normsollschub = sqrt(
		sollschub[NORDEN] * sollschub[NORDEN] +
 8002ed0:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <regelschritt+0x958>)
 8002ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <regelschritt+0x958>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f7fd fb94 	bl	8000608 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461d      	mov	r5, r3
		sollschub[OSTEN] * sollschub[OSTEN] +
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <regelschritt+0x958>)
 8002eea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002eee:	e019      	b.n	8002f24 <regelschritt+0x984>
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40000000 	.word	0x40000000
 8002ef8:	200010a8 	.word	0x200010a8
 8002efc:	200000a8 	.word	0x200000a8
 8002f00:	20001218 	.word	0x20001218
 8002f04:	200000c0 	.word	0x200000c0
 8002f08:	20000f58 	.word	0x20000f58
 8002f0c:	200010e0 	.word	0x200010e0
 8002f10:	20000020 	.word	0x20000020
 8002f14:	20001050 	.word	0x20001050
 8002f18:	20000130 	.word	0x20000130
 8002f1c:	20000128 	.word	0x20000128
 8002f20:	20001070 	.word	0x20001070
 8002f24:	4bb4      	ldr	r3, [pc, #720]	@ (80031f8 <regelschritt+0xc58>)
 8002f26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f2a:	f7fd fb6d 	bl	8000608 <__aeabi_dmul>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
		sollschub[NORDEN] * sollschub[NORDEN] +
 8002f32:	4620      	mov	r0, r4
 8002f34:	4629      	mov	r1, r5
 8002f36:	f7fd f9b1 	bl	800029c <__adddf3>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4614      	mov	r4, r2
 8002f40:	461d      	mov	r5, r3
		sollschub[UNTEN] * sollschub[UNTEN]
 8002f42:	4bad      	ldr	r3, [pc, #692]	@ (80031f8 <regelschritt+0xc58>)
 8002f44:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f48:	4bab      	ldr	r3, [pc, #684]	@ (80031f8 <regelschritt+0xc58>)
 8002f4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f4e:	f7fd fb5b 	bl	8000608 <__aeabi_dmul>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
	double normsollschub = sqrt(
 8002f56:	4620      	mov	r0, r4
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f7fd f99f 	bl	800029c <__adddf3>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	ec43 2b17 	vmov	d7, r2, r3
 8002f66:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6a:	eef0 0a67 	vmov.f32	s1, s15
 8002f6e:	f01c fb03 	bl	801f578 <sqrt>
 8002f72:	ed87 0b7c 	vstr	d0, [r7, #496]	@ 0x1f0
	);

	body_z[0] = -sollschub[0] / normsollschub;
 8002f76:	4ba0      	ldr	r3, [pc, #640]	@ (80031f8 <regelschritt+0xc58>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	4692      	mov	sl, r2
 8002f7e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8002f82:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8002f86:	4650      	mov	r0, sl
 8002f88:	4659      	mov	r1, fp
 8002f8a:	f7fd fc67 	bl	800085c <__aeabi_ddiv>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	4b99      	ldr	r3, [pc, #612]	@ (80031fc <regelschritt+0xc5c>)
 8002f98:	e9c3 0100 	strd	r0, r1, [r3]
	body_z[1] = -sollschub[1] / normsollschub;
 8002f9c:	4b96      	ldr	r3, [pc, #600]	@ (80031f8 <regelschritt+0xc58>)
 8002f9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fa2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002fa6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002faa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fae:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8002fb2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002fb6:	f7fd fc51 	bl	800085c <__aeabi_ddiv>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4b8e      	ldr	r3, [pc, #568]	@ (80031fc <regelschritt+0xc5c>)
 8002fc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
	body_z[2] = -sollschub[2] / normsollschub;
 8002fc8:	4b8b      	ldr	r3, [pc, #556]	@ (80031f8 <regelschritt+0xc58>)
 8002fca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fd2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002fd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fda:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8002fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fe2:	f7fd fc3b 	bl	800085c <__aeabi_ddiv>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	4b83      	ldr	r3, [pc, #524]	@ (80031fc <regelschritt+0xc5c>)
 8002ff0:	e9c3 0104 	strd	r0, r1, [r3, #16]

	y_C[0] = -sin(yaw_setpoint);
 8002ff4:	4b82      	ldr	r3, [pc, #520]	@ (8003200 <regelschritt+0xc60>)
 8002ff6:	ed93 7b00 	vldr	d7, [r3]
 8002ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8002ffe:	eef0 0a67 	vmov.f32	s1, s15
 8003002:	f01c fb41 	bl	801f688 <sin>
 8003006:	ec53 2b10 	vmov	r2, r3, d0
 800300a:	4690      	mov	r8, r2
 800300c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8003010:	4b7c      	ldr	r3, [pc, #496]	@ (8003204 <regelschritt+0xc64>)
 8003012:	e9c3 8900 	strd	r8, r9, [r3]
	y_C[1] = cos(yaw_setpoint);
 8003016:	4b7a      	ldr	r3, [pc, #488]	@ (8003200 <regelschritt+0xc60>)
 8003018:	ed93 7b00 	vldr	d7, [r3]
 800301c:	eeb0 0a47 	vmov.f32	s0, s14
 8003020:	eef0 0a67 	vmov.f32	s1, s15
 8003024:	f01c fad4 	bl	801f5d0 <cos>
 8003028:	eeb0 7a40 	vmov.f32	s14, s0
 800302c:	eef0 7a60 	vmov.f32	s15, s1
 8003030:	4b74      	ldr	r3, [pc, #464]	@ (8003204 <regelschritt+0xc64>)
 8003032:	ed83 7b02 	vstr	d7, [r3, #8]
	y_C[2] = 0.0;
 8003036:	4973      	ldr	r1, [pc, #460]	@ (8003204 <regelschritt+0xc64>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// Kreuzprodukt
	body_x[0] = y_C[1] * body_z[2] - y_C[2] * body_z[1];
 8003044:	4b6f      	ldr	r3, [pc, #444]	@ (8003204 <regelschritt+0xc64>)
 8003046:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800304a:	4b6c      	ldr	r3, [pc, #432]	@ (80031fc <regelschritt+0xc5c>)
 800304c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003050:	f7fd fada 	bl	8000608 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4b69      	ldr	r3, [pc, #420]	@ (8003204 <regelschritt+0xc64>)
 800305e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003062:	4b66      	ldr	r3, [pc, #408]	@ (80031fc <regelschritt+0xc5c>)
 8003064:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003068:	f7fd face 	bl	8000608 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4620      	mov	r0, r4
 8003072:	4629      	mov	r1, r5
 8003074:	f7fd f910 	bl	8000298 <__aeabi_dsub>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	4b61      	ldr	r3, [pc, #388]	@ (8003208 <regelschritt+0xc68>)
 8003082:	e9c3 0100 	strd	r0, r1, [r3]
	body_x[1] = y_C[2] * body_z[0] - y_C[0] * body_z[2];
 8003086:	4b5f      	ldr	r3, [pc, #380]	@ (8003204 <regelschritt+0xc64>)
 8003088:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800308c:	4b5b      	ldr	r3, [pc, #364]	@ (80031fc <regelschritt+0xc5c>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fab9 	bl	8000608 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	461d      	mov	r5, r3
 800309e:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <regelschritt+0xc64>)
 80030a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a4:	4b55      	ldr	r3, [pc, #340]	@ (80031fc <regelschritt+0xc5c>)
 80030a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030aa:	f7fd faad 	bl	8000608 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f7fd f8ef 	bl	8000298 <__aeabi_dsub>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	4b51      	ldr	r3, [pc, #324]	@ (8003208 <regelschritt+0xc68>)
 80030c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
	body_x[2] = y_C[0] * body_z[1] - y_C[1] * body_z[0];
 80030c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003204 <regelschritt+0xc64>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	4b4b      	ldr	r3, [pc, #300]	@ (80031fc <regelschritt+0xc5c>)
 80030d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030d4:	f7fd fa98 	bl	8000608 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4b48      	ldr	r3, [pc, #288]	@ (8003204 <regelschritt+0xc64>)
 80030e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80030e6:	4b45      	ldr	r3, [pc, #276]	@ (80031fc <regelschritt+0xc5c>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f7fd fa8c 	bl	8000608 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd f8ce 	bl	8000298 <__aeabi_dsub>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	4b40      	ldr	r3, [pc, #256]	@ (8003208 <regelschritt+0xc68>)
 8003106:	e9c3 0104 	strd	r0, r1, [r3, #16]

	double normBodyX = sqrt(
		body_x[0] * body_x[0] +
 800310a:	4b3f      	ldr	r3, [pc, #252]	@ (8003208 <regelschritt+0xc68>)
 800310c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003110:	4b3d      	ldr	r3, [pc, #244]	@ (8003208 <regelschritt+0xc68>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fa77 	bl	8000608 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4614      	mov	r4, r2
 8003120:	461d      	mov	r5, r3
		body_x[1] * body_x[1] +
 8003122:	4b39      	ldr	r3, [pc, #228]	@ (8003208 <regelschritt+0xc68>)
 8003124:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003128:	4b37      	ldr	r3, [pc, #220]	@ (8003208 <regelschritt+0xc68>)
 800312a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800312e:	f7fd fa6b 	bl	8000608 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
		body_x[0] * body_x[0] +
 8003136:	4620      	mov	r0, r4
 8003138:	4629      	mov	r1, r5
 800313a:	f7fd f8af 	bl	800029c <__adddf3>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4614      	mov	r4, r2
 8003144:	461d      	mov	r5, r3
		body_x[2] * body_x[2]
 8003146:	4b30      	ldr	r3, [pc, #192]	@ (8003208 <regelschritt+0xc68>)
 8003148:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800314c:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <regelschritt+0xc68>)
 800314e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003152:	f7fd fa59 	bl	8000608 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
	double normBodyX = sqrt(
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd f89d 	bl	800029c <__adddf3>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	ec43 2b17 	vmov	d7, r2, r3
 800316a:	eeb0 0a47 	vmov.f32	s0, s14
 800316e:	eef0 0a67 	vmov.f32	s1, s15
 8003172:	f01c fa01 	bl	801f578 <sqrt>
 8003176:	ed87 0b7a 	vstr	d0, [r7, #488]	@ 0x1e8
	);

	body_x[0] = body_x[0] / normBodyX;
 800317a:	4b23      	ldr	r3, [pc, #140]	@ (8003208 <regelschritt+0xc68>)
 800317c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003180:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8003184:	f7fd fb6a 	bl	800085c <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <regelschritt+0xc68>)
 8003192:	e9c3 0100 	strd	r0, r1, [r3]
	body_x[1] = body_x[1] / normBodyX;
 8003196:	4b1c      	ldr	r3, [pc, #112]	@ (8003208 <regelschritt+0xc68>)
 8003198:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800319c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80031a0:	f7fd fb5c 	bl	800085c <__aeabi_ddiv>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	4b16      	ldr	r3, [pc, #88]	@ (8003208 <regelschritt+0xc68>)
 80031ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
	body_x[2] = body_x[2] / normBodyX;
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <regelschritt+0xc68>)
 80031b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80031b8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80031bc:	f7fd fb4e 	bl	800085c <__aeabi_ddiv>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <regelschritt+0xc68>)
 80031ca:	e9c3 0104 	strd	r0, r1, [r3, #16]

	body_y[0] = (
		body_z[1] * body_x[2] -
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <regelschritt+0xc5c>)
 80031d0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <regelschritt+0xc68>)
 80031d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031da:	f7fd fa15 	bl	8000608 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4614      	mov	r4, r2
 80031e4:	461d      	mov	r5, r3
		body_z[2] * body_x[1]
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <regelschritt+0xc5c>)
 80031e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <regelschritt+0xc68>)
 80031ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031f2:	f7fd fa09 	bl	8000608 <__aeabi_dmul>
 80031f6:	e009      	b.n	800320c <regelschritt+0xc6c>
 80031f8:	200010a8 	.word	0x200010a8
 80031fc:	20000fd8 	.word	0x20000fd8
 8003200:	200010d8 	.word	0x200010d8
 8003204:	20000ff0 	.word	0x20000ff0
 8003208:	20000fa8 	.word	0x20000fa8
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
		body_z[1] * body_x[2] -
 8003210:	4620      	mov	r0, r4
 8003212:	4629      	mov	r1, r5
 8003214:	f7fd f840 	bl	8000298 <__aeabi_dsub>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
	body_y[0] = (
 8003220:	4b7b      	ldr	r3, [pc, #492]	@ (8003410 <regelschritt+0xe70>)
 8003222:	e9c3 0100 	strd	r0, r1, [r3]
	);
	body_y[1] = (
		body_z[2] * body_x[0] -
 8003226:	4b7b      	ldr	r3, [pc, #492]	@ (8003414 <regelschritt+0xe74>)
 8003228:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800322c:	4b7a      	ldr	r3, [pc, #488]	@ (8003418 <regelschritt+0xe78>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f7fd f9e9 	bl	8000608 <__aeabi_dmul>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4614      	mov	r4, r2
 800323c:	461d      	mov	r5, r3
		body_z[0] * body_x[2]
 800323e:	4b75      	ldr	r3, [pc, #468]	@ (8003414 <regelschritt+0xe74>)
 8003240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003244:	4b74      	ldr	r3, [pc, #464]	@ (8003418 <regelschritt+0xe78>)
 8003246:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800324a:	f7fd f9dd 	bl	8000608 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
		body_z[2] * body_x[0] -
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd f81f 	bl	8000298 <__aeabi_dsub>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
	body_y[1] = (
 8003262:	4b6b      	ldr	r3, [pc, #428]	@ (8003410 <regelschritt+0xe70>)
 8003264:	e9c3 0102 	strd	r0, r1, [r3, #8]
	);
	body_y[2] = (
		body_z[0] * body_x[1] -
 8003268:	4b6a      	ldr	r3, [pc, #424]	@ (8003414 <regelschritt+0xe74>)
 800326a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800326e:	4b6a      	ldr	r3, [pc, #424]	@ (8003418 <regelschritt+0xe78>)
 8003270:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003274:	f7fd f9c8 	bl	8000608 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
		body_z[1] * body_x[0]
 8003280:	4b64      	ldr	r3, [pc, #400]	@ (8003414 <regelschritt+0xe74>)
 8003282:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003286:	4b64      	ldr	r3, [pc, #400]	@ (8003418 <regelschritt+0xe78>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd f9bc 	bl	8000608 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
		body_z[0] * body_x[1] -
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f7fc fffe 	bl	8000298 <__aeabi_dsub>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
	body_y[2] = (
 80032a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003410 <regelschritt+0xe70>)
 80032a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
	);

	double R_sp[3][3];

	// Desired rotation matrix
	R_sp[0][0] = body_x[0];
 80032aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003418 <regelschritt+0xe78>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
	R_sp[1][0] = body_x[1];
 80032b4:	4b58      	ldr	r3, [pc, #352]	@ (8003418 <regelschritt+0xe78>)
 80032b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032ba:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
	R_sp[2][0] = body_x[2];
 80032be:	4b56      	ldr	r3, [pc, #344]	@ (8003418 <regelschritt+0xe78>)
 80032c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032c4:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0

	R_sp[0][1] = body_y[0];
 80032c8:	4b51      	ldr	r3, [pc, #324]	@ (8003410 <regelschritt+0xe70>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	R_sp[1][1] = body_y[1];
 80032d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003410 <regelschritt+0xe70>)
 80032d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032d8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
	R_sp[2][1] = body_y[2];
 80032dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003410 <regelschritt+0xe70>)
 80032de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032e2:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

	R_sp[0][2] = body_z[0];
 80032e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003414 <regelschritt+0xe74>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	R_sp[1][2] = body_z[1];
 80032f0:	4b48      	ldr	r3, [pc, #288]	@ (8003414 <regelschritt+0xe74>)
 80032f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032f6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
	R_sp[2][2] = body_z[2];
 80032fa:	4b46      	ldr	r3, [pc, #280]	@ (8003414 <regelschritt+0xe74>)
 80032fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003300:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	// RotToQuat(R_sp, q_target);

	// double quaternion_ganz[4];

	Quaternion quaternion_ganz;
	double tr = R_sp[0][0] + R_sp[1][1] + R_sp[2][2];
 8003304:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003308:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800330c:	f7fc ffc6 	bl	800029c <__adddf3>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800331c:	f7fc ffbe 	bl	800029c <__adddf3>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
	double r, e0, e1, e2, e3;

	if (tr > R_sp[0][0] && tr > R_sp[1][1] && tr > R_sp[2][2]) {
 8003328:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800332c:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8003330:	f7fd fbfa 	bl	8000b28 <__aeabi_dcmpgt>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d076      	beq.n	8003428 <regelschritt+0xe88>
 800333a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800333e:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8003342:	f7fd fbf1 	bl	8000b28 <__aeabi_dcmpgt>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d06d      	beq.n	8003428 <regelschritt+0xe88>
 800334c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8003350:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8003354:	f7fd fbe8 	bl	8000b28 <__aeabi_dcmpgt>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d064      	beq.n	8003428 <regelschritt+0xe88>
		e0 = 0.5 * sqrt(1 + tr);
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	4b2e      	ldr	r3, [pc, #184]	@ (800341c <regelschritt+0xe7c>)
 8003364:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8003368:	f7fc ff98 	bl	800029c <__adddf3>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	ec43 2b17 	vmov	d7, r2, r3
 8003374:	eeb0 0a47 	vmov.f32	s0, s14
 8003378:	eef0 0a67 	vmov.f32	s1, s15
 800337c:	f01c f8fc 	bl	801f578 <sqrt>
 8003380:	ec51 0b10 	vmov	r0, r1, d0
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <regelschritt+0xe80>)
 800338a:	f7fd f93d 	bl	8000608 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
		r = 0.25 / e0;
 8003396:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	4921      	ldr	r1, [pc, #132]	@ (8003424 <regelschritt+0xe84>)
 80033a0:	f7fd fa5c 	bl	800085c <__aeabi_ddiv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		e1 = (R_sp[2][1] - R_sp[1][2]) * r;
 80033ac:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80033b0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80033b4:	f7fc ff70 	bl	8000298 <__aeabi_dsub>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80033c0:	f7fd f922 	bl	8000608 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		e2 = (R_sp[0][2] - R_sp[2][0]) * r;
 80033cc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 80033d0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80033d4:	f7fc ff60 	bl	8000298 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80033e0:	f7fd f912 	bl	8000608 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
		e3 = (R_sp[1][0] - R_sp[0][1]) * r;
 80033ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80033f0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80033f4:	f7fc ff50 	bl	8000298 <__aeabi_dsub>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8003400:	f7fd f902 	bl	8000608 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
 800340c:	e165      	b.n	80036da <regelschritt+0x113a>
 800340e:	bf00      	nop
 8003410:	20000fc0 	.word	0x20000fc0
 8003414:	20000fd8 	.word	0x20000fd8
 8003418:	20000fa8 	.word	0x20000fa8
 800341c:	3ff00000 	.word	0x3ff00000
 8003420:	3fe00000 	.word	0x3fe00000
 8003424:	3fd00000 	.word	0x3fd00000
	} else if (R_sp[0][0] > R_sp[1][1] && R_sp[0][0] > R_sp[2][2]) {
 8003428:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800342c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8003430:	f7fd fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d070      	beq.n	800351c <regelschritt+0xf7c>
 800343a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800343e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8003442:	f7fd fb71 	bl	8000b28 <__aeabi_dcmpgt>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d067      	beq.n	800351c <regelschritt+0xf7c>
		e1 = 0.5 * sqrt(1 - tr + 2 * R_sp[0][0]);
 800344c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	496a      	ldr	r1, [pc, #424]	@ (8003600 <regelschritt+0x1060>)
 8003456:	f7fc ff1f 	bl	8000298 <__aeabi_dsub>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4614      	mov	r4, r2
 8003460:	461d      	mov	r5, r3
 8003462:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	f7fc ff17 	bl	800029c <__adddf3>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4620      	mov	r0, r4
 8003474:	4629      	mov	r1, r5
 8003476:	f7fc ff11 	bl	800029c <__adddf3>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	ec43 2b17 	vmov	d7, r2, r3
 8003482:	eeb0 0a47 	vmov.f32	s0, s14
 8003486:	eef0 0a67 	vmov.f32	s1, s15
 800348a:	f01c f875 	bl	801f578 <sqrt>
 800348e:	ec51 0b10 	vmov	r0, r1, d0
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b5b      	ldr	r3, [pc, #364]	@ (8003604 <regelschritt+0x1064>)
 8003498:	f7fd f8b6 	bl	8000608 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		r = 0.25 / e1;
 80034a4:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80034a8:	f04f 0000 	mov.w	r0, #0
 80034ac:	4956      	ldr	r1, [pc, #344]	@ (8003608 <regelschritt+0x1068>)
 80034ae:	f7fd f9d5 	bl	800085c <__aeabi_ddiv>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		e0 = (R_sp[2][1] - R_sp[1][2]) * r;
 80034ba:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80034be:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80034c2:	f7fc fee9 	bl	8000298 <__aeabi_dsub>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80034ce:	f7fd f89b 	bl	8000608 <__aeabi_dmul>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
		e2 = (R_sp[0][1] + R_sp[1][0]) * r;
 80034da:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 80034de:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80034e2:	f7fc fedb 	bl	800029c <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80034ee:	f7fd f88b 	bl	8000608 <__aeabi_dmul>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
		e3 = (R_sp[0][2] + R_sp[2][0]) * r;
 80034fa:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 80034fe:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8003502:	f7fc fecb 	bl	800029c <__adddf3>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800350e:	f7fd f87b 	bl	8000608 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
 800351a:	e0de      	b.n	80036da <regelschritt+0x113a>
	} else if (R_sp[1][1] > R_sp[2][2]) {
 800351c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003520:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8003524:	f7fd fb00 	bl	8000b28 <__aeabi_dcmpgt>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d06e      	beq.n	800360c <regelschritt+0x106c>
		e2 = 0.5 * sqrt(1 - tr + 2 * R_sp[1][1]);
 800352e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	4932      	ldr	r1, [pc, #200]	@ (8003600 <regelschritt+0x1060>)
 8003538:	f7fc feae 	bl	8000298 <__aeabi_dsub>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	f7fc fea6 	bl	800029c <__adddf3>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fc fea0 	bl	800029c <__adddf3>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	ec43 2b17 	vmov	d7, r2, r3
 8003564:	eeb0 0a47 	vmov.f32	s0, s14
 8003568:	eef0 0a67 	vmov.f32	s1, s15
 800356c:	f01c f804 	bl	801f578 <sqrt>
 8003570:	ec51 0b10 	vmov	r0, r1, d0
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <regelschritt+0x1064>)
 800357a:	f7fd f845 	bl	8000608 <__aeabi_dmul>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
		r = 0.25 / e2;
 8003586:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	491e      	ldr	r1, [pc, #120]	@ (8003608 <regelschritt+0x1068>)
 8003590:	f7fd f964 	bl	800085c <__aeabi_ddiv>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		e0 = (R_sp[0][2] - R_sp[2][0]) * r;
 800359c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 80035a0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80035a4:	f7fc fe78 	bl	8000298 <__aeabi_dsub>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80035b0:	f7fd f82a 	bl	8000608 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
		e1 = (R_sp[0][1] + R_sp[1][0]) * r;
 80035bc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 80035c0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80035c4:	f7fc fe6a 	bl	800029c <__adddf3>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80035d0:	f7fd f81a 	bl	8000608 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		e3 = (R_sp[1][2] + R_sp[2][1]) * r;
 80035dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80035e0:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80035e4:	f7fc fe5a 	bl	800029c <__adddf3>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80035f0:	f7fd f80a 	bl	8000608 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
 80035fc:	e06d      	b.n	80036da <regelschritt+0x113a>
 80035fe:	bf00      	nop
 8003600:	3ff00000 	.word	0x3ff00000
 8003604:	3fe00000 	.word	0x3fe00000
 8003608:	3fd00000 	.word	0x3fd00000
	} else {
		e3 = 0.5 * sqrt(1 - tr + 2 * R_sp[2][2]);
 800360c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	49bb      	ldr	r1, [pc, #748]	@ (8003904 <regelschritt+0x1364>)
 8003616:	f7fc fe3f 	bl	8000298 <__aeabi_dsub>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4614      	mov	r4, r2
 8003620:	461d      	mov	r5, r3
 8003622:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	f7fc fe37 	bl	800029c <__adddf3>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4620      	mov	r0, r4
 8003634:	4629      	mov	r1, r5
 8003636:	f7fc fe31 	bl	800029c <__adddf3>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	ec43 2b17 	vmov	d7, r2, r3
 8003642:	eeb0 0a47 	vmov.f32	s0, s14
 8003646:	eef0 0a67 	vmov.f32	s1, s15
 800364a:	f01b ff95 	bl	801f578 <sqrt>
 800364e:	ec51 0b10 	vmov	r0, r1, d0
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	4bac      	ldr	r3, [pc, #688]	@ (8003908 <regelschritt+0x1368>)
 8003658:	f7fc ffd6 	bl	8000608 <__aeabi_dmul>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
		r = 0.25 / e3;
 8003664:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	49a7      	ldr	r1, [pc, #668]	@ (800390c <regelschritt+0x136c>)
 800366e:	f7fd f8f5 	bl	800085c <__aeabi_ddiv>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		e0 = (R_sp[1][0] - R_sp[0][1]) * r;
 800367a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800367e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8003682:	f7fc fe09 	bl	8000298 <__aeabi_dsub>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800368e:	f7fc ffbb 	bl	8000608 <__aeabi_dmul>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
		e1 = (R_sp[0][2] + R_sp[2][0]) * r;
 800369a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 800369e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80036a2:	f7fc fdfb 	bl	800029c <__adddf3>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80036ae:	f7fc ffab 	bl	8000608 <__aeabi_dmul>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		e2 = (R_sp[1][2] + R_sp[2][1]) * r;
 80036ba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80036be:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80036c2:	f7fc fdeb 	bl	800029c <__adddf3>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80036ce:	f7fc ff9b 	bl	8000608 <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
	}

	quaternion_ganz.w = e0;
 80036da:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 80036de:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	quaternion_ganz.x = e1;
 80036e2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80036e6:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
	quaternion_ganz.y = e2;
 80036ea:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 80036ee:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
	quaternion_ganz.z = e3;
 80036f2:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80036f6:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168

	if (e0 < 0) {
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8003706:	f7fd f9f1 	bl	8000aec <__aeabi_dcmplt>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d027      	beq.n	8003760 <regelschritt+0x11c0>
		quaternion_ganz.w = -quaternion_ganz.w;
 8003710:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8003714:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003716:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800371a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800371c:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8003720:	ed87 7b54 	vstr	d7, [r7, #336]	@ 0x150
		quaternion_ganz.x = -quaternion_ganz.x;
 8003724:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8003728:	673a      	str	r2, [r7, #112]	@ 0x70
 800372a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800372e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003730:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8003734:	ed87 7b56 	vstr	d7, [r7, #344]	@ 0x158
		quaternion_ganz.y = -quaternion_ganz.y;
 8003738:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800373c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800373e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003744:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003748:	ed87 7b58 	vstr	d7, [r7, #352]	@ 0x160
		quaternion_ganz.z = -quaternion_ganz.z;
 800374c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8003750:	663a      	str	r2, [r7, #96]	@ 0x60
 8003752:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003756:	667b      	str	r3, [r7, #100]	@ 0x64
 8003758:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800375c:	ed87 7b5a 	vstr	d7, [r7, #360]	@ 0x168
	}

	double norm = normQuaternion(quaternion_ganz);
 8003760:	ed97 4b54 	vldr	d4, [r7, #336]	@ 0x150
 8003764:	ed97 5b56 	vldr	d5, [r7, #344]	@ 0x158
 8003768:	ed97 6b58 	vldr	d6, [r7, #352]	@ 0x160
 800376c:	ed97 7b5a 	vldr	d7, [r7, #360]	@ 0x168
 8003770:	eeb0 0a44 	vmov.f32	s0, s8
 8003774:	eef0 0a64 	vmov.f32	s1, s9
 8003778:	eeb0 1a45 	vmov.f32	s2, s10
 800377c:	eef0 1a65 	vmov.f32	s3, s11
 8003780:	eeb0 2a46 	vmov.f32	s4, s12
 8003784:	eef0 2a66 	vmov.f32	s5, s13
 8003788:	eeb0 3a47 	vmov.f32	s6, s14
 800378c:	eef0 3a67 	vmov.f32	s7, s15
 8003790:	f7fe f88c 	bl	80018ac <normQuaternion>
 8003794:	ed87 0b74 	vstr	d0, [r7, #464]	@ 0x1d0

	quaternion_ganz = scaleQuaternion(quaternion_ganz, 1 / norm);
 8003798:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800379c:	f04f 0000 	mov.w	r0, #0
 80037a0:	4958      	ldr	r1, [pc, #352]	@ (8003904 <regelschritt+0x1364>)
 80037a2:	f7fd f85b 	bl	800085c <__aeabi_ddiv>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	ec43 2b14 	vmov	d4, r2, r3
 80037ae:	ed97 3b54 	vldr	d3, [r7, #336]	@ 0x150
 80037b2:	ed97 5b56 	vldr	d5, [r7, #344]	@ 0x158
 80037b6:	ed97 6b58 	vldr	d6, [r7, #352]	@ 0x160
 80037ba:	ed97 7b5a 	vldr	d7, [r7, #360]	@ 0x168
 80037be:	eeb0 0a43 	vmov.f32	s0, s6
 80037c2:	eef0 0a63 	vmov.f32	s1, s7
 80037c6:	eeb0 1a45 	vmov.f32	s2, s10
 80037ca:	eef0 1a65 	vmov.f32	s3, s11
 80037ce:	eeb0 2a46 	vmov.f32	s4, s12
 80037d2:	eef0 2a66 	vmov.f32	s5, s13
 80037d6:	eeb0 3a47 	vmov.f32	s6, s14
 80037da:	eef0 3a67 	vmov.f32	s7, s15
 80037de:	f7fe f968 	bl	8001ab2 <scaleQuaternion>
 80037e2:	eeb0 4a40 	vmov.f32	s8, s0
 80037e6:	eef0 4a60 	vmov.f32	s9, s1
 80037ea:	eeb0 5a41 	vmov.f32	s10, s2
 80037ee:	eef0 5a61 	vmov.f32	s11, s3
 80037f2:	eeb0 6a42 	vmov.f32	s12, s4
 80037f6:	eef0 6a62 	vmov.f32	s13, s5
 80037fa:	eeb0 7a43 	vmov.f32	s14, s6
 80037fe:	eef0 7a63 	vmov.f32	s15, s7
 8003802:	ed87 4b54 	vstr	d4, [r7, #336]	@ 0x150
 8003806:	ed87 5b56 	vstr	d5, [r7, #344]	@ 0x158
 800380a:	ed87 6b58 	vstr	d6, [r7, #352]	@ 0x160
 800380e:	ed87 7b5a 	vstr	d7, [r7, #360]	@ 0x168
	// quaternion_ganz[2] = q_target[2];
	// quaternion_ganz[3] = q_target[3];

	// Current thrust orientation e_z and desired thrust orientation e_z_d

	quad_dcm[0][0] = 1.0;
 8003812:	493f      	ldr	r1, [pc, #252]	@ (8003910 <regelschritt+0x1370>)
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	4b3a      	ldr	r3, [pc, #232]	@ (8003904 <regelschritt+0x1364>)
 800381a:	e9c1 2300 	strd	r2, r3, [r1]
	quad_dcm[1][1] = 1.0;
 800381e:	493c      	ldr	r1, [pc, #240]	@ (8003910 <regelschritt+0x1370>)
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <regelschritt+0x1364>)
 8003826:	e9c1 2308 	strd	r2, r3, [r1, #32]
	quad_dcm[2][2] = 1.0;
 800382a:	4939      	ldr	r1, [pc, #228]	@ (8003910 <regelschritt+0x1370>)
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <regelschritt+0x1364>)
 8003832:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	e_z[0] = 0.0;
 8003836:	4937      	ldr	r1, [pc, #220]	@ (8003914 <regelschritt+0x1374>)
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9c1 2300 	strd	r2, r3, [r1]
	e_z[1] = 0.0;
 8003844:	4933      	ldr	r1, [pc, #204]	@ (8003914 <regelschritt+0x1374>)
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	e_z[2] = 1.0;
 8003852:	4930      	ldr	r1, [pc, #192]	@ (8003914 <regelschritt+0x1374>)
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	4b2a      	ldr	r3, [pc, #168]	@ (8003904 <regelschritt+0x1364>)
 800385a:	e9c1 2304 	strd	r2, r3, [r1, #16]

	double normSollschub = sqrt(
		sollschub[0] * sollschub[0] +
 800385e:	4b2e      	ldr	r3, [pc, #184]	@ (8003918 <regelschritt+0x1378>)
 8003860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003864:	4b2c      	ldr	r3, [pc, #176]	@ (8003918 <regelschritt+0x1378>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fecd 	bl	8000608 <__aeabi_dmul>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4614      	mov	r4, r2
 8003874:	461d      	mov	r5, r3
		sollschub[1] * sollschub[1] +
 8003876:	4b28      	ldr	r3, [pc, #160]	@ (8003918 <regelschritt+0x1378>)
 8003878:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800387c:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <regelschritt+0x1378>)
 800387e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003882:	f7fc fec1 	bl	8000608 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
		sollschub[0] * sollschub[0] +
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	f7fc fd05 	bl	800029c <__adddf3>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4614      	mov	r4, r2
 8003898:	461d      	mov	r5, r3
		sollschub[2] * sollschub[2]
 800389a:	4b1f      	ldr	r3, [pc, #124]	@ (8003918 <regelschritt+0x1378>)
 800389c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80038a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <regelschritt+0x1378>)
 80038a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038a6:	f7fc feaf 	bl	8000608 <__aeabi_dmul>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
	double normSollschub = sqrt(
 80038ae:	4620      	mov	r0, r4
 80038b0:	4629      	mov	r1, r5
 80038b2:	f7fc fcf3 	bl	800029c <__adddf3>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	ec43 2b17 	vmov	d7, r2, r3
 80038be:	eeb0 0a47 	vmov.f32	s0, s14
 80038c2:	eef0 0a67 	vmov.f32	s1, s15
 80038c6:	f01b fe57 	bl	801f578 <sqrt>
 80038ca:	ed87 0b72 	vstr	d0, [r7, #456]	@ 0x1c8
	);

	e_z_d[0] = -sollschub[0] / normSollschub;
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <regelschritt+0x1378>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038d6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80038da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038dc:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80038e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80038e4:	f7fc ffba 	bl	800085c <__aeabi_ddiv>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <regelschritt+0x137c>)
 80038f2:	e9c3 0100 	strd	r0, r1, [r3]
	e_z_d[1] = -sollschub[1] / normSollschub;
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <regelschritt+0x1378>)
 80038f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038fc:	653a      	str	r2, [r7, #80]	@ 0x50
 80038fe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	e00d      	b.n	8003920 <regelschritt+0x1380>
 8003904:	3ff00000 	.word	0x3ff00000
 8003908:	3fe00000 	.word	0x3fe00000
 800390c:	3fd00000 	.word	0x3fd00000
 8003910:	20001008 	.word	0x20001008
 8003914:	20001168 	.word	0x20001168
 8003918:	200010a8 	.word	0x200010a8
 800391c:	20001180 	.word	0x20001180
 8003920:	657b      	str	r3, [r7, #84]	@ 0x54
 8003922:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8003926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800392a:	f7fc ff97 	bl	800085c <__aeabi_ddiv>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	4bab      	ldr	r3, [pc, #684]	@ (8003be4 <regelschritt+0x1644>)
 8003938:	e9c3 0102 	strd	r0, r1, [r3, #8]
	e_z_d[2] = -sollschub[2] / normSollschub;
 800393c:	4baa      	ldr	r3, [pc, #680]	@ (8003be8 <regelschritt+0x1648>)
 800393e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003942:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003944:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800394e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003952:	f7fc ff83 	bl	800085c <__aeabi_ddiv>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	4ba1      	ldr	r3, [pc, #644]	@ (8003be4 <regelschritt+0x1644>)
 8003960:	e9c3 0104 	strd	r0, r1, [r3, #16]

	double quaternionfehler_reduziert_dot_part = (
		e_z[0] * e_z_d[0] +
 8003964:	4ba1      	ldr	r3, [pc, #644]	@ (8003bec <regelschritt+0x164c>)
 8003966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800396a:	4b9e      	ldr	r3, [pc, #632]	@ (8003be4 <regelschritt+0x1644>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fc fe4a 	bl	8000608 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
		e_z[1] * e_z_d[1] +
 800397c:	4b9b      	ldr	r3, [pc, #620]	@ (8003bec <regelschritt+0x164c>)
 800397e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003982:	4b98      	ldr	r3, [pc, #608]	@ (8003be4 <regelschritt+0x1644>)
 8003984:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003988:	f7fc fe3e 	bl	8000608 <__aeabi_dmul>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
		e_z[0] * e_z_d[0] +
 8003990:	4620      	mov	r0, r4
 8003992:	4629      	mov	r1, r5
 8003994:	f7fc fc82 	bl	800029c <__adddf3>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
		e_z[2] * e_z_d[2]
 80039a0:	4b92      	ldr	r3, [pc, #584]	@ (8003bec <regelschritt+0x164c>)
 80039a2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80039a6:	4b8f      	ldr	r3, [pc, #572]	@ (8003be4 <regelschritt+0x1644>)
 80039a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ac:	f7fc fe2c 	bl	8000608 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
	double quaternionfehler_reduziert_dot_part = (
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7fc fc70 	bl	800029c <__adddf3>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
	);

	e_z_norm = sqrt(
		e_z[0] * e_z[0] +
 80039c4:	4b89      	ldr	r3, [pc, #548]	@ (8003bec <regelschritt+0x164c>)
 80039c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ca:	4b88      	ldr	r3, [pc, #544]	@ (8003bec <regelschritt+0x164c>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fe1a 	bl	8000608 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
		e_z[1] * e_z[1] +
 80039dc:	4b83      	ldr	r3, [pc, #524]	@ (8003bec <regelschritt+0x164c>)
 80039de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80039e2:	4b82      	ldr	r3, [pc, #520]	@ (8003bec <regelschritt+0x164c>)
 80039e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039e8:	f7fc fe0e 	bl	8000608 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
		e_z[0] * e_z[0] +
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fc52 	bl	800029c <__adddf3>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
		e_z[2] * e_z[2]
 8003a00:	4b7a      	ldr	r3, [pc, #488]	@ (8003bec <regelschritt+0x164c>)
 8003a02:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003a06:	4b79      	ldr	r3, [pc, #484]	@ (8003bec <regelschritt+0x164c>)
 8003a08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a0c:	f7fc fdfc 	bl	8000608 <__aeabi_dmul>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
	e_z_norm = sqrt(
 8003a14:	4620      	mov	r0, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	f7fc fc40 	bl	800029c <__adddf3>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	ec43 2b17 	vmov	d7, r2, r3
 8003a24:	eeb0 0a47 	vmov.f32	s0, s14
 8003a28:	eef0 0a67 	vmov.f32	s1, s15
 8003a2c:	f01b fda4 	bl	801f578 <sqrt>
 8003a30:	eeb0 7a40 	vmov.f32	s14, s0
 8003a34:	eef0 7a60 	vmov.f32	s15, s1
 8003a38:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf0 <regelschritt+0x1650>)
 8003a3a:	ed83 7b00 	vstr	d7, [r3]
	);

	e_z[0] = -e_z[0] / e_z_norm;
 8003a3e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bec <regelschritt+0x164c>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a46:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4c:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <regelschritt+0x1650>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003a56:	f7fc ff01 	bl	800085c <__aeabi_ddiv>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	4b62      	ldr	r3, [pc, #392]	@ (8003bec <regelschritt+0x164c>)
 8003a64:	e9c3 0100 	strd	r0, r1, [r3]
	e_z[1] = -e_z[1] / e_z_norm;
 8003a68:	4b60      	ldr	r3, [pc, #384]	@ (8003bec <regelschritt+0x164c>)
 8003a6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a6e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a70:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a76:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf0 <regelschritt+0x1650>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003a80:	f7fc feec 	bl	800085c <__aeabi_ddiv>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4b57      	ldr	r3, [pc, #348]	@ (8003bec <regelschritt+0x164c>)
 8003a8e:	e9c3 0102 	strd	r0, r1, [r3, #8]
	e_z[2] = -e_z[2] / e_z_norm;
 8003a92:	4b56      	ldr	r3, [pc, #344]	@ (8003bec <regelschritt+0x164c>)
 8003a94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a98:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a9a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa0:	4b53      	ldr	r3, [pc, #332]	@ (8003bf0 <regelschritt+0x1650>)
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003aaa:	f7fc fed7 	bl	800085c <__aeabi_ddiv>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8003bec <regelschritt+0x164c>)
 8003ab8:	e9c3 0104 	strd	r0, r1, [r3, #16]

	double e_z_d_norm = sqrt(
		e_z_d[0] * e_z_d[0] +
 8003abc:	4b49      	ldr	r3, [pc, #292]	@ (8003be4 <regelschritt+0x1644>)
 8003abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ac2:	4b48      	ldr	r3, [pc, #288]	@ (8003be4 <regelschritt+0x1644>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f7fc fd9e 	bl	8000608 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
		e_z_d[1] * e_z_d[1] +
 8003ad4:	4b43      	ldr	r3, [pc, #268]	@ (8003be4 <regelschritt+0x1644>)
 8003ad6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ada:	4b42      	ldr	r3, [pc, #264]	@ (8003be4 <regelschritt+0x1644>)
 8003adc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ae0:	f7fc fd92 	bl	8000608 <__aeabi_dmul>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
		e_z_d[0] * e_z_d[0] +
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7fc fbd6 	bl	800029c <__adddf3>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
		e_z_d[2] * e_z_d[2]
 8003af8:	4b3a      	ldr	r3, [pc, #232]	@ (8003be4 <regelschritt+0x1644>)
 8003afa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003afe:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <regelschritt+0x1644>)
 8003b00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b04:	f7fc fd80 	bl	8000608 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
	double e_z_d_norm = sqrt(
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f7fc fbc4 	bl	800029c <__adddf3>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	ec43 2b17 	vmov	d7, r2, r3
 8003b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8003b20:	eef0 0a67 	vmov.f32	s1, s15
 8003b24:	f01b fd28 	bl	801f578 <sqrt>
 8003b28:	ed87 0b6e 	vstr	d0, [r7, #440]	@ 0x1b8
	);

	e_z_d[0] = -e_z_d[0] / e_z_d_norm;
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003be4 <regelschritt+0x1644>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b34:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8003b3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b42:	f7fc fe8b 	bl	800085c <__aeabi_ddiv>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4926      	ldr	r1, [pc, #152]	@ (8003be4 <regelschritt+0x1644>)
 8003b4c:	e9c1 2300 	strd	r2, r3, [r1]
	e_z_d[1] = -e_z_d[1] / e_z_d_norm;
 8003b50:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <regelschritt+0x1644>)
 8003b52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b56:	623a      	str	r2, [r7, #32]
 8003b58:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5e:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8003b62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b66:	f7fc fe79 	bl	800085c <__aeabi_ddiv>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	491d      	ldr	r1, [pc, #116]	@ (8003be4 <regelschritt+0x1644>)
 8003b70:	e9c1 2302 	strd	r2, r3, [r1, #8]
	e_z_d[2] = -e_z_d[2] / e_z_d_norm;
 8003b74:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <regelschritt+0x1644>)
 8003b76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b7a:	61ba      	str	r2, [r7, #24]
 8003b7c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8003b86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b8a:	f7fc fe67 	bl	800085c <__aeabi_ddiv>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4914      	ldr	r1, [pc, #80]	@ (8003be4 <regelschritt+0x1644>)
 8003b94:	e9c1 2304 	strd	r2, r3, [r1, #16]

	quaternionfehler_reduziert.w = quaternionfehler_reduziert_dot_part + sqrt(
		e_z[0] * e_z[0] +
 8003b98:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <regelschritt+0x164c>)
 8003b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b9e:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <regelschritt+0x164c>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fd30 	bl	8000608 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
		e_z[1] * e_z[1] +
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <regelschritt+0x164c>)
 8003bb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <regelschritt+0x164c>)
 8003bb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003bbc:	f7fc fd24 	bl	8000608 <__aeabi_dmul>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
		e_z[0] * e_z[0] +
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f7fc fb68 	bl	800029c <__adddf3>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
		e_z[2] * e_z[2] +
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <regelschritt+0x164c>)
 8003bd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <regelschritt+0x164c>)
 8003bdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003be0:	e008      	b.n	8003bf4 <regelschritt+0x1654>
 8003be2:	bf00      	nop
 8003be4:	20001180 	.word	0x20001180
 8003be8:	200010a8 	.word	0x200010a8
 8003bec:	20001168 	.word	0x20001168
 8003bf0:	20001268 	.word	0x20001268
 8003bf4:	f7fc fd08 	bl	8000608 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
		e_z[1] * e_z[1] +
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f7fc fb4c 	bl	800029c <__adddf3>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	461d      	mov	r5, r3
		e_z_d[0] * e_z_d[0] +
 8003c0c:	4bb2      	ldr	r3, [pc, #712]	@ (8003ed8 <regelschritt+0x1938>)
 8003c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c12:	4bb1      	ldr	r3, [pc, #708]	@ (8003ed8 <regelschritt+0x1938>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f7fc fcf6 	bl	8000608 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
		e_z[2] * e_z[2] +
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7fc fb3a 	bl	800029c <__adddf3>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
		e_z_d[1] * e_z_d[1] +
 8003c30:	4ba9      	ldr	r3, [pc, #676]	@ (8003ed8 <regelschritt+0x1938>)
 8003c32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c36:	4ba8      	ldr	r3, [pc, #672]	@ (8003ed8 <regelschritt+0x1938>)
 8003c38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c3c:	f7fc fce4 	bl	8000608 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
		e_z_d[0] * e_z_d[0] +
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	f7fc fb28 	bl	800029c <__adddf3>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	461d      	mov	r5, r3
		e_z_d[2] * e_z_d[2]
 8003c54:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed8 <regelschritt+0x1938>)
 8003c56:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ed8 <regelschritt+0x1938>)
 8003c5c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c60:	f7fc fcd2 	bl	8000608 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
	quaternionfehler_reduziert.w = quaternionfehler_reduziert_dot_part + sqrt(
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fb16 	bl	800029c <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	ec43 2b17 	vmov	d7, r2, r3
 8003c78:	eeb0 0a47 	vmov.f32	s0, s14
 8003c7c:	eef0 0a67 	vmov.f32	s1, s15
 8003c80:	f01b fc7a 	bl	801f578 <sqrt>
 8003c84:	ec51 0b10 	vmov	r0, r1, d0
 8003c88:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8003c8c:	f7fc fb06 	bl	800029c <__adddf3>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4991      	ldr	r1, [pc, #580]	@ (8003edc <regelschritt+0x193c>)
 8003c96:	e9c1 2300 	strd	r2, r3, [r1]
	);

	quaternionfehler_reduziert.x = (
		e_z[1] * e_z_d[2] -
 8003c9a:	4b91      	ldr	r3, [pc, #580]	@ (8003ee0 <regelschritt+0x1940>)
 8003c9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed8 <regelschritt+0x1938>)
 8003ca2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ca6:	f7fc fcaf 	bl	8000608 <__aeabi_dmul>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	461d      	mov	r5, r3
		e_z[2] * e_z_d[1]
 8003cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee0 <regelschritt+0x1940>)
 8003cb4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003cb8:	4b87      	ldr	r3, [pc, #540]	@ (8003ed8 <regelschritt+0x1938>)
 8003cba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cbe:	f7fc fca3 	bl	8000608 <__aeabi_dmul>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
		e_z[1] * e_z_d[2] -
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f7fc fae5 	bl	8000298 <__aeabi_dsub>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
	quaternionfehler_reduziert.x = (
 8003cd2:	4982      	ldr	r1, [pc, #520]	@ (8003edc <regelschritt+0x193c>)
 8003cd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	);
	quaternionfehler_reduziert.y = (
		e_z[2] * e_z_d[0] -
 8003cd8:	4b81      	ldr	r3, [pc, #516]	@ (8003ee0 <regelschritt+0x1940>)
 8003cda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003cde:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed8 <regelschritt+0x1938>)
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f7fc fc90 	bl	8000608 <__aeabi_dmul>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
		e_z[0] * e_z_d[2]
 8003cf0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee0 <regelschritt+0x1940>)
 8003cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf6:	4b78      	ldr	r3, [pc, #480]	@ (8003ed8 <regelschritt+0x1938>)
 8003cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cfc:	f7fc fc84 	bl	8000608 <__aeabi_dmul>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
		e_z[2] * e_z_d[0] -
 8003d04:	4620      	mov	r0, r4
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc fac6 	bl	8000298 <__aeabi_dsub>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
	quaternionfehler_reduziert.y = (
 8003d10:	4972      	ldr	r1, [pc, #456]	@ (8003edc <regelschritt+0x193c>)
 8003d12:	e9c1 2304 	strd	r2, r3, [r1, #16]
	);
	quaternionfehler_reduziert.z = (
		e_z[0] * e_z_d[1] -
 8003d16:	4b72      	ldr	r3, [pc, #456]	@ (8003ee0 <regelschritt+0x1940>)
 8003d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d1c:	4b6e      	ldr	r3, [pc, #440]	@ (8003ed8 <regelschritt+0x1938>)
 8003d1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d22:	f7fc fc71 	bl	8000608 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	461d      	mov	r5, r3
		e_z[1] * e_z_d[0]
 8003d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee0 <regelschritt+0x1940>)
 8003d30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003d34:	4b68      	ldr	r3, [pc, #416]	@ (8003ed8 <regelschritt+0x1938>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f7fc fc65 	bl	8000608 <__aeabi_dmul>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
		e_z[0] * e_z_d[1] -
 8003d42:	4620      	mov	r0, r4
 8003d44:	4629      	mov	r1, r5
 8003d46:	f7fc faa7 	bl	8000298 <__aeabi_dsub>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
	quaternionfehler_reduziert.z = (
 8003d4e:	4963      	ldr	r1, [pc, #396]	@ (8003edc <regelschritt+0x193c>)
 8003d50:	e9c1 2306 	strd	r2, r3, [r1, #24]
	);

	qe_norm = normQuaternion(quaternionfehler_reduziert);
 8003d54:	4b61      	ldr	r3, [pc, #388]	@ (8003edc <regelschritt+0x193c>)
 8003d56:	ed93 4b00 	vldr	d4, [r3]
 8003d5a:	ed93 5b02 	vldr	d5, [r3, #8]
 8003d5e:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d62:	ed93 7b06 	vldr	d7, [r3, #24]
 8003d66:	eeb0 0a44 	vmov.f32	s0, s8
 8003d6a:	eef0 0a64 	vmov.f32	s1, s9
 8003d6e:	eeb0 1a45 	vmov.f32	s2, s10
 8003d72:	eef0 1a65 	vmov.f32	s3, s11
 8003d76:	eeb0 2a46 	vmov.f32	s4, s12
 8003d7a:	eef0 2a66 	vmov.f32	s5, s13
 8003d7e:	eeb0 3a47 	vmov.f32	s6, s14
 8003d82:	eef0 3a67 	vmov.f32	s7, s15
 8003d86:	f7fd fd91 	bl	80018ac <normQuaternion>
 8003d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8003d8e:	eef0 7a60 	vmov.f32	s15, s1
 8003d92:	4b54      	ldr	r3, [pc, #336]	@ (8003ee4 <regelschritt+0x1944>)
 8003d94:	ed83 7b00 	vstr	d7, [r3]

	quaternionfehler_reduziert.w /= qe_norm;
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <regelschritt+0x193c>)
 8003d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d9e:	4b51      	ldr	r3, [pc, #324]	@ (8003ee4 <regelschritt+0x1944>)
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f7fc fd5a 	bl	800085c <__aeabi_ddiv>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	494b      	ldr	r1, [pc, #300]	@ (8003edc <regelschritt+0x193c>)
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
	quaternionfehler_reduziert.x /= qe_norm;
 8003db2:	4b4a      	ldr	r3, [pc, #296]	@ (8003edc <regelschritt+0x193c>)
 8003db4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003db8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee4 <regelschritt+0x1944>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fd4d 	bl	800085c <__aeabi_ddiv>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4945      	ldr	r1, [pc, #276]	@ (8003edc <regelschritt+0x193c>)
 8003dc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	quaternionfehler_reduziert.y /= qe_norm;
 8003dcc:	4b43      	ldr	r3, [pc, #268]	@ (8003edc <regelschritt+0x193c>)
 8003dce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003dd2:	4b44      	ldr	r3, [pc, #272]	@ (8003ee4 <regelschritt+0x1944>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fd40 	bl	800085c <__aeabi_ddiv>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	493e      	ldr	r1, [pc, #248]	@ (8003edc <regelschritt+0x193c>)
 8003de2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	quaternionfehler_reduziert.z /= qe_norm;
 8003de6:	4b3d      	ldr	r3, [pc, #244]	@ (8003edc <regelschritt+0x193c>)
 8003de8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003dec:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee4 <regelschritt+0x1944>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc fd33 	bl	800085c <__aeabi_ddiv>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4938      	ldr	r1, [pc, #224]	@ (8003edc <regelschritt+0x193c>)
 8003dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// Reduced desired quaternion (reduced because it doesn't consider the desired Yaw angle)
	// Mixed desired quaternion (between reduced and full) and resulting desired quaternion qd

	Quaternion qd_reduziert;
	qd_reduziert.w = (
		quaternionfehler_reduziert.w * drehlage.w -
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <regelschritt+0x193c>)
 8003e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e06:	4b38      	ldr	r3, [pc, #224]	@ (8003ee8 <regelschritt+0x1948>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc fbfc 	bl	8000608 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4614      	mov	r4, r2
 8003e16:	461d      	mov	r5, r3
		quaternionfehler_reduziert.x * drehlage.x -
 8003e18:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <regelschritt+0x193c>)
 8003e1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003e1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ee8 <regelschritt+0x1948>)
 8003e20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e24:	f7fc fbf0 	bl	8000608 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
		quaternionfehler_reduziert.w * drehlage.w -
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4629      	mov	r1, r5
 8003e30:	f7fc fa32 	bl	8000298 <__aeabi_dsub>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	461d      	mov	r5, r3
		quaternionfehler_reduziert.y * drehlage.y -
 8003e3c:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <regelschritt+0x193c>)
 8003e3e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e42:	4b29      	ldr	r3, [pc, #164]	@ (8003ee8 <regelschritt+0x1948>)
 8003e44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e48:	f7fc fbde 	bl	8000608 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
		quaternionfehler_reduziert.x * drehlage.x -
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc fa20 	bl	8000298 <__aeabi_dsub>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	461d      	mov	r5, r3
		quaternionfehler_reduziert.z * drehlage.z
 8003e60:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <regelschritt+0x193c>)
 8003e62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <regelschritt+0x1948>)
 8003e68:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003e6c:	f7fc fbcc 	bl	8000608 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
		quaternionfehler_reduziert.y * drehlage.y -
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc fa0e 	bl	8000298 <__aeabi_dsub>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
	qd_reduziert.w = (
 8003e80:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8003e84:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8003e88:	e9c1 2300 	strd	r2, r3, [r1]
	);
	qd_reduziert.x = (
		quaternionfehler_reduziert.x * drehlage.w +
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <regelschritt+0x193c>)
 8003e8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003e92:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <regelschritt+0x1948>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc fbb6 	bl	8000608 <__aeabi_dmul>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	461d      	mov	r5, r3
		quaternionfehler_reduziert.w * drehlage.x -
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <regelschritt+0x193c>)
 8003ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <regelschritt+0x1948>)
 8003eac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003eb0:	f7fc fbaa 	bl	8000608 <__aeabi_dmul>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
		quaternionfehler_reduziert.x * drehlage.w +
 8003eb8:	4620      	mov	r0, r4
 8003eba:	4629      	mov	r1, r5
 8003ebc:	f7fc f9ee 	bl	800029c <__adddf3>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	461d      	mov	r5, r3
		quaternionfehler_reduziert.z * drehlage.y +
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <regelschritt+0x193c>)
 8003eca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <regelschritt+0x1948>)
 8003ed0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ed4:	e00a      	b.n	8003eec <regelschritt+0x194c>
 8003ed6:	bf00      	nop
 8003ed8:	20001180 	.word	0x20001180
 8003edc:	20001198 	.word	0x20001198
 8003ee0:	20001168 	.word	0x20001168
 8003ee4:	20001270 	.word	0x20001270
 8003ee8:	20000f88 	.word	0x20000f88
 8003eec:	f7fc fb8c 	bl	8000608 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
		quaternionfehler_reduziert.w * drehlage.x -
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc f9ce 	bl	8000298 <__aeabi_dsub>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	461d      	mov	r5, r3
		quaternionfehler_reduziert.y * drehlage.z
 8003f04:	4bcc      	ldr	r3, [pc, #816]	@ (8004238 <regelschritt+0x1c98>)
 8003f06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003f0a:	4bcc      	ldr	r3, [pc, #816]	@ (800423c <regelschritt+0x1c9c>)
 8003f0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f10:	f7fc fb7a 	bl	8000608 <__aeabi_dmul>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
		quaternionfehler_reduziert.z * drehlage.y +
 8003f18:	4620      	mov	r0, r4
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	f7fc f9be 	bl	800029c <__adddf3>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
	qd_reduziert.x = (
 8003f24:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8003f28:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8003f2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	);
	qd_reduziert.y = (
		quaternionfehler_reduziert.y * drehlage.w +
 8003f30:	4bc1      	ldr	r3, [pc, #772]	@ (8004238 <regelschritt+0x1c98>)
 8003f32:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003f36:	4bc1      	ldr	r3, [pc, #772]	@ (800423c <regelschritt+0x1c9c>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f7fc fb64 	bl	8000608 <__aeabi_dmul>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	461d      	mov	r5, r3
		quaternionfehler_reduziert.z * drehlage.x +
 8003f48:	4bbb      	ldr	r3, [pc, #748]	@ (8004238 <regelschritt+0x1c98>)
 8003f4a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003f4e:	4bbb      	ldr	r3, [pc, #748]	@ (800423c <regelschritt+0x1c9c>)
 8003f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f54:	f7fc fb58 	bl	8000608 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
		quaternionfehler_reduziert.y * drehlage.w +
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	f7fc f99c 	bl	800029c <__adddf3>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4614      	mov	r4, r2
 8003f6a:	461d      	mov	r5, r3
		quaternionfehler_reduziert.w * drehlage.y -
 8003f6c:	4bb2      	ldr	r3, [pc, #712]	@ (8004238 <regelschritt+0x1c98>)
 8003f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f72:	4bb2      	ldr	r3, [pc, #712]	@ (800423c <regelschritt+0x1c9c>)
 8003f74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f78:	f7fc fb46 	bl	8000608 <__aeabi_dmul>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
		quaternionfehler_reduziert.z * drehlage.x +
 8003f80:	4620      	mov	r0, r4
 8003f82:	4629      	mov	r1, r5
 8003f84:	f7fc f98a 	bl	800029c <__adddf3>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	461d      	mov	r5, r3
		quaternionfehler_reduziert.x * drehlage.z
 8003f90:	4ba9      	ldr	r3, [pc, #676]	@ (8004238 <regelschritt+0x1c98>)
 8003f92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003f96:	4ba9      	ldr	r3, [pc, #676]	@ (800423c <regelschritt+0x1c9c>)
 8003f98:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f9c:	f7fc fb34 	bl	8000608 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
		quaternionfehler_reduziert.w * drehlage.y -
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	f7fc f976 	bl	8000298 <__aeabi_dsub>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
	qd_reduziert.y = (
 8003fb0:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8003fb4:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8003fb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	);
	qd_reduziert.z = (
		quaternionfehler_reduziert.z * drehlage.w -
 8003fbc:	4b9e      	ldr	r3, [pc, #632]	@ (8004238 <regelschritt+0x1c98>)
 8003fbe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800423c <regelschritt+0x1c9c>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc fb1e 	bl	8000608 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
		quaternionfehler_reduziert.y * drehlage.x +
 8003fd4:	4b98      	ldr	r3, [pc, #608]	@ (8004238 <regelschritt+0x1c98>)
 8003fd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003fda:	4b98      	ldr	r3, [pc, #608]	@ (800423c <regelschritt+0x1c9c>)
 8003fdc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fe0:	f7fc fb12 	bl	8000608 <__aeabi_dmul>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
		quaternionfehler_reduziert.z * drehlage.w -
 8003fe8:	4620      	mov	r0, r4
 8003fea:	4629      	mov	r1, r5
 8003fec:	f7fc f954 	bl	8000298 <__aeabi_dsub>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
		quaternionfehler_reduziert.x * drehlage.y +
 8003ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8004238 <regelschritt+0x1c98>)
 8003ffa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800423c <regelschritt+0x1c9c>)
 8004000:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004004:	f7fc fb00 	bl	8000608 <__aeabi_dmul>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
		quaternionfehler_reduziert.y * drehlage.x +
 800400c:	4620      	mov	r0, r4
 800400e:	4629      	mov	r1, r5
 8004010:	f7fc f944 	bl	800029c <__adddf3>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4614      	mov	r4, r2
 800401a:	461d      	mov	r5, r3
		quaternionfehler_reduziert.w * drehlage.z
 800401c:	4b86      	ldr	r3, [pc, #536]	@ (8004238 <regelschritt+0x1c98>)
 800401e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004022:	4b86      	ldr	r3, [pc, #536]	@ (800423c <regelschritt+0x1c9c>)
 8004024:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004028:	f7fc faee 	bl	8000608 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
		quaternionfehler_reduziert.x * drehlage.y +
 8004030:	4620      	mov	r0, r4
 8004032:	4629      	mov	r1, r5
 8004034:	f7fc f932 	bl	800029c <__adddf3>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
	qd_reduziert.z = (
 800403c:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8004040:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8004044:	e9c1 2306 	strd	r2, r3, [r1, #24]
	);

	Quaternion qd_reduziert_inverse = inverseQuaternion(qd_reduziert);
 8004048:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800404c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004050:	ed93 4b00 	vldr	d4, [r3]
 8004054:	ed93 5b02 	vldr	d5, [r3, #8]
 8004058:	ed93 6b04 	vldr	d6, [r3, #16]
 800405c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004060:	eeb0 0a44 	vmov.f32	s0, s8
 8004064:	eef0 0a64 	vmov.f32	s1, s9
 8004068:	eeb0 1a45 	vmov.f32	s2, s10
 800406c:	eef0 1a65 	vmov.f32	s3, s11
 8004070:	eeb0 2a46 	vmov.f32	s4, s12
 8004074:	eef0 2a66 	vmov.f32	s5, s13
 8004078:	eeb0 3a47 	vmov.f32	s6, s14
 800407c:	eef0 3a67 	vmov.f32	s7, s15
 8004080:	f7fd fc7a 	bl	8001978 <inverseQuaternion>
 8004084:	eeb0 4a40 	vmov.f32	s8, s0
 8004088:	eef0 4a60 	vmov.f32	s9, s1
 800408c:	eeb0 5a41 	vmov.f32	s10, s2
 8004090:	eef0 5a61 	vmov.f32	s11, s3
 8004094:	eeb0 6a42 	vmov.f32	s12, s4
 8004098:	eef0 6a62 	vmov.f32	s13, s5
 800409c:	eeb0 7a43 	vmov.f32	s14, s6
 80040a0:	eef0 7a63 	vmov.f32	s15, s7
 80040a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80040a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040ac:	ed83 4b00 	vstr	d4, [r3]
 80040b0:	ed83 5b02 	vstr	d5, [r3, #8]
 80040b4:	ed83 6b04 	vstr	d6, [r3, #16]
 80040b8:	ed83 7b06 	vstr	d7, [r3, #24]

	Quaternion q_mix = kreuzproduktQuaternion(qd_reduziert_inverse, quaternion_ganz);
 80040bc:	ed97 4b54 	vldr	d4, [r7, #336]	@ 0x150
 80040c0:	ed97 5b56 	vldr	d5, [r7, #344]	@ 0x158
 80040c4:	ed97 6b58 	vldr	d6, [r7, #352]	@ 0x160
 80040c8:	ed97 7b5a 	vldr	d7, [r7, #360]	@ 0x168
 80040cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80040d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040d4:	ed93 0b00 	vldr	d0, [r3]
 80040d8:	ed93 1b02 	vldr	d1, [r3, #8]
 80040dc:	ed93 2b04 	vldr	d2, [r3, #16]
 80040e0:	ed93 3b06 	vldr	d3, [r3, #24]
 80040e4:	f7fd fd55 	bl	8001b92 <kreuzproduktQuaternion>
 80040e8:	eeb0 4a40 	vmov.f32	s8, s0
 80040ec:	eef0 4a60 	vmov.f32	s9, s1
 80040f0:	eeb0 5a41 	vmov.f32	s10, s2
 80040f4:	eef0 5a61 	vmov.f32	s11, s3
 80040f8:	eeb0 6a42 	vmov.f32	s12, s4
 80040fc:	eef0 6a62 	vmov.f32	s13, s5
 8004100:	eeb0 7a43 	vmov.f32	s14, s6
 8004104:	eef0 7a63 	vmov.f32	s15, s7
 8004108:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800410c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004110:	ed83 4b00 	vstr	d4, [r3]
 8004114:	ed83 5b02 	vstr	d5, [r3, #8]
 8004118:	ed83 6b04 	vstr	d6, [r3, #16]
 800411c:	ed83 7b06 	vstr	d7, [r3, #24]


	if (q_mix.w < -1.0) {
 8004120:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004124:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	4b43      	ldr	r3, [pc, #268]	@ (8004240 <regelschritt+0x1ca0>)
 8004132:	f7fc fcdb 	bl	8000aec <__aeabi_dcmplt>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <regelschritt+0x1bae>
		q_mix.w = -1.0;
 800413c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004140:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	4b3d      	ldr	r3, [pc, #244]	@ (8004240 <regelschritt+0x1ca0>)
 800414a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (q_mix.w > 1.0) {
 800414e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004152:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	4b39      	ldr	r3, [pc, #228]	@ (8004244 <regelschritt+0x1ca4>)
 8004160:	f7fc fce2 	bl	8000b28 <__aeabi_dcmpgt>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <regelschritt+0x1bdc>
		q_mix.w = 1.0;
 800416a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800416e:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	4b33      	ldr	r3, [pc, #204]	@ (8004244 <regelschritt+0x1ca4>)
 8004178:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (q_mix.z < -1.0) {
 800417c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004180:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004184:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	4b2c      	ldr	r3, [pc, #176]	@ (8004240 <regelschritt+0x1ca0>)
 800418e:	f7fc fcad 	bl	8000aec <__aeabi_dcmplt>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <regelschritt+0x1c0a>
		q_mix.z = -1.0;
 8004198:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800419c:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <regelschritt+0x1ca0>)
 80041a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (q_mix.z > 1.0) {
 80041aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80041ae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80041b2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	4b22      	ldr	r3, [pc, #136]	@ (8004244 <regelschritt+0x1ca4>)
 80041bc:	f7fc fcb4 	bl	8000b28 <__aeabi_dcmpgt>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <regelschritt+0x1c38>
		q_mix.z = 1.0;
 80041c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80041ca:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004244 <regelschritt+0x1ca4>)
 80041d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	Quaternion qd;
	qd.w = (
		qd_reduziert.w * cos(yaw_w * acos(q_mix.w)) -
 80041d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80041dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80041e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80041e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80041e8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80041ec:	ed93 7b00 	vldr	d7, [r3]
 80041f0:	eeb0 0a47 	vmov.f32	s0, s14
 80041f4:	eef0 0a67 	vmov.f32	s1, s15
 80041f8:	f01b f8e4 	bl	801f3c4 <acos>
 80041fc:	ec51 0b10 	vmov	r0, r1, d0
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <regelschritt+0x1ca8>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f7fc f9ff 	bl	8000608 <__aeabi_dmul>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	ec43 2b17 	vmov	d7, r2, r3
 8004212:	eeb0 0a47 	vmov.f32	s0, s14
 8004216:	eef0 0a67 	vmov.f32	s1, s15
 800421a:	f01b f9d9 	bl	801f5d0 <cos>
 800421e:	ec53 2b10 	vmov	r2, r3, d0
 8004222:	4620      	mov	r0, r4
 8004224:	4629      	mov	r1, r5
 8004226:	f7fc f9ef 	bl	8000608 <__aeabi_dmul>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4690      	mov	r8, r2
 8004230:	4699      	mov	r9, r3
		qd_reduziert.z * sin(yaw_w * asin(q_mix.z))
 8004232:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004236:	e009      	b.n	800424c <regelschritt+0x1cac>
 8004238:	20001198 	.word	0x20001198
 800423c:	20000f88 	.word	0x20000f88
 8004240:	bff00000 	.word	0xbff00000
 8004244:	3ff00000 	.word	0x3ff00000
 8004248:	20001230 	.word	0x20001230
 800424c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004250:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004254:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004258:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800425c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004260:	eeb0 0a47 	vmov.f32	s0, s14
 8004264:	eef0 0a67 	vmov.f32	s1, s15
 8004268:	f01b f8e0 	bl	801f42c <asin>
 800426c:	ec51 0b10 	vmov	r0, r1, d0
 8004270:	4be5      	ldr	r3, [pc, #916]	@ (8004608 <regelschritt+0x2068>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc f9c7 	bl	8000608 <__aeabi_dmul>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	ec43 2b17 	vmov	d7, r2, r3
 8004282:	eeb0 0a47 	vmov.f32	s0, s14
 8004286:	eef0 0a67 	vmov.f32	s1, s15
 800428a:	f01b f9fd 	bl	801f688 <sin>
 800428e:	ec53 2b10 	vmov	r2, r3, d0
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc f9b7 	bl	8000608 <__aeabi_dmul>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
		qd_reduziert.w * cos(yaw_w * acos(q_mix.w)) -
 800429e:	4640      	mov	r0, r8
 80042a0:	4649      	mov	r1, r9
 80042a2:	f7fb fff9 	bl	8000298 <__aeabi_dsub>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
	qd.w = (
 80042aa:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 80042ae:	f5a1 71bc 	sub.w	r1, r1, #376	@ 0x178
 80042b2:	e9c1 2300 	strd	r2, r3, [r1]
	);
	qd.x = (
		qd_reduziert.x * cos(yaw_w * acos(q_mix.w)) +
 80042b6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80042ba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042be:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80042c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80042c6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80042ca:	ed93 7b00 	vldr	d7, [r3]
 80042ce:	eeb0 0a47 	vmov.f32	s0, s14
 80042d2:	eef0 0a67 	vmov.f32	s1, s15
 80042d6:	f01b f875 	bl	801f3c4 <acos>
 80042da:	ec51 0b10 	vmov	r0, r1, d0
 80042de:	4bca      	ldr	r3, [pc, #808]	@ (8004608 <regelschritt+0x2068>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fc f990 	bl	8000608 <__aeabi_dmul>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	ec43 2b17 	vmov	d7, r2, r3
 80042f0:	eeb0 0a47 	vmov.f32	s0, s14
 80042f4:	eef0 0a67 	vmov.f32	s1, s15
 80042f8:	f01b f96a 	bl	801f5d0 <cos>
 80042fc:	ec53 2b10 	vmov	r2, r3, d0
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fc f980 	bl	8000608 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4690      	mov	r8, r2
 800430e:	4699      	mov	r9, r3
		qd_reduziert.y * sin(yaw_w * asin(q_mix.z))
 8004310:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004314:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004318:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800431c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004320:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004324:	ed93 7b06 	vldr	d7, [r3, #24]
 8004328:	eeb0 0a47 	vmov.f32	s0, s14
 800432c:	eef0 0a67 	vmov.f32	s1, s15
 8004330:	f01b f87c 	bl	801f42c <asin>
 8004334:	ec51 0b10 	vmov	r0, r1, d0
 8004338:	4bb3      	ldr	r3, [pc, #716]	@ (8004608 <regelschritt+0x2068>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f7fc f963 	bl	8000608 <__aeabi_dmul>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	ec43 2b17 	vmov	d7, r2, r3
 800434a:	eeb0 0a47 	vmov.f32	s0, s14
 800434e:	eef0 0a67 	vmov.f32	s1, s15
 8004352:	f01b f999 	bl	801f688 <sin>
 8004356:	ec53 2b10 	vmov	r2, r3, d0
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fc f953 	bl	8000608 <__aeabi_dmul>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
		qd_reduziert.x * cos(yaw_w * acos(q_mix.w)) +
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f7fb ff97 	bl	800029c <__adddf3>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
	qd.x = (
 8004372:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8004376:	f5a1 71bc 	sub.w	r1, r1, #376	@ 0x178
 800437a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	);
	qd.y = (
		qd_reduziert.y * cos(yaw_w * acos(q_mix.w)) -
 800437e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004382:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004386:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800438a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800438e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004392:	ed93 7b00 	vldr	d7, [r3]
 8004396:	eeb0 0a47 	vmov.f32	s0, s14
 800439a:	eef0 0a67 	vmov.f32	s1, s15
 800439e:	f01b f811 	bl	801f3c4 <acos>
 80043a2:	ec51 0b10 	vmov	r0, r1, d0
 80043a6:	4b98      	ldr	r3, [pc, #608]	@ (8004608 <regelschritt+0x2068>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fc f92c 	bl	8000608 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	ec43 2b17 	vmov	d7, r2, r3
 80043b8:	eeb0 0a47 	vmov.f32	s0, s14
 80043bc:	eef0 0a67 	vmov.f32	s1, s15
 80043c0:	f01b f906 	bl	801f5d0 <cos>
 80043c4:	ec53 2b10 	vmov	r2, r3, d0
 80043c8:	4620      	mov	r0, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	f7fc f91c 	bl	8000608 <__aeabi_dmul>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4690      	mov	r8, r2
 80043d6:	4699      	mov	r9, r3
		qd_reduziert.x * sin(yaw_w * asin(q_mix.z))
 80043d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80043dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80043e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80043e8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80043ec:	ed93 7b06 	vldr	d7, [r3, #24]
 80043f0:	eeb0 0a47 	vmov.f32	s0, s14
 80043f4:	eef0 0a67 	vmov.f32	s1, s15
 80043f8:	f01b f818 	bl	801f42c <asin>
 80043fc:	ec51 0b10 	vmov	r0, r1, d0
 8004400:	4b81      	ldr	r3, [pc, #516]	@ (8004608 <regelschritt+0x2068>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fc f8ff 	bl	8000608 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	ec43 2b17 	vmov	d7, r2, r3
 8004412:	eeb0 0a47 	vmov.f32	s0, s14
 8004416:	eef0 0a67 	vmov.f32	s1, s15
 800441a:	f01b f935 	bl	801f688 <sin>
 800441e:	ec53 2b10 	vmov	r2, r3, d0
 8004422:	4620      	mov	r0, r4
 8004424:	4629      	mov	r1, r5
 8004426:	f7fc f8ef 	bl	8000608 <__aeabi_dmul>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
		qd_reduziert.y * cos(yaw_w * acos(q_mix.w)) -
 800442e:	4640      	mov	r0, r8
 8004430:	4649      	mov	r1, r9
 8004432:	f7fb ff31 	bl	8000298 <__aeabi_dsub>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
	qd.y = (
 800443a:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 800443e:	f5a1 71bc 	sub.w	r1, r1, #376	@ 0x178
 8004442:	e9c1 2304 	strd	r2, r3, [r1, #16]
	);
	qd.z = (
		qd_reduziert.z * cos(yaw_w * acos(q_mix.w)) +
 8004446:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800444a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800444e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004452:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004456:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800445a:	ed93 7b00 	vldr	d7, [r3]
 800445e:	eeb0 0a47 	vmov.f32	s0, s14
 8004462:	eef0 0a67 	vmov.f32	s1, s15
 8004466:	f01a ffad 	bl	801f3c4 <acos>
 800446a:	ec51 0b10 	vmov	r0, r1, d0
 800446e:	4b66      	ldr	r3, [pc, #408]	@ (8004608 <regelschritt+0x2068>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc f8c8 	bl	8000608 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	ec43 2b17 	vmov	d7, r2, r3
 8004480:	eeb0 0a47 	vmov.f32	s0, s14
 8004484:	eef0 0a67 	vmov.f32	s1, s15
 8004488:	f01b f8a2 	bl	801f5d0 <cos>
 800448c:	ec53 2b10 	vmov	r2, r3, d0
 8004490:	4620      	mov	r0, r4
 8004492:	4629      	mov	r1, r5
 8004494:	f7fc f8b8 	bl	8000608 <__aeabi_dmul>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4690      	mov	r8, r2
 800449e:	4699      	mov	r9, r3
		qd_reduziert.w * sin(yaw_w * asin(q_mix.z))
 80044a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80044a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80044a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80044ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80044b0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80044b4:	ed93 7b06 	vldr	d7, [r3, #24]
 80044b8:	eeb0 0a47 	vmov.f32	s0, s14
 80044bc:	eef0 0a67 	vmov.f32	s1, s15
 80044c0:	f01a ffb4 	bl	801f42c <asin>
 80044c4:	ec51 0b10 	vmov	r0, r1, d0
 80044c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004608 <regelschritt+0x2068>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fc f89b 	bl	8000608 <__aeabi_dmul>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	ec43 2b17 	vmov	d7, r2, r3
 80044da:	eeb0 0a47 	vmov.f32	s0, s14
 80044de:	eef0 0a67 	vmov.f32	s1, s15
 80044e2:	f01b f8d1 	bl	801f688 <sin>
 80044e6:	ec53 2b10 	vmov	r2, r3, d0
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fc f88b 	bl	8000608 <__aeabi_dmul>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
		qd_reduziert.z * cos(yaw_w * acos(q_mix.w)) +
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f7fb fecf 	bl	800029c <__adddf3>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
	qd.z = (
 8004502:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8004506:	f5a1 71bc 	sub.w	r1, r1, #376	@ 0x178
 800450a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	);

	Quaternion drehlage_inverse = inverseQuaternion(drehlage);
 800450e:	4b3f      	ldr	r3, [pc, #252]	@ (800460c <regelschritt+0x206c>)
 8004510:	ed93 4b00 	vldr	d4, [r3]
 8004514:	ed93 5b02 	vldr	d5, [r3, #8]
 8004518:	ed93 6b04 	vldr	d6, [r3, #16]
 800451c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004520:	eeb0 0a44 	vmov.f32	s0, s8
 8004524:	eef0 0a64 	vmov.f32	s1, s9
 8004528:	eeb0 1a45 	vmov.f32	s2, s10
 800452c:	eef0 1a65 	vmov.f32	s3, s11
 8004530:	eeb0 2a46 	vmov.f32	s4, s12
 8004534:	eef0 2a66 	vmov.f32	s5, s13
 8004538:	eeb0 3a47 	vmov.f32	s6, s14
 800453c:	eef0 3a67 	vmov.f32	s7, s15
 8004540:	f7fd fa1a 	bl	8001978 <inverseQuaternion>
 8004544:	eeb0 4a40 	vmov.f32	s8, s0
 8004548:	eef0 4a60 	vmov.f32	s9, s1
 800454c:	eeb0 5a41 	vmov.f32	s10, s2
 8004550:	eef0 5a61 	vmov.f32	s11, s3
 8004554:	eeb0 6a42 	vmov.f32	s12, s4
 8004558:	eef0 6a62 	vmov.f32	s13, s5
 800455c:	eeb0 7a43 	vmov.f32	s14, s6
 8004560:	eef0 7a63 	vmov.f32	s15, s7
 8004564:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004568:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800456c:	ed83 4b00 	vstr	d4, [r3]
 8004570:	ed83 5b02 	vstr	d5, [r3, #8]
 8004574:	ed83 6b04 	vstr	d6, [r3, #16]
 8004578:	ed83 7b06 	vstr	d7, [r3, #24]

	Quaternion drehlagefehler;
	drehlagefehler = kreuzproduktQuaternion(drehlage_inverse, qd);
 800457c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004580:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004584:	ed93 4b00 	vldr	d4, [r3]
 8004588:	ed93 5b02 	vldr	d5, [r3, #8]
 800458c:	ed93 6b04 	vldr	d6, [r3, #16]
 8004590:	ed93 7b06 	vldr	d7, [r3, #24]
 8004594:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004598:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800459c:	ed93 0b00 	vldr	d0, [r3]
 80045a0:	ed93 1b02 	vldr	d1, [r3, #8]
 80045a4:	ed93 2b04 	vldr	d2, [r3, #16]
 80045a8:	ed93 3b06 	vldr	d3, [r3, #24]
 80045ac:	f7fd faf1 	bl	8001b92 <kreuzproduktQuaternion>
 80045b0:	eeb0 4a40 	vmov.f32	s8, s0
 80045b4:	eef0 4a60 	vmov.f32	s9, s1
 80045b8:	eeb0 5a41 	vmov.f32	s10, s2
 80045bc:	eef0 5a61 	vmov.f32	s11, s3
 80045c0:	eeb0 6a42 	vmov.f32	s12, s4
 80045c4:	eef0 6a62 	vmov.f32	s13, s5
 80045c8:	eeb0 7a43 	vmov.f32	s14, s6
 80045cc:	eef0 7a63 	vmov.f32	s15, s7
 80045d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80045d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045d8:	ed83 4b00 	vstr	d4, [r3]
 80045dc:	ed83 5b02 	vstr	d5, [r3, #8]
 80045e0:	ed83 6b04 	vstr	d6, [r3, #16]
 80045e4:	ed83 7b06 	vstr	d7, [r3, #24]

	if (drehlagefehler.w > 0) {
 80045e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80045ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	f7fc fa94 	bl	8000b28 <__aeabi_dcmpgt>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d052      	beq.n	80046ac <regelschritt+0x210c>
 8004606:	e003      	b.n	8004610 <regelschritt+0x2070>
 8004608:	20001230 	.word	0x20001230
 800460c:	20000f88 	.word	0x20000f88
		drehratensollwert.rollen = (2.0 * drehlagefehler.x * attitute_p_gain[0]);
 8004610:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004614:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004618:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	f7fb fe3c 	bl	800029c <__adddf3>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <regelschritt+0x2104>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fb ffe9 	bl	8000608 <__aeabi_dmul>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	491b      	ldr	r1, [pc, #108]	@ (80046a8 <regelschritt+0x2108>)
 800463c:	e9c1 2300 	strd	r2, r3, [r1]
		drehratensollwert.nicken = (2.0 * drehlagefehler.y * attitute_p_gain[1]);
 8004640:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004644:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004648:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	f7fb fe24 	bl	800029c <__adddf3>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	4b11      	ldr	r3, [pc, #68]	@ (80046a4 <regelschritt+0x2104>)
 800465e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004662:	f7fb ffd1 	bl	8000608 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	490f      	ldr	r1, [pc, #60]	@ (80046a8 <regelschritt+0x2108>)
 800466c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		drehratensollwert.gieren = (2.0 * drehlagefehler.z * attitute_p_gain[2]);
 8004670:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004674:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004678:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	f7fb fe0c 	bl	800029c <__adddf3>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <regelschritt+0x2104>)
 800468e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004692:	f7fb ffb9 	bl	8000608 <__aeabi_dmul>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4903      	ldr	r1, [pc, #12]	@ (80046a8 <regelschritt+0x2108>)
 800469c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80046a0:	e05e      	b.n	8004760 <regelschritt+0x21c0>
 80046a2:	bf00      	nop
 80046a4:	20000108 	.word	0x20000108
 80046a8:	200010c0 	.word	0x200010c0
	} else {
		drehratensollwert.rollen = -(2.0 * drehlagefehler.x * attitute_p_gain[0]);
 80046ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80046b0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	f7fb fdee 	bl	800029c <__adddf3>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	4bb9      	ldr	r3, [pc, #740]	@ (80049b0 <regelschritt+0x2410>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fb ff9b 	bl	8000608 <__aeabi_dmul>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	613a      	str	r2, [r7, #16]
 80046d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	4bb5      	ldr	r3, [pc, #724]	@ (80049b4 <regelschritt+0x2414>)
 80046e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80046e4:	ed83 7b00 	vstr	d7, [r3]
		drehratensollwert.nicken = -(2.0 * drehlagefehler.y * attitute_p_gain[1]);
 80046e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80046ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	f7fb fdd0 	bl	800029c <__adddf3>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	4baa      	ldr	r3, [pc, #680]	@ (80049b0 <regelschritt+0x2410>)
 8004706:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800470a:	f7fb ff7d 	bl	8000608 <__aeabi_dmul>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	60ba      	str	r2, [r7, #8]
 8004714:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	4ba6      	ldr	r3, [pc, #664]	@ (80049b4 <regelschritt+0x2414>)
 800471c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004720:	ed83 7b02 	vstr	d7, [r3, #8]
		drehratensollwert.gieren = -(2.0 * drehlagefehler.z * attitute_p_gain[2]);
 8004724:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8004728:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800472c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	f7fb fdb2 	bl	800029c <__adddf3>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	4b9b      	ldr	r3, [pc, #620]	@ (80049b0 <regelschritt+0x2410>)
 8004742:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004746:	f7fb ff5f 	bl	8000608 <__aeabi_dmul>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	603a      	str	r2, [r7, #0]
 8004750:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	4b97      	ldr	r3, [pc, #604]	@ (80049b4 <regelschritt+0x2414>)
 8004758:	ed97 7b00 	vldr	d7, [r7]
 800475c:	ed83 7b04 	vstr	d7, [r3, #16]
	}

	// Rate Control
	drehratenfehler.rollen = drehratensollwert.rollen - drehrate.rollen;
 8004760:	4b94      	ldr	r3, [pc, #592]	@ (80049b4 <regelschritt+0x2414>)
 8004762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004766:	4b94      	ldr	r3, [pc, #592]	@ (80049b8 <regelschritt+0x2418>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb fd94 	bl	8000298 <__aeabi_dsub>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4991      	ldr	r1, [pc, #580]	@ (80049bc <regelschritt+0x241c>)
 8004776:	e9c1 2300 	strd	r2, r3, [r1]
	drehratenstellwert.rollen = (
		rate_p_gain[0] * drehratenfehler.rollen -
 800477a:	4b91      	ldr	r3, [pc, #580]	@ (80049c0 <regelschritt+0x2420>)
 800477c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004780:	4b8e      	ldr	r3, [pc, #568]	@ (80049bc <regelschritt+0x241c>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb ff3f 	bl	8000608 <__aeabi_dmul>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4614      	mov	r4, r2
 8004790:	461d      	mov	r5, r3
		rate_d_gain[0] * omega_dot.rollen
 8004792:	4b8c      	ldr	r3, [pc, #560]	@ (80049c4 <regelschritt+0x2424>)
 8004794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004798:	4b8b      	ldr	r3, [pc, #556]	@ (80049c8 <regelschritt+0x2428>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb ff33 	bl	8000608 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
		rate_p_gain[0] * drehratenfehler.rollen -
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fb fd75 	bl	8000298 <__aeabi_dsub>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
	drehratenstellwert.rollen = (
 80047b2:	4986      	ldr	r1, [pc, #536]	@ (80049cc <regelschritt+0x242c>)
 80047b4:	e9c1 2300 	strd	r2, r3, [r1]
	);
	drehratenfehler.nicken = drehratensollwert.nicken - drehrate.nicken;
 80047b8:	4b7e      	ldr	r3, [pc, #504]	@ (80049b4 <regelschritt+0x2414>)
 80047ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80047be:	4b7e      	ldr	r3, [pc, #504]	@ (80049b8 <regelschritt+0x2418>)
 80047c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047c4:	f7fb fd68 	bl	8000298 <__aeabi_dsub>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	497b      	ldr	r1, [pc, #492]	@ (80049bc <regelschritt+0x241c>)
 80047ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	drehratenstellwert.nicken = (
		rate_p_gain[1] * drehratenfehler.nicken -
 80047d2:	4b7b      	ldr	r3, [pc, #492]	@ (80049c0 <regelschritt+0x2420>)
 80047d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80047d8:	4b78      	ldr	r3, [pc, #480]	@ (80049bc <regelschritt+0x241c>)
 80047da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047de:	f7fb ff13 	bl	8000608 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4614      	mov	r4, r2
 80047e8:	461d      	mov	r5, r3
		rate_d_gain[1] * omega_dot.nicken
 80047ea:	4b76      	ldr	r3, [pc, #472]	@ (80049c4 <regelschritt+0x2424>)
 80047ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80047f0:	4b75      	ldr	r3, [pc, #468]	@ (80049c8 <regelschritt+0x2428>)
 80047f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047f6:	f7fb ff07 	bl	8000608 <__aeabi_dmul>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
		rate_p_gain[1] * drehratenfehler.nicken -
 80047fe:	4620      	mov	r0, r4
 8004800:	4629      	mov	r1, r5
 8004802:	f7fb fd49 	bl	8000298 <__aeabi_dsub>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
	drehratenstellwert.nicken = (
 800480a:	4970      	ldr	r1, [pc, #448]	@ (80049cc <regelschritt+0x242c>)
 800480c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	);
	drehratenfehler.gieren = drehratensollwert.gieren - drehrate.gieren;
 8004810:	4b68      	ldr	r3, [pc, #416]	@ (80049b4 <regelschritt+0x2414>)
 8004812:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004816:	4b68      	ldr	r3, [pc, #416]	@ (80049b8 <regelschritt+0x2418>)
 8004818:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800481c:	f7fb fd3c 	bl	8000298 <__aeabi_dsub>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4965      	ldr	r1, [pc, #404]	@ (80049bc <regelschritt+0x241c>)
 8004826:	e9c1 2304 	strd	r2, r3, [r1, #16]
	drehratenstellwert.gieren = (
		rate_p_gain[2] * drehratenfehler.gieren -
 800482a:	4b65      	ldr	r3, [pc, #404]	@ (80049c0 <regelschritt+0x2420>)
 800482c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004830:	4b62      	ldr	r3, [pc, #392]	@ (80049bc <regelschritt+0x241c>)
 8004832:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004836:	f7fb fee7 	bl	8000608 <__aeabi_dmul>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4614      	mov	r4, r2
 8004840:	461d      	mov	r5, r3
		rate_d_gain[2] * omega_dot.gieren
 8004842:	4b60      	ldr	r3, [pc, #384]	@ (80049c4 <regelschritt+0x2424>)
 8004844:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004848:	4b5f      	ldr	r3, [pc, #380]	@ (80049c8 <regelschritt+0x2428>)
 800484a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800484e:	f7fb fedb 	bl	8000608 <__aeabi_dmul>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
		rate_p_gain[2] * drehratenfehler.gieren -
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fd1d 	bl	8000298 <__aeabi_dsub>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
	drehratenstellwert.gieren = (
 8004862:	495a      	ldr	r1, [pc, #360]	@ (80049cc <regelschritt+0x242c>)
 8004864:	e9c1 2304 	strd	r2, r3, [r1, #16]
	);

	sollschub_norm = sqrt(
		pow(sollschub[0], 2) +
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <regelschritt+0x2430>)
 800486a:	ed93 7b00 	vldr	d7, [r3]
 800486e:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 80049a8 <regelschritt+0x2408>
 8004872:	eeb0 0a47 	vmov.f32	s0, s14
 8004876:	eef0 0a67 	vmov.f32	s1, s15
 800487a:	f01a fe0d 	bl	801f498 <pow>
 800487e:	ec55 4b10 	vmov	r4, r5, d0
		pow(sollschub[1], 2) +
 8004882:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <regelschritt+0x2430>)
 8004884:	ed93 7b02 	vldr	d7, [r3, #8]
 8004888:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 80049a8 <regelschritt+0x2408>
 800488c:	eeb0 0a47 	vmov.f32	s0, s14
 8004890:	eef0 0a67 	vmov.f32	s1, s15
 8004894:	f01a fe00 	bl	801f498 <pow>
 8004898:	ec53 2b10 	vmov	r2, r3, d0
		pow(sollschub[0], 2) +
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb fcfc 	bl	800029c <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
		pow(sollschub[2], 2)
 80048ac:	4b48      	ldr	r3, [pc, #288]	@ (80049d0 <regelschritt+0x2430>)
 80048ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80048b2:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 80049a8 <regelschritt+0x2408>
 80048b6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ba:	eef0 0a67 	vmov.f32	s1, s15
 80048be:	f01a fdeb 	bl	801f498 <pow>
 80048c2:	ec53 2b10 	vmov	r2, r3, d0
	sollschub_norm = sqrt(
 80048c6:	4620      	mov	r0, r4
 80048c8:	4629      	mov	r1, r5
 80048ca:	f7fb fce7 	bl	800029c <__adddf3>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	ec43 2b17 	vmov	d7, r2, r3
 80048d6:	eeb0 0a47 	vmov.f32	s0, s14
 80048da:	eef0 0a67 	vmov.f32	s1, s15
 80048de:	f01a fe4b 	bl	801f578 <sqrt>
 80048e2:	eeb0 7a40 	vmov.f32	s14, s0
 80048e6:	eef0 7a60 	vmov.f32	s15, s1
 80048ea:	4b3a      	ldr	r3, [pc, #232]	@ (80049d4 <regelschritt+0x2434>)
 80048ec:	ed83 7b00 	vstr	d7, [r3]
	);

	w_cmd[M1] = (
		mixerFM[0][0] * sollschub_norm +
 80048f0:	4b39      	ldr	r3, [pc, #228]	@ (80049d8 <regelschritt+0x2438>)
 80048f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048f6:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <regelschritt+0x2434>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fe84 	bl	8000608 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4614      	mov	r4, r2
 8004906:	461d      	mov	r5, r3
		mixerFM[0][1] * drehratenstellwert.rollen +
 8004908:	4b33      	ldr	r3, [pc, #204]	@ (80049d8 <regelschritt+0x2438>)
 800490a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800490e:	4b2f      	ldr	r3, [pc, #188]	@ (80049cc <regelschritt+0x242c>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fe78 	bl	8000608 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
		mixerFM[0][0] * sollschub_norm +
 800491c:	4620      	mov	r0, r4
 800491e:	4629      	mov	r1, r5
 8004920:	f7fb fcbc 	bl	800029c <__adddf3>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4614      	mov	r4, r2
 800492a:	461d      	mov	r5, r3
		mixerFM[0][2] * drehratenstellwert.nicken +
 800492c:	4b2a      	ldr	r3, [pc, #168]	@ (80049d8 <regelschritt+0x2438>)
 800492e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004932:	4b26      	ldr	r3, [pc, #152]	@ (80049cc <regelschritt+0x242c>)
 8004934:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004938:	f7fb fe66 	bl	8000608 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
		mixerFM[0][1] * drehratenstellwert.rollen +
 8004940:	4620      	mov	r0, r4
 8004942:	4629      	mov	r1, r5
 8004944:	f7fb fcaa 	bl	800029c <__adddf3>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
		mixerFM[0][3] * drehratenstellwert.gieren
 8004950:	4b21      	ldr	r3, [pc, #132]	@ (80049d8 <regelschritt+0x2438>)
 8004952:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004956:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <regelschritt+0x242c>)
 8004958:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800495c:	f7fb fe54 	bl	8000608 <__aeabi_dmul>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
		mixerFM[0][2] * drehratenstellwert.nicken +
 8004964:	4620      	mov	r0, r4
 8004966:	4629      	mov	r1, r5
 8004968:	f7fb fc98 	bl	800029c <__adddf3>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
	w_cmd[M1] = (
 8004970:	491a      	ldr	r1, [pc, #104]	@ (80049dc <regelschritt+0x243c>)
 8004972:	e9c1 2300 	strd	r2, r3, [r1]
	);
	w_cmd[M2] = (
		mixerFM[1][0] * sollschub_norm +
 8004976:	4b18      	ldr	r3, [pc, #96]	@ (80049d8 <regelschritt+0x2438>)
 8004978:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <regelschritt+0x2434>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f7fb fe41 	bl	8000608 <__aeabi_dmul>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4614      	mov	r4, r2
 800498c:	461d      	mov	r5, r3
		mixerFM[1][1] * drehratenstellwert.rollen +
 800498e:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <regelschritt+0x2438>)
 8004990:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004994:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <regelschritt+0x242c>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fe35 	bl	8000608 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	e01d      	b.n	80049e0 <regelschritt+0x2440>
 80049a4:	f3af 8000 	nop.w
 80049a8:	00000000 	.word	0x00000000
 80049ac:	40000000 	.word	0x40000000
 80049b0:	20000108 	.word	0x20000108
 80049b4:	200010c0 	.word	0x200010c0
 80049b8:	20001118 	.word	0x20001118
 80049bc:	20001238 	.word	0x20001238
 80049c0:	200000d8 	.word	0x200000d8
 80049c4:	200000f0 	.word	0x200000f0
 80049c8:	20001148 	.word	0x20001148
 80049cc:	20001250 	.word	0x20001250
 80049d0:	200010a8 	.word	0x200010a8
 80049d4:	20001278 	.word	0x20001278
 80049d8:	20000028 	.word	0x20000028
 80049dc:	200011b8 	.word	0x200011b8
		mixerFM[1][0] * sollschub_norm +
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fc5a 	bl	800029c <__adddf3>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
		mixerFM[1][2] * drehratenstellwert.nicken +
 80049f0:	4b57      	ldr	r3, [pc, #348]	@ (8004b50 <regelschritt+0x25b0>)
 80049f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80049f6:	4b57      	ldr	r3, [pc, #348]	@ (8004b54 <regelschritt+0x25b4>)
 80049f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049fc:	f7fb fe04 	bl	8000608 <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
		mixerFM[1][1] * drehratenstellwert.rollen +
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fc48 	bl	800029c <__adddf3>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
		mixerFM[1][3] * drehratenstellwert.gieren
 8004a14:	4b4e      	ldr	r3, [pc, #312]	@ (8004b50 <regelschritt+0x25b0>)
 8004a16:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8004a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b54 <regelschritt+0x25b4>)
 8004a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a20:	f7fb fdf2 	bl	8000608 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
		mixerFM[1][2] * drehratenstellwert.nicken +
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fc36 	bl	800029c <__adddf3>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
	w_cmd[M2] = (
 8004a34:	4948      	ldr	r1, [pc, #288]	@ (8004b58 <regelschritt+0x25b8>)
 8004a36:	e9c1 2302 	strd	r2, r3, [r1, #8]
	);
	w_cmd[M3] = (
		mixerFM[2][0] * sollschub_norm +
 8004a3a:	4b45      	ldr	r3, [pc, #276]	@ (8004b50 <regelschritt+0x25b0>)
 8004a3c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004a40:	4b46      	ldr	r3, [pc, #280]	@ (8004b5c <regelschritt+0x25bc>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fddf 	bl	8000608 <__aeabi_dmul>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4614      	mov	r4, r2
 8004a50:	461d      	mov	r5, r3
		mixerFM[2][1] * drehratenstellwert.rollen +
 8004a52:	4b3f      	ldr	r3, [pc, #252]	@ (8004b50 <regelschritt+0x25b0>)
 8004a54:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8004a58:	4b3e      	ldr	r3, [pc, #248]	@ (8004b54 <regelschritt+0x25b4>)
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f7fb fdd3 	bl	8000608 <__aeabi_dmul>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
		mixerFM[2][0] * sollschub_norm +
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fb fc17 	bl	800029c <__adddf3>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4614      	mov	r4, r2
 8004a74:	461d      	mov	r5, r3
		mixerFM[2][2] * drehratenstellwert.nicken +
 8004a76:	4b36      	ldr	r3, [pc, #216]	@ (8004b50 <regelschritt+0x25b0>)
 8004a78:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004a7c:	4b35      	ldr	r3, [pc, #212]	@ (8004b54 <regelschritt+0x25b4>)
 8004a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004a82:	f7fb fdc1 	bl	8000608 <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
		mixerFM[2][1] * drehratenstellwert.rollen +
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fb fc05 	bl	800029c <__adddf3>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4614      	mov	r4, r2
 8004a98:	461d      	mov	r5, r3
		mixerFM[2][3] * drehratenstellwert.gieren
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b50 <regelschritt+0x25b0>)
 8004a9c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b54 <regelschritt+0x25b4>)
 8004aa2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004aa6:	f7fb fdaf 	bl	8000608 <__aeabi_dmul>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
		mixerFM[2][2] * drehratenstellwert.nicken +
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fb fbf3 	bl	800029c <__adddf3>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
	w_cmd[M3] = (
 8004aba:	4927      	ldr	r1, [pc, #156]	@ (8004b58 <regelschritt+0x25b8>)
 8004abc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	);
	w_cmd[M4] = (
		mixerFM[3][0] * sollschub_norm +
 8004ac0:	4b23      	ldr	r3, [pc, #140]	@ (8004b50 <regelschritt+0x25b0>)
 8004ac2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8004ac6:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <regelschritt+0x25bc>)
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f7fb fd9c 	bl	8000608 <__aeabi_dmul>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
		mixerFM[3][1] * drehratenstellwert.rollen +
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <regelschritt+0x25b0>)
 8004ada:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8004ade:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <regelschritt+0x25b4>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f7fb fd90 	bl	8000608 <__aeabi_dmul>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
		mixerFM[3][0] * sollschub_norm +
 8004aec:	4620      	mov	r0, r4
 8004aee:	4629      	mov	r1, r5
 8004af0:	f7fb fbd4 	bl	800029c <__adddf3>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	461d      	mov	r5, r3
		mixerFM[3][2] * drehratenstellwert.nicken +
 8004afc:	4b14      	ldr	r3, [pc, #80]	@ (8004b50 <regelschritt+0x25b0>)
 8004afe:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <regelschritt+0x25b4>)
 8004b04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b08:	f7fb fd7e 	bl	8000608 <__aeabi_dmul>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
		mixerFM[3][1] * drehratenstellwert.rollen +
 8004b10:	4620      	mov	r0, r4
 8004b12:	4629      	mov	r1, r5
 8004b14:	f7fb fbc2 	bl	800029c <__adddf3>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	461d      	mov	r5, r3
		mixerFM[3][3] * drehratenstellwert.gieren
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <regelschritt+0x25b0>)
 8004b22:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <regelschritt+0x25b4>)
 8004b28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b2c:	f7fb fd6c 	bl	8000608 <__aeabi_dmul>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
		mixerFM[3][2] * drehratenstellwert.nicken +
 8004b34:	4620      	mov	r0, r4
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7fb fbb0 	bl	800029c <__adddf3>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
	w_cmd[M4] = (
 8004b40:	4905      	ldr	r1, [pc, #20]	@ (8004b58 <regelschritt+0x25b8>)
 8004b42:	e9c1 2306 	strd	r2, r3, [r1, #24]
	);

	for (int i = 0; i < 4; i++) {
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004b4c:	e087      	b.n	8004c5e <regelschritt+0x26be>
 8004b4e:	bf00      	nop
 8004b50:	20000028 	.word	0x20000028
 8004b54:	20001250 	.word	0x20001250
 8004b58:	200011b8 	.word	0x200011b8
 8004b5c:	20001278 	.word	0x20001278
		if (w_cmd[i] < pow(minWMotor, 2)) {
 8004b60:	4ad3      	ldr	r2, [pc, #844]	@ (8004eb0 <regelschritt+0x2910>)
 8004b62:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b6e:	4bd1      	ldr	r3, [pc, #836]	@ (8004eb4 <regelschritt+0x2914>)
 8004b70:	ed93 7b00 	vldr	d7, [r3]
 8004b74:	ed9f 1bca 	vldr	d1, [pc, #808]	@ 8004ea0 <regelschritt+0x2900>
 8004b78:	eeb0 0a47 	vmov.f32	s0, s14
 8004b7c:	eef0 0a67 	vmov.f32	s1, s15
 8004b80:	f01a fc8a 	bl	801f498 <pow>
 8004b84:	ec53 2b10 	vmov	r2, r3, d0
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fb ffae 	bl	8000aec <__aeabi_dcmplt>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d015      	beq.n	8004bc2 <regelschritt+0x2622>
			w_cmd[i] = pow(minWMotor, 2);
 8004b96:	4bc7      	ldr	r3, [pc, #796]	@ (8004eb4 <regelschritt+0x2914>)
 8004b98:	ed93 7b00 	vldr	d7, [r3]
 8004b9c:	ed9f 1bc0 	vldr	d1, [pc, #768]	@ 8004ea0 <regelschritt+0x2900>
 8004ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba4:	eef0 0a67 	vmov.f32	s1, s15
 8004ba8:	f01a fc76 	bl	801f498 <pow>
 8004bac:	eeb0 7a40 	vmov.f32	s14, s0
 8004bb0:	eef0 7a60 	vmov.f32	s15, s1
 8004bb4:	4abe      	ldr	r2, [pc, #760]	@ (8004eb0 <regelschritt+0x2910>)
 8004bb6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	ed83 7b00 	vstr	d7, [r3]
		};
		if (w_cmd[i] > pow(maxWMotor, 2)) {
 8004bc2:	4abb      	ldr	r2, [pc, #748]	@ (8004eb0 <regelschritt+0x2910>)
 8004bc4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004bd0:	4bb9      	ldr	r3, [pc, #740]	@ (8004eb8 <regelschritt+0x2918>)
 8004bd2:	ed93 7b00 	vldr	d7, [r3]
 8004bd6:	ed9f 1bb2 	vldr	d1, [pc, #712]	@ 8004ea0 <regelschritt+0x2900>
 8004bda:	eeb0 0a47 	vmov.f32	s0, s14
 8004bde:	eef0 0a67 	vmov.f32	s1, s15
 8004be2:	f01a fc59 	bl	801f498 <pow>
 8004be6:	ec53 2b10 	vmov	r2, r3, d0
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	f7fb ff9b 	bl	8000b28 <__aeabi_dcmpgt>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <regelschritt+0x2684>
			w_cmd[i] = pow(maxWMotor, 2);
 8004bf8:	4baf      	ldr	r3, [pc, #700]	@ (8004eb8 <regelschritt+0x2918>)
 8004bfa:	ed93 7b00 	vldr	d7, [r3]
 8004bfe:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 8004ea0 <regelschritt+0x2900>
 8004c02:	eeb0 0a47 	vmov.f32	s0, s14
 8004c06:	eef0 0a67 	vmov.f32	s1, s15
 8004c0a:	f01a fc45 	bl	801f498 <pow>
 8004c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c12:	eef0 7a60 	vmov.f32	s15, s1
 8004c16:	4aa6      	ldr	r2, [pc, #664]	@ (8004eb0 <regelschritt+0x2910>)
 8004c18:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	ed83 7b00 	vstr	d7, [r3]
		};

		w_cmd[i] = sqrt(w_cmd[i]);
 8004c24:	4aa2      	ldr	r2, [pc, #648]	@ (8004eb0 <regelschritt+0x2910>)
 8004c26:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	ed93 7b00 	vldr	d7, [r3]
 8004c32:	eeb0 0a47 	vmov.f32	s0, s14
 8004c36:	eef0 0a67 	vmov.f32	s1, s15
 8004c3a:	f01a fc9d 	bl	801f578 <sqrt>
 8004c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c42:	eef0 7a60 	vmov.f32	s15, s1
 8004c46:	4a9a      	ldr	r2, [pc, #616]	@ (8004eb0 <regelschritt+0x2910>)
 8004c48:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4413      	add	r3, r2
 8004c50:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 8004c54:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004c5e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	f77f af7c 	ble.w	8004b60 <regelschritt+0x25c0>
	};

	// PWM
	schub = joystick_schub / 100.0f;
 8004c68:	4b94      	ldr	r3, [pc, #592]	@ (8004ebc <regelschritt+0x291c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c74:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8004ec0 <regelschritt+0x2920>
 8004c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c7c:	4b91      	ldr	r3, [pc, #580]	@ (8004ec4 <regelschritt+0x2924>)
 8004c7e:	edc3 7a00 	vstr	s15, [r3]
	if (regleran) {
 8004c82:	4b91      	ldr	r3, [pc, #580]	@ (8004ec8 <regelschritt+0x2928>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8199 	beq.w	8004fbe <regelschritt+0x2a1e>
		skalar = (pwmoberegrenze - pwmunteregrenze) / 1000.0f;
 8004c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004ecc <regelschritt+0x292c>)
 8004c8e:	ed93 7a00 	vldr	s14, [r3]
 8004c92:	4b8f      	ldr	r3, [pc, #572]	@ (8004ed0 <regelschritt+0x2930>)
 8004c94:	edd3 7a00 	vldr	s15, [r3]
 8004c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c9c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8004ed4 <regelschritt+0x2934>
 8004ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ed8 <regelschritt+0x2938>)
 8004ca6:	edc3 7a00 	vstr	s15, [r3]
		// Pin PA8
		TIM1->CCR1 = ((skalar * schub * ((w_cmd[M1] + w_cmd_tminus1[M1] + w_cmd_tminus2[M1]) / 3) + pwmunteregrenze) / 1000.0f) * 30259;
 8004caa:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed8 <regelschritt+0x2938>)
 8004cac:	ed93 7a00 	vldr	s14, [r3]
 8004cb0:	4b84      	ldr	r3, [pc, #528]	@ (8004ec4 <regelschritt+0x2924>)
 8004cb2:	edd3 7a00 	vldr	s15, [r3]
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	ee17 0a90 	vmov	r0, s15
 8004cbe:	f7fb fc4b 	bl	8000558 <__aeabi_f2d>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb0 <regelschritt+0x2910>)
 8004cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ccc:	4b83      	ldr	r3, [pc, #524]	@ (8004edc <regelschritt+0x293c>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f7fb fae3 	bl	800029c <__adddf3>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4b80      	ldr	r3, [pc, #512]	@ (8004ee0 <regelschritt+0x2940>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fada 	bl	800029c <__adddf3>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee4 <regelschritt+0x2944>)
 8004cf6:	f7fb fdb1 	bl	800085c <__aeabi_ddiv>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fc81 	bl	8000608 <__aeabi_dmul>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <regelschritt+0x2930>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fc20 	bl	8000558 <__aeabi_f2d>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fabc 	bl	800029c <__adddf3>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <regelschritt+0x2948>)
 8004d32:	f7fb fd93 	bl	800085c <__aeabi_ddiv>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	a35a      	add	r3, pc, #360	@ (adr r3, 8004ea8 <regelschritt+0x2908>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fc60 	bl	8000608 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4c67      	ldr	r4, [pc, #412]	@ (8004eec <regelschritt+0x294c>)
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	f7fb ff31 	bl	8000bb8 <__aeabi_d2uiz>
 8004d56:	4603      	mov	r3, r0
 8004d58:	6363      	str	r3, [r4, #52]	@ 0x34
		// Pin PA9
		TIM1->CCR2 = ((skalar * schub * ((w_cmd[M2] + w_cmd_tminus1[M2] + w_cmd_tminus2[M2]) / 3) + pwmunteregrenze) / 1000.0f) * 30259;
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <regelschritt+0x2938>)
 8004d5c:	ed93 7a00 	vldr	s14, [r3]
 8004d60:	4b58      	ldr	r3, [pc, #352]	@ (8004ec4 <regelschritt+0x2924>)
 8004d62:	edd3 7a00 	vldr	s15, [r3]
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	ee17 0a90 	vmov	r0, s15
 8004d6e:	f7fb fbf3 	bl	8000558 <__aeabi_f2d>
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb0 <regelschritt+0x2910>)
 8004d78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d7c:	4b57      	ldr	r3, [pc, #348]	@ (8004edc <regelschritt+0x293c>)
 8004d7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d82:	f7fb fa8b 	bl	800029c <__adddf3>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4b54      	ldr	r3, [pc, #336]	@ (8004ee0 <regelschritt+0x2940>)
 8004d90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d94:	f7fb fa82 	bl	800029c <__adddf3>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ee4 <regelschritt+0x2944>)
 8004da6:	f7fb fd59 	bl	800085c <__aeabi_ddiv>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb fc29 	bl	8000608 <__aeabi_dmul>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4614      	mov	r4, r2
 8004dbc:	461d      	mov	r5, r3
 8004dbe:	4b44      	ldr	r3, [pc, #272]	@ (8004ed0 <regelschritt+0x2930>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fbc8 	bl	8000558 <__aeabi_f2d>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb fa64 	bl	800029c <__adddf3>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <regelschritt+0x2948>)
 8004de2:	f7fb fd3b 	bl	800085c <__aeabi_ddiv>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	a32e      	add	r3, pc, #184	@ (adr r3, 8004ea8 <regelschritt+0x2908>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4c3b      	ldr	r4, [pc, #236]	@ (8004eec <regelschritt+0x294c>)
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fb fed9 	bl	8000bb8 <__aeabi_d2uiz>
 8004e06:	4603      	mov	r3, r0
 8004e08:	63a3      	str	r3, [r4, #56]	@ 0x38
		// Pin PA10
		TIM1->CCR3 = ((skalar * schub * ((w_cmd[M3] + w_cmd_tminus1[M3] + w_cmd_tminus2[M3]) / 3) + pwmunteregrenze) / 1000.0f) * 30259;
 8004e0a:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <regelschritt+0x2938>)
 8004e0c:	ed93 7a00 	vldr	s14, [r3]
 8004e10:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec4 <regelschritt+0x2924>)
 8004e12:	edd3 7a00 	vldr	s15, [r3]
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	ee17 0a90 	vmov	r0, s15
 8004e1e:	f7fb fb9b 	bl	8000558 <__aeabi_f2d>
 8004e22:	4604      	mov	r4, r0
 8004e24:	460d      	mov	r5, r1
 8004e26:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <regelschritt+0x2910>)
 8004e28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004edc <regelschritt+0x293c>)
 8004e2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e32:	f7fb fa33 	bl	800029c <__adddf3>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <regelschritt+0x2940>)
 8004e40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e44:	f7fb fa2a 	bl	800029c <__adddf3>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	4b23      	ldr	r3, [pc, #140]	@ (8004ee4 <regelschritt+0x2944>)
 8004e56:	f7fb fd01 	bl	800085c <__aeabi_ddiv>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4629      	mov	r1, r5
 8004e62:	f7fb fbd1 	bl	8000608 <__aeabi_dmul>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4614      	mov	r4, r2
 8004e6c:	461d      	mov	r5, r3
 8004e6e:	4b18      	ldr	r3, [pc, #96]	@ (8004ed0 <regelschritt+0x2930>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb fb70 	bl	8000558 <__aeabi_f2d>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	f7fb fa0c 	bl	800029c <__adddf3>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <regelschritt+0x2948>)
 8004e92:	f7fb fce3 	bl	800085c <__aeabi_ddiv>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	e027      	b.n	8004ef0 <regelschritt+0x2950>
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	40000000 	.word	0x40000000
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	40dd8cc0 	.word	0x40dd8cc0
 8004eb0:	200011b8 	.word	0x200011b8
 8004eb4:	20001068 	.word	0x20001068
 8004eb8:	20000120 	.word	0x20000120
 8004ebc:	20000ec4 	.word	0x20000ec4
 8004ec0:	42c80000 	.word	0x42c80000
 8004ec4:	200010a0 	.word	0x200010a0
 8004ec8:	20000ef1 	.word	0x20000ef1
 8004ecc:	20000008 	.word	0x20000008
 8004ed0:	20000004 	.word	0x20000004
 8004ed4:	447a0000 	.word	0x447a0000
 8004ed8:	20001160 	.word	0x20001160
 8004edc:	200011d8 	.word	0x200011d8
 8004ee0:	200011f8 	.word	0x200011f8
 8004ee4:	40080000 	.word	0x40080000
 8004ee8:	408f4000 	.word	0x408f4000
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	a371      	add	r3, pc, #452	@ (adr r3, 80050b8 <regelschritt+0x2b18>)
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f7fb fb87 	bl	8000608 <__aeabi_dmul>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4c70      	ldr	r4, [pc, #448]	@ (80050c0 <regelschritt+0x2b20>)
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7fb fe58 	bl	8000bb8 <__aeabi_d2uiz>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	63e3      	str	r3, [r4, #60]	@ 0x3c
		// Pin PA11
		TIM1->CCR4 = ((skalar * schub * ((w_cmd[M4] + w_cmd_tminus1[M4] + w_cmd_tminus2[M4]) / 3) + pwmunteregrenze) / 1000.0f) * 30259;
 8004f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <regelschritt+0x2b24>)
 8004f0e:	ed93 7a00 	vldr	s14, [r3]
 8004f12:	4b6d      	ldr	r3, [pc, #436]	@ (80050c8 <regelschritt+0x2b28>)
 8004f14:	edd3 7a00 	vldr	s15, [r3]
 8004f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1c:	ee17 0a90 	vmov	r0, s15
 8004f20:	f7fb fb1a 	bl	8000558 <__aeabi_f2d>
 8004f24:	4604      	mov	r4, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	4b68      	ldr	r3, [pc, #416]	@ (80050cc <regelschritt+0x2b2c>)
 8004f2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004f2e:	4b68      	ldr	r3, [pc, #416]	@ (80050d0 <regelschritt+0x2b30>)
 8004f30:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004f34:	f7fb f9b2 	bl	800029c <__adddf3>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4b64      	ldr	r3, [pc, #400]	@ (80050d4 <regelschritt+0x2b34>)
 8004f42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004f46:	f7fb f9a9 	bl	800029c <__adddf3>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	4b60      	ldr	r3, [pc, #384]	@ (80050d8 <regelschritt+0x2b38>)
 8004f58:	f7fb fc80 	bl	800085c <__aeabi_ddiv>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4620      	mov	r0, r4
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7fb fb50 	bl	8000608 <__aeabi_dmul>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	461d      	mov	r5, r3
 8004f70:	4b5a      	ldr	r3, [pc, #360]	@ (80050dc <regelschritt+0x2b3c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fb faef 	bl	8000558 <__aeabi_f2d>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7fb f98b 	bl	800029c <__adddf3>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	4b53      	ldr	r3, [pc, #332]	@ (80050e0 <regelschritt+0x2b40>)
 8004f94:	f7fb fc62 	bl	800085c <__aeabi_ddiv>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	a345      	add	r3, pc, #276	@ (adr r3, 80050b8 <regelschritt+0x2b18>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb fb2f 	bl	8000608 <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4c44      	ldr	r4, [pc, #272]	@ (80050c0 <regelschritt+0x2b20>)
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f7fb fe00 	bl	8000bb8 <__aeabi_d2uiz>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	6423      	str	r3, [r4, #64]	@ 0x40
 8004fbc:	e044      	b.n	8005048 <regelschritt+0x2aa8>
	} else if (schubnur) {
 8004fbe:	4b49      	ldr	r3, [pc, #292]	@ (80050e4 <regelschritt+0x2b44>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d034      	beq.n	8005030 <regelschritt+0x2a90>
		TIM1->CCR1 = schub * 30259;
 8004fc6:	4b40      	ldr	r3, [pc, #256]	@ (80050c8 <regelschritt+0x2b28>)
 8004fc8:	edd3 7a00 	vldr	s15, [r3]
 8004fcc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80050e8 <regelschritt+0x2b48>
 8004fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <regelschritt+0x2b20>)
 8004fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fda:	ee17 2a90 	vmov	r2, s15
 8004fde:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = schub * 30259;
 8004fe0:	4b39      	ldr	r3, [pc, #228]	@ (80050c8 <regelschritt+0x2b28>)
 8004fe2:	edd3 7a00 	vldr	s15, [r3]
 8004fe6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80050e8 <regelschritt+0x2b48>
 8004fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fee:	4b34      	ldr	r3, [pc, #208]	@ (80050c0 <regelschritt+0x2b20>)
 8004ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff4:	ee17 2a90 	vmov	r2, s15
 8004ff8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = schub * 30259;
 8004ffa:	4b33      	ldr	r3, [pc, #204]	@ (80050c8 <regelschritt+0x2b28>)
 8004ffc:	edd3 7a00 	vldr	s15, [r3]
 8005000:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80050e8 <regelschritt+0x2b48>
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005008:	4b2d      	ldr	r3, [pc, #180]	@ (80050c0 <regelschritt+0x2b20>)
 800500a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500e:	ee17 2a90 	vmov	r2, s15
 8005012:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = schub * 30259;
 8005014:	4b2c      	ldr	r3, [pc, #176]	@ (80050c8 <regelschritt+0x2b28>)
 8005016:	edd3 7a00 	vldr	s15, [r3]
 800501a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80050e8 <regelschritt+0x2b48>
 800501e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005022:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <regelschritt+0x2b20>)
 8005024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005028:	ee17 2a90 	vmov	r2, s15
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40
 800502e:	e00b      	b.n	8005048 <regelschritt+0x2aa8>
	} else {
		TIM1->CCR1 = 0;
 8005030:	4b23      	ldr	r3, [pc, #140]	@ (80050c0 <regelschritt+0x2b20>)
 8005032:	2200      	movs	r2, #0
 8005034:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8005036:	4b22      	ldr	r3, [pc, #136]	@ (80050c0 <regelschritt+0x2b20>)
 8005038:	2200      	movs	r2, #0
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 800503c:	4b20      	ldr	r3, [pc, #128]	@ (80050c0 <regelschritt+0x2b20>)
 800503e:	2200      	movs	r2, #0
 8005040:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 8005042:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <regelschritt+0x2b20>)
 8005044:	2200      	movs	r2, #0
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	w_cmd_tminus1[0] = w_cmd[0];
 8005048:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <regelschritt+0x2b2c>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	4920      	ldr	r1, [pc, #128]	@ (80050d0 <regelschritt+0x2b30>)
 8005050:	e9c1 2300 	strd	r2, r3, [r1]
	w_cmd_tminus1[1] = w_cmd[1];
 8005054:	4b1d      	ldr	r3, [pc, #116]	@ (80050cc <regelschritt+0x2b2c>)
 8005056:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800505a:	491d      	ldr	r1, [pc, #116]	@ (80050d0 <regelschritt+0x2b30>)
 800505c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	w_cmd_tminus1[2] = w_cmd[2];
 8005060:	4b1a      	ldr	r3, [pc, #104]	@ (80050cc <regelschritt+0x2b2c>)
 8005062:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005066:	491a      	ldr	r1, [pc, #104]	@ (80050d0 <regelschritt+0x2b30>)
 8005068:	e9c1 2304 	strd	r2, r3, [r1, #16]
	w_cmd_tminus1[3] = w_cmd[3];
 800506c:	4b17      	ldr	r3, [pc, #92]	@ (80050cc <regelschritt+0x2b2c>)
 800506e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005072:	4917      	ldr	r1, [pc, #92]	@ (80050d0 <regelschritt+0x2b30>)
 8005074:	e9c1 2306 	strd	r2, r3, [r1, #24]

	w_cmd_tminus2[0] = w_cmd_tminus1[0];
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <regelschritt+0x2b30>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	4915      	ldr	r1, [pc, #84]	@ (80050d4 <regelschritt+0x2b34>)
 8005080:	e9c1 2300 	strd	r2, r3, [r1]
	w_cmd_tminus2[1] = w_cmd_tminus1[1];
 8005084:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <regelschritt+0x2b30>)
 8005086:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800508a:	4912      	ldr	r1, [pc, #72]	@ (80050d4 <regelschritt+0x2b34>)
 800508c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	w_cmd_tminus2[2] = w_cmd_tminus1[2];
 8005090:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <regelschritt+0x2b30>)
 8005092:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005096:	490f      	ldr	r1, [pc, #60]	@ (80050d4 <regelschritt+0x2b34>)
 8005098:	e9c1 2304 	strd	r2, r3, [r1, #16]
	w_cmd_tminus2[3] = w_cmd_tminus1[3];
 800509c:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <regelschritt+0x2b30>)
 800509e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80050a2:	490c      	ldr	r1, [pc, #48]	@ (80050d4 <regelschritt+0x2b34>)
 80050a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80050a8:	bf00      	nop
 80050aa:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80050ae:	46bd      	mov	sp, r7
 80050b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b4:	f3af 8000 	nop.w
 80050b8:	00000000 	.word	0x00000000
 80050bc:	40dd8cc0 	.word	0x40dd8cc0
 80050c0:	40010000 	.word	0x40010000
 80050c4:	20001160 	.word	0x20001160
 80050c8:	200010a0 	.word	0x200010a0
 80050cc:	200011b8 	.word	0x200011b8
 80050d0:	200011d8 	.word	0x200011d8
 80050d4:	200011f8 	.word	0x200011f8
 80050d8:	40080000 	.word	0x40080000
 80050dc:	20000004 	.word	0x20000004
 80050e0:	408f4000 	.word	0x408f4000
 80050e4:	20000138 	.word	0x20000138
 80050e8:	46ec6600 	.word	0x46ec6600

080050ec <READ_ACCELEROMETER>:

static void READ_ACCELEROMETER(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
    if (UseOfflineData == 1)
 80050f0:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <READ_ACCELEROMETER+0x5c>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d121      	bne.n	800513c <READ_ACCELEROMETER+0x50>
    {
		AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 80050f8:	4b14      	ldr	r3, [pc, #80]	@ (800514c <READ_ACCELEROMETER+0x60>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <READ_ACCELEROMETER+0x64>)
 80050fe:	2134      	movs	r1, #52	@ 0x34
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	3310      	adds	r3, #16
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a12      	ldr	r2, [pc, #72]	@ (8005154 <READ_ACCELEROMETER+0x68>)
 800510c:	6013      	str	r3, [r2, #0]
		AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800510e:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <READ_ACCELEROMETER+0x60>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0f      	ldr	r2, [pc, #60]	@ (8005150 <READ_ACCELEROMETER+0x64>)
 8005114:	2134      	movs	r1, #52	@ 0x34
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3314      	adds	r3, #20
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0c      	ldr	r2, [pc, #48]	@ (8005154 <READ_ACCELEROMETER+0x68>)
 8005122:	6053      	str	r3, [r2, #4]
		AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8005124:	4b09      	ldr	r3, [pc, #36]	@ (800514c <READ_ACCELEROMETER+0x60>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <READ_ACCELEROMETER+0x64>)
 800512a:	2134      	movs	r1, #52	@ 0x34
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	4413      	add	r3, r2
 8005132:	3318      	adds	r3, #24
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a07      	ldr	r2, [pc, #28]	@ (8005154 <READ_ACCELEROMETER+0x68>)
 8005138:	6093      	str	r3, [r2, #8]
    }
    else
    {
		BSP_SENSOR_ACC_GetAxes(&AccValue);
    }
}
 800513a:	e002      	b.n	8005142 <READ_ACCELEROMETER+0x56>
		BSP_SENSOR_ACC_GetAxes(&AccValue);
 800513c:	4805      	ldr	r0, [pc, #20]	@ (8005154 <READ_ACCELEROMETER+0x68>)
 800513e:	f010 fc57 	bl	80159f0 <BSP_SENSOR_ACC_GetAxes>
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	2000159d 	.word	0x2000159d
 800514c:	20001740 	.word	0x20001740
 8005150:	200015a0 	.word	0x200015a0
 8005154:	20000ea0 	.word	0x20000ea0

08005158 <READ_GYRO>:

static void READ_GYRO(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
    if (UseOfflineData == 1)
 800515c:	4b15      	ldr	r3, [pc, #84]	@ (80051b4 <READ_GYRO+0x5c>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d121      	bne.n	80051a8 <READ_GYRO+0x50>
    {
		GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 8005164:	4b14      	ldr	r3, [pc, #80]	@ (80051b8 <READ_GYRO+0x60>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <READ_GYRO+0x64>)
 800516a:	2134      	movs	r1, #52	@ 0x34
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	331c      	adds	r3, #28
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <READ_GYRO+0x68>)
 8005178:	6013      	str	r3, [r2, #0]
		GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800517a:	4b0f      	ldr	r3, [pc, #60]	@ (80051b8 <READ_GYRO+0x60>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0f      	ldr	r2, [pc, #60]	@ (80051bc <READ_GYRO+0x64>)
 8005180:	2134      	movs	r1, #52	@ 0x34
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	3320      	adds	r3, #32
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <READ_GYRO+0x68>)
 800518e:	6053      	str	r3, [r2, #4]
		GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 8005190:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <READ_GYRO+0x60>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a09      	ldr	r2, [pc, #36]	@ (80051bc <READ_GYRO+0x64>)
 8005196:	2134      	movs	r1, #52	@ 0x34
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	4413      	add	r3, r2
 800519e:	3324      	adds	r3, #36	@ 0x24
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a07      	ldr	r2, [pc, #28]	@ (80051c0 <READ_GYRO+0x68>)
 80051a4:	6093      	str	r3, [r2, #8]
    }
    else
    {
    	BSP_SENSOR_GYR_GetAxes(&GyrValue);
    }
}
 80051a6:	e002      	b.n	80051ae <READ_GYRO+0x56>
    	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80051a8:	4805      	ldr	r0, [pc, #20]	@ (80051c0 <READ_GYRO+0x68>)
 80051aa:	f010 fc2e 	bl	8015a0a <BSP_SENSOR_GYR_GetAxes>
}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	2000159d 	.word	0x2000159d
 80051b8:	20001740 	.word	0x20001740
 80051bc:	200015a0 	.word	0x200015a0
 80051c0:	20000eac 	.word	0x20000eac

080051c4 <READ_MAG>:

static void READ_MAG(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0

    if (UseOfflineData == 1)
 80051c8:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <READ_MAG+0x5c>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d121      	bne.n	8005214 <READ_MAG+0x50>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 80051d0:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <READ_MAG+0x60>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a14      	ldr	r2, [pc, #80]	@ (8005228 <READ_MAG+0x64>)
 80051d6:	2134      	movs	r1, #52	@ 0x34
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	3328      	adds	r3, #40	@ 0x28
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a12      	ldr	r2, [pc, #72]	@ (800522c <READ_MAG+0x68>)
 80051e4:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 80051e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005224 <READ_MAG+0x60>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0f      	ldr	r2, [pc, #60]	@ (8005228 <READ_MAG+0x64>)
 80051ec:	2134      	movs	r1, #52	@ 0x34
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	332c      	adds	r3, #44	@ 0x2c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0c      	ldr	r2, [pc, #48]	@ (800522c <READ_MAG+0x68>)
 80051fa:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 80051fc:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <READ_MAG+0x60>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <READ_MAG+0x64>)
 8005202:	2134      	movs	r1, #52	@ 0x34
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	3330      	adds	r3, #48	@ 0x30
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a07      	ldr	r2, [pc, #28]	@ (800522c <READ_MAG+0x68>)
 8005210:	6093      	str	r3, [r2, #8]
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
    }
}
 8005212:	e002      	b.n	800521a <READ_MAG+0x56>
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 8005214:	4805      	ldr	r0, [pc, #20]	@ (800522c <READ_MAG+0x68>)
 8005216:	f010 fc05 	bl	8015a24 <BSP_SENSOR_MAG_GetAxes>
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	2000159d 	.word	0x2000159d
 8005224:	20001740 	.word	0x20001740
 8005228:	200015a0 	.word	0x200015a0
 800522c:	20000eb8 	.word	0x20000eb8

08005230 <LED_Off>:
{
	LL_GPIO_SetOutputPin(LED2_GPIO_PORT, LED2_PIN);
}

void LED_Off(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED2_GPIO_PORT, LED2_PIN);
 8005234:	2120      	movs	r1, #32
 8005236:	4802      	ldr	r0, [pc, #8]	@ (8005240 <LED_Off+0x10>)
 8005238:	f7fc f82a 	bl	8001290 <LL_GPIO_ResetOutputPin>
}
 800523c:	bf00      	nop
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40020000 	.word	0x40020000

08005244 <DWT_Start>:
  * @brief  Start counting clock cycles
  * @param  None
  * @retval None
  */
static void DWT_Start(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8005248:	4b06      	ldr	r3, [pc, #24]	@ (8005264 <DWT_Start+0x20>)
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800524e:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <DWT_Start+0x20>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <DWT_Start+0x20>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	6013      	str	r3, [r2, #0]
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e0001000 	.word	0xe0001000

08005268 <DWT_Stop>:
  * @brief  Stop counting clock cycles and calculate elapsed time in [us]
  * @param  None
  * @retval Elapsed time in [us]
  */
static uint32_t DWT_Stop(void)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	volatile uint32_t cycles_count = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	603b      	str	r3, [r7, #0]
	uint32_t system_core_clock_mhz = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <DWT_Stop+0x44>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <DWT_Stop+0x44>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT;
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <DWT_Stop+0x44>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	603b      	str	r3, [r7, #0]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 8005288:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <DWT_Stop+0x48>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a09      	ldr	r2, [pc, #36]	@ (80052b4 <DWT_Stop+0x4c>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	0c9b      	lsrs	r3, r3, #18
 8005294:	607b      	str	r3, [r7, #4]
	return cycles_count / system_core_clock_mhz;
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e0001000 	.word	0xe0001000
 80052b0:	2000013c 	.word	0x2000013c
 80052b4:	431bde83 	.word	0x431bde83

080052b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052bc:	b672      	cpsid	i
}
 80052be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80052c0:	bf00      	nop
 80052c2:	e7fd      	b.n	80052c0 <Error_Handler+0x8>

080052c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	4b10      	ldr	r3, [pc, #64]	@ (8005310 <HAL_MspInit+0x4c>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d2:	4a0f      	ldr	r2, [pc, #60]	@ (8005310 <HAL_MspInit+0x4c>)
 80052d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <HAL_MspInit+0x4c>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <HAL_MspInit+0x4c>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	4a08      	ldr	r2, [pc, #32]	@ (8005310 <HAL_MspInit+0x4c>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_MspInit+0x4c>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005302:	2007      	movs	r0, #7
 8005304:	f009 fe36 	bl	800ef74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005308:	bf00      	nop
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800

08005314 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0b      	ldr	r2, [pc, #44]	@ (8005350 <HAL_CRC_MspInit+0x3c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10d      	bne.n	8005342 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <HAL_CRC_MspInit+0x40>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	4a09      	ldr	r2, [pc, #36]	@ (8005354 <HAL_CRC_MspInit+0x40>)
 8005330:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005334:	6313      	str	r3, [r2, #48]	@ 0x30
 8005336:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <HAL_CRC_MspInit+0x40>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40023000 	.word	0x40023000
 8005354:	40023800 	.word	0x40023800

08005358 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	611a      	str	r2, [r3, #16]
 8005370:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a0c      	ldr	r2, [pc, #48]	@ (80053a8 <HAL_RTC_MspInit+0x50>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d111      	bne.n	80053a0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800537c:	2302      	movs	r3, #2
 800537e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005384:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	4618      	mov	r0, r3
 800538c:	f00e f882 	bl	8013494 <HAL_RCCEx_PeriphCLKConfig>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005396:	f7ff ff8f 	bl	80052b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <HAL_RTC_MspInit+0x54>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80053a0:	bf00      	nop
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40002800 	.word	0x40002800
 80053ac:	42470e3c 	.word	0x42470e3c

080053b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0b      	ldr	r2, [pc, #44]	@ (80053ec <HAL_TIM_PWM_MspInit+0x3c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10d      	bne.n	80053de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <HAL_TIM_PWM_MspInit+0x40>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <HAL_TIM_PWM_MspInit+0x40>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053d2:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <HAL_TIM_PWM_MspInit+0x40>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40023800 	.word	0x40023800

080053f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005404:	d10e      	bne.n	8005424 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	4b16      	ldr	r3, [pc, #88]	@ (8005464 <HAL_TIM_Base_MspInit+0x70>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <HAL_TIM_Base_MspInit+0x70>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	6413      	str	r3, [r2, #64]	@ 0x40
 8005416:	4b13      	ldr	r3, [pc, #76]	@ (8005464 <HAL_TIM_Base_MspInit+0x70>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005422:	e01a      	b.n	800545a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0f      	ldr	r2, [pc, #60]	@ (8005468 <HAL_TIM_Base_MspInit+0x74>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d115      	bne.n	800545a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <HAL_TIM_Base_MspInit+0x70>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	4a0b      	ldr	r2, [pc, #44]	@ (8005464 <HAL_TIM_Base_MspInit+0x70>)
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	6413      	str	r3, [r2, #64]	@ 0x40
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_TIM_Base_MspInit+0x70>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	201d      	movs	r0, #29
 8005450:	f009 fd9b 	bl	800ef8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005454:	201d      	movs	r0, #29
 8005456:	f009 fdb4 	bl	800efc2 <HAL_NVIC_EnableIRQ>
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800
 8005468:	40000400 	.word	0x40000400

0800546c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a12      	ldr	r2, [pc, #72]	@ (80054d4 <HAL_TIM_MspPostInit+0x68>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d11e      	bne.n	80054cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <HAL_TIM_MspPostInit+0x6c>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	4a10      	ldr	r2, [pc, #64]	@ (80054d8 <HAL_TIM_MspPostInit+0x6c>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6313      	str	r3, [r2, #48]	@ 0x30
 800549e:	4b0e      	ldr	r3, [pc, #56]	@ (80054d8 <HAL_TIM_MspPostInit+0x6c>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80054aa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80054ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b0:	2302      	movs	r3, #2
 80054b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054bc:	2301      	movs	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	4619      	mov	r1, r3
 80054c6:	4805      	ldr	r0, [pc, #20]	@ (80054dc <HAL_TIM_MspPostInit+0x70>)
 80054c8:	f009 fec8 	bl	800f25c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80054cc:	bf00      	nop
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40020000 	.word	0x40020000

080054e0 <LL_USART_IsActiveFlag_RXNE>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_USART_IsEnabledIT_RXNE>:
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b20      	cmp	r3, #32
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <NMI_Handler+0x4>

08005534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <HardFault_Handler+0x4>

0800553c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <MemManage_Handler+0x4>

08005544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <BusFault_Handler+0x4>

0800554c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <UsageFault_Handler+0x4>

08005554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005562:	b480      	push	{r7}
 8005564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005582:	f009 fbbf 	bl	800ed04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005590:	4802      	ldr	r0, [pc, #8]	@ (800559c <TIM3_IRQHandler+0x10>)
 8005592:	f00e fc5b 	bl	8013e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000e58 	.word	0x20000e58

080055a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80055a4:	4802      	ldr	r0, [pc, #8]	@ (80055b0 <I2C1_EV_IRQHandler+0x10>)
 80055a6:	f00b f8eb 	bl	8010780 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20001280 	.word	0x20001280

080055b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80055b8:	4802      	ldr	r0, [pc, #8]	@ (80055c4 <I2C1_ER_IRQHandler+0x10>)
 80055ba:	f00b fa34 	bl	8010a26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20001280 	.word	0x20001280

080055c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80055cc:	4802      	ldr	r0, [pc, #8]	@ (80055d8 <EXTI15_10_IRQHandler+0x10>)
 80055ce:	f009 fe21 	bl	800f214 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
//
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000338 	.word	0x20000338

080055dc <USART2_IRQHandler>:
  * Brief   This function handles USARTx Instance interrupt request.
  * Param   None
  * Retval  None
  */
void USARTx_IRQHandler(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Check RXNE flag value in SR register */
  if(LL_USART_IsActiveFlag_RXNE(USARTx_INSTANCE) && LL_USART_IsEnabledIT_RXNE(USARTx_INSTANCE))
 80055e0:	4807      	ldr	r0, [pc, #28]	@ (8005600 <USART2_IRQHandler+0x24>)
 80055e2:	f7ff ff7d 	bl	80054e0 <LL_USART_IsActiveFlag_RXNE>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <USART2_IRQHandler+0x20>
 80055ec:	4804      	ldr	r0, [pc, #16]	@ (8005600 <USART2_IRQHandler+0x24>)
 80055ee:	f7ff ff8a 	bl	8005506 <LL_USART_IsEnabledIT_RXNE>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <USART2_IRQHandler+0x20>
  {
    /* RXNE flag will be cleared by reading of DR register (done in call) */
    /* Call function in charge of handling Character reception */
    USART_CharReception_Callback();
 80055f8:	f7fc ff44 	bl	8002484 <USART_CharReception_Callback>
  {
    /* Call Error function */
    // Error_Callback();
  }

}
 80055fc:	bf00      	nop
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40004400 	.word	0x40004400

08005604 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800560e:	4b13      	ldr	r3, [pc, #76]	@ (800565c <BSP_I2C1_Init+0x58>)
 8005610:	4a13      	ldr	r2, [pc, #76]	@ (8005660 <BSP_I2C1_Init+0x5c>)
 8005612:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8005614:	4b13      	ldr	r3, [pc, #76]	@ (8005664 <BSP_I2C1_Init+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	4912      	ldr	r1, [pc, #72]	@ (8005664 <BSP_I2C1_Init+0x60>)
 800561c:	600a      	str	r2, [r1, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d117      	bne.n	8005652 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8005622:	480e      	ldr	r0, [pc, #56]	@ (800565c <BSP_I2C1_Init+0x58>)
 8005624:	f00b fb06 	bl	8010c34 <HAL_I2C_GetState>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d111      	bne.n	8005652 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800562e:	480b      	ldr	r0, [pc, #44]	@ (800565c <BSP_I2C1_Init+0x58>)
 8005630:	f000 f936 	bl	80058a0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800563a:	4808      	ldr	r0, [pc, #32]	@ (800565c <BSP_I2C1_Init+0x58>)
 800563c:	f000 f8fc 	bl	8005838 <MX_I2C1_Init>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005646:	f06f 0307 	mvn.w	r3, #7
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e001      	b.n	8005652 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005652:	687b      	ldr	r3, [r7, #4]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20001280 	.word	0x20001280
 8005660:	40005400 	.word	0x40005400
 8005664:	200012d4 	.word	0x200012d4

08005668 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8005672:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <BSP_I2C1_DeInit+0x48>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d014      	beq.n	80056a4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <BSP_I2C1_DeInit+0x48>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3b01      	subs	r3, #1
 8005680:	4a0b      	ldr	r2, [pc, #44]	@ (80056b0 <BSP_I2C1_DeInit+0x48>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <BSP_I2C1_DeInit+0x48>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800568c:	4809      	ldr	r0, [pc, #36]	@ (80056b4 <BSP_I2C1_DeInit+0x4c>)
 800568e:	f000 f961 	bl	8005954 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8005692:	4808      	ldr	r0, [pc, #32]	@ (80056b4 <BSP_I2C1_DeInit+0x4c>)
 8005694:	f00a f9c0 	bl	800fa18 <HAL_I2C_DeInit>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800569e:	f06f 0307 	mvn.w	r3, #7
 80056a2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80056a4:	687b      	ldr	r3, [r7, #4]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200012d4 	.word	0x200012d4
 80056b4:	20001280 	.word	0x20001280

080056b8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af04      	add	r7, sp, #16
 80056be:	60ba      	str	r2, [r7, #8]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	81fb      	strh	r3, [r7, #14]
 80056c6:	460b      	mov	r3, r1
 80056c8:	81bb      	strh	r3, [r7, #12]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80056d2:	89ba      	ldrh	r2, [r7, #12]
 80056d4:	89f9      	ldrh	r1, [r7, #14]
 80056d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056da:	9302      	str	r3, [sp, #8]
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	2301      	movs	r3, #1
 80056e6:	480c      	ldr	r0, [pc, #48]	@ (8005718 <BSP_I2C1_WriteReg+0x60>)
 80056e8:	f00a fd1e 	bl	8010128 <HAL_I2C_Mem_Write>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00c      	beq.n	800570c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80056f2:	4809      	ldr	r0, [pc, #36]	@ (8005718 <BSP_I2C1_WriteReg+0x60>)
 80056f4:	f00b faac 	bl	8010c50 <HAL_I2C_GetError>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d103      	bne.n	8005706 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80056fe:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e002      	b.n	800570c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005706:	f06f 0303 	mvn.w	r3, #3
 800570a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800570c:	697b      	ldr	r3, [r7, #20]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20001280 	.word	0x20001280

0800571c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	@ 0x28
 8005720:	af04      	add	r7, sp, #16
 8005722:	60ba      	str	r2, [r7, #8]
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	81fb      	strh	r3, [r7, #14]
 800572a:	460b      	mov	r3, r1
 800572c:	81bb      	strh	r3, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005736:	89ba      	ldrh	r2, [r7, #12]
 8005738:	89f9      	ldrh	r1, [r7, #14]
 800573a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2301      	movs	r3, #1
 800574a:	480c      	ldr	r0, [pc, #48]	@ (800577c <BSP_I2C1_ReadReg+0x60>)
 800574c:	f00a fde6 	bl	801031c <HAL_I2C_Mem_Read>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00c      	beq.n	8005770 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8005756:	4809      	ldr	r0, [pc, #36]	@ (800577c <BSP_I2C1_ReadReg+0x60>)
 8005758:	f00b fa7a 	bl	8010c50 <HAL_I2C_GetError>
 800575c:	4603      	mov	r3, r0
 800575e:	2b04      	cmp	r3, #4
 8005760:	d103      	bne.n	800576a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005762:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e002      	b.n	8005770 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800576a:	f06f 0303 	mvn.w	r3, #3
 800576e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005770:	697b      	ldr	r3, [r7, #20]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20001280 	.word	0x20001280

08005780 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	4603      	mov	r3, r0
 8005788:	6039      	str	r1, [r7, #0]
 800578a:	80fb      	strh	r3, [r7, #6]
 800578c:	4613      	mov	r3, r2
 800578e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005794:	88bb      	ldrh	r3, [r7, #4]
 8005796:	88f9      	ldrh	r1, [r7, #6]
 8005798:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800579c:	9200      	str	r2, [sp, #0]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	480b      	ldr	r0, [pc, #44]	@ (80057d0 <BSP_I2C1_Send+0x50>)
 80057a2:	f00a f991 	bl	800fac8 <HAL_I2C_Master_Transmit>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80057ac:	4808      	ldr	r0, [pc, #32]	@ (80057d0 <BSP_I2C1_Send+0x50>)
 80057ae:	f00b fa4f 	bl	8010c50 <HAL_I2C_GetError>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d003      	beq.n	80057c0 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80057b8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e002      	b.n	80057c6 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80057c0:	f06f 0303 	mvn.w	r3, #3
 80057c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20001280 	.word	0x20001280

080057d4 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af02      	add	r7, sp, #8
 80057da:	4603      	mov	r3, r0
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	80fb      	strh	r3, [r7, #6]
 80057e0:	4613      	mov	r3, r2
 80057e2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80057e8:	88bb      	ldrh	r3, [r7, #4]
 80057ea:	88f9      	ldrh	r1, [r7, #6]
 80057ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	480b      	ldr	r0, [pc, #44]	@ (8005824 <BSP_I2C1_Recv+0x50>)
 80057f6:	f00a fa65 	bl	800fcc4 <HAL_I2C_Master_Receive>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00c      	beq.n	800581a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8005800:	4808      	ldr	r0, [pc, #32]	@ (8005824 <BSP_I2C1_Recv+0x50>)
 8005802:	f00b fa25 	bl	8010c50 <HAL_I2C_GetError>
 8005806:	4603      	mov	r3, r0
 8005808:	2b04      	cmp	r3, #4
 800580a:	d003      	beq.n	8005814 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800580c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e002      	b.n	800581a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005814:	f06f 0303 	mvn.w	r3, #3
 8005818:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800581a:	68fb      	ldr	r3, [r7, #12]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20001280 	.word	0x20001280

08005828 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800582c:	f009 fa7e 	bl	800ed2c <HAL_GetTick>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a14      	ldr	r2, [pc, #80]	@ (8005898 <MX_I2C1_Init+0x60>)
 8005848:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a13      	ldr	r2, [pc, #76]	@ (800589c <MX_I2C1_Init+0x64>)
 800584e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005862:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f009 ff87 	bl	800f790 <HAL_I2C_Init>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40005400 	.word	0x40005400
 800589c:	00061a80 	.word	0x00061a80

080058a0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	@ 0x28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	4b27      	ldr	r3, [pc, #156]	@ (800594c <I2C1_MspInit+0xac>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	4a26      	ldr	r2, [pc, #152]	@ (800594c <I2C1_MspInit+0xac>)
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b8:	4b24      	ldr	r3, [pc, #144]	@ (800594c <I2C1_MspInit+0xac>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80058c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058ca:	2312      	movs	r3, #18
 80058cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d2:	2303      	movs	r3, #3
 80058d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80058d6:	2304      	movs	r3, #4
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80058da:	f107 0314 	add.w	r3, r7, #20
 80058de:	4619      	mov	r1, r3
 80058e0:	481b      	ldr	r0, [pc, #108]	@ (8005950 <I2C1_MspInit+0xb0>)
 80058e2:	f009 fcbb 	bl	800f25c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80058e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058ec:	2312      	movs	r3, #18
 80058ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f4:	2303      	movs	r3, #3
 80058f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80058f8:	2304      	movs	r3, #4
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	4619      	mov	r1, r3
 8005902:	4813      	ldr	r0, [pc, #76]	@ (8005950 <I2C1_MspInit+0xb0>)
 8005904:	f009 fcaa 	bl	800f25c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	4b0f      	ldr	r3, [pc, #60]	@ (800594c <I2C1_MspInit+0xac>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	4a0e      	ldr	r2, [pc, #56]	@ (800594c <I2C1_MspInit+0xac>)
 8005912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005916:	6413      	str	r3, [r2, #64]	@ 0x40
 8005918:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <I2C1_MspInit+0xac>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005924:	2200      	movs	r2, #0
 8005926:	2100      	movs	r1, #0
 8005928:	201f      	movs	r0, #31
 800592a:	f009 fb2e 	bl	800ef8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800592e:	201f      	movs	r0, #31
 8005930:	f009 fb47 	bl	800efc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	2020      	movs	r0, #32
 800593a:	f009 fb26 	bl	800ef8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800593e:	2020      	movs	r0, #32
 8005940:	f009 fb3f 	bl	800efc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005944:	bf00      	nop
 8005946:	3728      	adds	r7, #40	@ 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40023800 	.word	0x40023800
 8005950:	40020400 	.word	0x40020400

08005954 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800595c:	4b0c      	ldr	r3, [pc, #48]	@ (8005990 <I2C1_MspDeInit+0x3c>)
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	4a0b      	ldr	r2, [pc, #44]	@ (8005990 <I2C1_MspDeInit+0x3c>)
 8005962:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005966:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8005968:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800596c:	4809      	ldr	r0, [pc, #36]	@ (8005994 <I2C1_MspDeInit+0x40>)
 800596e:	f009 fdf9 	bl	800f564 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8005972:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005976:	4807      	ldr	r0, [pc, #28]	@ (8005994 <I2C1_MspDeInit+0x40>)
 8005978:	f009 fdf4 	bl	800f564 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800597c:	201f      	movs	r0, #31
 800597e:	f009 fb2e 	bl	800efde <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005982:	2020      	movs	r0, #32
 8005984:	f009 fb2b 	bl	800efde <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40023800 	.word	0x40023800
 8005994:	40020400 	.word	0x40020400

08005998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return 1;
 800599c:	2301      	movs	r3, #1
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <_kill>:

int _kill(int pid, int sig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059b2:	f017 fe37 	bl	801d624 <__errno>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2216      	movs	r2, #22
 80059ba:	601a      	str	r2, [r3, #0]
  return -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <_exit>:

void _exit (int status)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ffe7 	bl	80059a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <_exit+0x12>

080059de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e00a      	b.n	8005a06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059f0:	f3af 8000 	nop.w
 80059f4:	4601      	mov	r1, r0
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	60ba      	str	r2, [r7, #8]
 80059fc:	b2ca      	uxtb	r2, r1
 80059fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	3301      	adds	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	dbf0      	blt.n	80059f0 <_read+0x12>
  }

  return len;
 8005a0e:	687b      	ldr	r3, [r7, #4]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e009      	b.n	8005a3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	60ba      	str	r2, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f009 f8b0 	bl	800eb98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	dbf1      	blt.n	8005a2a <_write+0x12>
  }
  return len;
 8005a46:	687b      	ldr	r3, [r7, #4]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_close>:

int _close(int file)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a78:	605a      	str	r2, [r3, #4]
  return 0;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_isatty>:

int _isatty(int file)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a90:	2301      	movs	r3, #1
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ac0:	4a14      	ldr	r2, [pc, #80]	@ (8005b14 <_sbrk+0x5c>)
 8005ac2:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <_sbrk+0x60>)
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005acc:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <_sbrk+0x64>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <_sbrk+0x64>)
 8005ad6:	4a12      	ldr	r2, [pc, #72]	@ (8005b20 <_sbrk+0x68>)
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ada:	4b10      	ldr	r3, [pc, #64]	@ (8005b1c <_sbrk+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d207      	bcs.n	8005af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ae8:	f017 fd9c 	bl	801d624 <__errno>
 8005aec:	4603      	mov	r3, r0
 8005aee:	220c      	movs	r2, #12
 8005af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005af6:	e009      	b.n	8005b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005af8:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <_sbrk+0x64>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005afe:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <_sbrk+0x64>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	4a05      	ldr	r2, [pc, #20]	@ (8005b1c <_sbrk+0x64>)
 8005b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20020000 	.word	0x20020000
 8005b18:	00008000 	.word	0x00008000
 8005b1c:	200012d8 	.word	0x200012d8
 8005b20:	20002458 	.word	0x20002458

08005b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <SystemInit+0x20>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	4a05      	ldr	r2, [pc, #20]	@ (8005b44 <SystemInit+0x20>)
 8005b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b4c:	f7ff ffea 	bl	8005b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b50:	480c      	ldr	r0, [pc, #48]	@ (8005b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b52:	490d      	ldr	r1, [pc, #52]	@ (8005b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b54:	4a0d      	ldr	r2, [pc, #52]	@ (8005b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b58:	e002      	b.n	8005b60 <LoopCopyDataInit>

08005b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b5e:	3304      	adds	r3, #4

08005b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b64:	d3f9      	bcc.n	8005b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b66:	4a0a      	ldr	r2, [pc, #40]	@ (8005b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b68:	4c0a      	ldr	r4, [pc, #40]	@ (8005b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b6c:	e001      	b.n	8005b72 <LoopFillZerobss>

08005b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b70:	3204      	adds	r2, #4

08005b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b74:	d3fb      	bcc.n	8005b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b76:	f017 fd5b 	bl	801d630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b7a:	f7fc f935 	bl	8001de8 <main>
  bx  lr    
 8005b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b88:	20000528 	.word	0x20000528
  ldr r2, =_sidata
 8005b8c:	08024380 	.word	0x08024380
  ldr r2, =_sbss
 8005b90:	20000528 	.word	0x20000528
  ldr r4, =_ebss
 8005b94:	20002458 	.word	0x20002458

08005b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b98:	e7fe      	b.n	8005b98 <ADC_IRQHandler>
	...

08005b9c <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8005bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e084      	b.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	7b1a      	ldrb	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <LIS2DUXS12_RegisterBusIO+0x130>)
 8005bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a33      	ldr	r2, [pc, #204]	@ (8005cd0 <LIS2DUXS12_RegisterBusIO+0x134>)
 8005c02:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e04f      	b.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e045      	b.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d11c      	bne.n	8005c78 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d13c      	bne.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f8e6 	bl	8005e1a <LIS2DUXS12_ExitDeepPowerDownSPI>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c58:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8005c5a:	2350      	movs	r3, #80	@ 0x50
 8005c5c:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	461a      	mov	r2, r3
 8005c62:	2110      	movs	r1, #16
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fbe8 	bl	800643a <LIS2DUXS12_Write_Reg>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d028      	beq.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e024      	b.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10e      	bne.n	8005c9e <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11b      	bne.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8c5 	bl	8005e1a <LIS2DUXS12_ExitDeepPowerDownSPI>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d015      	beq.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e011      	b.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d108      	bne.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f89d 	bl	8005df0 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cc0:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	080068b1 	.word	0x080068b1
 8005cd0:	080068e7 	.word	0x080068e7

08005cd4 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d01f      	beq.n	8005d24 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3320      	adds	r3, #32
 8005ce8:	f107 0214 	add.w	r2, r7, #20
 8005cec:	4611      	mov	r1, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fa72 	bl	80071d8 <lis2duxs12_i3c_configure_get>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cfe:	e052      	b.n	8005da6 <LIS2DUXS12_Init+0xd2>
    }
    val.asf_on = PROPERTY_ENABLE;
 8005d00:	7d7b      	ldrb	r3, [r7, #21]
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3320      	adds	r3, #32
 8005d0c:	f107 0214 	add.w	r2, r7, #20
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fa28 	bl	8007168 <lis2duxs12_i3c_configure_set>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8005d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d22:	e040      	b.n	8005da6 <LIS2DUXS12_Init+0xd2>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3320      	adds	r3, #32
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fe98 	bl	8006a60 <lis2duxs12_init_set>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <LIS2DUXS12_Init+0x68>
  {
    return LIS2DUXS12_ERROR;
 8005d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d3a:	e034      	b.n	8005da6 <LIS2DUXS12_Init+0xd2>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8005d3c:	f107 030c 	add.w	r3, r7, #12
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f103 0020 	add.w	r0, r3, #32
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d54:	f001 fa7f 	bl	8007256 <lis2duxs12_fifo_mode_set>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <LIS2DUXS12_Init+0x90>
  {
    return LIS2DUXS12_ERROR;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d62:	e020      	b.n	8005da6 <LIS2DUXS12_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a12      	ldr	r2, [pc, #72]	@ (8005db0 <LIS2DUXS12_Init+0xdc>)
 8005d68:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default ultra low power (disabled). */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8005d72:	f107 0308 	add.w	r3, r7, #8
 8005d76:	2100      	movs	r1, #0
 8005d78:	460a      	mov	r2, r1
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3320      	adds	r3, #32
 8005d84:	f107 0208 	add.w	r2, r7, #8
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ff10 	bl	8006bb0 <lis2duxs12_mode_set>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <LIS2DUXS12_Init+0xc8>
  {
    return LIS2DUXS12_ERROR;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d9a:	e004      	b.n	8005da6 <LIS2DUXS12_Init+0xd2>
  }

  pObj->is_initialized = 1;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	42c80000 	.word	0x42c80000

08005db4 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8ad 	bl	8005f1c <LIS2DUXS12_ACC_Disable>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dcc:	e00c      	b.n	8005de8 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset ultra low power to default value (disabled). */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode*/
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3320      	adds	r3, #32
 8005dfc:	f107 020f 	add.w	r2, r7, #15
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fe1a 	bl	8006a3c <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	2019      	movs	r0, #25
 8005e0e:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3320      	adds	r3, #32
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f8da 	bl	8006fe0 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	2019      	movs	r0, #25
 8005e32:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3320      	adds	r3, #32
 8005e4c:	f107 020f 	add.w	r2, r7, #15
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fdf2 	bl	8006a3c <lis2duxs12_device_id_get>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e62:	e003      	b.n	8005e6c <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8005e64:	7bfa      	ldrb	r2, [r7, #15]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2200      	movs	r2, #0
 8005e88:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2201      	movs	r2, #1
 8005e94:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	4a06      	ldr	r2, [pc, #24]	@ (8005ecc <LIS2DUXS12_GetCapabilities+0x58>)
 8005eb4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	44480000 	.word	0x44480000

08005ed0 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e016      	b.n	8005f14 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fab9 	bl	8006470 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f08:	e004      	b.n	8005f14 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e046      	b.n	8005fc0 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f893 	bl	8006064 <LIS2DUXS12_ACC_GetOutputDataRate>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f48:	e03a      	b.n	8005fc0 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8005f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f4e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005fc8 <LIS2DUXS12_ACC_Disable+0xac>
 8005f52:	eef4 7a47 	vcmp.f32	s15, s14
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5a:	d10e      	bne.n	8005f7a <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8005f5c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8005fcc <LIS2DUXS12_ACC_Disable+0xb0>
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f94b 	bl	80061fc <LIS2DUXS12_ACC_SetOutputDataRate>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f70:	e026      	b.n	8005fc0 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	2003      	movs	r0, #3
 8005f78:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3320      	adds	r3, #32
 8005f7e:	f107 0208 	add.w	r2, r7, #8
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 ff33 	bl	8006df0 <lis2duxs12_mode_get>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f94:	e014      	b.n	8005fc0 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8005f96:	2300      	movs	r3, #0
 8005f98:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3320      	adds	r3, #32
 8005f9e:	f107 0208 	add.w	r2, r7, #8
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fe03 	bl	8006bb0 <lis2duxs12_mode_set>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fb4:	e004      	b.n	8005fc0 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	44480000 	.word	0x44480000
 8005fcc:	43c80000 	.word	0x43c80000

08005fd0 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3320      	adds	r3, #32
 8005fe2:	f107 0208 	add.w	r2, r7, #8
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 ff01 	bl	8006df0 <lis2duxs12_mode_get>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ff8:	e026      	b.n	8006048 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8005ffa:	7a7b      	ldrb	r3, [r7, #9]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d81b      	bhi.n	8006038 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8006000:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	08006019 	.word	0x08006019
 800600c:	08006021 	.word	0x08006021
 8006010:	08006029 	.word	0x08006029
 8006014:	08006031 	.word	0x08006031
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	4a0d      	ldr	r2, [pc, #52]	@ (8006050 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 800601c:	601a      	str	r2, [r3, #0]
      break;
 800601e:	e012      	b.n	8006046 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	4a0c      	ldr	r2, [pc, #48]	@ (8006054 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8006024:	601a      	str	r2, [r3, #0]
      break;
 8006026:	e00e      	b.n	8006046 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4a0b      	ldr	r2, [pc, #44]	@ (8006058 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 800602c:	601a      	str	r2, [r3, #0]
      break;
 800602e:	e00a      	b.n	8006046 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4a0a      	ldr	r2, [pc, #40]	@ (800605c <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8006034:	601a      	str	r2, [r3, #0]
      break;
 8006036:	e006      	b.n	8006046 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4a09      	ldr	r2, [pc, #36]	@ (8006060 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 800603c:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006042:	60fb      	str	r3, [r7, #12]
      break;
 8006044:	bf00      	nop
  }

  return ret;
 8006046:	68fb      	ldr	r3, [r7, #12]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	3d79db23 	.word	0x3d79db23
 8006054:	3df9db23 	.word	0x3df9db23
 8006058:	3e79db23 	.word	0x3e79db23
 800605c:	3ef9db23 	.word	0x3ef9db23
 8006060:	bf800000 	.word	0xbf800000

08006064 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3320      	adds	r3, #32
 8006076:	f107 0208 	add.w	r2, r7, #8
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f000 feb7 	bl	8006df0 <lis2duxs12_mode_get>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800608c:	e09b      	b.n	80061c6 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 800608e:	7a3b      	ldrb	r3, [r7, #8]
 8006090:	2b2f      	cmp	r3, #47	@ 0x2f
 8006092:	f200 8090 	bhi.w	80061b6 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	0800615d 	.word	0x0800615d
 80060a0:	08006167 	.word	0x08006167
 80060a4:	0800616f 	.word	0x0800616f
 80060a8:	08006187 	.word	0x08006187
 80060ac:	08006177 	.word	0x08006177
 80060b0:	0800617f 	.word	0x0800617f
 80060b4:	08006187 	.word	0x08006187
 80060b8:	0800618f 	.word	0x0800618f
 80060bc:	08006197 	.word	0x08006197
 80060c0:	0800619f 	.word	0x0800619f
 80060c4:	080061a7 	.word	0x080061a7
 80060c8:	080061af 	.word	0x080061af
 80060cc:	080061b7 	.word	0x080061b7
 80060d0:	080061b7 	.word	0x080061b7
 80060d4:	080061b7 	.word	0x080061b7
 80060d8:	080061b7 	.word	0x080061b7
 80060dc:	080061b7 	.word	0x080061b7
 80060e0:	080061b7 	.word	0x080061b7
 80060e4:	080061b7 	.word	0x080061b7
 80060e8:	080061b7 	.word	0x080061b7
 80060ec:	08006177 	.word	0x08006177
 80060f0:	0800617f 	.word	0x0800617f
 80060f4:	08006187 	.word	0x08006187
 80060f8:	0800618f 	.word	0x0800618f
 80060fc:	08006197 	.word	0x08006197
 8006100:	0800619f 	.word	0x0800619f
 8006104:	080061a7 	.word	0x080061a7
 8006108:	080061af 	.word	0x080061af
 800610c:	080061b7 	.word	0x080061b7
 8006110:	080061b7 	.word	0x080061b7
 8006114:	080061b7 	.word	0x080061b7
 8006118:	080061b7 	.word	0x080061b7
 800611c:	080061b7 	.word	0x080061b7
 8006120:	080061b7 	.word	0x080061b7
 8006124:	080061b7 	.word	0x080061b7
 8006128:	080061b7 	.word	0x080061b7
 800612c:	080061b7 	.word	0x080061b7
 8006130:	080061b7 	.word	0x080061b7
 8006134:	080061b7 	.word	0x080061b7
 8006138:	080061b7 	.word	0x080061b7
 800613c:	080061b7 	.word	0x080061b7
 8006140:	080061b7 	.word	0x080061b7
 8006144:	080061b7 	.word	0x080061b7
 8006148:	080061b7 	.word	0x080061b7
 800614c:	080061b7 	.word	0x080061b7
 8006150:	080061b7 	.word	0x080061b7
 8006154:	0800615d 	.word	0x0800615d
 8006158:	0800615d 	.word	0x0800615d
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
      break;
 8006164:	e02e      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	4a19      	ldr	r2, [pc, #100]	@ (80061d0 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 800616a:	601a      	str	r2, [r3, #0]
      break;
 800616c:	e02a      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8006172:	601a      	str	r2, [r3, #0]
      break;
 8006174:	e026      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	4a17      	ldr	r2, [pc, #92]	@ (80061d8 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 800617a:	601a      	str	r2, [r3, #0]
      break;
 800617c:	e022      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4a16      	ldr	r2, [pc, #88]	@ (80061dc <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8006182:	601a      	str	r2, [r3, #0]
      break;
 8006184:	e01e      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 800618a:	601a      	str	r2, [r3, #0]
      break;
 800618c:	e01a      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	4a14      	ldr	r2, [pc, #80]	@ (80061e4 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8006192:	601a      	str	r2, [r3, #0]
      break;
 8006194:	e016      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	4a13      	ldr	r2, [pc, #76]	@ (80061e8 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 800619a:	601a      	str	r2, [r3, #0]
      break;
 800619c:	e012      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	4a12      	ldr	r2, [pc, #72]	@ (80061ec <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 80061a2:	601a      	str	r2, [r3, #0]
      break;
 80061a4:	e00e      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4a11      	ldr	r2, [pc, #68]	@ (80061f0 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 80061aa:	601a      	str	r2, [r3, #0]
      break;
 80061ac:	e00a      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	4a10      	ldr	r2, [pc, #64]	@ (80061f4 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 80061b2:	601a      	str	r2, [r3, #0]
      break;
 80061b4:	e006      	b.n	80061c4 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	4a0f      	ldr	r2, [pc, #60]	@ (80061f8 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 80061ba:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061c0:	60fb      	str	r3, [r7, #12]
      break;
 80061c2:	bf00      	nop
  }

  return ret;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	3fcccccd 	.word	0x3fcccccd
 80061d4:	40400000 	.word	0x40400000
 80061d8:	40c00000 	.word	0x40c00000
 80061dc:	41480000 	.word	0x41480000
 80061e0:	41c80000 	.word	0x41c80000
 80061e4:	42480000 	.word	0x42480000
 80061e8:	42c80000 	.word	0x42c80000
 80061ec:	43480000 	.word	0x43480000
 80061f0:	43c80000 	.word	0x43c80000
 80061f4:	44480000 	.word	0x44480000
 80061f8:	bf800000 	.word	0xbf800000

080061fc <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use Ultra Low Power disabled */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_LOW_POWER);
 8006208:	2101      	movs	r1, #1
 800620a:	ed97 0a00 	vldr	s0, [r7]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f805 	bl	800621e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8006214:	4603      	mov	r3, r0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	ed87 0a02 	vstr	s0, [r7, #8]
 800622a:	460b      	mov	r3, r1
 800622c:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006234:	2b01      	cmp	r3, #1
 8006236:	d108      	bne.n	800624a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	4619      	mov	r1, r3
 800623c:	ed97 0a02 	vldr	s0, [r7, #8]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f915 	bl	8006470 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8006246:	4603      	mov	r3, r0
 8006248:	e007      	b.n	800625a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	4619      	mov	r1, r3
 800624e:	ed97 0a02 	vldr	s0, [r7, #8]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa8a 	bl	800676c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8006258:	4603      	mov	r3, r0
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3320      	adds	r3, #32
 8006276:	f107 0208 	add.w	r2, r7, #8
 800627a:	4611      	mov	r1, r2
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fdb7 	bl	8006df0 <lis2duxs12_mode_get>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800628c:	e027      	b.n	80062de <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 800628e:	7a7b      	ldrb	r3, [r7, #9]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d81b      	bhi.n	80062cc <LIS2DUXS12_ACC_GetFullScale+0x68>
 8006294:	a201      	add	r2, pc, #4	@ (adr r2, 800629c <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062b5 	.word	0x080062b5
 80062a4:	080062bd 	.word	0x080062bd
 80062a8:	080062c5 	.word	0x080062c5
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2202      	movs	r2, #2
 80062b0:	601a      	str	r2, [r3, #0]
      break;
 80062b2:	e013      	b.n	80062dc <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2204      	movs	r2, #4
 80062b8:	601a      	str	r2, [r3, #0]
      break;
 80062ba:	e00f      	b.n	80062dc <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2208      	movs	r2, #8
 80062c0:	601a      	str	r2, [r3, #0]
      break;
 80062c2:	e00b      	b.n	80062dc <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	601a      	str	r2, [r3, #0]
      break;
 80062ca:	e007      	b.n	80062dc <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062d2:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80062d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062d8:	60fb      	str	r3, [r7, #12]
      break;
 80062da:	bf00      	nop
  }

  return ret;
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop

080062e8 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3320      	adds	r3, #32
 80062f6:	f107 020c 	add.w	r2, r7, #12
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fd77 	bl	8006df0 <lis2duxs12_mode_get>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8006308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800630c:	e01f      	b.n	800634e <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	dd0b      	ble.n	800632c <LIS2DUXS12_ACC_SetFullScale+0x44>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b04      	cmp	r3, #4
 8006318:	dd06      	ble.n	8006328 <LIS2DUXS12_ACC_SetFullScale+0x40>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b08      	cmp	r3, #8
 800631e:	dc01      	bgt.n	8006324 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8006320:	2302      	movs	r3, #2
 8006322:	e004      	b.n	800632e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8006324:	2303      	movs	r3, #3
 8006326:	e002      	b.n	800632e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <LIS2DUXS12_ACC_SetFullScale+0x46>
 800632c:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 800632e:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3320      	adds	r3, #32
 8006334:	f107 020c 	add.w	r2, r7, #12
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fc38 	bl	8006bb0 <lis2duxs12_mode_set>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 8006346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800634a:	e000      	b.n	800634e <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3320      	adds	r3, #32
 8006364:	f107 021c 	add.w	r2, r7, #28
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fd40 	bl	8006df0 <lis2duxs12_mode_get>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800637a:	e01b      	b.n	80063b4 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3320      	adds	r3, #32
 8006380:	f107 0208 	add.w	r2, r7, #8
 8006384:	f107 011c 	add.w	r1, r7, #28
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fe41 	bl	8007010 <lis2duxs12_xl_data_get>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8006394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006398:	e00c      	b.n	80063b4 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 800639a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 80063a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 80063aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3320      	adds	r3, #32
 80063ca:	f107 021c 	add.w	r2, r7, #28
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd0d 	bl	8006df0 <lis2duxs12_mode_get>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063e0:	e027      	b.n	8006432 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3320      	adds	r3, #32
 80063e6:	f107 0208 	add.w	r2, r7, #8
 80063ea:	f107 011c 	add.w	r1, r7, #28
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fe0e 	bl	8007010 <lis2duxs12_xl_data_get>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063fe:	e018      	b.n	8006432 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8006400:	edd7 7a02 	vldr	s15, [r7, #8]
 8006404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006408:	ee17 2a90 	vmov	r2, s15
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8006410:	edd7 7a03 	vldr	s15, [r7, #12]
 8006414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006418:	ee17 2a90 	vmov	r2, s15
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8006420:	edd7 7a04 	vldr	s15, [r7, #16]
 8006424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006428:	ee17 2a90 	vmov	r2, s15
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
 8006446:	4613      	mov	r3, r2
 8006448:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f103 0020 	add.w	r0, r3, #32
 8006450:	1cba      	adds	r2, r7, #2
 8006452:	78f9      	ldrb	r1, [r7, #3]
 8006454:	2301      	movs	r3, #1
 8006456:	f000 fa79 	bl	800694c <lis2duxs12_write_reg>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8006460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006464:	e000      	b.n	8006468 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	ed87 0a02 	vstr	s0, [r7, #8]
 800647c:	460b      	mov	r3, r1
 800647e:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3320      	adds	r3, #32
 8006484:	f107 0214 	add.w	r2, r7, #20
 8006488:	4611      	mov	r1, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fcb0 	bl	8006df0 <lis2duxs12_mode_get>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800649a:	e142      	b.n	8006722 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d118      	bne.n	80064d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 80064a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80064a6:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 800672c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 80064aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b2:	d801      	bhi.n	80064b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e00b      	b.n	80064d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80064b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80064bc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80064c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	d801      	bhi.n	80064ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e000      	b.n	80064d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80064ce:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 80064d0:	753b      	strb	r3, [r7, #20]
 80064d2:	e0a4      	b.n	800661e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d14f      	bne.n	800657a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 80064da:	edd7 7a02 	vldr	s15, [r7, #8]
 80064de:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80064e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	d801      	bhi.n	80064f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80064ec:	2304      	movs	r3, #4
 80064ee:	e042      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80064f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80064f4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80064f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006500:	d801      	bhi.n	8006506 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 8006502:	2305      	movs	r3, #5
 8006504:	e037      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8006506:	edd7 7a02 	vldr	s15, [r7, #8]
 800650a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800650e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006516:	d801      	bhi.n	800651c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006518:	2306      	movs	r3, #6
 800651a:	e02c      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800651c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006520:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8006730 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8006524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800652c:	d801      	bhi.n	8006532 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 800652e:	2307      	movs	r3, #7
 8006530:	e021      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8006532:	edd7 7a02 	vldr	s15, [r7, #8]
 8006536:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8006734 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 800653a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800653e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006542:	d801      	bhi.n	8006548 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006544:	2308      	movs	r3, #8
 8006546:	e016      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8006548:	edd7 7a02 	vldr	s15, [r7, #8]
 800654c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006738 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8006550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006558:	d801      	bhi.n	800655e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 800655a:	2309      	movs	r3, #9
 800655c:	e00b      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800655e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006562:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800673c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8006566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	d801      	bhi.n	8006574 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8006570:	230a      	movs	r3, #10
 8006572:	e000      	b.n	8006576 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8006574:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 8006576:	753b      	strb	r3, [r7, #20]
 8006578:	e051      	b.n	800661e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d14e      	bne.n	800661e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8006580:	edd7 7a02 	vldr	s15, [r7, #8]
 8006584:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8006588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	d801      	bhi.n	8006596 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8006592:	2314      	movs	r3, #20
 8006594:	e042      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8006596:	edd7 7a02 	vldr	s15, [r7, #8]
 800659a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800659e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	d801      	bhi.n	80065ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80065a8:	2315      	movs	r3, #21
 80065aa:	e037      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80065ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80065b0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80065b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	d801      	bhi.n	80065c2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80065be:	2316      	movs	r3, #22
 80065c0:	e02c      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80065c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80065c6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8006730 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80065ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d2:	d801      	bhi.n	80065d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80065d4:	2317      	movs	r3, #23
 80065d6:	e021      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80065d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80065dc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006734 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80065e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	d801      	bhi.n	80065ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80065ea:	2318      	movs	r3, #24
 80065ec:	e016      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80065ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80065f2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8006738 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80065f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fe:	d801      	bhi.n	8006604 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8006600:	2319      	movs	r3, #25
 8006602:	e00b      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8006604:	edd7 7a02 	vldr	s15, [r7, #8]
 8006608:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800673c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 800660c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	d801      	bhi.n	800661a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8006616:	231a      	movs	r3, #26
 8006618:	e000      	b.n	800661c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800661a:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 800661c:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3320      	adds	r3, #32
 8006622:	f107 0214 	add.w	r2, r7, #20
 8006626:	4611      	mov	r1, r2
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fac1 	bl	8006bb0 <lis2duxs12_mode_set>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 8006634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006638:	e073      	b.n	8006722 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 800663a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 800663c:	2b01      	cmp	r3, #1
 800663e:	d05b      	beq.n	80066f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8006640:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8006642:	2b02      	cmp	r3, #2
 8006644:	d056      	beq.n	80066f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 8006646:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8006648:	2b04      	cmp	r3, #4
 800664a:	d051      	beq.n	80066f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 800664c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 800664e:	2b14      	cmp	r3, #20
 8006650:	d04c      	beq.n	80066ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8006652:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8006654:	2b05      	cmp	r3, #5
 8006656:	d047      	beq.n	80066e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 8006658:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800665a:	2b15      	cmp	r3, #21
 800665c:	d042      	beq.n	80066e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 800665e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8006660:	2b03      	cmp	r3, #3
 8006662:	d03d      	beq.n	80066e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8006664:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8006666:	2b06      	cmp	r3, #6
 8006668:	d038      	beq.n	80066dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 800666a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 800666c:	2b16      	cmp	r3, #22
 800666e:	d033      	beq.n	80066d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8006670:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8006672:	2b07      	cmp	r3, #7
 8006674:	d02e      	beq.n	80066d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 8006676:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8006678:	2b17      	cmp	r3, #23
 800667a:	d029      	beq.n	80066d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 800667c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 800667e:	2b08      	cmp	r3, #8
 8006680:	d024      	beq.n	80066cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8006682:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8006684:	2b18      	cmp	r3, #24
 8006686:	d01f      	beq.n	80066c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8006688:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800668a:	2b09      	cmp	r3, #9
 800668c:	d01a      	beq.n	80066c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 800668e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8006690:	2b19      	cmp	r3, #25
 8006692:	d015      	beq.n	80066c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8006694:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8006696:	2b0a      	cmp	r3, #10
 8006698:	d010      	beq.n	80066bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800669a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 800669c:	2b1a      	cmp	r3, #26
 800669e:	d00b      	beq.n	80066b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 80066a0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80066a2:	2b0b      	cmp	r3, #11
 80066a4:	d006      	beq.n	80066b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 80066a6:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 80066a8:	2b1b      	cmp	r3, #27
 80066aa:	d101      	bne.n	80066b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 80066ac:	4b24      	ldr	r3, [pc, #144]	@ (8006740 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80066ae:	e024      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80066b0:	4b24      	ldr	r3, [pc, #144]	@ (8006744 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 80066b2:	e022      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80066b4:	4b22      	ldr	r3, [pc, #136]	@ (8006740 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80066b6:	e020      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80066b8:	4b23      	ldr	r3, [pc, #140]	@ (8006748 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80066ba:	e01e      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 80066bc:	4b22      	ldr	r3, [pc, #136]	@ (8006748 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80066be:	e01c      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80066c0:	4b22      	ldr	r3, [pc, #136]	@ (800674c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80066c2:	e01a      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80066c4:	4b21      	ldr	r3, [pc, #132]	@ (800674c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80066c6:	e018      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80066c8:	4b21      	ldr	r3, [pc, #132]	@ (8006750 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80066ca:	e016      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80066cc:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80066ce:	e014      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80066d0:	4b20      	ldr	r3, [pc, #128]	@ (8006754 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80066d2:	e012      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80066d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006754 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80066d6:	e010      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80066d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006758 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80066da:	e00e      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80066dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006758 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80066de:	e00c      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80066e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80066e2:	e00a      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80066e4:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80066e6:	e008      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80066e8:	4b1c      	ldr	r3, [pc, #112]	@ (800675c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80066ea:	e006      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80066ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006760 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80066ee:	e004      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80066f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80066f2:	e002      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80066f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006764 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80066f6:	e000      	b.n	80066fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80066f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006768 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8006704:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006708:	eef4 7a47 	vcmp.f32	s15, s14
 800670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006710:	d102      	bne.n	8006718 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006716:	e004      	b.n	8006722 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	79fa      	ldrb	r2, [r7, #7]
 800671c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	3fcccccd 	.word	0x3fcccccd
 8006730:	42480000 	.word	0x42480000
 8006734:	42c80000 	.word	0x42c80000
 8006738:	43480000 	.word	0x43480000
 800673c:	43c80000 	.word	0x43c80000
 8006740:	44480000 	.word	0x44480000
 8006744:	bf800000 	.word	0xbf800000
 8006748:	43c80000 	.word	0x43c80000
 800674c:	43480000 	.word	0x43480000
 8006750:	42c80000 	.word	0x42c80000
 8006754:	42480000 	.word	0x42480000
 8006758:	41c80000 	.word	0x41c80000
 800675c:	41480000 	.word	0x41480000
 8006760:	40c00000 	.word	0x40c00000
 8006764:	40400000 	.word	0x40400000
 8006768:	3fcccccd 	.word	0x3fcccccd

0800676c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	ed87 0a02 	vstr	s0, [r7, #8]
 8006778:	460b      	mov	r3, r1
 800677a:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d11a      	bne.n	80067b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8006782:	edd7 7a02 	vldr	s15, [r7, #8]
 8006786:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800678a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006792:	d802      	bhi.n	800679a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8006794:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006798:	e00b      	b.n	80067b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 800679a:	edd7 7a02 	vldr	s15, [r7, #8]
 800679e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80067a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067aa:	d801      	bhi.n	80067b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 80067ac:	4b33      	ldr	r3, [pc, #204]	@ (800687c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80067ae:	e000      	b.n	80067b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 80067b0:	4b33      	ldr	r3, [pc, #204]	@ (8006880 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80067b6:	e055      	b.n	8006864 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d002      	beq.n	80067c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d14f      	bne.n	8006864 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 80067c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80067c8:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80067cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d4:	d801      	bhi.n	80067da <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80067d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006884 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 80067d8:	e042      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 80067da:	edd7 7a02 	vldr	s15, [r7, #8]
 80067de:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80067e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ea:	d801      	bhi.n	80067f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 80067ec:	4b26      	ldr	r3, [pc, #152]	@ (8006888 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80067ee:	e037      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80067f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80067f4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80067f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006800:	d801      	bhi.n	8006806 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8006802:	4b1f      	ldr	r3, [pc, #124]	@ (8006880 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8006804:	e02c      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 8006806:	edd7 7a02 	vldr	s15, [r7, #8]
 800680a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800688c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 800680e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006816:	d801      	bhi.n	800681c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8006818:	4b1d      	ldr	r3, [pc, #116]	@ (8006890 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 800681a:	e021      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 800681c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006820:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8006894 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8006824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682c:	d801      	bhi.n	8006832 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 800682e:	4b1a      	ldr	r3, [pc, #104]	@ (8006898 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8006830:	e016      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 8006832:	edd7 7a02 	vldr	s15, [r7, #8]
 8006836:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800689c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 800683a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800683e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006842:	d801      	bhi.n	8006848 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8006844:	4b16      	ldr	r3, [pc, #88]	@ (80068a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8006846:	e00b      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8006848:	edd7 7a02 	vldr	s15, [r7, #8]
 800684c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80068a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8006850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006858:	d801      	bhi.n	800685e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 800685a:	4b13      	ldr	r3, [pc, #76]	@ (80068a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 800685c:	e000      	b.n	8006860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800685e:	4b13      	ldr	r3, [pc, #76]	@ (80068ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	79fa      	ldrb	r2, [r7, #7]
 8006868:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40400000 	.word	0x40400000
 8006880:	41c80000 	.word	0x41c80000
 8006884:	40c00000 	.word	0x40c00000
 8006888:	41480000 	.word	0x41480000
 800688c:	42480000 	.word	0x42480000
 8006890:	42480000 	.word	0x42480000
 8006894:	42c80000 	.word	0x42c80000
 8006898:	42c80000 	.word	0x42c80000
 800689c:	43480000 	.word	0x43480000
 80068a0:	43480000 	.word	0x43480000
 80068a4:	43c80000 	.word	0x43c80000
 80068a8:	43c80000 	.word	0x43c80000
 80068ac:	44480000 	.word	0x44480000

080068b0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	461a      	mov	r2, r3
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
 80068c0:	4613      	mov	r3, r2
 80068c2:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	695c      	ldr	r4, [r3, #20]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	7b1b      	ldrb	r3, [r3, #12]
 80068d0:	4618      	mov	r0, r3
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	b299      	uxth	r1, r3
 80068d6:	893b      	ldrh	r3, [r7, #8]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	47a0      	blx	r4
 80068dc:	4603      	mov	r3, r0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd90      	pop	{r4, r7, pc}

080068e6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80068e6:	b590      	push	{r4, r7, lr}
 80068e8:	b087      	sub	sp, #28
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	461a      	mov	r2, r3
 80068f2:	460b      	mov	r3, r1
 80068f4:	72fb      	strb	r3, [r7, #11]
 80068f6:	4613      	mov	r3, r2
 80068f8:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	691c      	ldr	r4, [r3, #16]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	7b1b      	ldrb	r3, [r3, #12]
 8006906:	4618      	mov	r0, r3
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	b299      	uxth	r1, r3
 800690c:	893b      	ldrh	r3, [r7, #8]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	47a0      	blx	r4
 8006912:	4603      	mov	r3, r0
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	bd90      	pop	{r4, r7, pc}

0800691c <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                                   uint16_t len)
{
 800691c:	b590      	push	{r4, r7, lr}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	461a      	mov	r2, r3
 8006928:	460b      	mov	r3, r1
 800692a:	72fb      	strb	r3, [r7, #11]
 800692c:	4613      	mov	r3, r2
 800692e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685c      	ldr	r4, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68d8      	ldr	r0, [r3, #12]
 8006938:	893b      	ldrh	r3, [r7, #8]
 800693a:	7af9      	ldrb	r1, [r7, #11]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	47a0      	blx	r4
 8006940:	6178      	str	r0, [r7, #20]
  return ret;
 8006942:	697b      	ldr	r3, [r7, #20]
}
 8006944:	4618      	mov	r0, r3
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	bd90      	pop	{r4, r7, pc}

0800694c <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                                    uint16_t len)
{
 800694c:	b590      	push	{r4, r7, lr}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	607a      	str	r2, [r7, #4]
 8006956:	461a      	mov	r2, r3
 8006958:	460b      	mov	r3, r1
 800695a:	72fb      	strb	r3, [r7, #11]
 800695c:	4613      	mov	r3, r2
 800695e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681c      	ldr	r4, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68d8      	ldr	r0, [r3, #12]
 8006968:	893b      	ldrh	r3, [r7, #8]
 800696a:	7af9      	ldrb	r1, [r7, #11]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	47a0      	blx	r4
 8006970:	6178      	str	r0, [r7, #20]
  return ret;
 8006972:	697b      	ldr	r3, [r7, #20]
}
 8006974:	4618      	mov	r0, r3
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	bd90      	pop	{r4, r7, pc}

0800697c <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8006986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006992:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80069a8 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8006996:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800699a:	eeb0 0a67 	vmov.f32	s0, s15
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	3d79db23 	.word	0x3d79db23

080069ac <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 80069b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069c2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80069d8 <lis2duxs12_from_fs4g_to_mg+0x2c>
 80069c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80069ca:	eeb0 0a67 	vmov.f32	s0, s15
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	3df9db23 	.word	0x3df9db23

080069dc <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 80069e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069f2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006a08 <lis2duxs12_from_fs8g_to_mg+0x2c>
 80069f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80069fa:	eeb0 0a67 	vmov.f32	s0, s15
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	3e79db23 	.word	0x3e79db23

08006a0c <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8006a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a22:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006a38 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8006a26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	3ef9db23 	.word	0x3ef9db23

08006a3c <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8006a46:	2301      	movs	r3, #1
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	210f      	movs	r1, #15
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff65 	bl	800691c <lis2duxs12_read_reg>
 8006a52:	60f8      	str	r0, [r7, #12]

  return ret;
 8006a54:	68fb      	ldr	r3, [r7, #12]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006a70:	f107 0210 	add.w	r2, r7, #16
 8006a74:	2301      	movs	r3, #1
 8006a76:	2110      	movs	r1, #16
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ff4f 	bl	800691c <lis2duxs12_read_reg>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4413      	add	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 8006a86:	f107 020c 	add.w	r2, r7, #12
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	2113      	movs	r1, #19
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff ff44 	bl	800691c <lis2duxs12_read_reg>
 8006a94:	4602      	mov	r2, r0
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
  switch (val) {
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d870      	bhi.n	8006b84 <lis2duxs12_init_set+0x124>
 8006aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <lis2duxs12_init_set+0x48>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006af9 	.word	0x08006af9
 8006aac:	08006ab9 	.word	0x08006ab9
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006b3f 	.word	0x08006b3f
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8006ab8:	7b3b      	ldrb	r3, [r7, #12]
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	733b      	strb	r3, [r7, #12]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 8006ac0:	f107 020c 	add.w	r2, r7, #12
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	2113      	movs	r1, #19
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff ff3f 	bl	800694c <lis2duxs12_write_reg>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]
      break;
 8006ad6:	e065      	b.n	8006ba4 <lis2duxs12_init_set+0x144>
    case LIS2DUXS12_RESET:

      ctrl1.sw_reset = PROPERTY_ENABLE;
 8006ad8:	7c3b      	ldrb	r3, [r7, #16]
 8006ada:	f043 0320 	orr.w	r3, r3, #32
 8006ade:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006ae0:	f107 0210 	add.w	r2, r7, #16
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	2110      	movs	r1, #16
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff ff2f 	bl	800694c <lis2duxs12_write_reg>
 8006aee:	4602      	mov	r2, r0
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4413      	add	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]
      break;
 8006af6:	e055      	b.n	8006ba4 <lis2duxs12_init_set+0x144>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8006af8:	7b3b      	ldrb	r3, [r7, #12]
 8006afa:	f36f 1304 	bfc	r3, #4, #1
 8006afe:	733b      	strb	r3, [r7, #12]
      ctrl4.bdu = PROPERTY_ENABLE;
 8006b00:	7b3b      	ldrb	r3, [r7, #12]
 8006b02:	f043 0320 	orr.w	r3, r3, #32
 8006b06:	733b      	strb	r3, [r7, #12]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8006b08:	7c3b      	ldrb	r3, [r7, #16]
 8006b0a:	f043 0310 	orr.w	r3, r3, #16
 8006b0e:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 8006b10:	f107 020c 	add.w	r2, r7, #12
 8006b14:	2301      	movs	r3, #1
 8006b16:	2113      	movs	r1, #19
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff17 	bl	800694c <lis2duxs12_write_reg>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006b26:	f107 0210 	add.w	r2, r7, #16
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	2110      	movs	r1, #16
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff0c 	bl	800694c <lis2duxs12_write_reg>
 8006b34:	4602      	mov	r2, r0
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
      break;
 8006b3c:	e032      	b.n	8006ba4 <lis2duxs12_init_set+0x144>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8006b3e:	7b3b      	ldrb	r3, [r7, #12]
 8006b40:	f043 0310 	orr.w	r3, r3, #16
 8006b44:	733b      	strb	r3, [r7, #12]
      ctrl4.bdu = PROPERTY_ENABLE;
 8006b46:	7b3b      	ldrb	r3, [r7, #12]
 8006b48:	f043 0320 	orr.w	r3, r3, #32
 8006b4c:	733b      	strb	r3, [r7, #12]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8006b4e:	7c3b      	ldrb	r3, [r7, #16]
 8006b50:	f043 0310 	orr.w	r3, r3, #16
 8006b54:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t*)&ctrl4, 1);
 8006b56:	f107 020c 	add.w	r2, r7, #12
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	2113      	movs	r1, #19
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fef4 	bl	800694c <lis2duxs12_write_reg>
 8006b64:	4602      	mov	r2, r0
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	4413      	add	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006b6c:	f107 0210 	add.w	r2, r7, #16
 8006b70:	2301      	movs	r3, #1
 8006b72:	2110      	movs	r1, #16
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fee9 	bl	800694c <lis2duxs12_write_reg>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
      break;
 8006b82:	e00f      	b.n	8006ba4 <lis2duxs12_init_set+0x144>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8006b84:	7c3b      	ldrb	r3, [r7, #16]
 8006b86:	f043 0320 	orr.w	r3, r3, #32
 8006b8a:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t*)&ctrl1, 1);
 8006b8c:	f107 0210 	add.w	r2, r7, #16
 8006b90:	2301      	movs	r3, #1
 8006b92:	2110      	movs	r1, #16
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fed9 	bl	800694c <lis2duxs12_write_reg>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
      break;
 8006ba2:	bf00      	nop
  }
  return ret;
 8006ba4:	697b      	ldr	r3, [r7, #20]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t*)&ctrl5, 1);
 8006bba:	f107 020c 	add.w	r2, r7, #12
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	2114      	movs	r1, #20
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff feaa 	bl	800691c <lis2duxs12_read_reg>
 8006bc8:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	7b3b      	ldrb	r3, [r7, #12]
 8006bd6:	f362 1307 	bfi	r3, r2, #4, #4
 8006bda:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	7b3b      	ldrb	r3, [r7, #12]
 8006be8:	f362 0301 	bfi	r3, r2, #0, #2
 8006bec:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr) {
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b2f      	cmp	r3, #47	@ 0x2f
 8006bf4:	f200 80c8 	bhi.w	8006d88 <lis2duxs12_mode_set+0x1d8>
 8006bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006c00 <lis2duxs12_mode_set+0x50>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006cc1 	.word	0x08006cc1
 8006c04:	08006cc1 	.word	0x08006cc1
 8006c08:	08006cc1 	.word	0x08006cc1
 8006c0c:	08006cc1 	.word	0x08006cc1
 8006c10:	08006ccb 	.word	0x08006ccb
 8006c14:	08006cef 	.word	0x08006cef
 8006c18:	08006d23 	.word	0x08006d23
 8006c1c:	08006d6b 	.word	0x08006d6b
 8006c20:	08006d6b 	.word	0x08006d6b
 8006c24:	08006d6b 	.word	0x08006d6b
 8006c28:	08006d6b 	.word	0x08006d6b
 8006c2c:	08006d6b 	.word	0x08006d6b
 8006c30:	08006d89 	.word	0x08006d89
 8006c34:	08006d89 	.word	0x08006d89
 8006c38:	08006d89 	.word	0x08006d89
 8006c3c:	08006d89 	.word	0x08006d89
 8006c40:	08006d89 	.word	0x08006d89
 8006c44:	08006d89 	.word	0x08006d89
 8006c48:	08006d89 	.word	0x08006d89
 8006c4c:	08006d89 	.word	0x08006d89
 8006c50:	08006d6b 	.word	0x08006d6b
 8006c54:	08006d6b 	.word	0x08006d6b
 8006c58:	08006d6b 	.word	0x08006d6b
 8006c5c:	08006d6b 	.word	0x08006d6b
 8006c60:	08006d6b 	.word	0x08006d6b
 8006c64:	08006d6b 	.word	0x08006d6b
 8006c68:	08006d6b 	.word	0x08006d6b
 8006c6c:	08006d6b 	.word	0x08006d6b
 8006c70:	08006d89 	.word	0x08006d89
 8006c74:	08006d89 	.word	0x08006d89
 8006c78:	08006d89 	.word	0x08006d89
 8006c7c:	08006d89 	.word	0x08006d89
 8006c80:	08006d89 	.word	0x08006d89
 8006c84:	08006d89 	.word	0x08006d89
 8006c88:	08006d89 	.word	0x08006d89
 8006c8c:	08006d89 	.word	0x08006d89
 8006c90:	08006d89 	.word	0x08006d89
 8006c94:	08006d89 	.word	0x08006d89
 8006c98:	08006d89 	.word	0x08006d89
 8006c9c:	08006d89 	.word	0x08006d89
 8006ca0:	08006d89 	.word	0x08006d89
 8006ca4:	08006d89 	.word	0x08006d89
 8006ca8:	08006d89 	.word	0x08006d89
 8006cac:	08006d89 	.word	0x08006d89
 8006cb0:	08006d89 	.word	0x08006d89
 8006cb4:	08006d89 	.word	0x08006d89
 8006cb8:	08006d6b 	.word	0x08006d6b
 8006cbc:	08006d6b 	.word	0x08006d6b
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8006cc0:	7b3b      	ldrb	r3, [r7, #12]
 8006cc2:	f36f 0383 	bfc	r3, #2, #2
 8006cc6:	733b      	strb	r3, [r7, #12]
      break;
 8006cc8:	e05e      	b.n	8006d88 <lis2duxs12_mode_set+0x1d8>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch(val->bw) {
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	789b      	ldrb	r3, [r3, #2]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <lis2duxs12_mode_set+0x132>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db53      	blt.n	8006d7e <lis2duxs12_mode_set+0x1ce>
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d850      	bhi.n	8006d7e <lis2duxs12_mode_set+0x1ce>
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
        case LIS2DUXS12_ODR_div_16:
          return -1;
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ce0:	e081      	b.n	8006de6 <lis2duxs12_mode_set+0x236>
        case LIS2DUXS12_ODR_div_2:
          ctrl5.bw = 0x3;
 8006ce2:	7b3b      	ldrb	r3, [r7, #12]
 8006ce4:	f043 030c 	orr.w	r3, r3, #12
 8006ce8:	733b      	strb	r3, [r7, #12]
          break;
 8006cea:	bf00      	nop
      }
      break;
 8006cec:	e047      	b.n	8006d7e <lis2duxs12_mode_set+0x1ce>
    case LIS2DUXS12_12Hz5_LP:
      switch(val->bw) {
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	dc45      	bgt.n	8006d82 <lis2duxs12_mode_set+0x1d2>
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	da04      	bge.n	8006d04 <lis2duxs12_mode_set+0x154>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <lis2duxs12_mode_set+0x15a>
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d009      	beq.n	8006d16 <lis2duxs12_mode_set+0x166>
          break;
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x3;
          break;
      }
      break;
 8006d02:	e03e      	b.n	8006d82 <lis2duxs12_mode_set+0x1d2>
          return -1;
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d08:	e06d      	b.n	8006de6 <lis2duxs12_mode_set+0x236>
          ctrl5.bw = 0x2;
 8006d0a:	7b3b      	ldrb	r3, [r7, #12]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f362 0383 	bfi	r3, r2, #2, #2
 8006d12:	733b      	strb	r3, [r7, #12]
          break;
 8006d14:	e004      	b.n	8006d20 <lis2duxs12_mode_set+0x170>
          ctrl5.bw = 0x3;
 8006d16:	7b3b      	ldrb	r3, [r7, #12]
 8006d18:	f043 030c 	orr.w	r3, r3, #12
 8006d1c:	733b      	strb	r3, [r7, #12]
          break;
 8006d1e:	bf00      	nop
      break;
 8006d20:	e02f      	b.n	8006d82 <lis2duxs12_mode_set+0x1d2>
    case LIS2DUXS12_25Hz_LP:
      switch(val->bw) {
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	789b      	ldrb	r3, [r3, #2]
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d82d      	bhi.n	8006d86 <lis2duxs12_mode_set+0x1d6>
 8006d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d30 <lis2duxs12_mode_set+0x180>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d47 	.word	0x08006d47
 8006d34:	08006d53 	.word	0x08006d53
 8006d38:	08006d5f 	.word	0x08006d5f
 8006d3c:	08006d41 	.word	0x08006d41
        case LIS2DUXS12_ODR_div_16:
          return -1;
 8006d40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d44:	e04f      	b.n	8006de6 <lis2duxs12_mode_set+0x236>
        case LIS2DUXS12_ODR_div_2:
          ctrl5.bw = 0x1;
 8006d46:	7b3b      	ldrb	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f362 0383 	bfi	r3, r2, #2, #2
 8006d4e:	733b      	strb	r3, [r7, #12]
          break;
 8006d50:	e00a      	b.n	8006d68 <lis2duxs12_mode_set+0x1b8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x2;
 8006d52:	7b3b      	ldrb	r3, [r7, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f362 0383 	bfi	r3, r2, #2, #2
 8006d5a:	733b      	strb	r3, [r7, #12]
          break;
 8006d5c:	e004      	b.n	8006d68 <lis2duxs12_mode_set+0x1b8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x3;
 8006d5e:	7b3b      	ldrb	r3, [r7, #12]
 8006d60:	f043 030c 	orr.w	r3, r3, #12
 8006d64:	733b      	strb	r3, [r7, #12]
          break;
 8006d66:	bf00      	nop
      }
      break;
 8006d68:	e00d      	b.n	8006d86 <lis2duxs12_mode_set+0x1d6>
    case LIS2DUXS12_50Hz_HP:
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
      ctrl5.bw = (uint8_t)val->bw;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	789b      	ldrb	r3, [r3, #2]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	7b3b      	ldrb	r3, [r7, #12]
 8006d76:	f362 0383 	bfi	r3, r2, #2, #2
 8006d7a:	733b      	strb	r3, [r7, #12]
      break;
 8006d7c:	e004      	b.n	8006d88 <lis2duxs12_mode_set+0x1d8>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <lis2duxs12_mode_set+0x1d8>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <lis2duxs12_mode_set+0x1d8>
      break;
 8006d86:	bf00      	nop
  }

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t*)&ctrl3, 1);
 8006d88:	f107 0210 	add.w	r2, r7, #16
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	2112      	movs	r1, #18
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fdc3 	bl	800691c <lis2duxs12_read_reg>
 8006d96:	4602      	mov	r2, r0
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d101      	bne.n	8006dae <lis2duxs12_mode_set+0x1fe>
 8006daa:	2201      	movs	r2, #1
 8006dac:	e000      	b.n	8006db0 <lis2duxs12_mode_set+0x200>
 8006dae:	2200      	movs	r2, #0
 8006db0:	7c3b      	ldrb	r3, [r7, #16]
 8006db2:	f362 0382 	bfi	r3, r2, #2, #1
 8006db6:	743b      	strb	r3, [r7, #16]

  if (ret == 0) {
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d112      	bne.n	8006de4 <lis2duxs12_mode_set+0x234>
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t*)&ctrl5, 1);
 8006dbe:	f107 020c 	add.w	r2, r7, #12
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	2114      	movs	r1, #20
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fdc0 	bl	800694c <lis2duxs12_write_reg>
 8006dcc:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t*)&ctrl3, 1);
 8006dce:	f107 0210 	add.w	r2, r7, #16
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	2112      	movs	r1, #18
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fdb8 	bl	800694c <lis2duxs12_write_reg>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006de4:	697b      	ldr	r3, [r7, #20]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop

08006df0 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t*)&ctrl5, 1);
 8006dfa:	f107 020c 	add.w	r2, r7, #12
 8006dfe:	2301      	movs	r3, #1
 8006e00:	2114      	movs	r1, #20
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fd8a 	bl	800691c <lis2duxs12_read_reg>
 8006e08:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t*)&ctrl3, 1);
 8006e0a:	f107 0210 	add.w	r2, r7, #16
 8006e0e:	2301      	movs	r3, #1
 8006e10:	2112      	movs	r1, #18
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fd82 	bl	800691c <lis2duxs12_read_reg>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr) {
 8006e20:	7b3b      	ldrb	r3, [r7, #12]
 8006e22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b0b      	cmp	r3, #11
 8006e2a:	f200 8083 	bhi.w	8006f34 <lis2duxs12_mode_get+0x144>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <lis2duxs12_mode_get+0x44>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e6d 	.word	0x08006e6d
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e7d 	.word	0x08006e7d
 8006e44:	08006e85 	.word	0x08006e85
 8006e48:	08006e8d 	.word	0x08006e8d
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006ebd 	.word	0x08006ebd
 8006e54:	08006ed5 	.word	0x08006ed5
 8006e58:	08006eed 	.word	0x08006eed
 8006e5c:	08006f05 	.word	0x08006f05
 8006e60:	08006f1d 	.word	0x08006f1d
    case LIS2DUXS12_OFF:
      val->odr = LIS2DUXS12_OFF;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e067      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_1Hz6_ULP:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
      break;
 8006e72:	e063      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_3Hz_ULP:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2202      	movs	r2, #2
 8006e78:	701a      	strb	r2, [r3, #0]
      break;
 8006e7a:	e05f      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_25Hz_ULP:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2203      	movs	r2, #3
 8006e80:	701a      	strb	r2, [r3, #0]
      break;
 8006e82:	e05b      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_6Hz_LP:
      val->odr = LIS2DUXS12_6Hz_LP;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2204      	movs	r2, #4
 8006e88:	701a      	strb	r2, [r3, #0]
      break;
 8006e8a:	e057      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_12Hz5_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8006e8c:	7c3b      	ldrb	r3, [r7, #16]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <lis2duxs12_mode_get+0xac>
 8006e98:	2215      	movs	r2, #21
 8006e9a:	e000      	b.n	8006e9e <lis2duxs12_mode_get+0xae>
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	701a      	strb	r2, [r3, #0]
      break;
 8006ea2:	e04b      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_25Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8006ea4:	7c3b      	ldrb	r3, [r7, #16]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <lis2duxs12_mode_get+0xc4>
 8006eb0:	2216      	movs	r2, #22
 8006eb2:	e000      	b.n	8006eb6 <lis2duxs12_mode_get+0xc6>
 8006eb4:	2206      	movs	r2, #6
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e03f      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_50Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8006ebc:	7c3b      	ldrb	r3, [r7, #16]
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <lis2duxs12_mode_get+0xdc>
 8006ec8:	2217      	movs	r2, #23
 8006eca:	e000      	b.n	8006ece <lis2duxs12_mode_get+0xde>
 8006ecc:	2207      	movs	r2, #7
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e033      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_100Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8006ed4:	7c3b      	ldrb	r3, [r7, #16]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <lis2duxs12_mode_get+0xf4>
 8006ee0:	2218      	movs	r2, #24
 8006ee2:	e000      	b.n	8006ee6 <lis2duxs12_mode_get+0xf6>
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
      break;
 8006eea:	e027      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_200Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8006eec:	7c3b      	ldrb	r3, [r7, #16]
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <lis2duxs12_mode_get+0x10c>
 8006ef8:	2219      	movs	r2, #25
 8006efa:	e000      	b.n	8006efe <lis2duxs12_mode_get+0x10e>
 8006efc:	2209      	movs	r2, #9
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	701a      	strb	r2, [r3, #0]
      break;
 8006f02:	e01b      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_400Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8006f04:	7c3b      	ldrb	r3, [r7, #16]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <lis2duxs12_mode_get+0x124>
 8006f10:	221a      	movs	r2, #26
 8006f12:	e000      	b.n	8006f16 <lis2duxs12_mode_get+0x126>
 8006f14:	220a      	movs	r2, #10
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	701a      	strb	r2, [r3, #0]
      break;
 8006f1a:	e00f      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
    case LIS2DUXS12_800Hz_LP:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8006f1c:	7c3b      	ldrb	r3, [r7, #16]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <lis2duxs12_mode_get+0x13c>
 8006f28:	221b      	movs	r2, #27
 8006f2a:	e000      	b.n	8006f2e <lis2duxs12_mode_get+0x13e>
 8006f2c:	220b      	movs	r2, #11
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	701a      	strb	r2, [r3, #0]
      break;
 8006f32:	e003      	b.n	8006f3c <lis2duxs12_mode_get+0x14c>
      break;
    case LIS2DUXS12_TRIG_SW:
      val->odr = LIS2DUXS12_TRIG_SW;
      break;
    default:
      val->odr = LIS2DUXS12_OFF;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
      break;
 8006f3a:	bf00      	nop
  }

  switch (ctrl5.fs) {
 8006f3c:	7b3b      	ldrb	r3, [r7, #12]
 8006f3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d81b      	bhi.n	8006f80 <lis2duxs12_mode_get+0x190>
 8006f48:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <lis2duxs12_mode_get+0x160>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f69 	.word	0x08006f69
 8006f58:	08006f71 	.word	0x08006f71
 8006f5c:	08006f79 	.word	0x08006f79
    case LIS2DUXS12_2g:
      val->fs = LIS2DUXS12_2g;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	705a      	strb	r2, [r3, #1]
      break;
 8006f66:	e00f      	b.n	8006f88 <lis2duxs12_mode_get+0x198>
    case LIS2DUXS12_4g:
      val->fs = LIS2DUXS12_4g;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	705a      	strb	r2, [r3, #1]
      break;
 8006f6e:	e00b      	b.n	8006f88 <lis2duxs12_mode_get+0x198>
    case LIS2DUXS12_8g:
      val->fs = LIS2DUXS12_8g;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2202      	movs	r2, #2
 8006f74:	705a      	strb	r2, [r3, #1]
      break;
 8006f76:	e007      	b.n	8006f88 <lis2duxs12_mode_get+0x198>
    case LIS2DUXS12_16g:
      val->fs = LIS2DUXS12_16g;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	705a      	strb	r2, [r3, #1]
      break;
 8006f7e:	e003      	b.n	8006f88 <lis2duxs12_mode_get+0x198>
    default:
      val->fs = LIS2DUXS12_2g;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	705a      	strb	r2, [r3, #1]
      break;
 8006f86:	bf00      	nop
  }

  switch (ctrl5.bw) {
 8006f88:	7b3b      	ldrb	r3, [r7, #12]
 8006f8a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d81b      	bhi.n	8006fcc <lis2duxs12_mode_get+0x1dc>
 8006f94:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <lis2duxs12_mode_get+0x1ac>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb5 	.word	0x08006fb5
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08006fc5 	.word	0x08006fc5
    case LIS2DUXS12_ODR_div_2:
      val->bw = LIS2DUXS12_ODR_div_2;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	709a      	strb	r2, [r3, #2]
      break;
 8006fb2:	e00f      	b.n	8006fd4 <lis2duxs12_mode_get+0x1e4>
    case LIS2DUXS12_ODR_div_4:
      val->bw = LIS2DUXS12_ODR_div_4;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	709a      	strb	r2, [r3, #2]
      break;
 8006fba:	e00b      	b.n	8006fd4 <lis2duxs12_mode_get+0x1e4>
    case LIS2DUXS12_ODR_div_8:
      val->bw = LIS2DUXS12_ODR_div_8;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	709a      	strb	r2, [r3, #2]
      break;
 8006fc2:	e007      	b.n	8006fd4 <lis2duxs12_mode_get+0x1e4>
    case LIS2DUXS12_ODR_div_16:
      val->bw = LIS2DUXS12_ODR_div_16;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	709a      	strb	r2, [r3, #2]
      break;
 8006fca:	e003      	b.n	8006fd4 <lis2duxs12_mode_get+0x1e4>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	709a      	strb	r2, [r3, #2]
      break;
 8006fd2:	bf00      	nop
  }

  return ret;
 8006fd4:	697b      	ldr	r3, [r7, #20]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(stmdev_ctx_t *ctx)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  lis2duxs12_if_wake_up_t if_wake_up = {0};
 8006fe8:	2300      	movs	r3, #0
 8006fea:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  if_wake_up.soft_pd = PROPERTY_ENABLE;
 8006fec:	7a3b      	ldrb	r3, [r7, #8]
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_IF_WAKE_UP, (uint8_t *)&if_wake_up, 1);
 8006ff4:	f107 0208 	add.w	r2, r7, #8
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	213e      	movs	r1, #62	@ 0x3e
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fca5 	bl	800694c <lis2duxs12_write_reg>
 8007002:	60f8      	str	r0, [r7, #12]

  return ret;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(stmdev_ctx_t *ctx, lis2duxs12_md_t *md,
                          lis2duxs12_xl_data_t *data)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 800701c:	f107 0210 	add.w	r2, r7, #16
 8007020:	2306      	movs	r3, #6
 8007022:	2128      	movs	r1, #40	@ 0x28
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fc79 	bl	800691c <lis2duxs12_read_reg>
 800702a:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++) {
 8007030:	2300      	movs	r3, #0
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e08f      	b.n	8007156 <lis2duxs12_xl_data_get+0x146>
    data->raw[i] = (int16_t)buff[j+1U];
 8007036:	7fbb      	ldrb	r3, [r7, #30]
 8007038:	3301      	adds	r3, #1
 800703a:	3320      	adds	r3, #32
 800703c:	443b      	add	r3, r7
 800703e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8007042:	7ffb      	ldrb	r3, [r7, #31]
 8007044:	b211      	sxth	r1, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	3304      	adds	r3, #4
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	4413      	add	r3, r2
 800704e:	460a      	mov	r2, r1
 8007050:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8007052:	7ffb      	ldrb	r3, [r7, #31]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	4413      	add	r3, r2
 800705c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007060:	b29b      	uxth	r3, r3
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	b29b      	uxth	r3, r3
 8007066:	7fba      	ldrb	r2, [r7, #30]
 8007068:	3220      	adds	r2, #32
 800706a:	443a      	add	r2, r7
 800706c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8007070:	4413      	add	r3, r2
 8007072:	b29a      	uxth	r2, r3
 8007074:	7ffb      	ldrb	r3, [r7, #31]
 8007076:	b211      	sxth	r1, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	460a      	mov	r2, r1
 8007082:	809a      	strh	r2, [r3, #4]
    j+=2U;
 8007084:	7fbb      	ldrb	r3, [r7, #30]
 8007086:	3302      	adds	r3, #2
 8007088:	77bb      	strb	r3, [r7, #30]
    switch ( md->fs ) {
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d856      	bhi.n	8007140 <lis2duxs12_xl_data_get+0x130>
 8007092:	a201      	add	r2, pc, #4	@ (adr r2, 8007098 <lis2duxs12_xl_data_get+0x88>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070cf 	.word	0x080070cf
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	0800711b 	.word	0x0800711b
      case LIS2DUXS12_2g:
        data->mg[i] =lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 80070a8:	7ffb      	ldrb	r3, [r7, #31]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070b6:	7ffc      	ldrb	r4, [r7, #31]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fc5f 	bl	800697c <lis2duxs12_from_fs2g_to_mg>
 80070be:	eef0 7a40 	vmov.f32	s15, s0
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	00a3      	lsls	r3, r4, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	edc3 7a00 	vstr	s15, [r3]
        break;
 80070cc:	e040      	b.n	8007150 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] =lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 80070ce:	7ffb      	ldrb	r3, [r7, #31]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	4413      	add	r3, r2
 80070d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070dc:	7ffc      	ldrb	r4, [r7, #31]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fc64 	bl	80069ac <lis2duxs12_from_fs4g_to_mg>
 80070e4:	eef0 7a40 	vmov.f32	s15, s0
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	00a3      	lsls	r3, r4, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	edc3 7a00 	vstr	s15, [r3]
        break;
 80070f2:	e02d      	b.n	8007150 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] =lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 80070f4:	7ffb      	ldrb	r3, [r7, #31]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007102:	7ffc      	ldrb	r4, [r7, #31]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fc69 	bl	80069dc <lis2duxs12_from_fs8g_to_mg>
 800710a:	eef0 7a40 	vmov.f32	s15, s0
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	00a3      	lsls	r3, r4, #2
 8007112:	4413      	add	r3, r2
 8007114:	edc3 7a00 	vstr	s15, [r3]
        break;
 8007118:	e01a      	b.n	8007150 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] =lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 800711a:	7ffb      	ldrb	r3, [r7, #31]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	4413      	add	r3, r2
 8007124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007128:	7ffc      	ldrb	r4, [r7, #31]
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff fc6e 	bl	8006a0c <lis2duxs12_from_fs16g_to_mg>
 8007130:	eef0 7a40 	vmov.f32	s15, s0
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	00a3      	lsls	r3, r4, #2
 8007138:	4413      	add	r3, r2
 800713a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800713e:	e007      	b.n	8007150 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8007140:	7ffb      	ldrb	r3, [r7, #31]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
        break;
 800714e:	bf00      	nop
  for (i = 0U; i < 3U; i++) {
 8007150:	7ffb      	ldrb	r3, [r7, #31]
 8007152:	3301      	adds	r3, #1
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	7ffb      	ldrb	r3, [r7, #31]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f67f af6c 	bls.w	8007036 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 800715e:	69bb      	ldr	r3, [r7, #24]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3724      	adds	r7, #36	@ 0x24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}

08007168 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8007172:	f107 0208 	add.w	r2, r7, #8
 8007176:	2301      	movs	r3, #1
 8007178:	2133      	movs	r1, #51	@ 0x33
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fbce 	bl	800691c <lis2duxs12_read_reg>
 8007180:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d122      	bne.n	80071ce <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 0303 	and.w	r3, r3, #3
 8007190:	b2da      	uxtb	r2, r3
 8007192:	7a3b      	ldrb	r3, [r7, #8]
 8007194:	f362 0301 	bfi	r3, r2, #0, #2
 8007198:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	7a3b      	ldrb	r3, [r7, #8]
 80071a6:	f362 1386 	bfi	r3, r2, #6, #1
 80071aa:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	7a3b      	ldrb	r3, [r7, #8]
 80071b8:	f362 1345 	bfi	r3, r2, #5, #1
 80071bc:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80071be:	f107 0208 	add.w	r2, r7, #8
 80071c2:	2301      	movs	r3, #1
 80071c4:	2133      	movs	r1, #51	@ 0x33
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fbc0 	bl	800694c <lis2duxs12_write_reg>
 80071cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80071e2:	f107 0208 	add.w	r2, r7, #8
 80071e6:	2301      	movs	r3, #1
 80071e8:	2133      	movs	r1, #51	@ 0x33
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fb96 	bl	800691c <lis2duxs12_read_reg>
 80071f0:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 80071f2:	7a3b      	ldrb	r3, [r7, #8]
 80071f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80071f8:	b2d9      	uxtb	r1, r3
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	7853      	ldrb	r3, [r2, #1]
 80071fe:	f361 0341 	bfi	r3, r1, #1, #1
 8007202:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8007204:	7a3b      	ldrb	r3, [r7, #8]
 8007206:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800720a:	b2d9      	uxtb	r1, r3
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	7853      	ldrb	r3, [r2, #1]
 8007210:	f361 0300 	bfi	r3, r1, #0, #1
 8007214:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel) {
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d00e      	beq.n	800723c <lis2duxs12_i3c_configure_get+0x64>
 800721e:	2b02      	cmp	r3, #2
 8007220:	dc10      	bgt.n	8007244 <lis2duxs12_i3c_configure_get+0x6c>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <lis2duxs12_i3c_configure_get+0x54>
 8007226:	2b01      	cmp	r3, #1
 8007228:	d004      	beq.n	8007234 <lis2duxs12_i3c_configure_get+0x5c>
 800722a:	e00b      	b.n	8007244 <lis2duxs12_i3c_configure_get+0x6c>
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
     break;
 8007232:	e00b      	b.n	800724c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
     break;
 800723a:	e007      	b.n	800724c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2202      	movs	r2, #2
 8007240:	701a      	strb	r2, [r3, #0]
     break;
 8007242:	e003      	b.n	800724c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
     val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2203      	movs	r2, #3
 8007248:	701a      	strb	r2, [r3, #0]
     break;
 800724a:	bf00      	nop
  }

 return ret;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b08a      	sub	sp, #40	@ 0x28
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8007264:	f107 0220 	add.w	r2, r7, #32
 8007268:	2301      	movs	r3, #1
 800726a:	2113      	movs	r1, #19
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fb55 	bl	800691c <lis2duxs12_read_reg>
 8007272:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8007274:	f107 021c 	add.w	r2, r7, #28
 8007278:	2301      	movs	r3, #1
 800727a:	2115      	movs	r1, #21
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7ff fb4d 	bl	800691c <lis2duxs12_read_reg>
 8007282:	4602      	mov	r2, r0
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	4413      	add	r3, r2
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800728a:	f107 0214 	add.w	r2, r7, #20
 800728e:	2301      	movs	r3, #1
 8007290:	2147      	movs	r1, #71	@ 0x47
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff fb42 	bl	800691c <lis2duxs12_read_reg>
 8007298:	4602      	mov	r2, r0
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	4413      	add	r3, r2
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80072a0:	f107 0218 	add.w	r2, r7, #24
 80072a4:	2301      	movs	r3, #1
 80072a6:	2116      	movs	r1, #22
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fb37 	bl	800691c <lis2duxs12_read_reg>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	4413      	add	r3, r2
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 8081 	bne.w	80073c0 <lis2duxs12_fifo_mode_set+0x16a>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 80072be:	793b      	ldrb	r3, [r7, #4]
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d00e      	beq.n	80072e2 <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 80072c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072c8:	f043 0308 	orr.w	r3, r3, #8
 80072cc:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80072d0:	793b      	ldrb	r3, [r7, #4]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	7f3b      	ldrb	r3, [r7, #28]
 80072da:	f362 0302 	bfi	r3, r2, #0, #3
 80072de:	773b      	strb	r3, [r7, #28]
 80072e0:	e005      	b.n	80072ee <lis2duxs12_fifo_mode_set+0x98>
    }
    else {
      ctrl4.fifo_en = 0;
 80072e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072e6:	f36f 03c3 	bfc	r3, #3, #1
 80072ea:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 80072ee:	797b      	ldrb	r3, [r7, #5]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	7f3b      	ldrb	r3, [r7, #28]
 80072f8:	f362 1386 	bfi	r3, r2, #6, #1
 80072fc:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 80072fe:	79bb      	ldrb	r3, [r7, #6]
 8007300:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	7e3b      	ldrb	r3, [r7, #24]
 8007308:	f362 13c7 	bfi	r3, r2, #7, #1
 800730c:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 800730e:	7a3b      	ldrb	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 8007314:	7a3b      	ldrb	r3, [r7, #8]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	b2da      	uxtb	r2, r3
 800731c:	7d3b      	ldrb	r3, [r7, #20]
 800731e:	f362 03c4 	bfi	r3, r2, #3, #2
 8007322:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 8007324:	7a7b      	ldrb	r3, [r7, #9]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	b2da      	uxtb	r2, r3
 800732c:	7d3b      	ldrb	r3, [r7, #20]
 800732e:	f362 0302 	bfi	r3, r2, #0, #3
 8007332:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800733a:	b2da      	uxtb	r2, r3
 800733c:	7f3b      	ldrb	r3, [r7, #28]
 800733e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007342:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U) {
 8007344:	79bb      	ldrb	r3, [r7, #6]
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <lis2duxs12_fifo_mode_set+0x112>
      fifo_ctrl.stop_on_fth = 1;
 8007350:	7f3b      	ldrb	r3, [r7, #28]
 8007352:	f043 0308 	orr.w	r3, r3, #8
 8007356:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800735e:	b2da      	uxtb	r2, r3
 8007360:	7e3b      	ldrb	r3, [r7, #24]
 8007362:	f362 0306 	bfi	r3, r2, #0, #7
 8007366:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8007368:	f107 0214 	add.w	r2, r7, #20
 800736c:	2301      	movs	r3, #1
 800736e:	2147      	movs	r1, #71	@ 0x47
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff faeb 	bl	800694c <lis2duxs12_write_reg>
 8007376:	4602      	mov	r2, r0
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	4413      	add	r3, r2
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 800737e:	f107 0218 	add.w	r2, r7, #24
 8007382:	2301      	movs	r3, #1
 8007384:	2116      	movs	r1, #22
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fae0 	bl	800694c <lis2duxs12_write_reg>
 800738c:	4602      	mov	r2, r0
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	4413      	add	r3, r2
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8007394:	f107 021c 	add.w	r2, r7, #28
 8007398:	2301      	movs	r3, #1
 800739a:	2115      	movs	r1, #21
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fad5 	bl	800694c <lis2duxs12_write_reg>
 80073a2:	4602      	mov	r2, r0
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	4413      	add	r3, r2
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80073aa:	f107 0220 	add.w	r2, r7, #32
 80073ae:	2301      	movs	r3, #1
 80073b0:	2113      	movs	r1, #19
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff faca 	bl	800694c <lis2duxs12_write_reg>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	4413      	add	r3, r2
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3728      	adds	r7, #40	@ 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e067      	b.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	7b1a      	ldrb	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695a      	ldr	r2, [r3, #20]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a28      	ldr	r2, [pc, #160]	@ (80074c4 <LIS2MDL_RegisterBusIO+0xf8>)
 8007424:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a27      	ldr	r2, [pc, #156]	@ (80074c8 <LIS2MDL_RegisterBusIO+0xfc>)
 800742a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e036      	b.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4798      	blx	r3
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e02c      	b.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d028      	beq.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800746c:	2b00      	cmp	r3, #0
 800746e:	d123      	bne.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d10d      	bne.n	8007494 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8007478:	2334      	movs	r3, #52	@ 0x34
 800747a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	461a      	mov	r2, r3
 8007480:	2162      	movs	r1, #98	@ 0x62
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fb18 	bl	8007ab8 <LIS2MDL_Write_Reg>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d014      	beq.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007492:	e012      	b.n	80074ba <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b03      	cmp	r3, #3
 800749a:	d101      	bne.n	80074a0 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	e00c      	b.n	80074ba <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3320      	adds	r3, #32
 80074a4:	2101      	movs	r1, #1
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 ff69 	bl	800837e <lis2mdl_i2c_interface_set>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074b6:	e000      	b.n	80074ba <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80074b8:	68fb      	ldr	r3, [r7, #12]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	08007b0f 	.word	0x08007b0f
 80074c8:	08007b91 	.word	0x08007b91

080074cc <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d144      	bne.n	8007566 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80074dc:	f107 0208 	add.w	r2, r7, #8
 80074e0:	2301      	movs	r3, #1
 80074e2:	2162      	movs	r1, #98	@ 0x62
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fb94 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80074f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074f4:	e06c      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80074f6:	f107 020c 	add.w	r2, r7, #12
 80074fa:	2301      	movs	r3, #1
 80074fc:	2160      	movs	r1, #96	@ 0x60
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fb87 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800750a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800750e:	e05f      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8007510:	7a3b      	ldrb	r3, [r7, #8]
 8007512:	f043 0310 	orr.w	r3, r3, #16
 8007516:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8007518:	7a3b      	ldrb	r3, [r7, #8]
 800751a:	f36f 0341 	bfc	r3, #1, #1
 800751e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8007520:	7b3b      	ldrb	r3, [r7, #12]
 8007522:	2202      	movs	r2, #2
 8007524:	f362 0301 	bfi	r3, r2, #0, #2
 8007528:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800752a:	7b3b      	ldrb	r3, [r7, #12]
 800752c:	f043 030c 	orr.w	r3, r3, #12
 8007530:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8007532:	f107 0208 	add.w	r2, r7, #8
 8007536:	2301      	movs	r3, #1
 8007538:	2162      	movs	r1, #98	@ 0x62
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fca8 	bl	8007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800754a:	e041      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800754c:	f107 020c 	add.w	r2, r7, #12
 8007550:	2301      	movs	r3, #1
 8007552:	2160      	movs	r1, #96	@ 0x60
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc9b 	bl	8007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d032      	beq.n	80075c6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8007560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007564:	e034      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3320      	adds	r3, #32
 800756a:	2101      	movs	r1, #1
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fe61 	bl	8008234 <lis2mdl_block_data_update_set>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8007578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800757c:	e028      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3320      	adds	r3, #32
 8007582:	2102      	movs	r1, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fdd1 	bl	800812c <lis2mdl_operating_mode_set>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8007590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007594:	e01c      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3320      	adds	r3, #32
 800759a:	2103      	movs	r1, #3
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fdeb 	bl	8008178 <lis2mdl_data_rate_set>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80075a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ac:	e010      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3320      	adds	r3, #32
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 febc 	bl	8008332 <lis2mdl_self_test_set>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075c4:	e004      	b.n	80075d0 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8a5 	bl	8007730 <LIS2MDL_MAG_Disable>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075f0:	e004      	b.n	80075fc <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d10b      	bne.n	800762e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8007616:	2301      	movs	r3, #1
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	214f      	movs	r1, #79	@ 0x4f
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 faf8 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8007628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800762c:	e00c      	b.n	8007648 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3320      	adds	r3, #32
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fe6b 	bl	8008310 <lis2mdl_device_id_get>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007644:	e000      	b.n	8007648 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2200      	movs	r2, #0
 8007664:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2200      	movs	r2, #0
 8007670:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2232      	movs	r2, #50	@ 0x32
 8007682:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	4a04      	ldr	r2, [pc, #16]	@ (80076a8 <LIS2MDL_GetCapabilities+0x58>)
 8007698:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	42c80000 	.word	0x42c80000

080076ac <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	e032      	b.n	8007728 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d11d      	bne.n	8007706 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80076ca:	f107 020c 	add.w	r2, r7, #12
 80076ce:	2301      	movs	r3, #1
 80076d0:	2160      	movs	r1, #96	@ 0x60
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa9d 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80076de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076e2:	e021      	b.n	8007728 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80076e4:	7b3b      	ldrb	r3, [r7, #12]
 80076e6:	f36f 0301 	bfc	r3, #0, #2
 80076ea:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80076ec:	f107 020c 	add.w	r2, r7, #12
 80076f0:	2301      	movs	r3, #1
 80076f2:	2160      	movs	r1, #96	@ 0x60
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fbcb 	bl	8007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8007700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007704:	e010      	b.n	8007728 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3320      	adds	r3, #32
 800770a:	2100      	movs	r1, #0
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fd0d 	bl	800812c <lis2mdl_operating_mode_set>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8007718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800771c:	e004      	b.n	8007728 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e033      	b.n	80077ae <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d11e      	bne.n	800778c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800774e:	f107 020c 	add.w	r2, r7, #12
 8007752:	2301      	movs	r3, #1
 8007754:	2160      	movs	r1, #96	@ 0x60
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa5b 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8007762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007766:	e022      	b.n	80077ae <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8007768:	7b3b      	ldrb	r3, [r7, #12]
 800776a:	2202      	movs	r2, #2
 800776c:	f362 0301 	bfi	r3, r2, #0, #2
 8007770:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8007772:	f107 020c 	add.w	r2, r7, #12
 8007776:	2301      	movs	r3, #1
 8007778:	2160      	movs	r1, #96	@ 0x60
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fb88 	bl	8007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00e      	beq.n	80077a4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8007786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800778a:	e010      	b.n	80077ae <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3320      	adds	r3, #32
 8007790:	2102      	movs	r1, #2
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fcca 	bl	800812c <lis2mdl_operating_mode_set>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800779e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077a2:	e004      	b.n	80077ae <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80077c6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3320      	adds	r3, #32
 80077ea:	f107 020b 	add.w	r2, r7, #11
 80077ee:	4611      	mov	r1, r2
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fce7 	bl	80081c4 <lis2mdl_data_rate_get>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80077fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007800:	e023      	b.n	800784a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	2b03      	cmp	r3, #3
 8007806:	d81b      	bhi.n	8007840 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8007808:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007821 	.word	0x08007821
 8007814:	08007829 	.word	0x08007829
 8007818:	08007831 	.word	0x08007831
 800781c:	08007839 	.word	0x08007839
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	4a0c      	ldr	r2, [pc, #48]	@ (8007854 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8007824:	601a      	str	r2, [r3, #0]
      break;
 8007826:	e00f      	b.n	8007848 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	4a0b      	ldr	r2, [pc, #44]	@ (8007858 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800782c:	601a      	str	r2, [r3, #0]
      break;
 800782e:	e00b      	b.n	8007848 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	4a0a      	ldr	r2, [pc, #40]	@ (800785c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8007834:	601a      	str	r2, [r3, #0]
      break;
 8007836:	e007      	b.n	8007848 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	4a09      	ldr	r2, [pc, #36]	@ (8007860 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800783c:	601a      	str	r2, [r3, #0]
      break;
 800783e:	e003      	b.n	8007848 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8007840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007844:	60fb      	str	r3, [r7, #12]
      break;
 8007846:	bf00      	nop
  }

  return ret;
 8007848:	68fb      	ldr	r3, [r7, #12]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	41200000 	.word	0x41200000
 8007858:	41a00000 	.word	0x41a00000
 800785c:	42480000 	.word	0x42480000
 8007860:	42c80000 	.word	0x42c80000

08007864 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8007870:	edd7 7a00 	vldr	s15, [r7]
 8007874:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800787c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007880:	d801      	bhi.n	8007886 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8007882:	2300      	movs	r3, #0
 8007884:	e016      	b.n	80078b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8007886:	edd7 7a00 	vldr	s15, [r7]
 800788a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800788e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007896:	d801      	bhi.n	800789c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8007898:	2301      	movs	r3, #1
 800789a:	e00b      	b.n	80078b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800789c:	edd7 7a00 	vldr	s15, [r7]
 80078a0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007928 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80078a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ac:	d801      	bhi.n	80078b2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e000      	b.n	80078b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80078b2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80078b4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d121      	bne.n	8007902 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80078be:	f107 020c 	add.w	r2, r7, #12
 80078c2:	2301      	movs	r3, #1
 80078c4:	2160      	movs	r1, #96	@ 0x60
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9a3 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80078d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078d6:	e022      	b.n	800791e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	7b3b      	ldrb	r3, [r7, #12]
 80078e2:	f362 0383 	bfi	r3, r2, #2, #2
 80078e6:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80078e8:	f107 020c 	add.w	r2, r7, #12
 80078ec:	2301      	movs	r3, #1
 80078ee:	2160      	movs	r1, #96	@ 0x60
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 facd 	bl	8007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00f      	beq.n	800791c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007900:	e00d      	b.n	800791e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3320      	adds	r3, #32
 8007906:	7bfa      	ldrb	r2, [r7, #15]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fc34 	bl	8008178 <lis2mdl_data_rate_set>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8007916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800791a:	e000      	b.n	800791e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	42480000 	.word	0x42480000

0800792c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2232      	movs	r2, #50	@ 0x32
 800793a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3320      	adds	r3, #32
 8007970:	f107 0208 	add.w	r2, r7, #8
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fc82 	bl	8008280 <lis2mdl_magnetic_raw_get>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8007982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007986:	e00c      	b.n	80079a2 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007988:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007990:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b088      	sub	sp, #32
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d134      	bne.n	8007a26 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80079bc:	f107 0218 	add.w	r2, r7, #24
 80079c0:	2306      	movs	r3, #6
 80079c2:	2168      	movs	r1, #104	@ 0x68
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f924 	bl	8007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079d4:	e06c      	b.n	8007ab0 <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80079d6:	7e7b      	ldrb	r3, [r7, #25]
 80079d8:	b21b      	sxth	r3, r3
 80079da:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80079dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	7e3a      	ldrb	r2, [r7, #24]
 80079e8:	4413      	add	r3, r2
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	b21b      	sxth	r3, r3
 80079ee:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80079f0:	7efb      	ldrb	r3, [r7, #27]
 80079f2:	b21b      	sxth	r3, r3
 80079f4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80079f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	7eba      	ldrb	r2, [r7, #26]
 8007a02:	4413      	add	r3, r2
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b21b      	sxth	r3, r3
 8007a08:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8007a0a:	7f7b      	ldrb	r3, [r7, #29]
 8007a0c:	b21b      	sxth	r3, r3
 8007a0e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8007a10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	7f3a      	ldrb	r2, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	b21b      	sxth	r3, r3
 8007a22:	82bb      	strh	r3, [r7, #20]
 8007a24:	e00d      	b.n	8007a42 <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3320      	adds	r3, #32
 8007a2a:	f107 0210 	add.w	r2, r7, #16
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fc25 	bl	8008280 <lis2mdl_magnetic_raw_get>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 8007a3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a40:	e036      	b.n	8007ab0 <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8007a42:	f107 030c 	add.w	r3, r7, #12
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff feb4 	bl	80077b6 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007a4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a66:	ee17 2a90 	vmov	r2, s15
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007a6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a86:	ee17 2a90 	vmov	r2, s15
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007a8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aa6:	ee17 2a90 	vmov	r2, s15
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d10b      	bne.n	8007ae8 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8007ad0:	1cba      	adds	r2, r7, #2
 8007ad2:	78f9      	ldrb	r1, [r7, #3]
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9da 	bl	8007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d010      	beq.n	8007b04 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ae6:	e00e      	b.n	8007b06 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f103 0020 	add.w	r0, r3, #32
 8007aee:	1cba      	adds	r2, r7, #2
 8007af0:	78f9      	ldrb	r1, [r7, #3]
 8007af2:	2301      	movs	r3, #1
 8007af4:	f000 fb02 	bl	80080fc <lis2mdl_write_reg>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b02:	e000      	b.n	8007b06 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007b0e:	b590      	push	{r4, r7, lr}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	72fb      	strb	r3, [r7, #11]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10e      	bne.n	8007b4c <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	695c      	ldr	r4, [r3, #20]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	7b1b      	ldrb	r3, [r3, #12]
 8007b36:	4618      	mov	r0, r3
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	893b      	ldrh	r3, [r7, #8]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	47a0      	blx	r4
 8007b48:	4603      	mov	r3, r0
 8007b4a:	e01d      	b.n	8007b88 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d10b      	bne.n	8007b6c <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	695c      	ldr	r4, [r3, #20]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	7b1b      	ldrb	r3, [r3, #12]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	b299      	uxth	r1, r3
 8007b62:	893b      	ldrh	r3, [r7, #8]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	47a0      	blx	r4
 8007b68:	4603      	mov	r3, r0
 8007b6a:	e00d      	b.n	8007b88 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	695c      	ldr	r4, [r3, #20]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	7b1b      	ldrb	r3, [r3, #12]
 8007b74:	4618      	mov	r0, r3
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	4619      	mov	r1, r3
 8007b80:	893b      	ldrh	r3, [r7, #8]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	47a0      	blx	r4
 8007b86:	4603      	mov	r3, r0
  }
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}

08007b90 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007b90:	b590      	push	{r4, r7, lr}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	72fb      	strb	r3, [r7, #11]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10e      	bne.n	8007bce <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	691c      	ldr	r4, [r3, #16]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	7b1b      	ldrb	r3, [r3, #12]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	893b      	ldrh	r3, [r7, #8]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	47a0      	blx	r4
 8007bca:	4603      	mov	r3, r0
 8007bcc:	e01d      	b.n	8007c0a <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d10b      	bne.n	8007bee <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	691c      	ldr	r4, [r3, #16]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	7b1b      	ldrb	r3, [r3, #12]
 8007bde:	4618      	mov	r0, r3
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	b299      	uxth	r1, r3
 8007be4:	893b      	ldrh	r3, [r7, #8]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	47a0      	blx	r4
 8007bea:	4603      	mov	r3, r0
 8007bec:	e00d      	b.n	8007c0a <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	691c      	ldr	r4, [r3, #16]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	7b1b      	ldrb	r3, [r3, #12]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	4619      	mov	r1, r3
 8007c02:	893b      	ldrh	r3, [r7, #8]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	47a0      	blx	r4
 8007c08:	4603      	mov	r3, r0
  }
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd90      	pop	{r4, r7, pc}

08007c12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b08c      	sub	sp, #48	@ 0x30
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	460b      	mov	r3, r1
 8007c20:	72fb      	strb	r3, [r7, #11]
 8007c22:	4613      	mov	r3, r2
 8007c24:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8007c2c:	2340      	movs	r3, #64	@ 0x40
 8007c2e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8007c38:	233d      	movs	r3, #61	@ 0x3d
 8007c3a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8007c3c:	2315      	movs	r3, #21
 8007c3e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8007c42:	2316      	movs	r3, #22
 8007c44:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8007c48:	2317      	movs	r3, #23
 8007c4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8007c4e:	2314      	movs	r3, #20
 8007c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8007c54:	2344      	movs	r3, #68	@ 0x44
 8007c56:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8007c5e:	2339      	movs	r3, #57	@ 0x39
 8007c60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8007c6a:	2329      	movs	r3, #41	@ 0x29
 8007c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8007c70:	231e      	movs	r3, #30
 8007c72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8007c7c:	893b      	ldrh	r3, [r7, #8]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8007c82:	2310      	movs	r3, #16
 8007c84:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8007c8e:	2340      	movs	r3, #64	@ 0x40
 8007c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f103 0020 	add.w	r0, r3, #32
 8007c9a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8007c9e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f000 fa2a 	bl	80080fc <lis2mdl_write_reg>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cb2:	e0e9      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f103 0020 	add.w	r0, r3, #32
 8007cba:	f107 021f 	add.w	r2, r7, #31
 8007cbe:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f000 fa1a 	bl	80080fc <lis2mdl_write_reg>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8007cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cd2:	e0d9      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f103 0020 	add.w	r0, r3, #32
 8007cda:	f107 020b 	add.w	r2, r7, #11
 8007cde:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f000 fa0a 	bl	80080fc <lis2mdl_write_reg>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cf2:	e0c9      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f103 0020 	add.w	r0, r3, #32
 8007cfa:	f107 021d 	add.w	r2, r7, #29
 8007cfe:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8007d02:	2301      	movs	r3, #1
 8007d04:	f000 f9fa 	bl	80080fc <lis2mdl_write_reg>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8007d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d12:	e0b9      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f103 0020 	add.w	r0, r3, #32
 8007d1a:	f107 021e 	add.w	r2, r7, #30
 8007d1e:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8007d22:	2301      	movs	r3, #1
 8007d24:	f000 f9ea 	bl	80080fc <lis2mdl_write_reg>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d32:	e0a9      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f103 0020 	add.w	r0, r3, #32
 8007d3a:	f107 0220 	add.w	r2, r7, #32
 8007d3e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007d42:	2301      	movs	r3, #1
 8007d44:	f000 f9da 	bl	80080fc <lis2mdl_write_reg>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8007d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d52:	e099      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f103 0020 	add.w	r0, r3, #32
 8007d5a:	f107 021c 	add.w	r2, r7, #28
 8007d5e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8007d62:	2301      	movs	r3, #1
 8007d64:	f000 f9b2 	bl	80080cc <lis2mdl_read_reg>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d72:	e089      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8007d74:	7f3b      	ldrb	r3, [r7, #28]
 8007d76:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d102      	bne.n	8007d84 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8007d7e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007d82:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f103 0020 	add.w	r0, r3, #32
 8007d8a:	f107 021c 	add.w	r2, r7, #28
 8007d8e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8007d92:	2301      	movs	r3, #1
 8007d94:	f000 f9b2 	bl	80080fc <lis2mdl_write_reg>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8007d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007da2:	e071      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f103 0020 	add.w	r0, r3, #32
 8007daa:	f107 0214 	add.w	r2, r7, #20
 8007dae:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8007db2:	2306      	movs	r3, #6
 8007db4:	f000 f98a 	bl	80080cc <lis2mdl_read_reg>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dc2:	e061      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f103 0020 	add.w	r0, r3, #32
 8007dca:	f107 021b 	add.w	r2, r7, #27
 8007dce:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f000 f97a 	bl	80080cc <lis2mdl_read_reg>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007de2:	e051      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8007de4:	7efa      	ldrb	r2, [r7, #27]
 8007de6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dea:	4013      	ands	r3, r2
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d1e6      	bne.n	8007dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f103 0020 	add.w	r0, r3, #32
 8007dfc:	f107 021b 	add.w	r2, r7, #27
 8007e00:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8007e04:	2301      	movs	r3, #1
 8007e06:	f000 f961 	bl	80080cc <lis2mdl_read_reg>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e14:	e038      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8007e16:	7efa      	ldrb	r2, [r7, #27]
 8007e18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d1e6      	bne.n	8007df6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f103 0020 	add.w	r0, r3, #32
 8007e2e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8007e32:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007e36:	2301      	movs	r3, #1
 8007e38:	f000 f960 	bl	80080fc <lis2mdl_write_reg>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e46:	e01f      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f103 0020 	add.w	r0, r3, #32
 8007e4e:	893b      	ldrh	r3, [r7, #8]
 8007e50:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	f000 f939 	bl	80080cc <lis2mdl_read_reg>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8007e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e64:	e010      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f103 0020 	add.w	r0, r3, #32
 8007e6c:	f107 0220 	add.w	r2, r7, #32
 8007e70:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007e74:	2301      	movs	r3, #1
 8007e76:	f000 f941 	bl	80080fc <lis2mdl_write_reg>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e84:	e000      	b.n	8007e88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3730      	adds	r7, #48	@ 0x30
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	@ 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	607a      	str	r2, [r7, #4]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	72fb      	strb	r3, [r7, #11]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8007eaa:	2340      	movs	r3, #64	@ 0x40
 8007eac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8007eb6:	233c      	movs	r3, #60	@ 0x3c
 8007eb8:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8007eba:	2315      	movs	r3, #21
 8007ebc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8007ec0:	2316      	movs	r3, #22
 8007ec2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8007ec6:	2317      	movs	r3, #23
 8007ec8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8007ed0:	2314      	movs	r3, #20
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8007ed6:	2344      	movs	r3, #68	@ 0x44
 8007ed8:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8007eda:	2339      	movs	r3, #57	@ 0x39
 8007edc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8007ee0:	2380      	movs	r3, #128	@ 0x80
 8007ee2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8007ee6:	2329      	movs	r3, #41	@ 0x29
 8007ee8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8007eec:	231e      	movs	r3, #30
 8007eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8007ef8:	2310      	movs	r3, #16
 8007efa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8007f04:	2340      	movs	r3, #64	@ 0x40
 8007f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8007f0a:	230e      	movs	r3, #14
 8007f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f103 0020 	add.w	r0, r3, #32
 8007f16:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8007f1a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f000 f8ec 	bl	80080fc <lis2mdl_write_reg>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f2e:	e0c9      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f103 0020 	add.w	r0, r3, #32
 8007f36:	f107 021f 	add.w	r2, r7, #31
 8007f3a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f000 f8dc 	bl	80080fc <lis2mdl_write_reg>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f4e:	e0b9      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f103 0020 	add.w	r0, r3, #32
 8007f56:	f107 020b 	add.w	r2, r7, #11
 8007f5a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f000 f8cc 	bl	80080fc <lis2mdl_write_reg>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f6e:	e0a9      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f103 0020 	add.w	r0, r3, #32
 8007f76:	f107 021e 	add.w	r2, r7, #30
 8007f7a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f000 f8bc 	bl	80080fc <lis2mdl_write_reg>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8007f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f8e:	e099      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f103 0020 	add.w	r0, r3, #32
 8007f96:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	f000 f8ad 	bl	80080fc <lis2mdl_write_reg>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fac:	e08a      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f103 0020 	add.w	r0, r3, #32
 8007fb4:	f107 021d 	add.w	r2, r7, #29
 8007fb8:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f000 f89d 	bl	80080fc <lis2mdl_write_reg>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fcc:	e07a      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f103 0020 	add.w	r0, r3, #32
 8007fd4:	f107 0220 	add.w	r2, r7, #32
 8007fd8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f000 f88d 	bl	80080fc <lis2mdl_write_reg>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8007fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fec:	e06a      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f103 0020 	add.w	r0, r3, #32
 8007ff4:	f107 021c 	add.w	r2, r7, #28
 8007ff8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f000 f865 	bl	80080cc <lis2mdl_read_reg>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8008008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800800c:	e05a      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800800e:	7f3b      	ldrb	r3, [r7, #28]
 8008010:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008014:	429a      	cmp	r2, r3
 8008016:	d102      	bne.n	800801e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8008018:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800801c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f103 0020 	add.w	r0, r3, #32
 8008024:	f107 021c 	add.w	r2, r7, #28
 8008028:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800802c:	2301      	movs	r3, #1
 800802e:	f000 f865 	bl	80080fc <lis2mdl_write_reg>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8008038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800803c:	e042      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f103 0020 	add.w	r0, r3, #32
 8008044:	f107 0214 	add.w	r2, r7, #20
 8008048:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800804c:	2306      	movs	r3, #6
 800804e:	f000 f83d 	bl	80080cc <lis2mdl_read_reg>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8008058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800805c:	e032      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f103 0020 	add.w	r0, r3, #32
 8008064:	f107 021b 	add.w	r2, r7, #27
 8008068:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800806c:	2301      	movs	r3, #1
 800806e:	f000 f82d 	bl	80080cc <lis2mdl_read_reg>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8008078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800807c:	e022      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800807e:	7efa      	ldrb	r2, [r7, #27]
 8008080:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008084:	4013      	ands	r3, r2
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800808c:	429a      	cmp	r2, r3
 800808e:	d1e6      	bne.n	800805e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f103 0020 	add.w	r0, r3, #32
 8008096:	f107 021b 	add.w	r2, r7, #27
 800809a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800809e:	2301      	movs	r3, #1
 80080a0:	f000 f814 	bl	80080cc <lis2mdl_read_reg>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080ae:	e009      	b.n	80080c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80080b0:	7efa      	ldrb	r2, [r7, #27]
 80080b2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80080b6:	4013      	ands	r3, r2
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80080be:	429a      	cmp	r2, r3
 80080c0:	d1e6      	bne.n	8008090 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3730      	adds	r7, #48	@ 0x30
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	461a      	mov	r2, r3
 80080d8:	460b      	mov	r3, r1
 80080da:	72fb      	strb	r3, [r7, #11]
 80080dc:	4613      	mov	r3, r2
 80080de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685c      	ldr	r4, [r3, #4]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68d8      	ldr	r0, [r3, #12]
 80080e8:	893b      	ldrh	r3, [r7, #8]
 80080ea:	7af9      	ldrb	r1, [r7, #11]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	47a0      	blx	r4
 80080f0:	6178      	str	r0, [r7, #20]

  return ret;
 80080f2:	697b      	ldr	r3, [r7, #20]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}

080080fc <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	461a      	mov	r2, r3
 8008108:	460b      	mov	r3, r1
 800810a:	72fb      	strb	r3, [r7, #11]
 800810c:	4613      	mov	r3, r2
 800810e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681c      	ldr	r4, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68d8      	ldr	r0, [r3, #12]
 8008118:	893b      	ldrh	r3, [r7, #8]
 800811a:	7af9      	ldrb	r1, [r7, #11]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	47a0      	blx	r4
 8008120:	6178      	str	r0, [r7, #20]

  return ret;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	bd90      	pop	{r4, r7, pc}

0800812c <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8008138:	f107 0208 	add.w	r2, r7, #8
 800813c:	2301      	movs	r3, #1
 800813e:	2160      	movs	r1, #96	@ 0x60
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff ffc3 	bl	80080cc <lis2mdl_read_reg>
 8008146:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10f      	bne.n	800816e <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	b2da      	uxtb	r2, r3
 8008156:	7a3b      	ldrb	r3, [r7, #8]
 8008158:	f362 0301 	bfi	r3, r2, #0, #2
 800815c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800815e:	f107 0208 	add.w	r2, r7, #8
 8008162:	2301      	movs	r3, #1
 8008164:	2160      	movs	r1, #96	@ 0x60
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff ffc8 	bl	80080fc <lis2mdl_write_reg>
 800816c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800816e:	68fb      	ldr	r3, [r7, #12]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8008184:	f107 0208 	add.w	r2, r7, #8
 8008188:	2301      	movs	r3, #1
 800818a:	2160      	movs	r1, #96	@ 0x60
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ff9d 	bl	80080cc <lis2mdl_read_reg>
 8008192:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10f      	bne.n	80081ba <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	7a3b      	ldrb	r3, [r7, #8]
 80081a4:	f362 0383 	bfi	r3, r2, #2, #2
 80081a8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80081aa:	f107 0208 	add.w	r2, r7, #8
 80081ae:	2301      	movs	r3, #1
 80081b0:	2160      	movs	r1, #96	@ 0x60
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff ffa2 	bl	80080fc <lis2mdl_write_reg>
 80081b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80081ba:	68fb      	ldr	r3, [r7, #12]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80081ce:	f107 0208 	add.w	r2, r7, #8
 80081d2:	2301      	movs	r3, #1
 80081d4:	2160      	movs	r1, #96	@ 0x60
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff ff78 	bl	80080cc <lis2mdl_read_reg>
 80081dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80081de:	7a3b      	ldrb	r3, [r7, #8]
 80081e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d81a      	bhi.n	8008220 <lis2mdl_data_rate_get+0x5c>
 80081ea:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <lis2mdl_data_rate_get+0x2c>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008209 	.word	0x08008209
 80081f8:	08008211 	.word	0x08008211
 80081fc:	08008219 	.word	0x08008219
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
      break;
 8008206:	e00f      	b.n	8008228 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2201      	movs	r2, #1
 800820c:	701a      	strb	r2, [r3, #0]
      break;
 800820e:	e00b      	b.n	8008228 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2202      	movs	r2, #2
 8008214:	701a      	strb	r2, [r3, #0]
      break;
 8008216:	e007      	b.n	8008228 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2203      	movs	r2, #3
 800821c:	701a      	strb	r2, [r3, #0]
      break;
 800821e:	e003      	b.n	8008228 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
      break;
 8008226:	bf00      	nop
  }

  return ret;
 8008228:	68fb      	ldr	r3, [r7, #12]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop

08008234 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008240:	f107 0208 	add.w	r2, r7, #8
 8008244:	2301      	movs	r3, #1
 8008246:	2162      	movs	r1, #98	@ 0x62
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ff3f 	bl	80080cc <lis2mdl_read_reg>
 800824e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10f      	bne.n	8008276 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	b2da      	uxtb	r2, r3
 800825e:	7a3b      	ldrb	r3, [r7, #8]
 8008260:	f362 1304 	bfi	r3, r2, #4, #1
 8008264:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008266:	f107 0208 	add.w	r2, r7, #8
 800826a:	2301      	movs	r3, #1
 800826c:	2162      	movs	r1, #98	@ 0x62
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff ff44 	bl	80080fc <lis2mdl_write_reg>
 8008274:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008276:	68fb      	ldr	r3, [r7, #12]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800828a:	f107 020c 	add.w	r2, r7, #12
 800828e:	2306      	movs	r3, #6
 8008290:	2168      	movs	r1, #104	@ 0x68
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff ff1a 	bl	80080cc <lis2mdl_read_reg>
 8008298:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800829a:	7b7b      	ldrb	r3, [r7, #13]
 800829c:	b21a      	sxth	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	7b3a      	ldrb	r2, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	b21a      	sxth	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	3302      	adds	r3, #2
 80082c0:	b212      	sxth	r2, r2
 80082c2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	3302      	adds	r3, #2
 80082c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	7bba      	ldrb	r2, [r7, #14]
 80082d4:	4413      	add	r3, r2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	3302      	adds	r3, #2
 80082dc:	b212      	sxth	r2, r2
 80082de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80082e0:	7c7a      	ldrb	r2, [r7, #17]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	3304      	adds	r3, #4
 80082e6:	b212      	sxth	r2, r2
 80082e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	3304      	adds	r3, #4
 80082ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	7c3a      	ldrb	r2, [r7, #16]
 80082fa:	4413      	add	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3304      	adds	r3, #4
 8008302:	b212      	sxth	r2, r2
 8008304:	801a      	strh	r2, [r3, #0]

  return ret;
 8008306:	697b      	ldr	r3, [r7, #20]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800831a:	2301      	movs	r3, #1
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	214f      	movs	r1, #79	@ 0x4f
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fed3 	bl	80080cc <lis2mdl_read_reg>
 8008326:	60f8      	str	r0, [r7, #12]

  return ret;
 8008328:	68fb      	ldr	r3, [r7, #12]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	2301      	movs	r3, #1
 8008344:	2162      	movs	r1, #98	@ 0x62
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fec0 	bl	80080cc <lis2mdl_read_reg>
 800834c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10f      	bne.n	8008374 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	7a3b      	ldrb	r3, [r7, #8]
 800835e:	f362 0341 	bfi	r3, r2, #1, #1
 8008362:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008364:	f107 0208 	add.w	r2, r7, #8
 8008368:	2301      	movs	r3, #1
 800836a:	2162      	movs	r1, #98	@ 0x62
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff fec5 	bl	80080fc <lis2mdl_write_reg>
 8008372:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008374:	68fb      	ldr	r3, [r7, #12]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800838a:	f107 0208 	add.w	r2, r7, #8
 800838e:	2301      	movs	r3, #1
 8008390:	2162      	movs	r1, #98	@ 0x62
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fe9a 	bl	80080cc <lis2mdl_read_reg>
 8008398:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10f      	bne.n	80083c0 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	7a3b      	ldrb	r3, [r7, #8]
 80083aa:	f362 1345 	bfi	r3, r2, #5, #1
 80083ae:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80083b0:	f107 0208 	add.w	r2, r7, #8
 80083b4:	2301      	movs	r3, #1
 80083b6:	2162      	movs	r1, #98	@ 0x62
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fe9f 	bl	80080fc <lis2mdl_write_reg>
 80083be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d103      	bne.n	80083e8 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e051      	b.n	800848c <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	7b1a      	ldrb	r2, [r3, #12]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	695a      	ldr	r2, [r3, #20]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	699a      	ldr	r2, [r3, #24]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1d      	ldr	r2, [pc, #116]	@ (8008498 <LPS22DF_RegisterBusIO+0xcc>)
 8008424:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1c      	ldr	r2, [pc, #112]	@ (800849c <LPS22DF_RegisterBusIO+0xd0>)
 800842a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d103      	bne.n	800844a <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 8008442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e020      	b.n	800848c <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4798      	blx	r3
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 8008456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	e016      	b.n	800848c <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b02      	cmp	r3, #2
 8008464:	d112      	bne.n	800848c <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10d      	bne.n	800848c <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8008470:	2320      	movs	r3, #32
 8008472:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	461a      	mov	r2, r3
 8008478:	210e      	movs	r1, #14
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f9e6 	bl	800884c <LPS22DF_Write_Reg>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8008486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800848a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	08008bf1 	.word	0x08008bf1
 800849c:	08008c27 	.word	0x08008c27

080084a0 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d108      	bne.n	80084c4 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fb40 	bl	8008b38 <LPS22DF_Initialize>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 80084be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084c2:	e004      	b.n	80084ce <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d111      	bne.n	800850c <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f882 	bl	80085f2 <LPS22DF_PRESS_Disable>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 80084f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084f8:	e00d      	b.n	8008516 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f921 	bl	8008742 <LPS22DF_TEMP_Disable>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 8008506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800850a:	e004      	b.n	8008516 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3320      	adds	r3, #32
 800852c:	f107 020c 	add.w	r2, r7, #12
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fc0a 	bl	8008d4c <lps22df_id_get>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 800853e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008542:	e003      	b.n	800854c <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 8008544:	7b3a      	ldrb	r2, [r7, #12]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2201      	movs	r2, #1
 8008568:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2201      	movs	r2, #1
 800856e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2200      	movs	r2, #0
 800857a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	f04f 0200 	mov.w	r2, #0
 8008582:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	4a08      	ldr	r2, [pc, #32]	@ (80085a8 <LPS22DF_GetCapabilities+0x54>)
 8008588:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	4a06      	ldr	r2, [pc, #24]	@ (80085a8 <LPS22DF_GetCapabilities+0x54>)
 800858e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	f04f 0200 	mov.w	r2, #0
 8008596:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	43480000 	.word	0x43480000

080085ac <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e013      	b.n	80085ea <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f103 0220 	add.w	r2, r3, #32
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3333      	adds	r3, #51	@ 0x33
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f000 fcac 	bl	8008f2c <lps22df_mode_set>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085de:	e004      	b.n	80085ea <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e030      	b.n	800866a <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d126      	bne.n	8008660 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3320      	adds	r3, #32
 8008616:	f107 020c 	add.w	r2, r7, #12
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fce3 	bl	8008fe8 <lps22df_mode_get>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8008628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800862c:	e01d      	b.n	800866a <LPS22DF_PRESS_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3333      	adds	r3, #51	@ 0x33
 8008632:	461a      	mov	r2, r3
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	8819      	ldrh	r1, [r3, #0]
 800863a:	789b      	ldrb	r3, [r3, #2]
 800863c:	8011      	strh	r1, [r2, #0]
 800863e:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8008640:	2300      	movs	r3, #0
 8008642:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3320      	adds	r3, #32
 8008648:	f107 020c 	add.w	r2, r7, #12
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fc6c 	bl	8008f2c <lps22df_mode_set>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 800865a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800865e:	e004      	b.n	800866a <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f900 	bl	8008884 <LPS22DF_GetOutputDataRate>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d106      	bne.n	80086b2 <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80086a4:	ed97 0a00 	vldr	s0, [r7]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f955 	bl	8008958 <LPS22DF_SetOutputDataRate_When_Enabled>
 80086ae:	4603      	mov	r3, r0
 80086b0:	e005      	b.n	80086be <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80086b2:	ed97 0a00 	vldr	s0, [r7]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f9da 	bl	8008a70 <LPS22DF_SetOutputDataRate_When_Disabled>
 80086bc:	4603      	mov	r3, r0
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float *Value)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3320      	adds	r3, #32
 80086d4:	f107 0208 	add.w	r2, r7, #8
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fd50 	bl	8009180 <lps22df_data_get>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086ea:	e003      	b.n	80086f4 <LPS22DF_PRESS_GetPressure+0x2e>
  }

  *Value = data.pressure.hpa;
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e013      	b.n	800873a <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f103 0220 	add.w	r2, r3, #32
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3333      	adds	r3, #51	@ 0x33
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f000 fc04 	bl	8008f2c <lps22df_mode_set>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 800872a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800872e:	e004      	b.n	800873a <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e030      	b.n	80087ba <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800875e:	2b00      	cmp	r3, #0
 8008760:	d126      	bne.n	80087b0 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3320      	adds	r3, #32
 8008766:	f107 020c 	add.w	r2, r7, #12
 800876a:	4611      	mov	r1, r2
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fc3b 	bl	8008fe8 <lps22df_mode_get>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8008778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800877c:	e01d      	b.n	80087ba <LPS22DF_TEMP_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3333      	adds	r3, #51	@ 0x33
 8008782:	461a      	mov	r2, r3
 8008784:	f107 030c 	add.w	r3, r7, #12
 8008788:	8819      	ldrh	r1, [r3, #0]
 800878a:	789b      	ldrb	r3, [r3, #2]
 800878c:	8011      	strh	r1, [r2, #0]
 800878e:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8008790:	2300      	movs	r3, #0
 8008792:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3320      	adds	r3, #32
 8008798:	f107 020c 	add.w	r2, r7, #12
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fbc4 	bl	8008f2c <lps22df_mode_set>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087ae:	e004      	b.n	80087ba <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f858 	bl	8008884 <LPS22DF_GetOutputDataRate>
 80087d4:	4603      	mov	r3, r0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d106      	bne.n	8008802 <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80087f4:	ed97 0a00 	vldr	s0, [r7]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8ad 	bl	8008958 <LPS22DF_SetOutputDataRate_When_Enabled>
 80087fe:	4603      	mov	r3, r0
 8008800:	e005      	b.n	800880e <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008802:	ed97 0a00 	vldr	s0, [r7]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f932 	bl	8008a70 <LPS22DF_SetOutputDataRate_When_Disabled>
 800880c:	4603      	mov	r3, r0
  }
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float *Value)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3320      	adds	r3, #32
 8008824:	f107 0208 	add.w	r2, r7, #8
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fca8 	bl	8009180 <lps22df_data_get>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8008836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800883a:	e003      	b.n	8008844 <LPS22DF_TEMP_GetTemperature+0x2e>
  }

  *Value = data.heat.deg_c;
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
 8008858:	4613      	mov	r3, r2
 800885a:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f103 0020 	add.w	r0, r3, #32
 8008862:	1cba      	adds	r2, r7, #2
 8008864:	78f9      	ldrb	r1, [r7, #3]
 8008866:	2301      	movs	r3, #1
 8008868:	f000 fa10 	bl	8008c8c <lps22df_write_reg>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 8008872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008876:	e000      	b.n	800887a <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3320      	adds	r3, #32
 8008896:	f107 0208 	add.w	r2, r7, #8
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fba3 	bl	8008fe8 <lps22df_mode_get>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 80088a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088ac:	e044      	b.n	8008938 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 80088ae:	7a3b      	ldrb	r3, [r7, #8]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d83c      	bhi.n	800892e <LPS22DF_GetOutputDataRate+0xaa>
 80088b4:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <LPS22DF_GetOutputDataRate+0x38>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088eb 	.word	0x080088eb
 80088c4:	080088f5 	.word	0x080088f5
 80088c8:	080088ff 	.word	0x080088ff
 80088cc:	08008907 	.word	0x08008907
 80088d0:	0800890f 	.word	0x0800890f
 80088d4:	08008917 	.word	0x08008917
 80088d8:	0800891f 	.word	0x0800891f
 80088dc:	08008927 	.word	0x08008927
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f04f 0200 	mov.w	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
      break;
 80088e8:	e025      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80088f0:	601a      	str	r2, [r3, #0]
      break;
 80088f2:	e020      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80088fa:	601a      	str	r2, [r3, #0]
      break;
 80088fc:	e01b      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	4a0f      	ldr	r2, [pc, #60]	@ (8008940 <LPS22DF_GetOutputDataRate+0xbc>)
 8008902:	601a      	str	r2, [r3, #0]
      break;
 8008904:	e017      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	4a0e      	ldr	r2, [pc, #56]	@ (8008944 <LPS22DF_GetOutputDataRate+0xc0>)
 800890a:	601a      	str	r2, [r3, #0]
      break;
 800890c:	e013      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	4a0d      	ldr	r2, [pc, #52]	@ (8008948 <LPS22DF_GetOutputDataRate+0xc4>)
 8008912:	601a      	str	r2, [r3, #0]
      break;
 8008914:	e00f      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	4a0c      	ldr	r2, [pc, #48]	@ (800894c <LPS22DF_GetOutputDataRate+0xc8>)
 800891a:	601a      	str	r2, [r3, #0]
      break;
 800891c:	e00b      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	4a0b      	ldr	r2, [pc, #44]	@ (8008950 <LPS22DF_GetOutputDataRate+0xcc>)
 8008922:	601a      	str	r2, [r3, #0]
      break;
 8008924:	e007      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	4a0a      	ldr	r2, [pc, #40]	@ (8008954 <LPS22DF_GetOutputDataRate+0xd0>)
 800892a:	601a      	str	r2, [r3, #0]
      break;
 800892c:	e003      	b.n	8008936 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 800892e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008932:	60fb      	str	r3, [r7, #12]
      break;
 8008934:	bf00      	nop
  }

  return ret;
 8008936:	68fb      	ldr	r3, [r7, #12]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	41200000 	.word	0x41200000
 8008944:	41c80000 	.word	0x41c80000
 8008948:	42480000 	.word	0x42480000
 800894c:	42960000 	.word	0x42960000
 8008950:	42c80000 	.word	0x42c80000
 8008954:	43480000 	.word	0x43480000

08008958 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float Odr)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3320      	adds	r3, #32
 8008968:	f107 020c 	add.w	r2, r7, #12
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fb3a 	bl	8008fe8 <lps22df_mode_get>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 800897a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800897e:	e06c      	b.n	8008a5a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8008980:	edd7 7a00 	vldr	s15, [r7]
 8008984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008990:	d801      	bhi.n	8008996 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8008992:	2301      	movs	r3, #1
 8008994:	e042      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008996:	edd7 7a00 	vldr	s15, [r7]
 800899a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800899e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d801      	bhi.n	80089ac <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e037      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80089ac:	edd7 7a00 	vldr	s15, [r7]
 80089b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80089b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	d801      	bhi.n	80089c2 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 80089be:	2303      	movs	r3, #3
 80089c0:	e02c      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80089c2:	edd7 7a00 	vldr	s15, [r7]
 80089c6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80089ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d2:	d801      	bhi.n	80089d8 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 80089d4:	2304      	movs	r3, #4
 80089d6:	e021      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80089d8:	edd7 7a00 	vldr	s15, [r7]
 80089dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008a64 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 80089e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e8:	d801      	bhi.n	80089ee <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 80089ea:	2305      	movs	r3, #5
 80089ec:	e016      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80089ee:	edd7 7a00 	vldr	s15, [r7]
 80089f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008a68 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 80089f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	d801      	bhi.n	8008a04 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8008a00:	2306      	movs	r3, #6
 8008a02:	e00b      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008a04:	edd7 7a00 	vldr	s15, [r7]
 8008a08:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008a6c <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8008a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a14:	d801      	bhi.n	8008a1a <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8008a16:	2307      	movs	r3, #7
 8008a18:	e000      	b.n	8008a1c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8008a1a:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8008a1c:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3320      	adds	r3, #32
 8008a22:	f107 020c 	add.w	r2, r7, #12
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fa7f 	bl	8008f2c <lps22df_mode_set>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a38:	e00f      	b.n	8008a5a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f103 0220 	add.w	r2, r3, #32
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3333      	adds	r3, #51	@ 0x33
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f000 face 	bl	8008fe8 <lps22df_mode_get>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a56:	e000      	b.n	8008a5a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	42480000 	.word	0x42480000
 8008a68:	42960000 	.word	0x42960000
 8008a6c:	42c80000 	.word	0x42c80000

08008a70 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float Odr)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8008a7c:	edd7 7a00 	vldr	s15, [r7]
 8008a80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8c:	d801      	bhi.n	8008a92 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e042      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008a92:	edd7 7a00 	vldr	s15, [r7]
 8008a96:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8008a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa2:	d801      	bhi.n	8008aa8 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e037      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008aa8:	edd7 7a00 	vldr	s15, [r7]
 8008aac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab8:	d801      	bhi.n	8008abe <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8008aba:	2303      	movs	r3, #3
 8008abc:	e02c      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008abe:	edd7 7a00 	vldr	s15, [r7]
 8008ac2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8008ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ace:	d801      	bhi.n	8008ad4 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	e021      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008ad4:	edd7 7a00 	vldr	s15, [r7]
 8008ad8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008b2c <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8008adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae4:	d801      	bhi.n	8008aea <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8008ae6:	2305      	movs	r3, #5
 8008ae8:	e016      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008aea:	edd7 7a00 	vldr	s15, [r7]
 8008aee:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8008b30 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8008af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afa:	d801      	bhi.n	8008b00 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8008afc:	2306      	movs	r3, #6
 8008afe:	e00b      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008b00:	edd7 7a00 	vldr	s15, [r7]
 8008b04:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008b34 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8008b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b10:	d801      	bhi.n	8008b16 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8008b12:	2307      	movs	r3, #7
 8008b14:	e000      	b.n	8008b18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8008b16:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	42480000 	.word	0x42480000
 8008b30:	42960000 	.word	0x42960000
 8008b34:	42c80000 	.word	0x42c80000

08008b38 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3320      	adds	r3, #32
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f977 	bl	8008e3a <lps22df_init_set>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b56:	e047      	b.n	8008be8 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d102      	bne.n	8008b66 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8008b60:	2303      	movs	r3, #3
 8008b62:	723b      	strb	r3, [r7, #8]
 8008b64:	e008      	b.n	8008b78 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d102      	bne.n	8008b74 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	723b      	strb	r3, [r7, #8]
 8008b72:	e001      	b.n	8008b78 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8008b74:	2300      	movs	r3, #0
 8008b76:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_AUTO;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3320      	adds	r3, #32
 8008b80:	f107 0208 	add.w	r2, r7, #8
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f8f5 	bl	8008d76 <lps22df_bus_mode_set>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8008b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b96:	e027      	b.n	8008be8 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3320      	adds	r3, #32
 8008ba8:	f107 020c 	add.w	r2, r7, #12
 8008bac:	4611      	mov	r1, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f9bc 	bl	8008f2c <lps22df_mode_set>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bbe:	e013      	b.n	8008be8 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0220 	add.w	r2, r3, #32
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3333      	adds	r3, #51	@ 0x33
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4610      	mov	r0, r2
 8008bce:	f000 fa0b 	bl	8008fe8 <lps22df_mode_get>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8008bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bdc:	e004      	b.n	8008be8 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2204      	movs	r2, #4
 8008be2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	72fb      	strb	r3, [r7, #11]
 8008c00:	4613      	mov	r3, r2
 8008c02:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	695c      	ldr	r4, [r3, #20]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	7b1b      	ldrb	r3, [r3, #12]
 8008c10:	4618      	mov	r0, r3
 8008c12:	7afb      	ldrb	r3, [r7, #11]
 8008c14:	b299      	uxth	r1, r3
 8008c16:	893b      	ldrh	r3, [r7, #8]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	47a0      	blx	r4
 8008c1c:	4603      	mov	r3, r0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd90      	pop	{r4, r7, pc}

08008c26 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008c26:	b590      	push	{r4, r7, lr}
 8008c28:	b087      	sub	sp, #28
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	461a      	mov	r2, r3
 8008c32:	460b      	mov	r3, r1
 8008c34:	72fb      	strb	r3, [r7, #11]
 8008c36:	4613      	mov	r3, r2
 8008c38:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	691c      	ldr	r4, [r3, #16]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	7b1b      	ldrb	r3, [r3, #12]
 8008c46:	4618      	mov	r0, r3
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	b299      	uxth	r1, r3
 8008c4c:	893b      	ldrh	r3, [r7, #8]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	47a0      	blx	r4
 8008c52:	4603      	mov	r3, r0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	371c      	adds	r7, #28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8008c5c:	b590      	push	{r4, r7, lr}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	607a      	str	r2, [r7, #4]
 8008c66:	461a      	mov	r2, r3
 8008c68:	460b      	mov	r3, r1
 8008c6a:	72fb      	strb	r3, [r7, #11]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	685c      	ldr	r4, [r3, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68d8      	ldr	r0, [r3, #12]
 8008c78:	893b      	ldrh	r3, [r7, #8]
 8008c7a:	7af9      	ldrb	r1, [r7, #11]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	47a0      	blx	r4
 8008c80:	6178      	str	r0, [r7, #20]
  return ret;
 8008c82:	697b      	ldr	r3, [r7, #20]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd90      	pop	{r4, r7, pc}

08008c8c <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	461a      	mov	r2, r3
 8008c98:	460b      	mov	r3, r1
 8008c9a:	72fb      	strb	r3, [r7, #11]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681c      	ldr	r4, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68d8      	ldr	r0, [r3, #12]
 8008ca8:	893b      	ldrh	r3, [r7, #8]
 8008caa:	7af9      	ldrb	r1, [r7, #11]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	47a0      	blx	r4
 8008cb0:	6178      	str	r0, [r7, #20]
  return ret;
 8008cb2:	697b      	ldr	r3, [r7, #20]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd90      	pop	{r4, r7, pc}

08008cbc <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <bytecpy+0x1e>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <bytecpy+0x1e>
  {
    *target = *source;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	701a      	strb	r2, [r3, #0]
  }
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cfa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8008d14 <lps22df_from_lsb_to_hPa+0x2c>
 8008cfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d02:	eef0 7a66 	vmov.f32	s15, s13
}
 8008d06:	eeb0 0a67 	vmov.f32	s0, s15
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	49800000 	.word	0x49800000

08008d18 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8008d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d2e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8008d48 <lps22df_from_lsb_to_celsius+0x30>
 8008d32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d36:	eef0 7a66 	vmov.f32	s15, s13
}
 8008d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	42c80000 	.word	0x42c80000

08008d4c <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8008d56:	f107 020b 	add.w	r2, r7, #11
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	210f      	movs	r1, #15
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff ff7c 	bl	8008c5c <lps22df_read_reg>
 8008d64:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8008d66:	7afa      	ldrb	r2, [r7, #11]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	701a      	strb	r2, [r3, #0]

  return ret;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b086      	sub	sp, #24
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_add_t i3c_if_ctrl_add;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8008d80:	f107 020c 	add.w	r2, r7, #12
 8008d84:	2301      	movs	r3, #1
 8008d86:	210e      	movs	r1, #14
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff ff67 	bl	8008c5c <lps22df_read_reg>
 8008d8e:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d124      	bne.n	8008de0 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	7b3b      	ldrb	r3, [r7, #12]
 8008da4:	f362 13c7 	bfi	r3, r2, #7, #1
 8008da8:	733b      	strb	r3, [r7, #12]
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	085b      	lsrs	r3, r3, #1
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	7b3b      	ldrb	r3, [r7, #12]
 8008db8:	f362 1386 	bfi	r3, r2, #6, #1
 8008dbc:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	7b3b      	ldrb	r3, [r7, #12]
 8008dca:	f362 1345 	bfi	r3, r2, #5, #1
 8008dce:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8008dd0:	f107 020c 	add.w	r2, r7, #12
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	210e      	movs	r1, #14
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff ff57 	bl	8008c8c <lps22df_write_reg>
 8008dde:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d107      	bne.n	8008df6 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8008de6:	f107 0210 	add.w	r2, r7, #16
 8008dea:	2301      	movs	r3, #1
 8008dec:	2119      	movs	r1, #25
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff ff34 	bl	8008c5c <lps22df_read_reg>
 8008df4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  if (ret == 0)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d119      	bne.n	8008e30 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl_add.asf_on = (uint8_t)val->filter & 0x01U;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	785b      	ldrb	r3, [r3, #1]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	7c3b      	ldrb	r3, [r7, #16]
 8008e08:	f362 1345 	bfi	r3, r2, #5, #1
 8008e0c:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl_add.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	789b      	ldrb	r3, [r3, #2]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	7c3b      	ldrb	r3, [r7, #16]
 8008e1a:	f362 0301 	bfi	r3, r2, #0, #2
 8008e1e:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8008e20:	f107 0210 	add.w	r2, r7, #16
 8008e24:	2301      	movs	r3, #1
 8008e26:	2119      	movs	r1, #25
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff2f 	bl	8008c8c <lps22df_write_reg>
 8008e2e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  return ret;
 8008e30:	697b      	ldr	r3, [r7, #20]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b086      	sub	sp, #24
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8008e46:	f107 0208 	add.w	r2, r7, #8
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	2111      	movs	r1, #17
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff ff04 	bl	8008c5c <lps22df_read_reg>
 8008e54:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d162      	bne.n	8008f22 <lps22df_init_set+0xe8>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8008e5c:	f107 0208 	add.w	r2, r7, #8
 8008e60:	f107 0310 	add.w	r3, r7, #16
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff ff28 	bl	8008cbc <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff ff1f 	bl	8008cbc <bytecpy>

    switch (val)
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d012      	beq.n	8008eaa <lps22df_init_set+0x70>
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	dc3f      	bgt.n	8008f08 <lps22df_init_set+0xce>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01b      	beq.n	8008ec4 <lps22df_init_set+0x8a>
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d13b      	bne.n	8008f08 <lps22df_init_set+0xce>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8008e90:	7c3b      	ldrb	r3, [r7, #16]
 8008e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e96:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8008e98:	f107 0210 	add.w	r2, r7, #16
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	2111      	movs	r1, #17
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff fef3 	bl	8008c8c <lps22df_write_reg>
 8008ea6:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8008ea8:	e03b      	b.n	8008f22 <lps22df_init_set+0xe8>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8008eaa:	7c3b      	ldrb	r3, [r7, #16]
 8008eac:	f043 0304 	orr.w	r3, r3, #4
 8008eb0:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8008eb2:	f107 0210 	add.w	r2, r7, #16
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	2111      	movs	r1, #17
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff fee6 	bl	8008c8c <lps22df_write_reg>
 8008ec0:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8008ec2:	e02e      	b.n	8008f22 <lps22df_init_set+0xe8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8008ec4:	7c3b      	ldrb	r3, [r7, #16]
 8008ec6:	f043 0308 	orr.w	r3, r3, #8
 8008eca:	743b      	strb	r3, [r7, #16]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8008ecc:	7b3b      	ldrb	r3, [r7, #12]
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	733b      	strb	r3, [r7, #12]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8008ed4:	f107 0210 	add.w	r2, r7, #16
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff feec 	bl	8008cbc <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8008ee4:	f107 020c 	add.w	r2, r7, #12
 8008ee8:	f107 0308 	add.w	r3, r7, #8
 8008eec:	3301      	adds	r3, #1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fee3 	bl	8008cbc <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8008ef6:	f107 0208 	add.w	r2, r7, #8
 8008efa:	2302      	movs	r3, #2
 8008efc:	2111      	movs	r1, #17
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff fec4 	bl	8008c8c <lps22df_write_reg>
 8008f04:	6178      	str	r0, [r7, #20]
        break;
 8008f06:	e00c      	b.n	8008f22 <lps22df_init_set+0xe8>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8008f08:	7c3b      	ldrb	r3, [r7, #16]
 8008f0a:	f043 0304 	orr.w	r3, r3, #4
 8008f0e:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8008f10:	f107 0210 	add.w	r2, r7, #16
 8008f14:	2301      	movs	r3, #1
 8008f16:	2111      	movs	r1, #17
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff feb7 	bl	8008c8c <lps22df_write_reg>
 8008f1e:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8008f20:	bf00      	nop
    }
  }
  return ret;
 8008f22:	697b      	ldr	r3, [r7, #20]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8008f36:	f107 0208 	add.w	r2, r7, #8
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	2110      	movs	r1, #16
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fe8c 	bl	8008c5c <lps22df_read_reg>
 8008f44:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d148      	bne.n	8008fde <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8008f4c:	f107 0208 	add.w	r2, r7, #8
 8008f50:	f107 0310 	add.w	r3, r7, #16
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff feb0 	bl	8008cbc <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	4611      	mov	r1, r2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fea7 	bl	8008cbc <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	7c3b      	ldrb	r3, [r7, #16]
 8008f7a:	f362 03c6 	bfi	r3, r2, #3, #4
 8008f7e:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	7c3b      	ldrb	r3, [r7, #16]
 8008f8c:	f362 0302 	bfi	r3, r2, #0, #3
 8008f90:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	789b      	ldrb	r3, [r3, #2]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	7b3b      	ldrb	r3, [r7, #12]
 8008f9e:	f362 1304 	bfi	r3, r2, #4, #1
 8008fa2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8008fa4:	7b3b      	ldrb	r3, [r7, #12]
 8008fa6:	f36f 1345 	bfc	r3, #5, #1
 8008faa:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8008fac:	f107 0210 	add.w	r2, r7, #16
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fe80 	bl	8008cbc <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8008fbc:	f107 020c 	add.w	r2, r7, #12
 8008fc0:	f107 0308 	add.w	r3, r7, #8
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fe77 	bl	8008cbc <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8008fce:	f107 0208 	add.w	r2, r7, #8
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	2110      	movs	r1, #16
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fe58 	bl	8008c8c <lps22df_write_reg>
 8008fdc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008fde:	697b      	ldr	r3, [r7, #20]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8008ff2:	f107 0208 	add.w	r2, r7, #8
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	2110      	movs	r1, #16
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fe2e 	bl	8008c5c <lps22df_read_reg>
 8009000:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f040 80b6 	bne.w	8009176 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 800900a:	f107 0208 	add.w	r2, r7, #8
 800900e:	f107 0310 	add.w	r3, r7, #16
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff fe51 	bl	8008cbc <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	f107 030c 	add.w	r3, r7, #12
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fe48 	bl	8008cbc <bytecpy>

    switch (ctrl_reg1.odr)
 800902c:	7c3b      	ldrb	r3, [r7, #16]
 800902e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b08      	cmp	r3, #8
 8009036:	d839      	bhi.n	80090ac <lps22df_mode_get+0xc4>
 8009038:	a201      	add	r2, pc, #4	@ (adr r2, 8009040 <lps22df_mode_get+0x58>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	08009065 	.word	0x08009065
 8009044:	0800906d 	.word	0x0800906d
 8009048:	08009075 	.word	0x08009075
 800904c:	0800907d 	.word	0x0800907d
 8009050:	08009085 	.word	0x08009085
 8009054:	0800908d 	.word	0x0800908d
 8009058:	08009095 	.word	0x08009095
 800905c:	0800909d 	.word	0x0800909d
 8009060:	080090a5 	.word	0x080090a5
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
        break;
 800906a:	e023      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2201      	movs	r2, #1
 8009070:	701a      	strb	r2, [r3, #0]
        break;
 8009072:	e01f      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2202      	movs	r2, #2
 8009078:	701a      	strb	r2, [r3, #0]
        break;
 800907a:	e01b      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2203      	movs	r2, #3
 8009080:	701a      	strb	r2, [r3, #0]
        break;
 8009082:	e017      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2204      	movs	r2, #4
 8009088:	701a      	strb	r2, [r3, #0]
        break;
 800908a:	e013      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2205      	movs	r2, #5
 8009090:	701a      	strb	r2, [r3, #0]
        break;
 8009092:	e00f      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2206      	movs	r2, #6
 8009098:	701a      	strb	r2, [r3, #0]
        break;
 800909a:	e00b      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2207      	movs	r2, #7
 80090a0:	701a      	strb	r2, [r3, #0]
        break;
 80090a2:	e007      	b.n	80090b4 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2208      	movs	r2, #8
 80090a8:	701a      	strb	r2, [r3, #0]
        break;
 80090aa:	e003      	b.n	80090b4 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	701a      	strb	r2, [r3, #0]
        break;
 80090b2:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 80090b4:	7c3b      	ldrb	r3, [r7, #16]
 80090b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b07      	cmp	r3, #7
 80090be:	d833      	bhi.n	8009128 <lps22df_mode_get+0x140>
 80090c0:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <lps22df_mode_get+0xe0>)
 80090c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c6:	bf00      	nop
 80090c8:	080090e9 	.word	0x080090e9
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	080090f9 	.word	0x080090f9
 80090d4:	08009101 	.word	0x08009101
 80090d8:	08009109 	.word	0x08009109
 80090dc:	08009111 	.word	0x08009111
 80090e0:	08009119 	.word	0x08009119
 80090e4:	08009121 	.word	0x08009121
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	705a      	strb	r2, [r3, #1]
        break;
 80090ee:	e01f      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2201      	movs	r2, #1
 80090f4:	705a      	strb	r2, [r3, #1]
        break;
 80090f6:	e01b      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2202      	movs	r2, #2
 80090fc:	705a      	strb	r2, [r3, #1]
        break;
 80090fe:	e017      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2203      	movs	r2, #3
 8009104:	705a      	strb	r2, [r3, #1]
        break;
 8009106:	e013      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2204      	movs	r2, #4
 800910c:	705a      	strb	r2, [r3, #1]
        break;
 800910e:	e00f      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2205      	movs	r2, #5
 8009114:	705a      	strb	r2, [r3, #1]
        break;
 8009116:	e00b      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2206      	movs	r2, #6
 800911c:	705a      	strb	r2, [r3, #1]
        break;
 800911e:	e007      	b.n	8009130 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2207      	movs	r2, #7
 8009124:	705a      	strb	r2, [r3, #1]
        break;
 8009126:	e003      	b.n	8009130 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	705a      	strb	r2, [r3, #1]
        break;
 800912e:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8009130:	7b3b      	ldrb	r3, [r7, #12]
 8009132:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009136:	b2db      	uxtb	r3, r3
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	7b3a      	ldrb	r2, [r7, #12]
 800913c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8009140:	b2d2      	uxtb	r2, r2
 8009142:	4313      	orrs	r3, r2
 8009144:	2b03      	cmp	r3, #3
 8009146:	d00e      	beq.n	8009166 <lps22df_mode_get+0x17e>
 8009148:	2b03      	cmp	r3, #3
 800914a:	dc10      	bgt.n	800916e <lps22df_mode_get+0x186>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <lps22df_mode_get+0x16e>
 8009150:	2b01      	cmp	r3, #1
 8009152:	d004      	beq.n	800915e <lps22df_mode_get+0x176>
 8009154:	e00b      	b.n	800916e <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2200      	movs	r2, #0
 800915a:	709a      	strb	r2, [r3, #2]
        break;
 800915c:	e00b      	b.n	8009176 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2201      	movs	r2, #1
 8009162:	709a      	strb	r2, [r3, #2]
        break;
 8009164:	e007      	b.n	8009176 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2203      	movs	r2, #3
 800916a:	709a      	strb	r2, [r3, #2]
        break;
 800916c:	e003      	b.n	8009176 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	709a      	strb	r2, [r3, #2]
        break;
 8009174:	bf00      	nop
    }
  }
  return ret;
 8009176:	697b      	ldr	r3, [r7, #20]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <lps22df_data_get>:
  * @param  data  data retrieved from the sensor.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_data_get(stmdev_ctx_t *ctx, lps22df_data_t *data)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint8_t buff[5];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, buff, 5);
 800918a:	f107 020c 	add.w	r2, r7, #12
 800918e:	2305      	movs	r3, #5
 8009190:	2128      	movs	r1, #40	@ 0x28
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff fd62 	bl	8008c5c <lps22df_read_reg>
 8009198:	6178      	str	r0, [r7, #20]

  /* pressure conversion */
  data->pressure.raw = (int32_t)buff[2];
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	461a      	mov	r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[1];
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	021b      	lsls	r3, r3, #8
 80091a8:	7b7a      	ldrb	r2, [r7, #13]
 80091aa:	441a      	add	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[0];
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	021b      	lsls	r3, r3, #8
 80091b6:	7b3a      	ldrb	r2, [r7, #12]
 80091b8:	441a      	add	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	605a      	str	r2, [r3, #4]
  data->pressure.raw = data->pressure.raw * 256;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	021a      	lsls	r2, r3, #8
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	605a      	str	r2, [r3, #4]

  data->pressure.hpa = lps22df_from_lsb_to_hPa(data->pressure.raw);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fd8b 	bl	8008ce8 <lps22df_from_lsb_to_hPa>
 80091d2:	eef0 7a40 	vmov.f32	s15, s0
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	edc3 7a00 	vstr	s15, [r3]


  /* temperature conversion */
  data->heat.raw = (int16_t)buff[4];
 80091dc:	7c3b      	ldrb	r3, [r7, #16]
 80091de:	b21a      	sxth	r2, r3
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	819a      	strh	r2, [r3, #12]
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	7bfa      	ldrb	r2, [r7, #15]
 80091f2:	4413      	add	r3, r2
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	b21a      	sxth	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	819a      	strh	r2, [r3, #12]
  data->heat.deg_c = lps22df_from_lsb_to_celsius(data->heat.raw);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff fd88 	bl	8008d18 <lps22df_from_lsb_to_celsius>
 8009208:	eef0 7a40 	vmov.f32	s15, s0
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	edc3 7a02 	vstr	s15, [r3, #8]

  return ret;
 8009212:	697b      	ldr	r3, [r7, #20]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8009230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	e04d      	b.n	80092d4 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	7b1a      	ldrb	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	695a      	ldr	r2, [r3, #20]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a1b      	ldr	r2, [pc, #108]	@ (80092e0 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8009274:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a1a      	ldr	r2, [pc, #104]	@ (80092e4 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 800927a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d103      	bne.n	8009292 <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	e020      	b.n	80092d4 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4798      	blx	r3
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 800929e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e016      	b.n	80092d4 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d112      	bne.n	80092d4 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10d      	bne.n	80092d4 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80092b8:	230c      	movs	r3, #12
 80092ba:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 80092bc:	7afb      	ldrb	r3, [r7, #11]
 80092be:	461a      	mov	r2, r3
 80092c0:	2112      	movs	r1, #18
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fdbe 	bl	8009e44 <LSM6DSO16IS_Write_Reg>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 80092ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092d2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80092d4:	68fb      	ldr	r3, [r7, #12]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	0800a30d 	.word	0x0800a30d
 80092e4:	0800a343 	.word	0x0800a343

080092e8 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 80092f4:	2100      	movs	r1, #0
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fdc1 	bl	8009e7e <LSM6DSO16IS_Set_Mem_Bank>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 8009302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009306:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3320      	adds	r3, #32
 800930c:	2101      	movs	r1, #1
 800930e:	4618      	mov	r0, r3
 8009310:	f001 fbd0 	bl	800aab4 <lsm6dso16is_auto_increment_set>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 800931a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800931e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3320      	adds	r3, #32
 8009324:	2101      	movs	r1, #1
 8009326:	4618      	mov	r0, r3
 8009328:	f001 fbea 	bl	800ab00 <lsm6dso16is_block_data_update_set>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8009332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009336:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2204      	movs	r2, #4
 800933c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3320      	adds	r3, #32
 8009344:	2100      	movs	r1, #0
 8009346:	4618      	mov	r0, r3
 8009348:	f001 f904 	bl	800a554 <lsm6dso16is_xl_data_rate_set>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 8009352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009356:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3320      	adds	r3, #32
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f001 f89a 	bl	800a498 <lsm6dso16is_xl_full_scale_set>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 800936a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800936e:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2204      	movs	r2, #4
 8009374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3320      	adds	r3, #32
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f001 fa9c 	bl	800a8bc <lsm6dso16is_gy_data_rate_set>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 800938a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800938e:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3320      	adds	r3, #32
 8009394:	2103      	movs	r1, #3
 8009396:	4618      	mov	r0, r3
 8009398:	f001 fa04 	bl	800a7a4 <lsm6dso16is_gy_full_scale_set>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 80093a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093a6:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d103      	bne.n	80093b6 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f890 	bl	80094f2 <LSM6DSO16IS_ACC_Disable>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fad0 	bl	8009984 <LSM6DSO16IS_GYRO_Disable>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093ee:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800940e:	68fb      	ldr	r3, [r7, #12]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3320      	adds	r3, #32
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fffc 	bl	800a42a <lsm6dso16is_device_id_get>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8009438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800943c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800943e:	68fb      	ldr	r3, [r7, #12]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2201      	movs	r2, #1
 8009456:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2201      	movs	r2, #1
 800945c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2200      	movs	r2, #0
 8009462:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2200      	movs	r2, #0
 8009468:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009470:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2200      	movs	r2, #0
 800947c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	4a07      	ldr	r2, [pc, #28]	@ (80094a0 <LSM6DSO16IS_GetCapabilities+0x58>)
 8009482:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	4a06      	ldr	r2, [pc, #24]	@ (80094a0 <LSM6DSO16IS_GetCapabilities+0x58>)
 8009488:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	45505000 	.word	0x45505000

080094a4 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d102      	bne.n	80094c0 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	e013      	b.n	80094e8 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f103 0220 	add.w	r2, r3, #32
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f001 f840 	bl	800a554 <lsm6dso16is_xl_data_rate_set>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80094da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094de:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e01e      	b.n	800954c <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f103 0220 	add.w	r2, r3, #32
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3333      	adds	r3, #51	@ 0x33
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f001 f85a 	bl	800a5d4 <lsm6dso16is_xl_data_rate_get>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8009526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800952a:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3320      	adds	r3, #32
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f001 f80e 	bl	800a554 <lsm6dso16is_xl_data_rate_set>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 800953e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009542:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 800954c:	68fb      	ldr	r3, [r7, #12]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3320      	adds	r3, #32
 800956a:	f107 020b 	add.w	r2, r7, #11
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f000 ffb7 	bl	800a4e4 <lsm6dso16is_xl_full_scale_get>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800957c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009580:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	2b03      	cmp	r3, #3
 8009586:	d81b      	bhi.n	80095c0 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8009588:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 800958a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958e:	bf00      	nop
 8009590:	080095a1 	.word	0x080095a1
 8009594:	080095b9 	.word	0x080095b9
 8009598:	080095a9 	.word	0x080095a9
 800959c:	080095b1 	.word	0x080095b1
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	4a0c      	ldr	r2, [pc, #48]	@ (80095d4 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 80095a4:	601a      	str	r2, [r3, #0]
      break;
 80095a6:	e00f      	b.n	80095c8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	4a0b      	ldr	r2, [pc, #44]	@ (80095d8 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 80095ac:	601a      	str	r2, [r3, #0]
      break;
 80095ae:	e00b      	b.n	80095c8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	4a0a      	ldr	r2, [pc, #40]	@ (80095dc <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 80095b4:	601a      	str	r2, [r3, #0]
      break;
 80095b6:	e007      	b.n	80095c8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	4a09      	ldr	r2, [pc, #36]	@ (80095e0 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 80095bc:	601a      	str	r2, [r3, #0]
      break;
 80095be:	e003      	b.n	80095c8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095c4:	60fb      	str	r3, [r7, #12]
      break;
 80095c6:	bf00      	nop
  }

  return ret;
 80095c8:	68fb      	ldr	r3, [r7, #12]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	3d79db23 	.word	0x3d79db23
 80095d8:	3df9db23 	.word	0x3df9db23
 80095dc:	3e79db23 	.word	0x3e79db23
 80095e0:	3ef9db23 	.word	0x3ef9db23

080095e4 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3320      	adds	r3, #32
 80095f6:	f107 020b 	add.w	r2, r7, #11
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 ffe9 	bl	800a5d4 <lsm6dso16is_xl_data_rate_get>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800960c:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 800960e:	7afb      	ldrb	r3, [r7, #11]
 8009610:	2b1b      	cmp	r3, #27
 8009612:	d86c      	bhi.n	80096ee <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8009614:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	0800968d 	.word	0x0800968d
 8009620:	0800969f 	.word	0x0800969f
 8009624:	080096a7 	.word	0x080096a7
 8009628:	080096af 	.word	0x080096af
 800962c:	080096b7 	.word	0x080096b7
 8009630:	080096bf 	.word	0x080096bf
 8009634:	080096c7 	.word	0x080096c7
 8009638:	080096cf 	.word	0x080096cf
 800963c:	080096d7 	.word	0x080096d7
 8009640:	080096df 	.word	0x080096df
 8009644:	080096e7 	.word	0x080096e7
 8009648:	080096ef 	.word	0x080096ef
 800964c:	080096ef 	.word	0x080096ef
 8009650:	080096ef 	.word	0x080096ef
 8009654:	080096ef 	.word	0x080096ef
 8009658:	080096ef 	.word	0x080096ef
 800965c:	080096ef 	.word	0x080096ef
 8009660:	0800969f 	.word	0x0800969f
 8009664:	080096a7 	.word	0x080096a7
 8009668:	080096af 	.word	0x080096af
 800966c:	080096b7 	.word	0x080096b7
 8009670:	080096bf 	.word	0x080096bf
 8009674:	080096c7 	.word	0x080096c7
 8009678:	080096cf 	.word	0x080096cf
 800967c:	080096d7 	.word	0x080096d7
 8009680:	080096df 	.word	0x080096df
 8009684:	080096e7 	.word	0x080096e7
 8009688:	08009697 	.word	0x08009697
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	601a      	str	r2, [r3, #0]
      break;
 8009694:	e02f      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	4a19      	ldr	r2, [pc, #100]	@ (8009700 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 800969a:	601a      	str	r2, [r3, #0]
      break;
 800969c:	e02b      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	4a18      	ldr	r2, [pc, #96]	@ (8009704 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 80096a2:	601a      	str	r2, [r3, #0]
      break;
 80096a4:	e027      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	4a17      	ldr	r2, [pc, #92]	@ (8009708 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 80096aa:	601a      	str	r2, [r3, #0]
      break;
 80096ac:	e023      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	4a16      	ldr	r2, [pc, #88]	@ (800970c <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 80096b2:	601a      	str	r2, [r3, #0]
      break;
 80096b4:	e01f      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	4a15      	ldr	r2, [pc, #84]	@ (8009710 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 80096ba:	601a      	str	r2, [r3, #0]
      break;
 80096bc:	e01b      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	4a14      	ldr	r2, [pc, #80]	@ (8009714 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 80096c2:	601a      	str	r2, [r3, #0]
      break;
 80096c4:	e017      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	4a13      	ldr	r2, [pc, #76]	@ (8009718 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 80096ca:	601a      	str	r2, [r3, #0]
      break;
 80096cc:	e013      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	4a12      	ldr	r2, [pc, #72]	@ (800971c <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 80096d2:	601a      	str	r2, [r3, #0]
      break;
 80096d4:	e00f      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	4a11      	ldr	r2, [pc, #68]	@ (8009720 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 80096da:	601a      	str	r2, [r3, #0]
      break;
 80096dc:	e00b      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	4a10      	ldr	r2, [pc, #64]	@ (8009724 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 80096e2:	601a      	str	r2, [r3, #0]
      break;
 80096e4:	e007      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009728 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 80096ea:	601a      	str	r2, [r3, #0]
      break;
 80096ec:	e003      	b.n	80096f6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 80096ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096f2:	60fb      	str	r3, [r7, #12]
      break;
 80096f4:	bf00      	nop
  }

  return ret;
 80096f6:	68fb      	ldr	r3, [r7, #12]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	3fcccccd 	.word	0x3fcccccd
 8009704:	41480000 	.word	0x41480000
 8009708:	41d00000 	.word	0x41d00000
 800970c:	42500000 	.word	0x42500000
 8009710:	42d00000 	.word	0x42d00000
 8009714:	43500000 	.word	0x43500000
 8009718:	43d00000 	.word	0x43d00000
 800971c:	44504000 	.word	0x44504000
 8009720:	44d06000 	.word	0x44d06000
 8009724:	45505000 	.word	0x45505000
 8009728:	45d05800 	.word	0x45d05800

0800972c <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800973e:	2b01      	cmp	r3, #1
 8009740:	d106      	bne.n	8009750 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009742:	ed97 0a00 	vldr	s0, [r7]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fbc0 	bl	8009ecc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	e005      	b.n	800975c <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009750:	ed97 0a00 	vldr	s0, [r7]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fc47 	bl	8009fe8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 800975a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800975c:	68fb      	ldr	r3, [r7, #12]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3320      	adds	r3, #32
 800977a:	f107 020b 	add.w	r2, r7, #11
 800977e:	4611      	mov	r1, r2
 8009780:	4618      	mov	r0, r3
 8009782:	f000 feaf 	bl	800a4e4 <lsm6dso16is_xl_full_scale_get>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800978c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009790:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d81b      	bhi.n	80097d0 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8009798:	a201      	add	r2, pc, #4	@ (adr r2, 80097a0 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 800979a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979e:	bf00      	nop
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097b9 	.word	0x080097b9
 80097ac:	080097c1 	.word	0x080097c1
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2202      	movs	r2, #2
 80097b4:	601a      	str	r2, [r3, #0]
      break;
 80097b6:	e00f      	b.n	80097d8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2204      	movs	r2, #4
 80097bc:	601a      	str	r2, [r3, #0]
      break;
 80097be:	e00b      	b.n	80097d8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2208      	movs	r2, #8
 80097c4:	601a      	str	r2, [r3, #0]
      break;
 80097c6:	e007      	b.n	80097d8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2210      	movs	r2, #16
 80097cc:	601a      	str	r2, [r3, #0]
      break;
 80097ce:	e003      	b.n	80097d8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097d4:	60fb      	str	r3, [r7, #12]
      break;
 80097d6:	bf00      	nop
  }

  return ret;
 80097d8:	68fb      	ldr	r3, [r7, #12]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop

080097e4 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	dd0b      	ble.n	8009810 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	dd06      	ble.n	800980c <LSM6DSO16IS_ACC_SetFullScale+0x28>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b08      	cmp	r3, #8
 8009802:	dc01      	bgt.n	8009808 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8009804:	2303      	movs	r3, #3
 8009806:	e004      	b.n	8009812 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8009808:	2301      	movs	r3, #1
 800980a:	e002      	b.n	8009812 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 800980c:	2302      	movs	r3, #2
 800980e:	e000      	b.n	8009812 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8009810:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8009812:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3320      	adds	r3, #32
 8009818:	7afa      	ldrb	r2, [r7, #11]
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fe3b 	bl	800a498 <lsm6dso16is_xl_full_scale_set>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800982c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800982e:	68fb      	ldr	r3, [r7, #12]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3320      	adds	r3, #32
 800984a:	f107 020c 	add.w	r2, r7, #12
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f001 f9c3 	bl	800abdc <lsm6dso16is_acceleration_raw_get>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800985c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009860:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8009862:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 800986a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8009872:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	809a      	strh	r2, [r3, #4]

  return ret;
 800987a:	697b      	ldr	r3, [r7, #20]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3320      	adds	r3, #32
 800989c:	f107 020c 	add.w	r2, r7, #12
 80098a0:	4611      	mov	r1, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f001 f99a 	bl	800abdc <lsm6dso16is_acceleration_raw_get>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098b2:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 80098b4:	f107 0308 	add.w	r3, r7, #8
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fe4c 	bl	8009558 <LSM6DSO16IS_ACC_GetSensitivity>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098ca:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 80098cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80098dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098e4:	ee17 2a90 	vmov	r2, s15
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 80098ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098f0:	ee07 3a90 	vmov	s15, r3
 80098f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80098fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009904:	ee17 2a90 	vmov	r2, s15
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 800990c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009910:	ee07 3a90 	vmov	s15, r3
 8009914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009918:	edd7 7a02 	vldr	s15, [r7, #8]
 800991c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009924:	ee17 2a90 	vmov	r2, s15
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	609a      	str	r2, [r3, #8]

  return ret;
 800992c:	697b      	ldr	r3, [r7, #20]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009948:	2b01      	cmp	r3, #1
 800994a:	d102      	bne.n	8009952 <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	e013      	b.n	800997a <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f103 0220 	add.w	r2, r3, #32
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f000 ffab 	bl	800a8bc <lsm6dso16is_gy_data_rate_set>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 800996c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009970:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 800997a:	68fb      	ldr	r3, [r7, #12]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	e01e      	b.n	80099de <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f103 0220 	add.w	r2, r3, #32
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3334      	adds	r3, #52	@ 0x34
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f000 ffc5 	bl	800a93c <lsm6dso16is_gy_data_rate_get>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099bc:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3320      	adds	r3, #32
 80099c2:	2100      	movs	r1, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 ff79 	bl	800a8bc <lsm6dso16is_gy_data_rate_set>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 80099d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099d4:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 80099de:	68fb      	ldr	r3, [r7, #12]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3320      	adds	r3, #32
 80099fa:	f107 020b 	add.w	r2, r7, #11
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 feff 	bl	800a804 <lsm6dso16is_gy_full_scale_get>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a10:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d839      	bhi.n	8009a8c <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8009a18:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a6d 	.word	0x08009a6d
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	08009a7d 	.word	0x08009a7d
 8009a2c:	08009a85 	.word	0x08009a85
 8009a30:	08009a8d 	.word	0x08009a8d
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009a8d 	.word	0x08009a8d
 8009a3c:	08009a8d 	.word	0x08009a8d
 8009a40:	08009a8d 	.word	0x08009a8d
 8009a44:	08009a8d 	.word	0x08009a8d
 8009a48:	08009a8d 	.word	0x08009a8d
 8009a4c:	08009a8d 	.word	0x08009a8d
 8009a50:	08009a8d 	.word	0x08009a8d
 8009a54:	08009a8d 	.word	0x08009a8d
 8009a58:	08009a8d 	.word	0x08009a8d
 8009a5c:	08009a8d 	.word	0x08009a8d
 8009a60:	08009a65 	.word	0x08009a65
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	4a0e      	ldr	r2, [pc, #56]	@ (8009aa0 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8009a68:	601a      	str	r2, [r3, #0]
      break;
 8009a6a:	e013      	b.n	8009a94 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8009aa4 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8009a70:	601a      	str	r2, [r3, #0]
      break;
 8009a72:	e00f      	b.n	8009a94 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa8 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8009a78:	601a      	str	r2, [r3, #0]
      break;
 8009a7a:	e00b      	b.n	8009a94 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8009aac <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8009a80:	601a      	str	r2, [r3, #0]
      break;
 8009a82:	e007      	b.n	8009a94 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	4a0a      	ldr	r2, [pc, #40]	@ (8009ab0 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8009a88:	601a      	str	r2, [r3, #0]
      break;
 8009a8a:	e003      	b.n	8009a94 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a90:	60fb      	str	r3, [r7, #12]
      break;
 8009a92:	bf00      	nop
  }

  return ret;
 8009a94:	68fb      	ldr	r3, [r7, #12]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	408c0000 	.word	0x408c0000
 8009aa4:	410c0000 	.word	0x410c0000
 8009aa8:	418c0000 	.word	0x418c0000
 8009aac:	420c0000 	.word	0x420c0000
 8009ab0:	428c0000 	.word	0x428c0000

08009ab4 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3320      	adds	r3, #32
 8009ac6:	f107 020b 	add.w	r2, r7, #11
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 ff35 	bl	800a93c <lsm6dso16is_gy_data_rate_get>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009adc:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	2b1a      	cmp	r3, #26
 8009ae2:	d866      	bhi.n	8009bb2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8009ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8009ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aea:	bf00      	nop
 8009aec:	08009b59 	.word	0x08009b59
 8009af0:	08009b63 	.word	0x08009b63
 8009af4:	08009b6b 	.word	0x08009b6b
 8009af8:	08009b73 	.word	0x08009b73
 8009afc:	08009b7b 	.word	0x08009b7b
 8009b00:	08009b83 	.word	0x08009b83
 8009b04:	08009b8b 	.word	0x08009b8b
 8009b08:	08009b93 	.word	0x08009b93
 8009b0c:	08009b9b 	.word	0x08009b9b
 8009b10:	08009ba3 	.word	0x08009ba3
 8009b14:	08009bab 	.word	0x08009bab
 8009b18:	08009bb3 	.word	0x08009bb3
 8009b1c:	08009bb3 	.word	0x08009bb3
 8009b20:	08009bb3 	.word	0x08009bb3
 8009b24:	08009bb3 	.word	0x08009bb3
 8009b28:	08009bb3 	.word	0x08009bb3
 8009b2c:	08009bb3 	.word	0x08009bb3
 8009b30:	08009b63 	.word	0x08009b63
 8009b34:	08009b6b 	.word	0x08009b6b
 8009b38:	08009b73 	.word	0x08009b73
 8009b3c:	08009b7b 	.word	0x08009b7b
 8009b40:	08009b83 	.word	0x08009b83
 8009b44:	08009b8b 	.word	0x08009b8b
 8009b48:	08009b93 	.word	0x08009b93
 8009b4c:	08009b9b 	.word	0x08009b9b
 8009b50:	08009ba3 	.word	0x08009ba3
 8009b54:	08009bab 	.word	0x08009bab
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
      break;
 8009b60:	e02b      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	4a17      	ldr	r2, [pc, #92]	@ (8009bc4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8009b66:	601a      	str	r2, [r3, #0]
      break;
 8009b68:	e027      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	4a16      	ldr	r2, [pc, #88]	@ (8009bc8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8009b6e:	601a      	str	r2, [r3, #0]
      break;
 8009b70:	e023      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	4a15      	ldr	r2, [pc, #84]	@ (8009bcc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8009b76:	601a      	str	r2, [r3, #0]
      break;
 8009b78:	e01f      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	4a14      	ldr	r2, [pc, #80]	@ (8009bd0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8009b7e:	601a      	str	r2, [r3, #0]
      break;
 8009b80:	e01b      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	4a13      	ldr	r2, [pc, #76]	@ (8009bd4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8009b86:	601a      	str	r2, [r3, #0]
      break;
 8009b88:	e017      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	4a12      	ldr	r2, [pc, #72]	@ (8009bd8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8009b8e:	601a      	str	r2, [r3, #0]
      break;
 8009b90:	e013      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	4a11      	ldr	r2, [pc, #68]	@ (8009bdc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8009b96:	601a      	str	r2, [r3, #0]
      break;
 8009b98:	e00f      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	4a10      	ldr	r2, [pc, #64]	@ (8009be0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8009b9e:	601a      	str	r2, [r3, #0]
      break;
 8009ba0:	e00b      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8009be4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8009ba6:	601a      	str	r2, [r3, #0]
      break;
 8009ba8:	e007      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	4a0e      	ldr	r2, [pc, #56]	@ (8009be8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8009bae:	601a      	str	r2, [r3, #0]
      break;
 8009bb0:	e003      	b.n	8009bba <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009bb6:	60fb      	str	r3, [r7, #12]
      break;
 8009bb8:	bf00      	nop
  }

  return ret;
 8009bba:	68fb      	ldr	r3, [r7, #12]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	41480000 	.word	0x41480000
 8009bc8:	41d00000 	.word	0x41d00000
 8009bcc:	42500000 	.word	0x42500000
 8009bd0:	42d00000 	.word	0x42d00000
 8009bd4:	43500000 	.word	0x43500000
 8009bd8:	43d00000 	.word	0x43d00000
 8009bdc:	44504000 	.word	0x44504000
 8009be0:	44d06000 	.word	0x44d06000
 8009be4:	45505000 	.word	0x45505000
 8009be8:	45d05800 	.word	0x45d05800

08009bec <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d106      	bne.n	8009c10 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009c02:	ed97 0a00 	vldr	s0, [r7]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa70 	bl	800a0ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	e005      	b.n	8009c1c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009c10:	ed97 0a00 	vldr	s0, [r7]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 faf7 	bl	800a208 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8009c1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3320      	adds	r3, #32
 8009c3a:	f107 020b 	add.w	r2, r7, #11
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fddf 	bl	800a804 <lsm6dso16is_gy_full_scale_get>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009c4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c50:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d83c      	bhi.n	8009cd2 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8009c58:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009cad 	.word	0x08009cad
 8009c64:	08009cb5 	.word	0x08009cb5
 8009c68:	08009cbf 	.word	0x08009cbf
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009cd3 	.word	0x08009cd3
 8009c74:	08009cd3 	.word	0x08009cd3
 8009c78:	08009cd3 	.word	0x08009cd3
 8009c7c:	08009cd3 	.word	0x08009cd3
 8009c80:	08009cd3 	.word	0x08009cd3
 8009c84:	08009cd3 	.word	0x08009cd3
 8009c88:	08009cd3 	.word	0x08009cd3
 8009c8c:	08009cd3 	.word	0x08009cd3
 8009c90:	08009cd3 	.word	0x08009cd3
 8009c94:	08009cd3 	.word	0x08009cd3
 8009c98:	08009cd3 	.word	0x08009cd3
 8009c9c:	08009cd3 	.word	0x08009cd3
 8009ca0:	08009ca5 	.word	0x08009ca5
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	227d      	movs	r2, #125	@ 0x7d
 8009ca8:	601a      	str	r2, [r3, #0]
      break;
 8009caa:	e016      	b.n	8009cda <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	22fa      	movs	r2, #250	@ 0xfa
 8009cb0:	601a      	str	r2, [r3, #0]
      break;
 8009cb2:	e012      	b.n	8009cda <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009cba:	601a      	str	r2, [r3, #0]
      break;
 8009cbc:	e00d      	b.n	8009cda <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009cc4:	601a      	str	r2, [r3, #0]
      break;
 8009cc6:	e008      	b.n	8009cda <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009cce:	601a      	str	r2, [r3, #0]
      break;
 8009cd0:	e003      	b.n	8009cda <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8009cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cd6:	60fb      	str	r3, [r7, #12]
      break;
 8009cd8:	bf00      	nop
  }

  return ret;
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b7d      	cmp	r3, #125	@ 0x7d
 8009cf6:	dd12      	ble.n	8009d1e <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2bfa      	cmp	r3, #250	@ 0xfa
 8009cfc:	dd0d      	ble.n	8009d1a <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009d04:	dd07      	ble.n	8009d16 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d0c:	dc01      	bgt.n	8009d12 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e006      	b.n	8009d20 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8009d12:	2303      	movs	r3, #3
 8009d14:	e004      	b.n	8009d20 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e002      	b.n	8009d20 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e000      	b.n	8009d20 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8009d1e:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8009d20:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	3320      	adds	r3, #32
 8009d26:	7afa      	ldrb	r2, [r7, #11]
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fd3a 	bl	800a7a4 <lsm6dso16is_gy_full_scale_set>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3320      	adds	r3, #32
 8009d58:	f107 020c 	add.w	r2, r7, #12
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fef4 	bl	800ab4c <lsm6dso16is_angular_rate_raw_get>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8009d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d6e:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8009d70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8009d78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8009d80:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	809a      	strh	r2, [r3, #4]

  return ret;
 8009d88:	697b      	ldr	r3, [r7, #20]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b086      	sub	sp, #24
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3320      	adds	r3, #32
 8009daa:	f107 020c 	add.w	r2, r7, #12
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 fecb 	bl	800ab4c <lsm6dso16is_angular_rate_raw_get>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dc0:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff fe0d 	bl	80099e8 <LSM6DSO16IS_GYRO_GetSensitivity>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8009dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dd8:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8009dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009df2:	ee17 2a90 	vmov	r2, s15
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8009dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e12:	ee17 2a90 	vmov	r2, s15
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8009e1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e32:	ee17 2a90 	vmov	r2, s15
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	609a      	str	r2, [r3, #8]

  return ret;
 8009e3a:	697b      	ldr	r3, [r7, #20]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
 8009e50:	4613      	mov	r3, r2
 8009e52:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f103 0020 	add.w	r0, r3, #32
 8009e5e:	1cba      	adds	r2, r7, #2
 8009e60:	78f9      	ldrb	r1, [r7, #3]
 8009e62:	2301      	movs	r3, #1
 8009e64:	f000 faa0 	bl	800a3a8 <lsm6dso16is_write_reg>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e72:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009e74:	68fb      	ldr	r3, [r7, #12]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d006      	beq.n	8009ea2 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8009e94:	78fb      	ldrb	r3, [r7, #3]
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d101      	bne.n	8009e9e <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e002      	b.n	8009ea4 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e000      	b.n	8009ea4 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8009ea2:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8009ea4:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3320      	adds	r3, #32
 8009eaa:	7afa      	ldrb	r2, [r7, #11]
 8009eac:	4611      	mov	r1, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fa92 	bl	800a3d8 <lsm6dso16is_mem_bank_set>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8009eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ebe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8009edc:	edd7 7a00 	vldr	s15, [r7]
 8009ee0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8009ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eec:	d801      	bhi.n	8009ef2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e058      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009ef2:	edd7 7a00 	vldr	s15, [r7]
 8009ef6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8009efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f02:	d801      	bhi.n	8009f08 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e04d      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f08:	edd7 7a00 	vldr	s15, [r7]
 8009f0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009fcc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f18:	d801      	bhi.n	8009f1e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e042      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f1e:	edd7 7a00 	vldr	s15, [r7]
 8009f22:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009fd0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8009f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2e:	d801      	bhi.n	8009f34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8009f30:	2304      	movs	r3, #4
 8009f32:	e037      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f34:	edd7 7a00 	vldr	s15, [r7]
 8009f38:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009fd4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8009f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f44:	d801      	bhi.n	8009f4a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8009f46:	2305      	movs	r3, #5
 8009f48:	e02c      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f4a:	edd7 7a00 	vldr	s15, [r7]
 8009f4e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009fd8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8009f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	d801      	bhi.n	8009f60 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8009f5c:	2306      	movs	r3, #6
 8009f5e:	e021      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f60:	edd7 7a00 	vldr	s15, [r7]
 8009f64:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009fdc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8009f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f70:	d801      	bhi.n	8009f76 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8009f72:	2307      	movs	r3, #7
 8009f74:	e016      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f76:	edd7 7a00 	vldr	s15, [r7]
 8009f7a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009fe0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8009f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f86:	d801      	bhi.n	8009f8c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	e00b      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009f8c:	edd7 7a00 	vldr	s15, [r7]
 8009f90:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009fe4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 8009f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9c:	d801      	bhi.n	8009fa2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8009f9e:	2309      	movs	r3, #9
 8009fa0:	e000      	b.n	8009fa4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8009fa2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8009fa4:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3320      	adds	r3, #32
 8009faa:	7afa      	ldrb	r2, [r7, #11]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fad0 	bl	800a554 <lsm6dso16is_xl_data_rate_set>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8009fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009fbe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	42500000 	.word	0x42500000
 8009fd0:	42d00000 	.word	0x42d00000
 8009fd4:	43500000 	.word	0x43500000
 8009fd8:	43d00000 	.word	0x43d00000
 8009fdc:	44504000 	.word	0x44504000
 8009fe0:	44d06000 	.word	0x44d06000
 8009fe4:	45505000 	.word	0x45505000

08009fe8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8009ff4:	edd7 7a00 	vldr	s15, [r7]
 8009ff8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8009ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a004:	d801      	bhi.n	800a00a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 800a006:	2301      	movs	r3, #1
 800a008:	e058      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a00a:	edd7 7a00 	vldr	s15, [r7]
 800a00e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800a012:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01a:	d801      	bhi.n	800a020 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e04d      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a020:	edd7 7a00 	vldr	s15, [r7]
 800a024:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a0d0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800a028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a030:	d801      	bhi.n	800a036 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800a032:	2303      	movs	r3, #3
 800a034:	e042      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a036:	edd7 7a00 	vldr	s15, [r7]
 800a03a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800a0d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 800a03e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a046:	d801      	bhi.n	800a04c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 800a048:	2304      	movs	r3, #4
 800a04a:	e037      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a04c:	edd7 7a00 	vldr	s15, [r7]
 800a050:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a0d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800a054:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05c:	d801      	bhi.n	800a062 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800a05e:	2305      	movs	r3, #5
 800a060:	e02c      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a062:	edd7 7a00 	vldr	s15, [r7]
 800a066:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800a0dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800a06a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a072:	d801      	bhi.n	800a078 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 800a074:	2306      	movs	r3, #6
 800a076:	e021      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a078:	edd7 7a00 	vldr	s15, [r7]
 800a07c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a0e0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800a080:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a088:	d801      	bhi.n	800a08e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800a08a:	2307      	movs	r3, #7
 800a08c:	e016      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a08e:	edd7 7a00 	vldr	s15, [r7]
 800a092:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a0e4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800a096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09e:	d801      	bhi.n	800a0a4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	e00b      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a0a4:	edd7 7a00 	vldr	s15, [r7]
 800a0a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a0e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 800a0ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b4:	d801      	bhi.n	800a0ba <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800a0b6:	2309      	movs	r3, #9
 800a0b8:	e000      	b.n	800a0bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a0ba:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	42500000 	.word	0x42500000
 800a0d4:	42d00000 	.word	0x42d00000
 800a0d8:	43500000 	.word	0x43500000
 800a0dc:	43d00000 	.word	0x43d00000
 800a0e0:	44504000 	.word	0x44504000
 800a0e4:	44d06000 	.word	0x44d06000
 800a0e8:	45505000 	.word	0x45505000

0800a0ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 800a0fc:	edd7 7a00 	vldr	s15, [r7]
 800a100:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800a104:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	d801      	bhi.n	800a112 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 800a10e:	2301      	movs	r3, #1
 800a110:	e058      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a112:	edd7 7a00 	vldr	s15, [r7]
 800a116:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800a11a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a122:	d801      	bhi.n	800a128 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 800a124:	2302      	movs	r3, #2
 800a126:	e04d      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a128:	edd7 7a00 	vldr	s15, [r7]
 800a12c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a1ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800a130:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a138:	d801      	bhi.n	800a13e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800a13a:	2303      	movs	r3, #3
 800a13c:	e042      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a13e:	edd7 7a00 	vldr	s15, [r7]
 800a142:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800a1f0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800a146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14e:	d801      	bhi.n	800a154 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 800a150:	2304      	movs	r3, #4
 800a152:	e037      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a154:	edd7 7a00 	vldr	s15, [r7]
 800a158:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800a1f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800a15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	d801      	bhi.n	800a16a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 800a166:	2305      	movs	r3, #5
 800a168:	e02c      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a16a:	edd7 7a00 	vldr	s15, [r7]
 800a16e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a1f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800a172:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17a:	d801      	bhi.n	800a180 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 800a17c:	2306      	movs	r3, #6
 800a17e:	e021      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a180:	edd7 7a00 	vldr	s15, [r7]
 800a184:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800a1fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800a188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a190:	d801      	bhi.n	800a196 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 800a192:	2307      	movs	r3, #7
 800a194:	e016      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a196:	edd7 7a00 	vldr	s15, [r7]
 800a19a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a200 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800a19e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a6:	d801      	bhi.n	800a1ac <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	e00b      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a1ac:	edd7 7a00 	vldr	s15, [r7]
 800a1b0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a204 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800a1b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1bc:	d801      	bhi.n	800a1c2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 800a1be:	2309      	movs	r3, #9
 800a1c0:	e000      	b.n	800a1c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800a1c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 800a1c4:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3320      	adds	r3, #32
 800a1ca:	7afa      	ldrb	r2, [r7, #11]
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fb74 	bl	800a8bc <lsm6dso16is_gy_data_rate_set>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800a1da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	42500000 	.word	0x42500000
 800a1f0:	42d00000 	.word	0x42d00000
 800a1f4:	43500000 	.word	0x43500000
 800a1f8:	43d00000 	.word	0x43d00000
 800a1fc:	44504000 	.word	0x44504000
 800a200:	44d06000 	.word	0x44d06000
 800a204:	45505000 	.word	0x45505000

0800a208 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 800a214:	edd7 7a00 	vldr	s15, [r7]
 800a218:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800a21c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a224:	d801      	bhi.n	800a22a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800a226:	2301      	movs	r3, #1
 800a228:	e058      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a22a:	edd7 7a00 	vldr	s15, [r7]
 800a22e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800a232:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23a:	d801      	bhi.n	800a240 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e04d      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a240:	edd7 7a00 	vldr	s15, [r7]
 800a244:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a2f0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800a248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a250:	d801      	bhi.n	800a256 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800a252:	2303      	movs	r3, #3
 800a254:	e042      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a256:	edd7 7a00 	vldr	s15, [r7]
 800a25a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800a2f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800a25e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a266:	d801      	bhi.n	800a26c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800a268:	2304      	movs	r3, #4
 800a26a:	e037      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a26c:	edd7 7a00 	vldr	s15, [r7]
 800a270:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a2f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800a274:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a27c:	d801      	bhi.n	800a282 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800a27e:	2305      	movs	r3, #5
 800a280:	e02c      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a282:	edd7 7a00 	vldr	s15, [r7]
 800a286:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800a2fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800a28a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a292:	d801      	bhi.n	800a298 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800a294:	2306      	movs	r3, #6
 800a296:	e021      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a298:	edd7 7a00 	vldr	s15, [r7]
 800a29c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a300 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800a2a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a8:	d801      	bhi.n	800a2ae <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800a2aa:	2307      	movs	r3, #7
 800a2ac:	e016      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a2ae:	edd7 7a00 	vldr	s15, [r7]
 800a2b2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a304 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800a2b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2be:	d801      	bhi.n	800a2c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	e00b      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a2c4:	edd7 7a00 	vldr	s15, [r7]
 800a2c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a308 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800a2cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d4:	d801      	bhi.n	800a2da <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800a2d6:	2309      	movs	r3, #9
 800a2d8:	e000      	b.n	800a2dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a2da:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	42500000 	.word	0x42500000
 800a2f4:	42d00000 	.word	0x42d00000
 800a2f8:	43500000 	.word	0x43500000
 800a2fc:	43d00000 	.word	0x43d00000
 800a300:	44504000 	.word	0x44504000
 800a304:	44d06000 	.word	0x44d06000
 800a308:	45505000 	.word	0x45505000

0800a30c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	607a      	str	r2, [r7, #4]
 800a316:	461a      	mov	r2, r3
 800a318:	460b      	mov	r3, r1
 800a31a:	72fb      	strb	r3, [r7, #11]
 800a31c:	4613      	mov	r3, r2
 800a31e:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	695c      	ldr	r4, [r3, #20]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	7b1b      	ldrb	r3, [r3, #12]
 800a32c:	4618      	mov	r0, r3
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	b299      	uxth	r1, r3
 800a332:	893b      	ldrh	r3, [r7, #8]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	47a0      	blx	r4
 800a338:	4603      	mov	r3, r0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd90      	pop	{r4, r7, pc}

0800a342 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a342:	b590      	push	{r4, r7, lr}
 800a344:	b087      	sub	sp, #28
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	461a      	mov	r2, r3
 800a34e:	460b      	mov	r3, r1
 800a350:	72fb      	strb	r3, [r7, #11]
 800a352:	4613      	mov	r3, r2
 800a354:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	691c      	ldr	r4, [r3, #16]
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	7b1b      	ldrb	r3, [r3, #12]
 800a362:	4618      	mov	r0, r3
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	b299      	uxth	r1, r3
 800a368:	893b      	ldrh	r3, [r7, #8]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	47a0      	blx	r4
 800a36e:	4603      	mov	r3, r0
}
 800a370:	4618      	mov	r0, r3
 800a372:	371c      	adds	r7, #28
 800a374:	46bd      	mov	sp, r7
 800a376:	bd90      	pop	{r4, r7, pc}

0800a378 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	461a      	mov	r2, r3
 800a384:	460b      	mov	r3, r1
 800a386:	72fb      	strb	r3, [r7, #11]
 800a388:	4613      	mov	r3, r2
 800a38a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	685c      	ldr	r4, [r3, #4]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68d8      	ldr	r0, [r3, #12]
 800a394:	893b      	ldrh	r3, [r7, #8]
 800a396:	7af9      	ldrb	r1, [r7, #11]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	47a0      	blx	r4
 800a39c:	6178      	str	r0, [r7, #20]

  return ret;
 800a39e:	697b      	ldr	r3, [r7, #20]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd90      	pop	{r4, r7, pc}

0800a3a8 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	72fb      	strb	r3, [r7, #11]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681c      	ldr	r4, [r3, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68d8      	ldr	r0, [r3, #12]
 800a3c4:	893b      	ldrh	r3, [r7, #8]
 800a3c6:	7af9      	ldrb	r1, [r7, #11]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	47a0      	blx	r4
 800a3cc:	6178      	str	r0, [r7, #20]

  return ret;
 800a3ce:	697b      	ldr	r3, [r7, #20]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd90      	pop	{r4, r7, pc}

0800a3d8 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d101      	bne.n	800a3f2 <lsm6dso16is_mem_bank_set+0x1a>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	e000      	b.n	800a3f4 <lsm6dso16is_mem_bank_set+0x1c>
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	7a3b      	ldrb	r3, [r7, #8]
 800a3f6:	f362 1386 	bfi	r3, r2, #6, #1
 800a3fa:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d101      	bne.n	800a406 <lsm6dso16is_mem_bank_set+0x2e>
 800a402:	2201      	movs	r2, #1
 800a404:	e000      	b.n	800a408 <lsm6dso16is_mem_bank_set+0x30>
 800a406:	2200      	movs	r2, #0
 800a408:	7a3b      	ldrb	r3, [r7, #8]
 800a40a:	f362 13c7 	bfi	r3, r2, #7, #1
 800a40e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800a410:	f107 0208 	add.w	r2, r7, #8
 800a414:	2301      	movs	r3, #1
 800a416:	2101      	movs	r1, #1
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ffc5 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a41e:	60f8      	str	r0, [r7, #12]

  return ret;
 800a420:	68fb      	ldr	r3, [r7, #12]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 800a434:	2301      	movs	r3, #1
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	210f      	movs	r1, #15
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7ff ff9c 	bl	800a378 <lsm6dso16is_read_reg>
 800a440:	60f8      	str	r0, [r7, #12]

  return ret;
 800a442:	68fb      	ldr	r3, [r7, #12]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800a458:	f107 0208 	add.w	r2, r7, #8
 800a45c:	2301      	movs	r3, #1
 800a45e:	2115      	movs	r1, #21
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff ff89 	bl	800a378 <lsm6dso16is_read_reg>
 800a466:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10f      	bne.n	800a48e <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	b2da      	uxtb	r2, r3
 800a476:	7a3b      	ldrb	r3, [r7, #8]
 800a478:	f362 1304 	bfi	r3, r2, #4, #1
 800a47c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800a47e:	f107 0208 	add.w	r2, r7, #8
 800a482:	2301      	movs	r3, #1
 800a484:	2115      	movs	r1, #21
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ff8e 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a48c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a48e:	68fb      	ldr	r3, [r7, #12]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a4a4:	f107 0208 	add.w	r2, r7, #8
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	2110      	movs	r1, #16
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff ff63 	bl	800a378 <lsm6dso16is_read_reg>
 800a4b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10f      	bne.n	800a4da <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 800a4ba:	78fb      	ldrb	r3, [r7, #3]
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	7a3b      	ldrb	r3, [r7, #8]
 800a4c4:	f362 0383 	bfi	r3, r2, #2, #2
 800a4c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a4ca:	f107 0208 	add.w	r2, r7, #8
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	2110      	movs	r1, #16
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff ff68 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a4d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a4da:	68fb      	ldr	r3, [r7, #12]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a4ee:	f107 0208 	add.w	r2, r7, #8
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	2110      	movs	r1, #16
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff ff3e 	bl	800a378 <lsm6dso16is_read_reg>
 800a4fc:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 800a4fe:	7a3b      	ldrb	r3, [r7, #8]
 800a500:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b03      	cmp	r3, #3
 800a508:	d81a      	bhi.n	800a540 <lsm6dso16is_xl_full_scale_get+0x5c>
 800a50a:	a201      	add	r2, pc, #4	@ (adr r2, 800a510 <lsm6dso16is_xl_full_scale_get+0x2c>)
 800a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a510:	0800a521 	.word	0x0800a521
 800a514:	0800a539 	.word	0x0800a539
 800a518:	0800a529 	.word	0x0800a529
 800a51c:	0800a531 	.word	0x0800a531
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
      break;
 800a526:	e00f      	b.n	800a548 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2202      	movs	r2, #2
 800a52c:	701a      	strb	r2, [r3, #0]
      break;
 800a52e:	e00b      	b.n	800a548 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2203      	movs	r2, #3
 800a534:	701a      	strb	r2, [r3, #0]
      break;
 800a536:	e007      	b.n	800a548 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2201      	movs	r2, #1
 800a53c:	701a      	strb	r2, [r3, #0]
      break;
 800a53e:	e003      	b.n	800a548 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
      break;
 800a546:	bf00      	nop
  }
  return ret;
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop

0800a554 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a560:	f107 0208 	add.w	r2, r7, #8
 800a564:	2301      	movs	r3, #1
 800a566:	2110      	movs	r1, #16
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff ff05 	bl	800a378 <lsm6dso16is_read_reg>
 800a56e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d128      	bne.n	800a5c8 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	f003 0310 	and.w	r3, r3, #16
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800a580:	2101      	movs	r1, #1
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff ff62 	bl	800a44c <lsm6dso16is_xl_hm_mode_set>
 800a588:	4602      	mov	r2, r0
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e007      	b.n	800a5a2 <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800a592:	2100      	movs	r1, #0
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff ff59 	bl	800a44c <lsm6dso16is_xl_hm_mode_set>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	f003 030f 	and.w	r3, r3, #15
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	7a3b      	ldrb	r3, [r7, #8]
 800a5ac:	f362 1307 	bfi	r3, r2, #4, #4
 800a5b0:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a5b2:	f107 0208 	add.w	r2, r7, #8
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	2110      	movs	r1, #16
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fef4 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a5de:	f107 0210 	add.w	r2, r7, #16
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	2110      	movs	r1, #16
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fec6 	bl	800a378 <lsm6dso16is_read_reg>
 800a5ec:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800a5ee:	f107 020c 	add.w	r2, r7, #12
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	2115      	movs	r1, #21
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff febe 	bl	800a378 <lsm6dso16is_read_reg>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 800a604:	7b3b      	ldrb	r3, [r7, #12]
 800a606:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	011b      	lsls	r3, r3, #4
 800a60e:	7c3a      	ldrb	r2, [r7, #16]
 800a610:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	4313      	orrs	r3, r2
 800a618:	2b1b      	cmp	r3, #27
 800a61a:	f200 8093 	bhi.w	800a744 <lsm6dso16is_xl_data_rate_get+0x170>
 800a61e:	a201      	add	r2, pc, #4	@ (adr r2, 800a624 <lsm6dso16is_xl_data_rate_get+0x50>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a695 	.word	0x0800a695
 800a628:	0800a69d 	.word	0x0800a69d
 800a62c:	0800a6a5 	.word	0x0800a6a5
 800a630:	0800a6ad 	.word	0x0800a6ad
 800a634:	0800a6b5 	.word	0x0800a6b5
 800a638:	0800a6bd 	.word	0x0800a6bd
 800a63c:	0800a6c5 	.word	0x0800a6c5
 800a640:	0800a6cd 	.word	0x0800a6cd
 800a644:	0800a6d5 	.word	0x0800a6d5
 800a648:	0800a6dd 	.word	0x0800a6dd
 800a64c:	0800a6e5 	.word	0x0800a6e5
 800a650:	0800a745 	.word	0x0800a745
 800a654:	0800a745 	.word	0x0800a745
 800a658:	0800a745 	.word	0x0800a745
 800a65c:	0800a745 	.word	0x0800a745
 800a660:	0800a745 	.word	0x0800a745
 800a664:	0800a745 	.word	0x0800a745
 800a668:	0800a6ed 	.word	0x0800a6ed
 800a66c:	0800a6f5 	.word	0x0800a6f5
 800a670:	0800a6fd 	.word	0x0800a6fd
 800a674:	0800a705 	.word	0x0800a705
 800a678:	0800a70d 	.word	0x0800a70d
 800a67c:	0800a715 	.word	0x0800a715
 800a680:	0800a71d 	.word	0x0800a71d
 800a684:	0800a725 	.word	0x0800a725
 800a688:	0800a72d 	.word	0x0800a72d
 800a68c:	0800a735 	.word	0x0800a735
 800a690:	0800a73d 	.word	0x0800a73d
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
      break;
 800a69a:	e057      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	701a      	strb	r2, [r3, #0]
      break;
 800a6a2:	e053      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	701a      	strb	r2, [r3, #0]
      break;
 800a6aa:	e04f      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	701a      	strb	r2, [r3, #0]
      break;
 800a6b2:	e04b      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ba:	e047      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	2205      	movs	r2, #5
 800a6c0:	701a      	strb	r2, [r3, #0]
      break;
 800a6c2:	e043      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2206      	movs	r2, #6
 800a6c8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ca:	e03f      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2207      	movs	r2, #7
 800a6d0:	701a      	strb	r2, [r3, #0]
      break;
 800a6d2:	e03b      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2208      	movs	r2, #8
 800a6d8:	701a      	strb	r2, [r3, #0]
      break;
 800a6da:	e037      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2209      	movs	r2, #9
 800a6e0:	701a      	strb	r2, [r3, #0]
      break;
 800a6e2:	e033      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ea:	e02f      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2211      	movs	r2, #17
 800a6f0:	701a      	strb	r2, [r3, #0]
      break;
 800a6f2:	e02b      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2212      	movs	r2, #18
 800a6f8:	701a      	strb	r2, [r3, #0]
      break;
 800a6fa:	e027      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2213      	movs	r2, #19
 800a700:	701a      	strb	r2, [r3, #0]
      break;
 800a702:	e023      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2214      	movs	r2, #20
 800a708:	701a      	strb	r2, [r3, #0]
      break;
 800a70a:	e01f      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2215      	movs	r2, #21
 800a710:	701a      	strb	r2, [r3, #0]
      break;
 800a712:	e01b      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	2216      	movs	r2, #22
 800a718:	701a      	strb	r2, [r3, #0]
      break;
 800a71a:	e017      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2217      	movs	r2, #23
 800a720:	701a      	strb	r2, [r3, #0]
      break;
 800a722:	e013      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	2218      	movs	r2, #24
 800a728:	701a      	strb	r2, [r3, #0]
      break;
 800a72a:	e00f      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2219      	movs	r2, #25
 800a730:	701a      	strb	r2, [r3, #0]
      break;
 800a732:	e00b      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	221a      	movs	r2, #26
 800a738:	701a      	strb	r2, [r3, #0]
      break;
 800a73a:	e007      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	221b      	movs	r2, #27
 800a740:	701a      	strb	r2, [r3, #0]
      break;
 800a742:	e003      	b.n	800a74c <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
      break;
 800a74a:	bf00      	nop
  }

  return ret;
 800a74c:	697b      	ldr	r3, [r7, #20]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop

0800a758 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800a764:	f107 0208 	add.w	r2, r7, #8
 800a768:	2301      	movs	r3, #1
 800a76a:	2116      	movs	r1, #22
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff fe03 	bl	800a378 <lsm6dso16is_read_reg>
 800a772:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10f      	bne.n	800a79a <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	b2da      	uxtb	r2, r3
 800a782:	7a3b      	ldrb	r3, [r7, #8]
 800a784:	f362 13c7 	bfi	r3, r2, #7, #1
 800a788:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800a78a:	f107 0208 	add.w	r2, r7, #8
 800a78e:	2301      	movs	r3, #1
 800a790:	2116      	movs	r1, #22
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fe08 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a798:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a79a:	68fb      	ldr	r3, [r7, #12]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a7b0:	f107 0208 	add.w	r2, r7, #8
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	2111      	movs	r1, #17
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fddd 	bl	800a378 <lsm6dso16is_read_reg>
 800a7be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d119      	bne.n	800a7fa <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	7a3b      	ldrb	r3, [r7, #8]
 800a7d0:	f362 0383 	bfi	r3, r2, #2, #2
 800a7d4:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 800a7d6:	78fb      	ldrb	r3, [r7, #3]
 800a7d8:	091b      	lsrs	r3, r3, #4
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	7a3b      	ldrb	r3, [r7, #8]
 800a7e4:	f362 0341 	bfi	r3, r2, #1, #1
 800a7e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a7ea:	f107 0208 	add.w	r2, r7, #8
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	2111      	movs	r1, #17
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fdd8 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a7f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a80e:	f107 0208 	add.w	r2, r7, #8
 800a812:	2301      	movs	r3, #1
 800a814:	2111      	movs	r1, #17
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff fdae 	bl	800a378 <lsm6dso16is_read_reg>
 800a81c:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 800a81e:	7a3b      	ldrb	r3, [r7, #8]
 800a820:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a824:	b2db      	uxtb	r3, r3
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	7a3a      	ldrb	r2, [r7, #8]
 800a82a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	4313      	orrs	r3, r2
 800a832:	2b10      	cmp	r3, #16
 800a834:	d838      	bhi.n	800a8a8 <lsm6dso16is_gy_full_scale_get+0xa4>
 800a836:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <lsm6dso16is_gy_full_scale_get+0x38>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a889 	.word	0x0800a889
 800a840:	0800a891 	.word	0x0800a891
 800a844:	0800a899 	.word	0x0800a899
 800a848:	0800a8a1 	.word	0x0800a8a1
 800a84c:	0800a8a9 	.word	0x0800a8a9
 800a850:	0800a8a9 	.word	0x0800a8a9
 800a854:	0800a8a9 	.word	0x0800a8a9
 800a858:	0800a8a9 	.word	0x0800a8a9
 800a85c:	0800a8a9 	.word	0x0800a8a9
 800a860:	0800a8a9 	.word	0x0800a8a9
 800a864:	0800a8a9 	.word	0x0800a8a9
 800a868:	0800a8a9 	.word	0x0800a8a9
 800a86c:	0800a8a9 	.word	0x0800a8a9
 800a870:	0800a8a9 	.word	0x0800a8a9
 800a874:	0800a8a9 	.word	0x0800a8a9
 800a878:	0800a8a9 	.word	0x0800a8a9
 800a87c:	0800a881 	.word	0x0800a881
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2210      	movs	r2, #16
 800a884:	701a      	strb	r2, [r3, #0]
      break;
 800a886:	e013      	b.n	800a8b0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]
      break;
 800a88e:	e00f      	b.n	800a8b0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2201      	movs	r2, #1
 800a894:	701a      	strb	r2, [r3, #0]
      break;
 800a896:	e00b      	b.n	800a8b0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2202      	movs	r2, #2
 800a89c:	701a      	strb	r2, [r3, #0]
      break;
 800a89e:	e007      	b.n	800a8b0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	701a      	strb	r2, [r3, #0]
      break;
 800a8a6:	e003      	b.n	800a8b0 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	701a      	strb	r2, [r3, #0]
      break;
 800a8ae:	bf00      	nop
  }
  return ret;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop

0800a8bc <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a8c8:	f107 0208 	add.w	r2, r7, #8
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	2111      	movs	r1, #17
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fd51 	bl	800a378 <lsm6dso16is_read_reg>
 800a8d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d128      	bne.n	800a930 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800a8de:	78fb      	ldrb	r3, [r7, #3]
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ff34 	bl	800a758 <lsm6dso16is_gy_hm_mode_set>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e007      	b.n	800a90a <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7ff ff2b 	bl	800a758 <lsm6dso16is_gy_hm_mode_set>
 800a902:	4602      	mov	r2, r0
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	4413      	add	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	b2da      	uxtb	r2, r3
 800a912:	7a3b      	ldrb	r3, [r7, #8]
 800a914:	f362 1307 	bfi	r3, r2, #4, #4
 800a918:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a91a:	f107 0208 	add.w	r2, r7, #8
 800a91e:	2301      	movs	r3, #1
 800a920:	2111      	movs	r1, #17
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fd40 	bl	800a3a8 <lsm6dso16is_write_reg>
 800a928:	4602      	mov	r2, r0
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4413      	add	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a930:	68fb      	ldr	r3, [r7, #12]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
	...

0800a93c <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a946:	f107 0210 	add.w	r2, r7, #16
 800a94a:	2301      	movs	r3, #1
 800a94c:	2111      	movs	r1, #17
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fd12 	bl	800a378 <lsm6dso16is_read_reg>
 800a954:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800a956:	f107 020c 	add.w	r2, r7, #12
 800a95a:	2301      	movs	r3, #1
 800a95c:	2116      	movs	r1, #22
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff fd0a 	bl	800a378 <lsm6dso16is_read_reg>
 800a964:	4602      	mov	r2, r0
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	4413      	add	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 800a96c:	7b3b      	ldrb	r3, [r7, #12]
 800a96e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a972:	b2db      	uxtb	r3, r3
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	7c3a      	ldrb	r2, [r7, #16]
 800a978:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	4313      	orrs	r3, r2
 800a980:	2b1a      	cmp	r3, #26
 800a982:	f200 808d 	bhi.w	800aaa0 <lsm6dso16is_gy_data_rate_get+0x164>
 800a986:	a201      	add	r2, pc, #4	@ (adr r2, 800a98c <lsm6dso16is_gy_data_rate_get+0x50>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9f9 	.word	0x0800a9f9
 800a990:	0800aa01 	.word	0x0800aa01
 800a994:	0800aa09 	.word	0x0800aa09
 800a998:	0800aa11 	.word	0x0800aa11
 800a99c:	0800aa19 	.word	0x0800aa19
 800a9a0:	0800aa21 	.word	0x0800aa21
 800a9a4:	0800aa29 	.word	0x0800aa29
 800a9a8:	0800aa31 	.word	0x0800aa31
 800a9ac:	0800aa39 	.word	0x0800aa39
 800a9b0:	0800aa41 	.word	0x0800aa41
 800a9b4:	0800aa49 	.word	0x0800aa49
 800a9b8:	0800aaa1 	.word	0x0800aaa1
 800a9bc:	0800aaa1 	.word	0x0800aaa1
 800a9c0:	0800aaa1 	.word	0x0800aaa1
 800a9c4:	0800aaa1 	.word	0x0800aaa1
 800a9c8:	0800aaa1 	.word	0x0800aaa1
 800a9cc:	0800aaa1 	.word	0x0800aaa1
 800a9d0:	0800aa51 	.word	0x0800aa51
 800a9d4:	0800aa59 	.word	0x0800aa59
 800a9d8:	0800aa61 	.word	0x0800aa61
 800a9dc:	0800aa69 	.word	0x0800aa69
 800a9e0:	0800aa71 	.word	0x0800aa71
 800a9e4:	0800aa79 	.word	0x0800aa79
 800a9e8:	0800aa81 	.word	0x0800aa81
 800a9ec:	0800aa89 	.word	0x0800aa89
 800a9f0:	0800aa91 	.word	0x0800aa91
 800a9f4:	0800aa99 	.word	0x0800aa99
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	701a      	strb	r2, [r3, #0]
      break;
 800a9fe:	e053      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2201      	movs	r2, #1
 800aa04:	701a      	strb	r2, [r3, #0]
      break;
 800aa06:	e04f      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	701a      	strb	r2, [r3, #0]
      break;
 800aa0e:	e04b      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2203      	movs	r2, #3
 800aa14:	701a      	strb	r2, [r3, #0]
      break;
 800aa16:	e047      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2204      	movs	r2, #4
 800aa1c:	701a      	strb	r2, [r3, #0]
      break;
 800aa1e:	e043      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2205      	movs	r2, #5
 800aa24:	701a      	strb	r2, [r3, #0]
      break;
 800aa26:	e03f      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	701a      	strb	r2, [r3, #0]
      break;
 800aa2e:	e03b      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2207      	movs	r2, #7
 800aa34:	701a      	strb	r2, [r3, #0]
      break;
 800aa36:	e037      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	701a      	strb	r2, [r3, #0]
      break;
 800aa3e:	e033      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2209      	movs	r2, #9
 800aa44:	701a      	strb	r2, [r3, #0]
      break;
 800aa46:	e02f      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	220a      	movs	r2, #10
 800aa4c:	701a      	strb	r2, [r3, #0]
      break;
 800aa4e:	e02b      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2211      	movs	r2, #17
 800aa54:	701a      	strb	r2, [r3, #0]
      break;
 800aa56:	e027      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2212      	movs	r2, #18
 800aa5c:	701a      	strb	r2, [r3, #0]
      break;
 800aa5e:	e023      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2213      	movs	r2, #19
 800aa64:	701a      	strb	r2, [r3, #0]
      break;
 800aa66:	e01f      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2214      	movs	r2, #20
 800aa6c:	701a      	strb	r2, [r3, #0]
      break;
 800aa6e:	e01b      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2215      	movs	r2, #21
 800aa74:	701a      	strb	r2, [r3, #0]
      break;
 800aa76:	e017      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2216      	movs	r2, #22
 800aa7c:	701a      	strb	r2, [r3, #0]
      break;
 800aa7e:	e013      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2217      	movs	r2, #23
 800aa84:	701a      	strb	r2, [r3, #0]
      break;
 800aa86:	e00f      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2218      	movs	r2, #24
 800aa8c:	701a      	strb	r2, [r3, #0]
      break;
 800aa8e:	e00b      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2219      	movs	r2, #25
 800aa94:	701a      	strb	r2, [r3, #0]
      break;
 800aa96:	e007      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	221a      	movs	r2, #26
 800aa9c:	701a      	strb	r2, [r3, #0]
      break;
 800aa9e:	e003      	b.n	800aaa8 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	701a      	strb	r2, [r3, #0]
      break;
 800aaa6:	bf00      	nop
  }

  return ret;
 800aaa8:	697b      	ldr	r3, [r7, #20]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop

0800aab4 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800aac0:	f107 0208 	add.w	r2, r7, #8
 800aac4:	2301      	movs	r3, #1
 800aac6:	2112      	movs	r1, #18
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff fc55 	bl	800a378 <lsm6dso16is_read_reg>
 800aace:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10f      	bne.n	800aaf6 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800aad6:	78fb      	ldrb	r3, [r7, #3]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	7a3b      	ldrb	r3, [r7, #8]
 800aae0:	f362 0382 	bfi	r3, r2, #2, #1
 800aae4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800aae6:	f107 0208 	add.w	r2, r7, #8
 800aaea:	2301      	movs	r3, #1
 800aaec:	2112      	movs	r1, #18
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fc5a 	bl	800a3a8 <lsm6dso16is_write_reg>
 800aaf4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ab0c:	f107 0208 	add.w	r2, r7, #8
 800ab10:	2301      	movs	r3, #1
 800ab12:	2112      	movs	r1, #18
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff fc2f 	bl	800a378 <lsm6dso16is_read_reg>
 800ab1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10f      	bne.n	800ab42 <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800ab22:	78fb      	ldrb	r3, [r7, #3]
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	7a3b      	ldrb	r3, [r7, #8]
 800ab2c:	f362 1386 	bfi	r3, r2, #6, #1
 800ab30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ab32:	f107 0208 	add.w	r2, r7, #8
 800ab36:	2301      	movs	r3, #1
 800ab38:	2112      	movs	r1, #18
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff fc34 	bl	800a3a8 <lsm6dso16is_write_reg>
 800ab40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ab42:	68fb      	ldr	r3, [r7, #12]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 800ab56:	f107 020c 	add.w	r2, r7, #12
 800ab5a:	2306      	movs	r3, #6
 800ab5c:	2122      	movs	r1, #34	@ 0x22
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fc0a 	bl	800a378 <lsm6dso16is_read_reg>
 800ab64:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800ab66:	7b7b      	ldrb	r3, [r7, #13]
 800ab68:	b21a      	sxth	r2, r3
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	7b3a      	ldrb	r2, [r7, #12]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	b21a      	sxth	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800ab86:	7bfa      	ldrb	r2, [r7, #15]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	b212      	sxth	r2, r2
 800ab8e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	3302      	adds	r3, #2
 800ab94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	021b      	lsls	r3, r3, #8
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	7bba      	ldrb	r2, [r7, #14]
 800aba0:	4413      	add	r3, r2
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	3302      	adds	r3, #2
 800aba8:	b212      	sxth	r2, r2
 800abaa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800abac:	7c7a      	ldrb	r2, [r7, #17]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	3304      	adds	r3, #4
 800abb2:	b212      	sxth	r2, r2
 800abb4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	3304      	adds	r3, #4
 800abba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	7c3a      	ldrb	r2, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	b29a      	uxth	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	3304      	adds	r3, #4
 800abce:	b212      	sxth	r2, r2
 800abd0:	801a      	strh	r2, [r3, #0]

  return ret;
 800abd2:	697b      	ldr	r3, [r7, #20]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 800abe6:	f107 020c 	add.w	r2, r7, #12
 800abea:	2306      	movs	r3, #6
 800abec:	2128      	movs	r1, #40	@ 0x28
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff fbc2 	bl	800a378 <lsm6dso16is_read_reg>
 800abf4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800abf6:	7b7b      	ldrb	r3, [r7, #13]
 800abf8:	b21a      	sxth	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	021b      	lsls	r3, r3, #8
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	7b3a      	ldrb	r2, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	b21a      	sxth	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800ac16:	7bfa      	ldrb	r2, [r7, #15]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	b212      	sxth	r2, r2
 800ac1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	3302      	adds	r3, #2
 800ac24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	7bba      	ldrb	r2, [r7, #14]
 800ac30:	4413      	add	r3, r2
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	3302      	adds	r3, #2
 800ac38:	b212      	sxth	r2, r2
 800ac3a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ac3c:	7c7a      	ldrb	r2, [r7, #17]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	3304      	adds	r3, #4
 800ac42:	b212      	sxth	r2, r2
 800ac44:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	3304      	adds	r3, #4
 800ac4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	021b      	lsls	r3, r3, #8
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	7c3a      	ldrb	r2, [r7, #16]
 800ac56:	4413      	add	r3, r2
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	b212      	sxth	r2, r2
 800ac60:	801a      	strh	r2, [r3, #0]

  return ret;
 800ac62:	697b      	ldr	r3, [r7, #20]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d103      	bne.n	800ac88 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	e05d      	b.n	800ad44 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	7b1a      	ldrb	r2, [r3, #12]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	695a      	ldr	r2, [r3, #20]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	699a      	ldr	r2, [r3, #24]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a23      	ldr	r2, [pc, #140]	@ (800ad50 <LSM6DSV16X_RegisterBusIO+0xe4>)
 800acc4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a22      	ldr	r2, [pc, #136]	@ (800ad54 <LSM6DSV16X_RegisterBusIO+0xe8>)
 800acca:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	69da      	ldr	r2, [r3, #28]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	e02c      	b.n	800ad44 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4798      	blx	r3
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	e022      	b.n	800ad44 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d11e      	bne.n	800ad44 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d119      	bne.n	800ad44 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 800ad10:	2304      	movs	r3, #4
 800ad12:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	461a      	mov	r2, r3
 800ad18:	2112      	movs	r1, #18
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fd95 	bl	800b84a <LSM6DSV16X_Write_Reg>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad2a:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	2103      	movs	r1, #3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fd89 	bl	800b84a <LSM6DSV16X_Write_Reg>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad42:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800ad44:	68fb      	ldr	r3, [r7, #12]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	0800bd3d 	.word	0x0800bd3d
 800ad54:	0800bd73 	.word	0x0800bd73

0800ad58 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	3320      	adds	r3, #32
 800ad64:	2101      	movs	r1, #1
 800ad66:	4618      	mov	r0, r3
 800ad68:	f001 fb20 	bl	800c3ac <lsm6dsv16x_auto_increment_set>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d002      	beq.n	800ad78 <LSM6DSV16X_Init+0x20>
  {
    return LSM6DSV16X_ERROR;
 800ad72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad76:	e064      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3320      	adds	r3, #32
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 fb3a 	bl	800c3f8 <lsm6dsv16x_block_data_update_set>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <LSM6DSV16X_Init+0x38>
  {
    return LSM6DSV16X_ERROR;
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad8e:	e058      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3320      	adds	r3, #32
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f001 fcd0 	bl	800c73c <lsm6dsv16x_fifo_mode_set>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <LSM6DSV16X_Init+0x50>
  {
    return LSM6DSV16X_ERROR;
 800ada2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ada6:	e04c      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2206      	movs	r2, #6
 800adac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3320      	adds	r3, #32
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 f837 	bl	800be2a <lsm6dsv16x_xl_data_rate_set>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <LSM6DSV16X_Init+0x70>
  {
    return LSM6DSV16X_ERROR;
 800adc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adc6:	e03c      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3320      	adds	r3, #32
 800adcc:	2100      	movs	r1, #0
 800adce:	4618      	mov	r0, r3
 800add0:	f001 fbb6 	bl	800c540 <lsm6dsv16x_xl_full_scale_set>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <LSM6DSV16X_Init+0x88>
  {
    return LSM6DSV16X_ERROR;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adde:	e030      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2206      	movs	r2, #6
 800ade4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3320      	adds	r3, #32
 800adec:	2100      	movs	r1, #0
 800adee:	4618      	mov	r0, r3
 800adf0:	f001 f97c 	bl	800c0ec <lsm6dsv16x_gy_data_rate_set>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <LSM6DSV16X_Init+0xa8>
  {
    return LSM6DSV16X_ERROR;
 800adfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adfe:	e020      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3320      	adds	r3, #32
 800ae04:	2104      	movs	r1, #4
 800ae06:	4618      	mov	r0, r3
 800ae08:	f001 fb1c 	bl	800c444 <lsm6dsv16x_gy_full_scale_set>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <LSM6DSV16X_Init+0xc0>
  {
    return LSM6DSV16X_ERROR;
 800ae12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae16:	e014      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 800ae18:	7b3b      	ldrb	r3, [r7, #12]
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3320      	adds	r3, #32
 800ae24:	7b39      	ldrb	r1, [r7, #12]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f001 fcae 	bl	800c788 <lsm6dsv16x_ah_qvar_mode_set>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <LSM6DSV16X_Init+0xe0>
  {
    return LSM6DSV16X_ERROR;
 800ae32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae36:	e004      	b.n	800ae42 <LSM6DSV16X_Init+0xea>
  }

  pObj->is_initialized = 1;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f898 	bl	800af88 <LSM6DSV16X_ACC_Disable>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 800ae5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae62:	e025      	b.n	800aeb0 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fab2 	bl	800b3ce <LSM6DSV16X_GYRO_Disable>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800ae70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae74:	e01c      	b.n	800aeb0 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 800ae86:	7b3b      	ldrb	r3, [r7, #12]
 800ae88:	f36f 0300 	bfc	r3, #0, #1
 800ae8c:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3320      	adds	r3, #32
 800ae92:	7b39      	ldrb	r1, [r7, #12]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 fc77 	bl	800c788 <lsm6dsv16x_ah_qvar_mode_set>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aea4:	e004      	b.n	800aeb0 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3320      	adds	r3, #32
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 ff9d 	bl	800be08 <lsm6dsv16x_device_id_get>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aed8:	e000      	b.n	800aedc <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2201      	movs	r2, #1
 800aef2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2201      	movs	r2, #1
 800aef8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2200      	movs	r2, #0
 800aefe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2201      	movs	r2, #1
 800af04:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800af0c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2210      	movs	r2, #16
 800af12:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	4a07      	ldr	r2, [pc, #28]	@ (800af3c <LSM6DSV16X_GetCapabilities+0x58>)
 800af1e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	4a06      	ldr	r2, [pc, #24]	@ (800af3c <LSM6DSV16X_GetCapabilities+0x58>)
 800af24:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	f04f 0200 	mov.w	r2, #0
 800af2c:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	45f00000 	.word	0x45f00000

0800af40 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d101      	bne.n	800af56 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	e014      	b.n	800af80 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f103 0220 	add.w	r2, r3, #32
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800af62:	4619      	mov	r1, r3
 800af64:	4610      	mov	r0, r2
 800af66:	f000 ff60 	bl	800be2a <lsm6dsv16x_xl_data_rate_set>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800af70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af74:	e004      	b.n	800af80 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2201      	movs	r2, #1
 800af7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e01f      	b.n	800afde <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f103 0220 	add.w	r2, r3, #32
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3333      	adds	r3, #51	@ 0x33
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f000 ff8e 	bl	800becc <lsm6dsv16x_xl_data_rate_get>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d002      	beq.n	800afbc <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afba:	e010      	b.n	800afde <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3320      	adds	r3, #32
 800afc0:	2100      	movs	r1, #0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 ff31 	bl	800be2a <lsm6dsv16x_xl_data_rate_set>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800afce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afd2:	e004      	b.n	800afde <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3708      	adds	r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3320      	adds	r3, #32
 800affa:	f107 020b 	add.w	r2, r7, #11
 800affe:	4611      	mov	r1, r2
 800b000:	4618      	mov	r0, r3
 800b002:	f001 fac3 	bl	800c58c <lsm6dsv16x_xl_full_scale_get>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b00c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b010:	e023      	b.n	800b05a <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	2b03      	cmp	r3, #3
 800b016:	d81b      	bhi.n	800b050 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 800b018:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 800b01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01e:	bf00      	nop
 800b020:	0800b031 	.word	0x0800b031
 800b024:	0800b039 	.word	0x0800b039
 800b028:	0800b041 	.word	0x0800b041
 800b02c:	0800b049 	.word	0x0800b049
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	4a0c      	ldr	r2, [pc, #48]	@ (800b064 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 800b034:	601a      	str	r2, [r3, #0]
      break;
 800b036:	e00f      	b.n	800b058 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	4a0b      	ldr	r2, [pc, #44]	@ (800b068 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 800b03c:	601a      	str	r2, [r3, #0]
      break;
 800b03e:	e00b      	b.n	800b058 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	4a0a      	ldr	r2, [pc, #40]	@ (800b06c <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 800b044:	601a      	str	r2, [r3, #0]
      break;
 800b046:	e007      	b.n	800b058 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	4a09      	ldr	r2, [pc, #36]	@ (800b070 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 800b04c:	601a      	str	r2, [r3, #0]
      break;
 800b04e:	e003      	b.n	800b058 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800b050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b054:	60fb      	str	r3, [r7, #12]
      break;
 800b056:	bf00      	nop
  }

  return ret;
 800b058:	68fb      	ldr	r3, [r7, #12]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	3d79db23 	.word	0x3d79db23
 800b068:	3df9db23 	.word	0x3df9db23
 800b06c:	3e79db23 	.word	0x3e79db23
 800b070:	3ef9db23 	.word	0x3ef9db23

0800b074 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3320      	adds	r3, #32
 800b086:	f107 020b 	add.w	r2, r7, #11
 800b08a:	4611      	mov	r1, r2
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 ff1d 	bl	800becc <lsm6dsv16x_xl_data_rate_get>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b09c:	e05a      	b.n	800b154 <LSM6DSV16X_ACC_GetOutputDataRate+0xe0>
  }

  switch (odr_low_level)
 800b09e:	7afb      	ldrb	r3, [r7, #11]
 800b0a0:	2b0c      	cmp	r3, #12
 800b0a2:	d852      	bhi.n	800b14a <LSM6DSV16X_ACC_GetOutputDataRate+0xd6>
 800b0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 800b0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0aa:	bf00      	nop
 800b0ac:	0800b0e1 	.word	0x0800b0e1
 800b0b0:	0800b0eb 	.word	0x0800b0eb
 800b0b4:	0800b0f3 	.word	0x0800b0f3
 800b0b8:	0800b0fb 	.word	0x0800b0fb
 800b0bc:	0800b103 	.word	0x0800b103
 800b0c0:	0800b10b 	.word	0x0800b10b
 800b0c4:	0800b113 	.word	0x0800b113
 800b0c8:	0800b11b 	.word	0x0800b11b
 800b0cc:	0800b123 	.word	0x0800b123
 800b0d0:	0800b12b 	.word	0x0800b12b
 800b0d4:	0800b133 	.word	0x0800b133
 800b0d8:	0800b13b 	.word	0x0800b13b
 800b0dc:	0800b143 	.word	0x0800b143
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]
      break;
 800b0e8:	e033      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b15c <LSM6DSV16X_ACC_GetOutputDataRate+0xe8>)
 800b0ee:	601a      	str	r2, [r3, #0]
      break;
 800b0f0:	e02f      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	4a1a      	ldr	r2, [pc, #104]	@ (800b160 <LSM6DSV16X_ACC_GetOutputDataRate+0xec>)
 800b0f6:	601a      	str	r2, [r3, #0]
      break;
 800b0f8:	e02b      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	4a19      	ldr	r2, [pc, #100]	@ (800b164 <LSM6DSV16X_ACC_GetOutputDataRate+0xf0>)
 800b0fe:	601a      	str	r2, [r3, #0]
      break;
 800b100:	e027      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	4a18      	ldr	r2, [pc, #96]	@ (800b168 <LSM6DSV16X_ACC_GetOutputDataRate+0xf4>)
 800b106:	601a      	str	r2, [r3, #0]
      break;
 800b108:	e023      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	4a17      	ldr	r2, [pc, #92]	@ (800b16c <LSM6DSV16X_ACC_GetOutputDataRate+0xf8>)
 800b10e:	601a      	str	r2, [r3, #0]
      break;
 800b110:	e01f      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	4a16      	ldr	r2, [pc, #88]	@ (800b170 <LSM6DSV16X_ACC_GetOutputDataRate+0xfc>)
 800b116:	601a      	str	r2, [r3, #0]
      break;
 800b118:	e01b      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	4a15      	ldr	r2, [pc, #84]	@ (800b174 <LSM6DSV16X_ACC_GetOutputDataRate+0x100>)
 800b11e:	601a      	str	r2, [r3, #0]
      break;
 800b120:	e017      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	4a14      	ldr	r2, [pc, #80]	@ (800b178 <LSM6DSV16X_ACC_GetOutputDataRate+0x104>)
 800b126:	601a      	str	r2, [r3, #0]
      break;
 800b128:	e013      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	4a13      	ldr	r2, [pc, #76]	@ (800b17c <LSM6DSV16X_ACC_GetOutputDataRate+0x108>)
 800b12e:	601a      	str	r2, [r3, #0]
      break;
 800b130:	e00f      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	4a12      	ldr	r2, [pc, #72]	@ (800b180 <LSM6DSV16X_ACC_GetOutputDataRate+0x10c>)
 800b136:	601a      	str	r2, [r3, #0]
      break;
 800b138:	e00b      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	4a11      	ldr	r2, [pc, #68]	@ (800b184 <LSM6DSV16X_ACC_GetOutputDataRate+0x110>)
 800b13e:	601a      	str	r2, [r3, #0]
      break;
 800b140:	e007      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	4a10      	ldr	r2, [pc, #64]	@ (800b188 <LSM6DSV16X_ACC_GetOutputDataRate+0x114>)
 800b146:	601a      	str	r2, [r3, #0]
      break;
 800b148:	e003      	b.n	800b152 <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    default:
      ret = LSM6DSV16X_ERROR;
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b14e:	60fb      	str	r3, [r7, #12]
      break;
 800b150:	bf00      	nop
  }

  return ret;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	3ff00000 	.word	0x3ff00000
 800b160:	40f00000 	.word	0x40f00000
 800b164:	41700000 	.word	0x41700000
 800b168:	41f00000 	.word	0x41f00000
 800b16c:	42700000 	.word	0x42700000
 800b170:	42f00000 	.word	0x42f00000
 800b174:	43700000 	.word	0x43700000
 800b178:	43f00000 	.word	0x43f00000
 800b17c:	44700000 	.word	0x44700000
 800b180:	44f00000 	.word	0x44f00000
 800b184:	45700000 	.word	0x45700000
 800b188:	45f00000 	.word	0x45f00000

0800b18c <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d106      	bne.n	800b1b0 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800b1a2:	ed97 0a00 	vldr	s0, [r7]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fb6a 	bl	800b880 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	e005      	b.n	800b1bc <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800b1b0:	ed97 0a00 	vldr	s0, [r7]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fc05 	bl	800b9c4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 800b1ba:	4603      	mov	r3, r0
  }
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3320      	adds	r3, #32
 800b1d6:	f107 020b 	add.w	r2, r7, #11
 800b1da:	4611      	mov	r1, r2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 f9d5 	bl	800c58c <lsm6dsv16x_xl_full_scale_get>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b1e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1ec:	e023      	b.n	800b236 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800b1ee:	7afb      	ldrb	r3, [r7, #11]
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d81b      	bhi.n	800b22c <LSM6DSV16X_ACC_GetFullScale+0x68>
 800b1f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1fc <LSM6DSV16X_ACC_GetFullScale+0x38>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b20d 	.word	0x0800b20d
 800b200:	0800b215 	.word	0x0800b215
 800b204:	0800b21d 	.word	0x0800b21d
 800b208:	0800b225 	.word	0x0800b225
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	2202      	movs	r2, #2
 800b210:	601a      	str	r2, [r3, #0]
      break;
 800b212:	e00f      	b.n	800b234 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2204      	movs	r2, #4
 800b218:	601a      	str	r2, [r3, #0]
      break;
 800b21a:	e00b      	b.n	800b234 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2208      	movs	r2, #8
 800b220:	601a      	str	r2, [r3, #0]
      break;
 800b222:	e007      	b.n	800b234 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2210      	movs	r2, #16
 800b228:	601a      	str	r2, [r3, #0]
      break;
 800b22a:	e003      	b.n	800b234 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800b22c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b230:	60fb      	str	r3, [r7, #12]
      break;
 800b232:	bf00      	nop
  }

  return ret;
 800b234:	68fb      	ldr	r3, [r7, #12]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop

0800b240 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	dd0b      	ble.n	800b268 <LSM6DSV16X_ACC_SetFullScale+0x28>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2b04      	cmp	r3, #4
 800b254:	dd06      	ble.n	800b264 <LSM6DSV16X_ACC_SetFullScale+0x24>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b08      	cmp	r3, #8
 800b25a:	dc01      	bgt.n	800b260 <LSM6DSV16X_ACC_SetFullScale+0x20>
 800b25c:	2302      	movs	r3, #2
 800b25e:	e004      	b.n	800b26a <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800b260:	2303      	movs	r3, #3
 800b262:	e002      	b.n	800b26a <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800b264:	2301      	movs	r3, #1
 800b266:	e000      	b.n	800b26a <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800b268:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 800b26a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3320      	adds	r3, #32
 800b270:	7bfa      	ldrb	r2, [r7, #15]
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f001 f963 	bl	800c540 <lsm6dsv16x_xl_full_scale_set>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 800b280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b284:	e000      	b.n	800b288 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3320      	adds	r3, #32
 800b29e:	f107 0208 	add.w	r2, r7, #8
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f001 f9fc 	bl	800c6a2 <lsm6dsv16x_acceleration_raw_get>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800b2b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2b4:	e00c      	b.n	800b2d0 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800b2b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800b2be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800b2c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3320      	adds	r3, #32
 800b2ec:	f107 0210 	add.w	r2, r7, #16
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f001 f9d5 	bl	800c6a2 <lsm6dsv16x_acceleration_raw_get>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800b2fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b302:	e03c      	b.n	800b37e <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 800b304:	f107 030c 	add.w	r3, r7, #12
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff fe6c 	bl	800afe8 <LSM6DSV16X_ACC_GetSensitivity>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b31a:	e030      	b.n	800b37e <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800b31c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b328:	edd7 7a03 	vldr	s15, [r7, #12]
 800b32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b334:	ee17 2a90 	vmov	r2, s15
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800b33c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b340:	ee07 3a90 	vmov	s15, r3
 800b344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b348:	edd7 7a03 	vldr	s15, [r7, #12]
 800b34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b354:	ee17 2a90 	vmov	r2, s15
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800b35c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b360:	ee07 3a90 	vmov	s15, r3
 800b364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b368:	edd7 7a03 	vldr	s15, [r7, #12]
 800b36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b374:	ee17 2a90 	vmov	r2, s15
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b394:	2b01      	cmp	r3, #1
 800b396:	d101      	bne.n	800b39c <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	e014      	b.n	800b3c6 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f103 0220 	add.w	r2, r3, #32
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	f000 fe9e 	bl	800c0ec <lsm6dsv16x_gy_data_rate_set>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800b3b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3ba:	e004      	b.n	800b3c6 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e01f      	b.n	800b424 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f103 0220 	add.w	r2, r3, #32
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3334      	adds	r3, #52	@ 0x34
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f000 fecb 	bl	800c18c <lsm6dsv16x_gy_data_rate_get>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800b3fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b400:	e010      	b.n	800b424 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	3320      	adds	r3, #32
 800b406:	2100      	movs	r1, #0
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 fe6f 	bl	800c0ec <lsm6dsv16x_gy_data_rate_set>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800b414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b418:	e004      	b.n	800b424 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3320      	adds	r3, #32
 800b43e:	f107 020b 	add.w	r2, r7, #11
 800b442:	4611      	mov	r1, r2
 800b444:	4618      	mov	r0, r3
 800b446:	f001 f823 	bl	800c490 <lsm6dsv16x_gy_full_scale_get>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b454:	e03d      	b.n	800b4d2 <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b0c      	cmp	r3, #12
 800b45a:	d835      	bhi.n	800b4c8 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 800b45c:	a201      	add	r2, pc, #4	@ (adr r2, 800b464 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 800b45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b462:	bf00      	nop
 800b464:	0800b499 	.word	0x0800b499
 800b468:	0800b4a1 	.word	0x0800b4a1
 800b46c:	0800b4a9 	.word	0x0800b4a9
 800b470:	0800b4b1 	.word	0x0800b4b1
 800b474:	0800b4b9 	.word	0x0800b4b9
 800b478:	0800b4c9 	.word	0x0800b4c9
 800b47c:	0800b4c9 	.word	0x0800b4c9
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b4c9 	.word	0x0800b4c9
 800b488:	0800b4c9 	.word	0x0800b4c9
 800b48c:	0800b4c9 	.word	0x0800b4c9
 800b490:	0800b4c9 	.word	0x0800b4c9
 800b494:	0800b4c1 	.word	0x0800b4c1
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	4a10      	ldr	r2, [pc, #64]	@ (800b4dc <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 800b49c:	601a      	str	r2, [r3, #0]
      break;
 800b49e:	e017      	b.n	800b4d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	4a0f      	ldr	r2, [pc, #60]	@ (800b4e0 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 800b4a4:	601a      	str	r2, [r3, #0]
      break;
 800b4a6:	e013      	b.n	800b4d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b4e4 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 800b4ac:	601a      	str	r2, [r3, #0]
      break;
 800b4ae:	e00f      	b.n	800b4d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	4a0d      	ldr	r2, [pc, #52]	@ (800b4e8 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 800b4b4:	601a      	str	r2, [r3, #0]
      break;
 800b4b6:	e00b      	b.n	800b4d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b4ec <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 800b4bc:	601a      	str	r2, [r3, #0]
      break;
 800b4be:	e007      	b.n	800b4d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	4a0b      	ldr	r2, [pc, #44]	@ (800b4f0 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 800b4c4:	601a      	str	r2, [r3, #0]
      break;
 800b4c6:	e003      	b.n	800b4d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4cc:	60fb      	str	r3, [r7, #12]
      break;
 800b4ce:	bf00      	nop
  }

  return ret;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	408c0000 	.word	0x408c0000
 800b4e0:	410c0000 	.word	0x410c0000
 800b4e4:	418c0000 	.word	0x418c0000
 800b4e8:	420c0000 	.word	0x420c0000
 800b4ec:	428c0000 	.word	0x428c0000
 800b4f0:	430c0000 	.word	0x430c0000

0800b4f4 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3320      	adds	r3, #32
 800b506:	f107 020b 	add.w	r2, r7, #11
 800b50a:	4611      	mov	r1, r2
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 fe3d 	bl	800c18c <lsm6dsv16x_gy_data_rate_get>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b51c:	e056      	b.n	800b5cc <LSM6DSV16X_GYRO_GetOutputDataRate+0xd8>
  }

  switch (odr_low_level)
 800b51e:	7afb      	ldrb	r3, [r7, #11]
 800b520:	2b0c      	cmp	r3, #12
 800b522:	d84e      	bhi.n	800b5c2 <LSM6DSV16X_GYRO_GetOutputDataRate+0xce>
 800b524:	a201      	add	r2, pc, #4	@ (adr r2, 800b52c <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b561 	.word	0x0800b561
 800b530:	0800b5c3 	.word	0x0800b5c3
 800b534:	0800b56b 	.word	0x0800b56b
 800b538:	0800b573 	.word	0x0800b573
 800b53c:	0800b57b 	.word	0x0800b57b
 800b540:	0800b583 	.word	0x0800b583
 800b544:	0800b58b 	.word	0x0800b58b
 800b548:	0800b593 	.word	0x0800b593
 800b54c:	0800b59b 	.word	0x0800b59b
 800b550:	0800b5a3 	.word	0x0800b5a3
 800b554:	0800b5ab 	.word	0x0800b5ab
 800b558:	0800b5b3 	.word	0x0800b5b3
 800b55c:	0800b5bb 	.word	0x0800b5bb
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	f04f 0200 	mov.w	r2, #0
 800b566:	601a      	str	r2, [r3, #0]
      break;
 800b568:	e02f      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	4a19      	ldr	r2, [pc, #100]	@ (800b5d4 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe0>)
 800b56e:	601a      	str	r2, [r3, #0]
      break;
 800b570:	e02b      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	4a18      	ldr	r2, [pc, #96]	@ (800b5d8 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe4>)
 800b576:	601a      	str	r2, [r3, #0]
      break;
 800b578:	e027      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	4a17      	ldr	r2, [pc, #92]	@ (800b5dc <LSM6DSV16X_GYRO_GetOutputDataRate+0xe8>)
 800b57e:	601a      	str	r2, [r3, #0]
      break;
 800b580:	e023      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	4a16      	ldr	r2, [pc, #88]	@ (800b5e0 <LSM6DSV16X_GYRO_GetOutputDataRate+0xec>)
 800b586:	601a      	str	r2, [r3, #0]
      break;
 800b588:	e01f      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	4a15      	ldr	r2, [pc, #84]	@ (800b5e4 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf0>)
 800b58e:	601a      	str	r2, [r3, #0]
      break;
 800b590:	e01b      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	4a14      	ldr	r2, [pc, #80]	@ (800b5e8 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf4>)
 800b596:	601a      	str	r2, [r3, #0]
      break;
 800b598:	e017      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	4a13      	ldr	r2, [pc, #76]	@ (800b5ec <LSM6DSV16X_GYRO_GetOutputDataRate+0xf8>)
 800b59e:	601a      	str	r2, [r3, #0]
      break;
 800b5a0:	e013      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	4a12      	ldr	r2, [pc, #72]	@ (800b5f0 <LSM6DSV16X_GYRO_GetOutputDataRate+0xfc>)
 800b5a6:	601a      	str	r2, [r3, #0]
      break;
 800b5a8:	e00f      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	4a11      	ldr	r2, [pc, #68]	@ (800b5f4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x100>)
 800b5ae:	601a      	str	r2, [r3, #0]
      break;
 800b5b0:	e00b      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	4a10      	ldr	r2, [pc, #64]	@ (800b5f8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x104>)
 800b5b6:	601a      	str	r2, [r3, #0]
      break;
 800b5b8:	e007      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b5fc <LSM6DSV16X_GYRO_GetOutputDataRate+0x108>)
 800b5be:	601a      	str	r2, [r3, #0]
      break;
 800b5c0:	e003      	b.n	800b5ca <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    default:
      ret = LSM6DSV16X_ERROR;
 800b5c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5c6:	60fb      	str	r3, [r7, #12]
      break;
 800b5c8:	bf00      	nop
  }

  return ret;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	40f00000 	.word	0x40f00000
 800b5d8:	41700000 	.word	0x41700000
 800b5dc:	41f00000 	.word	0x41f00000
 800b5e0:	42700000 	.word	0x42700000
 800b5e4:	42f00000 	.word	0x42f00000
 800b5e8:	43700000 	.word	0x43700000
 800b5ec:	43f00000 	.word	0x43f00000
 800b5f0:	44700000 	.word	0x44700000
 800b5f4:	44f00000 	.word	0x44f00000
 800b5f8:	45700000 	.word	0x45700000
 800b5fc:	45f00000 	.word	0x45f00000

0800b600 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b612:	2b01      	cmp	r3, #1
 800b614:	d106      	bne.n	800b624 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800b616:	ed97 0a00 	vldr	s0, [r7]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa6a 	bl	800baf4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 800b620:	4603      	mov	r3, r0
 800b622:	e005      	b.n	800b630 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800b624:	ed97 0a00 	vldr	s0, [r7]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 faf9 	bl	800bc20 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 800b62e:	4603      	mov	r3, r0
  }
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3320      	adds	r3, #32
 800b64a:	f107 020b 	add.w	r2, r7, #11
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f000 ff1d 	bl	800c490 <lsm6dsv16x_gy_full_scale_get>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800b65c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b660:	e041      	b.n	800b6e6 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 800b662:	7afb      	ldrb	r3, [r7, #11]
 800b664:	2b0c      	cmp	r3, #12
 800b666:	d839      	bhi.n	800b6dc <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 800b668:	a201      	add	r2, pc, #4	@ (adr r2, 800b670 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 800b66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66e:	bf00      	nop
 800b670:	0800b6a5 	.word	0x0800b6a5
 800b674:	0800b6ad 	.word	0x0800b6ad
 800b678:	0800b6b5 	.word	0x0800b6b5
 800b67c:	0800b6bf 	.word	0x0800b6bf
 800b680:	0800b6c9 	.word	0x0800b6c9
 800b684:	0800b6dd 	.word	0x0800b6dd
 800b688:	0800b6dd 	.word	0x0800b6dd
 800b68c:	0800b6dd 	.word	0x0800b6dd
 800b690:	0800b6dd 	.word	0x0800b6dd
 800b694:	0800b6dd 	.word	0x0800b6dd
 800b698:	0800b6dd 	.word	0x0800b6dd
 800b69c:	0800b6dd 	.word	0x0800b6dd
 800b6a0:	0800b6d3 	.word	0x0800b6d3
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	227d      	movs	r2, #125	@ 0x7d
 800b6a8:	601a      	str	r2, [r3, #0]
      break;
 800b6aa:	e01b      	b.n	800b6e4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	22fa      	movs	r2, #250	@ 0xfa
 800b6b0:	601a      	str	r2, [r3, #0]
      break;
 800b6b2:	e017      	b.n	800b6e4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b6ba:	601a      	str	r2, [r3, #0]
      break;
 800b6bc:	e012      	b.n	800b6e4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6c4:	601a      	str	r2, [r3, #0]
      break;
 800b6c6:	e00d      	b.n	800b6e4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800b6ce:	601a      	str	r2, [r3, #0]
      break;
 800b6d0:	e008      	b.n	800b6e4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b6d8:	601a      	str	r2, [r3, #0]
      break;
 800b6da:	e003      	b.n	800b6e4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 800b6dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6e0:	60fb      	str	r3, [r7, #12]
      break;
 800b6e2:	bf00      	nop
  }

  return ret;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop

0800b6f0 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b7d      	cmp	r3, #125	@ 0x7d
 800b6fe:	dd18      	ble.n	800b732 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2bfa      	cmp	r3, #250	@ 0xfa
 800b704:	dd13      	ble.n	800b72e <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b70c:	dd0d      	ble.n	800b72a <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b714:	dd07      	ble.n	800b726 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b71c:	dc01      	bgt.n	800b722 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 800b71e:	2304      	movs	r3, #4
 800b720:	e008      	b.n	800b734 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b722:	230c      	movs	r3, #12
 800b724:	e006      	b.n	800b734 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b726:	2303      	movs	r3, #3
 800b728:	e004      	b.n	800b734 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b72a:	2302      	movs	r3, #2
 800b72c:	e002      	b.n	800b734 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b72e:	2301      	movs	r3, #1
 800b730:	e000      	b.n	800b734 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800b732:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 800b734:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3320      	adds	r3, #32
 800b73a:	7bfa      	ldrb	r2, [r7, #15]
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fe80 	bl	800c444 <lsm6dsv16x_gy_full_scale_set>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 800b74a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b74e:	e000      	b.n	800b752 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b084      	sub	sp, #16
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3320      	adds	r3, #32
 800b768:	f107 0208 	add.w	r2, r7, #8
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 ff4a 	bl	800c608 <lsm6dsv16x_angular_rate_raw_get>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800b77a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b77e:	e00c      	b.n	800b79a <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800b780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800b788:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800b790:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b086      	sub	sp, #24
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3320      	adds	r3, #32
 800b7b0:	f107 0210 	add.w	r2, r7, #16
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 ff26 	bl	800c608 <lsm6dsv16x_angular_rate_raw_get>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <LSM6DSV16X_GYRO_GetAxes+0x26>
  {
    return LSM6DSV16X_ERROR;
 800b7c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7c6:	e03c      	b.n	800b842 <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 800b7c8:	f107 030c 	add.w	r3, r7, #12
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fe2c 	bl	800b42c <LSM6DSV16X_GYRO_GetSensitivity>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <LSM6DSV16X_GYRO_GetAxes+0x3e>
  {
    return LSM6DSV16X_ERROR;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7de:	e030      	b.n	800b842 <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800b7e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b7e4:	ee07 3a90 	vmov	s15, r3
 800b7e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7f8:	ee17 2a90 	vmov	r2, s15
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800b800:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b804:	ee07 3a90 	vmov	s15, r3
 800b808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b80c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b810:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b818:	ee17 2a90 	vmov	r2, s15
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800b820:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b824:	ee07 3a90 	vmov	s15, r3
 800b828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b82c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b838:	ee17 2a90 	vmov	r2, s15
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	460b      	mov	r3, r1
 800b854:	70fb      	strb	r3, [r7, #3]
 800b856:	4613      	mov	r3, r2
 800b858:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f103 0020 	add.w	r0, r3, #32
 800b860:	1cba      	adds	r2, r7, #2
 800b862:	78f9      	ldrb	r1, [r7, #3]
 800b864:	2301      	movs	r3, #1
 800b866:	f000 fab7 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800b870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b874:	e000      	b.n	800b878 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800b88c:	edd7 7a00 	vldr	s15, [r7]
 800b890:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 800b894:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89c:	d801      	bhi.n	800b8a2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e06e      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b8a2:	edd7 7a00 	vldr	s15, [r7]
 800b8a6:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800b8aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b2:	d801      	bhi.n	800b8b8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e063      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b8b8:	edd7 7a00 	vldr	s15, [r7]
 800b8bc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800b8c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c8:	d801      	bhi.n	800b8ce <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e058      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b8ce:	edd7 7a00 	vldr	s15, [r7]
 800b8d2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800b8d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8de:	d801      	bhi.n	800b8e4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 800b8e0:	2304      	movs	r3, #4
 800b8e2:	e04d      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b8e4:	edd7 7a00 	vldr	s15, [r7]
 800b8e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b9a8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 800b8ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f4:	d801      	bhi.n	800b8fa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800b8f6:	2305      	movs	r3, #5
 800b8f8:	e042      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b8fa:	edd7 7a00 	vldr	s15, [r7]
 800b8fe:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800b9ac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800b902:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90a:	d801      	bhi.n	800b910 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 800b90c:	2306      	movs	r3, #6
 800b90e:	e037      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b910:	edd7 7a00 	vldr	s15, [r7]
 800b914:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b9b0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 800b918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b920:	d801      	bhi.n	800b926 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800b922:	2307      	movs	r3, #7
 800b924:	e02c      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b926:	edd7 7a00 	vldr	s15, [r7]
 800b92a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b9b4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 800b92e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b936:	d801      	bhi.n	800b93c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800b938:	2308      	movs	r3, #8
 800b93a:	e021      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b93c:	edd7 7a00 	vldr	s15, [r7]
 800b940:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b9b8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 800b944:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94c:	d801      	bhi.n	800b952 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800b94e:	2309      	movs	r3, #9
 800b950:	e016      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b952:	edd7 7a00 	vldr	s15, [r7]
 800b956:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b9bc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800b95a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b962:	d801      	bhi.n	800b968 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800b964:	230a      	movs	r3, #10
 800b966:	e00b      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b968:	edd7 7a00 	vldr	s15, [r7]
 800b96c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b9c0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 800b970:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b978:	d801      	bhi.n	800b97e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 800b97a:	230b      	movs	r3, #11
 800b97c:	e000      	b.n	800b980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b97e:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800b980:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3320      	adds	r3, #32
 800b986:	7bfa      	ldrb	r2, [r7, #15]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fa4d 	bl	800be2a <lsm6dsv16x_xl_data_rate_set>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 800b996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b99a:	e000      	b.n	800b99e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	42700000 	.word	0x42700000
 800b9ac:	42f00000 	.word	0x42f00000
 800b9b0:	43700000 	.word	0x43700000
 800b9b4:	43f00000 	.word	0x43f00000
 800b9b8:	44700000 	.word	0x44700000
 800b9bc:	44f00000 	.word	0x44f00000
 800b9c0:	45700000 	.word	0x45700000

0800b9c4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800b9d0:	edd7 7a00 	vldr	s15, [r7]
 800b9d4:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 800b9d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e0:	d801      	bhi.n	800b9e6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e06e      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b9e6:	edd7 7a00 	vldr	s15, [r7]
 800b9ea:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800b9ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f6:	d801      	bhi.n	800b9fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e063      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b9fc:	edd7 7a00 	vldr	s15, [r7]
 800ba00:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800ba04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0c:	d801      	bhi.n	800ba12 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e058      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba12:	edd7 7a00 	vldr	s15, [r7]
 800ba16:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800ba1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	d801      	bhi.n	800ba28 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 800ba24:	2304      	movs	r3, #4
 800ba26:	e04d      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba28:	edd7 7a00 	vldr	s15, [r7]
 800ba2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800bad8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 800ba30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba38:	d801      	bhi.n	800ba3e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800ba3a:	2305      	movs	r3, #5
 800ba3c:	e042      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba3e:	edd7 7a00 	vldr	s15, [r7]
 800ba42:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800badc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 800ba46:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	d801      	bhi.n	800ba54 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 800ba50:	2306      	movs	r3, #6
 800ba52:	e037      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba54:	edd7 7a00 	vldr	s15, [r7]
 800ba58:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800bae0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800ba5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba64:	d801      	bhi.n	800ba6a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800ba66:	2307      	movs	r3, #7
 800ba68:	e02c      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba6a:	edd7 7a00 	vldr	s15, [r7]
 800ba6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bae4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 800ba72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7a:	d801      	bhi.n	800ba80 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800ba7c:	2308      	movs	r3, #8
 800ba7e:	e021      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba80:	edd7 7a00 	vldr	s15, [r7]
 800ba84:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bae8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 800ba88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba90:	d801      	bhi.n	800ba96 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800ba92:	2309      	movs	r3, #9
 800ba94:	e016      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800ba96:	edd7 7a00 	vldr	s15, [r7]
 800ba9a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800baec <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 800ba9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa6:	d801      	bhi.n	800baac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800baa8:	230a      	movs	r3, #10
 800baaa:	e00b      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800baac:	edd7 7a00 	vldr	s15, [r7]
 800bab0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800baf0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 800bab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babc:	d801      	bhi.n	800bac2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 800babe:	230b      	movs	r3, #11
 800bac0:	e000      	b.n	800bac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800bac2:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	42700000 	.word	0x42700000
 800badc:	42f00000 	.word	0x42f00000
 800bae0:	43700000 	.word	0x43700000
 800bae4:	43f00000 	.word	0x43f00000
 800bae8:	44700000 	.word	0x44700000
 800baec:	44f00000 	.word	0x44f00000
 800baf0:	45700000 	.word	0x45700000

0800baf4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 800bb00:	edd7 7a00 	vldr	s15, [r7]
 800bb04:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800bb08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	d801      	bhi.n	800bb16 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800bb12:	2302      	movs	r3, #2
 800bb14:	e063      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb16:	edd7 7a00 	vldr	s15, [r7]
 800bb1a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800bb1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb26:	d801      	bhi.n	800bb2c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e058      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb2c:	edd7 7a00 	vldr	s15, [r7]
 800bb30:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800bb34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb3c:	d801      	bhi.n	800bb42 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800bb3e:	2304      	movs	r3, #4
 800bb40:	e04d      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb42:	edd7 7a00 	vldr	s15, [r7]
 800bb46:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bc04 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800bb4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb52:	d801      	bhi.n	800bb58 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800bb54:	2305      	movs	r3, #5
 800bb56:	e042      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb58:	edd7 7a00 	vldr	s15, [r7]
 800bb5c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800bc08 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800bb60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb68:	d801      	bhi.n	800bb6e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800bb6a:	2306      	movs	r3, #6
 800bb6c:	e037      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb6e:	edd7 7a00 	vldr	s15, [r7]
 800bb72:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800bc0c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800bb76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	d801      	bhi.n	800bb84 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800bb80:	2307      	movs	r3, #7
 800bb82:	e02c      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb84:	edd7 7a00 	vldr	s15, [r7]
 800bb88:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800bc10 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 800bb8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb94:	d801      	bhi.n	800bb9a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800bb96:	2308      	movs	r3, #8
 800bb98:	e021      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bb9a:	edd7 7a00 	vldr	s15, [r7]
 800bb9e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bc14 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800bba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbaa:	d801      	bhi.n	800bbb0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800bbac:	2309      	movs	r3, #9
 800bbae:	e016      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bbb0:	edd7 7a00 	vldr	s15, [r7]
 800bbb4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bc18 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 800bbb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc0:	d801      	bhi.n	800bbc6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800bbc2:	230a      	movs	r3, #10
 800bbc4:	e00b      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bbc6:	edd7 7a00 	vldr	s15, [r7]
 800bbca:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800bc1c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800bbce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd6:	d801      	bhi.n	800bbdc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 800bbd8:	230b      	movs	r3, #11
 800bbda:	e000      	b.n	800bbde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800bbdc:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800bbde:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3320      	adds	r3, #32
 800bbe4:	7bfa      	ldrb	r2, [r7, #15]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 fa7f 	bl	800c0ec <lsm6dsv16x_gy_data_rate_set>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bbf8:	e000      	b.n	800bbfc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	42700000 	.word	0x42700000
 800bc08:	42f00000 	.word	0x42f00000
 800bc0c:	43700000 	.word	0x43700000
 800bc10:	43f00000 	.word	0x43f00000
 800bc14:	44700000 	.word	0x44700000
 800bc18:	44f00000 	.word	0x44f00000
 800bc1c:	45700000 	.word	0x45700000

0800bc20 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 800bc2c:	edd7 7a00 	vldr	s15, [r7]
 800bc30:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800bc34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	d801      	bhi.n	800bc42 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	e063      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bc42:	edd7 7a00 	vldr	s15, [r7]
 800bc46:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800bc4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc52:	d801      	bhi.n	800bc58 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800bc54:	2303      	movs	r3, #3
 800bc56:	e058      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bc58:	edd7 7a00 	vldr	s15, [r7]
 800bc5c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800bc60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc68:	d801      	bhi.n	800bc6e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800bc6a:	2304      	movs	r3, #4
 800bc6c:	e04d      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bc6e:	edd7 7a00 	vldr	s15, [r7]
 800bc72:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800bd20 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800bc76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	d801      	bhi.n	800bc84 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800bc80:	2305      	movs	r3, #5
 800bc82:	e042      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bc84:	edd7 7a00 	vldr	s15, [r7]
 800bc88:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800bd24 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 800bc8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	d801      	bhi.n	800bc9a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800bc96:	2306      	movs	r3, #6
 800bc98:	e037      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bc9a:	edd7 7a00 	vldr	s15, [r7]
 800bc9e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800bd28 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800bca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	d801      	bhi.n	800bcb0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800bcac:	2307      	movs	r3, #7
 800bcae:	e02c      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bcb0:	edd7 7a00 	vldr	s15, [r7]
 800bcb4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bd2c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 800bcb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc0:	d801      	bhi.n	800bcc6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800bcc2:	2308      	movs	r3, #8
 800bcc4:	e021      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bcc6:	edd7 7a00 	vldr	s15, [r7]
 800bcca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bd30 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800bcce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd6:	d801      	bhi.n	800bcdc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800bcd8:	2309      	movs	r3, #9
 800bcda:	e016      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bcdc:	edd7 7a00 	vldr	s15, [r7]
 800bce0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800bd34 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 800bce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcec:	d801      	bhi.n	800bcf2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800bcee:	230a      	movs	r3, #10
 800bcf0:	e00b      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bcf2:	edd7 7a00 	vldr	s15, [r7]
 800bcf6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800bd38 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 800bcfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd02:	d801      	bhi.n	800bd08 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800bd04:	230b      	movs	r3, #11
 800bd06:	e000      	b.n	800bd0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800bd08:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	42700000 	.word	0x42700000
 800bd24:	42f00000 	.word	0x42f00000
 800bd28:	43700000 	.word	0x43700000
 800bd2c:	43f00000 	.word	0x43f00000
 800bd30:	44700000 	.word	0x44700000
 800bd34:	44f00000 	.word	0x44f00000
 800bd38:	45700000 	.word	0x45700000

0800bd3c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	461a      	mov	r2, r3
 800bd48:	460b      	mov	r3, r1
 800bd4a:	72fb      	strb	r3, [r7, #11]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	695c      	ldr	r4, [r3, #20]
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	7b1b      	ldrb	r3, [r3, #12]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	b299      	uxth	r1, r3
 800bd62:	893b      	ldrh	r3, [r7, #8]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	47a0      	blx	r4
 800bd68:	4603      	mov	r3, r0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd90      	pop	{r4, r7, pc}

0800bd72 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800bd72:	b590      	push	{r4, r7, lr}
 800bd74:	b087      	sub	sp, #28
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	460b      	mov	r3, r1
 800bd80:	72fb      	strb	r3, [r7, #11]
 800bd82:	4613      	mov	r3, r2
 800bd84:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	691c      	ldr	r4, [r3, #16]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	7b1b      	ldrb	r3, [r3, #12]
 800bd92:	4618      	mov	r0, r3
 800bd94:	7afb      	ldrb	r3, [r7, #11]
 800bd96:	b299      	uxth	r1, r3
 800bd98:	893b      	ldrh	r3, [r7, #8]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	47a0      	blx	r4
 800bd9e:	4603      	mov	r3, r0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	371c      	adds	r7, #28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd90      	pop	{r4, r7, pc}

0800bda8 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 800bda8:	b590      	push	{r4, r7, lr}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	607a      	str	r2, [r7, #4]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	72fb      	strb	r3, [r7, #11]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	685c      	ldr	r4, [r3, #4]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	68d8      	ldr	r0, [r3, #12]
 800bdc4:	893b      	ldrh	r3, [r7, #8]
 800bdc6:	7af9      	ldrb	r1, [r7, #11]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	47a0      	blx	r4
 800bdcc:	6178      	str	r0, [r7, #20]

  return ret;
 800bdce:	697b      	ldr	r3, [r7, #20]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	371c      	adds	r7, #28
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd90      	pop	{r4, r7, pc}

0800bdd8 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 800bdd8:	b590      	push	{r4, r7, lr}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	461a      	mov	r2, r3
 800bde4:	460b      	mov	r3, r1
 800bde6:	72fb      	strb	r3, [r7, #11]
 800bde8:	4613      	mov	r3, r2
 800bdea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681c      	ldr	r4, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	68d8      	ldr	r0, [r3, #12]
 800bdf4:	893b      	ldrh	r3, [r7, #8]
 800bdf6:	7af9      	ldrb	r1, [r7, #11]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	47a0      	blx	r4
 800bdfc:	6178      	str	r0, [r7, #20]

  return ret;
 800bdfe:	697b      	ldr	r3, [r7, #20]
}
 800be00:	4618      	mov	r0, r3
 800be02:	371c      	adds	r7, #28
 800be04:	46bd      	mov	sp, r7
 800be06:	bd90      	pop	{r4, r7, pc}

0800be08 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800be12:	2301      	movs	r3, #1
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	210f      	movs	r1, #15
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ffc5 	bl	800bda8 <lsm6dsv16x_read_reg>
 800be1e:	60f8      	str	r0, [r7, #12]

  return ret;
 800be20:	68fb      	ldr	r3, [r7, #12]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b086      	sub	sp, #24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800be36:	f107 0210 	add.w	r2, r7, #16
 800be3a:	2301      	movs	r3, #1
 800be3c:	2110      	movs	r1, #16
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff ffb2 	bl	800bda8 <lsm6dsv16x_read_reg>
 800be44:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <lsm6dsv16x_xl_data_rate_set+0x26>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	e039      	b.n	800bec4 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	f003 030f 	and.w	r3, r3, #15
 800be56:	b2da      	uxtb	r2, r3
 800be58:	7c3b      	ldrb	r3, [r7, #16]
 800be5a:	f362 0303 	bfi	r3, r2, #0, #4
 800be5e:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800be60:	f107 0210 	add.w	r2, r7, #16
 800be64:	2301      	movs	r3, #1
 800be66:	2110      	movs	r1, #16
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff ffb5 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800be6e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <lsm6dsv16x_xl_data_rate_set+0x50>
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	e024      	b.n	800bec4 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	091b      	lsrs	r3, r3, #4
 800be7e:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800be80:	7cfb      	ldrb	r3, [r7, #19]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d01d      	beq.n	800bec2 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800be86:	f107 020c 	add.w	r2, r7, #12
 800be8a:	2301      	movs	r3, #1
 800be8c:	2162      	movs	r1, #98	@ 0x62
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff ff8a 	bl	800bda8 <lsm6dsv16x_read_reg>
 800be94:	4602      	mov	r2, r0
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	4413      	add	r3, r2
 800be9a:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800be9c:	7cfb      	ldrb	r3, [r7, #19]
 800be9e:	f003 0303 	and.w	r3, r3, #3
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	7b3b      	ldrb	r3, [r7, #12]
 800bea6:	f362 0301 	bfi	r3, r2, #0, #2
 800beaa:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800beac:	f107 020c 	add.w	r2, r7, #12
 800beb0:	2301      	movs	r3, #1
 800beb2:	2162      	movs	r1, #98	@ 0x62
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff ff8f 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800beba:	4602      	mov	r2, r0
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	4413      	add	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800bec2:	697b      	ldr	r3, [r7, #20]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3718      	adds	r7, #24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800bed6:	f107 0210 	add.w	r2, r7, #16
 800beda:	2301      	movs	r3, #1
 800bedc:	2110      	movs	r1, #16
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff ff62 	bl	800bda8 <lsm6dsv16x_read_reg>
 800bee4:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800bee6:	f107 020c 	add.w	r2, r7, #12
 800beea:	2301      	movs	r3, #1
 800beec:	2162      	movs	r1, #98	@ 0x62
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff ff5a 	bl	800bda8 <lsm6dsv16x_read_reg>
 800bef4:	4602      	mov	r2, r0
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	4413      	add	r3, r2
 800befa:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <lsm6dsv16x_xl_data_rate_get+0x3a>
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	e0ed      	b.n	800c0e2 <lsm6dsv16x_xl_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 800bf06:	7b3b      	ldrb	r3, [r7, #12]
 800bf08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800bf10:	7c3b      	ldrb	r3, [r7, #16]
 800bf12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b0c      	cmp	r3, #12
 800bf1a:	f200 80dd 	bhi.w	800c0d8 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800bf1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf24 <lsm6dsv16x_xl_data_rate_get+0x58>)
 800bf20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf24:	0800bf59 	.word	0x0800bf59
 800bf28:	0800bf61 	.word	0x0800bf61
 800bf2c:	0800bf69 	.word	0x0800bf69
 800bf30:	0800bf71 	.word	0x0800bf71
 800bf34:	0800bf95 	.word	0x0800bf95
 800bf38:	0800bfb9 	.word	0x0800bfb9
 800bf3c:	0800bfdd 	.word	0x0800bfdd
 800bf40:	0800c001 	.word	0x0800c001
 800bf44:	0800c025 	.word	0x0800c025
 800bf48:	0800c049 	.word	0x0800c049
 800bf4c:	0800c06d 	.word	0x0800c06d
 800bf50:	0800c091 	.word	0x0800c091
 800bf54:	0800c0b5 	.word	0x0800c0b5
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	701a      	strb	r2, [r3, #0]
      break;
 800bf5e:	e0bf      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2201      	movs	r2, #1
 800bf64:	701a      	strb	r2, [r3, #0]
      break;
 800bf66:	e0bb      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	701a      	strb	r2, [r3, #0]
      break;
 800bf6e:	e0b7      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800bf70:	7cfb      	ldrb	r3, [r7, #19]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d005      	beq.n	800bf82 <lsm6dsv16x_xl_data_rate_get+0xb6>
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d007      	beq.n	800bf8a <lsm6dsv16x_xl_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2203      	movs	r2, #3
 800bf7e:	701a      	strb	r2, [r3, #0]
        break;
 800bf80:	e007      	b.n	800bf92 <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2213      	movs	r2, #19
 800bf86:	701a      	strb	r2, [r3, #0]
        break;
 800bf88:	e003      	b.n	800bf92 <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2223      	movs	r2, #35	@ 0x23
 800bf8e:	701a      	strb	r2, [r3, #0]
        break;
 800bf90:	bf00      	nop
      }
      break;
 800bf92:	e0a5      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 800bf94:	7cfb      	ldrb	r3, [r7, #19]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d005      	beq.n	800bfa6 <lsm6dsv16x_xl_data_rate_get+0xda>
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d007      	beq.n	800bfae <lsm6dsv16x_xl_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2204      	movs	r2, #4
 800bfa2:	701a      	strb	r2, [r3, #0]
        break;
 800bfa4:	e007      	b.n	800bfb6 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2214      	movs	r2, #20
 800bfaa:	701a      	strb	r2, [r3, #0]
        break;
 800bfac:	e003      	b.n	800bfb6 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2224      	movs	r2, #36	@ 0x24
 800bfb2:	701a      	strb	r2, [r3, #0]
        break;
 800bfb4:	bf00      	nop
      }
      break;
 800bfb6:	e093      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 800bfb8:	7cfb      	ldrb	r3, [r7, #19]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d005      	beq.n	800bfca <lsm6dsv16x_xl_data_rate_get+0xfe>
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d007      	beq.n	800bfd2 <lsm6dsv16x_xl_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2205      	movs	r2, #5
 800bfc6:	701a      	strb	r2, [r3, #0]
        break;
 800bfc8:	e007      	b.n	800bfda <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2215      	movs	r2, #21
 800bfce:	701a      	strb	r2, [r3, #0]
        break;
 800bfd0:	e003      	b.n	800bfda <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2225      	movs	r2, #37	@ 0x25
 800bfd6:	701a      	strb	r2, [r3, #0]
        break;
 800bfd8:	bf00      	nop
      }
      break;
 800bfda:	e081      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 800bfdc:	7cfb      	ldrb	r3, [r7, #19]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d005      	beq.n	800bfee <lsm6dsv16x_xl_data_rate_get+0x122>
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d007      	beq.n	800bff6 <lsm6dsv16x_xl_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2206      	movs	r2, #6
 800bfea:	701a      	strb	r2, [r3, #0]
        break;
 800bfec:	e007      	b.n	800bffe <lsm6dsv16x_xl_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2216      	movs	r2, #22
 800bff2:	701a      	strb	r2, [r3, #0]
        break;
 800bff4:	e003      	b.n	800bffe <lsm6dsv16x_xl_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2226      	movs	r2, #38	@ 0x26
 800bffa:	701a      	strb	r2, [r3, #0]
        break;
 800bffc:	bf00      	nop
      }
      break;
 800bffe:	e06f      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800c000:	7cfb      	ldrb	r3, [r7, #19]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d005      	beq.n	800c012 <lsm6dsv16x_xl_data_rate_get+0x146>
 800c006:	2b02      	cmp	r3, #2
 800c008:	d007      	beq.n	800c01a <lsm6dsv16x_xl_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2207      	movs	r2, #7
 800c00e:	701a      	strb	r2, [r3, #0]
        break;
 800c010:	e007      	b.n	800c022 <lsm6dsv16x_xl_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2217      	movs	r2, #23
 800c016:	701a      	strb	r2, [r3, #0]
        break;
 800c018:	e003      	b.n	800c022 <lsm6dsv16x_xl_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2227      	movs	r2, #39	@ 0x27
 800c01e:	701a      	strb	r2, [r3, #0]
        break;
 800c020:	bf00      	nop
      }
      break;
 800c022:	e05d      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 800c024:	7cfb      	ldrb	r3, [r7, #19]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d005      	beq.n	800c036 <lsm6dsv16x_xl_data_rate_get+0x16a>
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d007      	beq.n	800c03e <lsm6dsv16x_xl_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2208      	movs	r2, #8
 800c032:	701a      	strb	r2, [r3, #0]
        break;
 800c034:	e007      	b.n	800c046 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2218      	movs	r2, #24
 800c03a:	701a      	strb	r2, [r3, #0]
        break;
 800c03c:	e003      	b.n	800c046 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2228      	movs	r2, #40	@ 0x28
 800c042:	701a      	strb	r2, [r3, #0]
        break;
 800c044:	bf00      	nop
      }
      break;
 800c046:	e04b      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 800c048:	7cfb      	ldrb	r3, [r7, #19]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d005      	beq.n	800c05a <lsm6dsv16x_xl_data_rate_get+0x18e>
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d007      	beq.n	800c062 <lsm6dsv16x_xl_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2209      	movs	r2, #9
 800c056:	701a      	strb	r2, [r3, #0]
        break;
 800c058:	e007      	b.n	800c06a <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	2219      	movs	r2, #25
 800c05e:	701a      	strb	r2, [r3, #0]
        break;
 800c060:	e003      	b.n	800c06a <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2229      	movs	r2, #41	@ 0x29
 800c066:	701a      	strb	r2, [r3, #0]
        break;
 800c068:	bf00      	nop
      }
      break;
 800c06a:	e039      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 800c06c:	7cfb      	ldrb	r3, [r7, #19]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d005      	beq.n	800c07e <lsm6dsv16x_xl_data_rate_get+0x1b2>
 800c072:	2b02      	cmp	r3, #2
 800c074:	d007      	beq.n	800c086 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	220a      	movs	r2, #10
 800c07a:	701a      	strb	r2, [r3, #0]
        break;
 800c07c:	e007      	b.n	800c08e <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	221a      	movs	r2, #26
 800c082:	701a      	strb	r2, [r3, #0]
        break;
 800c084:	e003      	b.n	800c08e <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	222a      	movs	r2, #42	@ 0x2a
 800c08a:	701a      	strb	r2, [r3, #0]
        break;
 800c08c:	bf00      	nop
      }
      break;
 800c08e:	e027      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800c090:	7cfb      	ldrb	r3, [r7, #19]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d005      	beq.n	800c0a2 <lsm6dsv16x_xl_data_rate_get+0x1d6>
 800c096:	2b02      	cmp	r3, #2
 800c098:	d007      	beq.n	800c0aa <lsm6dsv16x_xl_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	220b      	movs	r2, #11
 800c09e:	701a      	strb	r2, [r3, #0]
        break;
 800c0a0:	e007      	b.n	800c0b2 <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	221b      	movs	r2, #27
 800c0a6:	701a      	strb	r2, [r3, #0]
        break;
 800c0a8:	e003      	b.n	800c0b2 <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	222b      	movs	r2, #43	@ 0x2b
 800c0ae:	701a      	strb	r2, [r3, #0]
        break;
 800c0b0:	bf00      	nop
      }
      break;
 800c0b2:	e015      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 800c0b4:	7cfb      	ldrb	r3, [r7, #19]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d005      	beq.n	800c0c6 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d007      	beq.n	800c0ce <lsm6dsv16x_xl_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	220c      	movs	r2, #12
 800c0c2:	701a      	strb	r2, [r3, #0]
        break;
 800c0c4:	e007      	b.n	800c0d6 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	221c      	movs	r2, #28
 800c0ca:	701a      	strb	r2, [r3, #0]
        break;
 800c0cc:	e003      	b.n	800c0d6 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	222c      	movs	r2, #44	@ 0x2c
 800c0d2:	701a      	strb	r2, [r3, #0]
        break;
 800c0d4:	bf00      	nop
      }
      break;
 800c0d6:	e003      	b.n	800c0e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	701a      	strb	r2, [r3, #0]
      break;
 800c0de:	bf00      	nop
  }

  return ret;
 800c0e0:	697b      	ldr	r3, [r7, #20]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop

0800c0ec <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800c0f8:	f107 0210 	add.w	r2, r7, #16
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	2111      	movs	r1, #17
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fe51 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c106:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	f003 030f 	and.w	r3, r3, #15
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	7c3b      	ldrb	r3, [r7, #16]
 800c112:	f362 0303 	bfi	r3, r2, #0, #4
 800c116:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800c118:	f107 0210 	add.w	r2, r7, #16
 800c11c:	2301      	movs	r3, #1
 800c11e:	2111      	movs	r1, #17
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff fe59 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c126:	4602      	mov	r2, r0
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	4413      	add	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <lsm6dsv16x_gy_data_rate_set+0x4c>
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	e024      	b.n	800c182 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	091b      	lsrs	r3, r3, #4
 800c13c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800c13e:	7cfb      	ldrb	r3, [r7, #19]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d01d      	beq.n	800c180 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800c144:	f107 020c 	add.w	r2, r7, #12
 800c148:	2301      	movs	r3, #1
 800c14a:	2162      	movs	r1, #98	@ 0x62
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff fe2b 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c152:	4602      	mov	r2, r0
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	4413      	add	r3, r2
 800c158:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800c15a:	7cfb      	ldrb	r3, [r7, #19]
 800c15c:	f003 0303 	and.w	r3, r3, #3
 800c160:	b2da      	uxtb	r2, r3
 800c162:	7b3b      	ldrb	r3, [r7, #12]
 800c164:	f362 0301 	bfi	r3, r2, #0, #2
 800c168:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800c16a:	f107 020c 	add.w	r2, r7, #12
 800c16e:	2301      	movs	r3, #1
 800c170:	2162      	movs	r1, #98	@ 0x62
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fe30 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c178:	4602      	mov	r2, r0
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	4413      	add	r3, r2
 800c17e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800c180:	697b      	ldr	r3, [r7, #20]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3718      	adds	r7, #24
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800c196:	f107 0210 	add.w	r2, r7, #16
 800c19a:	2301      	movs	r3, #1
 800c19c:	2111      	movs	r1, #17
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7ff fe02 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c1a4:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800c1a6:	f107 020c 	add.w	r2, r7, #12
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	2162      	movs	r1, #98	@ 0x62
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff fdfa 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <lsm6dsv16x_gy_data_rate_get+0x3a>
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	e0ed      	b.n	800c3a2 <lsm6dsv16x_gy_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 800c1c6:	7b3b      	ldrb	r3, [r7, #12]
 800c1c8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 800c1d0:	7c3b      	ldrb	r3, [r7, #16]
 800c1d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b0c      	cmp	r3, #12
 800c1da:	f200 80dd 	bhi.w	800c398 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800c1de:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e4 <lsm6dsv16x_gy_data_rate_get+0x58>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c219 	.word	0x0800c219
 800c1e8:	0800c221 	.word	0x0800c221
 800c1ec:	0800c229 	.word	0x0800c229
 800c1f0:	0800c231 	.word	0x0800c231
 800c1f4:	0800c255 	.word	0x0800c255
 800c1f8:	0800c279 	.word	0x0800c279
 800c1fc:	0800c29d 	.word	0x0800c29d
 800c200:	0800c2c1 	.word	0x0800c2c1
 800c204:	0800c2e5 	.word	0x0800c2e5
 800c208:	0800c309 	.word	0x0800c309
 800c20c:	0800c32d 	.word	0x0800c32d
 800c210:	0800c351 	.word	0x0800c351
 800c214:	0800c375 	.word	0x0800c375
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2200      	movs	r2, #0
 800c21c:	701a      	strb	r2, [r3, #0]
      break;
 800c21e:	e0bf      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2201      	movs	r2, #1
 800c224:	701a      	strb	r2, [r3, #0]
      break;
 800c226:	e0bb      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2202      	movs	r2, #2
 800c22c:	701a      	strb	r2, [r3, #0]
      break;
 800c22e:	e0b7      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800c230:	7cfb      	ldrb	r3, [r7, #19]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d005      	beq.n	800c242 <lsm6dsv16x_gy_data_rate_get+0xb6>
 800c236:	2b02      	cmp	r3, #2
 800c238:	d007      	beq.n	800c24a <lsm6dsv16x_gy_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2203      	movs	r2, #3
 800c23e:	701a      	strb	r2, [r3, #0]
        break;
 800c240:	e007      	b.n	800c252 <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2213      	movs	r2, #19
 800c246:	701a      	strb	r2, [r3, #0]
        break;
 800c248:	e003      	b.n	800c252 <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2223      	movs	r2, #35	@ 0x23
 800c24e:	701a      	strb	r2, [r3, #0]
        break;
 800c250:	bf00      	nop
      }
      break;
 800c252:	e0a5      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 800c254:	7cfb      	ldrb	r3, [r7, #19]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d005      	beq.n	800c266 <lsm6dsv16x_gy_data_rate_get+0xda>
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d007      	beq.n	800c26e <lsm6dsv16x_gy_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2204      	movs	r2, #4
 800c262:	701a      	strb	r2, [r3, #0]
        break;
 800c264:	e007      	b.n	800c276 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2214      	movs	r2, #20
 800c26a:	701a      	strb	r2, [r3, #0]
        break;
 800c26c:	e003      	b.n	800c276 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2224      	movs	r2, #36	@ 0x24
 800c272:	701a      	strb	r2, [r3, #0]
        break;
 800c274:	bf00      	nop
      }
      break;
 800c276:	e093      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 800c278:	7cfb      	ldrb	r3, [r7, #19]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d005      	beq.n	800c28a <lsm6dsv16x_gy_data_rate_get+0xfe>
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d007      	beq.n	800c292 <lsm6dsv16x_gy_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2205      	movs	r2, #5
 800c286:	701a      	strb	r2, [r3, #0]
        break;
 800c288:	e007      	b.n	800c29a <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2215      	movs	r2, #21
 800c28e:	701a      	strb	r2, [r3, #0]
        break;
 800c290:	e003      	b.n	800c29a <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2225      	movs	r2, #37	@ 0x25
 800c296:	701a      	strb	r2, [r3, #0]
        break;
 800c298:	bf00      	nop
      }
      break;
 800c29a:	e081      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 800c29c:	7cfb      	ldrb	r3, [r7, #19]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d005      	beq.n	800c2ae <lsm6dsv16x_gy_data_rate_get+0x122>
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d007      	beq.n	800c2b6 <lsm6dsv16x_gy_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2206      	movs	r2, #6
 800c2aa:	701a      	strb	r2, [r3, #0]
        break;
 800c2ac:	e007      	b.n	800c2be <lsm6dsv16x_gy_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2216      	movs	r2, #22
 800c2b2:	701a      	strb	r2, [r3, #0]
        break;
 800c2b4:	e003      	b.n	800c2be <lsm6dsv16x_gy_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	2226      	movs	r2, #38	@ 0x26
 800c2ba:	701a      	strb	r2, [r3, #0]
        break;
 800c2bc:	bf00      	nop
      }
      break;
 800c2be:	e06f      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800c2c0:	7cfb      	ldrb	r3, [r7, #19]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d005      	beq.n	800c2d2 <lsm6dsv16x_gy_data_rate_get+0x146>
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d007      	beq.n	800c2da <lsm6dsv16x_gy_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2207      	movs	r2, #7
 800c2ce:	701a      	strb	r2, [r3, #0]
        break;
 800c2d0:	e007      	b.n	800c2e2 <lsm6dsv16x_gy_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2217      	movs	r2, #23
 800c2d6:	701a      	strb	r2, [r3, #0]
        break;
 800c2d8:	e003      	b.n	800c2e2 <lsm6dsv16x_gy_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2227      	movs	r2, #39	@ 0x27
 800c2de:	701a      	strb	r2, [r3, #0]
        break;
 800c2e0:	bf00      	nop
      }
      break;
 800c2e2:	e05d      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 800c2e4:	7cfb      	ldrb	r3, [r7, #19]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d005      	beq.n	800c2f6 <lsm6dsv16x_gy_data_rate_get+0x16a>
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d007      	beq.n	800c2fe <lsm6dsv16x_gy_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	701a      	strb	r2, [r3, #0]
        break;
 800c2f4:	e007      	b.n	800c306 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2218      	movs	r2, #24
 800c2fa:	701a      	strb	r2, [r3, #0]
        break;
 800c2fc:	e003      	b.n	800c306 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2228      	movs	r2, #40	@ 0x28
 800c302:	701a      	strb	r2, [r3, #0]
        break;
 800c304:	bf00      	nop
      }
      break;
 800c306:	e04b      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 800c308:	7cfb      	ldrb	r3, [r7, #19]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d005      	beq.n	800c31a <lsm6dsv16x_gy_data_rate_get+0x18e>
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d007      	beq.n	800c322 <lsm6dsv16x_gy_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2209      	movs	r2, #9
 800c316:	701a      	strb	r2, [r3, #0]
        break;
 800c318:	e007      	b.n	800c32a <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2219      	movs	r2, #25
 800c31e:	701a      	strb	r2, [r3, #0]
        break;
 800c320:	e003      	b.n	800c32a <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2229      	movs	r2, #41	@ 0x29
 800c326:	701a      	strb	r2, [r3, #0]
        break;
 800c328:	bf00      	nop
      }
      break;
 800c32a:	e039      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 800c32c:	7cfb      	ldrb	r3, [r7, #19]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d005      	beq.n	800c33e <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800c332:	2b02      	cmp	r3, #2
 800c334:	d007      	beq.n	800c346 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	220a      	movs	r2, #10
 800c33a:	701a      	strb	r2, [r3, #0]
        break;
 800c33c:	e007      	b.n	800c34e <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	221a      	movs	r2, #26
 800c342:	701a      	strb	r2, [r3, #0]
        break;
 800c344:	e003      	b.n	800c34e <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	222a      	movs	r2, #42	@ 0x2a
 800c34a:	701a      	strb	r2, [r3, #0]
        break;
 800c34c:	bf00      	nop
      }
      break;
 800c34e:	e027      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800c350:	7cfb      	ldrb	r3, [r7, #19]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d005      	beq.n	800c362 <lsm6dsv16x_gy_data_rate_get+0x1d6>
 800c356:	2b02      	cmp	r3, #2
 800c358:	d007      	beq.n	800c36a <lsm6dsv16x_gy_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	220b      	movs	r2, #11
 800c35e:	701a      	strb	r2, [r3, #0]
        break;
 800c360:	e007      	b.n	800c372 <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	221b      	movs	r2, #27
 800c366:	701a      	strb	r2, [r3, #0]
        break;
 800c368:	e003      	b.n	800c372 <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	222b      	movs	r2, #43	@ 0x2b
 800c36e:	701a      	strb	r2, [r3, #0]
        break;
 800c370:	bf00      	nop
      }
      break;
 800c372:	e015      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 800c374:	7cfb      	ldrb	r3, [r7, #19]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d005      	beq.n	800c386 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d007      	beq.n	800c38e <lsm6dsv16x_gy_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	220c      	movs	r2, #12
 800c382:	701a      	strb	r2, [r3, #0]
        break;
 800c384:	e007      	b.n	800c396 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	221c      	movs	r2, #28
 800c38a:	701a      	strb	r2, [r3, #0]
        break;
 800c38c:	e003      	b.n	800c396 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	222c      	movs	r2, #44	@ 0x2c
 800c392:	701a      	strb	r2, [r3, #0]
        break;
 800c394:	bf00      	nop
      }
      break;
 800c396:	e003      	b.n	800c3a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2200      	movs	r2, #0
 800c39c:	701a      	strb	r2, [r3, #0]
      break;
 800c39e:	bf00      	nop
  }

  return ret;
 800c3a0:	697b      	ldr	r3, [r7, #20]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop

0800c3ac <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800c3b8:	f107 0208 	add.w	r2, r7, #8
 800c3bc:	2301      	movs	r3, #1
 800c3be:	2112      	movs	r1, #18
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff fcf1 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c3c6:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10f      	bne.n	800c3ee <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 800c3ce:	78fb      	ldrb	r3, [r7, #3]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	7a3b      	ldrb	r3, [r7, #8]
 800c3d8:	f362 0382 	bfi	r3, r2, #2, #1
 800c3dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800c3de:	f107 0208 	add.w	r2, r7, #8
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	2112      	movs	r1, #18
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fcf6 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c3ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800c404:	f107 0208 	add.w	r2, r7, #8
 800c408:	2301      	movs	r3, #1
 800c40a:	2112      	movs	r1, #18
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff fccb 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c412:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10f      	bne.n	800c43a <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	f003 0301 	and.w	r3, r3, #1
 800c420:	b2da      	uxtb	r2, r3
 800c422:	7a3b      	ldrb	r3, [r7, #8]
 800c424:	f362 1386 	bfi	r3, r2, #6, #1
 800c428:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800c42a:	f107 0208 	add.w	r2, r7, #8
 800c42e:	2301      	movs	r3, #1
 800c430:	2112      	movs	r1, #18
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fcd0 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c438:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c43a:	68fb      	ldr	r3, [r7, #12]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800c450:	f107 0208 	add.w	r2, r7, #8
 800c454:	2301      	movs	r3, #1
 800c456:	2115      	movs	r1, #21
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff fca5 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c45e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10f      	bne.n	800c486 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 800c466:	78fb      	ldrb	r3, [r7, #3]
 800c468:	f003 030f 	and.w	r3, r3, #15
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	7a3b      	ldrb	r3, [r7, #8]
 800c470:	f362 0303 	bfi	r3, r2, #0, #4
 800c474:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800c476:	f107 0208 	add.w	r2, r7, #8
 800c47a:	2301      	movs	r3, #1
 800c47c:	2115      	movs	r1, #21
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff fcaa 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c484:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c486:	68fb      	ldr	r3, [r7, #12]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800c49a:	f107 0208 	add.w	r2, r7, #8
 800c49e:	2301      	movs	r3, #1
 800c4a0:	2115      	movs	r1, #21
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff fc80 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c4a8:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <lsm6dsv16x_gy_full_scale_get+0x24>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	e040      	b.n	800c536 <lsm6dsv16x_gy_full_scale_get+0xa6>

  switch (ctrl6.fs_g)
 800c4b4:	7a3b      	ldrb	r3, [r7, #8]
 800c4b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b0c      	cmp	r3, #12
 800c4be:	d835      	bhi.n	800c52c <lsm6dsv16x_gy_full_scale_get+0x9c>
 800c4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c8 <lsm6dsv16x_gy_full_scale_get+0x38>)
 800c4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c6:	bf00      	nop
 800c4c8:	0800c4fd 	.word	0x0800c4fd
 800c4cc:	0800c505 	.word	0x0800c505
 800c4d0:	0800c50d 	.word	0x0800c50d
 800c4d4:	0800c515 	.word	0x0800c515
 800c4d8:	0800c51d 	.word	0x0800c51d
 800c4dc:	0800c52d 	.word	0x0800c52d
 800c4e0:	0800c52d 	.word	0x0800c52d
 800c4e4:	0800c52d 	.word	0x0800c52d
 800c4e8:	0800c52d 	.word	0x0800c52d
 800c4ec:	0800c52d 	.word	0x0800c52d
 800c4f0:	0800c52d 	.word	0x0800c52d
 800c4f4:	0800c52d 	.word	0x0800c52d
 800c4f8:	0800c525 	.word	0x0800c525
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
      break;
 800c502:	e017      	b.n	800c534 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2201      	movs	r2, #1
 800c508:	701a      	strb	r2, [r3, #0]
      break;
 800c50a:	e013      	b.n	800c534 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	2202      	movs	r2, #2
 800c510:	701a      	strb	r2, [r3, #0]
      break;
 800c512:	e00f      	b.n	800c534 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2203      	movs	r2, #3
 800c518:	701a      	strb	r2, [r3, #0]
      break;
 800c51a:	e00b      	b.n	800c534 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2204      	movs	r2, #4
 800c520:	701a      	strb	r2, [r3, #0]
      break;
 800c522:	e007      	b.n	800c534 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	220c      	movs	r2, #12
 800c528:	701a      	strb	r2, [r3, #0]
      break;
 800c52a:	e003      	b.n	800c534 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
      break;
 800c532:	bf00      	nop
  }

  return ret;
 800c534:	68fb      	ldr	r3, [r7, #12]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop

0800c540 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800c54c:	f107 0208 	add.w	r2, r7, #8
 800c550:	2301      	movs	r3, #1
 800c552:	2117      	movs	r1, #23
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff fc27 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c55a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10f      	bne.n	800c582 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800c562:	78fb      	ldrb	r3, [r7, #3]
 800c564:	f003 0303 	and.w	r3, r3, #3
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	7a3b      	ldrb	r3, [r7, #8]
 800c56c:	f362 0301 	bfi	r3, r2, #0, #2
 800c570:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800c572:	f107 0208 	add.w	r2, r7, #8
 800c576:	2301      	movs	r3, #1
 800c578:	2117      	movs	r1, #23
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fc2c 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c580:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c582:	68fb      	ldr	r3, [r7, #12]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800c596:	f107 0208 	add.w	r2, r7, #8
 800c59a:	2301      	movs	r3, #1
 800c59c:	2117      	movs	r1, #23
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7ff fc02 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c5a4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <lsm6dsv16x_xl_full_scale_get+0x24>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	e026      	b.n	800c5fe <lsm6dsv16x_xl_full_scale_get+0x72>

  switch (ctrl8.fs_xl)
 800c5b0:	7a3b      	ldrb	r3, [r7, #8]
 800c5b2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d81b      	bhi.n	800c5f4 <lsm6dsv16x_xl_full_scale_get+0x68>
 800c5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c4 <lsm6dsv16x_xl_full_scale_get+0x38>)
 800c5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c2:	bf00      	nop
 800c5c4:	0800c5d5 	.word	0x0800c5d5
 800c5c8:	0800c5dd 	.word	0x0800c5dd
 800c5cc:	0800c5e5 	.word	0x0800c5e5
 800c5d0:	0800c5ed 	.word	0x0800c5ed
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	701a      	strb	r2, [r3, #0]
      break;
 800c5da:	e00f      	b.n	800c5fc <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	701a      	strb	r2, [r3, #0]
      break;
 800c5e2:	e00b      	b.n	800c5fc <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	701a      	strb	r2, [r3, #0]
      break;
 800c5ea:	e007      	b.n	800c5fc <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2203      	movs	r2, #3
 800c5f0:	701a      	strb	r2, [r3, #0]
      break;
 800c5f2:	e003      	b.n	800c5fc <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
      break;
 800c5fa:	bf00      	nop
  }

  return ret;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop

0800c608 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 800c612:	f107 020c 	add.w	r2, r7, #12
 800c616:	2306      	movs	r3, #6
 800c618:	2122      	movs	r1, #34	@ 0x22
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fbc4 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c620:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <lsm6dsv16x_angular_rate_raw_get+0x24>
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	e036      	b.n	800c69a <lsm6dsv16x_angular_rate_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 800c62c:	7b7b      	ldrb	r3, [r7, #13]
 800c62e:	b21a      	sxth	r2, r3
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	b29b      	uxth	r3, r3
 800c640:	7b3a      	ldrb	r2, [r7, #12]
 800c642:	4413      	add	r3, r2
 800c644:	b29b      	uxth	r3, r3
 800c646:	b21a      	sxth	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800c64c:	7bfa      	ldrb	r2, [r7, #15]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	3302      	adds	r3, #2
 800c652:	b212      	sxth	r2, r2
 800c654:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	3302      	adds	r3, #2
 800c65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c65e:	b29b      	uxth	r3, r3
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	b29b      	uxth	r3, r3
 800c664:	7bba      	ldrb	r2, [r7, #14]
 800c666:	4413      	add	r3, r2
 800c668:	b29a      	uxth	r2, r3
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	3302      	adds	r3, #2
 800c66e:	b212      	sxth	r2, r2
 800c670:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800c672:	7c7a      	ldrb	r2, [r7, #17]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	3304      	adds	r3, #4
 800c678:	b212      	sxth	r2, r2
 800c67a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	3304      	adds	r3, #4
 800c680:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c684:	b29b      	uxth	r3, r3
 800c686:	021b      	lsls	r3, r3, #8
 800c688:	b29b      	uxth	r3, r3
 800c68a:	7c3a      	ldrb	r2, [r7, #16]
 800c68c:	4413      	add	r3, r2
 800c68e:	b29a      	uxth	r2, r3
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	3304      	adds	r3, #4
 800c694:	b212      	sxth	r2, r2
 800c696:	801a      	strh	r2, [r3, #0]

  return ret;
 800c698:	697b      	ldr	r3, [r7, #20]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b086      	sub	sp, #24
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 800c6ac:	f107 020c 	add.w	r2, r7, #12
 800c6b0:	2306      	movs	r3, #6
 800c6b2:	2128      	movs	r1, #40	@ 0x28
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7ff fb77 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c6ba:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <lsm6dsv16x_acceleration_raw_get+0x24>
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	e036      	b.n	800c734 <lsm6dsv16x_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 800c6c6:	7b7b      	ldrb	r3, [r7, #13]
 800c6c8:	b21a      	sxth	r2, r3
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	021b      	lsls	r3, r3, #8
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	7b3a      	ldrb	r2, [r7, #12]
 800c6dc:	4413      	add	r3, r2
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	b21a      	sxth	r2, r3
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800c6e6:	7bfa      	ldrb	r2, [r7, #15]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	3302      	adds	r3, #2
 800c6ec:	b212      	sxth	r2, r2
 800c6ee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	3302      	adds	r3, #2
 800c6f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	021b      	lsls	r3, r3, #8
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	7bba      	ldrb	r2, [r7, #14]
 800c700:	4413      	add	r3, r2
 800c702:	b29a      	uxth	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	3302      	adds	r3, #2
 800c708:	b212      	sxth	r2, r2
 800c70a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800c70c:	7c7a      	ldrb	r2, [r7, #17]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	3304      	adds	r3, #4
 800c712:	b212      	sxth	r2, r2
 800c714:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	3304      	adds	r3, #4
 800c71a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	b29b      	uxth	r3, r3
 800c724:	7c3a      	ldrb	r2, [r7, #16]
 800c726:	4413      	add	r3, r2
 800c728:	b29a      	uxth	r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	3304      	adds	r3, #4
 800c72e:	b212      	sxth	r2, r2
 800c730:	801a      	strh	r2, [r3, #0]

  return ret;
 800c732:	697b      	ldr	r3, [r7, #20]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	460b      	mov	r3, r1
 800c746:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800c748:	f107 0208 	add.w	r2, r7, #8
 800c74c:	2301      	movs	r3, #1
 800c74e:	210a      	movs	r1, #10
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fb29 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c756:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10f      	bne.n	800c77e <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 800c75e:	78fb      	ldrb	r3, [r7, #3]
 800c760:	f003 0307 	and.w	r3, r3, #7
 800c764:	b2da      	uxtb	r2, r3
 800c766:	7a3b      	ldrb	r3, [r7, #8]
 800c768:	f362 0302 	bfi	r3, r2, #0, #3
 800c76c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800c76e:	f107 0208 	add.w	r2, r7, #8
 800c772:	2301      	movs	r3, #1
 800c774:	210a      	movs	r1, #10
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff fb2e 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c77c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c77e:	68fb      	ldr	r3, [r7, #12]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 800c792:	f107 0208 	add.w	r2, r7, #8
 800c796:	2301      	movs	r3, #1
 800c798:	2116      	movs	r1, #22
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff fb04 	bl	800bda8 <lsm6dsv16x_read_reg>
 800c7a0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10f      	bne.n	800c7c8 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 800c7a8:	783b      	ldrb	r3, [r7, #0]
 800c7aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	7a3b      	ldrb	r3, [r7, #8]
 800c7b2:	f362 13c7 	bfi	r3, r2, #7, #1
 800c7b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 800c7b8:	f107 0208 	add.w	r2, r7, #8
 800c7bc:	2301      	movs	r3, #1
 800c7be:	2116      	movs	r1, #22
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff fb09 	bl	800bdd8 <lsm6dsv16x_write_reg>
 800c7c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
	...

0800c7d4 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d103      	bne.n	800c7ec <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 800c7e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e034      	b.n	800c856 <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	689a      	ldr	r2, [r3, #8]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	7b1a      	ldrb	r2, [r3, #12]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	691a      	ldr	r2, [r3, #16]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	695a      	ldr	r2, [r3, #20]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	699a      	ldr	r2, [r3, #24]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a0e      	ldr	r2, [pc, #56]	@ (800c860 <SHT40AD1B_RegisterBusIO+0x8c>)
 800c828:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a0d      	ldr	r2, [pc, #52]	@ (800c864 <SHT40AD1B_RegisterBusIO+0x90>)
 800c82e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	69da      	ldr	r2, [r3, #28]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d004      	beq.n	800c850 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4798      	blx	r3
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	e002      	b.n	800c856 <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 800c850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c854:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c856:	68fb      	ldr	r3, [r7, #12]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	0800cae5 	.word	0x0800cae5
 800c864:	0800cb25 	.word	0x0800cb25

0800c868 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f04f 0200 	mov.w	r2, #0
 800c876:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f04f 0200 	mov.w	r2, #0
 800c87e:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3320      	adds	r3, #32
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 fa23 	bl	800cd10 <sht40ad1b_device_id_get>
 800c8ca:	4603      	mov	r3, r0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	f04f 0200 	mov.w	r2, #0
 800c90a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	f04f 0200 	mov.w	r2, #0
 800c912:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	f04f 0200 	mov.w	r2, #0
 800c91a:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d101      	bne.n	800c940 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	e004      	b.n	800c94a <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 800c956:	b480      	push	{r7}
 800c958:	b083      	sub	sp, #12
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	e004      	b.n	800c976 <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b083      	sub	sp, #12
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f86f 	bl	800caaa <GetData>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 800c9d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9d6:	e004      	b.n	800c9e2 <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 800c9ea:	b480      	push	{r7}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d101      	bne.n	800ca00 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e004      	b.n	800ca0a <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	e004      	b.n	800ca36 <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b083      	sub	sp, #12
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f80f 	bl	800caaa <GetData>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 800ca92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca96:	e004      	b.n	800caa2 <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3320      	adds	r3, #32
 800cab6:	f107 0208 	add.w	r2, r7, #8
 800caba:	4611      	mov	r1, r2
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 f881 	bl	800cbc4 <sht40ad1b_data_get>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cacc:	e006      	b.n	800cadc <GetData+0x32>
  }

  pObj->hum_value = data[0];
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	607a      	str	r2, [r7, #4]
 800caee:	461a      	mov	r2, r3
 800caf0:	460b      	mov	r3, r1
 800caf2:	72fb      	strb	r3, [r7, #11]
 800caf4:	4613      	mov	r3, r2
 800caf6:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	695b      	ldr	r3, [r3, #20]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	7b12      	ldrb	r2, [r2, #12]
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	893a      	ldrh	r2, [r7, #8]
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	4798      	blx	r3
 800cb14:	4603      	mov	r3, r0
 800cb16:	e001      	b.n	800cb1c <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800cb18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	607a      	str	r2, [r7, #4]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	460b      	mov	r3, r1
 800cb32:	72fb      	strb	r3, [r7, #11]
 800cb34:	4613      	mov	r3, r2
 800cb36:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	7b12      	ldrb	r2, [r2, #12]
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	893a      	ldrh	r2, [r7, #8]
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	4798      	blx	r3
 800cb54:	4603      	mov	r3, r0
 800cb56:	e001      	b.n	800cb5c <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800cb58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	607a      	str	r2, [r7, #4]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	460b      	mov	r3, r1
 800cb72:	72fb      	strb	r3, [r7, #11]
 800cb74:	4613      	mov	r3, r2
 800cb76:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685c      	ldr	r4, [r3, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68d8      	ldr	r0, [r3, #12]
 800cb80:	893b      	ldrh	r3, [r7, #8]
 800cb82:	7af9      	ldrb	r1, [r7, #11]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	47a0      	blx	r4
 800cb88:	6178      	str	r0, [r7, #20]

  return ret;
 800cb8a:	697b      	ldr	r3, [r7, #20]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	371c      	adds	r7, #28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd90      	pop	{r4, r7, pc}

0800cb94 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800cb94:	b590      	push	{r4, r7, lr}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	607a      	str	r2, [r7, #4]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	460b      	mov	r3, r1
 800cba2:	72fb      	strb	r3, [r7, #11]
 800cba4:	4613      	mov	r3, r2
 800cba6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681c      	ldr	r4, [r3, #0]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	68d8      	ldr	r0, [r3, #12]
 800cbb0:	893b      	ldrh	r3, [r7, #8]
 800cbb2:	7af9      	ldrb	r1, [r7, #11]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	47a0      	blx	r4
 800cbb8:	6178      	str	r0, [r7, #20]

  return ret;
 800cbba:	697b      	ldr	r3, [r7, #20]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	371c      	adds	r7, #28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd90      	pop	{r4, r7, pc}

0800cbc4 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800cbce:	23fd      	movs	r3, #253	@ 0xfd
 800cbd0:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60bb      	str	r3, [r7, #8]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	81bb      	strh	r3, [r7, #12]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800cbda:	f107 020f 	add.w	r2, r7, #15
 800cbde:	2301      	movs	r3, #1
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7ff ffd6 	bl	800cb94 <sht40ad1b_write_reg>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <sht40ad1b_data_get+0x2e>
  {
    return 1;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e07d      	b.n	800ccee <sht40ad1b_data_get+0x12a>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	200a      	movs	r0, #10
 800cbf8:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800cbfa:	f107 0208 	add.w	r2, r7, #8
 800cbfe:	2306      	movs	r3, #6
 800cc00:	2100      	movs	r1, #0
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff ffae 	bl	800cb64 <sht40ad1b_read_reg>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d001      	beq.n	800cc12 <sht40ad1b_data_get+0x4e>
  {
    return 1;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e06d      	b.n	800ccee <sht40ad1b_data_get+0x12a>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800cc12:	7a3b      	ldrb	r3, [r7, #8]
 800cc14:	021b      	lsls	r3, r3, #8
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	7a7a      	ldrb	r2, [r7, #9]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800cc1e:	7abb      	ldrb	r3, [r7, #10]
 800cc20:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800cc22:	7afb      	ldrb	r3, [r7, #11]
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	7b3a      	ldrb	r2, [r7, #12]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800cc2e:	7b7b      	ldrb	r3, [r7, #13]
 800cc30:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800cc32:	7f7a      	ldrb	r2, [r7, #29]
 800cc34:	f107 0308 	add.w	r3, r7, #8
 800cc38:	2102      	movs	r1, #2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 f8b3 	bl	800cda6 <crc_check>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <sht40ad1b_data_get+0x86>
  {
    return 1;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e051      	b.n	800ccee <sht40ad1b_data_get+0x12a>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800cc4a:	7e7a      	ldrb	r2, [r7, #25]
 800cc4c:	f107 0308 	add.w	r3, r7, #8
 800cc50:	3303      	adds	r3, #3
 800cc52:	2102      	movs	r1, #2
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f8a6 	bl	800cda6 <crc_check>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <sht40ad1b_data_get+0xa0>
  {
    return 1;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e044      	b.n	800ccee <sht40ad1b_data_get+0x12a>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800cc64:	8bfb      	ldrh	r3, [r7, #30]
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800ccf8 <sht40ad1b_data_get+0x134>
 800cc72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc76:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800ccfc <sht40ad1b_data_get+0x138>
 800cc7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc7e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cd00 <sht40ad1b_data_get+0x13c>
 800cc82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc86:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800cc8a:	8b7b      	ldrh	r3, [r7, #26]
 800cc8c:	ee07 3a90 	vmov	s15, r3
 800cc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc94:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800cd04 <sht40ad1b_data_get+0x140>
 800cc98:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc9c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ccfc <sht40ad1b_data_get+0x138>
 800cca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cca4:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800cca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccac:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800ccb0:	edd7 7a04 	vldr	s15, [r7, #16]
 800ccb4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800cd08 <sht40ad1b_data_get+0x144>
 800ccb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc0:	dd01      	ble.n	800ccc6 <sht40ad1b_data_get+0x102>
 800ccc2:	4b12      	ldr	r3, [pc, #72]	@ (800cd0c <sht40ad1b_data_get+0x148>)
 800ccc4:	e00a      	b.n	800ccdc <sht40ad1b_data_get+0x118>
              :                        hum_value;
 800ccc6:	edd7 7a04 	vldr	s15, [r7, #16]
 800ccca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	d502      	bpl.n	800ccda <sht40ad1b_data_get+0x116>
 800ccd4:	f04f 0300 	mov.w	r3, #0
 800ccd8:	e000      	b.n	800ccdc <sht40ad1b_data_get+0x118>
 800ccda:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800ccdc:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	3304      	adds	r3, #4
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	601a      	str	r2, [r3, #0]
  return 0;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	432f0000 	.word	0x432f0000
 800ccfc:	477fff00 	.word	0x477fff00
 800cd00:	42340000 	.word	0x42340000
 800cd04:	42fa0000 	.word	0x42fa0000
 800cd08:	42c80000 	.word	0x42c80000
 800cd0c:	42c80000 	.word	0x42c80000

0800cd10 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	701a      	strb	r2, [r3, #0]
  return 0;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b085      	sub	sp, #20
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	460b      	mov	r3, r1
 800cd38:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800cd3a:	2331      	movs	r3, #49	@ 0x31
 800cd3c:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800cd3e:	23ff      	movs	r3, #255	@ 0xff
 800cd40:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800cd42:	2300      	movs	r3, #0
 800cd44:	81bb      	strh	r3, [r7, #12]
 800cd46:	e023      	b.n	800cd90 <crc_calculate+0x62>
  {
    crc ^= data[index];
 800cd48:	89bb      	ldrh	r3, [r7, #12]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	781a      	ldrb	r2, [r3, #0]
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	4053      	eors	r3, r2
 800cd54:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800cd56:	2308      	movs	r3, #8
 800cd58:	72fb      	strb	r3, [r7, #11]
 800cd5a:	e013      	b.n	800cd84 <crc_calculate+0x56>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800cd5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	da08      	bge.n	800cd76 <crc_calculate+0x48>
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	b25a      	sxtb	r2, r3
 800cd6a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800cd6e:	4053      	eors	r3, r2
 800cd70:	b25b      	sxtb	r3, r3
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	e002      	b.n	800cd7c <crc_calculate+0x4e>
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800cd7e:	7afb      	ldrb	r3, [r7, #11]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	72fb      	strb	r3, [r7, #11]
 800cd84:	7afb      	ldrb	r3, [r7, #11]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e8      	bne.n	800cd5c <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800cd8a:	89bb      	ldrh	r3, [r7, #12]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	81bb      	strh	r3, [r7, #12]
 800cd90:	89ba      	ldrh	r2, [r7, #12]
 800cd92:	887b      	ldrh	r3, [r7, #2]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d3d7      	bcc.n	800cd48 <crc_calculate+0x1a>
    }
  }

  return crc;
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3714      	adds	r7, #20
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b082      	sub	sp, #8
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	460b      	mov	r3, r1
 800cdb0:	807b      	strh	r3, [r7, #2]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800cdb6:	887b      	ldrh	r3, [r7, #2]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff ffb7 	bl	800cd2e <crc_calculate>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	787b      	ldrb	r3, [r7, #1]
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	bf14      	ite	ne
 800cdca:	2301      	movne	r3, #1
 800cdcc:	2300      	moveq	r3, #0
 800cdce:	b2db      	uxtb	r3, r3
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d103      	bne.n	800cdf0 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800cde8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	e034      	b.n	800ce5a <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	685a      	ldr	r2, [r3, #4]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	689a      	ldr	r2, [r3, #8]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	7b1a      	ldrb	r2, [r3, #12]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	691a      	ldr	r2, [r3, #16]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	695a      	ldr	r2, [r3, #20]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	699a      	ldr	r2, [r3, #24]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a0e      	ldr	r2, [pc, #56]	@ (800ce64 <STTS22H_RegisterBusIO+0x8c>)
 800ce2c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a0d      	ldr	r2, [pc, #52]	@ (800ce68 <STTS22H_RegisterBusIO+0x90>)
 800ce32:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	69da      	ldr	r2, [r3, #28]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4798      	blx	r3
 800ce50:	60f8      	str	r0, [r7, #12]
 800ce52:	e002      	b.n	800ce5a <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800ce54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce58:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	0800d275 	.word	0x0800d275
 800ce68:	0800d2e3 	.word	0x0800d2e3

0800ce6c <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d127      	bne.n	800cece <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ce84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3320      	adds	r3, #32
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fc25 	bl	800d6dc <stts22h_block_data_update_set>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800ce98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce9c:	e01c      	b.n	800ced8 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3320      	adds	r3, #32
 800cea2:	2101      	movs	r1, #1
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 fc72 	bl	800d78e <stts22h_auto_increment_set>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800ceb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ceb4:	e010      	b.n	800ced8 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3320      	adds	r3, #32
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fa91 	bl	800d3e4 <stts22h_temp_data_rate_set>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800cec8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cecc:	e004      	b.n	800ced8 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d108      	bne.n	800cf04 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f878 	bl	800cfe8 <STTS22H_TEMP_Disable>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800cefe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf02:	e004      	b.n	800cf0e <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b084      	sub	sp, #16
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	3320      	adds	r3, #32
 800cf24:	f107 020f 	add.w	r2, r7, #15
 800cf28:	4611      	mov	r1, r2
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fc1e 	bl	800d76c <stts22h_dev_id_get>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800cf36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf3a:	e003      	b.n	800cf44 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800cf3c:	7bfa      	ldrb	r2, [r7, #15]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2201      	movs	r2, #1
 800cf66:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2200      	movs	r2, #0
 800cf72:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	4a08      	ldr	r2, [pc, #32]	@ (800cfa0 <STTS22H_GetCapabilities+0x54>)
 800cf80:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	f04f 0200 	mov.w	r2, #0
 800cf88:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	f04f 0200 	mov.w	r2, #0
 800cf90:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	43480000 	.word	0x43480000

0800cfa4 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d101      	bne.n	800cfba <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e012      	b.n	800cfe0 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800cfc0:	eeb0 0a67 	vmov.f32	s0, s15
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f8e9 	bl	800d19c <STTS22H_TEMP_SetOutputDataRate>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfd4:	e004      	b.n	800cfe0 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e01c      	b.n	800d038 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3334      	adds	r3, #52	@ 0x34
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f81b 	bl	800d040 <STTS22H_TEMP_GetOutputDataRate>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800d010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d014:	e010      	b.n	800d038 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	3320      	adds	r3, #32
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 f9e1 	bl	800d3e4 <stts22h_temp_data_rate_set>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d002      	beq.n	800d02e <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800d028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d02c:	e004      	b.n	800d038 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3320      	adds	r3, #32
 800d052:	f107 020b 	add.w	r2, r7, #11
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 fa89 	bl	800d570 <stts22h_temp_data_rate_get>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800d064:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d068:	e08b      	b.n	800d182 <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800d06a:	7afb      	ldrb	r3, [r7, #11]
 800d06c:	2b32      	cmp	r3, #50	@ 0x32
 800d06e:	f200 8083 	bhi.w	800d178 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800d072:	a201      	add	r2, pc, #4	@ (adr r2, 800d078 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800d074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d078:	0800d145 	.word	0x0800d145
 800d07c:	0800d145 	.word	0x0800d145
 800d080:	0800d159 	.word	0x0800d159
 800d084:	0800d179 	.word	0x0800d179
 800d088:	0800d14f 	.word	0x0800d14f
 800d08c:	0800d179 	.word	0x0800d179
 800d090:	0800d179 	.word	0x0800d179
 800d094:	0800d179 	.word	0x0800d179
 800d098:	0800d179 	.word	0x0800d179
 800d09c:	0800d179 	.word	0x0800d179
 800d0a0:	0800d179 	.word	0x0800d179
 800d0a4:	0800d179 	.word	0x0800d179
 800d0a8:	0800d179 	.word	0x0800d179
 800d0ac:	0800d179 	.word	0x0800d179
 800d0b0:	0800d179 	.word	0x0800d179
 800d0b4:	0800d179 	.word	0x0800d179
 800d0b8:	0800d179 	.word	0x0800d179
 800d0bc:	0800d179 	.word	0x0800d179
 800d0c0:	0800d161 	.word	0x0800d161
 800d0c4:	0800d179 	.word	0x0800d179
 800d0c8:	0800d179 	.word	0x0800d179
 800d0cc:	0800d179 	.word	0x0800d179
 800d0d0:	0800d179 	.word	0x0800d179
 800d0d4:	0800d179 	.word	0x0800d179
 800d0d8:	0800d179 	.word	0x0800d179
 800d0dc:	0800d179 	.word	0x0800d179
 800d0e0:	0800d179 	.word	0x0800d179
 800d0e4:	0800d179 	.word	0x0800d179
 800d0e8:	0800d179 	.word	0x0800d179
 800d0ec:	0800d179 	.word	0x0800d179
 800d0f0:	0800d179 	.word	0x0800d179
 800d0f4:	0800d179 	.word	0x0800d179
 800d0f8:	0800d179 	.word	0x0800d179
 800d0fc:	0800d179 	.word	0x0800d179
 800d100:	0800d169 	.word	0x0800d169
 800d104:	0800d179 	.word	0x0800d179
 800d108:	0800d179 	.word	0x0800d179
 800d10c:	0800d179 	.word	0x0800d179
 800d110:	0800d179 	.word	0x0800d179
 800d114:	0800d179 	.word	0x0800d179
 800d118:	0800d179 	.word	0x0800d179
 800d11c:	0800d179 	.word	0x0800d179
 800d120:	0800d179 	.word	0x0800d179
 800d124:	0800d179 	.word	0x0800d179
 800d128:	0800d179 	.word	0x0800d179
 800d12c:	0800d179 	.word	0x0800d179
 800d130:	0800d179 	.word	0x0800d179
 800d134:	0800d179 	.word	0x0800d179
 800d138:	0800d179 	.word	0x0800d179
 800d13c:	0800d179 	.word	0x0800d179
 800d140:	0800d171 	.word	0x0800d171
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]
      break;
 800d14c:	e018      	b.n	800d180 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d154:	601a      	str	r2, [r3, #0]
      break;
 800d156:	e013      	b.n	800d180 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	4a0c      	ldr	r2, [pc, #48]	@ (800d18c <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800d15c:	601a      	str	r2, [r3, #0]
      break;
 800d15e:	e00f      	b.n	800d180 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	4a0b      	ldr	r2, [pc, #44]	@ (800d190 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800d164:	601a      	str	r2, [r3, #0]
      break;
 800d166:	e00b      	b.n	800d180 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	4a0a      	ldr	r2, [pc, #40]	@ (800d194 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800d16c:	601a      	str	r2, [r3, #0]
      break;
 800d16e:	e007      	b.n	800d180 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	4a09      	ldr	r2, [pc, #36]	@ (800d198 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800d174:	601a      	str	r2, [r3, #0]
      break;
 800d176:	e003      	b.n	800d180 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800d178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d17c:	60fb      	str	r3, [r7, #12]
      break;
 800d17e:	bf00      	nop
  }

  return ret;
 800d180:	68fb      	ldr	r3, [r7, #12]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	41c80000 	.word	0x41c80000
 800d190:	42480000 	.word	0x42480000
 800d194:	42c80000 	.word	0x42c80000
 800d198:	43480000 	.word	0x43480000

0800d19c <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800d1a8:	edd7 7a00 	vldr	s15, [r7]
 800d1ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d1b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b8:	d801      	bhi.n	800d1be <STTS22H_TEMP_SetOutputDataRate+0x22>
 800d1ba:	2304      	movs	r3, #4
 800d1bc:	e021      	b.n	800d202 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d1be:	edd7 7a00 	vldr	s15, [r7]
 800d1c2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800d1c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ce:	d801      	bhi.n	800d1d4 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	e016      	b.n	800d202 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d1d4:	edd7 7a00 	vldr	s15, [r7]
 800d1d8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800d228 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800d1dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e4:	d801      	bhi.n	800d1ea <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800d1e6:	2312      	movs	r3, #18
 800d1e8:	e00b      	b.n	800d202 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d1ea:	edd7 7a00 	vldr	s15, [r7]
 800d1ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d22c <STTS22H_TEMP_SetOutputDataRate+0x90>
 800d1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fa:	d801      	bhi.n	800d200 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800d1fc:	2322      	movs	r3, #34	@ 0x22
 800d1fe:	e000      	b.n	800d202 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d200:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800d202:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	3320      	adds	r3, #32
 800d208:	7bfa      	ldrb	r2, [r7, #15]
 800d20a:	4611      	mov	r1, r2
 800d20c:	4618      	mov	r0, r3
 800d20e:	f000 f8e9 	bl	800d3e4 <stts22h_temp_data_rate_set>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800d218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d21c:	e000      	b.n	800d220 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	42480000 	.word	0x42480000
 800d22c:	42c80000 	.word	0x42c80000

0800d230 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3320      	adds	r3, #32
 800d23e:	f107 020e 	add.w	r2, r7, #14
 800d242:	4611      	mov	r1, r2
 800d244:	4618      	mov	r0, r3
 800d246:	f000 fa6f 	bl	800d728 <stts22h_temperature_raw_get>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800d250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d254:	e00a      	b.n	800d26c <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800d256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f8a8 	bl	800d3b0 <stts22h_from_lsb_to_celsius>
 800d260:	eef0 7a40 	vmov.f32	s15, s0
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b089      	sub	sp, #36	@ 0x24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	607a      	str	r2, [r7, #4]
 800d27e:	461a      	mov	r2, r3
 800d280:	460b      	mov	r3, r1
 800d282:	72fb      	strb	r3, [r7, #11]
 800d284:	4613      	mov	r3, r2
 800d286:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d11f      	bne.n	800d2d8 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800d298:	2300      	movs	r3, #0
 800d29a:	83fb      	strh	r3, [r7, #30]
 800d29c:	e018      	b.n	800d2d0 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	695c      	ldr	r4, [r3, #20]
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	7b1b      	ldrb	r3, [r3, #12]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	7afb      	ldrb	r3, [r7, #11]
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	8bfb      	ldrh	r3, [r7, #30]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	b299      	uxth	r1, r3
 800d2b2:	8bfb      	ldrh	r3, [r7, #30]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	441a      	add	r2, r3
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	47a0      	blx	r4
 800d2bc:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2c8:	e007      	b.n	800d2da <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800d2ca:	8bfb      	ldrh	r3, [r7, #30]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	83fb      	strh	r3, [r7, #30]
 800d2d0:	8bfa      	ldrh	r2, [r7, #30]
 800d2d2:	893b      	ldrh	r3, [r7, #8]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d3e2      	bcc.n	800d29e <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800d2d8:	69bb      	ldr	r3, [r7, #24]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3724      	adds	r7, #36	@ 0x24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd90      	pop	{r4, r7, pc}

0800d2e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800d2e2:	b590      	push	{r4, r7, lr}
 800d2e4:	b089      	sub	sp, #36	@ 0x24
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	60f8      	str	r0, [r7, #12]
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	72fb      	strb	r3, [r7, #11]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d11f      	bne.n	800d346 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800d306:	2300      	movs	r3, #0
 800d308:	83fb      	strh	r3, [r7, #30]
 800d30a:	e018      	b.n	800d33e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	691c      	ldr	r4, [r3, #16]
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	7b1b      	ldrb	r3, [r3, #12]
 800d314:	4618      	mov	r0, r3
 800d316:	7afb      	ldrb	r3, [r7, #11]
 800d318:	b29a      	uxth	r2, r3
 800d31a:	8bfb      	ldrh	r3, [r7, #30]
 800d31c:	4413      	add	r3, r2
 800d31e:	b299      	uxth	r1, r3
 800d320:	8bfb      	ldrh	r3, [r7, #30]
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	441a      	add	r2, r3
 800d326:	2301      	movs	r3, #1
 800d328:	47a0      	blx	r4
 800d32a:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800d332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d336:	e007      	b.n	800d348 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800d338:	8bfb      	ldrh	r3, [r7, #30]
 800d33a:	3301      	adds	r3, #1
 800d33c:	83fb      	strh	r3, [r7, #30]
 800d33e:	8bfa      	ldrh	r2, [r7, #30]
 800d340:	893b      	ldrh	r3, [r7, #8]
 800d342:	429a      	cmp	r2, r3
 800d344:	d3e2      	bcc.n	800d30c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800d346:	69bb      	ldr	r3, [r7, #24]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3724      	adds	r7, #36	@ 0x24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd90      	pop	{r4, r7, pc}

0800d350 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800d350:	b590      	push	{r4, r7, lr}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	607a      	str	r2, [r7, #4]
 800d35a:	461a      	mov	r2, r3
 800d35c:	460b      	mov	r3, r1
 800d35e:	72fb      	strb	r3, [r7, #11]
 800d360:	4613      	mov	r3, r2
 800d362:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	685c      	ldr	r4, [r3, #4]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	68d8      	ldr	r0, [r3, #12]
 800d36c:	893b      	ldrh	r3, [r7, #8]
 800d36e:	7af9      	ldrb	r1, [r7, #11]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	47a0      	blx	r4
 800d374:	6178      	str	r0, [r7, #20]

  return ret;
 800d376:	697b      	ldr	r3, [r7, #20]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	371c      	adds	r7, #28
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd90      	pop	{r4, r7, pc}

0800d380 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	607a      	str	r2, [r7, #4]
 800d38a:	461a      	mov	r2, r3
 800d38c:	460b      	mov	r3, r1
 800d38e:	72fb      	strb	r3, [r7, #11]
 800d390:	4613      	mov	r3, r2
 800d392:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681c      	ldr	r4, [r3, #0]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68d8      	ldr	r0, [r3, #12]
 800d39c:	893b      	ldrh	r3, [r7, #8]
 800d39e:	7af9      	ldrb	r1, [r7, #11]
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	47a0      	blx	r4
 800d3a4:	6178      	str	r0, [r7, #20]

  return ret;
 800d3a6:	697b      	ldr	r3, [r7, #20]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	371c      	adds	r7, #28
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}

0800d3b0 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800d3ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800d3e0 <stts22h_from_lsb_to_celsius+0x30>
 800d3ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d3ce:	eef0 7a66 	vmov.f32	s15, s13
}
 800d3d2:	eeb0 0a67 	vmov.f32	s0, s15
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	42c80000 	.word	0x42c80000

0800d3e4 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	70fb      	strb	r3, [r7, #3]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d3f0:	f107 020c 	add.w	r2, r7, #12
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	2104      	movs	r1, #4
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff ffa9 	bl	800d350 <stts22h_read_reg>
 800d3fe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d107      	bne.n	800d416 <stts22h_temp_data_rate_set+0x32>
  {
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d406:	f107 0210 	add.w	r2, r7, #16
 800d40a:	2301      	movs	r3, #1
 800d40c:	210c      	movs	r1, #12
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff ff9e 	bl	800d350 <stts22h_read_reg>
 800d414:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d11d      	bne.n	800d458 <stts22h_temp_data_rate_set+0x74>
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d11a      	bne.n	800d458 <stts22h_temp_data_rate_set+0x74>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800d422:	7c3b      	ldrb	r3, [r7, #16]
 800d424:	f043 0302 	orr.w	r3, r3, #2
 800d428:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d42a:	f107 0210 	add.w	r2, r7, #16
 800d42e:	2301      	movs	r3, #1
 800d430:	210c      	movs	r1, #12
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff ffa4 	bl	800d380 <stts22h_write_reg>
 800d438:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10b      	bne.n	800d458 <stts22h_temp_data_rate_set+0x74>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800d440:	7c3b      	ldrb	r3, [r7, #16]
 800d442:	f36f 0341 	bfc	r3, #1, #1
 800d446:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d448:	f107 0210 	add.w	r2, r7, #16
 800d44c:	2301      	movs	r3, #1
 800d44e:	210c      	movs	r1, #12
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff ff95 	bl	800d380 <stts22h_write_reg>
 800d456:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 800d458:	78fb      	ldrb	r3, [r7, #3]
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d008      	beq.n	800d470 <stts22h_temp_data_rate_set+0x8c>
 800d45e:	78fb      	ldrb	r3, [r7, #3]
 800d460:	2b12      	cmp	r3, #18
 800d462:	d005      	beq.n	800d470 <stts22h_temp_data_rate_set+0x8c>
 800d464:	78fb      	ldrb	r3, [r7, #3]
 800d466:	2b22      	cmp	r3, #34	@ 0x22
 800d468:	d002      	beq.n	800d470 <stts22h_temp_data_rate_set+0x8c>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800d46a:	78fb      	ldrb	r3, [r7, #3]
 800d46c:	2b32      	cmp	r3, #50	@ 0x32
 800d46e:	d123      	bne.n	800d4b8 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 800d470:	7b3b      	ldrb	r3, [r7, #12]
 800d472:	f003 0304 	and.w	r3, r3, #4
 800d476:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d11d      	bne.n	800d4b8 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d11a      	bne.n	800d4b8 <stts22h_temp_data_rate_set+0xd4>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800d482:	7c3b      	ldrb	r3, [r7, #16]
 800d484:	f043 0302 	orr.w	r3, r3, #2
 800d488:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d48a:	f107 0210 	add.w	r2, r7, #16
 800d48e:	2301      	movs	r3, #1
 800d490:	210c      	movs	r1, #12
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff ff74 	bl	800d380 <stts22h_write_reg>
 800d498:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10b      	bne.n	800d4b8 <stts22h_temp_data_rate_set+0xd4>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800d4a0:	7c3b      	ldrb	r3, [r7, #16]
 800d4a2:	f36f 0341 	bfc	r3, #1, #1
 800d4a6:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d4a8:	f107 0210 	add.w	r2, r7, #16
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	210c      	movs	r1, #12
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff ff65 	bl	800d380 <stts22h_write_reg>
 800d4b6:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 800d4b8:	78fb      	ldrb	r3, [r7, #3]
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d125      	bne.n	800d50a <stts22h_temp_data_rate_set+0x126>
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d122      	bne.n	800d50a <stts22h_temp_data_rate_set+0x126>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800d4c4:	7c3b      	ldrb	r3, [r7, #16]
 800d4c6:	f043 0302 	orr.w	r3, r3, #2
 800d4ca:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 800d4cc:	7c3b      	ldrb	r3, [r7, #16]
 800d4ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4d2:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d4d4:	f107 0210 	add.w	r2, r7, #16
 800d4d8:	2301      	movs	r3, #1
 800d4da:	210c      	movs	r1, #12
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7ff ff4f 	bl	800d380 <stts22h_write_reg>
 800d4e2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10f      	bne.n	800d50a <stts22h_temp_data_rate_set+0x126>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800d4ea:	7c3b      	ldrb	r3, [r7, #16]
 800d4ec:	f36f 0341 	bfc	r3, #1, #1
 800d4f0:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 800d4f2:	7c3b      	ldrb	r3, [r7, #16]
 800d4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4f8:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800d4fa:	f107 0210 	add.w	r2, r7, #16
 800d4fe:	2301      	movs	r3, #1
 800d500:	210c      	movs	r1, #12
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff ff3c 	bl	800d380 <stts22h_write_reg>
 800d508:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d12a      	bne.n	800d566 <stts22h_temp_data_rate_set+0x182>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	b2da      	uxtb	r2, r3
 800d518:	7b3b      	ldrb	r3, [r7, #12]
 800d51a:	f362 0300 	bfi	r3, r2, #0, #1
 800d51e:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	085b      	lsrs	r3, r3, #1
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	7b3b      	ldrb	r3, [r7, #12]
 800d52c:	f362 0382 	bfi	r3, r2, #2, #1
 800d530:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800d532:	78fb      	ldrb	r3, [r7, #3]
 800d534:	089b      	lsrs	r3, r3, #2
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	7b3b      	ldrb	r3, [r7, #12]
 800d53e:	f362 13c7 	bfi	r3, r2, #7, #1
 800d542:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	091b      	lsrs	r3, r3, #4
 800d548:	f003 0303 	and.w	r3, r3, #3
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	7b3b      	ldrb	r3, [r7, #12]
 800d550:	f362 1305 	bfi	r3, r2, #4, #2
 800d554:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d556:	f107 020c 	add.w	r2, r7, #12
 800d55a:	2301      	movs	r3, #1
 800d55c:	2104      	movs	r1, #4
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff ff0e 	bl	800d380 <stts22h_write_reg>
 800d564:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800d566:	697b      	ldr	r3, [r7, #20]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800d57a:	f107 0208 	add.w	r2, r7, #8
 800d57e:	2301      	movs	r3, #1
 800d580:	2104      	movs	r1, #4
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff fee4 	bl	800d350 <stts22h_read_reg>
 800d588:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800d58a:	7a3b      	ldrb	r3, [r7, #8]
 800d58c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d590:	b2db      	uxtb	r3, r3
 800d592:	461a      	mov	r2, r3
 800d594:	7a3b      	ldrb	r3, [r7, #8]
 800d596:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	005b      	lsls	r3, r3, #1
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	7a3b      	ldrb	r3, [r7, #8]
 800d5a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800d5ac:	7a3b      	ldrb	r3, [r7, #8]
 800d5ae:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	011b      	lsls	r3, r3, #4
                                                 2) |
 800d5b6:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800d5b8:	2b32      	cmp	r3, #50	@ 0x32
 800d5ba:	f200 8085 	bhi.w	800d6c8 <stts22h_temp_data_rate_get+0x158>
 800d5be:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c4 <stts22h_temp_data_rate_get+0x54>)
 800d5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c4:	0800d691 	.word	0x0800d691
 800d5c8:	0800d699 	.word	0x0800d699
 800d5cc:	0800d6a9 	.word	0x0800d6a9
 800d5d0:	0800d6c9 	.word	0x0800d6c9
 800d5d4:	0800d6a1 	.word	0x0800d6a1
 800d5d8:	0800d6c9 	.word	0x0800d6c9
 800d5dc:	0800d6c9 	.word	0x0800d6c9
 800d5e0:	0800d6c9 	.word	0x0800d6c9
 800d5e4:	0800d6c9 	.word	0x0800d6c9
 800d5e8:	0800d6c9 	.word	0x0800d6c9
 800d5ec:	0800d6c9 	.word	0x0800d6c9
 800d5f0:	0800d6c9 	.word	0x0800d6c9
 800d5f4:	0800d6c9 	.word	0x0800d6c9
 800d5f8:	0800d6c9 	.word	0x0800d6c9
 800d5fc:	0800d6c9 	.word	0x0800d6c9
 800d600:	0800d6c9 	.word	0x0800d6c9
 800d604:	0800d6c9 	.word	0x0800d6c9
 800d608:	0800d6c9 	.word	0x0800d6c9
 800d60c:	0800d6b1 	.word	0x0800d6b1
 800d610:	0800d6c9 	.word	0x0800d6c9
 800d614:	0800d6c9 	.word	0x0800d6c9
 800d618:	0800d6c9 	.word	0x0800d6c9
 800d61c:	0800d6c9 	.word	0x0800d6c9
 800d620:	0800d6c9 	.word	0x0800d6c9
 800d624:	0800d6c9 	.word	0x0800d6c9
 800d628:	0800d6c9 	.word	0x0800d6c9
 800d62c:	0800d6c9 	.word	0x0800d6c9
 800d630:	0800d6c9 	.word	0x0800d6c9
 800d634:	0800d6c9 	.word	0x0800d6c9
 800d638:	0800d6c9 	.word	0x0800d6c9
 800d63c:	0800d6c9 	.word	0x0800d6c9
 800d640:	0800d6c9 	.word	0x0800d6c9
 800d644:	0800d6c9 	.word	0x0800d6c9
 800d648:	0800d6c9 	.word	0x0800d6c9
 800d64c:	0800d6b9 	.word	0x0800d6b9
 800d650:	0800d6c9 	.word	0x0800d6c9
 800d654:	0800d6c9 	.word	0x0800d6c9
 800d658:	0800d6c9 	.word	0x0800d6c9
 800d65c:	0800d6c9 	.word	0x0800d6c9
 800d660:	0800d6c9 	.word	0x0800d6c9
 800d664:	0800d6c9 	.word	0x0800d6c9
 800d668:	0800d6c9 	.word	0x0800d6c9
 800d66c:	0800d6c9 	.word	0x0800d6c9
 800d670:	0800d6c9 	.word	0x0800d6c9
 800d674:	0800d6c9 	.word	0x0800d6c9
 800d678:	0800d6c9 	.word	0x0800d6c9
 800d67c:	0800d6c9 	.word	0x0800d6c9
 800d680:	0800d6c9 	.word	0x0800d6c9
 800d684:	0800d6c9 	.word	0x0800d6c9
 800d688:	0800d6c9 	.word	0x0800d6c9
 800d68c:	0800d6c1 	.word	0x0800d6c1
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	2200      	movs	r2, #0
 800d694:	701a      	strb	r2, [r3, #0]
      break;
 800d696:	e01b      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2201      	movs	r2, #1
 800d69c:	701a      	strb	r2, [r3, #0]
      break;
 800d69e:	e017      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	701a      	strb	r2, [r3, #0]
      break;
 800d6a6:	e013      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	701a      	strb	r2, [r3, #0]
      break;
 800d6ae:	e00f      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	2212      	movs	r2, #18
 800d6b4:	701a      	strb	r2, [r3, #0]
      break;
 800d6b6:	e00b      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2222      	movs	r2, #34	@ 0x22
 800d6bc:	701a      	strb	r2, [r3, #0]
      break;
 800d6be:	e007      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	2232      	movs	r2, #50	@ 0x32
 800d6c4:	701a      	strb	r2, [r3, #0]
      break;
 800d6c6:	e003      	b.n	800d6d0 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
      break;
 800d6ce:	bf00      	nop
  }

  return ret;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop

0800d6dc <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d6e8:	f107 0208 	add.w	r2, r7, #8
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	2104      	movs	r1, #4
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff fe2d 	bl	800d350 <stts22h_read_reg>
 800d6f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10f      	bne.n	800d71e <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	b2da      	uxtb	r2, r3
 800d706:	7a3b      	ldrb	r3, [r7, #8]
 800d708:	f362 1386 	bfi	r3, r2, #6, #1
 800d70c:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d70e:	f107 0208 	add.w	r2, r7, #8
 800d712:	2301      	movs	r3, #1
 800d714:	2104      	movs	r1, #4
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff fe32 	bl	800d380 <stts22h_write_reg>
 800d71c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800d71e:	68fb      	ldr	r3, [r7, #12]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800d732:	f107 0208 	add.w	r2, r7, #8
 800d736:	2302      	movs	r3, #2
 800d738:	2106      	movs	r1, #6
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff fe08 	bl	800d350 <stts22h_read_reg>
 800d740:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800d742:	7a7b      	ldrb	r3, [r7, #9]
 800d744:	b21a      	sxth	r2, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d750:	b29b      	uxth	r3, r3
 800d752:	021b      	lsls	r3, r3, #8
 800d754:	b29b      	uxth	r3, r3
 800d756:	7a3a      	ldrb	r2, [r7, #8]
 800d758:	4413      	add	r3, r2
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	b21a      	sxth	r2, r3
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	801a      	strh	r2, [r3, #0]

  return ret;
 800d762:	68fb      	ldr	r3, [r7, #12]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800d776:	2301      	movs	r3, #1
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	2101      	movs	r1, #1
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff fde7 	bl	800d350 <stts22h_read_reg>
 800d782:	60f8      	str	r0, [r7, #12]

  return ret;
 800d784:	68fb      	ldr	r3, [r7, #12]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b084      	sub	sp, #16
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	460b      	mov	r3, r1
 800d798:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d79a:	f107 0208 	add.w	r2, r7, #8
 800d79e:	2301      	movs	r3, #1
 800d7a0:	2104      	movs	r1, #4
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff fdd4 	bl	800d350 <stts22h_read_reg>
 800d7a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10f      	bne.n	800d7d0 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800d7b0:	78fb      	ldrb	r3, [r7, #3]
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	7a3b      	ldrb	r3, [r7, #8]
 800d7ba:	f362 03c3 	bfi	r3, r2, #3, #1
 800d7be:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800d7c0:	f107 0208 	add.w	r2, r7, #8
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	2104      	movs	r1, #4
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff fdd9 	bl	800d380 <stts22h_write_reg>
 800d7ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	@ 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d07c      	beq.n	800d8f2 <IKS4A1_ENV_SENSOR_Init+0x116>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	f200 80b2 	bhi.w	800d964 <IKS4A1_ENV_SENSOR_Init+0x188>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <IKS4A1_ENV_SENSOR_Init+0x32>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d039      	beq.n	800d880 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800d80c:	e0aa      	b.n	800d964 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800d80e:	6838      	ldr	r0, [r7, #0]
 800d810:	f000 f8f2 	bl	800d9f8 <STTS22H_0_Probe>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d002      	beq.n	800d820 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800d81a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d81e:	e0df      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800d820:	4a71      	ldr	r2, [pc, #452]	@ (800d9e8 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4970      	ldr	r1, [pc, #448]	@ (800d9ec <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d832:	f107 0108 	add.w	r1, r7, #8
 800d836:	4610      	mov	r0, r2
 800d838:	4798      	blx	r3
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800d840:	f06f 0306 	mvn.w	r3, #6
 800d844:	e0cc      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800d846:	7a3b      	ldrb	r3, [r7, #8]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d103      	bne.n	800d854 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	f043 0301 	orr.w	r3, r3, #1
 800d852:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800d854:	7abb      	ldrb	r3, [r7, #10]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d103      	bne.n	800d862 <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800d85a:	6a3b      	ldr	r3, [r7, #32]
 800d85c:	f043 0304 	orr.w	r3, r3, #4
 800d860:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800d862:	7a7b      	ldrb	r3, [r7, #9]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d103      	bne.n	800d870 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	f043 0302 	orr.w	r3, r3, #2
 800d86e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800d870:	7afb      	ldrb	r3, [r7, #11]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d17a      	bne.n	800d96c <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	f043 0308 	orr.w	r3, r3, #8
 800d87c:	623b      	str	r3, [r7, #32]
      }
      break;
 800d87e:	e075      	b.n	800d96c <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800d880:	6838      	ldr	r0, [r7, #0]
 800d882:	f000 f96f 	bl	800db64 <LPS22DF_0_Probe>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800d88c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d890:	e0a6      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800d892:	4a55      	ldr	r2, [pc, #340]	@ (800d9e8 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	4953      	ldr	r1, [pc, #332]	@ (800d9ec <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d8a4:	f107 0108 	add.w	r1, r7, #8
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4798      	blx	r3
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d002      	beq.n	800d8b8 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800d8b2:	f06f 0306 	mvn.w	r3, #6
 800d8b6:	e093      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800d8b8:	7a3b      	ldrb	r3, [r7, #8]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d103      	bne.n	800d8c6 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	f043 0301 	orr.w	r3, r3, #1
 800d8c4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800d8c6:	7abb      	ldrb	r3, [r7, #10]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d103      	bne.n	800d8d4 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	f043 0304 	orr.w	r3, r3, #4
 800d8d2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800d8d4:	7a7b      	ldrb	r3, [r7, #9]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d103      	bne.n	800d8e2 <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	f043 0302 	orr.w	r3, r3, #2
 800d8e0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800d8e2:	7afb      	ldrb	r3, [r7, #11]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d143      	bne.n	800d970 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	f043 0308 	orr.w	r3, r3, #8
 800d8ee:	623b      	str	r3, [r7, #32]
      }
      break;
 800d8f0:	e03e      	b.n	800d970 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800d8f2:	6838      	ldr	r0, [r7, #0]
 800d8f4:	f000 fa06 	bl	800dd04 <SHT40AD1B_0_Probe>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d002      	beq.n	800d904 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800d8fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d902:	e06d      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800d904:	4a38      	ldr	r2, [pc, #224]	@ (800d9e8 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	4937      	ldr	r1, [pc, #220]	@ (800d9ec <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d916:	f107 0108 	add.w	r1, r7, #8
 800d91a:	4610      	mov	r0, r2
 800d91c:	4798      	blx	r3
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800d924:	f06f 0306 	mvn.w	r3, #6
 800d928:	e05a      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800d92a:	7a3b      	ldrb	r3, [r7, #8]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d103      	bne.n	800d938 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	f043 0301 	orr.w	r3, r3, #1
 800d936:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800d938:	7abb      	ldrb	r3, [r7, #10]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d103      	bne.n	800d946 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800d93e:	6a3b      	ldr	r3, [r7, #32]
 800d940:	f043 0304 	orr.w	r3, r3, #4
 800d944:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800d946:	7a7b      	ldrb	r3, [r7, #9]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d103      	bne.n	800d954 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800d94c:	6a3b      	ldr	r3, [r7, #32]
 800d94e:	f043 0302 	orr.w	r3, r3, #2
 800d952:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800d954:	7afb      	ldrb	r3, [r7, #11]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d10c      	bne.n	800d974 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	f043 0308 	orr.w	r3, r3, #8
 800d960:	623b      	str	r3, [r7, #32]
      }
      break;
 800d962:	e007      	b.n	800d974 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800d964:	f06f 0301 	mvn.w	r3, #1
 800d968:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800d96a:	e004      	b.n	800d976 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800d96c:	bf00      	nop
 800d96e:	e002      	b.n	800d976 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800d970:	bf00      	nop
 800d972:	e000      	b.n	800d976 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800d974:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800d976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800d97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97e:	e02f      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800d980:	2300      	movs	r3, #0
 800d982:	627b      	str	r3, [r7, #36]	@ 0x24
 800d984:	e028      	b.n	800d9d8 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98a:	4013      	ands	r3, r2
 800d98c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d98e:	429a      	cmp	r2, r3
 800d990:	d11c      	bne.n	800d9cc <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800d992:	6a3a      	ldr	r2, [r7, #32]
 800d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d996:	4013      	ands	r3, r2
 800d998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d116      	bne.n	800d9cc <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800d99e:	4a14      	ldr	r2, [pc, #80]	@ (800d9f0 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800d9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a6:	4913      	ldr	r1, [pc, #76]	@ (800d9f4 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	0092      	lsls	r2, r2, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	490d      	ldr	r1, [pc, #52]	@ (800d9ec <IKS4A1_ENV_SENSOR_Init+0x210>)
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4798      	blx	r3
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800d9c6:	f06f 0304 	mvn.w	r3, #4
 800d9ca:	e009      	b.n	800d9e0 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800d9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	d9d3      	bls.n	800d986 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800d9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3730      	adds	r7, #48	@ 0x30
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	20001318 	.word	0x20001318
 800d9ec:	200012dc 	.word	0x200012dc
 800d9f0:	200002ec 	.word	0x200002ec
 800d9f4:	200012e8 	.word	0x200012e8

0800d9f8 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b092      	sub	sp, #72	@ 0x48
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800da00:	2300      	movs	r3, #0
 800da02:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800da04:	2300      	movs	r3, #0
 800da06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800da08:	2371      	movs	r3, #113	@ 0x71
 800da0a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_Init;
 800da0e:	4b47      	ldr	r3, [pc, #284]	@ (800db2c <STTS22H_0_Probe+0x134>)
 800da10:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800da12:	4b47      	ldr	r3, [pc, #284]	@ (800db30 <STTS22H_0_Probe+0x138>)
 800da14:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800da16:	4b47      	ldr	r3, [pc, #284]	@ (800db34 <STTS22H_0_Probe+0x13c>)
 800da18:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800da1a:	4b47      	ldr	r3, [pc, #284]	@ (800db38 <STTS22H_0_Probe+0x140>)
 800da1c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GetTick;
 800da1e:	4b47      	ldr	r3, [pc, #284]	@ (800db3c <STTS22H_0_Probe+0x144>)
 800da20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_Delay;
 800da22:	4b47      	ldr	r3, [pc, #284]	@ (800db40 <STTS22H_0_Probe+0x148>)
 800da24:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800da26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da2a:	4619      	mov	r1, r3
 800da2c:	4845      	ldr	r0, [pc, #276]	@ (800db44 <STTS22H_0_Probe+0x14c>)
 800da2e:	f7ff f9d3 	bl	800cdd8 <STTS22H_RegisterBusIO>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d003      	beq.n	800da40 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800da38:	f06f 0306 	mvn.w	r3, #6
 800da3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da3e:	e06f      	b.n	800db20 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800da40:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800da44:	4619      	mov	r1, r3
 800da46:	483f      	ldr	r0, [pc, #252]	@ (800db44 <STTS22H_0_Probe+0x14c>)
 800da48:	f7ff fa65 	bl	800cf16 <STTS22H_ReadID>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800da52:	f06f 0306 	mvn.w	r3, #6
 800da56:	647b      	str	r3, [r7, #68]	@ 0x44
 800da58:	e062      	b.n	800db20 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800da5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800da5e:	2ba0      	cmp	r3, #160	@ 0xa0
 800da60:	d003      	beq.n	800da6a <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800da62:	f06f 0306 	mvn.w	r3, #6
 800da66:	647b      	str	r3, [r7, #68]	@ 0x44
 800da68:	e05a      	b.n	800db20 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800da6a:	f107 0308 	add.w	r3, r7, #8
 800da6e:	4619      	mov	r1, r3
 800da70:	4834      	ldr	r0, [pc, #208]	@ (800db44 <STTS22H_0_Probe+0x14c>)
 800da72:	f7ff fa6b 	bl	800cf4c <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800da76:	7a3b      	ldrb	r3, [r7, #8]
 800da78:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800da7a:	7a7b      	ldrb	r3, [r7, #9]
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800da80:	7abb      	ldrb	r3, [r7, #10]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800da86:	7afb      	ldrb	r3, [r7, #11]
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800da8c:	4a2e      	ldr	r2, [pc, #184]	@ (800db48 <STTS22H_0_Probe+0x150>)
 800da8e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800da90:	4b2e      	ldr	r3, [pc, #184]	@ (800db4c <STTS22H_0_Probe+0x154>)
 800da92:	4a2c      	ldr	r2, [pc, #176]	@ (800db44 <STTS22H_0_Probe+0x14c>)
 800da94:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800da96:	4b2e      	ldr	r3, [pc, #184]	@ (800db50 <STTS22H_0_Probe+0x158>)
 800da98:	4a2e      	ldr	r2, [pc, #184]	@ (800db54 <STTS22H_0_Probe+0x15c>)
 800da9a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800da9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d11d      	bne.n	800dade <STTS22H_0_Probe+0xe6>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d018      	beq.n	800dade <STTS22H_0_Probe+0xe6>
 800daac:	7a3b      	ldrb	r3, [r7, #8]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d115      	bne.n	800dade <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800dab2:	4b29      	ldr	r3, [pc, #164]	@ (800db58 <STTS22H_0_Probe+0x160>)
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	4a29      	ldr	r2, [pc, #164]	@ (800db5c <STTS22H_0_Probe+0x164>)
 800dab8:	4929      	ldr	r1, [pc, #164]	@ (800db60 <STTS22H_0_Probe+0x168>)
 800daba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800dabe:	4b24      	ldr	r3, [pc, #144]	@ (800db50 <STTS22H_0_Probe+0x158>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a21      	ldr	r2, [pc, #132]	@ (800db4c <STTS22H_0_Probe+0x154>)
 800dac6:	6812      	ldr	r2, [r2, #0]
 800dac8:	4610      	mov	r0, r2
 800daca:	4798      	blx	r3
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dad2:	f06f 0304 	mvn.w	r3, #4
 800dad6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dad8:	e001      	b.n	800dade <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dada:	2300      	movs	r3, #0
 800dadc:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800dade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d107      	bne.n	800daf4 <STTS22H_0_Probe+0xfc>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f003 0304 	and.w	r3, r3, #4
 800daea:	2b00      	cmp	r3, #0
 800daec:	d002      	beq.n	800daf4 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800daee:	f06f 0304 	mvn.w	r3, #4
 800daf2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800daf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d107      	bne.n	800db0a <STTS22H_0_Probe+0x112>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f003 0302 	and.w	r3, r3, #2
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800db04:	f06f 0304 	mvn.w	r3, #4
 800db08:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800db0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d107      	bne.n	800db20 <STTS22H_0_Probe+0x128>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f003 0308 	and.w	r3, r3, #8
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800db1a:	f06f 0304 	mvn.w	r3, #4
 800db1e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800db20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800db22:	4618      	mov	r0, r3
 800db24:	3748      	adds	r7, #72	@ 0x48
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	08005605 	.word	0x08005605
 800db30:	08005669 	.word	0x08005669
 800db34:	0800571d 	.word	0x0800571d
 800db38:	080056b9 	.word	0x080056b9
 800db3c:	08005829 	.word	0x08005829
 800db40:	0800ed45 	.word	0x0800ed45
 800db44:	20001330 	.word	0x20001330
 800db48:	20001324 	.word	0x20001324
 800db4c:	200012dc 	.word	0x200012dc
 800db50:	20001318 	.word	0x20001318
 800db54:	200002c8 	.word	0x200002c8
 800db58:	200002ec 	.word	0x200002ec
 800db5c:	200012e8 	.word	0x200012e8
 800db60:	200002d8 	.word	0x200002d8

0800db64 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b092      	sub	sp, #72	@ 0x48
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800db6c:	2300      	movs	r3, #0
 800db6e:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800db70:	2300      	movs	r3, #0
 800db72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800db74:	23bb      	movs	r3, #187	@ 0xbb
 800db76:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_Init;
 800db7a:	4b53      	ldr	r3, [pc, #332]	@ (800dcc8 <LPS22DF_0_Probe+0x164>)
 800db7c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800db7e:	4b53      	ldr	r3, [pc, #332]	@ (800dccc <LPS22DF_0_Probe+0x168>)
 800db80:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800db82:	4b53      	ldr	r3, [pc, #332]	@ (800dcd0 <LPS22DF_0_Probe+0x16c>)
 800db84:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800db86:	4b53      	ldr	r3, [pc, #332]	@ (800dcd4 <LPS22DF_0_Probe+0x170>)
 800db88:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GetTick;
 800db8a:	4b53      	ldr	r3, [pc, #332]	@ (800dcd8 <LPS22DF_0_Probe+0x174>)
 800db8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_Delay;
 800db8e:	4b53      	ldr	r3, [pc, #332]	@ (800dcdc <LPS22DF_0_Probe+0x178>)
 800db90:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800db92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db96:	4619      	mov	r1, r3
 800db98:	4851      	ldr	r0, [pc, #324]	@ (800dce0 <LPS22DF_0_Probe+0x17c>)
 800db9a:	f7fa fc17 	bl	80083cc <LPS22DF_RegisterBusIO>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800dba4:	f06f 0306 	mvn.w	r3, #6
 800dba8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbaa:	e087      	b.n	800dcbc <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800dbac:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	484b      	ldr	r0, [pc, #300]	@ (800dce0 <LPS22DF_0_Probe+0x17c>)
 800dbb4:	f7fa fcb3 	bl	800851e <LPS22DF_ReadID>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800dbbe:	f06f 0306 	mvn.w	r3, #6
 800dbc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbc4:	e07a      	b.n	800dcbc <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800dbc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dbca:	2bb4      	cmp	r3, #180	@ 0xb4
 800dbcc:	d003      	beq.n	800dbd6 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800dbce:	f06f 0306 	mvn.w	r3, #6
 800dbd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbd4:	e072      	b.n	800dcbc <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4840      	ldr	r0, [pc, #256]	@ (800dce0 <LPS22DF_0_Probe+0x17c>)
 800dbde:	f7fa fcb9 	bl	8008554 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800dbe2:	7a3b      	ldrb	r3, [r7, #8]
 800dbe4:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800dbe6:	7a7b      	ldrb	r3, [r7, #9]
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800dbec:	7abb      	ldrb	r3, [r7, #10]
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800dbf2:	7afb      	ldrb	r3, [r7, #11]
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800dbf8:	4a3a      	ldr	r2, [pc, #232]	@ (800dce4 <LPS22DF_0_Probe+0x180>)
 800dbfa:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800dbfc:	4b3a      	ldr	r3, [pc, #232]	@ (800dce8 <LPS22DF_0_Probe+0x184>)
 800dbfe:	4a38      	ldr	r2, [pc, #224]	@ (800dce0 <LPS22DF_0_Probe+0x17c>)
 800dc00:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800dc02:	4b3a      	ldr	r3, [pc, #232]	@ (800dcec <LPS22DF_0_Probe+0x188>)
 800dc04:	4a3a      	ldr	r2, [pc, #232]	@ (800dcf0 <LPS22DF_0_Probe+0x18c>)
 800dc06:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800dc08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d11e      	bne.n	800dc4c <LPS22DF_0_Probe+0xe8>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d019      	beq.n	800dc4c <LPS22DF_0_Probe+0xe8>
 800dc18:	7a3b      	ldrb	r3, [r7, #8]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d116      	bne.n	800dc4c <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800dc1e:	4b35      	ldr	r3, [pc, #212]	@ (800dcf4 <LPS22DF_0_Probe+0x190>)
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	4a35      	ldr	r2, [pc, #212]	@ (800dcf8 <LPS22DF_0_Probe+0x194>)
 800dc24:	3304      	adds	r3, #4
 800dc26:	4935      	ldr	r1, [pc, #212]	@ (800dcfc <LPS22DF_0_Probe+0x198>)
 800dc28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800dc2c:	4b2f      	ldr	r3, [pc, #188]	@ (800dcec <LPS22DF_0_Probe+0x188>)
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a2d      	ldr	r2, [pc, #180]	@ (800dce8 <LPS22DF_0_Probe+0x184>)
 800dc34:	6852      	ldr	r2, [r2, #4]
 800dc36:	4610      	mov	r0, r2
 800dc38:	4798      	blx	r3
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dc40:	f06f 0304 	mvn.w	r3, #4
 800dc44:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc46:	e001      	b.n	800dc4c <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800dc4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d11e      	bne.n	800dc90 <LPS22DF_0_Probe+0x12c>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f003 0302 	and.w	r3, r3, #2
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d019      	beq.n	800dc90 <LPS22DF_0_Probe+0x12c>
 800dc5c:	7a7b      	ldrb	r3, [r7, #9]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d116      	bne.n	800dc90 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800dc62:	4b24      	ldr	r3, [pc, #144]	@ (800dcf4 <LPS22DF_0_Probe+0x190>)
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	4a24      	ldr	r2, [pc, #144]	@ (800dcf8 <LPS22DF_0_Probe+0x194>)
 800dc68:	3304      	adds	r3, #4
 800dc6a:	4925      	ldr	r1, [pc, #148]	@ (800dd00 <LPS22DF_0_Probe+0x19c>)
 800dc6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800dc70:	4b1e      	ldr	r3, [pc, #120]	@ (800dcec <LPS22DF_0_Probe+0x188>)
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a1c      	ldr	r2, [pc, #112]	@ (800dce8 <LPS22DF_0_Probe+0x184>)
 800dc78:	6852      	ldr	r2, [r2, #4]
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	4798      	blx	r3
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dc84:	f06f 0304 	mvn.w	r3, #4
 800dc88:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc8a:	e001      	b.n	800dc90 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800dc90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d107      	bne.n	800dca6 <LPS22DF_0_Probe+0x142>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f003 0304 	and.w	r3, r3, #4
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800dca0:	f06f 0304 	mvn.w	r3, #4
 800dca4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800dca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d107      	bne.n	800dcbc <LPS22DF_0_Probe+0x158>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f003 0308 	and.w	r3, r3, #8
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800dcb6:	f06f 0304 	mvn.w	r3, #4
 800dcba:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800dcbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3748      	adds	r7, #72	@ 0x48
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	08005605 	.word	0x08005605
 800dccc:	08005669 	.word	0x08005669
 800dcd0:	0800571d 	.word	0x0800571d
 800dcd4:	080056b9 	.word	0x080056b9
 800dcd8:	08005829 	.word	0x08005829
 800dcdc:	0800ed45 	.word	0x0800ed45
 800dce0:	20001368 	.word	0x20001368
 800dce4:	20001324 	.word	0x20001324
 800dce8:	200012dc 	.word	0x200012dc
 800dcec:	20001318 	.word	0x20001318
 800dcf0:	200001a8 	.word	0x200001a8
 800dcf4:	200002ec 	.word	0x200002ec
 800dcf8:	200012e8 	.word	0x200012e8
 800dcfc:	200001cc 	.word	0x200001cc
 800dd00:	200001b8 	.word	0x200001b8

0800dd04 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b092      	sub	sp, #72	@ 0x48
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800dd10:	2300      	movs	r3, #0
 800dd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800dd14:	2389      	movs	r3, #137	@ 0x89
 800dd16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_Init;
 800dd1a:	4b53      	ldr	r3, [pc, #332]	@ (800de68 <SHT40AD1B_0_Probe+0x164>)
 800dd1c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800dd1e:	4b53      	ldr	r3, [pc, #332]	@ (800de6c <SHT40AD1B_0_Probe+0x168>)
 800dd20:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_Read;
 800dd22:	4b53      	ldr	r3, [pc, #332]	@ (800de70 <SHT40AD1B_0_Probe+0x16c>)
 800dd24:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_Write;
 800dd26:	4b53      	ldr	r3, [pc, #332]	@ (800de74 <SHT40AD1B_0_Probe+0x170>)
 800dd28:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GetTick;
 800dd2a:	4b53      	ldr	r3, [pc, #332]	@ (800de78 <SHT40AD1B_0_Probe+0x174>)
 800dd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_Delay;
 800dd2e:	4b53      	ldr	r3, [pc, #332]	@ (800de7c <SHT40AD1B_0_Probe+0x178>)
 800dd30:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800dd32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd36:	4619      	mov	r1, r3
 800dd38:	4851      	ldr	r0, [pc, #324]	@ (800de80 <SHT40AD1B_0_Probe+0x17c>)
 800dd3a:	f7fe fd4b 	bl	800c7d4 <SHT40AD1B_RegisterBusIO>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d003      	beq.n	800dd4c <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800dd44:	f06f 0306 	mvn.w	r3, #6
 800dd48:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd4a:	e087      	b.n	800de5c <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800dd4c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800dd50:	4619      	mov	r1, r3
 800dd52:	484b      	ldr	r0, [pc, #300]	@ (800de80 <SHT40AD1B_0_Probe+0x17c>)
 800dd54:	f7fe fdae 	bl	800c8b4 <SHT40AD1B_ReadID>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800dd5e:	f06f 0306 	mvn.w	r3, #6
 800dd62:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd64:	e07a      	b.n	800de5c <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800dd66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d003      	beq.n	800dd76 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800dd6e:	f06f 0306 	mvn.w	r3, #6
 800dd72:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd74:	e072      	b.n	800de5c <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800dd76:	f107 0308 	add.w	r3, r7, #8
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	4840      	ldr	r0, [pc, #256]	@ (800de80 <SHT40AD1B_0_Probe+0x17c>)
 800dd7e:	f7fe fda9 	bl	800c8d4 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800dd82:	7a3b      	ldrb	r3, [r7, #8]
 800dd84:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800dd86:	7a7b      	ldrb	r3, [r7, #9]
 800dd88:	005b      	lsls	r3, r3, #1
 800dd8a:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800dd8c:	7abb      	ldrb	r3, [r7, #10]
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800dd92:	7afb      	ldrb	r3, [r7, #11]
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800dd98:	4a3a      	ldr	r2, [pc, #232]	@ (800de84 <SHT40AD1B_0_Probe+0x180>)
 800dd9a:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800dd9c:	4b3a      	ldr	r3, [pc, #232]	@ (800de88 <SHT40AD1B_0_Probe+0x184>)
 800dd9e:	4a38      	ldr	r2, [pc, #224]	@ (800de80 <SHT40AD1B_0_Probe+0x17c>)
 800dda0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800dda2:	4b3a      	ldr	r3, [pc, #232]	@ (800de8c <SHT40AD1B_0_Probe+0x188>)
 800dda4:	4a3a      	ldr	r2, [pc, #232]	@ (800de90 <SHT40AD1B_0_Probe+0x18c>)
 800dda6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800dda8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d11e      	bne.n	800ddec <SHT40AD1B_0_Probe+0xe8>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d019      	beq.n	800ddec <SHT40AD1B_0_Probe+0xe8>
 800ddb8:	7a3b      	ldrb	r3, [r7, #8]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d116      	bne.n	800ddec <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800ddbe:	4b35      	ldr	r3, [pc, #212]	@ (800de94 <SHT40AD1B_0_Probe+0x190>)
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	4a35      	ldr	r2, [pc, #212]	@ (800de98 <SHT40AD1B_0_Probe+0x194>)
 800ddc4:	3308      	adds	r3, #8
 800ddc6:	4935      	ldr	r1, [pc, #212]	@ (800de9c <SHT40AD1B_0_Probe+0x198>)
 800ddc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800ddcc:	4b2f      	ldr	r3, [pc, #188]	@ (800de8c <SHT40AD1B_0_Probe+0x188>)
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a2d      	ldr	r2, [pc, #180]	@ (800de88 <SHT40AD1B_0_Probe+0x184>)
 800ddd4:	6892      	ldr	r2, [r2, #8]
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	4798      	blx	r3
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800dde0:	f06f 0304 	mvn.w	r3, #4
 800dde4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dde6:	e001      	b.n	800ddec <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800dde8:	2300      	movs	r3, #0
 800ddea:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800ddec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d11e      	bne.n	800de30 <SHT40AD1B_0_Probe+0x12c>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f003 0304 	and.w	r3, r3, #4
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d019      	beq.n	800de30 <SHT40AD1B_0_Probe+0x12c>
 800ddfc:	7abb      	ldrb	r3, [r7, #10]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d116      	bne.n	800de30 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800de02:	4b24      	ldr	r3, [pc, #144]	@ (800de94 <SHT40AD1B_0_Probe+0x190>)
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	4a24      	ldr	r2, [pc, #144]	@ (800de98 <SHT40AD1B_0_Probe+0x194>)
 800de08:	3308      	adds	r3, #8
 800de0a:	4925      	ldr	r1, [pc, #148]	@ (800dea0 <SHT40AD1B_0_Probe+0x19c>)
 800de0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800de10:	4b1e      	ldr	r3, [pc, #120]	@ (800de8c <SHT40AD1B_0_Probe+0x188>)
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a1c      	ldr	r2, [pc, #112]	@ (800de88 <SHT40AD1B_0_Probe+0x184>)
 800de18:	6892      	ldr	r2, [r2, #8]
 800de1a:	4610      	mov	r0, r2
 800de1c:	4798      	blx	r3
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d003      	beq.n	800de2c <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800de24:	f06f 0304 	mvn.w	r3, #4
 800de28:	647b      	str	r3, [r7, #68]	@ 0x44
 800de2a:	e001      	b.n	800de30 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800de2c:	2300      	movs	r3, #0
 800de2e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800de30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de32:	2b00      	cmp	r3, #0
 800de34:	d107      	bne.n	800de46 <SHT40AD1B_0_Probe+0x142>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f003 0302 	and.w	r3, r3, #2
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800de40:	f06f 0304 	mvn.w	r3, #4
 800de44:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800de46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d107      	bne.n	800de5c <SHT40AD1B_0_Probe+0x158>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f003 0308 	and.w	r3, r3, #8
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800de56:	f06f 0304 	mvn.w	r3, #4
 800de5a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800de5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3748      	adds	r7, #72	@ 0x48
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	08005605 	.word	0x08005605
 800de6c:	08005669 	.word	0x08005669
 800de70:	080057d5 	.word	0x080057d5
 800de74:	08005781 	.word	0x08005781
 800de78:	08005829 	.word	0x08005829
 800de7c:	0800ed45 	.word	0x0800ed45
 800de80:	200013a0 	.word	0x200013a0
 800de84:	20001324 	.word	0x20001324
 800de88:	200012dc 	.word	0x200012dc
 800de8c:	20001318 	.word	0x20001318
 800de90:	20000290 	.word	0x20000290
 800de94:	200002ec 	.word	0x200002ec
 800de98:	200012e8 	.word	0x200012e8
 800de9c:	200002b4 	.word	0x200002b4
 800dea0:	200002a0 	.word	0x200002a0

0800dea4 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08e      	sub	sp, #56	@ 0x38
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800deae:	2300      	movs	r3, #0
 800deb0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800deb2:	2301      	movs	r3, #1
 800deb4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b03      	cmp	r3, #3
 800debe:	f200 80d4 	bhi.w	800e06a <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800dec2:	a201      	add	r2, pc, #4	@ (adr r2, 800dec8 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800dec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec8:	0800ded9 	.word	0x0800ded9
 800decc:	0800df3f 	.word	0x0800df3f
 800ded0:	0800dfa3 	.word	0x0800dfa3
 800ded4:	0800e007 	.word	0x0800e007
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800ded8:	6838      	ldr	r0, [r7, #0]
 800deda:	f000 f9e3 	bl	800e2a4 <LIS2MDL_0_Probe>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800dee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dee8:	e101      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800deea:	4a83      	ldr	r2, [pc, #524]	@ (800e0f8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	4981      	ldr	r1, [pc, #516]	@ (800e0fc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800defc:	f107 010c 	add.w	r1, r7, #12
 800df00:	4610      	mov	r0, r2
 800df02:	4798      	blx	r3
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d002      	beq.n	800df10 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800df0a:	f06f 0306 	mvn.w	r3, #6
 800df0e:	e0ee      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800df10:	7b3b      	ldrb	r3, [r7, #12]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d103      	bne.n	800df1e <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800df16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df18:	f043 0302 	orr.w	r3, r3, #2
 800df1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800df1e:	7b7b      	ldrb	r3, [r7, #13]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d103      	bne.n	800df2c <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800df24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df26:	f043 0301 	orr.w	r3, r3, #1
 800df2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	f040 809f 	bne.w	800e072 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800df34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df36:	f043 0304 	orr.w	r3, r3, #4
 800df3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800df3c:	e099      	b.n	800e072 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800df3e:	6838      	ldr	r0, [r7, #0]
 800df40:	f000 fa58 	bl	800e3f4 <LSM6DSV16X_0_Probe>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800df4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df4e:	e0ce      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800df50:	4a69      	ldr	r2, [pc, #420]	@ (800e0f8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	4968      	ldr	r1, [pc, #416]	@ (800e0fc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800df62:	f107 010c 	add.w	r1, r7, #12
 800df66:	4610      	mov	r0, r2
 800df68:	4798      	blx	r3
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800df70:	f06f 0306 	mvn.w	r3, #6
 800df74:	e0bb      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800df76:	7b3b      	ldrb	r3, [r7, #12]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d103      	bne.n	800df84 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800df7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df7e:	f043 0302 	orr.w	r3, r3, #2
 800df82:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800df84:	7b7b      	ldrb	r3, [r7, #13]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d103      	bne.n	800df92 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800df8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8c:	f043 0301 	orr.w	r3, r3, #1
 800df90:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d16e      	bne.n	800e076 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	f043 0304 	orr.w	r3, r3, #4
 800df9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800dfa0:	e069      	b.n	800e076 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f000 fae8 	bl	800e578 <LIS2DUXS12_0_Probe>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800dfae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfb2:	e09c      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800dfb4:	4a50      	ldr	r2, [pc, #320]	@ (800e0f8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	494f      	ldr	r1, [pc, #316]	@ (800e0fc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dfc6:	f107 010c 	add.w	r1, r7, #12
 800dfca:	4610      	mov	r0, r2
 800dfcc:	4798      	blx	r3
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800dfd4:	f06f 0306 	mvn.w	r3, #6
 800dfd8:	e089      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800dfda:	7b3b      	ldrb	r3, [r7, #12]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d103      	bne.n	800dfe8 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800dfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe2:	f043 0302 	orr.w	r3, r3, #2
 800dfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800dfe8:	7b7b      	ldrb	r3, [r7, #13]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d103      	bne.n	800dff6 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800dfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff0:	f043 0301 	orr.w	r3, r3, #1
 800dff4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800dff6:	7bbb      	ldrb	r3, [r7, #14]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d13e      	bne.n	800e07a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800dffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffe:	f043 0304 	orr.w	r3, r3, #4
 800e002:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800e004:	e039      	b.n	800e07a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800e006:	6838      	ldr	r0, [r7, #0]
 800e008:	f000 fb62 	bl	800e6d0 <LSM6DSO16IS_0_Probe>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800e012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e016:	e06a      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800e018:	4a37      	ldr	r2, [pc, #220]	@ (800e0f8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	4936      	ldr	r1, [pc, #216]	@ (800e0fc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e02a:	f107 010c 	add.w	r1, r7, #12
 800e02e:	4610      	mov	r0, r2
 800e030:	4798      	blx	r3
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800e038:	f06f 0306 	mvn.w	r3, #6
 800e03c:	e057      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800e03e:	7b3b      	ldrb	r3, [r7, #12]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d103      	bne.n	800e04c <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800e044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e046:	f043 0302 	orr.w	r3, r3, #2
 800e04a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800e04c:	7b7b      	ldrb	r3, [r7, #13]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d103      	bne.n	800e05a <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	f043 0301 	orr.w	r3, r3, #1
 800e058:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800e05a:	7bbb      	ldrb	r3, [r7, #14]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d10e      	bne.n	800e07e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800e060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e062:	f043 0304 	orr.w	r3, r3, #4
 800e066:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800e068:	e009      	b.n	800e07e <IKS4A1_MOTION_SENSOR_Init+0x1da>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800e06a:	f06f 0301 	mvn.w	r3, #1
 800e06e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800e070:	e006      	b.n	800e080 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800e072:	bf00      	nop
 800e074:	e004      	b.n	800e080 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800e076:	bf00      	nop
 800e078:	e002      	b.n	800e080 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800e07a:	bf00      	nop
 800e07c:	e000      	b.n	800e080 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800e07e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800e080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800e086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e088:	e031      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800e08a:	2300      	movs	r3, #0
 800e08c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e08e:	e02a      	b.n	800e0e6 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	4013      	ands	r3, r2
 800e096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e098:	429a      	cmp	r2, r3
 800e09a:	d11e      	bne.n	800e0da <IKS4A1_MOTION_SENSOR_Init+0x236>
 800e09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d118      	bne.n	800e0da <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800e0a8:	4a15      	ldr	r2, [pc, #84]	@ (800e100 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e0b0:	4814      	ldr	r0, [pc, #80]	@ (800e104 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	4413      	add	r3, r2
 800e0ba:	440b      	add	r3, r1
 800e0bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	490e      	ldr	r1, [pc, #56]	@ (800e0fc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	4798      	blx	r3
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800e0d4:	f06f 0304 	mvn.w	r3, #4
 800e0d8:	e009      	b.n	800e0ee <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	005b      	lsls	r3, r3, #1
 800e0de:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800e0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d9d1      	bls.n	800e090 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800e0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3738      	adds	r7, #56	@ 0x38
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20001424 	.word	0x20001424
 800e0fc:	200013e4 	.word	0x200013e4
 800e100:	20000310 	.word	0x20000310
 800e104:	200013f4 	.word	0x200013f4

0800e108 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b03      	cmp	r3, #3
 800e118:	d903      	bls.n	800e122 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e11a:	f06f 0301 	mvn.w	r3, #1
 800e11e:	617b      	str	r3, [r7, #20]
 800e120:	e029      	b.n	800e176 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800e122:	4a17      	ldr	r2, [pc, #92]	@ (800e180 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	4013      	ands	r3, r2
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	429a      	cmp	r2, r3
 800e132:	d11d      	bne.n	800e170 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800e134:	4a13      	ldr	r2, [pc, #76]	@ (800e184 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e13c:	4812      	ldr	r0, [pc, #72]	@ (800e188 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	4613      	mov	r3, r2
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	4413      	add	r3, r2
 800e146:	440b      	add	r3, r1
 800e148:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	490f      	ldr	r1, [pc, #60]	@ (800e18c <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e156:	6879      	ldr	r1, [r7, #4]
 800e158:	4610      	mov	r0, r2
 800e15a:	4798      	blx	r3
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d003      	beq.n	800e16a <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e162:	f06f 0304 	mvn.w	r3, #4
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	e005      	b.n	800e176 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e16a:	2300      	movs	r3, #0
 800e16c:	617b      	str	r3, [r7, #20]
 800e16e:	e002      	b.n	800e176 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800e170:	f06f 0301 	mvn.w	r3, #1
 800e174:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800e176:	697b      	ldr	r3, [r7, #20]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3718      	adds	r7, #24
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20001434 	.word	0x20001434
 800e184:	20000310 	.word	0x20000310
 800e188:	200013f4 	.word	0x200013f4
 800e18c:	200013e4 	.word	0x200013e4

0800e190 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b03      	cmp	r3, #3
 800e1a2:	d903      	bls.n	800e1ac <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e1a4:	f06f 0301 	mvn.w	r3, #1
 800e1a8:	617b      	str	r3, [r7, #20]
 800e1aa:	e02a      	b.n	800e202 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800e1ac:	4a17      	ldr	r2, [pc, #92]	@ (800e20c <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	4013      	ands	r3, r2
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d11e      	bne.n	800e1fc <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800e1be:	4a14      	ldr	r2, [pc, #80]	@ (800e210 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e1c6:	4813      	ldr	r0, [pc, #76]	@ (800e214 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	4413      	add	r3, r2
 800e1d0:	440b      	add	r3, r1
 800e1d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e1d6:	691b      	ldr	r3, [r3, #16]
 800e1d8:	490f      	ldr	r1, [pc, #60]	@ (800e218 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e1e0:	ed97 0a01 	vldr	s0, [r7, #4]
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e1ee:	f06f 0304 	mvn.w	r3, #4
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	e005      	b.n	800e202 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	e002      	b.n	800e202 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800e1fc:	f06f 0301 	mvn.w	r3, #1
 800e200:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800e202:	697b      	ldr	r3, [r7, #20]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20001434 	.word	0x20001434
 800e210:	20000310 	.word	0x20000310
 800e214:	200013f4 	.word	0x200013f4
 800e218:	200013e4 	.word	0x200013e4

0800e21c <IKS4A1_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d903      	bls.n	800e236 <IKS4A1_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e22e:	f06f 0301 	mvn.w	r3, #1
 800e232:	617b      	str	r3, [r7, #20]
 800e234:	e029      	b.n	800e28a <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800e236:	4a17      	ldr	r2, [pc, #92]	@ (800e294 <IKS4A1_MOTION_SENSOR_SetFullScale+0x78>)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	4013      	ands	r3, r2
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	429a      	cmp	r2, r3
 800e246:	d11d      	bne.n	800e284 <IKS4A1_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800e248:	4a13      	ldr	r2, [pc, #76]	@ (800e298 <IKS4A1_MOTION_SENSOR_SetFullScale+0x7c>)
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e250:	4812      	ldr	r0, [pc, #72]	@ (800e29c <IKS4A1_MOTION_SENSOR_SetFullScale+0x80>)
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	4613      	mov	r3, r2
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	4413      	add	r3, r2
 800e25a:	440b      	add	r3, r1
 800e25c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	490f      	ldr	r1, [pc, #60]	@ (800e2a0 <IKS4A1_MOTION_SENSOR_SetFullScale+0x84>)
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e26a:	6879      	ldr	r1, [r7, #4]
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d003      	beq.n	800e27e <IKS4A1_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e276:	f06f 0304 	mvn.w	r3, #4
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	e005      	b.n	800e28a <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e27e:	2300      	movs	r3, #0
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	e002      	b.n	800e28a <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800e284:	f06f 0301 	mvn.w	r3, #1
 800e288:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800e28a:	697b      	ldr	r3, [r7, #20]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	20001434 	.word	0x20001434
 800e298:	20000310 	.word	0x20000310
 800e29c:	200013f4 	.word	0x200013f4
 800e2a0:	200013e4 	.word	0x200013e4

0800e2a4 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b094      	sub	sp, #80	@ 0x50
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800e2b4:	233d      	movs	r3, #61	@ 0x3d
 800e2b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e2ba:	4b40      	ldr	r3, [pc, #256]	@ (800e3bc <LIS2MDL_0_Probe+0x118>)
 800e2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e2be:	4b40      	ldr	r3, [pc, #256]	@ (800e3c0 <LIS2MDL_0_Probe+0x11c>)
 800e2c0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e2c2:	4b40      	ldr	r3, [pc, #256]	@ (800e3c4 <LIS2MDL_0_Probe+0x120>)
 800e2c4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e2c6:	4b40      	ldr	r3, [pc, #256]	@ (800e3c8 <LIS2MDL_0_Probe+0x124>)
 800e2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e2ca:	4b40      	ldr	r3, [pc, #256]	@ (800e3cc <LIS2MDL_0_Probe+0x128>)
 800e2cc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e2ce:	4b40      	ldr	r3, [pc, #256]	@ (800e3d0 <LIS2MDL_0_Probe+0x12c>)
 800e2d0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800e2d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	483e      	ldr	r0, [pc, #248]	@ (800e3d4 <LIS2MDL_0_Probe+0x130>)
 800e2da:	f7f9 f877 	bl	80073cc <LIS2MDL_RegisterBusIO>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d003      	beq.n	800e2ec <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e2e4:	f06f 0306 	mvn.w	r3, #6
 800e2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2ea:	e061      	b.n	800e3b0 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800e2ec:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	4838      	ldr	r0, [pc, #224]	@ (800e3d4 <LIS2MDL_0_Probe+0x130>)
 800e2f4:	f7f9 f986 	bl	8007604 <LIS2MDL_ReadID>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d003      	beq.n	800e306 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e2fe:	f06f 0306 	mvn.w	r3, #6
 800e302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e304:	e054      	b.n	800e3b0 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800e306:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e30a:	2b40      	cmp	r3, #64	@ 0x40
 800e30c:	d003      	beq.n	800e316 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e30e:	f06f 0306 	mvn.w	r3, #6
 800e312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e314:	e04c      	b.n	800e3b0 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800e316:	f107 030c 	add.w	r3, r7, #12
 800e31a:	4619      	mov	r1, r3
 800e31c:	482d      	ldr	r0, [pc, #180]	@ (800e3d4 <LIS2MDL_0_Probe+0x130>)
 800e31e:	f7f9 f997 	bl	8007650 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e322:	7b7b      	ldrb	r3, [r7, #13]
 800e324:	461a      	mov	r2, r3
 800e326:	7b3b      	ldrb	r3, [r7, #12]
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	431a      	orrs	r2, r3
 800e32c:	7bbb      	ldrb	r3, [r7, #14]
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4313      	orrs	r3, r2
 800e332:	4a29      	ldr	r2, [pc, #164]	@ (800e3d8 <LIS2MDL_0_Probe+0x134>)
 800e334:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800e336:	4b29      	ldr	r3, [pc, #164]	@ (800e3dc <LIS2MDL_0_Probe+0x138>)
 800e338:	4a26      	ldr	r2, [pc, #152]	@ (800e3d4 <LIS2MDL_0_Probe+0x130>)
 800e33a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800e33c:	4b28      	ldr	r3, [pc, #160]	@ (800e3e0 <LIS2MDL_0_Probe+0x13c>)
 800e33e:	4a29      	ldr	r2, [pc, #164]	@ (800e3e4 <LIS2MDL_0_Probe+0x140>)
 800e340:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800e342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e344:	2b00      	cmp	r3, #0
 800e346:	d11d      	bne.n	800e384 <LIS2MDL_0_Probe+0xe0>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f003 0304 	and.w	r3, r3, #4
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d018      	beq.n	800e384 <LIS2MDL_0_Probe+0xe0>
 800e352:	7bbb      	ldrb	r3, [r7, #14]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d115      	bne.n	800e384 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e358:	4b23      	ldr	r3, [pc, #140]	@ (800e3e8 <LIS2MDL_0_Probe+0x144>)
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	4a23      	ldr	r2, [pc, #140]	@ (800e3ec <LIS2MDL_0_Probe+0x148>)
 800e35e:	4924      	ldr	r1, [pc, #144]	@ (800e3f0 <LIS2MDL_0_Probe+0x14c>)
 800e360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800e364:	4b1e      	ldr	r3, [pc, #120]	@ (800e3e0 <LIS2MDL_0_Probe+0x13c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4a1c      	ldr	r2, [pc, #112]	@ (800e3dc <LIS2MDL_0_Probe+0x138>)
 800e36c:	6812      	ldr	r2, [r2, #0]
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e378:	f06f 0304 	mvn.w	r3, #4
 800e37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e37e:	e001      	b.n	800e384 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e380:	2300      	movs	r3, #0
 800e382:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800e384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d107      	bne.n	800e39a <LIS2MDL_0_Probe+0xf6>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f003 0302 	and.w	r3, r3, #2
 800e390:	2b00      	cmp	r3, #0
 800e392:	d002      	beq.n	800e39a <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e394:	f06f 0304 	mvn.w	r3, #4
 800e398:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800e39a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d107      	bne.n	800e3b0 <LIS2MDL_0_Probe+0x10c>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d002      	beq.n	800e3b0 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e3aa:	f06f 0304 	mvn.w	r3, #4
 800e3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3750      	adds	r7, #80	@ 0x50
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	08005605 	.word	0x08005605
 800e3c0:	08005669 	.word	0x08005669
 800e3c4:	0800571d 	.word	0x0800571d
 800e3c8:	080056b9 	.word	0x080056b9
 800e3cc:	08005829 	.word	0x08005829
 800e3d0:	0800ed45 	.word	0x0800ed45
 800e3d4:	20001444 	.word	0x20001444
 800e3d8:	20001434 	.word	0x20001434
 800e3dc:	200013e4 	.word	0x200013e4
 800e3e0:	20001424 	.word	0x20001424
 800e3e4:	20000174 	.word	0x20000174
 800e3e8:	20000310 	.word	0x20000310
 800e3ec:	200013f4 	.word	0x200013f4
 800e3f0:	20000184 	.word	0x20000184

0800e3f4 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b094      	sub	sp, #80	@ 0x50
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800e400:	2300      	movs	r3, #0
 800e402:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800e404:	23d7      	movs	r3, #215	@ 0xd7
 800e406:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e40a:	4b4c      	ldr	r3, [pc, #304]	@ (800e53c <LSM6DSV16X_0_Probe+0x148>)
 800e40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e40e:	4b4c      	ldr	r3, [pc, #304]	@ (800e540 <LSM6DSV16X_0_Probe+0x14c>)
 800e410:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e412:	4b4c      	ldr	r3, [pc, #304]	@ (800e544 <LSM6DSV16X_0_Probe+0x150>)
 800e414:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e416:	4b4c      	ldr	r3, [pc, #304]	@ (800e548 <LSM6DSV16X_0_Probe+0x154>)
 800e418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e41a:	4b4c      	ldr	r3, [pc, #304]	@ (800e54c <LSM6DSV16X_0_Probe+0x158>)
 800e41c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e41e:	4b4c      	ldr	r3, [pc, #304]	@ (800e550 <LSM6DSV16X_0_Probe+0x15c>)
 800e420:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800e422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e426:	4619      	mov	r1, r3
 800e428:	484a      	ldr	r0, [pc, #296]	@ (800e554 <LSM6DSV16X_0_Probe+0x160>)
 800e42a:	f7fc fc1f 	bl	800ac6c <LSM6DSV16X_RegisterBusIO>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e434:	f06f 0306 	mvn.w	r3, #6
 800e438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e43a:	e079      	b.n	800e530 <LSM6DSV16X_0_Probe+0x13c>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800e43c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e440:	4619      	mov	r1, r3
 800e442:	4844      	ldr	r0, [pc, #272]	@ (800e554 <LSM6DSV16X_0_Probe+0x160>)
 800e444:	f7fc fd38 	bl	800aeb8 <LSM6DSV16X_ReadID>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d003      	beq.n	800e456 <LSM6DSV16X_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e44e:	f06f 0306 	mvn.w	r3, #6
 800e452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e454:	e06c      	b.n	800e530 <LSM6DSV16X_0_Probe+0x13c>
  }
  else if (id != LSM6DSV16X_ID)
 800e456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e45a:	2b70      	cmp	r3, #112	@ 0x70
 800e45c:	d003      	beq.n	800e466 <LSM6DSV16X_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e45e:	f06f 0306 	mvn.w	r3, #6
 800e462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e464:	e064      	b.n	800e530 <LSM6DSV16X_0_Probe+0x13c>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800e466:	f107 030c 	add.w	r3, r7, #12
 800e46a:	4619      	mov	r1, r3
 800e46c:	4839      	ldr	r0, [pc, #228]	@ (800e554 <LSM6DSV16X_0_Probe+0x160>)
 800e46e:	f7fc fd39 	bl	800aee4 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e472:	7b7b      	ldrb	r3, [r7, #13]
 800e474:	461a      	mov	r2, r3
 800e476:	7b3b      	ldrb	r3, [r7, #12]
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	431a      	orrs	r2, r3
 800e47c:	7bbb      	ldrb	r3, [r7, #14]
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4313      	orrs	r3, r2
 800e482:	4a35      	ldr	r2, [pc, #212]	@ (800e558 <LSM6DSV16X_0_Probe+0x164>)
 800e484:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800e486:	4b35      	ldr	r3, [pc, #212]	@ (800e55c <LSM6DSV16X_0_Probe+0x168>)
 800e488:	4a32      	ldr	r2, [pc, #200]	@ (800e554 <LSM6DSV16X_0_Probe+0x160>)
 800e48a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800e48c:	4b34      	ldr	r3, [pc, #208]	@ (800e560 <LSM6DSV16X_0_Probe+0x16c>)
 800e48e:	4a35      	ldr	r2, [pc, #212]	@ (800e564 <LSM6DSV16X_0_Probe+0x170>)
 800e490:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800e492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e494:	2b00      	cmp	r3, #0
 800e496:	d11e      	bne.n	800e4d6 <LSM6DSV16X_0_Probe+0xe2>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f003 0301 	and.w	r3, r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d019      	beq.n	800e4d6 <LSM6DSV16X_0_Probe+0xe2>
 800e4a2:	7b7b      	ldrb	r3, [r7, #13]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d116      	bne.n	800e4d6 <LSM6DSV16X_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e4a8:	4b2f      	ldr	r3, [pc, #188]	@ (800e568 <LSM6DSV16X_0_Probe+0x174>)
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	4a2f      	ldr	r2, [pc, #188]	@ (800e56c <LSM6DSV16X_0_Probe+0x178>)
 800e4ae:	3303      	adds	r3, #3
 800e4b0:	492f      	ldr	r1, [pc, #188]	@ (800e570 <LSM6DSV16X_0_Probe+0x17c>)
 800e4b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800e4b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e560 <LSM6DSV16X_0_Probe+0x16c>)
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a27      	ldr	r2, [pc, #156]	@ (800e55c <LSM6DSV16X_0_Probe+0x168>)
 800e4be:	6852      	ldr	r2, [r2, #4]
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	4798      	blx	r3
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <LSM6DSV16X_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e4ca:	f06f 0304 	mvn.w	r3, #4
 800e4ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4d0:	e001      	b.n	800e4d6 <LSM6DSV16X_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800e4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d11e      	bne.n	800e51a <LSM6DSV16X_0_Probe+0x126>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f003 0302 	and.w	r3, r3, #2
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d019      	beq.n	800e51a <LSM6DSV16X_0_Probe+0x126>
 800e4e6:	7b3b      	ldrb	r3, [r7, #12]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d116      	bne.n	800e51a <LSM6DSV16X_0_Probe+0x126>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e4ec:	4b1e      	ldr	r3, [pc, #120]	@ (800e568 <LSM6DSV16X_0_Probe+0x174>)
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	4a1e      	ldr	r2, [pc, #120]	@ (800e56c <LSM6DSV16X_0_Probe+0x178>)
 800e4f2:	3303      	adds	r3, #3
 800e4f4:	491f      	ldr	r1, [pc, #124]	@ (800e574 <LSM6DSV16X_0_Probe+0x180>)
 800e4f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800e4fa:	4b19      	ldr	r3, [pc, #100]	@ (800e560 <LSM6DSV16X_0_Probe+0x16c>)
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a16      	ldr	r2, [pc, #88]	@ (800e55c <LSM6DSV16X_0_Probe+0x168>)
 800e502:	6852      	ldr	r2, [r2, #4]
 800e504:	4610      	mov	r0, r2
 800e506:	4798      	blx	r3
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d003      	beq.n	800e516 <LSM6DSV16X_0_Probe+0x122>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e50e:	f06f 0304 	mvn.w	r3, #4
 800e512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e514:	e001      	b.n	800e51a <LSM6DSV16X_0_Probe+0x126>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e516:	2300      	movs	r3, #0
 800e518:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800e51a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d107      	bne.n	800e530 <LSM6DSV16X_0_Probe+0x13c>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f003 0304 	and.w	r3, r3, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	d002      	beq.n	800e530 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e52a:	f06f 0304 	mvn.w	r3, #4
 800e52e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e532:	4618      	mov	r0, r3
 800e534:	3750      	adds	r7, #80	@ 0x50
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	08005605 	.word	0x08005605
 800e540:	08005669 	.word	0x08005669
 800e544:	0800571d 	.word	0x0800571d
 800e548:	080056b9 	.word	0x080056b9
 800e54c:	08005829 	.word	0x08005829
 800e550:	0800ed45 	.word	0x0800ed45
 800e554:	20001478 	.word	0x20001478
 800e558:	20001434 	.word	0x20001434
 800e55c:	200013e4 	.word	0x200013e4
 800e560:	20001424 	.word	0x20001424
 800e564:	20000238 	.word	0x20000238
 800e568:	20000310 	.word	0x20000310
 800e56c:	200013f4 	.word	0x200013f4
 800e570:	2000026c 	.word	0x2000026c
 800e574:	20000248 	.word	0x20000248

0800e578 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b094      	sub	sp, #80	@ 0x50
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800e580:	2300      	movs	r3, #0
 800e582:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800e584:	2300      	movs	r3, #0
 800e586:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800e588:	2333      	movs	r3, #51	@ 0x33
 800e58a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e58e:	4b42      	ldr	r3, [pc, #264]	@ (800e698 <LIS2DUXS12_0_Probe+0x120>)
 800e590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e592:	4b42      	ldr	r3, [pc, #264]	@ (800e69c <LIS2DUXS12_0_Probe+0x124>)
 800e594:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e596:	4b42      	ldr	r3, [pc, #264]	@ (800e6a0 <LIS2DUXS12_0_Probe+0x128>)
 800e598:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e59a:	4b42      	ldr	r3, [pc, #264]	@ (800e6a4 <LIS2DUXS12_0_Probe+0x12c>)
 800e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e59e:	4b42      	ldr	r3, [pc, #264]	@ (800e6a8 <LIS2DUXS12_0_Probe+0x130>)
 800e5a0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e5a2:	4b42      	ldr	r3, [pc, #264]	@ (800e6ac <LIS2DUXS12_0_Probe+0x134>)
 800e5a4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800e5a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	4840      	ldr	r0, [pc, #256]	@ (800e6b0 <LIS2DUXS12_0_Probe+0x138>)
 800e5ae:	f7f7 faf5 	bl	8005b9c <LIS2DUXS12_RegisterBusIO>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e5b8:	f06f 0306 	mvn.w	r3, #6
 800e5bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5be:	e065      	b.n	800e68c <LIS2DUXS12_0_Probe+0x114>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800e5c0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	483a      	ldr	r0, [pc, #232]	@ (800e6b0 <LIS2DUXS12_0_Probe+0x138>)
 800e5c8:	f7f7 fc39 	bl	8005e3e <LIS2DUXS12_ReadID>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d003      	beq.n	800e5da <LIS2DUXS12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e5d2:	f06f 0306 	mvn.w	r3, #6
 800e5d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5d8:	e058      	b.n	800e68c <LIS2DUXS12_0_Probe+0x114>
  }
  else if (id != LIS2DUXS12_ID)
 800e5da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e5de:	2b47      	cmp	r3, #71	@ 0x47
 800e5e0:	d003      	beq.n	800e5ea <LIS2DUXS12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e5e2:	f06f 0306 	mvn.w	r3, #6
 800e5e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5e8:	e050      	b.n	800e68c <LIS2DUXS12_0_Probe+0x114>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800e5ea:	f107 030c 	add.w	r3, r7, #12
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	482f      	ldr	r0, [pc, #188]	@ (800e6b0 <LIS2DUXS12_0_Probe+0x138>)
 800e5f2:	f7f7 fc3f 	bl	8005e74 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e5f6:	7b7b      	ldrb	r3, [r7, #13]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	7b3b      	ldrb	r3, [r7, #12]
 800e5fc:	005b      	lsls	r3, r3, #1
 800e5fe:	431a      	orrs	r2, r3
 800e600:	7bbb      	ldrb	r3, [r7, #14]
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4313      	orrs	r3, r2
 800e606:	4a2b      	ldr	r2, [pc, #172]	@ (800e6b4 <LIS2DUXS12_0_Probe+0x13c>)
 800e608:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800e60a:	4b2b      	ldr	r3, [pc, #172]	@ (800e6b8 <LIS2DUXS12_0_Probe+0x140>)
 800e60c:	4a28      	ldr	r2, [pc, #160]	@ (800e6b0 <LIS2DUXS12_0_Probe+0x138>)
 800e60e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800e610:	4b2a      	ldr	r3, [pc, #168]	@ (800e6bc <LIS2DUXS12_0_Probe+0x144>)
 800e612:	4a2b      	ldr	r2, [pc, #172]	@ (800e6c0 <LIS2DUXS12_0_Probe+0x148>)
 800e614:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800e616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10a      	bne.n	800e632 <LIS2DUXS12_0_Probe+0xba>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	d005      	beq.n	800e632 <LIS2DUXS12_0_Probe+0xba>
 800e626:	7b7b      	ldrb	r3, [r7, #13]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d102      	bne.n	800e632 <LIS2DUXS12_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e62c:	f06f 0304 	mvn.w	r3, #4
 800e630:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800e632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e634:	2b00      	cmp	r3, #0
 800e636:	d11e      	bne.n	800e676 <LIS2DUXS12_0_Probe+0xfe>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f003 0302 	and.w	r3, r3, #2
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d019      	beq.n	800e676 <LIS2DUXS12_0_Probe+0xfe>
 800e642:	7b3b      	ldrb	r3, [r7, #12]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d116      	bne.n	800e676 <LIS2DUXS12_0_Probe+0xfe>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e648:	4b1e      	ldr	r3, [pc, #120]	@ (800e6c4 <LIS2DUXS12_0_Probe+0x14c>)
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	4a1e      	ldr	r2, [pc, #120]	@ (800e6c8 <LIS2DUXS12_0_Probe+0x150>)
 800e64e:	3306      	adds	r3, #6
 800e650:	491e      	ldr	r1, [pc, #120]	@ (800e6cc <LIS2DUXS12_0_Probe+0x154>)
 800e652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800e656:	4b19      	ldr	r3, [pc, #100]	@ (800e6bc <LIS2DUXS12_0_Probe+0x144>)
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a16      	ldr	r2, [pc, #88]	@ (800e6b8 <LIS2DUXS12_0_Probe+0x140>)
 800e65e:	6892      	ldr	r2, [r2, #8]
 800e660:	4610      	mov	r0, r2
 800e662:	4798      	blx	r3
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <LIS2DUXS12_0_Probe+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e66a:	f06f 0304 	mvn.w	r3, #4
 800e66e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e670:	e001      	b.n	800e676 <LIS2DUXS12_0_Probe+0xfe>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e672:	2300      	movs	r3, #0
 800e674:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800e676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d107      	bne.n	800e68c <LIS2DUXS12_0_Probe+0x114>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f003 0304 	and.w	r3, r3, #4
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <LIS2DUXS12_0_Probe+0x114>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e686:	f06f 0304 	mvn.w	r3, #4
 800e68a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3750      	adds	r7, #80	@ 0x50
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	08005605 	.word	0x08005605
 800e69c:	08005669 	.word	0x08005669
 800e6a0:	0800571d 	.word	0x0800571d
 800e6a4:	080056b9 	.word	0x080056b9
 800e6a8:	08005829 	.word	0x08005829
 800e6ac:	0800ed45 	.word	0x0800ed45
 800e6b0:	200014b0 	.word	0x200014b0
 800e6b4:	20001434 	.word	0x20001434
 800e6b8:	200013e4 	.word	0x200013e4
 800e6bc:	20001424 	.word	0x20001424
 800e6c0:	20000140 	.word	0x20000140
 800e6c4:	20000310 	.word	0x20000310
 800e6c8:	200013f4 	.word	0x200013f4
 800e6cc:	20000150 	.word	0x20000150

0800e6d0 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b094      	sub	sp, #80	@ 0x50
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800e6dc:	2300      	movs	r3, #0
 800e6de:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800e6e0:	23d5      	movs	r3, #213	@ 0xd5
 800e6e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_Init;
 800e6e6:	4b4c      	ldr	r3, [pc, #304]	@ (800e818 <LSM6DSO16IS_0_Probe+0x148>)
 800e6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DeInit;
 800e6ea:	4b4c      	ldr	r3, [pc, #304]	@ (800e81c <LSM6DSO16IS_0_Probe+0x14c>)
 800e6ec:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_ReadReg;
 800e6ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e820 <LSM6DSO16IS_0_Probe+0x150>)
 800e6f0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WriteReg;
 800e6f2:	4b4c      	ldr	r3, [pc, #304]	@ (800e824 <LSM6DSO16IS_0_Probe+0x154>)
 800e6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GetTick;
 800e6f6:	4b4c      	ldr	r3, [pc, #304]	@ (800e828 <LSM6DSO16IS_0_Probe+0x158>)
 800e6f8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_Delay;
 800e6fa:	4b4c      	ldr	r3, [pc, #304]	@ (800e82c <LSM6DSO16IS_0_Probe+0x15c>)
 800e6fc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800e6fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e702:	4619      	mov	r1, r3
 800e704:	484a      	ldr	r0, [pc, #296]	@ (800e830 <LSM6DSO16IS_0_Probe+0x160>)
 800e706:	f7fa fd89 	bl	800921c <LSM6DSO16IS_RegisterBusIO>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d003      	beq.n	800e718 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e710:	f06f 0306 	mvn.w	r3, #6
 800e714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e716:	e079      	b.n	800e80c <LSM6DSO16IS_0_Probe+0x13c>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800e718:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e71c:	4619      	mov	r1, r3
 800e71e:	4844      	ldr	r0, [pc, #272]	@ (800e830 <LSM6DSO16IS_0_Probe+0x160>)
 800e720:	f7fa fe7a 	bl	8009418 <LSM6DSO16IS_ReadID>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <LSM6DSO16IS_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e72a:	f06f 0306 	mvn.w	r3, #6
 800e72e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e730:	e06c      	b.n	800e80c <LSM6DSO16IS_0_Probe+0x13c>
  }
  else if (id != LSM6DSO16IS_ID)
 800e732:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e736:	2b22      	cmp	r3, #34	@ 0x22
 800e738:	d003      	beq.n	800e742 <LSM6DSO16IS_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e73a:	f06f 0306 	mvn.w	r3, #6
 800e73e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e740:	e064      	b.n	800e80c <LSM6DSO16IS_0_Probe+0x13c>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800e742:	f107 030c 	add.w	r3, r7, #12
 800e746:	4619      	mov	r1, r3
 800e748:	4839      	ldr	r0, [pc, #228]	@ (800e830 <LSM6DSO16IS_0_Probe+0x160>)
 800e74a:	f7fa fe7d 	bl	8009448 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800e74e:	7b7b      	ldrb	r3, [r7, #13]
 800e750:	461a      	mov	r2, r3
 800e752:	7b3b      	ldrb	r3, [r7, #12]
 800e754:	005b      	lsls	r3, r3, #1
 800e756:	431a      	orrs	r2, r3
 800e758:	7bbb      	ldrb	r3, [r7, #14]
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4313      	orrs	r3, r2
 800e75e:	4a35      	ldr	r2, [pc, #212]	@ (800e834 <LSM6DSO16IS_0_Probe+0x164>)
 800e760:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800e762:	4b35      	ldr	r3, [pc, #212]	@ (800e838 <LSM6DSO16IS_0_Probe+0x168>)
 800e764:	4a32      	ldr	r2, [pc, #200]	@ (800e830 <LSM6DSO16IS_0_Probe+0x160>)
 800e766:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800e768:	4b34      	ldr	r3, [pc, #208]	@ (800e83c <LSM6DSO16IS_0_Probe+0x16c>)
 800e76a:	4a35      	ldr	r2, [pc, #212]	@ (800e840 <LSM6DSO16IS_0_Probe+0x170>)
 800e76c:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800e76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d11e      	bne.n	800e7b2 <LSM6DSO16IS_0_Probe+0xe2>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f003 0301 	and.w	r3, r3, #1
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d019      	beq.n	800e7b2 <LSM6DSO16IS_0_Probe+0xe2>
 800e77e:	7b7b      	ldrb	r3, [r7, #13]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d116      	bne.n	800e7b2 <LSM6DSO16IS_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e784:	4b2f      	ldr	r3, [pc, #188]	@ (800e844 <LSM6DSO16IS_0_Probe+0x174>)
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	4a2f      	ldr	r2, [pc, #188]	@ (800e848 <LSM6DSO16IS_0_Probe+0x178>)
 800e78a:	3309      	adds	r3, #9
 800e78c:	492f      	ldr	r1, [pc, #188]	@ (800e84c <LSM6DSO16IS_0_Probe+0x17c>)
 800e78e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800e792:	4b2a      	ldr	r3, [pc, #168]	@ (800e83c <LSM6DSO16IS_0_Probe+0x16c>)
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a27      	ldr	r2, [pc, #156]	@ (800e838 <LSM6DSO16IS_0_Probe+0x168>)
 800e79a:	68d2      	ldr	r2, [r2, #12]
 800e79c:	4610      	mov	r0, r2
 800e79e:	4798      	blx	r3
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d003      	beq.n	800e7ae <LSM6DSO16IS_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e7a6:	f06f 0304 	mvn.w	r3, #4
 800e7aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7ac:	e001      	b.n	800e7b2 <LSM6DSO16IS_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800e7b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d11e      	bne.n	800e7f6 <LSM6DSO16IS_0_Probe+0x126>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f003 0302 	and.w	r3, r3, #2
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d019      	beq.n	800e7f6 <LSM6DSO16IS_0_Probe+0x126>
 800e7c2:	7b3b      	ldrb	r3, [r7, #12]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d116      	bne.n	800e7f6 <LSM6DSO16IS_0_Probe+0x126>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800e7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800e844 <LSM6DSO16IS_0_Probe+0x174>)
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	4a1e      	ldr	r2, [pc, #120]	@ (800e848 <LSM6DSO16IS_0_Probe+0x178>)
 800e7ce:	3309      	adds	r3, #9
 800e7d0:	491f      	ldr	r1, [pc, #124]	@ (800e850 <LSM6DSO16IS_0_Probe+0x180>)
 800e7d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800e7d6:	4b19      	ldr	r3, [pc, #100]	@ (800e83c <LSM6DSO16IS_0_Probe+0x16c>)
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a16      	ldr	r2, [pc, #88]	@ (800e838 <LSM6DSO16IS_0_Probe+0x168>)
 800e7de:	68d2      	ldr	r2, [r2, #12]
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	4798      	blx	r3
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d003      	beq.n	800e7f2 <LSM6DSO16IS_0_Probe+0x122>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e7ea:	f06f 0304 	mvn.w	r3, #4
 800e7ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7f0:	e001      	b.n	800e7f6 <LSM6DSO16IS_0_Probe+0x126>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800e7f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d107      	bne.n	800e80c <LSM6DSO16IS_0_Probe+0x13c>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e806:	f06f 0304 	mvn.w	r3, #4
 800e80a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800e80c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3750      	adds	r7, #80	@ 0x50
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	08005605 	.word	0x08005605
 800e81c:	08005669 	.word	0x08005669
 800e820:	0800571d 	.word	0x0800571d
 800e824:	080056b9 	.word	0x080056b9
 800e828:	08005829 	.word	0x08005829
 800e82c:	0800ed45 	.word	0x0800ed45
 800e830:	200014ec 	.word	0x200014ec
 800e834:	20001434 	.word	0x20001434
 800e838:	200013e4 	.word	0x200013e4
 800e83c:	20001424 	.word	0x20001424
 800e840:	200001e0 	.word	0x200001e0
 800e844:	20000310 	.word	0x20000310
 800e848:	200013f4 	.word	0x200013f4
 800e84c:	20000214 	.word	0x20000214
 800e850:	200001f0 	.word	0x200001f0

0800e854 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	4603      	mov	r3, r0
 800e85c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	4a04      	ldr	r2, [pc, #16]	@ (800e874 <BSP_LED_Init+0x20>)
 800e862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e866:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	0802396c 	.word	0x0802396c

0800e878 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	4a06      	ldr	r2, [pc, #24]	@ (800e8a0 <BSP_LED_On+0x28>)
 800e886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e88a:	2120      	movs	r1, #32
 800e88c:	2201      	movs	r2, #1
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 ff64 	bl	800f75c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	20000330 	.word	0x20000330

0800e8a4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	4a06      	ldr	r2, [pc, #24]	@ (800e8cc <BSP_LED_Off+0x28>)
 800e8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8b6:	2120      	movs	r1, #32
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 ff4e 	bl	800f75c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000330 	.word	0x20000330

0800e8d0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b088      	sub	sp, #32
 800e8d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60bb      	str	r3, [r7, #8]
 800e8da:	4b1c      	ldr	r3, [pc, #112]	@ (800e94c <LED_USER_GPIO_Init+0x7c>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8de:	4a1b      	ldr	r2, [pc, #108]	@ (800e94c <LED_USER_GPIO_Init+0x7c>)
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800e8e6:	4b19      	ldr	r3, [pc, #100]	@ (800e94c <LED_USER_GPIO_Init+0x7c>)
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	60bb      	str	r3, [r7, #8]
 800e8f0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8f2:	f107 030c 	add.w	r3, r7, #12
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	605a      	str	r2, [r3, #4]
 800e8fc:	609a      	str	r2, [r3, #8]
 800e8fe:	60da      	str	r2, [r3, #12]
 800e900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e902:	2300      	movs	r3, #0
 800e904:	607b      	str	r3, [r7, #4]
 800e906:	4b11      	ldr	r3, [pc, #68]	@ (800e94c <LED_USER_GPIO_Init+0x7c>)
 800e908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e90a:	4a10      	ldr	r2, [pc, #64]	@ (800e94c <LED_USER_GPIO_Init+0x7c>)
 800e90c:	f043 0301 	orr.w	r3, r3, #1
 800e910:	6313      	str	r3, [r2, #48]	@ 0x30
 800e912:	4b0e      	ldr	r3, [pc, #56]	@ (800e94c <LED_USER_GPIO_Init+0x7c>)
 800e914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	607b      	str	r3, [r7, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800e91e:	2200      	movs	r2, #0
 800e920:	2120      	movs	r1, #32
 800e922:	480b      	ldr	r0, [pc, #44]	@ (800e950 <LED_USER_GPIO_Init+0x80>)
 800e924:	f000 ff1a 	bl	800f75c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800e928:	2320      	movs	r3, #32
 800e92a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e92c:	2301      	movs	r3, #1
 800e92e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e930:	2300      	movs	r3, #0
 800e932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e934:	2300      	movs	r3, #0
 800e936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800e938:	f107 030c 	add.w	r3, r7, #12
 800e93c:	4619      	mov	r1, r3
 800e93e:	4804      	ldr	r0, [pc, #16]	@ (800e950 <LED_USER_GPIO_Init+0x80>)
 800e940:	f000 fc8c 	bl	800f25c <HAL_GPIO_Init>

}
 800e944:	bf00      	nop
 800e946:	3720      	adds	r7, #32
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	40023800 	.word	0x40023800
 800e950:	40020000 	.word	0x40020000

0800e954 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	4603      	mov	r3, r0
 800e95c:	460a      	mov	r2, r1
 800e95e:	71fb      	strb	r3, [r7, #7]
 800e960:	4613      	mov	r3, r2
 800e962:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800e964:	2300      	movs	r3, #0
 800e966:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	4a1f      	ldr	r2, [pc, #124]	@ (800e9e8 <BSP_PB_Init+0x94>)
 800e96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e970:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800e972:	79bb      	ldrb	r3, [r7, #6]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d132      	bne.n	800e9de <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	4a1b      	ldr	r2, [pc, #108]	@ (800e9ec <BSP_PB_Init+0x98>)
 800e97e:	441a      	add	r2, r3
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	491b      	ldr	r1, [pc, #108]	@ (800e9f0 <BSP_PB_Init+0x9c>)
 800e984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f000 fc2d 	bl	800f1ea <HAL_EXTI_GetHandle>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d003      	beq.n	800e99e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e996:	f06f 0303 	mvn.w	r3, #3
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	e01f      	b.n	800e9de <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800e99e:	79fb      	ldrb	r3, [r7, #7]
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	4a12      	ldr	r2, [pc, #72]	@ (800e9ec <BSP_PB_Init+0x98>)
 800e9a4:	1898      	adds	r0, r3, r2
 800e9a6:	79fb      	ldrb	r3, [r7, #7]
 800e9a8:	4a12      	ldr	r2, [pc, #72]	@ (800e9f4 <BSP_PB_Init+0xa0>)
 800e9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	f000 fc00 	bl	800f1b6 <HAL_EXTI_RegisterCallback>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e9bc:	f06f 0303 	mvn.w	r3, #3
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	e00c      	b.n	800e9de <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800e9c4:	2028      	movs	r0, #40	@ 0x28
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	4a0b      	ldr	r2, [pc, #44]	@ (800e9f8 <BSP_PB_Init+0xa4>)
 800e9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f000 fada 	bl	800ef8a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800e9d6:	2328      	movs	r3, #40	@ 0x28
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f000 faf2 	bl	800efc2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800e9de:	68fb      	ldr	r3, [r7, #12]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	08023970 	.word	0x08023970
 800e9ec:	20000338 	.word	0x20000338
 800e9f0:	08023974 	.word	0x08023974
 800e9f4:	08023978 	.word	0x08023978
 800e9f8:	0802397c 	.word	0x0802397c

0800e9fc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	4603      	mov	r3, r0
 800ea04:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	4a09      	ldr	r2, [pc, #36]	@ (800ea30 <BSP_PB_GetState+0x34>)
 800ea0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ea12:	4611      	mov	r1, r2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f000 fe89 	bl	800f72c <HAL_GPIO_ReadPin>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	bf0c      	ite	eq
 800ea20:	2301      	moveq	r3, #1
 800ea22:	2300      	movne	r3, #0
 800ea24:	b2db      	uxtb	r3, r3
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20000334 	.word	0x20000334

0800ea34 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800ea38:	2000      	movs	r0, #0
 800ea3a:	f006 ff35 	bl	80158a8 <BSP_PB_Callback>
}
 800ea3e:	bf00      	nop
 800ea40:	bd80      	pop	{r7, pc}
	...

0800ea44 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60bb      	str	r3, [r7, #8]
 800ea4e:	4b1a      	ldr	r3, [pc, #104]	@ (800eab8 <BUTTON_USER_GPIO_Init+0x74>)
 800ea50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea52:	4a19      	ldr	r2, [pc, #100]	@ (800eab8 <BUTTON_USER_GPIO_Init+0x74>)
 800ea54:	f043 0304 	orr.w	r3, r3, #4
 800ea58:	6313      	str	r3, [r2, #48]	@ 0x30
 800ea5a:	4b17      	ldr	r3, [pc, #92]	@ (800eab8 <BUTTON_USER_GPIO_Init+0x74>)
 800ea5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea5e:	f003 0304 	and.w	r3, r3, #4
 800ea62:	60bb      	str	r3, [r7, #8]
 800ea64:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea66:	f107 030c 	add.w	r3, r7, #12
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	605a      	str	r2, [r3, #4]
 800ea70:	609a      	str	r2, [r3, #8]
 800ea72:	60da      	str	r2, [r3, #12]
 800ea74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea76:	2300      	movs	r3, #0
 800ea78:	607b      	str	r3, [r7, #4]
 800ea7a:	4b0f      	ldr	r3, [pc, #60]	@ (800eab8 <BUTTON_USER_GPIO_Init+0x74>)
 800ea7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea7e:	4a0e      	ldr	r2, [pc, #56]	@ (800eab8 <BUTTON_USER_GPIO_Init+0x74>)
 800ea80:	f043 0304 	orr.w	r3, r3, #4
 800ea84:	6313      	str	r3, [r2, #48]	@ 0x30
 800ea86:	4b0c      	ldr	r3, [pc, #48]	@ (800eab8 <BUTTON_USER_GPIO_Init+0x74>)
 800ea88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea8a:	f003 0304 	and.w	r3, r3, #4
 800ea8e:	607b      	str	r3, [r7, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800ea92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ea98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800ea9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800eaa2:	f107 030c 	add.w	r3, r7, #12
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	4804      	ldr	r0, [pc, #16]	@ (800eabc <BUTTON_USER_GPIO_Init+0x78>)
 800eaaa:	f000 fbd7 	bl	800f25c <HAL_GPIO_Init>

}
 800eaae:	bf00      	nop
 800eab0:	3720      	adds	r7, #32
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	40023800 	.word	0x40023800
 800eabc:	40020800 	.word	0x40020800

0800eac0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	4603      	mov	r3, r0
 800eac8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800eaca:	2300      	movs	r3, #0
 800eacc:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d903      	bls.n	800eadc <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ead4:	f06f 0301 	mvn.w	r3, #1
 800ead8:	60fb      	str	r3, [r7, #12]
 800eada:	e025      	b.n	800eb28 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	79fa      	ldrb	r2, [r7, #7]
 800eae0:	4914      	ldr	r1, [pc, #80]	@ (800eb34 <BSP_COM_Init+0x74>)
 800eae2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eae6:	4814      	ldr	r0, [pc, #80]	@ (800eb38 <BSP_COM_Init+0x78>)
 800eae8:	4613      	mov	r3, r2
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	4413      	add	r3, r2
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	4403      	add	r3, r0
 800eaf2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800eaf4:	79fa      	ldrb	r2, [r7, #7]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	4413      	add	r3, r2
 800eafc:	00db      	lsls	r3, r3, #3
 800eafe:	4a0e      	ldr	r2, [pc, #56]	@ (800eb38 <BSP_COM_Init+0x78>)
 800eb00:	4413      	add	r3, r2
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 f864 	bl	800ebd0 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800eb08:	79fa      	ldrb	r2, [r7, #7]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	4413      	add	r3, r2
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	4a09      	ldr	r2, [pc, #36]	@ (800eb38 <BSP_COM_Init+0x78>)
 800eb14:	4413      	add	r3, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f810 	bl	800eb3c <MX_USART2_UART_Init>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d002      	beq.n	800eb28 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800eb22:	f06f 0303 	mvn.w	r3, #3
 800eb26:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800eb28:	68fb      	ldr	r3, [r7, #12]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20000340 	.word	0x20000340
 800eb38:	20001524 	.word	0x20001524

0800eb3c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a12      	ldr	r2, [pc, #72]	@ (800eb94 <MX_USART2_UART_Init+0x58>)
 800eb4c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800eb54:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220c      	movs	r2, #12
 800eb6c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f005 ffb4 	bl	8014ae8 <HAL_UART_Init>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	40004400 	.word	0x40004400

0800eb98 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800eba0:	4b09      	ldr	r3, [pc, #36]	@ (800ebc8 <__io_putchar+0x30>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	461a      	mov	r2, r3
 800eba6:	4613      	mov	r3, r2
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	4413      	add	r3, r2
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	4a07      	ldr	r2, [pc, #28]	@ (800ebcc <__io_putchar+0x34>)
 800ebb0:	1898      	adds	r0, r3, r2
 800ebb2:	1d39      	adds	r1, r7, #4
 800ebb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f005 ffef 	bl	8014b9c <HAL_UART_Transmit>
  return ch;
 800ebbe:	687b      	ldr	r3, [r7, #4]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	2000156c 	.word	0x2000156c
 800ebcc:	20001524 	.word	0x20001524

0800ebd0 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b08a      	sub	sp, #40	@ 0x28
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ebd8:	2300      	movs	r3, #0
 800ebda:	613b      	str	r3, [r7, #16]
 800ebdc:	4b1e      	ldr	r3, [pc, #120]	@ (800ec58 <USART2_MspInit+0x88>)
 800ebde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebe0:	4a1d      	ldr	r2, [pc, #116]	@ (800ec58 <USART2_MspInit+0x88>)
 800ebe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebe6:	6413      	str	r3, [r2, #64]	@ 0x40
 800ebe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ec58 <USART2_MspInit+0x88>)
 800ebea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebf0:	613b      	str	r3, [r7, #16]
 800ebf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	60fb      	str	r3, [r7, #12]
 800ebf8:	4b17      	ldr	r3, [pc, #92]	@ (800ec58 <USART2_MspInit+0x88>)
 800ebfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebfc:	4a16      	ldr	r2, [pc, #88]	@ (800ec58 <USART2_MspInit+0x88>)
 800ebfe:	f043 0301 	orr.w	r3, r3, #1
 800ec02:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec04:	4b14      	ldr	r3, [pc, #80]	@ (800ec58 <USART2_MspInit+0x88>)
 800ec06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800ec10:	2304      	movs	r3, #4
 800ec12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec14:	2302      	movs	r3, #2
 800ec16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800ec20:	2307      	movs	r3, #7
 800ec22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800ec24:	f107 0314 	add.w	r3, r7, #20
 800ec28:	4619      	mov	r1, r3
 800ec2a:	480c      	ldr	r0, [pc, #48]	@ (800ec5c <USART2_MspInit+0x8c>)
 800ec2c:	f000 fb16 	bl	800f25c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800ec30:	2308      	movs	r3, #8
 800ec32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec34:	2302      	movs	r3, #2
 800ec36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800ec40:	2307      	movs	r3, #7
 800ec42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800ec44:	f107 0314 	add.w	r3, r7, #20
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4804      	ldr	r0, [pc, #16]	@ (800ec5c <USART2_MspInit+0x8c>)
 800ec4c:	f000 fb06 	bl	800f25c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800ec50:	bf00      	nop
 800ec52:	3728      	adds	r7, #40	@ 0x28
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	40023800 	.word	0x40023800
 800ec5c:	40020000 	.word	0x40020000

0800ec60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ec64:	4b0e      	ldr	r3, [pc, #56]	@ (800eca0 <HAL_Init+0x40>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a0d      	ldr	r2, [pc, #52]	@ (800eca0 <HAL_Init+0x40>)
 800ec6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ec6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ec70:	4b0b      	ldr	r3, [pc, #44]	@ (800eca0 <HAL_Init+0x40>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a0a      	ldr	r2, [pc, #40]	@ (800eca0 <HAL_Init+0x40>)
 800ec76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ec7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec7c:	4b08      	ldr	r3, [pc, #32]	@ (800eca0 <HAL_Init+0x40>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a07      	ldr	r2, [pc, #28]	@ (800eca0 <HAL_Init+0x40>)
 800ec82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ec88:	2003      	movs	r0, #3
 800ec8a:	f000 f973 	bl	800ef74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ec8e:	2000      	movs	r0, #0
 800ec90:	f000 f808 	bl	800eca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ec94:	f7f6 fb16 	bl	80052c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	40023c00 	.word	0x40023c00

0800eca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ecac:	4b12      	ldr	r3, [pc, #72]	@ (800ecf8 <HAL_InitTick+0x54>)
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	4b12      	ldr	r3, [pc, #72]	@ (800ecfc <HAL_InitTick+0x58>)
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ecba:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f000 f999 	bl	800effa <HAL_SYSTICK_Config>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d001      	beq.n	800ecd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e00e      	b.n	800ecf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b0f      	cmp	r3, #15
 800ecd6:	d80a      	bhi.n	800ecee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ecd8:	2200      	movs	r2, #0
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ece0:	f000 f953 	bl	800ef8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ece4:	4a06      	ldr	r2, [pc, #24]	@ (800ed00 <HAL_InitTick+0x5c>)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	e000      	b.n	800ecf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	2000013c 	.word	0x2000013c
 800ecfc:	20000348 	.word	0x20000348
 800ed00:	20000344 	.word	0x20000344

0800ed04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed04:	b480      	push	{r7}
 800ed06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed08:	4b06      	ldr	r3, [pc, #24]	@ (800ed24 <HAL_IncTick+0x20>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	4b06      	ldr	r3, [pc, #24]	@ (800ed28 <HAL_IncTick+0x24>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4413      	add	r3, r2
 800ed14:	4a04      	ldr	r2, [pc, #16]	@ (800ed28 <HAL_IncTick+0x24>)
 800ed16:	6013      	str	r3, [r2, #0]
}
 800ed18:	bf00      	nop
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	20000348 	.word	0x20000348
 800ed28:	20001570 	.word	0x20001570

0800ed2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	af00      	add	r7, sp, #0
  return uwTick;
 800ed30:	4b03      	ldr	r3, [pc, #12]	@ (800ed40 <HAL_GetTick+0x14>)
 800ed32:	681b      	ldr	r3, [r3, #0]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	20001570 	.word	0x20001570

0800ed44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ed4c:	f7ff ffee 	bl	800ed2c <HAL_GetTick>
 800ed50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed5c:	d005      	beq.n	800ed6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed88 <HAL_Delay+0x44>)
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	461a      	mov	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	4413      	add	r3, r2
 800ed68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ed6a:	bf00      	nop
 800ed6c:	f7ff ffde 	bl	800ed2c <HAL_GetTick>
 800ed70:	4602      	mov	r2, r0
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d8f7      	bhi.n	800ed6c <HAL_Delay+0x28>
  {
  }
}
 800ed7c:	bf00      	nop
 800ed7e:	bf00      	nop
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	20000348 	.word	0x20000348

0800ed8c <__NVIC_SetPriorityGrouping>:
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f003 0307 	and.w	r3, r3, #7
 800ed9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ed9c:	4b0c      	ldr	r3, [pc, #48]	@ (800edd0 <__NVIC_SetPriorityGrouping+0x44>)
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800eda8:	4013      	ands	r3, r2
 800edaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800edb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800edb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800edbe:	4a04      	ldr	r2, [pc, #16]	@ (800edd0 <__NVIC_SetPriorityGrouping+0x44>)
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	60d3      	str	r3, [r2, #12]
}
 800edc4:	bf00      	nop
 800edc6:	3714      	adds	r7, #20
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	e000ed00 	.word	0xe000ed00

0800edd4 <__NVIC_GetPriorityGrouping>:
{
 800edd4:	b480      	push	{r7}
 800edd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800edd8:	4b04      	ldr	r3, [pc, #16]	@ (800edec <__NVIC_GetPriorityGrouping+0x18>)
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	f003 0307 	and.w	r3, r3, #7
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	e000ed00 	.word	0xe000ed00

0800edf0 <__NVIC_EnableIRQ>:
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800edfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	db0b      	blt.n	800ee1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	f003 021f 	and.w	r2, r3, #31
 800ee08:	4907      	ldr	r1, [pc, #28]	@ (800ee28 <__NVIC_EnableIRQ+0x38>)
 800ee0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee0e:	095b      	lsrs	r3, r3, #5
 800ee10:	2001      	movs	r0, #1
 800ee12:	fa00 f202 	lsl.w	r2, r0, r2
 800ee16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	e000e100 	.word	0xe000e100

0800ee2c <__NVIC_DisableIRQ>:
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	4603      	mov	r3, r0
 800ee34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	db12      	blt.n	800ee64 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	f003 021f 	and.w	r2, r3, #31
 800ee44:	490a      	ldr	r1, [pc, #40]	@ (800ee70 <__NVIC_DisableIRQ+0x44>)
 800ee46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee4a:	095b      	lsrs	r3, r3, #5
 800ee4c:	2001      	movs	r0, #1
 800ee4e:	fa00 f202 	lsl.w	r2, r0, r2
 800ee52:	3320      	adds	r3, #32
 800ee54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ee58:	f3bf 8f4f 	dsb	sy
}
 800ee5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ee5e:	f3bf 8f6f 	isb	sy
}
 800ee62:	bf00      	nop
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	e000e100 	.word	0xe000e100

0800ee74 <__NVIC_SetPriority>:
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	6039      	str	r1, [r7, #0]
 800ee7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	db0a      	blt.n	800ee9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	490c      	ldr	r1, [pc, #48]	@ (800eec0 <__NVIC_SetPriority+0x4c>)
 800ee8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee92:	0112      	lsls	r2, r2, #4
 800ee94:	b2d2      	uxtb	r2, r2
 800ee96:	440b      	add	r3, r1
 800ee98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ee9c:	e00a      	b.n	800eeb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	4908      	ldr	r1, [pc, #32]	@ (800eec4 <__NVIC_SetPriority+0x50>)
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	f003 030f 	and.w	r3, r3, #15
 800eeaa:	3b04      	subs	r3, #4
 800eeac:	0112      	lsls	r2, r2, #4
 800eeae:	b2d2      	uxtb	r2, r2
 800eeb0:	440b      	add	r3, r1
 800eeb2:	761a      	strb	r2, [r3, #24]
}
 800eeb4:	bf00      	nop
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	e000e100 	.word	0xe000e100
 800eec4:	e000ed00 	.word	0xe000ed00

0800eec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b089      	sub	sp, #36	@ 0x24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f003 0307 	and.w	r3, r3, #7
 800eeda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	f1c3 0307 	rsb	r3, r3, #7
 800eee2:	2b04      	cmp	r3, #4
 800eee4:	bf28      	it	cs
 800eee6:	2304      	movcs	r3, #4
 800eee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	3304      	adds	r3, #4
 800eeee:	2b06      	cmp	r3, #6
 800eef0:	d902      	bls.n	800eef8 <NVIC_EncodePriority+0x30>
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	3b03      	subs	r3, #3
 800eef6:	e000      	b.n	800eefa <NVIC_EncodePriority+0x32>
 800eef8:	2300      	movs	r3, #0
 800eefa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800eefc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	fa02 f303 	lsl.w	r3, r2, r3
 800ef06:	43da      	mvns	r2, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	401a      	ands	r2, r3
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ef10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	fa01 f303 	lsl.w	r3, r1, r3
 800ef1a:	43d9      	mvns	r1, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef20:	4313      	orrs	r3, r2
         );
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3724      	adds	r7, #36	@ 0x24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
	...

0800ef30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef40:	d301      	bcc.n	800ef46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ef42:	2301      	movs	r3, #1
 800ef44:	e00f      	b.n	800ef66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ef46:	4a0a      	ldr	r2, [pc, #40]	@ (800ef70 <SysTick_Config+0x40>)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ef4e:	210f      	movs	r1, #15
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef54:	f7ff ff8e 	bl	800ee74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ef58:	4b05      	ldr	r3, [pc, #20]	@ (800ef70 <SysTick_Config+0x40>)
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ef5e:	4b04      	ldr	r3, [pc, #16]	@ (800ef70 <SysTick_Config+0x40>)
 800ef60:	2207      	movs	r2, #7
 800ef62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	e000e010 	.word	0xe000e010

0800ef74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7ff ff05 	bl	800ed8c <__NVIC_SetPriorityGrouping>
}
 800ef82:	bf00      	nop
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b086      	sub	sp, #24
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	4603      	mov	r3, r0
 800ef92:	60b9      	str	r1, [r7, #8]
 800ef94:	607a      	str	r2, [r7, #4]
 800ef96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ef9c:	f7ff ff1a 	bl	800edd4 <__NVIC_GetPriorityGrouping>
 800efa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	68b9      	ldr	r1, [r7, #8]
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	f7ff ff8e 	bl	800eec8 <NVIC_EncodePriority>
 800efac:	4602      	mov	r2, r0
 800efae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb2:	4611      	mov	r1, r2
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7ff ff5d 	bl	800ee74 <__NVIC_SetPriority>
}
 800efba:	bf00      	nop
 800efbc:	3718      	adds	r7, #24
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b082      	sub	sp, #8
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	4603      	mov	r3, r0
 800efca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800efcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff ff0d 	bl	800edf0 <__NVIC_EnableIRQ>
}
 800efd6:	bf00      	nop
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b082      	sub	sp, #8
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	4603      	mov	r3, r0
 800efe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800efe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff ff1d 	bl	800ee2c <__NVIC_DisableIRQ>
}
 800eff2:	bf00      	nop
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff ff94 	bl	800ef30 <SysTick_Config>
 800f008:	4603      	mov	r3, r0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b082      	sub	sp, #8
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800f020:	2301      	movs	r3, #1
 800f022:	e00e      	b.n	800f042 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	795b      	ldrb	r3, [r3, #5]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d105      	bne.n	800f03a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7f6 f96d 	bl	8005314 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f04a:	b580      	push	{r7, lr}
 800f04c:	b086      	sub	sp, #24
 800f04e:	af00      	add	r7, sp, #0
 800f050:	60f8      	str	r0, [r7, #12]
 800f052:	60b9      	str	r1, [r7, #8]
 800f054:	607a      	str	r2, [r7, #4]
 800f056:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f060:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d101      	bne.n	800f070 <HAL_DMA_Start_IT+0x26>
 800f06c:	2302      	movs	r3, #2
 800f06e:	e040      	b.n	800f0f2 <HAL_DMA_Start_IT+0xa8>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b01      	cmp	r3, #1
 800f082:	d12f      	bne.n	800f0e4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2202      	movs	r2, #2
 800f088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f000 f85e 	bl	800f15a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0a2:	223f      	movs	r2, #63	@ 0x3f
 800f0a4:	409a      	lsls	r2, r3
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f042 0216 	orr.w	r2, r2, #22
 800f0b8:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f042 0208 	orr.w	r2, r2, #8
 800f0d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f042 0201 	orr.w	r2, r2, #1
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	e005      	b.n	800f0f0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3718      	adds	r7, #24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d004      	beq.n	800f118 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2280      	movs	r2, #128	@ 0x80
 800f112:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	e00c      	b.n	800f132 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2205      	movs	r2, #5
 800f11c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f022 0201 	bic.w	r2, r2, #1
 800f12e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	370c      	adds	r7, #12
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f13e:	b480      	push	{r7}
 800f140:	b083      	sub	sp, #12
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f14c:	b2db      	uxtb	r3, r3
}
 800f14e:	4618      	mov	r0, r3
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b085      	sub	sp, #20
 800f15e:	af00      	add	r7, sp, #0
 800f160:	60f8      	str	r0, [r7, #12]
 800f162:	60b9      	str	r1, [r7, #8]
 800f164:	607a      	str	r2, [r7, #4]
 800f166:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f176:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	2b40      	cmp	r3, #64	@ 0x40
 800f186:	d108      	bne.n	800f19a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f198:	e007      	b.n	800f1aa <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	60da      	str	r2, [r3, #12]
}
 800f1aa:	bf00      	nop
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b087      	sub	sp, #28
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	60f8      	str	r0, [r7, #12]
 800f1be:	460b      	mov	r3, r1
 800f1c0:	607a      	str	r2, [r7, #4]
 800f1c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800f1c8:	7afb      	ldrb	r3, [r7, #11]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d103      	bne.n	800f1d6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	605a      	str	r2, [r3, #4]
      break;
 800f1d4:	e002      	b.n	800f1dc <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	75fb      	strb	r3, [r7, #23]
      break;
 800f1da:	bf00      	nop
  }

  return status;
 800f1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d101      	bne.n	800f1fe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e003      	b.n	800f206 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800f204:	2300      	movs	r3, #0
  }
}
 800f206:	4618      	mov	r0, r3
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
	...

0800f214 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f003 031f 	and.w	r3, r3, #31
 800f224:	2201      	movs	r2, #1
 800f226:	fa02 f303 	lsl.w	r3, r2, r3
 800f22a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800f22c:	4b0a      	ldr	r3, [pc, #40]	@ (800f258 <HAL_EXTI_IRQHandler+0x44>)
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	4013      	ands	r3, r2
 800f234:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d009      	beq.n	800f250 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800f23c:	4a06      	ldr	r2, [pc, #24]	@ (800f258 <HAL_EXTI_IRQHandler+0x44>)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d002      	beq.n	800f250 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	4798      	blx	r3
    }
  }
}
 800f250:	bf00      	nop
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	40013c00 	.word	0x40013c00

0800f25c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b089      	sub	sp, #36	@ 0x24
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f266:	2300      	movs	r3, #0
 800f268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f26e:	2300      	movs	r3, #0
 800f270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f272:	2300      	movs	r3, #0
 800f274:	61fb      	str	r3, [r7, #28]
 800f276:	e159      	b.n	800f52c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f278:	2201      	movs	r2, #1
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	fa02 f303 	lsl.w	r3, r2, r3
 800f280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	4013      	ands	r3, r2
 800f28a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f28c:	693a      	ldr	r2, [r7, #16]
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	429a      	cmp	r2, r3
 800f292:	f040 8148 	bne.w	800f526 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	f003 0303 	and.w	r3, r3, #3
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d005      	beq.n	800f2ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f2aa:	2b02      	cmp	r3, #2
 800f2ac:	d130      	bne.n	800f310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	2203      	movs	r2, #3
 800f2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f2be:	43db      	mvns	r3, r3
 800f2c0:	69ba      	ldr	r2, [r7, #24]
 800f2c2:	4013      	ands	r3, r2
 800f2c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	68da      	ldr	r2, [r3, #12]
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d2:	69ba      	ldr	r2, [r7, #24]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	69ba      	ldr	r2, [r7, #24]
 800f2dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ec:	43db      	mvns	r3, r3
 800f2ee:	69ba      	ldr	r2, [r7, #24]
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	091b      	lsrs	r3, r3, #4
 800f2fa:	f003 0201 	and.w	r2, r3, #1
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	fa02 f303 	lsl.w	r3, r2, r3
 800f304:	69ba      	ldr	r2, [r7, #24]
 800f306:	4313      	orrs	r3, r2
 800f308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	69ba      	ldr	r2, [r7, #24]
 800f30e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	f003 0303 	and.w	r3, r3, #3
 800f318:	2b03      	cmp	r3, #3
 800f31a:	d017      	beq.n	800f34c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	2203      	movs	r2, #3
 800f328:	fa02 f303 	lsl.w	r3, r2, r3
 800f32c:	43db      	mvns	r3, r3
 800f32e:	69ba      	ldr	r2, [r7, #24]
 800f330:	4013      	ands	r3, r2
 800f332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	689a      	ldr	r2, [r3, #8]
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	005b      	lsls	r3, r3, #1
 800f33c:	fa02 f303 	lsl.w	r3, r2, r3
 800f340:	69ba      	ldr	r2, [r7, #24]
 800f342:	4313      	orrs	r3, r2
 800f344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	f003 0303 	and.w	r3, r3, #3
 800f354:	2b02      	cmp	r3, #2
 800f356:	d123      	bne.n	800f3a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	08da      	lsrs	r2, r3, #3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3208      	adds	r2, #8
 800f360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	f003 0307 	and.w	r3, r3, #7
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	220f      	movs	r2, #15
 800f370:	fa02 f303 	lsl.w	r3, r2, r3
 800f374:	43db      	mvns	r3, r3
 800f376:	69ba      	ldr	r2, [r7, #24]
 800f378:	4013      	ands	r3, r2
 800f37a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	691a      	ldr	r2, [r3, #16]
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	f003 0307 	and.w	r3, r3, #7
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	fa02 f303 	lsl.w	r3, r2, r3
 800f38c:	69ba      	ldr	r2, [r7, #24]
 800f38e:	4313      	orrs	r3, r2
 800f390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	08da      	lsrs	r2, r3, #3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	3208      	adds	r2, #8
 800f39a:	69b9      	ldr	r1, [r7, #24]
 800f39c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	2203      	movs	r2, #3
 800f3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b0:	43db      	mvns	r3, r3
 800f3b2:	69ba      	ldr	r2, [r7, #24]
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	f003 0203 	and.w	r2, r3, #3
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f3c8:	69ba      	ldr	r2, [r7, #24]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 80a2 	beq.w	800f526 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	60fb      	str	r3, [r7, #12]
 800f3e6:	4b57      	ldr	r3, [pc, #348]	@ (800f544 <HAL_GPIO_Init+0x2e8>)
 800f3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3ea:	4a56      	ldr	r2, [pc, #344]	@ (800f544 <HAL_GPIO_Init+0x2e8>)
 800f3ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f3f0:	6453      	str	r3, [r2, #68]	@ 0x44
 800f3f2:	4b54      	ldr	r3, [pc, #336]	@ (800f544 <HAL_GPIO_Init+0x2e8>)
 800f3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3fa:	60fb      	str	r3, [r7, #12]
 800f3fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f3fe:	4a52      	ldr	r2, [pc, #328]	@ (800f548 <HAL_GPIO_Init+0x2ec>)
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	089b      	lsrs	r3, r3, #2
 800f404:	3302      	adds	r3, #2
 800f406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f40a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	f003 0303 	and.w	r3, r3, #3
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	220f      	movs	r2, #15
 800f416:	fa02 f303 	lsl.w	r3, r2, r3
 800f41a:	43db      	mvns	r3, r3
 800f41c:	69ba      	ldr	r2, [r7, #24]
 800f41e:	4013      	ands	r3, r2
 800f420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4a49      	ldr	r2, [pc, #292]	@ (800f54c <HAL_GPIO_Init+0x2f0>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d019      	beq.n	800f45e <HAL_GPIO_Init+0x202>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4a48      	ldr	r2, [pc, #288]	@ (800f550 <HAL_GPIO_Init+0x2f4>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d013      	beq.n	800f45a <HAL_GPIO_Init+0x1fe>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	4a47      	ldr	r2, [pc, #284]	@ (800f554 <HAL_GPIO_Init+0x2f8>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d00d      	beq.n	800f456 <HAL_GPIO_Init+0x1fa>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4a46      	ldr	r2, [pc, #280]	@ (800f558 <HAL_GPIO_Init+0x2fc>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d007      	beq.n	800f452 <HAL_GPIO_Init+0x1f6>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	4a45      	ldr	r2, [pc, #276]	@ (800f55c <HAL_GPIO_Init+0x300>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d101      	bne.n	800f44e <HAL_GPIO_Init+0x1f2>
 800f44a:	2304      	movs	r3, #4
 800f44c:	e008      	b.n	800f460 <HAL_GPIO_Init+0x204>
 800f44e:	2307      	movs	r3, #7
 800f450:	e006      	b.n	800f460 <HAL_GPIO_Init+0x204>
 800f452:	2303      	movs	r3, #3
 800f454:	e004      	b.n	800f460 <HAL_GPIO_Init+0x204>
 800f456:	2302      	movs	r3, #2
 800f458:	e002      	b.n	800f460 <HAL_GPIO_Init+0x204>
 800f45a:	2301      	movs	r3, #1
 800f45c:	e000      	b.n	800f460 <HAL_GPIO_Init+0x204>
 800f45e:	2300      	movs	r3, #0
 800f460:	69fa      	ldr	r2, [r7, #28]
 800f462:	f002 0203 	and.w	r2, r2, #3
 800f466:	0092      	lsls	r2, r2, #2
 800f468:	4093      	lsls	r3, r2
 800f46a:	69ba      	ldr	r2, [r7, #24]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f470:	4935      	ldr	r1, [pc, #212]	@ (800f548 <HAL_GPIO_Init+0x2ec>)
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	089b      	lsrs	r3, r3, #2
 800f476:	3302      	adds	r3, #2
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f47e:	4b38      	ldr	r3, [pc, #224]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	43db      	mvns	r3, r3
 800f488:	69ba      	ldr	r2, [r7, #24]
 800f48a:	4013      	ands	r3, r2
 800f48c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800f49a:	69ba      	ldr	r2, [r7, #24]
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f4a2:	4a2f      	ldr	r2, [pc, #188]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f4a8:	4b2d      	ldr	r3, [pc, #180]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	43db      	mvns	r3, r3
 800f4b2:	69ba      	ldr	r2, [r7, #24]
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d003      	beq.n	800f4cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800f4c4:	69ba      	ldr	r2, [r7, #24]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f4cc:	4a24      	ldr	r2, [pc, #144]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800f4d2:	4b23      	ldr	r3, [pc, #140]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	43db      	mvns	r3, r3
 800f4dc:	69ba      	ldr	r2, [r7, #24]
 800f4de:	4013      	ands	r3, r2
 800f4e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d003      	beq.n	800f4f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800f4ee:	69ba      	ldr	r2, [r7, #24]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f4f6:	4a1a      	ldr	r2, [pc, #104]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f4fc:	4b18      	ldr	r3, [pc, #96]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	43db      	mvns	r3, r3
 800f506:	69ba      	ldr	r2, [r7, #24]
 800f508:	4013      	ands	r3, r2
 800f50a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800f518:	69ba      	ldr	r2, [r7, #24]
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f520:	4a0f      	ldr	r2, [pc, #60]	@ (800f560 <HAL_GPIO_Init+0x304>)
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	3301      	adds	r3, #1
 800f52a:	61fb      	str	r3, [r7, #28]
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	2b0f      	cmp	r3, #15
 800f530:	f67f aea2 	bls.w	800f278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop
 800f538:	3724      	adds	r7, #36	@ 0x24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	40023800 	.word	0x40023800
 800f548:	40013800 	.word	0x40013800
 800f54c:	40020000 	.word	0x40020000
 800f550:	40020400 	.word	0x40020400
 800f554:	40020800 	.word	0x40020800
 800f558:	40020c00 	.word	0x40020c00
 800f55c:	40021000 	.word	0x40021000
 800f560:	40013c00 	.word	0x40013c00

0800f564 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f56e:	2300      	movs	r3, #0
 800f570:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800f576:	2300      	movs	r3, #0
 800f578:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f57a:	2300      	movs	r3, #0
 800f57c:	617b      	str	r3, [r7, #20]
 800f57e:	e0bb      	b.n	800f6f8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f580:	2201      	movs	r2, #1
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	fa02 f303 	lsl.w	r3, r2, r3
 800f588:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	4013      	ands	r3, r2
 800f590:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	429a      	cmp	r2, r3
 800f598:	f040 80ab 	bne.w	800f6f2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800f59c:	4a5c      	ldr	r2, [pc, #368]	@ (800f710 <HAL_GPIO_DeInit+0x1ac>)
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	089b      	lsrs	r3, r3, #2
 800f5a2:	3302      	adds	r3, #2
 800f5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	f003 0303 	and.w	r3, r3, #3
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	220f      	movs	r2, #15
 800f5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a54      	ldr	r2, [pc, #336]	@ (800f714 <HAL_GPIO_DeInit+0x1b0>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d019      	beq.n	800f5fa <HAL_GPIO_DeInit+0x96>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a53      	ldr	r2, [pc, #332]	@ (800f718 <HAL_GPIO_DeInit+0x1b4>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d013      	beq.n	800f5f6 <HAL_GPIO_DeInit+0x92>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a52      	ldr	r2, [pc, #328]	@ (800f71c <HAL_GPIO_DeInit+0x1b8>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d00d      	beq.n	800f5f2 <HAL_GPIO_DeInit+0x8e>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a51      	ldr	r2, [pc, #324]	@ (800f720 <HAL_GPIO_DeInit+0x1bc>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d007      	beq.n	800f5ee <HAL_GPIO_DeInit+0x8a>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4a50      	ldr	r2, [pc, #320]	@ (800f724 <HAL_GPIO_DeInit+0x1c0>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d101      	bne.n	800f5ea <HAL_GPIO_DeInit+0x86>
 800f5e6:	2304      	movs	r3, #4
 800f5e8:	e008      	b.n	800f5fc <HAL_GPIO_DeInit+0x98>
 800f5ea:	2307      	movs	r3, #7
 800f5ec:	e006      	b.n	800f5fc <HAL_GPIO_DeInit+0x98>
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	e004      	b.n	800f5fc <HAL_GPIO_DeInit+0x98>
 800f5f2:	2302      	movs	r3, #2
 800f5f4:	e002      	b.n	800f5fc <HAL_GPIO_DeInit+0x98>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e000      	b.n	800f5fc <HAL_GPIO_DeInit+0x98>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	f002 0203 	and.w	r2, r2, #3
 800f602:	0092      	lsls	r2, r2, #2
 800f604:	4093      	lsls	r3, r2
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d132      	bne.n	800f672 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800f60c:	4b46      	ldr	r3, [pc, #280]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	43db      	mvns	r3, r3
 800f614:	4944      	ldr	r1, [pc, #272]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f616:	4013      	ands	r3, r2
 800f618:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800f61a:	4b43      	ldr	r3, [pc, #268]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	43db      	mvns	r3, r3
 800f622:	4941      	ldr	r1, [pc, #260]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f624:	4013      	ands	r3, r2
 800f626:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800f628:	4b3f      	ldr	r3, [pc, #252]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f62a:	68da      	ldr	r2, [r3, #12]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	43db      	mvns	r3, r3
 800f630:	493d      	ldr	r1, [pc, #244]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f632:	4013      	ands	r3, r2
 800f634:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800f636:	4b3c      	ldr	r3, [pc, #240]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f638:	689a      	ldr	r2, [r3, #8]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	43db      	mvns	r3, r3
 800f63e:	493a      	ldr	r1, [pc, #232]	@ (800f728 <HAL_GPIO_DeInit+0x1c4>)
 800f640:	4013      	ands	r3, r2
 800f642:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	f003 0303 	and.w	r3, r3, #3
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	220f      	movs	r2, #15
 800f64e:	fa02 f303 	lsl.w	r3, r2, r3
 800f652:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800f654:	4a2e      	ldr	r2, [pc, #184]	@ (800f710 <HAL_GPIO_DeInit+0x1ac>)
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	089b      	lsrs	r3, r3, #2
 800f65a:	3302      	adds	r3, #2
 800f65c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	43da      	mvns	r2, r3
 800f664:	482a      	ldr	r0, [pc, #168]	@ (800f710 <HAL_GPIO_DeInit+0x1ac>)
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	089b      	lsrs	r3, r3, #2
 800f66a:	400a      	ands	r2, r1
 800f66c:	3302      	adds	r3, #2
 800f66e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	005b      	lsls	r3, r3, #1
 800f67a:	2103      	movs	r1, #3
 800f67c:	fa01 f303 	lsl.w	r3, r1, r3
 800f680:	43db      	mvns	r3, r3
 800f682:	401a      	ands	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	08da      	lsrs	r2, r3, #3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3208      	adds	r2, #8
 800f690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	f003 0307 	and.w	r3, r3, #7
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	220f      	movs	r2, #15
 800f69e:	fa02 f303 	lsl.w	r3, r2, r3
 800f6a2:	43db      	mvns	r3, r3
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	08d2      	lsrs	r2, r2, #3
 800f6a8:	4019      	ands	r1, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	3208      	adds	r2, #8
 800f6ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68da      	ldr	r2, [r3, #12]
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	2103      	movs	r1, #3
 800f6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f6c0:	43db      	mvns	r3, r3
 800f6c2:	401a      	ands	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	2101      	movs	r1, #1
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f6d4:	43db      	mvns	r3, r3
 800f6d6:	401a      	ands	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	689a      	ldr	r2, [r3, #8]
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	005b      	lsls	r3, r3, #1
 800f6e4:	2103      	movs	r1, #3
 800f6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f6ea:	43db      	mvns	r3, r3
 800f6ec:	401a      	ands	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	617b      	str	r3, [r7, #20]
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2b0f      	cmp	r3, #15
 800f6fc:	f67f af40 	bls.w	800f580 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800f700:	bf00      	nop
 800f702:	bf00      	nop
 800f704:	371c      	adds	r7, #28
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	40013800 	.word	0x40013800
 800f714:	40020000 	.word	0x40020000
 800f718:	40020400 	.word	0x40020400
 800f71c:	40020800 	.word	0x40020800
 800f720:	40020c00 	.word	0x40020c00
 800f724:	40021000 	.word	0x40021000
 800f728:	40013c00 	.word	0x40013c00

0800f72c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	460b      	mov	r3, r1
 800f736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	691a      	ldr	r2, [r3, #16]
 800f73c:	887b      	ldrh	r3, [r7, #2]
 800f73e:	4013      	ands	r3, r2
 800f740:	2b00      	cmp	r3, #0
 800f742:	d002      	beq.n	800f74a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f744:	2301      	movs	r3, #1
 800f746:	73fb      	strb	r3, [r7, #15]
 800f748:	e001      	b.n	800f74e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f74a:	2300      	movs	r3, #0
 800f74c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	460b      	mov	r3, r1
 800f766:	807b      	strh	r3, [r7, #2]
 800f768:	4613      	mov	r3, r2
 800f76a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f76c:	787b      	ldrb	r3, [r7, #1]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f772:	887a      	ldrh	r2, [r7, #2]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f778:	e003      	b.n	800f782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f77a:	887b      	ldrh	r3, [r7, #2]
 800f77c:	041a      	lsls	r2, r3, #16
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	619a      	str	r2, [r3, #24]
}
 800f782:	bf00      	nop
 800f784:	370c      	adds	r7, #12
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
	...

0800f790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d101      	bne.n	800f7a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e12b      	b.n	800f9fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d106      	bne.n	800f7bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 f95d 	bl	800fa76 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2224      	movs	r2, #36	@ 0x24
 800f7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f022 0201 	bic.w	r2, r2, #1
 800f7d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f7e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f7f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800f7f4:	f003 fe26 	bl	8013444 <HAL_RCC_GetPCLK1Freq>
 800f7f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	4a81      	ldr	r2, [pc, #516]	@ (800fa04 <HAL_I2C_Init+0x274>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d807      	bhi.n	800f814 <HAL_I2C_Init+0x84>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	4a80      	ldr	r2, [pc, #512]	@ (800fa08 <HAL_I2C_Init+0x278>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	bf94      	ite	ls
 800f80c:	2301      	movls	r3, #1
 800f80e:	2300      	movhi	r3, #0
 800f810:	b2db      	uxtb	r3, r3
 800f812:	e006      	b.n	800f822 <HAL_I2C_Init+0x92>
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	4a7d      	ldr	r2, [pc, #500]	@ (800fa0c <HAL_I2C_Init+0x27c>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	bf94      	ite	ls
 800f81c:	2301      	movls	r3, #1
 800f81e:	2300      	movhi	r3, #0
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d001      	beq.n	800f82a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	e0e7      	b.n	800f9fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	4a78      	ldr	r2, [pc, #480]	@ (800fa10 <HAL_I2C_Init+0x280>)
 800f82e:	fba2 2303 	umull	r2, r3, r2, r3
 800f832:	0c9b      	lsrs	r3, r3, #18
 800f834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	430a      	orrs	r2, r1
 800f848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6a1b      	ldr	r3, [r3, #32]
 800f850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	4a6a      	ldr	r2, [pc, #424]	@ (800fa04 <HAL_I2C_Init+0x274>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d802      	bhi.n	800f864 <HAL_I2C_Init+0xd4>
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	3301      	adds	r3, #1
 800f862:	e009      	b.n	800f878 <HAL_I2C_Init+0xe8>
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800f86a:	fb02 f303 	mul.w	r3, r2, r3
 800f86e:	4a69      	ldr	r2, [pc, #420]	@ (800fa14 <HAL_I2C_Init+0x284>)
 800f870:	fba2 2303 	umull	r2, r3, r2, r3
 800f874:	099b      	lsrs	r3, r3, #6
 800f876:	3301      	adds	r3, #1
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	6812      	ldr	r2, [r2, #0]
 800f87c:	430b      	orrs	r3, r1
 800f87e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	69db      	ldr	r3, [r3, #28]
 800f886:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800f88a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	495c      	ldr	r1, [pc, #368]	@ (800fa04 <HAL_I2C_Init+0x274>)
 800f894:	428b      	cmp	r3, r1
 800f896:	d819      	bhi.n	800f8cc <HAL_I2C_Init+0x13c>
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	1e59      	subs	r1, r3, #1
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800f8a6:	1c59      	adds	r1, r3, #1
 800f8a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800f8ac:	400b      	ands	r3, r1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00a      	beq.n	800f8c8 <HAL_I2C_Init+0x138>
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	1e59      	subs	r1, r3, #1
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	fbb1 f3f3 	udiv	r3, r1, r3
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f8c6:	e051      	b.n	800f96c <HAL_I2C_Init+0x1dc>
 800f8c8:	2304      	movs	r3, #4
 800f8ca:	e04f      	b.n	800f96c <HAL_I2C_Init+0x1dc>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d111      	bne.n	800f8f8 <HAL_I2C_Init+0x168>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	1e58      	subs	r0, r3, #1
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6859      	ldr	r1, [r3, #4]
 800f8dc:	460b      	mov	r3, r1
 800f8de:	005b      	lsls	r3, r3, #1
 800f8e0:	440b      	add	r3, r1
 800f8e2:	fbb0 f3f3 	udiv	r3, r0, r3
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	bf0c      	ite	eq
 800f8f0:	2301      	moveq	r3, #1
 800f8f2:	2300      	movne	r3, #0
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	e012      	b.n	800f91e <HAL_I2C_Init+0x18e>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	1e58      	subs	r0, r3, #1
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6859      	ldr	r1, [r3, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	440b      	add	r3, r1
 800f906:	0099      	lsls	r1, r3, #2
 800f908:	440b      	add	r3, r1
 800f90a:	fbb0 f3f3 	udiv	r3, r0, r3
 800f90e:	3301      	adds	r3, #1
 800f910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f914:	2b00      	cmp	r3, #0
 800f916:	bf0c      	ite	eq
 800f918:	2301      	moveq	r3, #1
 800f91a:	2300      	movne	r3, #0
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <HAL_I2C_Init+0x196>
 800f922:	2301      	movs	r3, #1
 800f924:	e022      	b.n	800f96c <HAL_I2C_Init+0x1dc>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d10e      	bne.n	800f94c <HAL_I2C_Init+0x1bc>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	1e58      	subs	r0, r3, #1
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6859      	ldr	r1, [r3, #4]
 800f936:	460b      	mov	r3, r1
 800f938:	005b      	lsls	r3, r3, #1
 800f93a:	440b      	add	r3, r1
 800f93c:	fbb0 f3f3 	udiv	r3, r0, r3
 800f940:	3301      	adds	r3, #1
 800f942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f94a:	e00f      	b.n	800f96c <HAL_I2C_Init+0x1dc>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	1e58      	subs	r0, r3, #1
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6859      	ldr	r1, [r3, #4]
 800f954:	460b      	mov	r3, r1
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	440b      	add	r3, r1
 800f95a:	0099      	lsls	r1, r3, #2
 800f95c:	440b      	add	r3, r1
 800f95e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f962:	3301      	adds	r3, #1
 800f964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f96c:	6879      	ldr	r1, [r7, #4]
 800f96e:	6809      	ldr	r1, [r1, #0]
 800f970:	4313      	orrs	r3, r2
 800f972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	69da      	ldr	r2, [r3, #28]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	431a      	orrs	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	430a      	orrs	r2, r1
 800f98e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800f99a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	6911      	ldr	r1, [r2, #16]
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	68d2      	ldr	r2, [r2, #12]
 800f9a6:	4311      	orrs	r1, r2
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	6812      	ldr	r2, [r2, #0]
 800f9ac:	430b      	orrs	r3, r1
 800f9ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	695a      	ldr	r2, [r3, #20]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	699b      	ldr	r3, [r3, #24]
 800f9c2:	431a      	orrs	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	430a      	orrs	r2, r1
 800f9ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f042 0201 	orr.w	r2, r2, #1
 800f9da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2220      	movs	r2, #32
 800f9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	000186a0 	.word	0x000186a0
 800fa08:	001e847f 	.word	0x001e847f
 800fa0c:	003d08ff 	.word	0x003d08ff
 800fa10:	431bde83 	.word	0x431bde83
 800fa14:	10624dd3 	.word	0x10624dd3

0800fa18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d101      	bne.n	800fa2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	e021      	b.n	800fa6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2224      	movs	r2, #36	@ 0x24
 800fa2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f022 0201 	bic.w	r2, r2, #1
 800fa40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f821 	bl	800fa8a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800fa76:	b480      	push	{r7}
 800fa78:	b083      	sub	sp, #12
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800fa7e:	bf00      	nop
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800fa92:	bf00      	nop
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b083      	sub	sp, #12
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	695b      	ldr	r3, [r3, #20]
 800faac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fab0:	2b80      	cmp	r3, #128	@ 0x80
 800fab2:	d103      	bne.n	800fabc <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2200      	movs	r2, #0
 800faba:	611a      	str	r2, [r3, #16]
  }
}
 800fabc:	bf00      	nop
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af02      	add	r7, sp, #8
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	607a      	str	r2, [r7, #4]
 800fad2:	461a      	mov	r2, r3
 800fad4:	460b      	mov	r3, r1
 800fad6:	817b      	strh	r3, [r7, #10]
 800fad8:	4613      	mov	r3, r2
 800fada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800fadc:	f7ff f926 	bl	800ed2c <HAL_GetTick>
 800fae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b20      	cmp	r3, #32
 800faec:	f040 80e0 	bne.w	800fcb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	2319      	movs	r3, #25
 800faf6:	2201      	movs	r2, #1
 800faf8:	4970      	ldr	r1, [pc, #448]	@ (800fcbc <HAL_I2C_Master_Transmit+0x1f4>)
 800fafa:	68f8      	ldr	r0, [r7, #12]
 800fafc:	f002 fdae 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d001      	beq.n	800fb0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800fb06:	2302      	movs	r3, #2
 800fb08:	e0d3      	b.n	800fcb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d101      	bne.n	800fb18 <HAL_I2C_Master_Transmit+0x50>
 800fb14:	2302      	movs	r3, #2
 800fb16:	e0cc      	b.n	800fcb2 <HAL_I2C_Master_Transmit+0x1ea>
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d007      	beq.n	800fb3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f042 0201 	orr.w	r2, r2, #1
 800fb3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fb4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2221      	movs	r2, #33	@ 0x21
 800fb52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2210      	movs	r2, #16
 800fb5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2200      	movs	r2, #0
 800fb62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	893a      	ldrh	r2, [r7, #8]
 800fb6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	4a50      	ldr	r2, [pc, #320]	@ (800fcc0 <HAL_I2C_Master_Transmit+0x1f8>)
 800fb7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800fb80:	8979      	ldrh	r1, [r7, #10]
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	6a3a      	ldr	r2, [r7, #32]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f002 f9f2 	bl	8011f70 <I2C_MasterRequestWrite>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	e08d      	b.n	800fcb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fb96:	2300      	movs	r3, #0
 800fb98:	613b      	str	r3, [r7, #16]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	695b      	ldr	r3, [r3, #20]
 800fba0:	613b      	str	r3, [r7, #16]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	613b      	str	r3, [r7, #16]
 800fbaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800fbac:	e066      	b.n	800fc7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	6a39      	ldr	r1, [r7, #32]
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f002 fe6c 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d00d      	beq.n	800fbda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbc2:	2b04      	cmp	r3, #4
 800fbc4:	d107      	bne.n	800fbd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fbd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e06b      	b.n	800fcb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbde:	781a      	ldrb	r2, [r3, #0]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc02:	3b01      	subs	r3, #1
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	695b      	ldr	r3, [r3, #20]
 800fc10:	f003 0304 	and.w	r3, r3, #4
 800fc14:	2b04      	cmp	r3, #4
 800fc16:	d11b      	bne.n	800fc50 <HAL_I2C_Master_Transmit+0x188>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d017      	beq.n	800fc50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc24:	781a      	ldrb	r2, [r3, #0]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	6a39      	ldr	r1, [r7, #32]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f002 fe63 	bl	8012920 <I2C_WaitOnBTFFlagUntilTimeout>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d00d      	beq.n	800fc7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	d107      	bne.n	800fc78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fc76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e01a      	b.n	800fcb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d194      	bne.n	800fbae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fc92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2220      	movs	r2, #32
 800fc98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	e000      	b.n	800fcb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fcb0:	2302      	movs	r3, #2
  }
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	00100002 	.word	0x00100002
 800fcc0:	ffff0000 	.word	0xffff0000

0800fcc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b08c      	sub	sp, #48	@ 0x30
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	607a      	str	r2, [r7, #4]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	817b      	strh	r3, [r7, #10]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800fcd8:	f7ff f828 	bl	800ed2c <HAL_GetTick>
 800fcdc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b20      	cmp	r3, #32
 800fce8:	f040 8217 	bne.w	801011a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800fcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	2319      	movs	r3, #25
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	497c      	ldr	r1, [pc, #496]	@ (800fee8 <HAL_I2C_Master_Receive+0x224>)
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f002 fcb0 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800fd02:	2302      	movs	r3, #2
 800fd04:	e20a      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d101      	bne.n	800fd14 <HAL_I2C_Master_Receive+0x50>
 800fd10:	2302      	movs	r3, #2
 800fd12:	e203      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f003 0301 	and.w	r3, r3, #1
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d007      	beq.n	800fd3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f042 0201 	orr.w	r2, r2, #1
 800fd38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fd48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2222      	movs	r2, #34	@ 0x22
 800fd4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2210      	movs	r2, #16
 800fd56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	893a      	ldrh	r2, [r7, #8]
 800fd6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	4a5c      	ldr	r2, [pc, #368]	@ (800feec <HAL_I2C_Master_Receive+0x228>)
 800fd7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800fd7c:	8979      	ldrh	r1, [r7, #10]
 800fd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f002 f976 	bl	8012074 <I2C_MasterRequestRead>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e1c4      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d113      	bne.n	800fdc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	623b      	str	r3, [r7, #32]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	695b      	ldr	r3, [r3, #20]
 800fda4:	623b      	str	r3, [r7, #32]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	699b      	ldr	r3, [r3, #24]
 800fdac:	623b      	str	r3, [r7, #32]
 800fdae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fdbe:	601a      	str	r2, [r3, #0]
 800fdc0:	e198      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d11b      	bne.n	800fe02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fdd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fdda:	2300      	movs	r3, #0
 800fddc:	61fb      	str	r3, [r7, #28]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	61fb      	str	r3, [r7, #28]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	699b      	ldr	r3, [r3, #24]
 800fdec:	61fb      	str	r3, [r7, #28]
 800fdee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fdfe:	601a      	str	r2, [r3, #0]
 800fe00:	e178      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	d11b      	bne.n	800fe42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	61bb      	str	r3, [r7, #24]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	695b      	ldr	r3, [r3, #20]
 800fe34:	61bb      	str	r3, [r7, #24]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	61bb      	str	r3, [r7, #24]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	e158      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fe50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe52:	2300      	movs	r3, #0
 800fe54:	617b      	str	r3, [r7, #20]
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	695b      	ldr	r3, [r3, #20]
 800fe5c:	617b      	str	r3, [r7, #20]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	699b      	ldr	r3, [r3, #24]
 800fe64:	617b      	str	r3, [r7, #20]
 800fe66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800fe68:	e144      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	f200 80f1 	bhi.w	8010056 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d123      	bne.n	800fec4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f002 fdc7 	bl	8012a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d001      	beq.n	800fe90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e145      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	691a      	ldr	r2, [r3, #16]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe9a:	b2d2      	uxtb	r2, r2
 800fe9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fea2:	1c5a      	adds	r2, r3, #1
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800feac:	3b01      	subs	r3, #1
 800feae:	b29a      	uxth	r2, r3
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800feb8:	b29b      	uxth	r3, r3
 800feba:	3b01      	subs	r3, #1
 800febc:	b29a      	uxth	r2, r3
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fec2:	e117      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d14e      	bne.n	800ff6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800fecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed2:	2200      	movs	r2, #0
 800fed4:	4906      	ldr	r1, [pc, #24]	@ (800fef0 <HAL_I2C_Master_Receive+0x22c>)
 800fed6:	68f8      	ldr	r0, [r7, #12]
 800fed8:	f002 fbc0 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d008      	beq.n	800fef4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800fee2:	2301      	movs	r3, #1
 800fee4:	e11a      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
 800fee6:	bf00      	nop
 800fee8:	00100002 	.word	0x00100002
 800feec:	ffff0000 	.word	0xffff0000
 800fef0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ff02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	691a      	ldr	r2, [r3, #16]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff0e:	b2d2      	uxtb	r2, r2
 800ff10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff20:	3b01      	subs	r3, #1
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	691a      	ldr	r2, [r3, #16]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff40:	b2d2      	uxtb	r2, r2
 800ff42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff52:	3b01      	subs	r3, #1
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	3b01      	subs	r3, #1
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ff68:	e0c4      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff70:	2200      	movs	r2, #0
 800ff72:	496c      	ldr	r1, [pc, #432]	@ (8010124 <HAL_I2C_Master_Receive+0x460>)
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f002 fb71 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ff80:	2301      	movs	r3, #1
 800ff82:	e0cb      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	691a      	ldr	r2, [r3, #16]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff9e:	b2d2      	uxtb	r2, r2
 800ffa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ffb0:	3b01      	subs	r3, #1
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffcc:	2200      	movs	r2, #0
 800ffce:	4955      	ldr	r1, [pc, #340]	@ (8010124 <HAL_I2C_Master_Receive+0x460>)
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f002 fb43 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e09d      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	691a      	ldr	r2, [r3, #16]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fffa:	b2d2      	uxtb	r2, r2
 800fffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010002:	1c5a      	adds	r2, r3, #1
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801000c:	3b01      	subs	r3, #1
 801000e:	b29a      	uxth	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010018:	b29b      	uxth	r3, r3
 801001a:	3b01      	subs	r3, #1
 801001c:	b29a      	uxth	r2, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	691a      	ldr	r2, [r3, #16]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801002c:	b2d2      	uxtb	r2, r2
 801002e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010034:	1c5a      	adds	r2, r3, #1
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801003e:	3b01      	subs	r3, #1
 8010040:	b29a      	uxth	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801004a:	b29b      	uxth	r3, r3
 801004c:	3b01      	subs	r3, #1
 801004e:	b29a      	uxth	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010054:	e04e      	b.n	80100f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010058:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f002 fcda 	bl	8012a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8010066:	2301      	movs	r3, #1
 8010068:	e058      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	691a      	ldr	r2, [r3, #16]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010074:	b2d2      	uxtb	r2, r2
 8010076:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801007c:	1c5a      	adds	r2, r3, #1
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010086:	3b01      	subs	r3, #1
 8010088:	b29a      	uxth	r2, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010092:	b29b      	uxth	r3, r3
 8010094:	3b01      	subs	r3, #1
 8010096:	b29a      	uxth	r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	f003 0304 	and.w	r3, r3, #4
 80100a6:	2b04      	cmp	r3, #4
 80100a8:	d124      	bne.n	80100f4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100ae:	2b03      	cmp	r3, #3
 80100b0:	d107      	bne.n	80100c2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80100c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	691a      	ldr	r2, [r3, #16]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100cc:	b2d2      	uxtb	r2, r2
 80100ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d4:	1c5a      	adds	r2, r3, #1
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100de:	3b01      	subs	r3, #1
 80100e0:	b29a      	uxth	r2, r3
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	3b01      	subs	r3, #1
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f47f aeb6 	bne.w	800fe6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2220      	movs	r2, #32
 8010102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2200      	movs	r2, #0
 8010112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	e000      	b.n	801011c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 801011a:	2302      	movs	r3, #2
  }
}
 801011c:	4618      	mov	r0, r3
 801011e:	3728      	adds	r7, #40	@ 0x28
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	00010004 	.word	0x00010004

08010128 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b088      	sub	sp, #32
 801012c:	af02      	add	r7, sp, #8
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	4608      	mov	r0, r1
 8010132:	4611      	mov	r1, r2
 8010134:	461a      	mov	r2, r3
 8010136:	4603      	mov	r3, r0
 8010138:	817b      	strh	r3, [r7, #10]
 801013a:	460b      	mov	r3, r1
 801013c:	813b      	strh	r3, [r7, #8]
 801013e:	4613      	mov	r3, r2
 8010140:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010142:	f7fe fdf3 	bl	800ed2c <HAL_GetTick>
 8010146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801014e:	b2db      	uxtb	r3, r3
 8010150:	2b20      	cmp	r3, #32
 8010152:	f040 80d9 	bne.w	8010308 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	2319      	movs	r3, #25
 801015c:	2201      	movs	r2, #1
 801015e:	496d      	ldr	r1, [pc, #436]	@ (8010314 <HAL_I2C_Mem_Write+0x1ec>)
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f002 fa7b 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 801016c:	2302      	movs	r3, #2
 801016e:	e0cc      	b.n	801030a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010176:	2b01      	cmp	r3, #1
 8010178:	d101      	bne.n	801017e <HAL_I2C_Mem_Write+0x56>
 801017a:	2302      	movs	r3, #2
 801017c:	e0c5      	b.n	801030a <HAL_I2C_Mem_Write+0x1e2>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f003 0301 	and.w	r3, r3, #1
 8010190:	2b01      	cmp	r3, #1
 8010192:	d007      	beq.n	80101a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f042 0201 	orr.w	r2, r2, #1
 80101a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80101b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2221      	movs	r2, #33	@ 0x21
 80101b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2240      	movs	r2, #64	@ 0x40
 80101c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6a3a      	ldr	r2, [r7, #32]
 80101ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80101d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101da:	b29a      	uxth	r2, r3
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4a4d      	ldr	r2, [pc, #308]	@ (8010318 <HAL_I2C_Mem_Write+0x1f0>)
 80101e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80101e6:	88f8      	ldrh	r0, [r7, #6]
 80101e8:	893a      	ldrh	r2, [r7, #8]
 80101ea:	8979      	ldrh	r1, [r7, #10]
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	4603      	mov	r3, r0
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f002 f80a 	bl	8012210 <I2C_RequestMemoryWrite>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d052      	beq.n	80102a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	e081      	b.n	801030a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010206:	697a      	ldr	r2, [r7, #20]
 8010208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f002 fb40 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00d      	beq.n	8010232 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801021a:	2b04      	cmp	r3, #4
 801021c:	d107      	bne.n	801022e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801022c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801022e:	2301      	movs	r3, #1
 8010230:	e06b      	b.n	801030a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010236:	781a      	ldrb	r2, [r3, #0]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010242:	1c5a      	adds	r2, r3, #1
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801024c:	3b01      	subs	r3, #1
 801024e:	b29a      	uxth	r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010258:	b29b      	uxth	r3, r3
 801025a:	3b01      	subs	r3, #1
 801025c:	b29a      	uxth	r2, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	695b      	ldr	r3, [r3, #20]
 8010268:	f003 0304 	and.w	r3, r3, #4
 801026c:	2b04      	cmp	r3, #4
 801026e:	d11b      	bne.n	80102a8 <HAL_I2C_Mem_Write+0x180>
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010274:	2b00      	cmp	r3, #0
 8010276:	d017      	beq.n	80102a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801027c:	781a      	ldrb	r2, [r3, #0]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010292:	3b01      	subs	r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801029e:	b29b      	uxth	r3, r3
 80102a0:	3b01      	subs	r3, #1
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d1aa      	bne.n	8010206 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f002 fb33 	bl	8012920 <I2C_WaitOnBTFFlagUntilTimeout>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00d      	beq.n	80102dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102c4:	2b04      	cmp	r3, #4
 80102c6:	d107      	bne.n	80102d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80102d8:	2301      	movs	r3, #1
 80102da:	e016      	b.n	801030a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	e000      	b.n	801030a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8010308:	2302      	movs	r3, #2
  }
}
 801030a:	4618      	mov	r0, r3
 801030c:	3718      	adds	r7, #24
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	00100002 	.word	0x00100002
 8010318:	ffff0000 	.word	0xffff0000

0801031c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b08c      	sub	sp, #48	@ 0x30
 8010320:	af02      	add	r7, sp, #8
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	4608      	mov	r0, r1
 8010326:	4611      	mov	r1, r2
 8010328:	461a      	mov	r2, r3
 801032a:	4603      	mov	r3, r0
 801032c:	817b      	strh	r3, [r7, #10]
 801032e:	460b      	mov	r3, r1
 8010330:	813b      	strh	r3, [r7, #8]
 8010332:	4613      	mov	r3, r2
 8010334:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010336:	f7fe fcf9 	bl	800ed2c <HAL_GetTick>
 801033a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010342:	b2db      	uxtb	r3, r3
 8010344:	2b20      	cmp	r3, #32
 8010346:	f040 8214 	bne.w	8010772 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801034a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	2319      	movs	r3, #25
 8010350:	2201      	movs	r2, #1
 8010352:	497b      	ldr	r1, [pc, #492]	@ (8010540 <HAL_I2C_Mem_Read+0x224>)
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f002 f981 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d001      	beq.n	8010364 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8010360:	2302      	movs	r3, #2
 8010362:	e207      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801036a:	2b01      	cmp	r3, #1
 801036c:	d101      	bne.n	8010372 <HAL_I2C_Mem_Read+0x56>
 801036e:	2302      	movs	r3, #2
 8010370:	e200      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2201      	movs	r2, #1
 8010376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f003 0301 	and.w	r3, r3, #1
 8010384:	2b01      	cmp	r3, #1
 8010386:	d007      	beq.n	8010398 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f042 0201 	orr.w	r2, r2, #1
 8010396:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80103a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2222      	movs	r2, #34	@ 0x22
 80103ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2240      	movs	r2, #64	@ 0x40
 80103b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80103c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4a5b      	ldr	r2, [pc, #364]	@ (8010544 <HAL_I2C_Mem_Read+0x228>)
 80103d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80103da:	88f8      	ldrh	r0, [r7, #6]
 80103dc:	893a      	ldrh	r2, [r7, #8]
 80103de:	8979      	ldrh	r1, [r7, #10]
 80103e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e2:	9301      	str	r3, [sp, #4]
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	9300      	str	r3, [sp, #0]
 80103e8:	4603      	mov	r3, r0
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f001 ffa6 	bl	801233c <I2C_RequestMemoryRead>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e1bc      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d113      	bne.n	801042a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010402:	2300      	movs	r3, #0
 8010404:	623b      	str	r3, [r7, #32]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	623b      	str	r3, [r7, #32]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	699b      	ldr	r3, [r3, #24]
 8010414:	623b      	str	r3, [r7, #32]
 8010416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010426:	601a      	str	r2, [r3, #0]
 8010428:	e190      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801042e:	2b01      	cmp	r3, #1
 8010430:	d11b      	bne.n	801046a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010442:	2300      	movs	r3, #0
 8010444:	61fb      	str	r3, [r7, #28]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	695b      	ldr	r3, [r3, #20]
 801044c:	61fb      	str	r3, [r7, #28]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	699b      	ldr	r3, [r3, #24]
 8010454:	61fb      	str	r3, [r7, #28]
 8010456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010466:	601a      	str	r2, [r3, #0]
 8010468:	e170      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801046e:	2b02      	cmp	r3, #2
 8010470:	d11b      	bne.n	80104aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010492:	2300      	movs	r3, #0
 8010494:	61bb      	str	r3, [r7, #24]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	695b      	ldr	r3, [r3, #20]
 801049c:	61bb      	str	r3, [r7, #24]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	699b      	ldr	r3, [r3, #24]
 80104a4:	61bb      	str	r3, [r7, #24]
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	e150      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104aa:	2300      	movs	r3, #0
 80104ac:	617b      	str	r3, [r7, #20]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	617b      	str	r3, [r7, #20]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	699b      	ldr	r3, [r3, #24]
 80104bc:	617b      	str	r3, [r7, #20]
 80104be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80104c0:	e144      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104c6:	2b03      	cmp	r3, #3
 80104c8:	f200 80f1 	bhi.w	80106ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d123      	bne.n	801051c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80104d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80104d8:	68f8      	ldr	r0, [r7, #12]
 80104da:	f002 fa9b 	bl	8012a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d001      	beq.n	80104e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80104e4:	2301      	movs	r3, #1
 80104e6:	e145      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	691a      	ldr	r2, [r3, #16]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104f2:	b2d2      	uxtb	r2, r2
 80104f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104fa:	1c5a      	adds	r2, r3, #1
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010504:	3b01      	subs	r3, #1
 8010506:	b29a      	uxth	r2, r3
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010510:	b29b      	uxth	r3, r3
 8010512:	3b01      	subs	r3, #1
 8010514:	b29a      	uxth	r2, r3
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801051a:	e117      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010520:	2b02      	cmp	r3, #2
 8010522:	d14e      	bne.n	80105c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052a:	2200      	movs	r2, #0
 801052c:	4906      	ldr	r1, [pc, #24]	@ (8010548 <HAL_I2C_Mem_Read+0x22c>)
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f002 f894 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d008      	beq.n	801054c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 801053a:	2301      	movs	r3, #1
 801053c:	e11a      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
 801053e:	bf00      	nop
 8010540:	00100002 	.word	0x00100002
 8010544:	ffff0000 	.word	0xffff0000
 8010548:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801055a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	691a      	ldr	r2, [r3, #16]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010566:	b2d2      	uxtb	r2, r2
 8010568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010578:	3b01      	subs	r3, #1
 801057a:	b29a      	uxth	r2, r3
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010584:	b29b      	uxth	r3, r3
 8010586:	3b01      	subs	r3, #1
 8010588:	b29a      	uxth	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	691a      	ldr	r2, [r3, #16]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010598:	b2d2      	uxtb	r2, r2
 801059a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105aa:	3b01      	subs	r3, #1
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	3b01      	subs	r3, #1
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80105c0:	e0c4      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80105c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c8:	2200      	movs	r2, #0
 80105ca:	496c      	ldr	r1, [pc, #432]	@ (801077c <HAL_I2C_Mem_Read+0x460>)
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f002 f845 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80105d8:	2301      	movs	r3, #1
 80105da:	e0cb      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80105ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	691a      	ldr	r2, [r3, #16]
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105f6:	b2d2      	uxtb	r2, r2
 80105f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010608:	3b01      	subs	r3, #1
 801060a:	b29a      	uxth	r2, r3
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010614:	b29b      	uxth	r3, r3
 8010616:	3b01      	subs	r3, #1
 8010618:	b29a      	uxth	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010624:	2200      	movs	r2, #0
 8010626:	4955      	ldr	r1, [pc, #340]	@ (801077c <HAL_I2C_Mem_Read+0x460>)
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	f002 f817 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d001      	beq.n	8010638 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8010634:	2301      	movs	r3, #1
 8010636:	e09d      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	691a      	ldr	r2, [r3, #16]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010652:	b2d2      	uxtb	r2, r2
 8010654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801065a:	1c5a      	adds	r2, r3, #1
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010664:	3b01      	subs	r3, #1
 8010666:	b29a      	uxth	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010670:	b29b      	uxth	r3, r3
 8010672:	3b01      	subs	r3, #1
 8010674:	b29a      	uxth	r2, r3
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	691a      	ldr	r2, [r3, #16]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010684:	b2d2      	uxtb	r2, r2
 8010686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801068c:	1c5a      	adds	r2, r3, #1
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010696:	3b01      	subs	r3, #1
 8010698:	b29a      	uxth	r2, r3
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	3b01      	subs	r3, #1
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80106ac:	e04e      	b.n	801074c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80106ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f002 f9ae 	bl	8012a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d001      	beq.n	80106c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80106be:	2301      	movs	r3, #1
 80106c0:	e058      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	691a      	ldr	r2, [r3, #16]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106cc:	b2d2      	uxtb	r2, r2
 80106ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106de:	3b01      	subs	r3, #1
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	3b01      	subs	r3, #1
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	f003 0304 	and.w	r3, r3, #4
 80106fe:	2b04      	cmp	r3, #4
 8010700:	d124      	bne.n	801074c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010706:	2b03      	cmp	r3, #3
 8010708:	d107      	bne.n	801071a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010718:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	691a      	ldr	r2, [r3, #16]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010724:	b2d2      	uxtb	r2, r2
 8010726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801072c:	1c5a      	adds	r2, r3, #1
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010736:	3b01      	subs	r3, #1
 8010738:	b29a      	uxth	r2, r3
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010742:	b29b      	uxth	r3, r3
 8010744:	3b01      	subs	r3, #1
 8010746:	b29a      	uxth	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010750:	2b00      	cmp	r3, #0
 8010752:	f47f aeb6 	bne.w	80104c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2220      	movs	r2, #32
 801075a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801076e:	2300      	movs	r3, #0
 8010770:	e000      	b.n	8010774 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8010772:	2302      	movs	r3, #2
  }
}
 8010774:	4618      	mov	r0, r3
 8010776:	3728      	adds	r7, #40	@ 0x28
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	00010004 	.word	0x00010004

08010780 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8010788:	2300      	movs	r3, #0
 801078a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010798:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80107a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80107a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80107aa:	7bfb      	ldrb	r3, [r7, #15]
 80107ac:	2b10      	cmp	r3, #16
 80107ae:	d003      	beq.n	80107b8 <HAL_I2C_EV_IRQHandler+0x38>
 80107b0:	7bfb      	ldrb	r3, [r7, #15]
 80107b2:	2b40      	cmp	r3, #64	@ 0x40
 80107b4:	f040 80b1 	bne.w	801091a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	695b      	ldr	r3, [r3, #20]
 80107c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f003 0301 	and.w	r3, r3, #1
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d10d      	bne.n	80107ee <HAL_I2C_EV_IRQHandler+0x6e>
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80107d8:	d003      	beq.n	80107e2 <HAL_I2C_EV_IRQHandler+0x62>
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80107e0:	d101      	bne.n	80107e6 <HAL_I2C_EV_IRQHandler+0x66>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e000      	b.n	80107e8 <HAL_I2C_EV_IRQHandler+0x68>
 80107e6:	2300      	movs	r3, #0
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	f000 8114 	beq.w	8010a16 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	f003 0301 	and.w	r3, r3, #1
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00b      	beq.n	8010810 <HAL_I2C_EV_IRQHandler+0x90>
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d006      	beq.n	8010810 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f002 f992 	bl	8012b2c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 fd94 	bl	8011336 <I2C_Master_SB>
 801080e:	e083      	b.n	8010918 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	f003 0308 	and.w	r3, r3, #8
 8010816:	2b00      	cmp	r3, #0
 8010818:	d008      	beq.n	801082c <HAL_I2C_EV_IRQHandler+0xac>
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010820:	2b00      	cmp	r3, #0
 8010822:	d003      	beq.n	801082c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fe0c 	bl	8011442 <I2C_Master_ADD10>
 801082a:	e075      	b.n	8010918 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	f003 0302 	and.w	r3, r3, #2
 8010832:	2b00      	cmp	r3, #0
 8010834:	d008      	beq.n	8010848 <HAL_I2C_EV_IRQHandler+0xc8>
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801083c:	2b00      	cmp	r3, #0
 801083e:	d003      	beq.n	8010848 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fe28 	bl	8011496 <I2C_Master_ADDR>
 8010846:	e067      	b.n	8010918 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	f003 0304 	and.w	r3, r3, #4
 801084e:	2b00      	cmp	r3, #0
 8010850:	d036      	beq.n	80108c0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801085c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010860:	f000 80db 	beq.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801086a:	2b00      	cmp	r3, #0
 801086c:	d00d      	beq.n	801088a <HAL_I2C_EV_IRQHandler+0x10a>
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010874:	2b00      	cmp	r3, #0
 8010876:	d008      	beq.n	801088a <HAL_I2C_EV_IRQHandler+0x10a>
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	f003 0304 	and.w	r3, r3, #4
 801087e:	2b00      	cmp	r3, #0
 8010880:	d103      	bne.n	801088a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 f9f0 	bl	8010c68 <I2C_MasterTransmit_TXE>
 8010888:	e046      	b.n	8010918 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	f003 0304 	and.w	r3, r3, #4
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 80c2 	beq.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 80bc 	beq.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80108a2:	7bbb      	ldrb	r3, [r7, #14]
 80108a4:	2b21      	cmp	r3, #33	@ 0x21
 80108a6:	d103      	bne.n	80108b0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 fa79 	bl	8010da0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80108ae:	e0b4      	b.n	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	2b40      	cmp	r3, #64	@ 0x40
 80108b4:	f040 80b1 	bne.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 fae7 	bl	8010e8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80108be:	e0ac      	b.n	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108ce:	f000 80a4 	beq.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00d      	beq.n	80108f8 <HAL_I2C_EV_IRQHandler+0x178>
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d008      	beq.n	80108f8 <HAL_I2C_EV_IRQHandler+0x178>
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	f003 0304 	and.w	r3, r3, #4
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d103      	bne.n	80108f8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 fb63 	bl	8010fbc <I2C_MasterReceive_RXNE>
 80108f6:	e00f      	b.n	8010918 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	f003 0304 	and.w	r3, r3, #4
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 808b 	beq.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801090a:	2b00      	cmp	r3, #0
 801090c:	f000 8085 	beq.w	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 fc1b 	bl	801114c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010916:	e080      	b.n	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
 8010918:	e07f      	b.n	8010a1a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801091e:	2b00      	cmp	r3, #0
 8010920:	d004      	beq.n	801092c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	695b      	ldr	r3, [r3, #20]
 8010928:	61fb      	str	r3, [r7, #28]
 801092a:	e007      	b.n	801093c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	699b      	ldr	r3, [r3, #24]
 8010932:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	695b      	ldr	r3, [r3, #20]
 801093a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	f003 0302 	and.w	r3, r3, #2
 8010942:	2b00      	cmp	r3, #0
 8010944:	d011      	beq.n	801096a <HAL_I2C_EV_IRQHandler+0x1ea>
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00c      	beq.n	801096a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010954:	2b00      	cmp	r3, #0
 8010956:	d003      	beq.n	8010960 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	699b      	ldr	r3, [r3, #24]
 801095e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8010960:	69b9      	ldr	r1, [r7, #24]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 ffe6 	bl	8011934 <I2C_Slave_ADDR>
 8010968:	e05a      	b.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	f003 0310 	and.w	r3, r3, #16
 8010970:	2b00      	cmp	r3, #0
 8010972:	d008      	beq.n	8010986 <HAL_I2C_EV_IRQHandler+0x206>
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801097a:	2b00      	cmp	r3, #0
 801097c:	d003      	beq.n	8010986 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f001 f820 	bl	80119c4 <I2C_Slave_STOPF>
 8010984:	e04c      	b.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010986:	7bbb      	ldrb	r3, [r7, #14]
 8010988:	2b21      	cmp	r3, #33	@ 0x21
 801098a:	d002      	beq.n	8010992 <HAL_I2C_EV_IRQHandler+0x212>
 801098c:	7bbb      	ldrb	r3, [r7, #14]
 801098e:	2b29      	cmp	r3, #41	@ 0x29
 8010990:	d120      	bne.n	80109d4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00d      	beq.n	80109b8 <HAL_I2C_EV_IRQHandler+0x238>
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d008      	beq.n	80109b8 <HAL_I2C_EV_IRQHandler+0x238>
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	f003 0304 	and.w	r3, r3, #4
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 ff01 	bl	80117b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80109b6:	e032      	b.n	8010a1e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	f003 0304 	and.w	r3, r3, #4
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d02d      	beq.n	8010a1e <HAL_I2C_EV_IRQHandler+0x29e>
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d028      	beq.n	8010a1e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 ff30 	bl	8011832 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80109d2:	e024      	b.n	8010a1e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00d      	beq.n	80109fa <HAL_I2C_EV_IRQHandler+0x27a>
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d008      	beq.n	80109fa <HAL_I2C_EV_IRQHandler+0x27a>
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	f003 0304 	and.w	r3, r3, #4
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d103      	bne.n	80109fa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 ff3e 	bl	8011874 <I2C_SlaveReceive_RXNE>
 80109f8:	e012      	b.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	f003 0304 	and.w	r3, r3, #4
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00d      	beq.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d008      	beq.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 ff6e 	bl	80118f0 <I2C_SlaveReceive_BTF>
 8010a14:	e004      	b.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8010a16:	bf00      	nop
 8010a18:	e002      	b.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a1a:	bf00      	nop
 8010a1c:	e000      	b.n	8010a20 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010a1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8010a20:	3720      	adds	r7, #32
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}

08010a26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b08a      	sub	sp, #40	@ 0x28
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	695b      	ldr	r3, [r3, #20]
 8010a34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010a48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010a4a:	6a3b      	ldr	r3, [r7, #32]
 8010a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d00d      	beq.n	8010a70 <HAL_I2C_ER_IRQHandler+0x4a>
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d008      	beq.n	8010a70 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a60:	f043 0301 	orr.w	r3, r3, #1
 8010a64:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010a6e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00d      	beq.n	8010a96 <HAL_I2C_ER_IRQHandler+0x70>
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d008      	beq.n	8010a96 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8010a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a86:	f043 0302 	orr.w	r3, r3, #2
 8010a8a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8010a94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d03e      	beq.n	8010b1e <HAL_I2C_ER_IRQHandler+0xf8>
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d039      	beq.n	8010b1e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8010aaa:	7efb      	ldrb	r3, [r7, #27]
 8010aac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010abc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ac2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8010ac4:	7ebb      	ldrb	r3, [r7, #26]
 8010ac6:	2b20      	cmp	r3, #32
 8010ac8:	d112      	bne.n	8010af0 <HAL_I2C_ER_IRQHandler+0xca>
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10f      	bne.n	8010af0 <HAL_I2C_ER_IRQHandler+0xca>
 8010ad0:	7cfb      	ldrb	r3, [r7, #19]
 8010ad2:	2b21      	cmp	r3, #33	@ 0x21
 8010ad4:	d008      	beq.n	8010ae8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8010ad6:	7cfb      	ldrb	r3, [r7, #19]
 8010ad8:	2b29      	cmp	r3, #41	@ 0x29
 8010ada:	d005      	beq.n	8010ae8 <HAL_I2C_ER_IRQHandler+0xc2>
 8010adc:	7cfb      	ldrb	r3, [r7, #19]
 8010ade:	2b28      	cmp	r3, #40	@ 0x28
 8010ae0:	d106      	bne.n	8010af0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b21      	cmp	r3, #33	@ 0x21
 8010ae6:	d103      	bne.n	8010af0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f001 f89b 	bl	8011c24 <I2C_Slave_AF>
 8010aee:	e016      	b.n	8010b1e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010af8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8010afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afc:	f043 0304 	orr.w	r3, r3, #4
 8010b00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010b02:	7efb      	ldrb	r3, [r7, #27]
 8010b04:	2b10      	cmp	r3, #16
 8010b06:	d002      	beq.n	8010b0e <HAL_I2C_ER_IRQHandler+0xe8>
 8010b08:	7efb      	ldrb	r3, [r7, #27]
 8010b0a:	2b40      	cmp	r3, #64	@ 0x40
 8010b0c:	d107      	bne.n	8010b1e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010b1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010b1e:	6a3b      	ldr	r3, [r7, #32]
 8010b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00d      	beq.n	8010b44 <HAL_I2C_ER_IRQHandler+0x11e>
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d008      	beq.n	8010b44 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8010b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b34:	f043 0308 	orr.w	r3, r3, #8
 8010b38:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8010b42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8010b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d008      	beq.n	8010b5c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b50:	431a      	orrs	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f001 f8d8 	bl	8011d0c <I2C_ITError>
  }
}
 8010b5c:	bf00      	nop
 8010b5e:	3728      	adds	r7, #40	@ 0x28
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010b80:	bf00      	nop
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr

08010b8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010b94:	bf00      	nop
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	70fb      	strb	r3, [r7, #3]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010bc4:	bf00      	nop
 8010bc6:	370c      	adds	r7, #12
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr

08010bd0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8010bd8:	bf00      	nop
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010bec:	bf00      	nop
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010c00:	bf00      	nop
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010c14:	bf00      	nop
 8010c16:	370c      	adds	r7, #12
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010c28:	bf00      	nop
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c42:	b2db      	uxtb	r3, r3
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	370c      	adds	r7, #12
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010c7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d150      	bne.n	8010d30 <I2C_MasterTransmit_TXE+0xc8>
 8010c8e:	7bfb      	ldrb	r3, [r7, #15]
 8010c90:	2b21      	cmp	r3, #33	@ 0x21
 8010c92:	d14d      	bne.n	8010d30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	2b08      	cmp	r3, #8
 8010c98:	d01d      	beq.n	8010cd6 <I2C_MasterTransmit_TXE+0x6e>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	2b20      	cmp	r3, #32
 8010c9e:	d01a      	beq.n	8010cd6 <I2C_MasterTransmit_TXE+0x6e>
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010ca6:	d016      	beq.n	8010cd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8010cb6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2211      	movs	r2, #17
 8010cbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2220      	movs	r2, #32
 8010cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7ff ff48 	bl	8010b64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010cd4:	e060      	b.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	685a      	ldr	r2, [r3, #4]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8010ce4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010cf4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2220      	movs	r2, #32
 8010d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	2b40      	cmp	r3, #64	@ 0x40
 8010d0e:	d107      	bne.n	8010d20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ff ff63 	bl	8010be4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010d1e:	e03b      	b.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7ff ff1b 	bl	8010b64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010d2e:	e033      	b.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
 8010d32:	2b21      	cmp	r3, #33	@ 0x21
 8010d34:	d005      	beq.n	8010d42 <I2C_MasterTransmit_TXE+0xda>
 8010d36:	7bbb      	ldrb	r3, [r7, #14]
 8010d38:	2b40      	cmp	r3, #64	@ 0x40
 8010d3a:	d12d      	bne.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8010d3c:	7bfb      	ldrb	r3, [r7, #15]
 8010d3e:	2b22      	cmp	r3, #34	@ 0x22
 8010d40:	d12a      	bne.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d108      	bne.n	8010d5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	685a      	ldr	r2, [r3, #4]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010d5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010d5c:	e01c      	b.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b40      	cmp	r3, #64	@ 0x40
 8010d68:	d103      	bne.n	8010d72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f88e 	bl	8010e8c <I2C_MemoryTransmit_TXE_BTF>
}
 8010d70:	e012      	b.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d76:	781a      	ldrb	r2, [r3, #0]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d82:	1c5a      	adds	r2, r3, #1
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	3b01      	subs	r3, #1
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8010d96:	e7ff      	b.n	8010d98 <I2C_MasterTransmit_TXE+0x130>
 8010d98:	bf00      	nop
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b084      	sub	sp, #16
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	2b21      	cmp	r3, #33	@ 0x21
 8010db8:	d164      	bne.n	8010e84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d012      	beq.n	8010dea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc8:	781a      	ldrb	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dd4:	1c5a      	adds	r2, r3, #1
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	3b01      	subs	r3, #1
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8010de8:	e04c      	b.n	8010e84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b08      	cmp	r3, #8
 8010dee:	d01d      	beq.n	8010e2c <I2C_MasterTransmit_BTF+0x8c>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2b20      	cmp	r3, #32
 8010df4:	d01a      	beq.n	8010e2c <I2C_MasterTransmit_BTF+0x8c>
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010dfc:	d016      	beq.n	8010e2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8010e0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2211      	movs	r2, #17
 8010e12:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2220      	movs	r2, #32
 8010e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f7ff fe9d 	bl	8010b64 <HAL_I2C_MasterTxCpltCallback>
}
 8010e2a:	e02b      	b.n	8010e84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	685a      	ldr	r2, [r3, #4]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8010e3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010e4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2220      	movs	r2, #32
 8010e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	2b40      	cmp	r3, #64	@ 0x40
 8010e64:	d107      	bne.n	8010e76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f7ff feb8 	bl	8010be4 <HAL_I2C_MemTxCpltCallback>
}
 8010e74:	e006      	b.n	8010e84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f7ff fe70 	bl	8010b64 <HAL_I2C_MasterTxCpltCallback>
}
 8010e84:	bf00      	nop
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010e9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d11d      	bne.n	8010ee0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d10b      	bne.n	8010ec4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ebc:	1c9a      	adds	r2, r3, #2
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8010ec2:	e077      	b.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	121b      	asrs	r3, r3, #8
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ed8:	1c5a      	adds	r2, r3, #1
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8010ede:	e069      	b.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d10b      	bne.n	8010f00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010eec:	b2da      	uxtb	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ef8:	1c5a      	adds	r2, r3, #1
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8010efe:	e059      	b.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	d152      	bne.n	8010fae <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	2b22      	cmp	r3, #34	@ 0x22
 8010f0c:	d10d      	bne.n	8010f2a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010f1c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f22:	1c5a      	adds	r2, r3, #1
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8010f28:	e044      	b.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d015      	beq.n	8010f60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	2b21      	cmp	r3, #33	@ 0x21
 8010f38:	d112      	bne.n	8010f60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f3e:	781a      	ldrb	r2, [r3, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f4a:	1c5a      	adds	r2, r3, #1
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	3b01      	subs	r3, #1
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8010f5e:	e029      	b.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d124      	bne.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
 8010f6c:	2b21      	cmp	r3, #33	@ 0x21
 8010f6e:	d121      	bne.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	685a      	ldr	r2, [r3, #4]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8010f7e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010f8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2200      	movs	r2, #0
 8010f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2220      	movs	r2, #32
 8010f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7ff fe1c 	bl	8010be4 <HAL_I2C_MemTxCpltCallback>
}
 8010fac:	e002      	b.n	8010fb4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7fe fd75 	bl	800fa9e <I2C_Flush_DR>
}
 8010fb4:	bf00      	nop
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2b22      	cmp	r3, #34	@ 0x22
 8010fce:	f040 80b9 	bne.w	8011144 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	2b03      	cmp	r3, #3
 8010fe4:	d921      	bls.n	801102a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	691a      	ldr	r2, [r3, #16]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff0:	b2d2      	uxtb	r2, r2
 8010ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011002:	b29b      	uxth	r3, r3
 8011004:	3b01      	subs	r3, #1
 8011006:	b29a      	uxth	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011010:	b29b      	uxth	r3, r3
 8011012:	2b03      	cmp	r3, #3
 8011014:	f040 8096 	bne.w	8011144 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011026:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8011028:	e08c      	b.n	8011144 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801102e:	2b02      	cmp	r3, #2
 8011030:	d07f      	beq.n	8011132 <I2C_MasterReceive_RXNE+0x176>
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d002      	beq.n	801103e <I2C_MasterReceive_RXNE+0x82>
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d179      	bne.n	8011132 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f001 fcb6 	bl	80129b0 <I2C_WaitOnSTOPRequestThroughIT>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d14c      	bne.n	80110e4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011058:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	685a      	ldr	r2, [r3, #4]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011068:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	691a      	ldr	r2, [r3, #16]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011074:	b2d2      	uxtb	r2, r2
 8011076:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801107c:	1c5a      	adds	r2, r3, #1
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011086:	b29b      	uxth	r3, r3
 8011088:	3b01      	subs	r3, #1
 801108a:	b29a      	uxth	r2, r3
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2220      	movs	r2, #32
 8011094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	2b40      	cmp	r3, #64	@ 0x40
 80110a2:	d10a      	bne.n	80110ba <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2200      	movs	r2, #0
 80110b0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f7ff fda0 	bl	8010bf8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80110b8:	e044      	b.n	8011144 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2b08      	cmp	r3, #8
 80110c6:	d002      	beq.n	80110ce <I2C_MasterReceive_RXNE+0x112>
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b20      	cmp	r3, #32
 80110cc:	d103      	bne.n	80110d6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2200      	movs	r2, #0
 80110d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80110d4:	e002      	b.n	80110dc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2212      	movs	r2, #18
 80110da:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f7ff fd4b 	bl	8010b78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80110e2:	e02f      	b.n	8011144 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	685a      	ldr	r2, [r3, #4]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80110f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	691a      	ldr	r2, [r3, #16]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110fe:	b2d2      	uxtb	r2, r2
 8011100:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011106:	1c5a      	adds	r2, r3, #1
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011110:	b29b      	uxth	r3, r3
 8011112:	3b01      	subs	r3, #1
 8011114:	b29a      	uxth	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2220      	movs	r2, #32
 801111e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2200      	movs	r2, #0
 8011126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f7ff fd6e 	bl	8010c0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011130:	e008      	b.n	8011144 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	685a      	ldr	r2, [r3, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011140:	605a      	str	r2, [r3, #4]
}
 8011142:	e7ff      	b.n	8011144 <I2C_MasterReceive_RXNE+0x188>
 8011144:	bf00      	nop
 8011146:	3710      	adds	r7, #16
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011158:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801115e:	b29b      	uxth	r3, r3
 8011160:	2b04      	cmp	r3, #4
 8011162:	d11b      	bne.n	801119c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	685a      	ldr	r2, [r3, #4]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011172:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	691a      	ldr	r2, [r3, #16]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011190:	b29b      	uxth	r3, r3
 8011192:	3b01      	subs	r3, #1
 8011194:	b29a      	uxth	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801119a:	e0c8      	b.n	801132e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	2b03      	cmp	r3, #3
 80111a4:	d129      	bne.n	80111fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	685a      	ldr	r2, [r3, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80111b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2b04      	cmp	r3, #4
 80111ba:	d00a      	beq.n	80111d2 <I2C_MasterReceive_BTF+0x86>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b02      	cmp	r3, #2
 80111c0:	d007      	beq.n	80111d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80111d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	691a      	ldr	r2, [r3, #16]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111dc:	b2d2      	uxtb	r2, r2
 80111de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e4:	1c5a      	adds	r2, r3, #1
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	3b01      	subs	r3, #1
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80111f8:	e099      	b.n	801132e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111fe:	b29b      	uxth	r3, r3
 8011200:	2b02      	cmp	r3, #2
 8011202:	f040 8081 	bne.w	8011308 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2b01      	cmp	r3, #1
 801120a:	d002      	beq.n	8011212 <I2C_MasterReceive_BTF+0xc6>
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2b10      	cmp	r3, #16
 8011210:	d108      	bne.n	8011224 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	e019      	b.n	8011258 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b04      	cmp	r3, #4
 8011228:	d002      	beq.n	8011230 <I2C_MasterReceive_BTF+0xe4>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d108      	bne.n	8011242 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801123e:	601a      	str	r2, [r3, #0]
 8011240:	e00a      	b.n	8011258 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b10      	cmp	r3, #16
 8011246:	d007      	beq.n	8011258 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011256:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	691a      	ldr	r2, [r3, #16]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011262:	b2d2      	uxtb	r2, r2
 8011264:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126a:	1c5a      	adds	r2, r3, #1
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011274:	b29b      	uxth	r3, r3
 8011276:	3b01      	subs	r3, #1
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	691a      	ldr	r2, [r3, #16]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011288:	b2d2      	uxtb	r2, r2
 801128a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011290:	1c5a      	adds	r2, r3, #1
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801129a:	b29b      	uxth	r3, r3
 801129c:	3b01      	subs	r3, #1
 801129e:	b29a      	uxth	r2, r3
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685a      	ldr	r2, [r3, #4]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80112b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2220      	movs	r2, #32
 80112b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	2b40      	cmp	r3, #64	@ 0x40
 80112c6:	d10a      	bne.n	80112de <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2200      	movs	r2, #0
 80112cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f7ff fc8e 	bl	8010bf8 <HAL_I2C_MemRxCpltCallback>
}
 80112dc:	e027      	b.n	801132e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2b08      	cmp	r3, #8
 80112ea:	d002      	beq.n	80112f2 <I2C_MasterReceive_BTF+0x1a6>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2b20      	cmp	r3, #32
 80112f0:	d103      	bne.n	80112fa <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80112f8:	e002      	b.n	8011300 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2212      	movs	r2, #18
 80112fe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ff fc39 	bl	8010b78 <HAL_I2C_MasterRxCpltCallback>
}
 8011306:	e012      	b.n	801132e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	691a      	ldr	r2, [r3, #16]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011312:	b2d2      	uxtb	r2, r2
 8011314:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131a:	1c5a      	adds	r2, r3, #1
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011324:	b29b      	uxth	r3, r3
 8011326:	3b01      	subs	r3, #1
 8011328:	b29a      	uxth	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 801132e:	bf00      	nop
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011336:	b480      	push	{r7}
 8011338:	b083      	sub	sp, #12
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011344:	b2db      	uxtb	r3, r3
 8011346:	2b40      	cmp	r3, #64	@ 0x40
 8011348:	d117      	bne.n	801137a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801134e:	2b00      	cmp	r3, #0
 8011350:	d109      	bne.n	8011366 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011356:	b2db      	uxtb	r3, r3
 8011358:	461a      	mov	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8011362:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011364:	e067      	b.n	8011436 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801136a:	b2db      	uxtb	r3, r3
 801136c:	f043 0301 	orr.w	r3, r3, #1
 8011370:	b2da      	uxtb	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	611a      	str	r2, [r3, #16]
}
 8011378:	e05d      	b.n	8011436 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	691b      	ldr	r3, [r3, #16]
 801137e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011382:	d133      	bne.n	80113ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b21      	cmp	r3, #33	@ 0x21
 801138e:	d109      	bne.n	80113a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011394:	b2db      	uxtb	r3, r3
 8011396:	461a      	mov	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80113a0:	611a      	str	r2, [r3, #16]
 80113a2:	e008      	b.n	80113b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	f043 0301 	orr.w	r3, r3, #1
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d004      	beq.n	80113c8 <I2C_Master_SB+0x92>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d108      	bne.n	80113da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d032      	beq.n	8011436 <I2C_Master_SB+0x100>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d02d      	beq.n	8011436 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80113e8:	605a      	str	r2, [r3, #4]
}
 80113ea:	e024      	b.n	8011436 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d10e      	bne.n	8011412 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	11db      	asrs	r3, r3, #7
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	f003 0306 	and.w	r3, r3, #6
 8011402:	b2db      	uxtb	r3, r3
 8011404:	f063 030f 	orn	r3, r3, #15
 8011408:	b2da      	uxtb	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	611a      	str	r2, [r3, #16]
}
 8011410:	e011      	b.n	8011436 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011416:	2b01      	cmp	r3, #1
 8011418:	d10d      	bne.n	8011436 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801141e:	b29b      	uxth	r3, r3
 8011420:	11db      	asrs	r3, r3, #7
 8011422:	b2db      	uxtb	r3, r3
 8011424:	f003 0306 	and.w	r3, r3, #6
 8011428:	b2db      	uxtb	r3, r3
 801142a:	f063 030e 	orn	r3, r3, #14
 801142e:	b2da      	uxtb	r2, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	611a      	str	r2, [r3, #16]
}
 8011436:	bf00      	nop
 8011438:	370c      	adds	r7, #12
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr

08011442 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8011442:	b480      	push	{r7}
 8011444:	b083      	sub	sp, #12
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801144e:	b2da      	uxtb	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801145a:	2b00      	cmp	r3, #0
 801145c:	d004      	beq.n	8011468 <I2C_Master_ADD10+0x26>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011464:	2b00      	cmp	r3, #0
 8011466:	d108      	bne.n	801147a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00c      	beq.n	801148a <I2C_Master_ADD10+0x48>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011476:	2b00      	cmp	r3, #0
 8011478:	d007      	beq.n	801148a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	685a      	ldr	r2, [r3, #4]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011488:	605a      	str	r2, [r3, #4]
  }
}
 801148a:	bf00      	nop
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8011496:	b480      	push	{r7}
 8011498:	b091      	sub	sp, #68	@ 0x44
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80114a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b22      	cmp	r3, #34	@ 0x22
 80114be:	f040 8169 	bne.w	8011794 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d10f      	bne.n	80114ea <I2C_Master_ADDR+0x54>
 80114ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80114ce:	2b40      	cmp	r3, #64	@ 0x40
 80114d0:	d10b      	bne.n	80114ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80114d2:	2300      	movs	r3, #0
 80114d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	699b      	ldr	r3, [r3, #24]
 80114e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80114e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e8:	e160      	b.n	80117ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d11d      	bne.n	801152e <I2C_Master_ADDR+0x98>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80114fa:	d118      	bne.n	801152e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80114fc:	2300      	movs	r3, #0
 80114fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	695b      	ldr	r3, [r3, #20]
 8011506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	699b      	ldr	r3, [r3, #24]
 801150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011520:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011526:	1c5a      	adds	r2, r3, #1
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	651a      	str	r2, [r3, #80]	@ 0x50
 801152c:	e13e      	b.n	80117ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011532:	b29b      	uxth	r3, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	d113      	bne.n	8011560 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011538:	2300      	movs	r3, #0
 801153a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	695b      	ldr	r3, [r3, #20]
 8011542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801154c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	e115      	b.n	801178c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011564:	b29b      	uxth	r3, r3
 8011566:	2b01      	cmp	r3, #1
 8011568:	f040 808a 	bne.w	8011680 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801156c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801156e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011572:	d137      	bne.n	80115e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011582:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801158e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011592:	d113      	bne.n	80115bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80115a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80115a4:	2300      	movs	r3, #0
 80115a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	695b      	ldr	r3, [r3, #20]
 80115ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80115b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ba:	e0e7      	b.n	801178c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80115bc:	2300      	movs	r3, #0
 80115be:	623b      	str	r3, [r7, #32]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	695b      	ldr	r3, [r3, #20]
 80115c6:	623b      	str	r3, [r7, #32]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	699b      	ldr	r3, [r3, #24]
 80115ce:	623b      	str	r3, [r7, #32]
 80115d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80115e0:	601a      	str	r2, [r3, #0]
 80115e2:	e0d3      	b.n	801178c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80115e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115e6:	2b08      	cmp	r3, #8
 80115e8:	d02e      	beq.n	8011648 <I2C_Master_ADDR+0x1b2>
 80115ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ec:	2b20      	cmp	r3, #32
 80115ee:	d02b      	beq.n	8011648 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80115f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115f2:	2b12      	cmp	r3, #18
 80115f4:	d102      	bne.n	80115fc <I2C_Master_ADDR+0x166>
 80115f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d125      	bne.n	8011648 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80115fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fe:	2b04      	cmp	r3, #4
 8011600:	d00e      	beq.n	8011620 <I2C_Master_ADDR+0x18a>
 8011602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011604:	2b02      	cmp	r3, #2
 8011606:	d00b      	beq.n	8011620 <I2C_Master_ADDR+0x18a>
 8011608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160a:	2b10      	cmp	r3, #16
 801160c:	d008      	beq.n	8011620 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801161c:	601a      	str	r2, [r3, #0]
 801161e:	e007      	b.n	8011630 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801162e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011630:	2300      	movs	r3, #0
 8011632:	61fb      	str	r3, [r7, #28]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	695b      	ldr	r3, [r3, #20]
 801163a:	61fb      	str	r3, [r7, #28]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	699b      	ldr	r3, [r3, #24]
 8011642:	61fb      	str	r3, [r7, #28]
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	e0a1      	b.n	801178c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011656:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011658:	2300      	movs	r3, #0
 801165a:	61bb      	str	r3, [r7, #24]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	61bb      	str	r3, [r7, #24]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	61bb      	str	r3, [r7, #24]
 801166c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	e085      	b.n	801178c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011684:	b29b      	uxth	r3, r3
 8011686:	2b02      	cmp	r3, #2
 8011688:	d14d      	bne.n	8011726 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801168a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168c:	2b04      	cmp	r3, #4
 801168e:	d016      	beq.n	80116be <I2C_Master_ADDR+0x228>
 8011690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011692:	2b02      	cmp	r3, #2
 8011694:	d013      	beq.n	80116be <I2C_Master_ADDR+0x228>
 8011696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011698:	2b10      	cmp	r3, #16
 801169a:	d010      	beq.n	80116be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80116aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	e007      	b.n	80116ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80116cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80116dc:	d117      	bne.n	801170e <I2C_Master_ADDR+0x278>
 80116de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80116e4:	d00b      	beq.n	80116fe <I2C_Master_ADDR+0x268>
 80116e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d008      	beq.n	80116fe <I2C_Master_ADDR+0x268>
 80116ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ee:	2b08      	cmp	r3, #8
 80116f0:	d005      	beq.n	80116fe <I2C_Master_ADDR+0x268>
 80116f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f4:	2b10      	cmp	r3, #16
 80116f6:	d002      	beq.n	80116fe <I2C_Master_ADDR+0x268>
 80116f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fa:	2b20      	cmp	r3, #32
 80116fc:	d107      	bne.n	801170e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	685a      	ldr	r2, [r3, #4]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801170c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801170e:	2300      	movs	r3, #0
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	695b      	ldr	r3, [r3, #20]
 8011718:	617b      	str	r3, [r7, #20]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	699b      	ldr	r3, [r3, #24]
 8011720:	617b      	str	r3, [r7, #20]
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	e032      	b.n	801178c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011734:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011744:	d117      	bne.n	8011776 <I2C_Master_ADDR+0x2e0>
 8011746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011748:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801174c:	d00b      	beq.n	8011766 <I2C_Master_ADDR+0x2d0>
 801174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011750:	2b01      	cmp	r3, #1
 8011752:	d008      	beq.n	8011766 <I2C_Master_ADDR+0x2d0>
 8011754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011756:	2b08      	cmp	r3, #8
 8011758:	d005      	beq.n	8011766 <I2C_Master_ADDR+0x2d0>
 801175a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175c:	2b10      	cmp	r3, #16
 801175e:	d002      	beq.n	8011766 <I2C_Master_ADDR+0x2d0>
 8011760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011762:	2b20      	cmp	r3, #32
 8011764:	d107      	bne.n	8011776 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	685a      	ldr	r2, [r3, #4]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011774:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011776:	2300      	movs	r3, #0
 8011778:	613b      	str	r3, [r7, #16]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	695b      	ldr	r3, [r3, #20]
 8011780:	613b      	str	r3, [r7, #16]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	699b      	ldr	r3, [r3, #24]
 8011788:	613b      	str	r3, [r7, #16]
 801178a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2200      	movs	r2, #0
 8011790:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8011792:	e00b      	b.n	80117ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011794:	2300      	movs	r3, #0
 8011796:	60fb      	str	r3, [r7, #12]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	695b      	ldr	r3, [r3, #20]
 801179e:	60fb      	str	r3, [r7, #12]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	699b      	ldr	r3, [r3, #24]
 80117a6:	60fb      	str	r3, [r7, #12]
 80117a8:	68fb      	ldr	r3, [r7, #12]
}
 80117aa:	e7ff      	b.n	80117ac <I2C_Master_ADDR+0x316>
 80117ac:	bf00      	nop
 80117ae:	3744      	adds	r7, #68	@ 0x44
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80117c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d02b      	beq.n	801182a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117d6:	781a      	ldrb	r2, [r3, #0]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e2:	1c5a      	adds	r2, r3, #1
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	3b01      	subs	r3, #1
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d114      	bne.n	801182a <I2C_SlaveTransmit_TXE+0x72>
 8011800:	7bfb      	ldrb	r3, [r7, #15]
 8011802:	2b29      	cmp	r3, #41	@ 0x29
 8011804:	d111      	bne.n	801182a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	685a      	ldr	r2, [r3, #4]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011814:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2221      	movs	r2, #33	@ 0x21
 801181a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2228      	movs	r2, #40	@ 0x28
 8011820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7ff f9b1 	bl	8010b8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801182a:	bf00      	nop
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011832:	b480      	push	{r7}
 8011834:	b083      	sub	sp, #12
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801183e:	b29b      	uxth	r3, r3
 8011840:	2b00      	cmp	r3, #0
 8011842:	d011      	beq.n	8011868 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011848:	781a      	ldrb	r2, [r3, #0]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011854:	1c5a      	adds	r2, r3, #1
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801185e:	b29b      	uxth	r3, r3
 8011860:	3b01      	subs	r3, #1
 8011862:	b29a      	uxth	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8011868:	bf00      	nop
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011882:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011888:	b29b      	uxth	r3, r3
 801188a:	2b00      	cmp	r3, #0
 801188c:	d02c      	beq.n	80118e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	691a      	ldr	r2, [r3, #16]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011898:	b2d2      	uxtb	r2, r2
 801189a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a0:	1c5a      	adds	r2, r3, #1
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	3b01      	subs	r3, #1
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d114      	bne.n	80118e8 <I2C_SlaveReceive_RXNE+0x74>
 80118be:	7bfb      	ldrb	r3, [r7, #15]
 80118c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80118c2:	d111      	bne.n	80118e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	685a      	ldr	r2, [r3, #4]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80118d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2222      	movs	r2, #34	@ 0x22
 80118d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2228      	movs	r2, #40	@ 0x28
 80118de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7ff f95c 	bl	8010ba0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80118e8:	bf00      	nop
 80118ea:	3710      	adds	r7, #16
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d012      	beq.n	8011928 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	691a      	ldr	r2, [r3, #16]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801190c:	b2d2      	uxtb	r2, r2
 801190e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011914:	1c5a      	adds	r2, r3, #1
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801191e:	b29b      	uxth	r3, r3
 8011920:	3b01      	subs	r3, #1
 8011922:	b29a      	uxth	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8011928:	bf00      	nop
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801193e:	2300      	movs	r3, #0
 8011940:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011948:	b2db      	uxtb	r3, r3
 801194a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801194e:	2b28      	cmp	r3, #40	@ 0x28
 8011950:	d125      	bne.n	801199e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	685a      	ldr	r2, [r3, #4]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011960:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	f003 0304 	and.w	r3, r3, #4
 8011968:	2b00      	cmp	r3, #0
 801196a:	d101      	bne.n	8011970 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801196c:	2301      	movs	r3, #1
 801196e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011976:	2b00      	cmp	r3, #0
 8011978:	d103      	bne.n	8011982 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	81bb      	strh	r3, [r7, #12]
 8011980:	e002      	b.n	8011988 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	699b      	ldr	r3, [r3, #24]
 8011986:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8011990:	89ba      	ldrh	r2, [r7, #12]
 8011992:	7bfb      	ldrb	r3, [r7, #15]
 8011994:	4619      	mov	r1, r3
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7ff f90c 	bl	8010bb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801199c:	e00e      	b.n	80119bc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801199e:	2300      	movs	r3, #0
 80119a0:	60bb      	str	r3, [r7, #8]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	695b      	ldr	r3, [r3, #20]
 80119a8:	60bb      	str	r3, [r7, #8]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	699b      	ldr	r3, [r3, #24]
 80119b0:	60bb      	str	r3, [r7, #8]
 80119b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80119bc:	bf00      	nop
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	685a      	ldr	r2, [r3, #4]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80119e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80119e4:	2300      	movs	r3, #0
 80119e6:	60bb      	str	r3, [r7, #8]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	695b      	ldr	r3, [r3, #20]
 80119ee:	60bb      	str	r3, [r7, #8]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f042 0201 	orr.w	r2, r2, #1
 80119fe:	601a      	str	r2, [r3, #0]
 8011a00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011a10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011a20:	d172      	bne.n	8011b08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011a22:	7bfb      	ldrb	r3, [r7, #15]
 8011a24:	2b22      	cmp	r3, #34	@ 0x22
 8011a26:	d002      	beq.n	8011a2e <I2C_Slave_STOPF+0x6a>
 8011a28:	7bfb      	ldrb	r3, [r7, #15]
 8011a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a2c:	d135      	bne.n	8011a9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d005      	beq.n	8011a52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a4a:	f043 0204 	orr.w	r2, r3, #4
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011a60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fd fb69 	bl	800f13e <HAL_DMA_GetState>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d049      	beq.n	8011b06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a76:	4a69      	ldr	r2, [pc, #420]	@ (8011c1c <I2C_Slave_STOPF+0x258>)
 8011a78:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fd fb3b 	bl	800f0fa <HAL_DMA_Abort_IT>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d03d      	beq.n	8011b06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011a94:	4610      	mov	r0, r2
 8011a96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011a98:	e035      	b.n	8011b06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d005      	beq.n	8011abe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ab6:	f043 0204 	orr.w	r2, r3, #4
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	685a      	ldr	r2, [r3, #4]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011acc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fd fb33 	bl	800f13e <HAL_DMA_GetState>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d014      	beq.n	8011b08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8011c1c <I2C_Slave_STOPF+0x258>)
 8011ae4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fd fb05 	bl	800f0fa <HAL_DMA_Abort_IT>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d008      	beq.n	8011b08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011b00:	4610      	mov	r0, r2
 8011b02:	4798      	blx	r3
 8011b04:	e000      	b.n	8011b08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011b06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d03e      	beq.n	8011b90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	695b      	ldr	r3, [r3, #20]
 8011b18:	f003 0304 	and.w	r3, r3, #4
 8011b1c:	2b04      	cmp	r3, #4
 8011b1e:	d112      	bne.n	8011b46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	691a      	ldr	r2, [r3, #16]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b2a:	b2d2      	uxtb	r2, r2
 8011b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b32:	1c5a      	adds	r2, r3, #1
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	695b      	ldr	r3, [r3, #20]
 8011b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b50:	2b40      	cmp	r3, #64	@ 0x40
 8011b52:	d112      	bne.n	8011b7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	691a      	ldr	r2, [r3, #16]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b5e:	b2d2      	uxtb	r2, r2
 8011b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b66:	1c5a      	adds	r2, r3, #1
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	3b01      	subs	r3, #1
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d005      	beq.n	8011b90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b88:	f043 0204 	orr.w	r2, r3, #4
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d003      	beq.n	8011ba0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 f8b7 	bl	8011d0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8011b9e:	e039      	b.n	8011c14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011ba0:	7bfb      	ldrb	r3, [r7, #15]
 8011ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ba4:	d109      	bne.n	8011bba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2228      	movs	r2, #40	@ 0x28
 8011bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7fe fff3 	bl	8010ba0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	2b28      	cmp	r3, #40	@ 0x28
 8011bc4:	d111      	bne.n	8011bea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a15      	ldr	r2, [pc, #84]	@ (8011c20 <I2C_Slave_STOPF+0x25c>)
 8011bca:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2220      	movs	r2, #32
 8011bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f7fe fff4 	bl	8010bd0 <HAL_I2C_ListenCpltCallback>
}
 8011be8:	e014      	b.n	8011c14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bee:	2b22      	cmp	r3, #34	@ 0x22
 8011bf0:	d002      	beq.n	8011bf8 <I2C_Slave_STOPF+0x234>
 8011bf2:	7bfb      	ldrb	r3, [r7, #15]
 8011bf4:	2b22      	cmp	r3, #34	@ 0x22
 8011bf6:	d10d      	bne.n	8011c14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2220      	movs	r2, #32
 8011c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7fe ffc6 	bl	8010ba0 <HAL_I2C_SlaveRxCpltCallback>
}
 8011c14:	bf00      	nop
 8011c16:	3710      	adds	r7, #16
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	0801250d 	.word	0x0801250d
 8011c20:	ffff0000 	.word	0xffff0000

08011c24 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011c32:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c38:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b08      	cmp	r3, #8
 8011c3e:	d002      	beq.n	8011c46 <I2C_Slave_AF+0x22>
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	2b20      	cmp	r3, #32
 8011c44:	d129      	bne.n	8011c9a <I2C_Slave_AF+0x76>
 8011c46:	7bfb      	ldrb	r3, [r7, #15]
 8011c48:	2b28      	cmp	r3, #40	@ 0x28
 8011c4a:	d126      	bne.n	8011c9a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8011d08 <I2C_Slave_AF+0xe4>)
 8011c50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011c60:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8011c6a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011c7a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2220      	movs	r2, #32
 8011c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f7fe ff9c 	bl	8010bd0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8011c98:	e031      	b.n	8011cfe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
 8011c9c:	2b21      	cmp	r3, #33	@ 0x21
 8011c9e:	d129      	bne.n	8011cf4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a19      	ldr	r2, [pc, #100]	@ (8011d08 <I2C_Slave_AF+0xe4>)
 8011ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2221      	movs	r2, #33	@ 0x21
 8011caa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2220      	movs	r2, #32
 8011cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	685a      	ldr	r2, [r3, #4]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011cca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8011cd4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011ce4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7fd fed9 	bl	800fa9e <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f7fe ff4d 	bl	8010b8c <HAL_I2C_SlaveTxCpltCallback>
}
 8011cf2:	e004      	b.n	8011cfe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8011cfc:	615a      	str	r2, [r3, #20]
}
 8011cfe:	bf00      	nop
 8011d00:	3710      	adds	r7, #16
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	ffff0000 	.word	0xffff0000

08011d0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011d22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8011d24:	7bbb      	ldrb	r3, [r7, #14]
 8011d26:	2b10      	cmp	r3, #16
 8011d28:	d002      	beq.n	8011d30 <I2C_ITError+0x24>
 8011d2a:	7bbb      	ldrb	r3, [r7, #14]
 8011d2c:	2b40      	cmp	r3, #64	@ 0x40
 8011d2e:	d10a      	bne.n	8011d46 <I2C_ITError+0x3a>
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
 8011d32:	2b22      	cmp	r3, #34	@ 0x22
 8011d34:	d107      	bne.n	8011d46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011d44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
 8011d48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8011d4c:	2b28      	cmp	r3, #40	@ 0x28
 8011d4e:	d107      	bne.n	8011d60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2228      	movs	r2, #40	@ 0x28
 8011d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8011d5e:	e015      	b.n	8011d8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d6e:	d00a      	beq.n	8011d86 <I2C_ITError+0x7a>
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
 8011d72:	2b60      	cmp	r3, #96	@ 0x60
 8011d74:	d007      	beq.n	8011d86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2220      	movs	r2, #32
 8011d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d9a:	d162      	bne.n	8011e62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	685a      	ldr	r2, [r3, #4]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011daa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d020      	beq.n	8011dfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8011f68 <I2C_ITError+0x25c>)
 8011dc0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fd f997 	bl	800f0fa <HAL_DMA_Abort_IT>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 8089 	beq.w	8011ee6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f022 0201 	bic.w	r2, r2, #1
 8011de2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2220      	movs	r2, #32
 8011de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011df6:	4610      	mov	r0, r2
 8011df8:	4798      	blx	r3
 8011dfa:	e074      	b.n	8011ee6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e00:	4a59      	ldr	r2, [pc, #356]	@ (8011f68 <I2C_ITError+0x25c>)
 8011e02:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fd f976 	bl	800f0fa <HAL_DMA_Abort_IT>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d068      	beq.n	8011ee6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	695b      	ldr	r3, [r3, #20]
 8011e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e1e:	2b40      	cmp	r3, #64	@ 0x40
 8011e20:	d10b      	bne.n	8011e3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	691a      	ldr	r2, [r3, #16]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e2c:	b2d2      	uxtb	r2, r2
 8011e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e34:	1c5a      	adds	r2, r3, #1
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f022 0201 	bic.w	r2, r2, #1
 8011e48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2220      	movs	r2, #32
 8011e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011e5c:	4610      	mov	r0, r2
 8011e5e:	4798      	blx	r3
 8011e60:	e041      	b.n	8011ee6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b60      	cmp	r3, #96	@ 0x60
 8011e6c:	d125      	bne.n	8011eba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2220      	movs	r2, #32
 8011e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	695b      	ldr	r3, [r3, #20]
 8011e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e86:	2b40      	cmp	r3, #64	@ 0x40
 8011e88:	d10b      	bne.n	8011ea2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	691a      	ldr	r2, [r3, #16]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e94:	b2d2      	uxtb	r2, r2
 8011e96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e9c:	1c5a      	adds	r2, r3, #1
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	f022 0201 	bic.w	r2, r2, #1
 8011eb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7fe feb4 	bl	8010c20 <HAL_I2C_AbortCpltCallback>
 8011eb8:	e015      	b.n	8011ee6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ec4:	2b40      	cmp	r3, #64	@ 0x40
 8011ec6:	d10b      	bne.n	8011ee0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	691a      	ldr	r2, [r3, #16]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed2:	b2d2      	uxtb	r2, r2
 8011ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7fe fe93 	bl	8010c0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011eea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	f003 0301 	and.w	r3, r3, #1
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d10e      	bne.n	8011f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d109      	bne.n	8011f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d104      	bne.n	8011f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d007      	beq.n	8011f24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	685a      	ldr	r2, [r3, #4]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011f22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011f2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f30:	f003 0304 	and.w	r3, r3, #4
 8011f34:	2b04      	cmp	r3, #4
 8011f36:	d113      	bne.n	8011f60 <I2C_ITError+0x254>
 8011f38:	7bfb      	ldrb	r3, [r7, #15]
 8011f3a:	2b28      	cmp	r3, #40	@ 0x28
 8011f3c:	d110      	bne.n	8011f60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4a0a      	ldr	r2, [pc, #40]	@ (8011f6c <I2C_ITError+0x260>)
 8011f42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2200      	movs	r2, #0
 8011f48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2220      	movs	r2, #32
 8011f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7fe fe38 	bl	8010bd0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011f60:	bf00      	nop
 8011f62:	3710      	adds	r7, #16
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	0801250d 	.word	0x0801250d
 8011f6c:	ffff0000 	.word	0xffff0000

08011f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b088      	sub	sp, #32
 8011f74:	af02      	add	r7, sp, #8
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	607a      	str	r2, [r7, #4]
 8011f7a:	603b      	str	r3, [r7, #0]
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	2b08      	cmp	r3, #8
 8011f8a:	d006      	beq.n	8011f9a <I2C_MasterRequestWrite+0x2a>
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d003      	beq.n	8011f9a <I2C_MasterRequestWrite+0x2a>
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011f98:	d108      	bne.n	8011fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	e00b      	b.n	8011fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fb0:	2b12      	cmp	r3, #18
 8011fb2:	d107      	bne.n	8011fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f000 fb43 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00d      	beq.n	8011ff8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011fea:	d103      	bne.n	8011ff4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8011ff4:	2303      	movs	r3, #3
 8011ff6:	e035      	b.n	8012064 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	691b      	ldr	r3, [r3, #16]
 8011ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012000:	d108      	bne.n	8012014 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012002:	897b      	ldrh	r3, [r7, #10]
 8012004:	b2db      	uxtb	r3, r3
 8012006:	461a      	mov	r2, r3
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8012010:	611a      	str	r2, [r3, #16]
 8012012:	e01b      	b.n	801204c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012014:	897b      	ldrh	r3, [r7, #10]
 8012016:	11db      	asrs	r3, r3, #7
 8012018:	b2db      	uxtb	r3, r3
 801201a:	f003 0306 	and.w	r3, r3, #6
 801201e:	b2db      	uxtb	r3, r3
 8012020:	f063 030f 	orn	r3, r3, #15
 8012024:	b2da      	uxtb	r2, r3
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	490e      	ldr	r1, [pc, #56]	@ (801206c <I2C_MasterRequestWrite+0xfc>)
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f000 fb8c 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012038:	4603      	mov	r3, r0
 801203a:	2b00      	cmp	r3, #0
 801203c:	d001      	beq.n	8012042 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801203e:	2301      	movs	r3, #1
 8012040:	e010      	b.n	8012064 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012042:	897b      	ldrh	r3, [r7, #10]
 8012044:	b2da      	uxtb	r2, r3
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	4907      	ldr	r1, [pc, #28]	@ (8012070 <I2C_MasterRequestWrite+0x100>)
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f000 fb7c 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d001      	beq.n	8012062 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801205e:	2301      	movs	r3, #1
 8012060:	e000      	b.n	8012064 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	00010008 	.word	0x00010008
 8012070:	00010002 	.word	0x00010002

08012074 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b088      	sub	sp, #32
 8012078:	af02      	add	r7, sp, #8
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	607a      	str	r2, [r7, #4]
 801207e:	603b      	str	r3, [r7, #0]
 8012080:	460b      	mov	r3, r1
 8012082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012088:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012098:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	2b08      	cmp	r3, #8
 801209e:	d006      	beq.n	80120ae <I2C_MasterRequestRead+0x3a>
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d003      	beq.n	80120ae <I2C_MasterRequestRead+0x3a>
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80120ac:	d108      	bne.n	80120c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	e00b      	b.n	80120d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120c4:	2b11      	cmp	r3, #17
 80120c6:	d107      	bne.n	80120d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80120d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2200      	movs	r2, #0
 80120e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f000 fab9 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 80120ea:	4603      	mov	r3, r0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00d      	beq.n	801210c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80120fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120fe:	d103      	bne.n	8012108 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012106:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8012108:	2303      	movs	r3, #3
 801210a:	e079      	b.n	8012200 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012114:	d108      	bne.n	8012128 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012116:	897b      	ldrh	r3, [r7, #10]
 8012118:	b2db      	uxtb	r3, r3
 801211a:	f043 0301 	orr.w	r3, r3, #1
 801211e:	b2da      	uxtb	r2, r3
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	611a      	str	r2, [r3, #16]
 8012126:	e05f      	b.n	80121e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012128:	897b      	ldrh	r3, [r7, #10]
 801212a:	11db      	asrs	r3, r3, #7
 801212c:	b2db      	uxtb	r3, r3
 801212e:	f003 0306 	and.w	r3, r3, #6
 8012132:	b2db      	uxtb	r3, r3
 8012134:	f063 030f 	orn	r3, r3, #15
 8012138:	b2da      	uxtb	r2, r3
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	4930      	ldr	r1, [pc, #192]	@ (8012208 <I2C_MasterRequestRead+0x194>)
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f000 fb02 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d001      	beq.n	8012156 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8012152:	2301      	movs	r3, #1
 8012154:	e054      	b.n	8012200 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012156:	897b      	ldrh	r3, [r7, #10]
 8012158:	b2da      	uxtb	r2, r3
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	4929      	ldr	r1, [pc, #164]	@ (801220c <I2C_MasterRequestRead+0x198>)
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f000 faf2 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d001      	beq.n	8012176 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	e044      	b.n	8012200 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012176:	2300      	movs	r3, #0
 8012178:	613b      	str	r3, [r7, #16]
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	695b      	ldr	r3, [r3, #20]
 8012180:	613b      	str	r3, [r7, #16]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	699b      	ldr	r3, [r3, #24]
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801219a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	9300      	str	r3, [sp, #0]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 fa57 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00d      	beq.n	80121d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80121be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80121c2:	d103      	bne.n	80121cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80121cc:	2303      	movs	r3, #3
 80121ce:	e017      	b.n	8012200 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80121d0:	897b      	ldrh	r3, [r7, #10]
 80121d2:	11db      	asrs	r3, r3, #7
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	f003 0306 	and.w	r3, r3, #6
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	f063 030e 	orn	r3, r3, #14
 80121e0:	b2da      	uxtb	r2, r3
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	4907      	ldr	r1, [pc, #28]	@ (801220c <I2C_MasterRequestRead+0x198>)
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f000 faae 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80121fa:	2301      	movs	r3, #1
 80121fc:	e000      	b.n	8012200 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80121fe:	2300      	movs	r3, #0
}
 8012200:	4618      	mov	r0, r3
 8012202:	3718      	adds	r7, #24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	00010008 	.word	0x00010008
 801220c:	00010002 	.word	0x00010002

08012210 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b088      	sub	sp, #32
 8012214:	af02      	add	r7, sp, #8
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	4608      	mov	r0, r1
 801221a:	4611      	mov	r1, r2
 801221c:	461a      	mov	r2, r3
 801221e:	4603      	mov	r3, r0
 8012220:	817b      	strh	r3, [r7, #10]
 8012222:	460b      	mov	r3, r1
 8012224:	813b      	strh	r3, [r7, #8]
 8012226:	4613      	mov	r3, r2
 8012228:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	6a3b      	ldr	r3, [r7, #32]
 8012240:	2200      	movs	r2, #0
 8012242:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f000 fa08 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	d00d      	beq.n	801226e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801225c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012260:	d103      	bne.n	801226a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012268:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 801226a:	2303      	movs	r3, #3
 801226c:	e05f      	b.n	801232e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801226e:	897b      	ldrh	r3, [r7, #10]
 8012270:	b2db      	uxtb	r3, r3
 8012272:	461a      	mov	r2, r3
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 801227c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012280:	6a3a      	ldr	r2, [r7, #32]
 8012282:	492d      	ldr	r1, [pc, #180]	@ (8012338 <I2C_RequestMemoryWrite+0x128>)
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	f000 fa63 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8012290:	2301      	movs	r3, #1
 8012292:	e04c      	b.n	801232e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012294:	2300      	movs	r3, #0
 8012296:	617b      	str	r3, [r7, #20]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	695b      	ldr	r3, [r3, #20]
 801229e:	617b      	str	r3, [r7, #20]
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	699b      	ldr	r3, [r3, #24]
 80122a6:	617b      	str	r3, [r7, #20]
 80122a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80122aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122ac:	6a39      	ldr	r1, [r7, #32]
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f000 faee 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00d      	beq.n	80122d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122be:	2b04      	cmp	r3, #4
 80122c0:	d107      	bne.n	80122d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80122d2:	2301      	movs	r3, #1
 80122d4:	e02b      	b.n	801232e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80122d6:	88fb      	ldrh	r3, [r7, #6]
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d105      	bne.n	80122e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80122dc:	893b      	ldrh	r3, [r7, #8]
 80122de:	b2da      	uxtb	r2, r3
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	611a      	str	r2, [r3, #16]
 80122e6:	e021      	b.n	801232c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80122e8:	893b      	ldrh	r3, [r7, #8]
 80122ea:	0a1b      	lsrs	r3, r3, #8
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	b2da      	uxtb	r2, r3
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80122f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122f8:	6a39      	ldr	r1, [r7, #32]
 80122fa:	68f8      	ldr	r0, [r7, #12]
 80122fc:	f000 fac8 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 8012300:	4603      	mov	r3, r0
 8012302:	2b00      	cmp	r3, #0
 8012304:	d00d      	beq.n	8012322 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801230a:	2b04      	cmp	r3, #4
 801230c:	d107      	bne.n	801231e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801231c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801231e:	2301      	movs	r3, #1
 8012320:	e005      	b.n	801232e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012322:	893b      	ldrh	r3, [r7, #8]
 8012324:	b2da      	uxtb	r2, r3
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801232c:	2300      	movs	r3, #0
}
 801232e:	4618      	mov	r0, r3
 8012330:	3718      	adds	r7, #24
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	00010002 	.word	0x00010002

0801233c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b088      	sub	sp, #32
 8012340:	af02      	add	r7, sp, #8
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	4608      	mov	r0, r1
 8012346:	4611      	mov	r1, r2
 8012348:	461a      	mov	r2, r3
 801234a:	4603      	mov	r3, r0
 801234c:	817b      	strh	r3, [r7, #10]
 801234e:	460b      	mov	r3, r1
 8012350:	813b      	strh	r3, [r7, #8]
 8012352:	4613      	mov	r3, r2
 8012354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012378:	9300      	str	r3, [sp, #0]
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	2200      	movs	r2, #0
 801237e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8012382:	68f8      	ldr	r0, [r7, #12]
 8012384:	f000 f96a 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	d00d      	beq.n	80123aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801239c:	d103      	bne.n	80123a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80123a6:	2303      	movs	r3, #3
 80123a8:	e0aa      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80123aa:	897b      	ldrh	r3, [r7, #10]
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	461a      	mov	r2, r3
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80123b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80123ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123bc:	6a3a      	ldr	r2, [r7, #32]
 80123be:	4952      	ldr	r1, [pc, #328]	@ (8012508 <I2C_RequestMemoryRead+0x1cc>)
 80123c0:	68f8      	ldr	r0, [r7, #12]
 80123c2:	f000 f9c5 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80123cc:	2301      	movs	r3, #1
 80123ce:	e097      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80123d0:	2300      	movs	r3, #0
 80123d2:	617b      	str	r3, [r7, #20]
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	695b      	ldr	r3, [r3, #20]
 80123da:	617b      	str	r3, [r7, #20]
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	699b      	ldr	r3, [r3, #24]
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80123e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123e8:	6a39      	ldr	r1, [r7, #32]
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	f000 fa50 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d00d      	beq.n	8012412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123fa:	2b04      	cmp	r3, #4
 80123fc:	d107      	bne.n	801240e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801240c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801240e:	2301      	movs	r3, #1
 8012410:	e076      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012412:	88fb      	ldrh	r3, [r7, #6]
 8012414:	2b01      	cmp	r3, #1
 8012416:	d105      	bne.n	8012424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012418:	893b      	ldrh	r3, [r7, #8]
 801241a:	b2da      	uxtb	r2, r3
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	611a      	str	r2, [r3, #16]
 8012422:	e021      	b.n	8012468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012424:	893b      	ldrh	r3, [r7, #8]
 8012426:	0a1b      	lsrs	r3, r3, #8
 8012428:	b29b      	uxth	r3, r3
 801242a:	b2da      	uxtb	r2, r3
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012434:	6a39      	ldr	r1, [r7, #32]
 8012436:	68f8      	ldr	r0, [r7, #12]
 8012438:	f000 fa2a 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00d      	beq.n	801245e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012446:	2b04      	cmp	r3, #4
 8012448:	d107      	bne.n	801245a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801245a:	2301      	movs	r3, #1
 801245c:	e050      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801245e:	893b      	ldrh	r3, [r7, #8]
 8012460:	b2da      	uxtb	r2, r3
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801246a:	6a39      	ldr	r1, [r7, #32]
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f000 fa0f 	bl	8012890 <I2C_WaitOnTXEFlagUntilTimeout>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00d      	beq.n	8012494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801247c:	2b04      	cmp	r3, #4
 801247e:	d107      	bne.n	8012490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801248e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8012490:	2301      	movs	r3, #1
 8012492:	e035      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80124a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80124a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124a6:	9300      	str	r3, [sp, #0]
 80124a8:	6a3b      	ldr	r3, [r7, #32]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f000 f8d3 	bl	801265c <I2C_WaitOnFlagUntilTimeout>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00d      	beq.n	80124d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80124c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80124ca:	d103      	bne.n	80124d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80124d4:	2303      	movs	r3, #3
 80124d6:	e013      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80124d8:	897b      	ldrh	r3, [r7, #10]
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	f043 0301 	orr.w	r3, r3, #1
 80124e0:	b2da      	uxtb	r2, r3
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80124e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ea:	6a3a      	ldr	r2, [r7, #32]
 80124ec:	4906      	ldr	r1, [pc, #24]	@ (8012508 <I2C_RequestMemoryRead+0x1cc>)
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f000 f92e 	bl	8012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80124f4:	4603      	mov	r3, r0
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d001      	beq.n	80124fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80124fa:	2301      	movs	r3, #1
 80124fc:	e000      	b.n	8012500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80124fe:	2300      	movs	r3, #0
}
 8012500:	4618      	mov	r0, r3
 8012502:	3718      	adds	r7, #24
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	00010002 	.word	0x00010002

0801250c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b086      	sub	sp, #24
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012514:	2300      	movs	r3, #0
 8012516:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801251c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012524:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8012526:	4b4b      	ldr	r3, [pc, #300]	@ (8012654 <I2C_DMAAbort+0x148>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	08db      	lsrs	r3, r3, #3
 801252c:	4a4a      	ldr	r2, [pc, #296]	@ (8012658 <I2C_DMAAbort+0x14c>)
 801252e:	fba2 2303 	umull	r2, r3, r2, r3
 8012532:	0a1a      	lsrs	r2, r3, #8
 8012534:	4613      	mov	r3, r2
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	4413      	add	r3, r2
 801253a:	00da      	lsls	r2, r3, #3
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d106      	bne.n	8012554 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801254a:	f043 0220 	orr.w	r2, r3, #32
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8012552:	e00a      	b.n	801256a <I2C_DMAAbort+0x5e>
    }
    count--;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	3b01      	subs	r3, #1
 8012558:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012568:	d0ea      	beq.n	8012540 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801256e:	2b00      	cmp	r3, #0
 8012570:	d003      	beq.n	801257a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012576:	2200      	movs	r2, #0
 8012578:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801257e:	2b00      	cmp	r3, #0
 8012580:	d003      	beq.n	801258a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012586:	2200      	movs	r2, #0
 8012588:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012598:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	2200      	movs	r2, #0
 801259e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d003      	beq.n	80125b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125ac:	2200      	movs	r2, #0
 80125ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d003      	beq.n	80125c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125bc:	2200      	movs	r2, #0
 80125be:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f022 0201 	bic.w	r2, r2, #1
 80125ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	2b60      	cmp	r3, #96	@ 0x60
 80125da:	d10e      	bne.n	80125fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	2220      	movs	r2, #32
 80125e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	2200      	movs	r2, #0
 80125e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	2200      	movs	r2, #0
 80125f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80125f2:	6978      	ldr	r0, [r7, #20]
 80125f4:	f7fe fb14 	bl	8010c20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80125f8:	e027      	b.n	801264a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80125fa:	7cfb      	ldrb	r3, [r7, #19]
 80125fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8012600:	2b28      	cmp	r3, #40	@ 0x28
 8012602:	d117      	bne.n	8012634 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f042 0201 	orr.w	r2, r2, #1
 8012612:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012622:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	2200      	movs	r2, #0
 8012628:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	2228      	movs	r2, #40	@ 0x28
 801262e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012632:	e007      	b.n	8012644 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	2220      	movs	r2, #32
 8012638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	2200      	movs	r2, #0
 8012640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8012644:	6978      	ldr	r0, [r7, #20]
 8012646:	f7fe fae1 	bl	8010c0c <HAL_I2C_ErrorCallback>
}
 801264a:	bf00      	nop
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	2000013c 	.word	0x2000013c
 8012658:	14f8b589 	.word	0x14f8b589

0801265c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	603b      	str	r3, [r7, #0]
 8012668:	4613      	mov	r3, r2
 801266a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801266c:	e048      	b.n	8012700 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012674:	d044      	beq.n	8012700 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012676:	f7fc fb59 	bl	800ed2c <HAL_GetTick>
 801267a:	4602      	mov	r2, r0
 801267c:	69bb      	ldr	r3, [r7, #24]
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	429a      	cmp	r2, r3
 8012684:	d302      	bcc.n	801268c <I2C_WaitOnFlagUntilTimeout+0x30>
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d139      	bne.n	8012700 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	0c1b      	lsrs	r3, r3, #16
 8012690:	b2db      	uxtb	r3, r3
 8012692:	2b01      	cmp	r3, #1
 8012694:	d10d      	bne.n	80126b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	695b      	ldr	r3, [r3, #20]
 801269c:	43da      	mvns	r2, r3
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	4013      	ands	r3, r2
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	bf0c      	ite	eq
 80126a8:	2301      	moveq	r3, #1
 80126aa:	2300      	movne	r3, #0
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	461a      	mov	r2, r3
 80126b0:	e00c      	b.n	80126cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	699b      	ldr	r3, [r3, #24]
 80126b8:	43da      	mvns	r2, r3
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	4013      	ands	r3, r2
 80126be:	b29b      	uxth	r3, r3
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	bf0c      	ite	eq
 80126c4:	2301      	moveq	r3, #1
 80126c6:	2300      	movne	r3, #0
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	461a      	mov	r2, r3
 80126cc:	79fb      	ldrb	r3, [r7, #7]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d116      	bne.n	8012700 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2200      	movs	r2, #0
 80126d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2220      	movs	r2, #32
 80126dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126ec:	f043 0220 	orr.w	r2, r3, #32
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2200      	movs	r2, #0
 80126f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	e023      	b.n	8012748 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	0c1b      	lsrs	r3, r3, #16
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2b01      	cmp	r3, #1
 8012708:	d10d      	bne.n	8012726 <I2C_WaitOnFlagUntilTimeout+0xca>
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	695b      	ldr	r3, [r3, #20]
 8012710:	43da      	mvns	r2, r3
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	4013      	ands	r3, r2
 8012716:	b29b      	uxth	r3, r3
 8012718:	2b00      	cmp	r3, #0
 801271a:	bf0c      	ite	eq
 801271c:	2301      	moveq	r3, #1
 801271e:	2300      	movne	r3, #0
 8012720:	b2db      	uxtb	r3, r3
 8012722:	461a      	mov	r2, r3
 8012724:	e00c      	b.n	8012740 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	699b      	ldr	r3, [r3, #24]
 801272c:	43da      	mvns	r2, r3
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	4013      	ands	r3, r2
 8012732:	b29b      	uxth	r3, r3
 8012734:	2b00      	cmp	r3, #0
 8012736:	bf0c      	ite	eq
 8012738:	2301      	moveq	r3, #1
 801273a:	2300      	movne	r3, #0
 801273c:	b2db      	uxtb	r3, r3
 801273e:	461a      	mov	r2, r3
 8012740:	79fb      	ldrb	r3, [r7, #7]
 8012742:	429a      	cmp	r2, r3
 8012744:	d093      	beq.n	801266e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801275e:	e071      	b.n	8012844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	695b      	ldr	r3, [r3, #20]
 8012766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801276a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801276e:	d123      	bne.n	80127b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801277e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2200      	movs	r2, #0
 801278e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2220      	movs	r2, #32
 8012794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2200      	movs	r2, #0
 801279c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127a4:	f043 0204 	orr.w	r2, r3, #4
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80127b4:	2301      	movs	r3, #1
 80127b6:	e067      	b.n	8012888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80127be:	d041      	beq.n	8012844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127c0:	f7fc fab4 	bl	800ed2c <HAL_GetTick>
 80127c4:	4602      	mov	r2, r0
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d302      	bcc.n	80127d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d136      	bne.n	8012844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	0c1b      	lsrs	r3, r3, #16
 80127da:	b2db      	uxtb	r3, r3
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d10c      	bne.n	80127fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	695b      	ldr	r3, [r3, #20]
 80127e6:	43da      	mvns	r2, r3
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	4013      	ands	r3, r2
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	bf14      	ite	ne
 80127f2:	2301      	movne	r3, #1
 80127f4:	2300      	moveq	r3, #0
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	e00b      	b.n	8012812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	699b      	ldr	r3, [r3, #24]
 8012800:	43da      	mvns	r2, r3
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	4013      	ands	r3, r2
 8012806:	b29b      	uxth	r3, r3
 8012808:	2b00      	cmp	r3, #0
 801280a:	bf14      	ite	ne
 801280c:	2301      	movne	r3, #1
 801280e:	2300      	moveq	r3, #0
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b00      	cmp	r3, #0
 8012814:	d016      	beq.n	8012844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2220      	movs	r2, #32
 8012820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	2200      	movs	r2, #0
 8012828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012830:	f043 0220 	orr.w	r2, r3, #32
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	2200      	movs	r2, #0
 801283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012840:	2301      	movs	r3, #1
 8012842:	e021      	b.n	8012888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	0c1b      	lsrs	r3, r3, #16
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b01      	cmp	r3, #1
 801284c:	d10c      	bne.n	8012868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	695b      	ldr	r3, [r3, #20]
 8012854:	43da      	mvns	r2, r3
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	4013      	ands	r3, r2
 801285a:	b29b      	uxth	r3, r3
 801285c:	2b00      	cmp	r3, #0
 801285e:	bf14      	ite	ne
 8012860:	2301      	movne	r3, #1
 8012862:	2300      	moveq	r3, #0
 8012864:	b2db      	uxtb	r3, r3
 8012866:	e00b      	b.n	8012880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	699b      	ldr	r3, [r3, #24]
 801286e:	43da      	mvns	r2, r3
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	4013      	ands	r3, r2
 8012874:	b29b      	uxth	r3, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	bf14      	ite	ne
 801287a:	2301      	movne	r3, #1
 801287c:	2300      	moveq	r3, #0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	f47f af6d 	bne.w	8012760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3710      	adds	r7, #16
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801289c:	e034      	b.n	8012908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f000 f915 	bl	8012ace <I2C_IsAcknowledgeFailed>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80128aa:	2301      	movs	r3, #1
 80128ac:	e034      	b.n	8012918 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80128b4:	d028      	beq.n	8012908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128b6:	f7fc fa39 	bl	800ed2c <HAL_GetTick>
 80128ba:	4602      	mov	r2, r0
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	1ad3      	subs	r3, r2, r3
 80128c0:	68ba      	ldr	r2, [r7, #8]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d302      	bcc.n	80128cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d11d      	bne.n	8012908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	695b      	ldr	r3, [r3, #20]
 80128d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80128d6:	2b80      	cmp	r3, #128	@ 0x80
 80128d8:	d016      	beq.n	8012908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2200      	movs	r2, #0
 80128de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2220      	movs	r2, #32
 80128e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128f4:	f043 0220 	orr.w	r2, r3, #32
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2200      	movs	r2, #0
 8012900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	e007      	b.n	8012918 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	695b      	ldr	r3, [r3, #20]
 801290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012912:	2b80      	cmp	r3, #128	@ 0x80
 8012914:	d1c3      	bne.n	801289e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012916:	2300      	movs	r3, #0
}
 8012918:	4618      	mov	r0, r3
 801291a:	3710      	adds	r7, #16
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801292c:	e034      	b.n	8012998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801292e:	68f8      	ldr	r0, [r7, #12]
 8012930:	f000 f8cd 	bl	8012ace <I2C_IsAcknowledgeFailed>
 8012934:	4603      	mov	r3, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801293a:	2301      	movs	r3, #1
 801293c:	e034      	b.n	80129a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012944:	d028      	beq.n	8012998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012946:	f7fc f9f1 	bl	800ed2c <HAL_GetTick>
 801294a:	4602      	mov	r2, r0
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	1ad3      	subs	r3, r2, r3
 8012950:	68ba      	ldr	r2, [r7, #8]
 8012952:	429a      	cmp	r2, r3
 8012954:	d302      	bcc.n	801295c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d11d      	bne.n	8012998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	695b      	ldr	r3, [r3, #20]
 8012962:	f003 0304 	and.w	r3, r3, #4
 8012966:	2b04      	cmp	r3, #4
 8012968:	d016      	beq.n	8012998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2200      	movs	r2, #0
 801296e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2220      	movs	r2, #32
 8012974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2200      	movs	r2, #0
 801297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012984:	f043 0220 	orr.w	r2, r3, #32
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2200      	movs	r2, #0
 8012990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012994:	2301      	movs	r3, #1
 8012996:	e007      	b.n	80129a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	695b      	ldr	r3, [r3, #20]
 801299e:	f003 0304 	and.w	r3, r3, #4
 80129a2:	2b04      	cmp	r3, #4
 80129a4:	d1c3      	bne.n	801292e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80129a6:	2300      	movs	r3, #0
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	3710      	adds	r7, #16
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80129b8:	2300      	movs	r3, #0
 80129ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80129bc:	4b13      	ldr	r3, [pc, #76]	@ (8012a0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	08db      	lsrs	r3, r3, #3
 80129c2:	4a13      	ldr	r2, [pc, #76]	@ (8012a10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80129c4:	fba2 2303 	umull	r2, r3, r2, r3
 80129c8:	0a1a      	lsrs	r2, r3, #8
 80129ca:	4613      	mov	r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	4413      	add	r3, r2
 80129d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3b01      	subs	r3, #1
 80129d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d107      	bne.n	80129ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129e2:	f043 0220 	orr.w	r2, r3, #32
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80129ea:	2301      	movs	r3, #1
 80129ec:	e008      	b.n	8012a00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80129f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80129fc:	d0e9      	beq.n	80129d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3714      	adds	r7, #20
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	2000013c 	.word	0x2000013c
 8012a10:	14f8b589 	.word	0x14f8b589

08012a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012a20:	e049      	b.n	8012ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	695b      	ldr	r3, [r3, #20]
 8012a28:	f003 0310 	and.w	r3, r3, #16
 8012a2c:	2b10      	cmp	r3, #16
 8012a2e:	d119      	bne.n	8012a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f06f 0210 	mvn.w	r2, #16
 8012a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2220      	movs	r2, #32
 8012a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8012a60:	2301      	movs	r3, #1
 8012a62:	e030      	b.n	8012ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012a64:	f7fc f962 	bl	800ed2c <HAL_GetTick>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	68ba      	ldr	r2, [r7, #8]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d302      	bcc.n	8012a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d11d      	bne.n	8012ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	695b      	ldr	r3, [r3, #20]
 8012a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a84:	2b40      	cmp	r3, #64	@ 0x40
 8012a86:	d016      	beq.n	8012ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2220      	movs	r2, #32
 8012a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012aa2:	f043 0220 	orr.w	r2, r3, #32
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2200      	movs	r2, #0
 8012aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e007      	b.n	8012ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	695b      	ldr	r3, [r3, #20]
 8012abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ac0:	2b40      	cmp	r3, #64	@ 0x40
 8012ac2:	d1ae      	bne.n	8012a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012ac4:	2300      	movs	r3, #0
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}

08012ace <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8012ace:	b480      	push	{r7}
 8012ad0:	b083      	sub	sp, #12
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	695b      	ldr	r3, [r3, #20]
 8012adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012ae4:	d11b      	bne.n	8012b1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012aee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2220      	movs	r2, #32
 8012afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2200      	movs	r2, #0
 8012b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b0a:	f043 0204 	orr.w	r2, r3, #4
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2200      	movs	r2, #0
 8012b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e000      	b.n	8012b20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8012b1e:	2300      	movs	r3, #0
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b38:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8012b3c:	d103      	bne.n	8012b46 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2201      	movs	r2, #1
 8012b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8012b44:	e007      	b.n	8012b56 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8012b4e:	d102      	bne.n	8012b56 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2208      	movs	r2, #8
 8012b54:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8012b56:	bf00      	nop
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
	...

08012b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b086      	sub	sp, #24
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d101      	bne.n	8012b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012b72:	2301      	movs	r3, #1
 8012b74:	e267      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	f003 0301 	and.w	r3, r3, #1
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d075      	beq.n	8012c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012b82:	4b88      	ldr	r3, [pc, #544]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	f003 030c 	and.w	r3, r3, #12
 8012b8a:	2b04      	cmp	r3, #4
 8012b8c:	d00c      	beq.n	8012ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012b8e:	4b85      	ldr	r3, [pc, #532]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012b90:	689b      	ldr	r3, [r3, #8]
 8012b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012b96:	2b08      	cmp	r3, #8
 8012b98:	d112      	bne.n	8012bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012b9a:	4b82      	ldr	r3, [pc, #520]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012ba6:	d10b      	bne.n	8012bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d05b      	beq.n	8012c6c <HAL_RCC_OscConfig+0x108>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d157      	bne.n	8012c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	e242      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bc8:	d106      	bne.n	8012bd8 <HAL_RCC_OscConfig+0x74>
 8012bca:	4b76      	ldr	r3, [pc, #472]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	4a75      	ldr	r2, [pc, #468]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012bd4:	6013      	str	r3, [r2, #0]
 8012bd6:	e01d      	b.n	8012c14 <HAL_RCC_OscConfig+0xb0>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012be0:	d10c      	bne.n	8012bfc <HAL_RCC_OscConfig+0x98>
 8012be2:	4b70      	ldr	r3, [pc, #448]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	4a6f      	ldr	r2, [pc, #444]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012bec:	6013      	str	r3, [r2, #0]
 8012bee:	4b6d      	ldr	r3, [pc, #436]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012bf8:	6013      	str	r3, [r2, #0]
 8012bfa:	e00b      	b.n	8012c14 <HAL_RCC_OscConfig+0xb0>
 8012bfc:	4b69      	ldr	r3, [pc, #420]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a68      	ldr	r2, [pc, #416]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012c06:	6013      	str	r3, [r2, #0]
 8012c08:	4b66      	ldr	r3, [pc, #408]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a65      	ldr	r2, [pc, #404]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d013      	beq.n	8012c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012c1c:	f7fc f886 	bl	800ed2c <HAL_GetTick>
 8012c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c22:	e008      	b.n	8012c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012c24:	f7fc f882 	bl	800ed2c <HAL_GetTick>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	2b64      	cmp	r3, #100	@ 0x64
 8012c30:	d901      	bls.n	8012c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012c32:	2303      	movs	r3, #3
 8012c34:	e207      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c36:	4b5b      	ldr	r3, [pc, #364]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d0f0      	beq.n	8012c24 <HAL_RCC_OscConfig+0xc0>
 8012c42:	e014      	b.n	8012c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012c44:	f7fc f872 	bl	800ed2c <HAL_GetTick>
 8012c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012c4a:	e008      	b.n	8012c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012c4c:	f7fc f86e 	bl	800ed2c <HAL_GetTick>
 8012c50:	4602      	mov	r2, r0
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	1ad3      	subs	r3, r2, r3
 8012c56:	2b64      	cmp	r3, #100	@ 0x64
 8012c58:	d901      	bls.n	8012c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012c5a:	2303      	movs	r3, #3
 8012c5c:	e1f3      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012c5e:	4b51      	ldr	r3, [pc, #324]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1f0      	bne.n	8012c4c <HAL_RCC_OscConfig+0xe8>
 8012c6a:	e000      	b.n	8012c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f003 0302 	and.w	r3, r3, #2
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d063      	beq.n	8012d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	f003 030c 	and.w	r3, r3, #12
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00b      	beq.n	8012c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012c86:	4b47      	ldr	r3, [pc, #284]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c88:	689b      	ldr	r3, [r3, #8]
 8012c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012c8e:	2b08      	cmp	r3, #8
 8012c90:	d11c      	bne.n	8012ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012c92:	4b44      	ldr	r3, [pc, #272]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d116      	bne.n	8012ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012c9e:	4b41      	ldr	r3, [pc, #260]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f003 0302 	and.w	r3, r3, #2
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d005      	beq.n	8012cb6 <HAL_RCC_OscConfig+0x152>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d001      	beq.n	8012cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e1c7      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	691b      	ldr	r3, [r3, #16]
 8012cc2:	00db      	lsls	r3, r3, #3
 8012cc4:	4937      	ldr	r1, [pc, #220]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012cca:	e03a      	b.n	8012d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d020      	beq.n	8012d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012cd4:	4b34      	ldr	r3, [pc, #208]	@ (8012da8 <HAL_RCC_OscConfig+0x244>)
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cda:	f7fc f827 	bl	800ed2c <HAL_GetTick>
 8012cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ce0:	e008      	b.n	8012cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012ce2:	f7fc f823 	bl	800ed2c <HAL_GetTick>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	2b02      	cmp	r3, #2
 8012cee:	d901      	bls.n	8012cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	e1a8      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f003 0302 	and.w	r3, r3, #2
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d0f0      	beq.n	8012ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012d00:	4b28      	ldr	r3, [pc, #160]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	691b      	ldr	r3, [r3, #16]
 8012d0c:	00db      	lsls	r3, r3, #3
 8012d0e:	4925      	ldr	r1, [pc, #148]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012d10:	4313      	orrs	r3, r2
 8012d12:	600b      	str	r3, [r1, #0]
 8012d14:	e015      	b.n	8012d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012d16:	4b24      	ldr	r3, [pc, #144]	@ (8012da8 <HAL_RCC_OscConfig+0x244>)
 8012d18:	2200      	movs	r2, #0
 8012d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d1c:	f7fc f806 	bl	800ed2c <HAL_GetTick>
 8012d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012d22:	e008      	b.n	8012d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012d24:	f7fc f802 	bl	800ed2c <HAL_GetTick>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	2b02      	cmp	r3, #2
 8012d30:	d901      	bls.n	8012d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012d32:	2303      	movs	r3, #3
 8012d34:	e187      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012d36:	4b1b      	ldr	r3, [pc, #108]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f003 0302 	and.w	r3, r3, #2
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d1f0      	bne.n	8012d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 0308 	and.w	r3, r3, #8
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d036      	beq.n	8012dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	695b      	ldr	r3, [r3, #20]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d016      	beq.n	8012d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012d56:	4b15      	ldr	r3, [pc, #84]	@ (8012dac <HAL_RCC_OscConfig+0x248>)
 8012d58:	2201      	movs	r2, #1
 8012d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012d5c:	f7fb ffe6 	bl	800ed2c <HAL_GetTick>
 8012d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012d62:	e008      	b.n	8012d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012d64:	f7fb ffe2 	bl	800ed2c <HAL_GetTick>
 8012d68:	4602      	mov	r2, r0
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	1ad3      	subs	r3, r2, r3
 8012d6e:	2b02      	cmp	r3, #2
 8012d70:	d901      	bls.n	8012d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012d72:	2303      	movs	r3, #3
 8012d74:	e167      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012d76:	4b0b      	ldr	r3, [pc, #44]	@ (8012da4 <HAL_RCC_OscConfig+0x240>)
 8012d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d7a:	f003 0302 	and.w	r3, r3, #2
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d0f0      	beq.n	8012d64 <HAL_RCC_OscConfig+0x200>
 8012d82:	e01b      	b.n	8012dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012d84:	4b09      	ldr	r3, [pc, #36]	@ (8012dac <HAL_RCC_OscConfig+0x248>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012d8a:	f7fb ffcf 	bl	800ed2c <HAL_GetTick>
 8012d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012d90:	e00e      	b.n	8012db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012d92:	f7fb ffcb 	bl	800ed2c <HAL_GetTick>
 8012d96:	4602      	mov	r2, r0
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	2b02      	cmp	r3, #2
 8012d9e:	d907      	bls.n	8012db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012da0:	2303      	movs	r3, #3
 8012da2:	e150      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
 8012da4:	40023800 	.word	0x40023800
 8012da8:	42470000 	.word	0x42470000
 8012dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012db0:	4b88      	ldr	r3, [pc, #544]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012db4:	f003 0302 	and.w	r3, r3, #2
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1ea      	bne.n	8012d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f003 0304 	and.w	r3, r3, #4
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f000 8097 	beq.w	8012ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012dce:	4b81      	ldr	r3, [pc, #516]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d10f      	bne.n	8012dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012dda:	2300      	movs	r3, #0
 8012ddc:	60bb      	str	r3, [r7, #8]
 8012dde:	4b7d      	ldr	r3, [pc, #500]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012de2:	4a7c      	ldr	r2, [pc, #496]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8012dea:	4b7a      	ldr	r3, [pc, #488]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012df2:	60bb      	str	r3, [r7, #8]
 8012df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012df6:	2301      	movs	r3, #1
 8012df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012dfa:	4b77      	ldr	r3, [pc, #476]	@ (8012fd8 <HAL_RCC_OscConfig+0x474>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d118      	bne.n	8012e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012e06:	4b74      	ldr	r3, [pc, #464]	@ (8012fd8 <HAL_RCC_OscConfig+0x474>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a73      	ldr	r2, [pc, #460]	@ (8012fd8 <HAL_RCC_OscConfig+0x474>)
 8012e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012e12:	f7fb ff8b 	bl	800ed2c <HAL_GetTick>
 8012e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012e18:	e008      	b.n	8012e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012e1a:	f7fb ff87 	bl	800ed2c <HAL_GetTick>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	1ad3      	subs	r3, r2, r3
 8012e24:	2b02      	cmp	r3, #2
 8012e26:	d901      	bls.n	8012e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8012e28:	2303      	movs	r3, #3
 8012e2a:	e10c      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8012fd8 <HAL_RCC_OscConfig+0x474>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d0f0      	beq.n	8012e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	689b      	ldr	r3, [r3, #8]
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d106      	bne.n	8012e4e <HAL_RCC_OscConfig+0x2ea>
 8012e40:	4b64      	ldr	r3, [pc, #400]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e44:	4a63      	ldr	r2, [pc, #396]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e46:	f043 0301 	orr.w	r3, r3, #1
 8012e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8012e4c:	e01c      	b.n	8012e88 <HAL_RCC_OscConfig+0x324>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	2b05      	cmp	r3, #5
 8012e54:	d10c      	bne.n	8012e70 <HAL_RCC_OscConfig+0x30c>
 8012e56:	4b5f      	ldr	r3, [pc, #380]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e5c:	f043 0304 	orr.w	r3, r3, #4
 8012e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8012e62:	4b5c      	ldr	r3, [pc, #368]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e66:	4a5b      	ldr	r2, [pc, #364]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e68:	f043 0301 	orr.w	r3, r3, #1
 8012e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8012e6e:	e00b      	b.n	8012e88 <HAL_RCC_OscConfig+0x324>
 8012e70:	4b58      	ldr	r3, [pc, #352]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e74:	4a57      	ldr	r2, [pc, #348]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e76:	f023 0301 	bic.w	r3, r3, #1
 8012e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8012e7c:	4b55      	ldr	r3, [pc, #340]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e80:	4a54      	ldr	r2, [pc, #336]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012e82:	f023 0304 	bic.w	r3, r3, #4
 8012e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	689b      	ldr	r3, [r3, #8]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d015      	beq.n	8012ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e90:	f7fb ff4c 	bl	800ed2c <HAL_GetTick>
 8012e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e96:	e00a      	b.n	8012eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012e98:	f7fb ff48 	bl	800ed2c <HAL_GetTick>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d901      	bls.n	8012eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8012eaa:	2303      	movs	r3, #3
 8012eac:	e0cb      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012eae:	4b49      	ldr	r3, [pc, #292]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012eb2:	f003 0302 	and.w	r3, r3, #2
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d0ee      	beq.n	8012e98 <HAL_RCC_OscConfig+0x334>
 8012eba:	e014      	b.n	8012ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012ebc:	f7fb ff36 	bl	800ed2c <HAL_GetTick>
 8012ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012ec2:	e00a      	b.n	8012eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012ec4:	f7fb ff32 	bl	800ed2c <HAL_GetTick>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	1ad3      	subs	r3, r2, r3
 8012ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d901      	bls.n	8012eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8012ed6:	2303      	movs	r3, #3
 8012ed8:	e0b5      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012eda:	4b3e      	ldr	r3, [pc, #248]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ede:	f003 0302 	and.w	r3, r3, #2
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d1ee      	bne.n	8012ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012ee6:	7dfb      	ldrb	r3, [r7, #23]
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d105      	bne.n	8012ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012eec:	4b39      	ldr	r3, [pc, #228]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ef0:	4a38      	ldr	r2, [pc, #224]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	699b      	ldr	r3, [r3, #24]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	f000 80a1 	beq.w	8013044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012f02:	4b34      	ldr	r3, [pc, #208]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012f04:	689b      	ldr	r3, [r3, #8]
 8012f06:	f003 030c 	and.w	r3, r3, #12
 8012f0a:	2b08      	cmp	r3, #8
 8012f0c:	d05c      	beq.n	8012fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	699b      	ldr	r3, [r3, #24]
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	d141      	bne.n	8012f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012f16:	4b31      	ldr	r3, [pc, #196]	@ (8012fdc <HAL_RCC_OscConfig+0x478>)
 8012f18:	2200      	movs	r2, #0
 8012f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f1c:	f7fb ff06 	bl	800ed2c <HAL_GetTick>
 8012f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f22:	e008      	b.n	8012f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012f24:	f7fb ff02 	bl	800ed2c <HAL_GetTick>
 8012f28:	4602      	mov	r2, r0
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d901      	bls.n	8012f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8012f32:	2303      	movs	r3, #3
 8012f34:	e087      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f36:	4b27      	ldr	r3, [pc, #156]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1f0      	bne.n	8012f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	69da      	ldr	r2, [r3, #28]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6a1b      	ldr	r3, [r3, #32]
 8012f4a:	431a      	orrs	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f50:	019b      	lsls	r3, r3, #6
 8012f52:	431a      	orrs	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f58:	085b      	lsrs	r3, r3, #1
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	041b      	lsls	r3, r3, #16
 8012f5e:	431a      	orrs	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f64:	061b      	lsls	r3, r3, #24
 8012f66:	491b      	ldr	r1, [pc, #108]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012f68:	4313      	orrs	r3, r2
 8012f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8012fdc <HAL_RCC_OscConfig+0x478>)
 8012f6e:	2201      	movs	r2, #1
 8012f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f72:	f7fb fedb 	bl	800ed2c <HAL_GetTick>
 8012f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f78:	e008      	b.n	8012f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012f7a:	f7fb fed7 	bl	800ed2c <HAL_GetTick>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	1ad3      	subs	r3, r2, r3
 8012f84:	2b02      	cmp	r3, #2
 8012f86:	d901      	bls.n	8012f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012f88:	2303      	movs	r3, #3
 8012f8a:	e05c      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f8c:	4b11      	ldr	r3, [pc, #68]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d0f0      	beq.n	8012f7a <HAL_RCC_OscConfig+0x416>
 8012f98:	e054      	b.n	8013044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012f9a:	4b10      	ldr	r3, [pc, #64]	@ (8012fdc <HAL_RCC_OscConfig+0x478>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012fa0:	f7fb fec4 	bl	800ed2c <HAL_GetTick>
 8012fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012fa6:	e008      	b.n	8012fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012fa8:	f7fb fec0 	bl	800ed2c <HAL_GetTick>
 8012fac:	4602      	mov	r2, r0
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	1ad3      	subs	r3, r2, r3
 8012fb2:	2b02      	cmp	r3, #2
 8012fb4:	d901      	bls.n	8012fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8012fb6:	2303      	movs	r3, #3
 8012fb8:	e045      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012fba:	4b06      	ldr	r3, [pc, #24]	@ (8012fd4 <HAL_RCC_OscConfig+0x470>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d1f0      	bne.n	8012fa8 <HAL_RCC_OscConfig+0x444>
 8012fc6:	e03d      	b.n	8013044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	699b      	ldr	r3, [r3, #24]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d107      	bne.n	8012fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	e038      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
 8012fd4:	40023800 	.word	0x40023800
 8012fd8:	40007000 	.word	0x40007000
 8012fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8013050 <HAL_RCC_OscConfig+0x4ec>)
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	699b      	ldr	r3, [r3, #24]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d028      	beq.n	8013040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d121      	bne.n	8013040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013006:	429a      	cmp	r2, r3
 8013008:	d11a      	bne.n	8013040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8013010:	4013      	ands	r3, r2
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013018:	4293      	cmp	r3, r2
 801301a:	d111      	bne.n	8013040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013026:	085b      	lsrs	r3, r3, #1
 8013028:	3b01      	subs	r3, #1
 801302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801302c:	429a      	cmp	r2, r3
 801302e:	d107      	bne.n	8013040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801303c:	429a      	cmp	r2, r3
 801303e:	d001      	beq.n	8013044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8013040:	2301      	movs	r3, #1
 8013042:	e000      	b.n	8013046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013044:	2300      	movs	r3, #0
}
 8013046:	4618      	mov	r0, r3
 8013048:	3718      	adds	r7, #24
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
 801304e:	bf00      	nop
 8013050:	40023800 	.word	0x40023800

08013054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d101      	bne.n	8013068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013064:	2301      	movs	r3, #1
 8013066:	e0cc      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013068:	4b68      	ldr	r3, [pc, #416]	@ (801320c <HAL_RCC_ClockConfig+0x1b8>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f003 0307 	and.w	r3, r3, #7
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	429a      	cmp	r2, r3
 8013074:	d90c      	bls.n	8013090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013076:	4b65      	ldr	r3, [pc, #404]	@ (801320c <HAL_RCC_ClockConfig+0x1b8>)
 8013078:	683a      	ldr	r2, [r7, #0]
 801307a:	b2d2      	uxtb	r2, r2
 801307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801307e:	4b63      	ldr	r3, [pc, #396]	@ (801320c <HAL_RCC_ClockConfig+0x1b8>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f003 0307 	and.w	r3, r3, #7
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	429a      	cmp	r2, r3
 801308a:	d001      	beq.n	8013090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801308c:	2301      	movs	r3, #1
 801308e:	e0b8      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	f003 0302 	and.w	r3, r3, #2
 8013098:	2b00      	cmp	r3, #0
 801309a:	d020      	beq.n	80130de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f003 0304 	and.w	r3, r3, #4
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d005      	beq.n	80130b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80130a8:	4b59      	ldr	r3, [pc, #356]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	4a58      	ldr	r2, [pc, #352]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80130b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	f003 0308 	and.w	r3, r3, #8
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d005      	beq.n	80130cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80130c0:	4b53      	ldr	r3, [pc, #332]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130c2:	689b      	ldr	r3, [r3, #8]
 80130c4:	4a52      	ldr	r2, [pc, #328]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80130ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80130cc:	4b50      	ldr	r3, [pc, #320]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130ce:	689b      	ldr	r3, [r3, #8]
 80130d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	494d      	ldr	r1, [pc, #308]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130da:	4313      	orrs	r3, r2
 80130dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d044      	beq.n	8013174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d107      	bne.n	8013102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80130f2:	4b47      	ldr	r3, [pc, #284]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d119      	bne.n	8013132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80130fe:	2301      	movs	r3, #1
 8013100:	e07f      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	2b02      	cmp	r3, #2
 8013108:	d003      	beq.n	8013112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801310e:	2b03      	cmp	r3, #3
 8013110:	d107      	bne.n	8013122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013112:	4b3f      	ldr	r3, [pc, #252]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801311a:	2b00      	cmp	r3, #0
 801311c:	d109      	bne.n	8013132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801311e:	2301      	movs	r3, #1
 8013120:	e06f      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013122:	4b3b      	ldr	r3, [pc, #236]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f003 0302 	and.w	r3, r3, #2
 801312a:	2b00      	cmp	r3, #0
 801312c:	d101      	bne.n	8013132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801312e:	2301      	movs	r3, #1
 8013130:	e067      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013132:	4b37      	ldr	r3, [pc, #220]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	f023 0203 	bic.w	r2, r3, #3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	4934      	ldr	r1, [pc, #208]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 8013140:	4313      	orrs	r3, r2
 8013142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013144:	f7fb fdf2 	bl	800ed2c <HAL_GetTick>
 8013148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801314a:	e00a      	b.n	8013162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801314c:	f7fb fdee 	bl	800ed2c <HAL_GetTick>
 8013150:	4602      	mov	r2, r0
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	1ad3      	subs	r3, r2, r3
 8013156:	f241 3288 	movw	r2, #5000	@ 0x1388
 801315a:	4293      	cmp	r3, r2
 801315c:	d901      	bls.n	8013162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801315e:	2303      	movs	r3, #3
 8013160:	e04f      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013162:	4b2b      	ldr	r3, [pc, #172]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 8013164:	689b      	ldr	r3, [r3, #8]
 8013166:	f003 020c 	and.w	r2, r3, #12
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	429a      	cmp	r2, r3
 8013172:	d1eb      	bne.n	801314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013174:	4b25      	ldr	r3, [pc, #148]	@ (801320c <HAL_RCC_ClockConfig+0x1b8>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f003 0307 	and.w	r3, r3, #7
 801317c:	683a      	ldr	r2, [r7, #0]
 801317e:	429a      	cmp	r2, r3
 8013180:	d20c      	bcs.n	801319c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013182:	4b22      	ldr	r3, [pc, #136]	@ (801320c <HAL_RCC_ClockConfig+0x1b8>)
 8013184:	683a      	ldr	r2, [r7, #0]
 8013186:	b2d2      	uxtb	r2, r2
 8013188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801318a:	4b20      	ldr	r3, [pc, #128]	@ (801320c <HAL_RCC_ClockConfig+0x1b8>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f003 0307 	and.w	r3, r3, #7
 8013192:	683a      	ldr	r2, [r7, #0]
 8013194:	429a      	cmp	r2, r3
 8013196:	d001      	beq.n	801319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013198:	2301      	movs	r3, #1
 801319a:	e032      	b.n	8013202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f003 0304 	and.w	r3, r3, #4
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d008      	beq.n	80131ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80131a8:	4b19      	ldr	r3, [pc, #100]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	4916      	ldr	r1, [pc, #88]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80131b6:	4313      	orrs	r3, r2
 80131b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	f003 0308 	and.w	r3, r3, #8
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d009      	beq.n	80131da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80131c6:	4b12      	ldr	r3, [pc, #72]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80131c8:	689b      	ldr	r3, [r3, #8]
 80131ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	691b      	ldr	r3, [r3, #16]
 80131d2:	00db      	lsls	r3, r3, #3
 80131d4:	490e      	ldr	r1, [pc, #56]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80131d6:	4313      	orrs	r3, r2
 80131d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80131da:	f000 f821 	bl	8013220 <HAL_RCC_GetSysClockFreq>
 80131de:	4602      	mov	r2, r0
 80131e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013210 <HAL_RCC_ClockConfig+0x1bc>)
 80131e2:	689b      	ldr	r3, [r3, #8]
 80131e4:	091b      	lsrs	r3, r3, #4
 80131e6:	f003 030f 	and.w	r3, r3, #15
 80131ea:	490a      	ldr	r1, [pc, #40]	@ (8013214 <HAL_RCC_ClockConfig+0x1c0>)
 80131ec:	5ccb      	ldrb	r3, [r1, r3]
 80131ee:	fa22 f303 	lsr.w	r3, r2, r3
 80131f2:	4a09      	ldr	r2, [pc, #36]	@ (8013218 <HAL_RCC_ClockConfig+0x1c4>)
 80131f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80131f6:	4b09      	ldr	r3, [pc, #36]	@ (801321c <HAL_RCC_ClockConfig+0x1c8>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fb fd52 	bl	800eca4 <HAL_InitTick>

  return HAL_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3710      	adds	r7, #16
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	40023c00 	.word	0x40023c00
 8013210:	40023800 	.word	0x40023800
 8013214:	08023954 	.word	0x08023954
 8013218:	2000013c 	.word	0x2000013c
 801321c:	20000344 	.word	0x20000344

08013220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013224:	b094      	sub	sp, #80	@ 0x50
 8013226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013228:	2300      	movs	r3, #0
 801322a:	647b      	str	r3, [r7, #68]	@ 0x44
 801322c:	2300      	movs	r3, #0
 801322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013230:	2300      	movs	r3, #0
 8013232:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8013234:	2300      	movs	r3, #0
 8013236:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013238:	4b79      	ldr	r3, [pc, #484]	@ (8013420 <HAL_RCC_GetSysClockFreq+0x200>)
 801323a:	689b      	ldr	r3, [r3, #8]
 801323c:	f003 030c 	and.w	r3, r3, #12
 8013240:	2b08      	cmp	r3, #8
 8013242:	d00d      	beq.n	8013260 <HAL_RCC_GetSysClockFreq+0x40>
 8013244:	2b08      	cmp	r3, #8
 8013246:	f200 80e1 	bhi.w	801340c <HAL_RCC_GetSysClockFreq+0x1ec>
 801324a:	2b00      	cmp	r3, #0
 801324c:	d002      	beq.n	8013254 <HAL_RCC_GetSysClockFreq+0x34>
 801324e:	2b04      	cmp	r3, #4
 8013250:	d003      	beq.n	801325a <HAL_RCC_GetSysClockFreq+0x3a>
 8013252:	e0db      	b.n	801340c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013254:	4b73      	ldr	r3, [pc, #460]	@ (8013424 <HAL_RCC_GetSysClockFreq+0x204>)
 8013256:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8013258:	e0db      	b.n	8013412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801325a:	4b73      	ldr	r3, [pc, #460]	@ (8013428 <HAL_RCC_GetSysClockFreq+0x208>)
 801325c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801325e:	e0d8      	b.n	8013412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013260:	4b6f      	ldr	r3, [pc, #444]	@ (8013420 <HAL_RCC_GetSysClockFreq+0x200>)
 8013262:	685b      	ldr	r3, [r3, #4]
 8013264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013268:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801326a:	4b6d      	ldr	r3, [pc, #436]	@ (8013420 <HAL_RCC_GetSysClockFreq+0x200>)
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013272:	2b00      	cmp	r3, #0
 8013274:	d063      	beq.n	801333e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013276:	4b6a      	ldr	r3, [pc, #424]	@ (8013420 <HAL_RCC_GetSysClockFreq+0x200>)
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	099b      	lsrs	r3, r3, #6
 801327c:	2200      	movs	r2, #0
 801327e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013280:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013288:	633b      	str	r3, [r7, #48]	@ 0x30
 801328a:	2300      	movs	r3, #0
 801328c:	637b      	str	r3, [r7, #52]	@ 0x34
 801328e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8013292:	4622      	mov	r2, r4
 8013294:	462b      	mov	r3, r5
 8013296:	f04f 0000 	mov.w	r0, #0
 801329a:	f04f 0100 	mov.w	r1, #0
 801329e:	0159      	lsls	r1, r3, #5
 80132a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80132a4:	0150      	lsls	r0, r2, #5
 80132a6:	4602      	mov	r2, r0
 80132a8:	460b      	mov	r3, r1
 80132aa:	4621      	mov	r1, r4
 80132ac:	1a51      	subs	r1, r2, r1
 80132ae:	6139      	str	r1, [r7, #16]
 80132b0:	4629      	mov	r1, r5
 80132b2:	eb63 0301 	sbc.w	r3, r3, r1
 80132b6:	617b      	str	r3, [r7, #20]
 80132b8:	f04f 0200 	mov.w	r2, #0
 80132bc:	f04f 0300 	mov.w	r3, #0
 80132c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80132c4:	4659      	mov	r1, fp
 80132c6:	018b      	lsls	r3, r1, #6
 80132c8:	4651      	mov	r1, sl
 80132ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80132ce:	4651      	mov	r1, sl
 80132d0:	018a      	lsls	r2, r1, #6
 80132d2:	4651      	mov	r1, sl
 80132d4:	ebb2 0801 	subs.w	r8, r2, r1
 80132d8:	4659      	mov	r1, fp
 80132da:	eb63 0901 	sbc.w	r9, r3, r1
 80132de:	f04f 0200 	mov.w	r2, #0
 80132e2:	f04f 0300 	mov.w	r3, #0
 80132e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80132ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80132ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80132f2:	4690      	mov	r8, r2
 80132f4:	4699      	mov	r9, r3
 80132f6:	4623      	mov	r3, r4
 80132f8:	eb18 0303 	adds.w	r3, r8, r3
 80132fc:	60bb      	str	r3, [r7, #8]
 80132fe:	462b      	mov	r3, r5
 8013300:	eb49 0303 	adc.w	r3, r9, r3
 8013304:	60fb      	str	r3, [r7, #12]
 8013306:	f04f 0200 	mov.w	r2, #0
 801330a:	f04f 0300 	mov.w	r3, #0
 801330e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013312:	4629      	mov	r1, r5
 8013314:	024b      	lsls	r3, r1, #9
 8013316:	4621      	mov	r1, r4
 8013318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801331c:	4621      	mov	r1, r4
 801331e:	024a      	lsls	r2, r1, #9
 8013320:	4610      	mov	r0, r2
 8013322:	4619      	mov	r1, r3
 8013324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013326:	2200      	movs	r2, #0
 8013328:	62bb      	str	r3, [r7, #40]	@ 0x28
 801332a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801332c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013330:	f7ed fcb2 	bl	8000c98 <__aeabi_uldivmod>
 8013334:	4602      	mov	r2, r0
 8013336:	460b      	mov	r3, r1
 8013338:	4613      	mov	r3, r2
 801333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801333c:	e058      	b.n	80133f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801333e:	4b38      	ldr	r3, [pc, #224]	@ (8013420 <HAL_RCC_GetSysClockFreq+0x200>)
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	099b      	lsrs	r3, r3, #6
 8013344:	2200      	movs	r2, #0
 8013346:	4618      	mov	r0, r3
 8013348:	4611      	mov	r1, r2
 801334a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801334e:	623b      	str	r3, [r7, #32]
 8013350:	2300      	movs	r3, #0
 8013352:	627b      	str	r3, [r7, #36]	@ 0x24
 8013354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013358:	4642      	mov	r2, r8
 801335a:	464b      	mov	r3, r9
 801335c:	f04f 0000 	mov.w	r0, #0
 8013360:	f04f 0100 	mov.w	r1, #0
 8013364:	0159      	lsls	r1, r3, #5
 8013366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801336a:	0150      	lsls	r0, r2, #5
 801336c:	4602      	mov	r2, r0
 801336e:	460b      	mov	r3, r1
 8013370:	4641      	mov	r1, r8
 8013372:	ebb2 0a01 	subs.w	sl, r2, r1
 8013376:	4649      	mov	r1, r9
 8013378:	eb63 0b01 	sbc.w	fp, r3, r1
 801337c:	f04f 0200 	mov.w	r2, #0
 8013380:	f04f 0300 	mov.w	r3, #0
 8013384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8013388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801338c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8013390:	ebb2 040a 	subs.w	r4, r2, sl
 8013394:	eb63 050b 	sbc.w	r5, r3, fp
 8013398:	f04f 0200 	mov.w	r2, #0
 801339c:	f04f 0300 	mov.w	r3, #0
 80133a0:	00eb      	lsls	r3, r5, #3
 80133a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80133a6:	00e2      	lsls	r2, r4, #3
 80133a8:	4614      	mov	r4, r2
 80133aa:	461d      	mov	r5, r3
 80133ac:	4643      	mov	r3, r8
 80133ae:	18e3      	adds	r3, r4, r3
 80133b0:	603b      	str	r3, [r7, #0]
 80133b2:	464b      	mov	r3, r9
 80133b4:	eb45 0303 	adc.w	r3, r5, r3
 80133b8:	607b      	str	r3, [r7, #4]
 80133ba:	f04f 0200 	mov.w	r2, #0
 80133be:	f04f 0300 	mov.w	r3, #0
 80133c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80133c6:	4629      	mov	r1, r5
 80133c8:	028b      	lsls	r3, r1, #10
 80133ca:	4621      	mov	r1, r4
 80133cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80133d0:	4621      	mov	r1, r4
 80133d2:	028a      	lsls	r2, r1, #10
 80133d4:	4610      	mov	r0, r2
 80133d6:	4619      	mov	r1, r3
 80133d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133da:	2200      	movs	r2, #0
 80133dc:	61bb      	str	r3, [r7, #24]
 80133de:	61fa      	str	r2, [r7, #28]
 80133e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80133e4:	f7ed fc58 	bl	8000c98 <__aeabi_uldivmod>
 80133e8:	4602      	mov	r2, r0
 80133ea:	460b      	mov	r3, r1
 80133ec:	4613      	mov	r3, r2
 80133ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80133f0:	4b0b      	ldr	r3, [pc, #44]	@ (8013420 <HAL_RCC_GetSysClockFreq+0x200>)
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	0c1b      	lsrs	r3, r3, #16
 80133f6:	f003 0303 	and.w	r3, r3, #3
 80133fa:	3301      	adds	r3, #1
 80133fc:	005b      	lsls	r3, r3, #1
 80133fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8013400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013404:	fbb2 f3f3 	udiv	r3, r2, r3
 8013408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801340a:	e002      	b.n	8013412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801340c:	4b05      	ldr	r3, [pc, #20]	@ (8013424 <HAL_RCC_GetSysClockFreq+0x204>)
 801340e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8013414:	4618      	mov	r0, r3
 8013416:	3750      	adds	r7, #80	@ 0x50
 8013418:	46bd      	mov	sp, r7
 801341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801341e:	bf00      	nop
 8013420:	40023800 	.word	0x40023800
 8013424:	00f42400 	.word	0x00f42400
 8013428:	007a1200 	.word	0x007a1200

0801342c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801342c:	b480      	push	{r7}
 801342e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013430:	4b03      	ldr	r3, [pc, #12]	@ (8013440 <HAL_RCC_GetHCLKFreq+0x14>)
 8013432:	681b      	ldr	r3, [r3, #0]
}
 8013434:	4618      	mov	r0, r3
 8013436:	46bd      	mov	sp, r7
 8013438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343c:	4770      	bx	lr
 801343e:	bf00      	nop
 8013440:	2000013c 	.word	0x2000013c

08013444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013448:	f7ff fff0 	bl	801342c <HAL_RCC_GetHCLKFreq>
 801344c:	4602      	mov	r2, r0
 801344e:	4b05      	ldr	r3, [pc, #20]	@ (8013464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013450:	689b      	ldr	r3, [r3, #8]
 8013452:	0a9b      	lsrs	r3, r3, #10
 8013454:	f003 0307 	and.w	r3, r3, #7
 8013458:	4903      	ldr	r1, [pc, #12]	@ (8013468 <HAL_RCC_GetPCLK1Freq+0x24>)
 801345a:	5ccb      	ldrb	r3, [r1, r3]
 801345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013460:	4618      	mov	r0, r3
 8013462:	bd80      	pop	{r7, pc}
 8013464:	40023800 	.word	0x40023800
 8013468:	08023964 	.word	0x08023964

0801346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013470:	f7ff ffdc 	bl	801342c <HAL_RCC_GetHCLKFreq>
 8013474:	4602      	mov	r2, r0
 8013476:	4b05      	ldr	r3, [pc, #20]	@ (801348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8013478:	689b      	ldr	r3, [r3, #8]
 801347a:	0b5b      	lsrs	r3, r3, #13
 801347c:	f003 0307 	and.w	r3, r3, #7
 8013480:	4903      	ldr	r1, [pc, #12]	@ (8013490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013482:	5ccb      	ldrb	r3, [r1, r3]
 8013484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013488:	4618      	mov	r0, r3
 801348a:	bd80      	pop	{r7, pc}
 801348c:	40023800 	.word	0x40023800
 8013490:	08023964 	.word	0x08023964

08013494 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b086      	sub	sp, #24
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801349c:	2300      	movs	r3, #0
 801349e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80134a0:	2300      	movs	r3, #0
 80134a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f003 0301 	and.w	r3, r3, #1
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d105      	bne.n	80134bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d038      	beq.n	801352e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80134bc:	4b68      	ldr	r3, [pc, #416]	@ (8013660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80134be:	2200      	movs	r2, #0
 80134c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80134c2:	f7fb fc33 	bl	800ed2c <HAL_GetTick>
 80134c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80134c8:	e008      	b.n	80134dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80134ca:	f7fb fc2f 	bl	800ed2c <HAL_GetTick>
 80134ce:	4602      	mov	r2, r0
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	1ad3      	subs	r3, r2, r3
 80134d4:	2b02      	cmp	r3, #2
 80134d6:	d901      	bls.n	80134dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80134d8:	2303      	movs	r3, #3
 80134da:	e0bd      	b.n	8013658 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80134dc:	4b61      	ldr	r3, [pc, #388]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d1f0      	bne.n	80134ca <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	685a      	ldr	r2, [r3, #4]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	019b      	lsls	r3, r3, #6
 80134f2:	431a      	orrs	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	071b      	lsls	r3, r3, #28
 80134fa:	495a      	ldr	r1, [pc, #360]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80134fc:	4313      	orrs	r3, r2
 80134fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013502:	4b57      	ldr	r3, [pc, #348]	@ (8013660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8013504:	2201      	movs	r2, #1
 8013506:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013508:	f7fb fc10 	bl	800ed2c <HAL_GetTick>
 801350c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801350e:	e008      	b.n	8013522 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8013510:	f7fb fc0c 	bl	800ed2c <HAL_GetTick>
 8013514:	4602      	mov	r2, r0
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	2b02      	cmp	r3, #2
 801351c:	d901      	bls.n	8013522 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801351e:	2303      	movs	r3, #3
 8013520:	e09a      	b.n	8013658 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013522:	4b50      	ldr	r3, [pc, #320]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801352a:	2b00      	cmp	r3, #0
 801352c:	d0f0      	beq.n	8013510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f003 0302 	and.w	r3, r3, #2
 8013536:	2b00      	cmp	r3, #0
 8013538:	f000 8083 	beq.w	8013642 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801353c:	2300      	movs	r3, #0
 801353e:	60fb      	str	r3, [r7, #12]
 8013540:	4b48      	ldr	r3, [pc, #288]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013544:	4a47      	ldr	r2, [pc, #284]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801354a:	6413      	str	r3, [r2, #64]	@ 0x40
 801354c:	4b45      	ldr	r3, [pc, #276]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013554:	60fb      	str	r3, [r7, #12]
 8013556:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013558:	4b43      	ldr	r3, [pc, #268]	@ (8013668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4a42      	ldr	r2, [pc, #264]	@ (8013668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013562:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013564:	f7fb fbe2 	bl	800ed2c <HAL_GetTick>
 8013568:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801356a:	e008      	b.n	801357e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801356c:	f7fb fbde 	bl	800ed2c <HAL_GetTick>
 8013570:	4602      	mov	r2, r0
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	1ad3      	subs	r3, r2, r3
 8013576:	2b02      	cmp	r3, #2
 8013578:	d901      	bls.n	801357e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 801357a:	2303      	movs	r3, #3
 801357c:	e06c      	b.n	8013658 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801357e:	4b3a      	ldr	r3, [pc, #232]	@ (8013668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013586:	2b00      	cmp	r3, #0
 8013588:	d0f0      	beq.n	801356c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801358a:	4b36      	ldr	r3, [pc, #216]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801358e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013592:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d02f      	beq.n	80135fa <HAL_RCCEx_PeriphCLKConfig+0x166>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	691b      	ldr	r3, [r3, #16]
 801359e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80135a2:	693a      	ldr	r2, [r7, #16]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d028      	beq.n	80135fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80135a8:	4b2e      	ldr	r3, [pc, #184]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80135b0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80135b2:	4b2e      	ldr	r3, [pc, #184]	@ (801366c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80135b4:	2201      	movs	r2, #1
 80135b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80135b8:	4b2c      	ldr	r3, [pc, #176]	@ (801366c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80135be:	4a29      	ldr	r2, [pc, #164]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80135c4:	4b27      	ldr	r3, [pc, #156]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135c8:	f003 0301 	and.w	r3, r3, #1
 80135cc:	2b01      	cmp	r3, #1
 80135ce:	d114      	bne.n	80135fa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80135d0:	f7fb fbac 	bl	800ed2c <HAL_GetTick>
 80135d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80135d6:	e00a      	b.n	80135ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80135d8:	f7fb fba8 	bl	800ed2c <HAL_GetTick>
 80135dc:	4602      	mov	r2, r0
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d901      	bls.n	80135ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80135ea:	2303      	movs	r3, #3
 80135ec:	e034      	b.n	8013658 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80135ee:	4b1d      	ldr	r3, [pc, #116]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135f2:	f003 0302 	and.w	r3, r3, #2
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d0ee      	beq.n	80135d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	691b      	ldr	r3, [r3, #16]
 80135fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013606:	d10d      	bne.n	8013624 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8013608:	4b16      	ldr	r3, [pc, #88]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	691b      	ldr	r3, [r3, #16]
 8013614:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801361c:	4911      	ldr	r1, [pc, #68]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801361e:	4313      	orrs	r3, r2
 8013620:	608b      	str	r3, [r1, #8]
 8013622:	e005      	b.n	8013630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8013624:	4b0f      	ldr	r3, [pc, #60]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013626:	689b      	ldr	r3, [r3, #8]
 8013628:	4a0e      	ldr	r2, [pc, #56]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801362a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 801362e:	6093      	str	r3, [r2, #8]
 8013630:	4b0c      	ldr	r3, [pc, #48]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013632:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	691b      	ldr	r3, [r3, #16]
 8013638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801363c:	4909      	ldr	r1, [pc, #36]	@ (8013664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801363e:	4313      	orrs	r3, r2
 8013640:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f003 0308 	and.w	r3, r3, #8
 801364a:	2b00      	cmp	r3, #0
 801364c:	d003      	beq.n	8013656 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	7d1a      	ldrb	r2, [r3, #20]
 8013652:	4b07      	ldr	r3, [pc, #28]	@ (8013670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8013654:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8013656:	2300      	movs	r3, #0
}
 8013658:	4618      	mov	r0, r3
 801365a:	3718      	adds	r7, #24
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}
 8013660:	42470068 	.word	0x42470068
 8013664:	40023800 	.word	0x40023800
 8013668:	40007000 	.word	0x40007000
 801366c:	42470e40 	.word	0x42470e40
 8013670:	424711e0 	.word	0x424711e0

08013674 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801367c:	2301      	movs	r3, #1
 801367e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d101      	bne.n	801368a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8013686:	2301      	movs	r3, #1
 8013688:	e073      	b.n	8013772 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	7f5b      	ldrb	r3, [r3, #29]
 801368e:	b2db      	uxtb	r3, r3
 8013690:	2b00      	cmp	r3, #0
 8013692:	d105      	bne.n	80136a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2200      	movs	r2, #0
 8013698:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f7f1 fe5c 	bl	8005358 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2202      	movs	r2, #2
 80136a4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	f003 0310 	and.w	r3, r3, #16
 80136b0:	2b10      	cmp	r3, #16
 80136b2:	d055      	beq.n	8013760 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	22ca      	movs	r2, #202	@ 0xca
 80136ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2253      	movs	r2, #83	@ 0x53
 80136c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 f99d 	bl	8013a04 <RTC_EnterInitMode>
 80136ca:	4603      	mov	r3, r0
 80136cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80136ce:	7bfb      	ldrb	r3, [r7, #15]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d12c      	bne.n	801372e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	689b      	ldr	r3, [r3, #8]
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	6812      	ldr	r2, [r2, #0]
 80136de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80136e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80136e6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	6899      	ldr	r1, [r3, #8]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	685a      	ldr	r2, [r3, #4]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	691b      	ldr	r3, [r3, #16]
 80136f6:	431a      	orrs	r2, r3
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	695b      	ldr	r3, [r3, #20]
 80136fc:	431a      	orrs	r2, r3
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	430a      	orrs	r2, r1
 8013704:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	68d2      	ldr	r2, [r2, #12]
 801370e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	6919      	ldr	r1, [r3, #16]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	041a      	lsls	r2, r3, #16
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	430a      	orrs	r2, r1
 8013722:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 f9a4 	bl	8013a72 <RTC_ExitInitMode>
 801372a:	4603      	mov	r3, r0
 801372c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801372e:	7bfb      	ldrb	r3, [r7, #15]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d110      	bne.n	8013756 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013742:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	699a      	ldr	r2, [r3, #24]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	430a      	orrs	r2, r1
 8013754:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	22ff      	movs	r2, #255	@ 0xff
 801375c:	625a      	str	r2, [r3, #36]	@ 0x24
 801375e:	e001      	b.n	8013764 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8013760:	2300      	movs	r3, #0
 8013762:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8013764:	7bfb      	ldrb	r3, [r7, #15]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d102      	bne.n	8013770 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2201      	movs	r2, #1
 801376e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8013770:	7bfb      	ldrb	r3, [r7, #15]
}
 8013772:	4618      	mov	r0, r3
 8013774:	3710      	adds	r7, #16
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}

0801377a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801377a:	b590      	push	{r4, r7, lr}
 801377c:	b087      	sub	sp, #28
 801377e:	af00      	add	r7, sp, #0
 8013780:	60f8      	str	r0, [r7, #12]
 8013782:	60b9      	str	r1, [r7, #8]
 8013784:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013786:	2300      	movs	r3, #0
 8013788:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	7f1b      	ldrb	r3, [r3, #28]
 801378e:	2b01      	cmp	r3, #1
 8013790:	d101      	bne.n	8013796 <HAL_RTC_SetTime+0x1c>
 8013792:	2302      	movs	r3, #2
 8013794:	e087      	b.n	80138a6 <HAL_RTC_SetTime+0x12c>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2201      	movs	r2, #1
 801379a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2202      	movs	r2, #2
 80137a0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d126      	bne.n	80137f6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	689b      	ldr	r3, [r3, #8]
 80137ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d102      	bne.n	80137bc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	2200      	movs	r2, #0
 80137ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f000 f97b 	bl	8013abc <RTC_ByteToBcd2>
 80137c6:	4603      	mov	r3, r0
 80137c8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	785b      	ldrb	r3, [r3, #1]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 f974 	bl	8013abc <RTC_ByteToBcd2>
 80137d4:	4603      	mov	r3, r0
 80137d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80137d8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	789b      	ldrb	r3, [r3, #2]
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 f96c 	bl	8013abc <RTC_ByteToBcd2>
 80137e4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80137e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	78db      	ldrb	r3, [r3, #3]
 80137ee:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80137f0:	4313      	orrs	r3, r2
 80137f2:	617b      	str	r3, [r7, #20]
 80137f4:	e018      	b.n	8013828 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	689b      	ldr	r3, [r3, #8]
 80137fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013800:	2b00      	cmp	r3, #0
 8013802:	d102      	bne.n	801380a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	2200      	movs	r2, #0
 8013808:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	785b      	ldrb	r3, [r3, #1]
 8013814:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013816:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8013818:	68ba      	ldr	r2, [r7, #8]
 801381a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801381c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	78db      	ldrb	r3, [r3, #3]
 8013822:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013824:	4313      	orrs	r3, r2
 8013826:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	22ca      	movs	r2, #202	@ 0xca
 801382e:	625a      	str	r2, [r3, #36]	@ 0x24
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2253      	movs	r2, #83	@ 0x53
 8013836:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f000 f8e3 	bl	8013a04 <RTC_EnterInitMode>
 801383e:	4603      	mov	r3, r0
 8013840:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8013842:	7cfb      	ldrb	r3, [r7, #19]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d120      	bne.n	801388a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8013852:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8013856:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	689a      	ldr	r2, [r3, #8]
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013866:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	6899      	ldr	r1, [r3, #8]
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	68da      	ldr	r2, [r3, #12]
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	691b      	ldr	r3, [r3, #16]
 8013876:	431a      	orrs	r2, r3
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	430a      	orrs	r2, r1
 801387e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013880:	68f8      	ldr	r0, [r7, #12]
 8013882:	f000 f8f6 	bl	8013a72 <RTC_ExitInitMode>
 8013886:	4603      	mov	r3, r0
 8013888:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 801388a:	7cfb      	ldrb	r3, [r7, #19]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d102      	bne.n	8013896 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2201      	movs	r2, #1
 8013894:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	22ff      	movs	r2, #255	@ 0xff
 801389c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	2200      	movs	r2, #0
 80138a2:	771a      	strb	r2, [r3, #28]

  return status;
 80138a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	371c      	adds	r7, #28
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd90      	pop	{r4, r7, pc}

080138ae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80138ae:	b590      	push	{r4, r7, lr}
 80138b0:	b087      	sub	sp, #28
 80138b2:	af00      	add	r7, sp, #0
 80138b4:	60f8      	str	r0, [r7, #12]
 80138b6:	60b9      	str	r1, [r7, #8]
 80138b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80138ba:	2300      	movs	r3, #0
 80138bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	7f1b      	ldrb	r3, [r3, #28]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d101      	bne.n	80138ca <HAL_RTC_SetDate+0x1c>
 80138c6:	2302      	movs	r3, #2
 80138c8:	e071      	b.n	80139ae <HAL_RTC_SetDate+0x100>
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2201      	movs	r2, #1
 80138ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2202      	movs	r2, #2
 80138d4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d10e      	bne.n	80138fa <HAL_RTC_SetDate+0x4c>
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	785b      	ldrb	r3, [r3, #1]
 80138e0:	f003 0310 	and.w	r3, r3, #16
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d008      	beq.n	80138fa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	785b      	ldrb	r3, [r3, #1]
 80138ec:	f023 0310 	bic.w	r3, r3, #16
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	330a      	adds	r3, #10
 80138f4:	b2da      	uxtb	r2, r3
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d11c      	bne.n	801393a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	78db      	ldrb	r3, [r3, #3]
 8013904:	4618      	mov	r0, r3
 8013906:	f000 f8d9 	bl	8013abc <RTC_ByteToBcd2>
 801390a:	4603      	mov	r3, r0
 801390c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	785b      	ldrb	r3, [r3, #1]
 8013912:	4618      	mov	r0, r3
 8013914:	f000 f8d2 	bl	8013abc <RTC_ByteToBcd2>
 8013918:	4603      	mov	r3, r0
 801391a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801391c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	789b      	ldrb	r3, [r3, #2]
 8013922:	4618      	mov	r0, r3
 8013924:	f000 f8ca 	bl	8013abc <RTC_ByteToBcd2>
 8013928:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801392a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013934:	4313      	orrs	r3, r2
 8013936:	617b      	str	r3, [r7, #20]
 8013938:	e00e      	b.n	8013958 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	78db      	ldrb	r3, [r3, #3]
 801393e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	785b      	ldrb	r3, [r3, #1]
 8013944:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013946:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801394c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013954:	4313      	orrs	r3, r2
 8013956:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	22ca      	movs	r2, #202	@ 0xca
 801395e:	625a      	str	r2, [r3, #36]	@ 0x24
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2253      	movs	r2, #83	@ 0x53
 8013966:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f000 f84b 	bl	8013a04 <RTC_EnterInitMode>
 801396e:	4603      	mov	r3, r0
 8013970:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8013972:	7cfb      	ldrb	r3, [r7, #19]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10c      	bne.n	8013992 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013982:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013986:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f000 f872 	bl	8013a72 <RTC_ExitInitMode>
 801398e:	4603      	mov	r3, r0
 8013990:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8013992:	7cfb      	ldrb	r3, [r7, #19]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2201      	movs	r2, #1
 801399c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	22ff      	movs	r2, #255	@ 0xff
 80139a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2200      	movs	r2, #0
 80139aa:	771a      	strb	r2, [r3, #28]

  return status;
 80139ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	371c      	adds	r7, #28
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd90      	pop	{r4, r7, pc}
	...

080139b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80139c0:	2300      	movs	r3, #0
 80139c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	4a0d      	ldr	r2, [pc, #52]	@ (8013a00 <HAL_RTC_WaitForSynchro+0x48>)
 80139ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80139cc:	f7fb f9ae 	bl	800ed2c <HAL_GetTick>
 80139d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80139d2:	e009      	b.n	80139e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80139d4:	f7fb f9aa 	bl	800ed2c <HAL_GetTick>
 80139d8:	4602      	mov	r2, r0
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	1ad3      	subs	r3, r2, r3
 80139de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80139e2:	d901      	bls.n	80139e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80139e4:	2303      	movs	r3, #3
 80139e6:	e007      	b.n	80139f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	f003 0320 	and.w	r3, r3, #32
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d0ee      	beq.n	80139d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80139f6:	2300      	movs	r3, #0
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	00013f5f 	.word	0x00013f5f

08013a04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d122      	bne.n	8013a68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	68da      	ldr	r2, [r3, #12]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8013a30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013a32:	f7fb f97b 	bl	800ed2c <HAL_GetTick>
 8013a36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8013a38:	e00c      	b.n	8013a54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013a3a:	f7fb f977 	bl	800ed2c <HAL_GetTick>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013a48:	d904      	bls.n	8013a54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2204      	movs	r2, #4
 8013a4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8013a50:	2301      	movs	r3, #1
 8013a52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d102      	bne.n	8013a68 <RTC_EnterInitMode+0x64>
 8013a62:	7bfb      	ldrb	r3, [r7, #15]
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d1e8      	bne.n	8013a3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8013a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013a72:	b580      	push	{r7, lr}
 8013a74:	b084      	sub	sp, #16
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	68da      	ldr	r2, [r3, #12]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013a8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	689b      	ldr	r3, [r3, #8]
 8013a94:	f003 0320 	and.w	r3, r3, #32
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d10a      	bne.n	8013ab2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7ff ff8b 	bl	80139b8 <HAL_RTC_WaitForSynchro>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d004      	beq.n	8013ab2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2204      	movs	r2, #4
 8013aac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8013ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3710      	adds	r7, #16
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b085      	sub	sp, #20
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8013aca:	e005      	b.n	8013ad8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	3301      	adds	r3, #1
 8013ad0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8013ad2:	79fb      	ldrb	r3, [r7, #7]
 8013ad4:	3b0a      	subs	r3, #10
 8013ad6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8013ad8:	79fb      	ldrb	r3, [r7, #7]
 8013ada:	2b09      	cmp	r3, #9
 8013adc:	d8f6      	bhi.n	8013acc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	011b      	lsls	r3, r3, #4
 8013ae4:	b2da      	uxtb	r2, r3
 8013ae6:	79fb      	ldrb	r3, [r7, #7]
 8013ae8:	4313      	orrs	r3, r2
 8013aea:	b2db      	uxtb	r3, r3
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3714      	adds	r7, #20
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d101      	bne.n	8013b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013b06:	2301      	movs	r3, #1
 8013b08:	e041      	b.n	8013b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d106      	bne.n	8013b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7f1 fc68 	bl	80053f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2202      	movs	r2, #2
 8013b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	3304      	adds	r3, #4
 8013b34:	4619      	mov	r1, r3
 8013b36:	4610      	mov	r0, r2
 8013b38:	f000 fc2a 	bl	8014390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2201      	movs	r2, #1
 8013b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2201      	movs	r2, #1
 8013b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2201      	movs	r2, #1
 8013b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2201      	movs	r2, #1
 8013b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2201      	movs	r2, #1
 8013b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2201      	movs	r2, #1
 8013b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2201      	movs	r2, #1
 8013b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2201      	movs	r2, #1
 8013b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2201      	movs	r2, #1
 8013b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013b8c:	2300      	movs	r3, #0
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3708      	adds	r7, #8
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b085      	sub	sp, #20
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d001      	beq.n	8013bb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8013bac:	2301      	movs	r3, #1
 8013bae:	e03c      	b.n	8013c2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2202      	movs	r2, #2
 8013bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8013c38 <HAL_TIM_Base_Start+0xa0>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d018      	beq.n	8013bf4 <HAL_TIM_Base_Start+0x5c>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bca:	d013      	beq.n	8013bf4 <HAL_TIM_Base_Start+0x5c>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8013c3c <HAL_TIM_Base_Start+0xa4>)
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d00e      	beq.n	8013bf4 <HAL_TIM_Base_Start+0x5c>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4a19      	ldr	r2, [pc, #100]	@ (8013c40 <HAL_TIM_Base_Start+0xa8>)
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	d009      	beq.n	8013bf4 <HAL_TIM_Base_Start+0x5c>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	4a17      	ldr	r2, [pc, #92]	@ (8013c44 <HAL_TIM_Base_Start+0xac>)
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d004      	beq.n	8013bf4 <HAL_TIM_Base_Start+0x5c>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4a16      	ldr	r2, [pc, #88]	@ (8013c48 <HAL_TIM_Base_Start+0xb0>)
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d111      	bne.n	8013c18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	f003 0307 	and.w	r3, r3, #7
 8013bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2b06      	cmp	r3, #6
 8013c04:	d010      	beq.n	8013c28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f042 0201 	orr.w	r2, r2, #1
 8013c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c16:	e007      	b.n	8013c28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f042 0201 	orr.w	r2, r2, #1
 8013c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3714      	adds	r7, #20
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr
 8013c36:	bf00      	nop
 8013c38:	40010000 	.word	0x40010000
 8013c3c:	40000400 	.word	0x40000400
 8013c40:	40000800 	.word	0x40000800
 8013c44:	40000c00 	.word	0x40000c00
 8013c48:	40014000 	.word	0x40014000

08013c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d101      	bne.n	8013c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	e041      	b.n	8013ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013c64:	b2db      	uxtb	r3, r3
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7f1 fb9c 	bl	80053b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2202      	movs	r2, #2
 8013c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3304      	adds	r3, #4
 8013c88:	4619      	mov	r1, r3
 8013c8a:	4610      	mov	r0, r2
 8013c8c:	f000 fb80 	bl	8014390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2201      	movs	r2, #1
 8013c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2201      	movs	r2, #1
 8013cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2201      	movs	r2, #1
 8013cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2201      	movs	r2, #1
 8013ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2201      	movs	r2, #1
 8013cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013ce0:	2300      	movs	r3, #0
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
	...

08013cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d109      	bne.n	8013d10 <HAL_TIM_PWM_Start+0x24>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	bf14      	ite	ne
 8013d08:	2301      	movne	r3, #1
 8013d0a:	2300      	moveq	r3, #0
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	e022      	b.n	8013d56 <HAL_TIM_PWM_Start+0x6a>
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	2b04      	cmp	r3, #4
 8013d14:	d109      	bne.n	8013d2a <HAL_TIM_PWM_Start+0x3e>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	bf14      	ite	ne
 8013d22:	2301      	movne	r3, #1
 8013d24:	2300      	moveq	r3, #0
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	e015      	b.n	8013d56 <HAL_TIM_PWM_Start+0x6a>
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	2b08      	cmp	r3, #8
 8013d2e:	d109      	bne.n	8013d44 <HAL_TIM_PWM_Start+0x58>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	bf14      	ite	ne
 8013d3c:	2301      	movne	r3, #1
 8013d3e:	2300      	moveq	r3, #0
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	e008      	b.n	8013d56 <HAL_TIM_PWM_Start+0x6a>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	bf14      	ite	ne
 8013d50:	2301      	movne	r3, #1
 8013d52:	2300      	moveq	r3, #0
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e068      	b.n	8013e30 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d104      	bne.n	8013d6e <HAL_TIM_PWM_Start+0x82>
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2202      	movs	r2, #2
 8013d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013d6c:	e013      	b.n	8013d96 <HAL_TIM_PWM_Start+0xaa>
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	2b04      	cmp	r3, #4
 8013d72:	d104      	bne.n	8013d7e <HAL_TIM_PWM_Start+0x92>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2202      	movs	r2, #2
 8013d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013d7c:	e00b      	b.n	8013d96 <HAL_TIM_PWM_Start+0xaa>
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	2b08      	cmp	r3, #8
 8013d82:	d104      	bne.n	8013d8e <HAL_TIM_PWM_Start+0xa2>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2202      	movs	r2, #2
 8013d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013d8c:	e003      	b.n	8013d96 <HAL_TIM_PWM_Start+0xaa>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2202      	movs	r2, #2
 8013d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f000 fda8 	bl	80148f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	4a23      	ldr	r2, [pc, #140]	@ (8013e38 <HAL_TIM_PWM_Start+0x14c>)
 8013daa:	4293      	cmp	r3, r2
 8013dac:	d107      	bne.n	8013dbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8013e38 <HAL_TIM_PWM_Start+0x14c>)
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d018      	beq.n	8013dfa <HAL_TIM_PWM_Start+0x10e>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013dd0:	d013      	beq.n	8013dfa <HAL_TIM_PWM_Start+0x10e>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	4a19      	ldr	r2, [pc, #100]	@ (8013e3c <HAL_TIM_PWM_Start+0x150>)
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	d00e      	beq.n	8013dfa <HAL_TIM_PWM_Start+0x10e>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4a17      	ldr	r2, [pc, #92]	@ (8013e40 <HAL_TIM_PWM_Start+0x154>)
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d009      	beq.n	8013dfa <HAL_TIM_PWM_Start+0x10e>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	4a16      	ldr	r2, [pc, #88]	@ (8013e44 <HAL_TIM_PWM_Start+0x158>)
 8013dec:	4293      	cmp	r3, r2
 8013dee:	d004      	beq.n	8013dfa <HAL_TIM_PWM_Start+0x10e>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4a14      	ldr	r2, [pc, #80]	@ (8013e48 <HAL_TIM_PWM_Start+0x15c>)
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d111      	bne.n	8013e1e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	689b      	ldr	r3, [r3, #8]
 8013e00:	f003 0307 	and.w	r3, r3, #7
 8013e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2b06      	cmp	r3, #6
 8013e0a:	d010      	beq.n	8013e2e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	f042 0201 	orr.w	r2, r2, #1
 8013e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e1c:	e007      	b.n	8013e2e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f042 0201 	orr.w	r2, r2, #1
 8013e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	40010000 	.word	0x40010000
 8013e3c:	40000400 	.word	0x40000400
 8013e40:	40000800 	.word	0x40000800
 8013e44:	40000c00 	.word	0x40000c00
 8013e48:	40014000 	.word	0x40014000

08013e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	68db      	ldr	r3, [r3, #12]
 8013e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	f003 0302 	and.w	r3, r3, #2
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d020      	beq.n	8013eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f003 0302 	and.w	r3, r3, #2
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d01b      	beq.n	8013eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	f06f 0202 	mvn.w	r2, #2
 8013e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2201      	movs	r2, #1
 8013e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	699b      	ldr	r3, [r3, #24]
 8013e8e:	f003 0303 	and.w	r3, r3, #3
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d003      	beq.n	8013e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f000 fa5b 	bl	8014352 <HAL_TIM_IC_CaptureCallback>
 8013e9c:	e005      	b.n	8013eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 fa4d 	bl	801433e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f000 fa5e 	bl	8014366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2200      	movs	r2, #0
 8013eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	f003 0304 	and.w	r3, r3, #4
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d020      	beq.n	8013efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f003 0304 	and.w	r3, r3, #4
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d01b      	beq.n	8013efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f06f 0204 	mvn.w	r2, #4
 8013ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2202      	movs	r2, #2
 8013ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	699b      	ldr	r3, [r3, #24]
 8013eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d003      	beq.n	8013eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fa35 	bl	8014352 <HAL_TIM_IC_CaptureCallback>
 8013ee8:	e005      	b.n	8013ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f000 fa27 	bl	801433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f000 fa38 	bl	8014366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	f003 0308 	and.w	r3, r3, #8
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d020      	beq.n	8013f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f003 0308 	and.w	r3, r3, #8
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d01b      	beq.n	8013f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	f06f 0208 	mvn.w	r2, #8
 8013f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2204      	movs	r2, #4
 8013f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	69db      	ldr	r3, [r3, #28]
 8013f26:	f003 0303 	and.w	r3, r3, #3
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d003      	beq.n	8013f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 fa0f 	bl	8014352 <HAL_TIM_IC_CaptureCallback>
 8013f34:	e005      	b.n	8013f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 fa01 	bl	801433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f000 fa12 	bl	8014366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2200      	movs	r2, #0
 8013f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	f003 0310 	and.w	r3, r3, #16
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d020      	beq.n	8013f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	f003 0310 	and.w	r3, r3, #16
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d01b      	beq.n	8013f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f06f 0210 	mvn.w	r2, #16
 8013f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2208      	movs	r2, #8
 8013f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	69db      	ldr	r3, [r3, #28]
 8013f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d003      	beq.n	8013f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f000 f9e9 	bl	8014352 <HAL_TIM_IC_CaptureCallback>
 8013f80:	e005      	b.n	8013f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 f9db 	bl	801433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 f9ec 	bl	8014366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2200      	movs	r2, #0
 8013f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	f003 0301 	and.w	r3, r3, #1
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00c      	beq.n	8013fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d007      	beq.n	8013fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	f06f 0201 	mvn.w	r2, #1
 8013fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f001 fbc4 	bl	8015740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00c      	beq.n	8013fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d007      	beq.n	8013fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8013fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f000 fd7c 	bl	8014ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00c      	beq.n	8014000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d007      	beq.n	8014000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8013ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f000 f9bd 	bl	801437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	f003 0320 	and.w	r3, r3, #32
 8014006:	2b00      	cmp	r3, #0
 8014008:	d00c      	beq.n	8014024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	f003 0320 	and.w	r3, r3, #32
 8014010:	2b00      	cmp	r3, #0
 8014012:	d007      	beq.n	8014024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	f06f 0220 	mvn.w	r2, #32
 801401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f000 fd4e 	bl	8014ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014024:	bf00      	nop
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014038:	2300      	movs	r3, #0
 801403a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014042:	2b01      	cmp	r3, #1
 8014044:	d101      	bne.n	801404a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014046:	2302      	movs	r3, #2
 8014048:	e0ae      	b.n	80141a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2201      	movs	r2, #1
 801404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b0c      	cmp	r3, #12
 8014056:	f200 809f 	bhi.w	8014198 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801405a:	a201      	add	r2, pc, #4	@ (adr r2, 8014060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014060:	08014095 	.word	0x08014095
 8014064:	08014199 	.word	0x08014199
 8014068:	08014199 	.word	0x08014199
 801406c:	08014199 	.word	0x08014199
 8014070:	080140d5 	.word	0x080140d5
 8014074:	08014199 	.word	0x08014199
 8014078:	08014199 	.word	0x08014199
 801407c:	08014199 	.word	0x08014199
 8014080:	08014117 	.word	0x08014117
 8014084:	08014199 	.word	0x08014199
 8014088:	08014199 	.word	0x08014199
 801408c:	08014199 	.word	0x08014199
 8014090:	08014157 	.word	0x08014157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	68b9      	ldr	r1, [r7, #8]
 801409a:	4618      	mov	r0, r3
 801409c:	f000 fa04 	bl	80144a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	699a      	ldr	r2, [r3, #24]
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	f042 0208 	orr.w	r2, r2, #8
 80140ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	699a      	ldr	r2, [r3, #24]
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	f022 0204 	bic.w	r2, r2, #4
 80140be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	6999      	ldr	r1, [r3, #24]
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	691a      	ldr	r2, [r3, #16]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	430a      	orrs	r2, r1
 80140d0:	619a      	str	r2, [r3, #24]
      break;
 80140d2:	e064      	b.n	801419e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	68b9      	ldr	r1, [r7, #8]
 80140da:	4618      	mov	r0, r3
 80140dc:	f000 fa4a 	bl	8014574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	699a      	ldr	r2, [r3, #24]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80140ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	699a      	ldr	r2, [r3, #24]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80140fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	6999      	ldr	r1, [r3, #24]
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	021a      	lsls	r2, r3, #8
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	430a      	orrs	r2, r1
 8014112:	619a      	str	r2, [r3, #24]
      break;
 8014114:	e043      	b.n	801419e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	68b9      	ldr	r1, [r7, #8]
 801411c:	4618      	mov	r0, r3
 801411e:	f000 fa95 	bl	801464c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	69da      	ldr	r2, [r3, #28]
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	f042 0208 	orr.w	r2, r2, #8
 8014130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	69da      	ldr	r2, [r3, #28]
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	f022 0204 	bic.w	r2, r2, #4
 8014140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	69d9      	ldr	r1, [r3, #28]
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	691a      	ldr	r2, [r3, #16]
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	430a      	orrs	r2, r1
 8014152:	61da      	str	r2, [r3, #28]
      break;
 8014154:	e023      	b.n	801419e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	68b9      	ldr	r1, [r7, #8]
 801415c:	4618      	mov	r0, r3
 801415e:	f000 fadf 	bl	8014720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	69da      	ldr	r2, [r3, #28]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	69da      	ldr	r2, [r3, #28]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8014180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	69d9      	ldr	r1, [r3, #28]
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	021a      	lsls	r2, r3, #8
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	430a      	orrs	r2, r1
 8014194:	61da      	str	r2, [r3, #28]
      break;
 8014196:	e002      	b.n	801419e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014198:	2301      	movs	r3, #1
 801419a:	75fb      	strb	r3, [r7, #23]
      break;
 801419c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2200      	movs	r2, #0
 80141a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80141a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3718      	adds	r7, #24
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80141ba:	2300      	movs	r3, #0
 80141bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d101      	bne.n	80141cc <HAL_TIM_ConfigClockSource+0x1c>
 80141c8:	2302      	movs	r3, #2
 80141ca:	e0b4      	b.n	8014336 <HAL_TIM_ConfigClockSource+0x186>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2202      	movs	r2, #2
 80141d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80141ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80141f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	68ba      	ldr	r2, [r7, #8]
 80141fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014204:	d03e      	beq.n	8014284 <HAL_TIM_ConfigClockSource+0xd4>
 8014206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801420a:	f200 8087 	bhi.w	801431c <HAL_TIM_ConfigClockSource+0x16c>
 801420e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014212:	f000 8086 	beq.w	8014322 <HAL_TIM_ConfigClockSource+0x172>
 8014216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801421a:	d87f      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 801421c:	2b70      	cmp	r3, #112	@ 0x70
 801421e:	d01a      	beq.n	8014256 <HAL_TIM_ConfigClockSource+0xa6>
 8014220:	2b70      	cmp	r3, #112	@ 0x70
 8014222:	d87b      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 8014224:	2b60      	cmp	r3, #96	@ 0x60
 8014226:	d050      	beq.n	80142ca <HAL_TIM_ConfigClockSource+0x11a>
 8014228:	2b60      	cmp	r3, #96	@ 0x60
 801422a:	d877      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 801422c:	2b50      	cmp	r3, #80	@ 0x50
 801422e:	d03c      	beq.n	80142aa <HAL_TIM_ConfigClockSource+0xfa>
 8014230:	2b50      	cmp	r3, #80	@ 0x50
 8014232:	d873      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 8014234:	2b40      	cmp	r3, #64	@ 0x40
 8014236:	d058      	beq.n	80142ea <HAL_TIM_ConfigClockSource+0x13a>
 8014238:	2b40      	cmp	r3, #64	@ 0x40
 801423a:	d86f      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 801423c:	2b30      	cmp	r3, #48	@ 0x30
 801423e:	d064      	beq.n	801430a <HAL_TIM_ConfigClockSource+0x15a>
 8014240:	2b30      	cmp	r3, #48	@ 0x30
 8014242:	d86b      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 8014244:	2b20      	cmp	r3, #32
 8014246:	d060      	beq.n	801430a <HAL_TIM_ConfigClockSource+0x15a>
 8014248:	2b20      	cmp	r3, #32
 801424a:	d867      	bhi.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
 801424c:	2b00      	cmp	r3, #0
 801424e:	d05c      	beq.n	801430a <HAL_TIM_ConfigClockSource+0x15a>
 8014250:	2b10      	cmp	r3, #16
 8014252:	d05a      	beq.n	801430a <HAL_TIM_ConfigClockSource+0x15a>
 8014254:	e062      	b.n	801431c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014266:	f000 fb25 	bl	80148b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	689b      	ldr	r3, [r3, #8]
 8014270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8014278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	68ba      	ldr	r2, [r7, #8]
 8014280:	609a      	str	r2, [r3, #8]
      break;
 8014282:	e04f      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014294:	f000 fb0e 	bl	80148b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	689a      	ldr	r2, [r3, #8]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80142a6:	609a      	str	r2, [r3, #8]
      break;
 80142a8:	e03c      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80142b6:	461a      	mov	r2, r3
 80142b8:	f000 fa82 	bl	80147c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2150      	movs	r1, #80	@ 0x50
 80142c2:	4618      	mov	r0, r3
 80142c4:	f000 fadb 	bl	801487e <TIM_ITRx_SetConfig>
      break;
 80142c8:	e02c      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80142d6:	461a      	mov	r2, r3
 80142d8:	f000 faa1 	bl	801481e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2160      	movs	r1, #96	@ 0x60
 80142e2:	4618      	mov	r0, r3
 80142e4:	f000 facb 	bl	801487e <TIM_ITRx_SetConfig>
      break;
 80142e8:	e01c      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80142f6:	461a      	mov	r2, r3
 80142f8:	f000 fa62 	bl	80147c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2140      	movs	r1, #64	@ 0x40
 8014302:	4618      	mov	r0, r3
 8014304:	f000 fabb 	bl	801487e <TIM_ITRx_SetConfig>
      break;
 8014308:	e00c      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681a      	ldr	r2, [r3, #0]
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	4619      	mov	r1, r3
 8014314:	4610      	mov	r0, r2
 8014316:	f000 fab2 	bl	801487e <TIM_ITRx_SetConfig>
      break;
 801431a:	e003      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801431c:	2301      	movs	r3, #1
 801431e:	73fb      	strb	r3, [r7, #15]
      break;
 8014320:	e000      	b.n	8014324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2201      	movs	r2, #1
 8014328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2200      	movs	r2, #0
 8014330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8014334:	7bfb      	ldrb	r3, [r7, #15]
}
 8014336:	4618      	mov	r0, r3
 8014338:	3710      	adds	r7, #16
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801433e:	b480      	push	{r7}
 8014340:	b083      	sub	sp, #12
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014346:	bf00      	nop
 8014348:	370c      	adds	r7, #12
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr

08014352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014352:	b480      	push	{r7}
 8014354:	b083      	sub	sp, #12
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801435a:	bf00      	nop
 801435c:	370c      	adds	r7, #12
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr

08014366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014366:	b480      	push	{r7}
 8014368:	b083      	sub	sp, #12
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801436e:	bf00      	nop
 8014370:	370c      	adds	r7, #12
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr

0801437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801437a:	b480      	push	{r7}
 801437c:	b083      	sub	sp, #12
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014382:	bf00      	nop
 8014384:	370c      	adds	r7, #12
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr
	...

08014390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014390:	b480      	push	{r7}
 8014392:	b085      	sub	sp, #20
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	4a3a      	ldr	r2, [pc, #232]	@ (801448c <TIM_Base_SetConfig+0xfc>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d00f      	beq.n	80143c8 <TIM_Base_SetConfig+0x38>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80143ae:	d00b      	beq.n	80143c8 <TIM_Base_SetConfig+0x38>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	4a37      	ldr	r2, [pc, #220]	@ (8014490 <TIM_Base_SetConfig+0x100>)
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d007      	beq.n	80143c8 <TIM_Base_SetConfig+0x38>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	4a36      	ldr	r2, [pc, #216]	@ (8014494 <TIM_Base_SetConfig+0x104>)
 80143bc:	4293      	cmp	r3, r2
 80143be:	d003      	beq.n	80143c8 <TIM_Base_SetConfig+0x38>
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	4a35      	ldr	r2, [pc, #212]	@ (8014498 <TIM_Base_SetConfig+0x108>)
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d108      	bne.n	80143da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80143ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	4313      	orrs	r3, r2
 80143d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	4a2b      	ldr	r2, [pc, #172]	@ (801448c <TIM_Base_SetConfig+0xfc>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	d01b      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80143e8:	d017      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4a28      	ldr	r2, [pc, #160]	@ (8014490 <TIM_Base_SetConfig+0x100>)
 80143ee:	4293      	cmp	r3, r2
 80143f0:	d013      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	4a27      	ldr	r2, [pc, #156]	@ (8014494 <TIM_Base_SetConfig+0x104>)
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d00f      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4a26      	ldr	r2, [pc, #152]	@ (8014498 <TIM_Base_SetConfig+0x108>)
 80143fe:	4293      	cmp	r3, r2
 8014400:	d00b      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	4a25      	ldr	r2, [pc, #148]	@ (801449c <TIM_Base_SetConfig+0x10c>)
 8014406:	4293      	cmp	r3, r2
 8014408:	d007      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	4a24      	ldr	r2, [pc, #144]	@ (80144a0 <TIM_Base_SetConfig+0x110>)
 801440e:	4293      	cmp	r3, r2
 8014410:	d003      	beq.n	801441a <TIM_Base_SetConfig+0x8a>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	4a23      	ldr	r2, [pc, #140]	@ (80144a4 <TIM_Base_SetConfig+0x114>)
 8014416:	4293      	cmp	r3, r2
 8014418:	d108      	bne.n	801442c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	68fa      	ldr	r2, [r7, #12]
 8014428:	4313      	orrs	r3, r2
 801442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	695b      	ldr	r3, [r3, #20]
 8014436:	4313      	orrs	r3, r2
 8014438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	689a      	ldr	r2, [r3, #8]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	4a0e      	ldr	r2, [pc, #56]	@ (801448c <TIM_Base_SetConfig+0xfc>)
 8014454:	4293      	cmp	r3, r2
 8014456:	d103      	bne.n	8014460 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	691a      	ldr	r2, [r3, #16]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2201      	movs	r2, #1
 8014464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	691b      	ldr	r3, [r3, #16]
 801446a:	f003 0301 	and.w	r3, r3, #1
 801446e:	2b01      	cmp	r3, #1
 8014470:	d105      	bne.n	801447e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	691b      	ldr	r3, [r3, #16]
 8014476:	f023 0201 	bic.w	r2, r3, #1
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	611a      	str	r2, [r3, #16]
  }
}
 801447e:	bf00      	nop
 8014480:	3714      	adds	r7, #20
 8014482:	46bd      	mov	sp, r7
 8014484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014488:	4770      	bx	lr
 801448a:	bf00      	nop
 801448c:	40010000 	.word	0x40010000
 8014490:	40000400 	.word	0x40000400
 8014494:	40000800 	.word	0x40000800
 8014498:	40000c00 	.word	0x40000c00
 801449c:	40014000 	.word	0x40014000
 80144a0:	40014400 	.word	0x40014400
 80144a4:	40014800 	.word	0x40014800

080144a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b087      	sub	sp, #28
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6a1b      	ldr	r3, [r3, #32]
 80144bc:	f023 0201 	bic.w	r2, r3, #1
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	699b      	ldr	r3, [r3, #24]
 80144ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80144d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f023 0303 	bic.w	r3, r3, #3
 80144de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	68fa      	ldr	r2, [r7, #12]
 80144e6:	4313      	orrs	r3, r2
 80144e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	f023 0302 	bic.w	r3, r3, #2
 80144f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	689b      	ldr	r3, [r3, #8]
 80144f6:	697a      	ldr	r2, [r7, #20]
 80144f8:	4313      	orrs	r3, r2
 80144fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	4a1c      	ldr	r2, [pc, #112]	@ (8014570 <TIM_OC1_SetConfig+0xc8>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d10c      	bne.n	801451e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	f023 0308 	bic.w	r3, r3, #8
 801450a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	697a      	ldr	r2, [r7, #20]
 8014512:	4313      	orrs	r3, r2
 8014514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	f023 0304 	bic.w	r3, r3, #4
 801451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	4a13      	ldr	r2, [pc, #76]	@ (8014570 <TIM_OC1_SetConfig+0xc8>)
 8014522:	4293      	cmp	r3, r2
 8014524:	d111      	bne.n	801454a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	695b      	ldr	r3, [r3, #20]
 801453a:	693a      	ldr	r2, [r7, #16]
 801453c:	4313      	orrs	r3, r2
 801453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	699b      	ldr	r3, [r3, #24]
 8014544:	693a      	ldr	r2, [r7, #16]
 8014546:	4313      	orrs	r3, r2
 8014548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	693a      	ldr	r2, [r7, #16]
 801454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	685a      	ldr	r2, [r3, #4]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	697a      	ldr	r2, [r7, #20]
 8014562:	621a      	str	r2, [r3, #32]
}
 8014564:	bf00      	nop
 8014566:	371c      	adds	r7, #28
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	40010000 	.word	0x40010000

08014574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014574:	b480      	push	{r7}
 8014576:	b087      	sub	sp, #28
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6a1b      	ldr	r3, [r3, #32]
 8014582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6a1b      	ldr	r3, [r3, #32]
 8014588:	f023 0210 	bic.w	r2, r3, #16
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	699b      	ldr	r3, [r3, #24]
 801459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80145a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80145aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	021b      	lsls	r3, r3, #8
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	4313      	orrs	r3, r2
 80145b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	f023 0320 	bic.w	r3, r3, #32
 80145be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	689b      	ldr	r3, [r3, #8]
 80145c4:	011b      	lsls	r3, r3, #4
 80145c6:	697a      	ldr	r2, [r7, #20]
 80145c8:	4313      	orrs	r3, r2
 80145ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	4a1e      	ldr	r2, [pc, #120]	@ (8014648 <TIM_OC2_SetConfig+0xd4>)
 80145d0:	4293      	cmp	r3, r2
 80145d2:	d10d      	bne.n	80145f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80145da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	011b      	lsls	r3, r3, #4
 80145e2:	697a      	ldr	r2, [r7, #20]
 80145e4:	4313      	orrs	r3, r2
 80145e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80145ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	4a15      	ldr	r2, [pc, #84]	@ (8014648 <TIM_OC2_SetConfig+0xd4>)
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d113      	bne.n	8014620 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80145fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	695b      	ldr	r3, [r3, #20]
 801460c:	009b      	lsls	r3, r3, #2
 801460e:	693a      	ldr	r2, [r7, #16]
 8014610:	4313      	orrs	r3, r2
 8014612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	699b      	ldr	r3, [r3, #24]
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	4313      	orrs	r3, r2
 801461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	693a      	ldr	r2, [r7, #16]
 8014624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	68fa      	ldr	r2, [r7, #12]
 801462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	685a      	ldr	r2, [r3, #4]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	697a      	ldr	r2, [r7, #20]
 8014638:	621a      	str	r2, [r3, #32]
}
 801463a:	bf00      	nop
 801463c:	371c      	adds	r7, #28
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	40010000 	.word	0x40010000

0801464c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801464c:	b480      	push	{r7}
 801464e:	b087      	sub	sp, #28
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6a1b      	ldr	r3, [r3, #32]
 801465a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6a1b      	ldr	r3, [r3, #32]
 8014660:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	685b      	ldr	r3, [r3, #4]
 801466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	69db      	ldr	r3, [r3, #28]
 8014672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f023 0303 	bic.w	r3, r3, #3
 8014682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	4313      	orrs	r3, r2
 801468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	689b      	ldr	r3, [r3, #8]
 801469a:	021b      	lsls	r3, r3, #8
 801469c:	697a      	ldr	r2, [r7, #20]
 801469e:	4313      	orrs	r3, r2
 80146a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4a1d      	ldr	r2, [pc, #116]	@ (801471c <TIM_OC3_SetConfig+0xd0>)
 80146a6:	4293      	cmp	r3, r2
 80146a8:	d10d      	bne.n	80146c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80146b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	021b      	lsls	r3, r3, #8
 80146b8:	697a      	ldr	r2, [r7, #20]
 80146ba:	4313      	orrs	r3, r2
 80146bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80146c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4a14      	ldr	r2, [pc, #80]	@ (801471c <TIM_OC3_SetConfig+0xd0>)
 80146ca:	4293      	cmp	r3, r2
 80146cc:	d113      	bne.n	80146f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80146d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80146dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	695b      	ldr	r3, [r3, #20]
 80146e2:	011b      	lsls	r3, r3, #4
 80146e4:	693a      	ldr	r2, [r7, #16]
 80146e6:	4313      	orrs	r3, r2
 80146e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	699b      	ldr	r3, [r3, #24]
 80146ee:	011b      	lsls	r3, r3, #4
 80146f0:	693a      	ldr	r2, [r7, #16]
 80146f2:	4313      	orrs	r3, r2
 80146f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	693a      	ldr	r2, [r7, #16]
 80146fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	68fa      	ldr	r2, [r7, #12]
 8014700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	685a      	ldr	r2, [r3, #4]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	697a      	ldr	r2, [r7, #20]
 801470e:	621a      	str	r2, [r3, #32]
}
 8014710:	bf00      	nop
 8014712:	371c      	adds	r7, #28
 8014714:	46bd      	mov	sp, r7
 8014716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471a:	4770      	bx	lr
 801471c:	40010000 	.word	0x40010000

08014720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014720:	b480      	push	{r7}
 8014722:	b087      	sub	sp, #28
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6a1b      	ldr	r3, [r3, #32]
 801472e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6a1b      	ldr	r3, [r3, #32]
 8014734:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	69db      	ldr	r3, [r3, #28]
 8014746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	021b      	lsls	r3, r3, #8
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	4313      	orrs	r3, r2
 8014762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	031b      	lsls	r3, r3, #12
 8014772:	693a      	ldr	r2, [r7, #16]
 8014774:	4313      	orrs	r3, r2
 8014776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	4a10      	ldr	r2, [pc, #64]	@ (80147bc <TIM_OC4_SetConfig+0x9c>)
 801477c:	4293      	cmp	r3, r2
 801477e:	d109      	bne.n	8014794 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8014786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	695b      	ldr	r3, [r3, #20]
 801478c:	019b      	lsls	r3, r3, #6
 801478e:	697a      	ldr	r2, [r7, #20]
 8014790:	4313      	orrs	r3, r2
 8014792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	697a      	ldr	r2, [r7, #20]
 8014798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	685a      	ldr	r2, [r3, #4]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	693a      	ldr	r2, [r7, #16]
 80147ac:	621a      	str	r2, [r3, #32]
}
 80147ae:	bf00      	nop
 80147b0:	371c      	adds	r7, #28
 80147b2:	46bd      	mov	sp, r7
 80147b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b8:	4770      	bx	lr
 80147ba:	bf00      	nop
 80147bc:	40010000 	.word	0x40010000

080147c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b087      	sub	sp, #28
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	6a1b      	ldr	r3, [r3, #32]
 80147d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	6a1b      	ldr	r3, [r3, #32]
 80147d6:	f023 0201 	bic.w	r2, r3, #1
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	699b      	ldr	r3, [r3, #24]
 80147e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80147ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	011b      	lsls	r3, r3, #4
 80147f0:	693a      	ldr	r2, [r7, #16]
 80147f2:	4313      	orrs	r3, r2
 80147f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	f023 030a 	bic.w	r3, r3, #10
 80147fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80147fe:	697a      	ldr	r2, [r7, #20]
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	4313      	orrs	r3, r2
 8014804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	693a      	ldr	r2, [r7, #16]
 801480a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	697a      	ldr	r2, [r7, #20]
 8014810:	621a      	str	r2, [r3, #32]
}
 8014812:	bf00      	nop
 8014814:	371c      	adds	r7, #28
 8014816:	46bd      	mov	sp, r7
 8014818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481c:	4770      	bx	lr

0801481e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801481e:	b480      	push	{r7}
 8014820:	b087      	sub	sp, #28
 8014822:	af00      	add	r7, sp, #0
 8014824:	60f8      	str	r0, [r7, #12]
 8014826:	60b9      	str	r1, [r7, #8]
 8014828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	6a1b      	ldr	r3, [r3, #32]
 801482e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	6a1b      	ldr	r3, [r3, #32]
 8014834:	f023 0210 	bic.w	r2, r3, #16
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	699b      	ldr	r3, [r3, #24]
 8014840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	031b      	lsls	r3, r3, #12
 801484e:	693a      	ldr	r2, [r7, #16]
 8014850:	4313      	orrs	r3, r2
 8014852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801485a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	011b      	lsls	r3, r3, #4
 8014860:	697a      	ldr	r2, [r7, #20]
 8014862:	4313      	orrs	r3, r2
 8014864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	693a      	ldr	r2, [r7, #16]
 801486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	697a      	ldr	r2, [r7, #20]
 8014870:	621a      	str	r2, [r3, #32]
}
 8014872:	bf00      	nop
 8014874:	371c      	adds	r7, #28
 8014876:	46bd      	mov	sp, r7
 8014878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487c:	4770      	bx	lr

0801487e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801487e:	b480      	push	{r7}
 8014880:	b085      	sub	sp, #20
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
 8014886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014896:	683a      	ldr	r2, [r7, #0]
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	4313      	orrs	r3, r2
 801489c:	f043 0307 	orr.w	r3, r3, #7
 80148a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	68fa      	ldr	r2, [r7, #12]
 80148a6:	609a      	str	r2, [r3, #8]
}
 80148a8:	bf00      	nop
 80148aa:	3714      	adds	r7, #20
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b087      	sub	sp, #28
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
 80148c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	689b      	ldr	r3, [r3, #8]
 80148c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80148ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	021a      	lsls	r2, r3, #8
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	431a      	orrs	r2, r3
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	4313      	orrs	r3, r2
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	4313      	orrs	r3, r2
 80148e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	697a      	ldr	r2, [r7, #20]
 80148e6:	609a      	str	r2, [r3, #8]
}
 80148e8:	bf00      	nop
 80148ea:	371c      	adds	r7, #28
 80148ec:	46bd      	mov	sp, r7
 80148ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f2:	4770      	bx	lr

080148f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80148f4:	b480      	push	{r7}
 80148f6:	b087      	sub	sp, #28
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	f003 031f 	and.w	r3, r3, #31
 8014906:	2201      	movs	r2, #1
 8014908:	fa02 f303 	lsl.w	r3, r2, r3
 801490c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	6a1a      	ldr	r2, [r3, #32]
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	43db      	mvns	r3, r3
 8014916:	401a      	ands	r2, r3
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6a1a      	ldr	r2, [r3, #32]
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	f003 031f 	and.w	r3, r3, #31
 8014926:	6879      	ldr	r1, [r7, #4]
 8014928:	fa01 f303 	lsl.w	r3, r1, r3
 801492c:	431a      	orrs	r2, r3
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	621a      	str	r2, [r3, #32]
}
 8014932:	bf00      	nop
 8014934:	371c      	adds	r7, #28
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr
	...

08014940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014940:	b480      	push	{r7}
 8014942:	b085      	sub	sp, #20
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014950:	2b01      	cmp	r3, #1
 8014952:	d101      	bne.n	8014958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014954:	2302      	movs	r3, #2
 8014956:	e050      	b.n	80149fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2201      	movs	r2, #1
 801495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2202      	movs	r2, #2
 8014964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	689b      	ldr	r3, [r3, #8]
 8014976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	68fa      	ldr	r2, [r7, #12]
 8014986:	4313      	orrs	r3, r2
 8014988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	68fa      	ldr	r2, [r7, #12]
 8014990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4a1c      	ldr	r2, [pc, #112]	@ (8014a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8014998:	4293      	cmp	r3, r2
 801499a:	d018      	beq.n	80149ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149a4:	d013      	beq.n	80149ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	4a18      	ldr	r2, [pc, #96]	@ (8014a0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80149ac:	4293      	cmp	r3, r2
 80149ae:	d00e      	beq.n	80149ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	4a16      	ldr	r2, [pc, #88]	@ (8014a10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d009      	beq.n	80149ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4a15      	ldr	r2, [pc, #84]	@ (8014a14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80149c0:	4293      	cmp	r3, r2
 80149c2:	d004      	beq.n	80149ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	4a13      	ldr	r2, [pc, #76]	@ (8014a18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80149ca:	4293      	cmp	r3, r2
 80149cc:	d10c      	bne.n	80149e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80149d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	68ba      	ldr	r2, [r7, #8]
 80149dc:	4313      	orrs	r3, r2
 80149de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	68ba      	ldr	r2, [r7, #8]
 80149e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2201      	movs	r2, #1
 80149ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2200      	movs	r2, #0
 80149f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80149f8:	2300      	movs	r3, #0
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3714      	adds	r7, #20
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop
 8014a08:	40010000 	.word	0x40010000
 8014a0c:	40000400 	.word	0x40000400
 8014a10:	40000800 	.word	0x40000800
 8014a14:	40000c00 	.word	0x40000c00
 8014a18:	40014000 	.word	0x40014000

08014a1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b085      	sub	sp, #20
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014a26:	2300      	movs	r3, #0
 8014a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d101      	bne.n	8014a38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014a34:	2302      	movs	r3, #2
 8014a36:	e03d      	b.n	8014ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	4313      	orrs	r3, r2
 8014a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	689b      	ldr	r3, [r3, #8]
 8014a58:	4313      	orrs	r3, r2
 8014a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	4313      	orrs	r3, r2
 8014a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	4313      	orrs	r3, r2
 8014a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	691b      	ldr	r3, [r3, #16]
 8014a82:	4313      	orrs	r3, r2
 8014a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	695b      	ldr	r3, [r3, #20]
 8014a90:	4313      	orrs	r3, r2
 8014a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	69db      	ldr	r3, [r3, #28]
 8014a9e:	4313      	orrs	r3, r2
 8014aa0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	68fa      	ldr	r2, [r7, #12]
 8014aa8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2200      	movs	r2, #0
 8014aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014ab2:	2300      	movs	r3, #0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3714      	adds	r7, #20
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014ac8:	bf00      	nop
 8014aca:	370c      	adds	r7, #12
 8014acc:	46bd      	mov	sp, r7
 8014ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad2:	4770      	bx	lr

08014ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b083      	sub	sp, #12
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014adc:	bf00      	nop
 8014ade:	370c      	adds	r7, #12
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d101      	bne.n	8014afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014af6:	2301      	movs	r3, #1
 8014af8:	e042      	b.n	8014b80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d106      	bne.n	8014b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f000 f83a 	bl	8014b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2224      	movs	r2, #36	@ 0x24
 8014b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	68da      	ldr	r2, [r3, #12]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8014b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f000 fb8d 	bl	801524c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	691a      	ldr	r2, [r3, #16]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	695a      	ldr	r2, [r3, #20]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	68da      	ldr	r2, [r3, #12]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2200      	movs	r2, #0
 8014b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2220      	movs	r2, #32
 8014b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2220      	movs	r2, #32
 8014b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8014b7e:	2300      	movs	r3, #0
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3708      	adds	r7, #8
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b083      	sub	sp, #12
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8014b90:	bf00      	nop
 8014b92:	370c      	adds	r7, #12
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b08a      	sub	sp, #40	@ 0x28
 8014ba0:	af02      	add	r7, sp, #8
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	603b      	str	r3, [r7, #0]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014bac:	2300      	movs	r3, #0
 8014bae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014bb6:	b2db      	uxtb	r3, r3
 8014bb8:	2b20      	cmp	r3, #32
 8014bba:	d175      	bne.n	8014ca8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d002      	beq.n	8014bc8 <HAL_UART_Transmit+0x2c>
 8014bc2:	88fb      	ldrh	r3, [r7, #6]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d101      	bne.n	8014bcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e06e      	b.n	8014caa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2221      	movs	r2, #33	@ 0x21
 8014bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014bda:	f7fa f8a7 	bl	800ed2c <HAL_GetTick>
 8014bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	88fa      	ldrh	r2, [r7, #6]
 8014be4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	88fa      	ldrh	r2, [r7, #6]
 8014bea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	689b      	ldr	r3, [r3, #8]
 8014bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014bf4:	d108      	bne.n	8014c08 <HAL_UART_Transmit+0x6c>
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	691b      	ldr	r3, [r3, #16]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d104      	bne.n	8014c08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	61bb      	str	r3, [r7, #24]
 8014c06:	e003      	b.n	8014c10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014c10:	e02e      	b.n	8014c70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	9300      	str	r3, [sp, #0]
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	2180      	movs	r1, #128	@ 0x80
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f000 f995 	bl	8014f4c <UART_WaitOnFlagUntilTimeout>
 8014c22:	4603      	mov	r3, r0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d005      	beq.n	8014c34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2220      	movs	r2, #32
 8014c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8014c30:	2303      	movs	r3, #3
 8014c32:	e03a      	b.n	8014caa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8014c34:	69fb      	ldr	r3, [r7, #28]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d10b      	bne.n	8014c52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	881b      	ldrh	r3, [r3, #0]
 8014c3e:	461a      	mov	r2, r3
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014c48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	3302      	adds	r3, #2
 8014c4e:	61bb      	str	r3, [r7, #24]
 8014c50:	e007      	b.n	8014c62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	781a      	ldrb	r2, [r3, #0]
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014c5c:	69fb      	ldr	r3, [r7, #28]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	3b01      	subs	r3, #1
 8014c6a:	b29a      	uxth	r2, r3
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d1cb      	bne.n	8014c12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	2200      	movs	r2, #0
 8014c82:	2140      	movs	r1, #64	@ 0x40
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f000 f961 	bl	8014f4c <UART_WaitOnFlagUntilTimeout>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d005      	beq.n	8014c9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2220      	movs	r2, #32
 8014c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8014c98:	2303      	movs	r3, #3
 8014c9a:	e006      	b.n	8014caa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2220      	movs	r2, #32
 8014ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	e000      	b.n	8014caa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8014ca8:	2302      	movs	r3, #2
  }
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3720      	adds	r7, #32
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}

08014cb2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014cb2:	b580      	push	{r7, lr}
 8014cb4:	b084      	sub	sp, #16
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	60f8      	str	r0, [r7, #12]
 8014cba:	60b9      	str	r1, [r7, #8]
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	2b20      	cmp	r3, #32
 8014cca:	d112      	bne.n	8014cf2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d002      	beq.n	8014cd8 <HAL_UART_Receive_DMA+0x26>
 8014cd2:	88fb      	ldrh	r3, [r7, #6]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d101      	bne.n	8014cdc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e00b      	b.n	8014cf4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8014ce2:	88fb      	ldrh	r3, [r7, #6]
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	68b9      	ldr	r1, [r7, #8]
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	f000 f989 	bl	8015000 <UART_Start_Receive_DMA>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	e000      	b.n	8014cf4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8014cf2:	2302      	movs	r3, #2
  }
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8014d04:	bf00      	nop
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr

08014d10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8014d18:	bf00      	nop
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014d2c:	bf00      	nop
 8014d2e:	370c      	adds	r7, #12
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr

08014d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b083      	sub	sp, #12
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	460b      	mov	r3, r1
 8014d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014d44:	bf00      	nop
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr

08014d50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b09c      	sub	sp, #112	@ 0x70
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014d5c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d172      	bne.n	8014e52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8014d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014d6e:	2200      	movs	r2, #0
 8014d70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	330c      	adds	r3, #12
 8014d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d7c:	e853 3f00 	ldrex	r3, [r3]
 8014d80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	330c      	adds	r3, #12
 8014d90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014d92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8014d94:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014d98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014d9a:	e841 2300 	strex	r3, r2, [r1]
 8014d9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d1e5      	bne.n	8014d72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	3314      	adds	r3, #20
 8014dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db0:	e853 3f00 	ldrex	r3, [r3]
 8014db4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014db8:	f023 0301 	bic.w	r3, r3, #1
 8014dbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8014dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	3314      	adds	r3, #20
 8014dc4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014dc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8014dc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014dcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014dce:	e841 2300 	strex	r3, r2, [r1]
 8014dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1e5      	bne.n	8014da6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	3314      	adds	r3, #20
 8014de0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014de4:	e853 3f00 	ldrex	r3, [r3]
 8014de8:	623b      	str	r3, [r7, #32]
   return(result);
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8014df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	3314      	adds	r3, #20
 8014df8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8014dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e02:	e841 2300 	strex	r3, r2, [r1]
 8014e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d1e5      	bne.n	8014dda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e10:	2220      	movs	r2, #32
 8014e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e1a:	2b01      	cmp	r3, #1
 8014e1c:	d119      	bne.n	8014e52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	330c      	adds	r3, #12
 8014e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	e853 3f00 	ldrex	r3, [r3]
 8014e2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	f023 0310 	bic.w	r3, r3, #16
 8014e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	330c      	adds	r3, #12
 8014e3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014e3e:	61fa      	str	r2, [r7, #28]
 8014e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e42:	69b9      	ldr	r1, [r7, #24]
 8014e44:	69fa      	ldr	r2, [r7, #28]
 8014e46:	e841 2300 	strex	r3, r2, [r1]
 8014e4a:	617b      	str	r3, [r7, #20]
   return(result);
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d1e5      	bne.n	8014e1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e54:	2200      	movs	r2, #0
 8014e56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d106      	bne.n	8014e6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014e64:	4619      	mov	r1, r3
 8014e66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014e68:	f7ff ff66 	bl	8014d38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014e6c:	e002      	b.n	8014e74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8014e6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014e70:	f7ff ff44 	bl	8014cfc <HAL_UART_RxCpltCallback>
}
 8014e74:	bf00      	nop
 8014e76:	3770      	adds	r7, #112	@ 0x70
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d108      	bne.n	8014eaa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014e9c:	085b      	lsrs	r3, r3, #1
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	68f8      	ldr	r0, [r7, #12]
 8014ea4:	f7ff ff48 	bl	8014d38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014ea8:	e002      	b.n	8014eb0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8014eaa:	68f8      	ldr	r0, [r7, #12]
 8014eac:	f7ff ff30 	bl	8014d10 <HAL_UART_RxHalfCpltCallback>
}
 8014eb0:	bf00      	nop
 8014eb2:	3710      	adds	r7, #16
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b084      	sub	sp, #16
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ec8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	695b      	ldr	r3, [r3, #20]
 8014ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014ed4:	2b80      	cmp	r3, #128	@ 0x80
 8014ed6:	bf0c      	ite	eq
 8014ed8:	2301      	moveq	r3, #1
 8014eda:	2300      	movne	r3, #0
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	2b21      	cmp	r3, #33	@ 0x21
 8014eea:	d108      	bne.n	8014efe <UART_DMAError+0x46>
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d005      	beq.n	8014efe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8014ef8:	68b8      	ldr	r0, [r7, #8]
 8014efa:	f000 f91b 	bl	8015134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	695b      	ldr	r3, [r3, #20]
 8014f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f08:	2b40      	cmp	r3, #64	@ 0x40
 8014f0a:	bf0c      	ite	eq
 8014f0c:	2301      	moveq	r3, #1
 8014f0e:	2300      	movne	r3, #0
 8014f10:	b2db      	uxtb	r3, r3
 8014f12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	2b22      	cmp	r3, #34	@ 0x22
 8014f1e:	d108      	bne.n	8014f32 <UART_DMAError+0x7a>
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d005      	beq.n	8014f32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8014f2c:	68b8      	ldr	r0, [r7, #8]
 8014f2e:	f000 f929 	bl	8015184 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f36:	f043 0210 	orr.w	r2, r3, #16
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014f3e:	68b8      	ldr	r0, [r7, #8]
 8014f40:	f7ff fef0 	bl	8014d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014f44:	bf00      	nop
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b086      	sub	sp, #24
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	603b      	str	r3, [r7, #0]
 8014f58:	4613      	mov	r3, r2
 8014f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014f5c:	e03b      	b.n	8014fd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014f5e:	6a3b      	ldr	r3, [r7, #32]
 8014f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014f64:	d037      	beq.n	8014fd6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014f66:	f7f9 fee1 	bl	800ed2c <HAL_GetTick>
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	6a3a      	ldr	r2, [r7, #32]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d302      	bcc.n	8014f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8014f76:	6a3b      	ldr	r3, [r7, #32]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d101      	bne.n	8014f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	e03a      	b.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	f003 0304 	and.w	r3, r3, #4
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d023      	beq.n	8014fd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	2b80      	cmp	r3, #128	@ 0x80
 8014f92:	d020      	beq.n	8014fd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2b40      	cmp	r3, #64	@ 0x40
 8014f98:	d01d      	beq.n	8014fd6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	f003 0308 	and.w	r3, r3, #8
 8014fa4:	2b08      	cmp	r3, #8
 8014fa6:	d116      	bne.n	8014fd6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8014fa8:	2300      	movs	r3, #0
 8014faa:	617b      	str	r3, [r7, #20]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	617b      	str	r3, [r7, #20]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	617b      	str	r3, [r7, #20]
 8014fbc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f000 f8e0 	bl	8015184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2208      	movs	r2, #8
 8014fc8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	e00f      	b.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	4013      	ands	r3, r2
 8014fe0:	68ba      	ldr	r2, [r7, #8]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	bf0c      	ite	eq
 8014fe6:	2301      	moveq	r3, #1
 8014fe8:	2300      	movne	r3, #0
 8014fea:	b2db      	uxtb	r3, r3
 8014fec:	461a      	mov	r2, r3
 8014fee:	79fb      	ldrb	r3, [r7, #7]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d0b4      	beq.n	8014f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014ff4:	2300      	movs	r3, #0
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3718      	adds	r7, #24
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
	...

08015000 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b098      	sub	sp, #96	@ 0x60
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	4613      	mov	r3, r2
 801500c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801500e:	68ba      	ldr	r2, [r7, #8]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	88fa      	ldrh	r2, [r7, #6]
 8015018:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2200      	movs	r2, #0
 801501e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	2222      	movs	r2, #34	@ 0x22
 8015024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801502c:	4a3e      	ldr	r2, [pc, #248]	@ (8015128 <UART_Start_Receive_DMA+0x128>)
 801502e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015034:	4a3d      	ldr	r2, [pc, #244]	@ (801512c <UART_Start_Receive_DMA+0x12c>)
 8015036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801503c:	4a3c      	ldr	r2, [pc, #240]	@ (8015130 <UART_Start_Receive_DMA+0x130>)
 801503e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015044:	2200      	movs	r2, #0
 8015046:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8015048:	f107 0308 	add.w	r3, r7, #8
 801504c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	3304      	adds	r3, #4
 8015058:	4619      	mov	r1, r3
 801505a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	88fb      	ldrh	r3, [r7, #6]
 8015060:	f7f9 fff3 	bl	800f04a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8015064:	2300      	movs	r3, #0
 8015066:	613b      	str	r3, [r7, #16]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	613b      	str	r3, [r7, #16]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	613b      	str	r3, [r7, #16]
 8015078:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	691b      	ldr	r3, [r3, #16]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d019      	beq.n	80150b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	330c      	adds	r3, #12
 8015088:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801508a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801508c:	e853 3f00 	ldrex	r3, [r3]
 8015090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015098:	65bb      	str	r3, [r7, #88]	@ 0x58
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	330c      	adds	r3, #12
 80150a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80150a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80150a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80150a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80150aa:	e841 2300 	strex	r3, r2, [r1]
 80150ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80150b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d1e5      	bne.n	8015082 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	3314      	adds	r3, #20
 80150bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c0:	e853 3f00 	ldrex	r3, [r3]
 80150c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80150c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150c8:	f043 0301 	orr.w	r3, r3, #1
 80150cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	3314      	adds	r3, #20
 80150d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80150d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80150d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80150dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80150de:	e841 2300 	strex	r3, r2, [r1]
 80150e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80150e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d1e5      	bne.n	80150b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	3314      	adds	r3, #20
 80150f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150f2:	69bb      	ldr	r3, [r7, #24]
 80150f4:	e853 3f00 	ldrex	r3, [r3]
 80150f8:	617b      	str	r3, [r7, #20]
   return(result);
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015100:	653b      	str	r3, [r7, #80]	@ 0x50
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	3314      	adds	r3, #20
 8015108:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801510a:	627a      	str	r2, [r7, #36]	@ 0x24
 801510c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801510e:	6a39      	ldr	r1, [r7, #32]
 8015110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015112:	e841 2300 	strex	r3, r2, [r1]
 8015116:	61fb      	str	r3, [r7, #28]
   return(result);
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1e5      	bne.n	80150ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801511e:	2300      	movs	r3, #0
}
 8015120:	4618      	mov	r0, r3
 8015122:	3760      	adds	r7, #96	@ 0x60
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	08014d51 	.word	0x08014d51
 801512c:	08014e7d 	.word	0x08014e7d
 8015130:	08014eb9 	.word	0x08014eb9

08015134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015134:	b480      	push	{r7}
 8015136:	b089      	sub	sp, #36	@ 0x24
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	330c      	adds	r3, #12
 8015142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	e853 3f00 	ldrex	r3, [r3]
 801514a:	60bb      	str	r3, [r7, #8]
   return(result);
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015152:	61fb      	str	r3, [r7, #28]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	330c      	adds	r3, #12
 801515a:	69fa      	ldr	r2, [r7, #28]
 801515c:	61ba      	str	r2, [r7, #24]
 801515e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015160:	6979      	ldr	r1, [r7, #20]
 8015162:	69ba      	ldr	r2, [r7, #24]
 8015164:	e841 2300 	strex	r3, r2, [r1]
 8015168:	613b      	str	r3, [r7, #16]
   return(result);
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d1e5      	bne.n	801513c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2220      	movs	r2, #32
 8015174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8015178:	bf00      	nop
 801517a:	3724      	adds	r7, #36	@ 0x24
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015184:	b480      	push	{r7}
 8015186:	b095      	sub	sp, #84	@ 0x54
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	330c      	adds	r3, #12
 8015192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015196:	e853 3f00 	ldrex	r3, [r3]
 801519a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801519c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801519e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80151a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	330c      	adds	r3, #12
 80151aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80151ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80151ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80151b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151b4:	e841 2300 	strex	r3, r2, [r1]
 80151b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80151ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1e5      	bne.n	801518c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	3314      	adds	r3, #20
 80151c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151c8:	6a3b      	ldr	r3, [r7, #32]
 80151ca:	e853 3f00 	ldrex	r3, [r3]
 80151ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	f023 0301 	bic.w	r3, r3, #1
 80151d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	3314      	adds	r3, #20
 80151de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80151e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80151e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80151e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80151e8:	e841 2300 	strex	r3, r2, [r1]
 80151ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80151ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d1e5      	bne.n	80151c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d119      	bne.n	8015230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	330c      	adds	r3, #12
 8015202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	e853 3f00 	ldrex	r3, [r3]
 801520a:	60bb      	str	r3, [r7, #8]
   return(result);
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	f023 0310 	bic.w	r3, r3, #16
 8015212:	647b      	str	r3, [r7, #68]	@ 0x44
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	330c      	adds	r3, #12
 801521a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801521c:	61ba      	str	r2, [r7, #24]
 801521e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015220:	6979      	ldr	r1, [r7, #20]
 8015222:	69ba      	ldr	r2, [r7, #24]
 8015224:	e841 2300 	strex	r3, r2, [r1]
 8015228:	613b      	str	r3, [r7, #16]
   return(result);
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d1e5      	bne.n	80151fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2220      	movs	r2, #32
 8015234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2200      	movs	r2, #0
 801523c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801523e:	bf00      	nop
 8015240:	3754      	adds	r7, #84	@ 0x54
 8015242:	46bd      	mov	sp, r7
 8015244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015248:	4770      	bx	lr
	...

0801524c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015250:	b0c0      	sub	sp, #256	@ 0x100
 8015252:	af00      	add	r7, sp, #0
 8015254:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	691b      	ldr	r3, [r3, #16]
 8015260:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8015264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015268:	68d9      	ldr	r1, [r3, #12]
 801526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	ea40 0301 	orr.w	r3, r0, r1
 8015274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801527a:	689a      	ldr	r2, [r3, #8]
 801527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015280:	691b      	ldr	r3, [r3, #16]
 8015282:	431a      	orrs	r2, r3
 8015284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015288:	695b      	ldr	r3, [r3, #20]
 801528a:	431a      	orrs	r2, r3
 801528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015290:	69db      	ldr	r3, [r3, #28]
 8015292:	4313      	orrs	r3, r2
 8015294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80152a4:	f021 010c 	bic.w	r1, r1, #12
 80152a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152ac:	681a      	ldr	r2, [r3, #0]
 80152ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80152b2:	430b      	orrs	r3, r1
 80152b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80152b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	695b      	ldr	r3, [r3, #20]
 80152be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80152c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152c6:	6999      	ldr	r1, [r3, #24]
 80152c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	ea40 0301 	orr.w	r3, r0, r1
 80152d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80152d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	4b8f      	ldr	r3, [pc, #572]	@ (8015518 <UART_SetConfig+0x2cc>)
 80152dc:	429a      	cmp	r2, r3
 80152de:	d005      	beq.n	80152ec <UART_SetConfig+0xa0>
 80152e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152e4:	681a      	ldr	r2, [r3, #0]
 80152e6:	4b8d      	ldr	r3, [pc, #564]	@ (801551c <UART_SetConfig+0x2d0>)
 80152e8:	429a      	cmp	r2, r3
 80152ea:	d104      	bne.n	80152f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80152ec:	f7fe f8be 	bl	801346c <HAL_RCC_GetPCLK2Freq>
 80152f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80152f4:	e003      	b.n	80152fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80152f6:	f7fe f8a5 	bl	8013444 <HAL_RCC_GetPCLK1Freq>
 80152fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80152fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015302:	69db      	ldr	r3, [r3, #28]
 8015304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015308:	f040 810c 	bne.w	8015524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801530c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015310:	2200      	movs	r2, #0
 8015312:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015316:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801531a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801531e:	4622      	mov	r2, r4
 8015320:	462b      	mov	r3, r5
 8015322:	1891      	adds	r1, r2, r2
 8015324:	65b9      	str	r1, [r7, #88]	@ 0x58
 8015326:	415b      	adcs	r3, r3
 8015328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801532a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801532e:	4621      	mov	r1, r4
 8015330:	eb12 0801 	adds.w	r8, r2, r1
 8015334:	4629      	mov	r1, r5
 8015336:	eb43 0901 	adc.w	r9, r3, r1
 801533a:	f04f 0200 	mov.w	r2, #0
 801533e:	f04f 0300 	mov.w	r3, #0
 8015342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801534a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801534e:	4690      	mov	r8, r2
 8015350:	4699      	mov	r9, r3
 8015352:	4623      	mov	r3, r4
 8015354:	eb18 0303 	adds.w	r3, r8, r3
 8015358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801535c:	462b      	mov	r3, r5
 801535e:	eb49 0303 	adc.w	r3, r9, r3
 8015362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	2200      	movs	r2, #0
 801536e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015372:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8015376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801537a:	460b      	mov	r3, r1
 801537c:	18db      	adds	r3, r3, r3
 801537e:	653b      	str	r3, [r7, #80]	@ 0x50
 8015380:	4613      	mov	r3, r2
 8015382:	eb42 0303 	adc.w	r3, r2, r3
 8015386:	657b      	str	r3, [r7, #84]	@ 0x54
 8015388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801538c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8015390:	f7eb fc82 	bl	8000c98 <__aeabi_uldivmod>
 8015394:	4602      	mov	r2, r0
 8015396:	460b      	mov	r3, r1
 8015398:	4b61      	ldr	r3, [pc, #388]	@ (8015520 <UART_SetConfig+0x2d4>)
 801539a:	fba3 2302 	umull	r2, r3, r3, r2
 801539e:	095b      	lsrs	r3, r3, #5
 80153a0:	011c      	lsls	r4, r3, #4
 80153a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80153a6:	2200      	movs	r2, #0
 80153a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80153ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80153b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80153b4:	4642      	mov	r2, r8
 80153b6:	464b      	mov	r3, r9
 80153b8:	1891      	adds	r1, r2, r2
 80153ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80153bc:	415b      	adcs	r3, r3
 80153be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80153c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80153c4:	4641      	mov	r1, r8
 80153c6:	eb12 0a01 	adds.w	sl, r2, r1
 80153ca:	4649      	mov	r1, r9
 80153cc:	eb43 0b01 	adc.w	fp, r3, r1
 80153d0:	f04f 0200 	mov.w	r2, #0
 80153d4:	f04f 0300 	mov.w	r3, #0
 80153d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80153dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80153e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80153e4:	4692      	mov	sl, r2
 80153e6:	469b      	mov	fp, r3
 80153e8:	4643      	mov	r3, r8
 80153ea:	eb1a 0303 	adds.w	r3, sl, r3
 80153ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80153f2:	464b      	mov	r3, r9
 80153f4:	eb4b 0303 	adc.w	r3, fp, r3
 80153f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80153fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015408:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801540c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015410:	460b      	mov	r3, r1
 8015412:	18db      	adds	r3, r3, r3
 8015414:	643b      	str	r3, [r7, #64]	@ 0x40
 8015416:	4613      	mov	r3, r2
 8015418:	eb42 0303 	adc.w	r3, r2, r3
 801541c:	647b      	str	r3, [r7, #68]	@ 0x44
 801541e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8015426:	f7eb fc37 	bl	8000c98 <__aeabi_uldivmod>
 801542a:	4602      	mov	r2, r0
 801542c:	460b      	mov	r3, r1
 801542e:	4611      	mov	r1, r2
 8015430:	4b3b      	ldr	r3, [pc, #236]	@ (8015520 <UART_SetConfig+0x2d4>)
 8015432:	fba3 2301 	umull	r2, r3, r3, r1
 8015436:	095b      	lsrs	r3, r3, #5
 8015438:	2264      	movs	r2, #100	@ 0x64
 801543a:	fb02 f303 	mul.w	r3, r2, r3
 801543e:	1acb      	subs	r3, r1, r3
 8015440:	00db      	lsls	r3, r3, #3
 8015442:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8015446:	4b36      	ldr	r3, [pc, #216]	@ (8015520 <UART_SetConfig+0x2d4>)
 8015448:	fba3 2302 	umull	r2, r3, r3, r2
 801544c:	095b      	lsrs	r3, r3, #5
 801544e:	005b      	lsls	r3, r3, #1
 8015450:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8015454:	441c      	add	r4, r3
 8015456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801545a:	2200      	movs	r2, #0
 801545c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015460:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8015464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8015468:	4642      	mov	r2, r8
 801546a:	464b      	mov	r3, r9
 801546c:	1891      	adds	r1, r2, r2
 801546e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8015470:	415b      	adcs	r3, r3
 8015472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8015478:	4641      	mov	r1, r8
 801547a:	1851      	adds	r1, r2, r1
 801547c:	6339      	str	r1, [r7, #48]	@ 0x30
 801547e:	4649      	mov	r1, r9
 8015480:	414b      	adcs	r3, r1
 8015482:	637b      	str	r3, [r7, #52]	@ 0x34
 8015484:	f04f 0200 	mov.w	r2, #0
 8015488:	f04f 0300 	mov.w	r3, #0
 801548c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8015490:	4659      	mov	r1, fp
 8015492:	00cb      	lsls	r3, r1, #3
 8015494:	4651      	mov	r1, sl
 8015496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801549a:	4651      	mov	r1, sl
 801549c:	00ca      	lsls	r2, r1, #3
 801549e:	4610      	mov	r0, r2
 80154a0:	4619      	mov	r1, r3
 80154a2:	4603      	mov	r3, r0
 80154a4:	4642      	mov	r2, r8
 80154a6:	189b      	adds	r3, r3, r2
 80154a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80154ac:	464b      	mov	r3, r9
 80154ae:	460a      	mov	r2, r1
 80154b0:	eb42 0303 	adc.w	r3, r2, r3
 80154b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80154b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	2200      	movs	r2, #0
 80154c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80154c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80154c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80154cc:	460b      	mov	r3, r1
 80154ce:	18db      	adds	r3, r3, r3
 80154d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80154d2:	4613      	mov	r3, r2
 80154d4:	eb42 0303 	adc.w	r3, r2, r3
 80154d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80154da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80154de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80154e2:	f7eb fbd9 	bl	8000c98 <__aeabi_uldivmod>
 80154e6:	4602      	mov	r2, r0
 80154e8:	460b      	mov	r3, r1
 80154ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015520 <UART_SetConfig+0x2d4>)
 80154ec:	fba3 1302 	umull	r1, r3, r3, r2
 80154f0:	095b      	lsrs	r3, r3, #5
 80154f2:	2164      	movs	r1, #100	@ 0x64
 80154f4:	fb01 f303 	mul.w	r3, r1, r3
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	00db      	lsls	r3, r3, #3
 80154fc:	3332      	adds	r3, #50	@ 0x32
 80154fe:	4a08      	ldr	r2, [pc, #32]	@ (8015520 <UART_SetConfig+0x2d4>)
 8015500:	fba2 2303 	umull	r2, r3, r2, r3
 8015504:	095b      	lsrs	r3, r3, #5
 8015506:	f003 0207 	and.w	r2, r3, #7
 801550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	4422      	add	r2, r4
 8015512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015514:	e106      	b.n	8015724 <UART_SetConfig+0x4d8>
 8015516:	bf00      	nop
 8015518:	40011000 	.word	0x40011000
 801551c:	40011400 	.word	0x40011400
 8015520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015528:	2200      	movs	r2, #0
 801552a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801552e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8015536:	4642      	mov	r2, r8
 8015538:	464b      	mov	r3, r9
 801553a:	1891      	adds	r1, r2, r2
 801553c:	6239      	str	r1, [r7, #32]
 801553e:	415b      	adcs	r3, r3
 8015540:	627b      	str	r3, [r7, #36]	@ 0x24
 8015542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015546:	4641      	mov	r1, r8
 8015548:	1854      	adds	r4, r2, r1
 801554a:	4649      	mov	r1, r9
 801554c:	eb43 0501 	adc.w	r5, r3, r1
 8015550:	f04f 0200 	mov.w	r2, #0
 8015554:	f04f 0300 	mov.w	r3, #0
 8015558:	00eb      	lsls	r3, r5, #3
 801555a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801555e:	00e2      	lsls	r2, r4, #3
 8015560:	4614      	mov	r4, r2
 8015562:	461d      	mov	r5, r3
 8015564:	4643      	mov	r3, r8
 8015566:	18e3      	adds	r3, r4, r3
 8015568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801556c:	464b      	mov	r3, r9
 801556e:	eb45 0303 	adc.w	r3, r5, r3
 8015572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	2200      	movs	r2, #0
 801557e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015582:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8015586:	f04f 0200 	mov.w	r2, #0
 801558a:	f04f 0300 	mov.w	r3, #0
 801558e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8015592:	4629      	mov	r1, r5
 8015594:	008b      	lsls	r3, r1, #2
 8015596:	4621      	mov	r1, r4
 8015598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801559c:	4621      	mov	r1, r4
 801559e:	008a      	lsls	r2, r1, #2
 80155a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80155a4:	f7eb fb78 	bl	8000c98 <__aeabi_uldivmod>
 80155a8:	4602      	mov	r2, r0
 80155aa:	460b      	mov	r3, r1
 80155ac:	4b60      	ldr	r3, [pc, #384]	@ (8015730 <UART_SetConfig+0x4e4>)
 80155ae:	fba3 2302 	umull	r2, r3, r3, r2
 80155b2:	095b      	lsrs	r3, r3, #5
 80155b4:	011c      	lsls	r4, r3, #4
 80155b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80155ba:	2200      	movs	r2, #0
 80155bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80155c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80155c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80155c8:	4642      	mov	r2, r8
 80155ca:	464b      	mov	r3, r9
 80155cc:	1891      	adds	r1, r2, r2
 80155ce:	61b9      	str	r1, [r7, #24]
 80155d0:	415b      	adcs	r3, r3
 80155d2:	61fb      	str	r3, [r7, #28]
 80155d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80155d8:	4641      	mov	r1, r8
 80155da:	1851      	adds	r1, r2, r1
 80155dc:	6139      	str	r1, [r7, #16]
 80155de:	4649      	mov	r1, r9
 80155e0:	414b      	adcs	r3, r1
 80155e2:	617b      	str	r3, [r7, #20]
 80155e4:	f04f 0200 	mov.w	r2, #0
 80155e8:	f04f 0300 	mov.w	r3, #0
 80155ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80155f0:	4659      	mov	r1, fp
 80155f2:	00cb      	lsls	r3, r1, #3
 80155f4:	4651      	mov	r1, sl
 80155f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80155fa:	4651      	mov	r1, sl
 80155fc:	00ca      	lsls	r2, r1, #3
 80155fe:	4610      	mov	r0, r2
 8015600:	4619      	mov	r1, r3
 8015602:	4603      	mov	r3, r0
 8015604:	4642      	mov	r2, r8
 8015606:	189b      	adds	r3, r3, r2
 8015608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801560c:	464b      	mov	r3, r9
 801560e:	460a      	mov	r2, r1
 8015610:	eb42 0303 	adc.w	r3, r2, r3
 8015614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	2200      	movs	r2, #0
 8015620:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015622:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8015624:	f04f 0200 	mov.w	r2, #0
 8015628:	f04f 0300 	mov.w	r3, #0
 801562c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8015630:	4649      	mov	r1, r9
 8015632:	008b      	lsls	r3, r1, #2
 8015634:	4641      	mov	r1, r8
 8015636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801563a:	4641      	mov	r1, r8
 801563c:	008a      	lsls	r2, r1, #2
 801563e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8015642:	f7eb fb29 	bl	8000c98 <__aeabi_uldivmod>
 8015646:	4602      	mov	r2, r0
 8015648:	460b      	mov	r3, r1
 801564a:	4611      	mov	r1, r2
 801564c:	4b38      	ldr	r3, [pc, #224]	@ (8015730 <UART_SetConfig+0x4e4>)
 801564e:	fba3 2301 	umull	r2, r3, r3, r1
 8015652:	095b      	lsrs	r3, r3, #5
 8015654:	2264      	movs	r2, #100	@ 0x64
 8015656:	fb02 f303 	mul.w	r3, r2, r3
 801565a:	1acb      	subs	r3, r1, r3
 801565c:	011b      	lsls	r3, r3, #4
 801565e:	3332      	adds	r3, #50	@ 0x32
 8015660:	4a33      	ldr	r2, [pc, #204]	@ (8015730 <UART_SetConfig+0x4e4>)
 8015662:	fba2 2303 	umull	r2, r3, r2, r3
 8015666:	095b      	lsrs	r3, r3, #5
 8015668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801566c:	441c      	add	r4, r3
 801566e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015672:	2200      	movs	r2, #0
 8015674:	673b      	str	r3, [r7, #112]	@ 0x70
 8015676:	677a      	str	r2, [r7, #116]	@ 0x74
 8015678:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801567c:	4642      	mov	r2, r8
 801567e:	464b      	mov	r3, r9
 8015680:	1891      	adds	r1, r2, r2
 8015682:	60b9      	str	r1, [r7, #8]
 8015684:	415b      	adcs	r3, r3
 8015686:	60fb      	str	r3, [r7, #12]
 8015688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801568c:	4641      	mov	r1, r8
 801568e:	1851      	adds	r1, r2, r1
 8015690:	6039      	str	r1, [r7, #0]
 8015692:	4649      	mov	r1, r9
 8015694:	414b      	adcs	r3, r1
 8015696:	607b      	str	r3, [r7, #4]
 8015698:	f04f 0200 	mov.w	r2, #0
 801569c:	f04f 0300 	mov.w	r3, #0
 80156a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80156a4:	4659      	mov	r1, fp
 80156a6:	00cb      	lsls	r3, r1, #3
 80156a8:	4651      	mov	r1, sl
 80156aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80156ae:	4651      	mov	r1, sl
 80156b0:	00ca      	lsls	r2, r1, #3
 80156b2:	4610      	mov	r0, r2
 80156b4:	4619      	mov	r1, r3
 80156b6:	4603      	mov	r3, r0
 80156b8:	4642      	mov	r2, r8
 80156ba:	189b      	adds	r3, r3, r2
 80156bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80156be:	464b      	mov	r3, r9
 80156c0:	460a      	mov	r2, r1
 80156c2:	eb42 0303 	adc.w	r3, r2, r3
 80156c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80156c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	2200      	movs	r2, #0
 80156d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80156d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80156d4:	f04f 0200 	mov.w	r2, #0
 80156d8:	f04f 0300 	mov.w	r3, #0
 80156dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80156e0:	4649      	mov	r1, r9
 80156e2:	008b      	lsls	r3, r1, #2
 80156e4:	4641      	mov	r1, r8
 80156e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80156ea:	4641      	mov	r1, r8
 80156ec:	008a      	lsls	r2, r1, #2
 80156ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80156f2:	f7eb fad1 	bl	8000c98 <__aeabi_uldivmod>
 80156f6:	4602      	mov	r2, r0
 80156f8:	460b      	mov	r3, r1
 80156fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015730 <UART_SetConfig+0x4e4>)
 80156fc:	fba3 1302 	umull	r1, r3, r3, r2
 8015700:	095b      	lsrs	r3, r3, #5
 8015702:	2164      	movs	r1, #100	@ 0x64
 8015704:	fb01 f303 	mul.w	r3, r1, r3
 8015708:	1ad3      	subs	r3, r2, r3
 801570a:	011b      	lsls	r3, r3, #4
 801570c:	3332      	adds	r3, #50	@ 0x32
 801570e:	4a08      	ldr	r2, [pc, #32]	@ (8015730 <UART_SetConfig+0x4e4>)
 8015710:	fba2 2303 	umull	r2, r3, r2, r3
 8015714:	095b      	lsrs	r3, r3, #5
 8015716:	f003 020f 	and.w	r2, r3, #15
 801571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	4422      	add	r2, r4
 8015722:	609a      	str	r2, [r3, #8]
}
 8015724:	bf00      	nop
 8015726:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801572a:	46bd      	mov	sp, r7
 801572c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015730:	51eb851f 	.word	0x51eb851f

08015734 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	af00      	add	r7, sp, #0
//
  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 8015738:	f000 f81a 	bl	8015770 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
//
  /* USER CODE END MEMS_Init_PostTreatment */
}
 801573c:	bf00      	nop
 801573e:	bd80      	pop	{r7, pc}

08015740 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *              the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015740:	b480      	push	{r7}
 8015742:	b083      	sub	sp, #12
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681a      	ldr	r2, [r3, #0]
 801574c:	4b06      	ldr	r3, [pc, #24]	@ (8015768 <HAL_TIM_PeriodElapsedCallback+0x28>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	429a      	cmp	r2, r3
 8015752:	d102      	bne.n	801575a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8015754:	4b05      	ldr	r3, [pc, #20]	@ (801576c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8015756:	2201      	movs	r2, #1
 8015758:	701a      	strb	r2, [r3, #0]
  }
}
 801575a:	bf00      	nop
 801575c:	370c      	adds	r7, #12
 801575e:	46bd      	mov	sp, r7
 8015760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop
 8015768:	20000e58 	.word	0x20000e58
 801576c:	2000159c 	.word	0x2000159c

08015770 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b086      	sub	sp, #24
 8015774:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8015776:	2101      	movs	r1, #1
 8015778:	2000      	movs	r0, #0
 801577a:	f7f9 f8eb 	bl	800e954 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 801577e:	2000      	movs	r0, #0
 8015780:	f7f9 f93c 	bl	800e9fc <BSP_PB_GetState>
 8015784:	4603      	mov	r3, r0
 8015786:	2b00      	cmp	r3, #0
 8015788:	bf0c      	ite	eq
 801578a:	2301      	moveq	r3, #1
 801578c:	2300      	movne	r3, #0
 801578e:	b2db      	uxtb	r3, r3
 8015790:	461a      	mov	r2, r3
 8015792:	4b32      	ldr	r3, [pc, #200]	@ (801585c <MX_DataLogFusion_Init+0xec>)
 8015794:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8015796:	2000      	movs	r0, #0
 8015798:	f7f9 f85c 	bl	800e854 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 801579c:	2000      	movs	r0, #0
 801579e:	f7f9 f98f 	bl	800eac0 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 80157a2:	f7ec fd4d 	bl	8002240 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 80157a6:	2064      	movs	r0, #100	@ 0x64
 80157a8:	f000 f88e 	bl	80158c8 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 80157ac:	f000 f862 	bl	8015874 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 80157b0:	f000 f9a0 	bl	8015af4 <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 80157b4:	492a      	ldr	r1, [pc, #168]	@ (8015860 <MX_DataLogFusion_Init+0xf0>)
 80157b6:	482b      	ldr	r0, [pc, #172]	@ (8015864 <MX_DataLogFusion_Init+0xf4>)
 80157b8:	f000 fa24 	bl	8015c04 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 80157bc:	200a      	movs	r0, #10
 80157be:	f000 fa31 	bl	8015c24 <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 80157c2:	1d3b      	adds	r3, r7, #4
 80157c4:	4618      	mov	r0, r3
 80157c6:	f007 f90b 	bl	801c9e0 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 80157ca:	7c3b      	ldrb	r3, [r7, #16]
 80157cc:	2b03      	cmp	r3, #3
 80157ce:	d132      	bne.n	8015836 <MX_DataLogFusion_Init+0xc6>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80157d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80157d4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8015868 <MX_DataLogFusion_Init+0xf8>
 80157d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80157dc:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 80157e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80157e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157e8:	ee17 2a90 	vmov	r2, s15
 80157ec:	4b1f      	ldr	r3, [pc, #124]	@ (801586c <MX_DataLogFusion_Init+0xfc>)
 80157ee:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80157f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80157f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8015868 <MX_DataLogFusion_Init+0xf8>
 80157f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80157fc:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 8015800:	edd7 7a05 	vldr	s15, [r7, #20]
 8015804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015808:	ee17 2a90 	vmov	r2, s15
 801580c:	4b17      	ldr	r3, [pc, #92]	@ (801586c <MX_DataLogFusion_Init+0xfc>)
 801580e:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8015810:	edd7 7a03 	vldr	s15, [r7, #12]
 8015814:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8015868 <MX_DataLogFusion_Init+0xf8>
 8015818:	ee67 7a87 	vmul.f32	s15, s15, s14
 801581c:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 8015820:	edd7 7a05 	vldr	s15, [r7, #20]
 8015824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015828:	ee17 2a90 	vmov	r2, s15
 801582c:	4b0f      	ldr	r3, [pc, #60]	@ (801586c <MX_DataLogFusion_Init+0xfc>)
 801582e:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 8015830:	4b0f      	ldr	r3, [pc, #60]	@ (8015870 <MX_DataLogFusion_Init+0x100>)
 8015832:	2201      	movs	r2, #1
 8015834:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 8015836:	f000 f87b 	bl	8015930 <DWT_Init>

  BSP_LED_On(LED2);
 801583a:	2000      	movs	r0, #0
 801583c:	f7f9 f81c 	bl	800e878 <BSP_LED_On>
  HAL_Delay(500);
 8015840:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8015844:	f7f9 fa7e 	bl	800ed44 <HAL_Delay>
  BSP_LED_Off(LED2);
 8015848:	2000      	movs	r0, #0
 801584a:	f7f9 f82b 	bl	800e8a4 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 801584e:	f000 f887 	bl	8015960 <UART_StartReceiveMsg>
}
 8015852:	bf00      	nop
 8015854:	3718      	adds	r7, #24
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	20001744 	.word	0x20001744
 8015860:	20001598 	.word	0x20001598
 8015864:	20001574 	.word	0x20001574
 8015868:	43fa0000 	.word	0x43fa0000
 801586c:	2000174c 	.word	0x2000174c
 8015870:	20001758 	.word	0x20001758

08015874 <Init_Sensors>:
  * @brief  Initialize all sensors
  * @param  None
  * @retval None
  */
static void Init_Sensors(void)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8015878:	f000 f88a 	bl	8015990 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 801587c:	f000 f890 	bl	80159a0 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8015880:	f000 f896 	bl	80159b0 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 8015884:	f000 f89c 	bl	80159c0 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8015888:	f000 f8a2 	bl	80159d0 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 801588c:	f000 f8a8 	bl	80159e0 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8015890:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80158a4 <Init_Sensors+0x30>
 8015894:	f000 f8d3 	bl	8015a3e <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8015898:	2004      	movs	r0, #4
 801589a:	f000 f8df 	bl	8015a5c <BSP_SENSOR_ACC_SetFullScale>
}
 801589e:	bf00      	nop
 80158a0:	bd80      	pop	{r7, pc}
 80158a2:	bf00      	nop
 80158a4:	42c80000 	.word	0x42c80000

080158a8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	4603      	mov	r3, r0
 80158b0:	71fb      	strb	r3, [r7, #7]
  MagCalRequest = 1U;
 80158b2:	4b04      	ldr	r3, [pc, #16]	@ (80158c4 <BSP_PB_Callback+0x1c>)
 80158b4:	2201      	movs	r2, #1
 80158b6:	701a      	strb	r2, [r3, #0]
}
 80158b8:	bf00      	nop
 80158ba:	370c      	adds	r7, #12
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr
 80158c4:	20001748 	.word	0x20001748

080158c8 <TIM_Config>:
  * @brief  Timer configuration
  * @param  Freq the desired Timer frequency
  * @retval None
  */
static void TIM_Config(uint32_t Freq)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b086      	sub	sp, #24
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 80158d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80158d4:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 80158d6:	4b14      	ldr	r3, [pc, #80]	@ (8015928 <TIM_Config+0x60>)
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80158e0:	3b01      	subs	r3, #1
 80158e2:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80158e4:	697a      	ldr	r2, [r7, #20]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80158ec:	3b01      	subs	r3, #1
 80158ee:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80158f0:	4a0e      	ldr	r2, [pc, #56]	@ (801592c <TIM_Config+0x64>)
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80158f6:	4b0d      	ldr	r3, [pc, #52]	@ (801592c <TIM_Config+0x64>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80158fc:	4a0b      	ldr	r2, [pc, #44]	@ (801592c <TIM_Config+0x64>)
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015902:	4b0a      	ldr	r3, [pc, #40]	@ (801592c <TIM_Config+0x64>)
 8015904:	2200      	movs	r2, #0
 8015906:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015908:	4b08      	ldr	r3, [pc, #32]	@ (801592c <TIM_Config+0x64>)
 801590a:	2200      	movs	r2, #0
 801590c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 801590e:	4807      	ldr	r0, [pc, #28]	@ (801592c <TIM_Config+0x64>)
 8015910:	f7fe f8f2 	bl	8013af8 <HAL_TIM_Base_Init>
 8015914:	4603      	mov	r3, r0
 8015916:	2b00      	cmp	r3, #0
 8015918:	d001      	beq.n	801591e <TIM_Config+0x56>
  {
    Error_Handler();
 801591a:	f7ef fccd 	bl	80052b8 <Error_Handler>
  }
}
 801591e:	bf00      	nop
 8015920:	3718      	adds	r7, #24
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop
 8015928:	2000013c 	.word	0x2000013c
 801592c:	20000e58 	.word	0x20000e58

08015930 <DWT_Init>:
  * @brief  Initialize DWT register for counting clock cycles purpose
  * @param  None
  * @retval None
  */
static void DWT_Init(void)
{
 8015930:	b480      	push	{r7}
 8015932:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8015934:	4b08      	ldr	r3, [pc, #32]	@ (8015958 <DWT_Init+0x28>)
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	4a07      	ldr	r2, [pc, #28]	@ (8015958 <DWT_Init+0x28>)
 801593a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801593e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8015940:	4b06      	ldr	r3, [pc, #24]	@ (801595c <DWT_Init+0x2c>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4a05      	ldr	r2, [pc, #20]	@ (801595c <DWT_Init+0x2c>)
 8015946:	f023 0301 	bic.w	r3, r3, #1
 801594a:	6013      	str	r3, [r2, #0]
}
 801594c:	bf00      	nop
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr
 8015956:	bf00      	nop
 8015958:	e000edf0 	.word	0xe000edf0
 801595c:	e0001000 	.word	0xe0001000

08015960 <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8015964:	4b08      	ldr	r3, [pc, #32]	@ (8015988 <UART_StartReceiveMsg+0x28>)
 8015966:	4a09      	ldr	r2, [pc, #36]	@ (801598c <UART_StartReceiveMsg+0x2c>)
 8015968:	629a      	str	r2, [r3, #40]	@ 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 801596a:	4b07      	ldr	r3, [pc, #28]	@ (8015988 <UART_StartReceiveMsg+0x28>)
 801596c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015970:	859a      	strh	r2, [r3, #44]	@ 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8015972:	4b05      	ldr	r3, [pc, #20]	@ (8015988 <UART_StartReceiveMsg+0x28>)
 8015974:	2200      	movs	r2, #0
 8015976:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8015978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801597c:	4903      	ldr	r1, [pc, #12]	@ (801598c <UART_StartReceiveMsg+0x2c>)
 801597e:	4802      	ldr	r0, [pc, #8]	@ (8015988 <UART_StartReceiveMsg+0x28>)
 8015980:	f7ff f997 	bl	8014cb2 <HAL_UART_Receive_DMA>
}
 8015984:	bf00      	nop
 8015986:	bd80      	pop	{r7, pc}
 8015988:	20001524 	.word	0x20001524
 801598c:	2000175c 	.word	0x2000175c

08015990 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO);
 8015994:	2102      	movs	r1, #2
 8015996:	2001      	movs	r0, #1
 8015998:	f7f8 fa84 	bl	800dea4 <IKS4A1_MOTION_SENSOR_Init>
}
 801599c:	bf00      	nop
 801599e:	bd80      	pop	{r7, pc}

080159a0 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_GYRO);
 80159a4:	2101      	movs	r1, #1
 80159a6:	2001      	movs	r0, #1
 80159a8:	f7f8 fa7c 	bl	800dea4 <IKS4A1_MOTION_SENSOR_Init>
}
 80159ac:	bf00      	nop
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	af00      	add	r7, sp, #0
  (void)IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 80159b4:	2104      	movs	r1, #4
 80159b6:	2000      	movs	r0, #0
 80159b8:	f7f8 fa74 	bl	800dea4 <IKS4A1_MOTION_SENSOR_Init>
}
 80159bc:	bf00      	nop
 80159be:	bd80      	pop	{r7, pc}

080159c0 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_PRESSURE);
 80159c4:	2102      	movs	r1, #2
 80159c6:	2001      	movs	r0, #1
 80159c8:	f7f7 ff08 	bl	800d7dc <IKS4A1_ENV_SENSOR_Init>
}
 80159cc:	bf00      	nop
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 80159d4:	2101      	movs	r1, #1
 80159d6:	2000      	movs	r0, #0
 80159d8:	f7f7 ff00 	bl	800d7dc <IKS4A1_ENV_SENSOR_Init>
}
 80159dc:	bf00      	nop
 80159de:	bd80      	pop	{r7, pc}

080159e0 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	af00      	add	r7, sp, #0
  (void)IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_HUMIDITY);
 80159e4:	2104      	movs	r1, #4
 80159e6:	2002      	movs	r0, #2
 80159e8:	f7f7 fef8 	bl	800d7dc <IKS4A1_ENV_SENSOR_Init>
}
 80159ec:	bf00      	nop
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, Axes);
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	2102      	movs	r1, #2
 80159fc:	2001      	movs	r0, #1
 80159fe:	f7f8 fb83 	bl	800e108 <IKS4A1_MOTION_SENSOR_GetAxes>
}
 8015a02:	bf00      	nop
 8015a04:	3708      	adds	r7, #8
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}

08015a0a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 8015a0a:	b580      	push	{r7, lr}
 8015a0c:	b082      	sub	sp, #8
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LSM6DSV16X_0, MOTION_GYRO, Axes);
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	2101      	movs	r1, #1
 8015a16:	2001      	movs	r0, #1
 8015a18:	f7f8 fb76 	bl	800e108 <IKS4A1_MOTION_SENSOR_GetAxes>
}
 8015a1c:	bf00      	nop
 8015a1e:	3708      	adds	r7, #8
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}

08015a24 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LIS2MDL_0, MOTION_MAGNETO, Axes);
 8015a2c:	687a      	ldr	r2, [r7, #4]
 8015a2e:	2104      	movs	r1, #4
 8015a30:	2000      	movs	r0, #0
 8015a32:	f7f8 fb69 	bl	800e108 <IKS4A1_MOTION_SENSOR_GetAxes>
}
 8015a36:	bf00      	nop
 8015a38:	3708      	adds	r7, #8
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}

08015a3e <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8015a3e:	b580      	push	{r7, lr}
 8015a40:	b082      	sub	sp, #8
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_SetOutputDataRate(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, Odr);
 8015a48:	ed97 0a01 	vldr	s0, [r7, #4]
 8015a4c:	2102      	movs	r1, #2
 8015a4e:	2001      	movs	r0, #1
 8015a50:	f7f8 fb9e 	bl	800e190 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
}
 8015a54:	bf00      	nop
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  (void)IKS4A1_MOTION_SENSOR_SetFullScale(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, Fullscale);
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	2102      	movs	r1, #2
 8015a68:	2001      	movs	r0, #1
 8015a6a:	f7f8 fbd7 	bl	800e21c <IKS4A1_MOTION_SENSOR_SetFullScale>
}
 8015a6e:	bf00      	nop
 8015a70:	3708      	adds	r7, #8
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}

08015a76 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8015a76:	b480      	push	{r7}
 8015a78:	b083      	sub	sp, #12
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	2273      	movs	r2, #115	@ 0x73
 8015a82:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	3301      	adds	r3, #1
 8015a88:	2265      	movs	r2, #101	@ 0x65
 8015a8a:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	3302      	adds	r3, #2
 8015a90:	2275      	movs	r2, #117	@ 0x75
 8015a92:	701a      	strb	r2, [r3, #0]
}
 8015a94:	bf00      	nop
 8015a96:	370c      	adds	r7, #12
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9e:	4770      	bx	lr

08015aa0 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b083      	sub	sp, #12
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2273      	movs	r2, #115	@ 0x73
 8015aac:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	2265      	movs	r2, #101	@ 0x65
 8015ab4:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	3302      	adds	r3, #2
 8015aba:	2275      	movs	r2, #117	@ 0x75
 8015abc:	701a      	strb	r2, [r3, #0]
}
 8015abe:	bf00      	nop
 8015ac0:	370c      	adds	r7, #12
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr

08015aca <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8015aca:	b480      	push	{r7}
 8015acc:	b083      	sub	sp, #12
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	226e      	movs	r2, #110	@ 0x6e
 8015ad6:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	3301      	adds	r3, #1
 8015adc:	2265      	movs	r2, #101	@ 0x65
 8015ade:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	3302      	adds	r3, #2
 8015ae4:	2275      	movs	r2, #117	@ 0x75
 8015ae6:	701a      	strb	r2, [r3, #0]
}
 8015ae8:	bf00      	nop
 8015aea:	370c      	adds	r7, #12
 8015aec:	46bd      	mov	sp, r7
 8015aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af2:	4770      	bx	lr

08015af4 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8015af8:	f006 fbfa 	bl	801c2f0 <MotionFX_GetStateSize>
 8015afc:	4603      	mov	r3, r0
 8015afe:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 8015b02:	d901      	bls.n	8015b08 <MotionFX_manager_init+0x14>
    Error_Handler();
 8015b04:	f7ef fbd8 	bl	80052b8 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8015b08:	482a      	ldr	r0, [pc, #168]	@ (8015bb4 <MotionFX_manager_init+0xc0>)
 8015b0a:	f006 fbf5 	bl	801c2f8 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8015b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	4619      	mov	r1, r3
 8015b14:	4827      	ldr	r0, [pc, #156]	@ (8015bb4 <MotionFX_manager_init+0xc0>)
 8015b16:	f006 fcf5 	bl	801c504 <MotionFX_getKnobs>

  strcpy(ipKnobs->acc_orientation, "NED");
 8015b1a:	4b27      	ldr	r3, [pc, #156]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	331d      	adds	r3, #29
 8015b20:	4a26      	ldr	r2, [pc, #152]	@ (8015bbc <MotionFX_manager_init+0xc8>)
 8015b22:	6810      	ldr	r0, [r2, #0]
 8015b24:	6018      	str	r0, [r3, #0]
  strcpy(ipKnobs->gyro_orientation, "NED");
 8015b26:	4b24      	ldr	r3, [pc, #144]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	3321      	adds	r3, #33	@ 0x21
 8015b2c:	4a23      	ldr	r2, [pc, #140]	@ (8015bbc <MotionFX_manager_init+0xc8>)
 8015b2e:	6810      	ldr	r0, [r2, #0]
 8015b30:	6018      	str	r0, [r3, #0]
  strcpy(ipKnobs->mag_orientation, "NED");
 8015b32:	4b21      	ldr	r3, [pc, #132]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	3325      	adds	r3, #37	@ 0x25
 8015b38:	4a20      	ldr	r2, [pc, #128]	@ (8015bbc <MotionFX_manager_init+0xc8>)
 8015b3a:	6810      	ldr	r0, [r2, #0]
 8015b3c:	6018      	str	r0, [r3, #0]

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8015b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	331d      	adds	r3, #29
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7ff ff96 	bl	8015a76 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8015b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	3321      	adds	r3, #33	@ 0x21
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7ff ffa5 	bl	8015aa0 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8015b56:	4b18      	ldr	r3, [pc, #96]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	3325      	adds	r3, #37	@ 0x25
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7ff ffb4 	bl	8015aca <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8015b62:	4b15      	ldr	r3, [pc, #84]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	4a16      	ldr	r2, [pc, #88]	@ (8015bc0 <MotionFX_manager_init+0xcc>)
 8015b68:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8015b6a:	4b13      	ldr	r3, [pc, #76]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	4a15      	ldr	r2, [pc, #84]	@ (8015bc4 <MotionFX_manager_init+0xd0>)
 8015b70:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8015b72:	4b11      	ldr	r3, [pc, #68]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	4a14      	ldr	r2, [pc, #80]	@ (8015bc8 <MotionFX_manager_init+0xd4>)
 8015b78:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_NED;
 8015b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2200      	movs	r2, #0
 8015b80:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  ipKnobs->LMode = 1;
 8015b84:	4b0c      	ldr	r3, [pc, #48]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2201      	movs	r2, #1
 8015b8a:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8015b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2201      	movs	r2, #1
 8015b92:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8015b94:	4b08      	ldr	r3, [pc, #32]	@ (8015bb8 <MotionFX_manager_init+0xc4>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	4619      	mov	r1, r3
 8015b9a:	4806      	ldr	r0, [pc, #24]	@ (8015bb4 <MotionFX_manager_init+0xc0>)
 8015b9c:	f006 fc66 	bl	801c46c <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8015ba0:	2100      	movs	r1, #0
 8015ba2:	4804      	ldr	r0, [pc, #16]	@ (8015bb4 <MotionFX_manager_init+0xc0>)
 8015ba4:	f006 fcec 	bl	801c580 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8015ba8:	2100      	movs	r1, #0
 8015baa:	4802      	ldr	r0, [pc, #8]	@ (8015bb4 <MotionFX_manager_init+0xc0>)
 8015bac:	f006 fd08 	bl	801c5c0 <MotionFX_enable_9X>
}
 8015bb0:	bf00      	nop
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	2000198c 	.word	0x2000198c
 8015bb8:	2000034c 	.word	0x2000034c
 8015bbc:	080238f0 	.word	0x080238f0
 8015bc0:	3ac88a48 	.word	0x3ac88a48
 8015bc4:	3b83126f 	.word	0x3b83126f
 8015bc8:	3b449ba6 	.word	0x3b449ba6

08015bcc <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af02      	add	r7, sp, #8
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	60b9      	str	r1, [r7, #8]
 8015bd6:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8015bda:	1d3b      	adds	r3, r7, #4
 8015bdc:	68fa      	ldr	r2, [r7, #12]
 8015bde:	68b9      	ldr	r1, [r7, #8]
 8015be0:	4807      	ldr	r0, [pc, #28]	@ (8015c00 <MotionFX_manager_run+0x34>)
 8015be2:	f006 fd1d 	bl	801c620 <MotionFX_propagate>
  MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8015be6:	1d3b      	adds	r3, r7, #4
 8015be8:	2200      	movs	r2, #0
 8015bea:	9200      	str	r2, [sp, #0]
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	68b9      	ldr	r1, [r7, #8]
 8015bf0:	4803      	ldr	r0, [pc, #12]	@ (8015c00 <MotionFX_manager_run+0x34>)
 8015bf2:	f006 fd05 	bl	801c600 <MotionFX_update>
}
 8015bf6:	bf00      	nop
 8015bf8:	3710      	adds	r7, #16
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	bf00      	nop
 8015c00:	2000198c 	.word	0x2000198c

08015c04 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f006 ff2c 	bl	801ca6c <MotionFX_GetLibVersion>
 8015c14:	4603      	mov	r3, r0
 8015c16:	461a      	mov	r2, r3
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	601a      	str	r2, [r3, #0]
}
 8015c1c:	bf00      	nop
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}

08015c24 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8015c2c:	2101      	movs	r1, #1
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f006 fe46 	bl	801c8c0 <MotionFX_MagCal_init>
}
 8015c34:	bf00      	nop
 8015c36:	3708      	adds	r7, #8
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <DataHist_parameters>:
 8015c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015c42:	f8dd c018 	ldr.w	ip, [sp, #24]
 8015c46:	7020      	strb	r0, [r4, #0]
 8015c48:	6808      	ldr	r0, [r1, #0]
 8015c4a:	6060      	str	r0, [r4, #4]
 8015c4c:	6848      	ldr	r0, [r1, #4]
 8015c4e:	60a0      	str	r0, [r4, #8]
 8015c50:	6888      	ldr	r0, [r1, #8]
 8015c52:	60e0      	str	r0, [r4, #12]
 8015c54:	68c8      	ldr	r0, [r1, #12]
 8015c56:	6120      	str	r0, [r4, #16]
 8015c58:	6908      	ldr	r0, [r1, #16]
 8015c5a:	6160      	str	r0, [r4, #20]
 8015c5c:	6948      	ldr	r0, [r1, #20]
 8015c5e:	61a0      	str	r0, [r4, #24]
 8015c60:	6988      	ldr	r0, [r1, #24]
 8015c62:	61e0      	str	r0, [r4, #28]
 8015c64:	69c8      	ldr	r0, [r1, #28]
 8015c66:	6220      	str	r0, [r4, #32]
 8015c68:	6a09      	ldr	r1, [r1, #32]
 8015c6a:	6261      	str	r1, [r4, #36]	@ 0x24
 8015c6c:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 8015c70:	8811      	ldrh	r1, [r2, #0]
 8015c72:	edd2 7a01 	vldr	s15, [r2, #4]
 8015c76:	8521      	strh	r1, [r4, #40]	@ 0x28
 8015c78:	f102 0e80 	add.w	lr, r2, #128	@ 0x80
 8015c7c:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 8015c80:	2700      	movs	r7, #0
 8015c82:	f1ae 0278 	sub.w	r2, lr, #120	@ 0x78
 8015c86:	4641      	mov	r1, r8
 8015c88:	f852 0b04 	ldr.w	r0, [r2], #4
 8015c8c:	f841 0b04 	str.w	r0, [r1], #4
 8015c90:	4572      	cmp	r2, lr
 8015c92:	d1f9      	bne.n	8015c88 <DataHist_parameters+0x4c>
 8015c94:	371e      	adds	r7, #30
 8015c96:	2f5a      	cmp	r7, #90	@ 0x5a
 8015c98:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 8015c9c:	f102 0e78 	add.w	lr, r2, #120	@ 0x78
 8015ca0:	d1ef      	bne.n	8015c82 <DataHist_parameters+0x46>
 8015ca2:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 8015ca6:	881a      	ldrh	r2, [r3, #0]
 8015ca8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8015cac:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 8015cb0:	f103 0e80 	add.w	lr, r3, #128	@ 0x80
 8015cb4:	f504 77d0 	add.w	r7, r4, #416	@ 0x1a0
 8015cb8:	2000      	movs	r0, #0
 8015cba:	f1ae 0378 	sub.w	r3, lr, #120	@ 0x78
 8015cbe:	463a      	mov	r2, r7
 8015cc0:	f853 1b04 	ldr.w	r1, [r3], #4
 8015cc4:	f842 1b04 	str.w	r1, [r2], #4
 8015cc8:	4573      	cmp	r3, lr
 8015cca:	d1f9      	bne.n	8015cc0 <DataHist_parameters+0x84>
 8015ccc:	301e      	adds	r0, #30
 8015cce:	285a      	cmp	r0, #90	@ 0x5a
 8015cd0:	f107 0778 	add.w	r7, r7, #120	@ 0x78
 8015cd4:	f103 0e78 	add.w	lr, r3, #120	@ 0x78
 8015cd8:	d1ef      	bne.n	8015cba <DataHist_parameters+0x7e>
 8015cda:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 8015cde:	f8bc 3000 	ldrh.w	r3, [ip]
 8015ce2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8015ce6:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 8015cea:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 8015cee:	f504 7e44 	add.w	lr, r4, #784	@ 0x310
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	f1ac 0378 	sub.w	r3, ip, #120	@ 0x78
 8015cf8:	4672      	mov	r2, lr
 8015cfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8015cfe:	f842 1b04 	str.w	r1, [r2], #4
 8015d02:	4563      	cmp	r3, ip
 8015d04:	d1f9      	bne.n	8015cfa <DataHist_parameters+0xbe>
 8015d06:	301e      	adds	r0, #30
 8015d08:	285a      	cmp	r0, #90	@ 0x5a
 8015d0a:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 8015d0e:	f103 0c78 	add.w	ip, r3, #120	@ 0x78
 8015d12:	d1ef      	bne.n	8015cf4 <DataHist_parameters+0xb8>
 8015d14:	f8c4 730c 	str.w	r7, [r4, #780]	@ 0x30c
 8015d18:	8833      	ldrh	r3, [r6, #0]
 8015d1a:	6877      	ldr	r7, [r6, #4]
 8015d1c:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 8015d20:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 8015d24:	f504 6c90 	add.w	ip, r4, #1152	@ 0x480
 8015d28:	2600      	movs	r6, #0
 8015d2a:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 8015d2e:	4662      	mov	r2, ip
 8015d30:	f853 1b04 	ldr.w	r1, [r3], #4
 8015d34:	f842 1b04 	str.w	r1, [r2], #4
 8015d38:	4283      	cmp	r3, r0
 8015d3a:	d1f9      	bne.n	8015d30 <DataHist_parameters+0xf4>
 8015d3c:	361e      	adds	r6, #30
 8015d3e:	2e5a      	cmp	r6, #90	@ 0x5a
 8015d40:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 8015d44:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8015d48:	d1ef      	bne.n	8015d2a <DataHist_parameters+0xee>
 8015d4a:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8015d4e:	69aa      	ldr	r2, [r5, #24]
 8015d50:	605f      	str	r7, [r3, #4]
 8015d52:	f504 63bd 	add.w	r3, r4, #1512	@ 0x5e8
 8015d56:	7829      	ldrb	r1, [r5, #0]
 8015d58:	f884 15e8 	strb.w	r1, [r4, #1512]	@ 0x5e8
 8015d5c:	619a      	str	r2, [r3, #24]
 8015d5e:	6869      	ldr	r1, [r5, #4]
 8015d60:	6059      	str	r1, [r3, #4]
 8015d62:	f504 62be 	add.w	r2, r4, #1520	@ 0x5f0
 8015d66:	68a9      	ldr	r1, [r5, #8]
 8015d68:	6011      	str	r1, [r2, #0]
 8015d6a:	f204 52f4 	addw	r2, r4, #1524	@ 0x5f4
 8015d6e:	68e9      	ldr	r1, [r5, #12]
 8015d70:	6011      	str	r1, [r2, #0]
 8015d72:	f504 62bf 	add.w	r2, r4, #1528	@ 0x5f8
 8015d76:	6929      	ldr	r1, [r5, #16]
 8015d78:	6011      	str	r1, [r2, #0]
 8015d7a:	f204 52fc 	addw	r2, r4, #1532	@ 0x5fc
 8015d7e:	6969      	ldr	r1, [r5, #20]
 8015d80:	6011      	str	r1, [r2, #0]
 8015d82:	69e9      	ldr	r1, [r5, #28]
 8015d84:	61d9      	str	r1, [r3, #28]
 8015d86:	f504 62c1 	add.w	r2, r4, #1544	@ 0x608
 8015d8a:	6a2b      	ldr	r3, [r5, #32]
 8015d8c:	6013      	str	r3, [r2, #0]
 8015d8e:	f204 630c 	addw	r3, r4, #1548	@ 0x60c
 8015d92:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015d94:	601a      	str	r2, [r3, #0]
 8015d96:	f504 63c2 	add.w	r3, r4, #1552	@ 0x610
 8015d9a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8015d9c:	601a      	str	r2, [r3, #0]
 8015d9e:	f204 6414 	addw	r4, r4, #1556	@ 0x614
 8015da2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015da4:	6023      	str	r3, [r4, #0]
 8015da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015daa:	bf00      	nop

08015dac <rotVect>:
 8015dac:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8015db0:	ed92 7a01 	vldr	s14, [r2, #4]
 8015db4:	ed92 6a00 	vldr	s12, [r2]
 8015db8:	ee07 3a90 	vmov	s15, r3
 8015dbc:	f991 3000 	ldrsb.w	r3, [r1]
 8015dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dc4:	ee06 3a90 	vmov	s13, r3
 8015dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015dcc:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8015dd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015dd4:	ee07 3a10 	vmov	s14, r3
 8015dd8:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015ddc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015de0:	edd2 6a02 	vldr	s13, [r2, #8]
 8015de4:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015de8:	edc0 7a00 	vstr	s15, [r0]
 8015dec:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8015df0:	ed92 7a01 	vldr	s14, [r2, #4]
 8015df4:	ed92 6a00 	vldr	s12, [r2]
 8015df8:	ee07 3a90 	vmov	s15, r3
 8015dfc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8015e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e04:	ee06 3a90 	vmov	s13, r3
 8015e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e0c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8015e10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015e14:	ee07 3a10 	vmov	s14, r3
 8015e18:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015e1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e20:	edd2 6a02 	vldr	s13, [r2, #8]
 8015e24:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015e28:	edc0 7a01 	vstr	s15, [r0, #4]
 8015e2c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8015e30:	ed92 7a01 	vldr	s14, [r2, #4]
 8015e34:	ed92 6a00 	vldr	s12, [r2]
 8015e38:	ee07 3a90 	vmov	s15, r3
 8015e3c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8015e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e44:	ee06 3a90 	vmov	s13, r3
 8015e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015e50:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8015e54:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015e58:	ee07 3a10 	vmov	s14, r3
 8015e5c:	edd2 6a02 	vldr	s13, [r2, #8]
 8015e60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e64:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015e68:	edc0 7a02 	vstr	s15, [r0, #8]
 8015e6c:	4770      	bx	lr
 8015e6e:	bf00      	nop

08015e70 <findAxis>:
 8015e70:	f990 3000 	ldrsb.w	r3, [r0]
 8015e74:	2b01      	cmp	r3, #1
 8015e76:	d027      	beq.n	8015ec8 <findAxis+0x58>
 8015e78:	3301      	adds	r3, #1
 8015e7a:	d00e      	beq.n	8015e9a <findAxis+0x2a>
 8015e7c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	d053      	beq.n	8015f2c <findAxis+0xbc>
 8015e84:	3301      	adds	r3, #1
 8015e86:	d048      	beq.n	8015f1a <findAxis+0xaa>
 8015e88:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	d053      	beq.n	8015f38 <findAxis+0xc8>
 8015e90:	3301      	adds	r3, #1
 8015e92:	d104      	bne.n	8015e9e <findAxis+0x2e>
 8015e94:	2364      	movs	r3, #100	@ 0x64
 8015e96:	700b      	strb	r3, [r1, #0]
 8015e98:	e001      	b.n	8015e9e <findAxis+0x2e>
 8015e9a:	2377      	movs	r3, #119	@ 0x77
 8015e9c:	700b      	strb	r3, [r1, #0]
 8015e9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d016      	beq.n	8015ed4 <findAxis+0x64>
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	d02e      	beq.n	8015f08 <findAxis+0x98>
 8015eaa:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8015eae:	2b01      	cmp	r3, #1
 8015eb0:	d039      	beq.n	8015f26 <findAxis+0xb6>
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	d034      	beq.n	8015f20 <findAxis+0xb0>
 8015eb6:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	d03f      	beq.n	8015f3e <findAxis+0xce>
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	d10a      	bne.n	8015ed8 <findAxis+0x68>
 8015ec2:	2364      	movs	r3, #100	@ 0x64
 8015ec4:	704b      	strb	r3, [r1, #1]
 8015ec6:	e007      	b.n	8015ed8 <findAxis+0x68>
 8015ec8:	2365      	movs	r3, #101	@ 0x65
 8015eca:	700b      	strb	r3, [r1, #0]
 8015ecc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d1e8      	bne.n	8015ea6 <findAxis+0x36>
 8015ed4:	2365      	movs	r3, #101	@ 0x65
 8015ed6:	704b      	strb	r3, [r1, #1]
 8015ed8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	d010      	beq.n	8015f02 <findAxis+0x92>
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	d014      	beq.n	8015f0e <findAxis+0x9e>
 8015ee4:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8015ee8:	2b01      	cmp	r3, #1
 8015eea:	d022      	beq.n	8015f32 <findAxis+0xc2>
 8015eec:	3301      	adds	r3, #1
 8015eee:	d011      	beq.n	8015f14 <findAxis+0xa4>
 8015ef0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d025      	beq.n	8015f44 <findAxis+0xd4>
 8015ef8:	3301      	adds	r3, #1
 8015efa:	bf04      	itt	eq
 8015efc:	2364      	moveq	r3, #100	@ 0x64
 8015efe:	708b      	strbeq	r3, [r1, #2]
 8015f00:	4770      	bx	lr
 8015f02:	2365      	movs	r3, #101	@ 0x65
 8015f04:	708b      	strb	r3, [r1, #2]
 8015f06:	4770      	bx	lr
 8015f08:	2377      	movs	r3, #119	@ 0x77
 8015f0a:	704b      	strb	r3, [r1, #1]
 8015f0c:	e7e4      	b.n	8015ed8 <findAxis+0x68>
 8015f0e:	2377      	movs	r3, #119	@ 0x77
 8015f10:	708b      	strb	r3, [r1, #2]
 8015f12:	4770      	bx	lr
 8015f14:	2373      	movs	r3, #115	@ 0x73
 8015f16:	708b      	strb	r3, [r1, #2]
 8015f18:	4770      	bx	lr
 8015f1a:	2373      	movs	r3, #115	@ 0x73
 8015f1c:	700b      	strb	r3, [r1, #0]
 8015f1e:	e7be      	b.n	8015e9e <findAxis+0x2e>
 8015f20:	2373      	movs	r3, #115	@ 0x73
 8015f22:	704b      	strb	r3, [r1, #1]
 8015f24:	e7d8      	b.n	8015ed8 <findAxis+0x68>
 8015f26:	236e      	movs	r3, #110	@ 0x6e
 8015f28:	704b      	strb	r3, [r1, #1]
 8015f2a:	e7d5      	b.n	8015ed8 <findAxis+0x68>
 8015f2c:	236e      	movs	r3, #110	@ 0x6e
 8015f2e:	700b      	strb	r3, [r1, #0]
 8015f30:	e7b5      	b.n	8015e9e <findAxis+0x2e>
 8015f32:	236e      	movs	r3, #110	@ 0x6e
 8015f34:	708b      	strb	r3, [r1, #2]
 8015f36:	4770      	bx	lr
 8015f38:	2375      	movs	r3, #117	@ 0x75
 8015f3a:	700b      	strb	r3, [r1, #0]
 8015f3c:	e7af      	b.n	8015e9e <findAxis+0x2e>
 8015f3e:	2375      	movs	r3, #117	@ 0x75
 8015f40:	704b      	strb	r3, [r1, #1]
 8015f42:	e7c9      	b.n	8015ed8 <findAxis+0x68>
 8015f44:	2375      	movs	r3, #117	@ 0x75
 8015f46:	708b      	strb	r3, [r1, #2]
 8015f48:	4770      	bx	lr
 8015f4a:	bf00      	nop
 8015f4c:	0000      	movs	r0, r0
	...

08015f50 <findDirection>:
 8015f50:	b5d0      	push	{r4, r6, r7, lr}
 8015f52:	ed2d 8b04 	vpush	{d8-d9}
 8015f56:	eef0 8ac0 	vabs.f32	s17, s0
 8015f5a:	eeb0 8ae0 	vabs.f32	s16, s1
 8015f5e:	eef4 8ac8 	vcmpe.f32	s17, s16
 8015f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f66:	4604      	mov	r4, r0
 8015f68:	eeb0 9ac1 	vabs.f32	s18, s2
 8015f6c:	dd36      	ble.n	8015fdc <findDirection+0x8c>
 8015f6e:	eef4 8ac9 	vcmpe.f32	s17, s18
 8015f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f76:	dd31      	ble.n	8015fdc <findDirection+0x8c>
 8015f78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f80:	ee18 0a90 	vmov	r0, s17
 8015f84:	f340 8094 	ble.w	80160b0 <findDirection+0x160>
 8015f88:	f7ea fae6 	bl	8000558 <__aeabi_f2d>
 8015f8c:	4606      	mov	r6, r0
 8015f8e:	ee18 0a10 	vmov	r0, s16
 8015f92:	460f      	mov	r7, r1
 8015f94:	f7ea fae0 	bl	8000558 <__aeabi_f2d>
 8015f98:	a387      	add	r3, pc, #540	@ (adr r3, 80161b8 <findDirection+0x268>)
 8015f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f9e:	f7ea fb33 	bl	8000608 <__aeabi_dmul>
 8015fa2:	4602      	mov	r2, r0
 8015fa4:	460b      	mov	r3, r1
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	4639      	mov	r1, r7
 8015faa:	f7ea fdbd 	bl	8000b28 <__aeabi_dcmpgt>
 8015fae:	b188      	cbz	r0, 8015fd4 <findDirection+0x84>
 8015fb0:	ee19 0a10 	vmov	r0, s18
 8015fb4:	f7ea fad0 	bl	8000558 <__aeabi_f2d>
 8015fb8:	a37f      	add	r3, pc, #508	@ (adr r3, 80161b8 <findDirection+0x268>)
 8015fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fbe:	f7ea fb23 	bl	8000608 <__aeabi_dmul>
 8015fc2:	4602      	mov	r2, r0
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	4639      	mov	r1, r7
 8015fca:	f7ea fdad 	bl	8000b28 <__aeabi_dcmpgt>
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	bf18      	it	ne
 8015fd2:	2404      	movne	r4, #4
 8015fd4:	ecbd 8b04 	vpop	{d8-d9}
 8015fd8:	4620      	mov	r0, r4
 8015fda:	bdd0      	pop	{r4, r6, r7, pc}
 8015fdc:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8015fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe4:	dd32      	ble.n	801604c <findDirection+0xfc>
 8015fe6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8015fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fee:	ee18 0a10 	vmov	r0, s16
 8015ff2:	f340 8086 	ble.w	8016102 <findDirection+0x1b2>
 8015ff6:	f7ea faaf 	bl	8000558 <__aeabi_f2d>
 8015ffa:	4606      	mov	r6, r0
 8015ffc:	ee18 0a90 	vmov	r0, s17
 8016000:	460f      	mov	r7, r1
 8016002:	f7ea faa9 	bl	8000558 <__aeabi_f2d>
 8016006:	a36c      	add	r3, pc, #432	@ (adr r3, 80161b8 <findDirection+0x268>)
 8016008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600c:	f7ea fafc 	bl	8000608 <__aeabi_dmul>
 8016010:	4602      	mov	r2, r0
 8016012:	460b      	mov	r3, r1
 8016014:	4630      	mov	r0, r6
 8016016:	4639      	mov	r1, r7
 8016018:	f7ea fd86 	bl	8000b28 <__aeabi_dcmpgt>
 801601c:	2800      	cmp	r0, #0
 801601e:	d0d9      	beq.n	8015fd4 <findDirection+0x84>
 8016020:	ee19 0a10 	vmov	r0, s18
 8016024:	f7ea fa98 	bl	8000558 <__aeabi_f2d>
 8016028:	a363      	add	r3, pc, #396	@ (adr r3, 80161b8 <findDirection+0x268>)
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	f7ea faeb 	bl	8000608 <__aeabi_dmul>
 8016032:	4602      	mov	r2, r0
 8016034:	460b      	mov	r3, r1
 8016036:	4630      	mov	r0, r6
 8016038:	4639      	mov	r1, r7
 801603a:	f7ea fd75 	bl	8000b28 <__aeabi_dcmpgt>
 801603e:	ecbd 8b04 	vpop	{d8-d9}
 8016042:	2800      	cmp	r0, #0
 8016044:	bf18      	it	ne
 8016046:	2401      	movne	r4, #1
 8016048:	4620      	mov	r0, r4
 801604a:	bdd0      	pop	{r4, r6, r7, pc}
 801604c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8016050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016054:	ee19 0a10 	vmov	r0, s18
 8016058:	dd7f      	ble.n	801615a <findDirection+0x20a>
 801605a:	f7ea fa7d 	bl	8000558 <__aeabi_f2d>
 801605e:	4606      	mov	r6, r0
 8016060:	ee18 0a10 	vmov	r0, s16
 8016064:	460f      	mov	r7, r1
 8016066:	f7ea fa77 	bl	8000558 <__aeabi_f2d>
 801606a:	a353      	add	r3, pc, #332	@ (adr r3, 80161b8 <findDirection+0x268>)
 801606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016070:	f7ea faca 	bl	8000608 <__aeabi_dmul>
 8016074:	4602      	mov	r2, r0
 8016076:	460b      	mov	r3, r1
 8016078:	4630      	mov	r0, r6
 801607a:	4639      	mov	r1, r7
 801607c:	f7ea fd54 	bl	8000b28 <__aeabi_dcmpgt>
 8016080:	2800      	cmp	r0, #0
 8016082:	d0a7      	beq.n	8015fd4 <findDirection+0x84>
 8016084:	ee18 0a90 	vmov	r0, s17
 8016088:	f7ea fa66 	bl	8000558 <__aeabi_f2d>
 801608c:	a34a      	add	r3, pc, #296	@ (adr r3, 80161b8 <findDirection+0x268>)
 801608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016092:	f7ea fab9 	bl	8000608 <__aeabi_dmul>
 8016096:	4602      	mov	r2, r0
 8016098:	460b      	mov	r3, r1
 801609a:	4630      	mov	r0, r6
 801609c:	4639      	mov	r1, r7
 801609e:	f7ea fd43 	bl	8000b28 <__aeabi_dcmpgt>
 80160a2:	ecbd 8b04 	vpop	{d8-d9}
 80160a6:	2800      	cmp	r0, #0
 80160a8:	bf18      	it	ne
 80160aa:	2400      	movne	r4, #0
 80160ac:	4620      	mov	r0, r4
 80160ae:	bdd0      	pop	{r4, r6, r7, pc}
 80160b0:	f7ea fa52 	bl	8000558 <__aeabi_f2d>
 80160b4:	4606      	mov	r6, r0
 80160b6:	ee18 0a10 	vmov	r0, s16
 80160ba:	460f      	mov	r7, r1
 80160bc:	f7ea fa4c 	bl	8000558 <__aeabi_f2d>
 80160c0:	a33d      	add	r3, pc, #244	@ (adr r3, 80161b8 <findDirection+0x268>)
 80160c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c6:	f7ea fa9f 	bl	8000608 <__aeabi_dmul>
 80160ca:	4602      	mov	r2, r0
 80160cc:	460b      	mov	r3, r1
 80160ce:	4630      	mov	r0, r6
 80160d0:	4639      	mov	r1, r7
 80160d2:	f7ea fd29 	bl	8000b28 <__aeabi_dcmpgt>
 80160d6:	2800      	cmp	r0, #0
 80160d8:	f43f af7c 	beq.w	8015fd4 <findDirection+0x84>
 80160dc:	ee19 0a10 	vmov	r0, s18
 80160e0:	f7ea fa3a 	bl	8000558 <__aeabi_f2d>
 80160e4:	a334      	add	r3, pc, #208	@ (adr r3, 80161b8 <findDirection+0x268>)
 80160e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ea:	f7ea fa8d 	bl	8000608 <__aeabi_dmul>
 80160ee:	4602      	mov	r2, r0
 80160f0:	460b      	mov	r3, r1
 80160f2:	4630      	mov	r0, r6
 80160f4:	4639      	mov	r1, r7
 80160f6:	f7ea fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80160fa:	2800      	cmp	r0, #0
 80160fc:	bf18      	it	ne
 80160fe:	2405      	movne	r4, #5
 8016100:	e768      	b.n	8015fd4 <findDirection+0x84>
 8016102:	f7ea fa29 	bl	8000558 <__aeabi_f2d>
 8016106:	4606      	mov	r6, r0
 8016108:	ee18 0a90 	vmov	r0, s17
 801610c:	460f      	mov	r7, r1
 801610e:	f7ea fa23 	bl	8000558 <__aeabi_f2d>
 8016112:	a329      	add	r3, pc, #164	@ (adr r3, 80161b8 <findDirection+0x268>)
 8016114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016118:	f7ea fa76 	bl	8000608 <__aeabi_dmul>
 801611c:	4602      	mov	r2, r0
 801611e:	460b      	mov	r3, r1
 8016120:	4630      	mov	r0, r6
 8016122:	4639      	mov	r1, r7
 8016124:	f7ea fd00 	bl	8000b28 <__aeabi_dcmpgt>
 8016128:	2800      	cmp	r0, #0
 801612a:	f43f af53 	beq.w	8015fd4 <findDirection+0x84>
 801612e:	ee19 0a10 	vmov	r0, s18
 8016132:	f7ea fa11 	bl	8000558 <__aeabi_f2d>
 8016136:	a320      	add	r3, pc, #128	@ (adr r3, 80161b8 <findDirection+0x268>)
 8016138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613c:	f7ea fa64 	bl	8000608 <__aeabi_dmul>
 8016140:	4602      	mov	r2, r0
 8016142:	460b      	mov	r3, r1
 8016144:	4630      	mov	r0, r6
 8016146:	4639      	mov	r1, r7
 8016148:	f7ea fcee 	bl	8000b28 <__aeabi_dcmpgt>
 801614c:	ecbd 8b04 	vpop	{d8-d9}
 8016150:	2800      	cmp	r0, #0
 8016152:	bf18      	it	ne
 8016154:	2403      	movne	r4, #3
 8016156:	4620      	mov	r0, r4
 8016158:	bdd0      	pop	{r4, r6, r7, pc}
 801615a:	f7ea f9fd 	bl	8000558 <__aeabi_f2d>
 801615e:	4606      	mov	r6, r0
 8016160:	ee18 0a10 	vmov	r0, s16
 8016164:	460f      	mov	r7, r1
 8016166:	f7ea f9f7 	bl	8000558 <__aeabi_f2d>
 801616a:	a313      	add	r3, pc, #76	@ (adr r3, 80161b8 <findDirection+0x268>)
 801616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016170:	f7ea fa4a 	bl	8000608 <__aeabi_dmul>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	4630      	mov	r0, r6
 801617a:	4639      	mov	r1, r7
 801617c:	f7ea fcd4 	bl	8000b28 <__aeabi_dcmpgt>
 8016180:	2800      	cmp	r0, #0
 8016182:	f43f af27 	beq.w	8015fd4 <findDirection+0x84>
 8016186:	ee18 0a90 	vmov	r0, s17
 801618a:	f7ea f9e5 	bl	8000558 <__aeabi_f2d>
 801618e:	a30a      	add	r3, pc, #40	@ (adr r3, 80161b8 <findDirection+0x268>)
 8016190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016194:	f7ea fa38 	bl	8000608 <__aeabi_dmul>
 8016198:	4602      	mov	r2, r0
 801619a:	460b      	mov	r3, r1
 801619c:	4630      	mov	r0, r6
 801619e:	4639      	mov	r1, r7
 80161a0:	f7ea fcc2 	bl	8000b28 <__aeabi_dcmpgt>
 80161a4:	ecbd 8b04 	vpop	{d8-d9}
 80161a8:	2800      	cmp	r0, #0
 80161aa:	bf18      	it	ne
 80161ac:	2402      	movne	r4, #2
 80161ae:	4620      	mov	r0, r4
 80161b0:	bdd0      	pop	{r4, r6, r7, pc}
 80161b2:	bf00      	nop
 80161b4:	f3af 8000 	nop.w
 80161b8:	e0000000 	.word	0xe0000000
 80161bc:	3ff6b851 	.word	0x3ff6b851

080161c0 <updateOrientation>:
 80161c0:	2300      	movs	r3, #0
 80161c2:	6003      	str	r3, [r0, #0]
 80161c4:	6043      	str	r3, [r0, #4]
 80161c6:	7203      	strb	r3, [r0, #8]
 80161c8:	f891 c000 	ldrb.w	ip, [r1]
 80161cc:	784a      	ldrb	r2, [r1, #1]
 80161ce:	f1ac 0342 	sub.w	r3, ip, #66	@ 0x42
 80161d2:	2b17      	cmp	r3, #23
 80161d4:	bf98      	it	ls
 80161d6:	f10c 0c20 	addls.w	ip, ip, #32
 80161da:	f1a2 0342 	sub.w	r3, r2, #66	@ 0x42
 80161de:	bf98      	it	ls
 80161e0:	fa5f fc8c 	uxtbls.w	ip, ip
 80161e4:	2b17      	cmp	r3, #23
 80161e6:	788b      	ldrb	r3, [r1, #2]
 80161e8:	bf98      	it	ls
 80161ea:	3220      	addls	r2, #32
 80161ec:	f1a3 0142 	sub.w	r1, r3, #66	@ 0x42
 80161f0:	bf98      	it	ls
 80161f2:	b2d2      	uxtbls	r2, r2
 80161f4:	2917      	cmp	r1, #23
 80161f6:	bf98      	it	ls
 80161f8:	3320      	addls	r3, #32
 80161fa:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 80161fe:	bf98      	it	ls
 8016200:	b2db      	uxtbls	r3, r3
 8016202:	f1bc 0f13 	cmp.w	ip, #19
 8016206:	d80d      	bhi.n	8016224 <updateOrientation+0x64>
 8016208:	e8df f00c 	tbb	[pc, ip]
 801620c:	0c0c0a32 	.word	0x0c0c0a32
 8016210:	0c0c0c0c 	.word	0x0c0c0c0c
 8016214:	0c350c0c 	.word	0x0c350c0c
 8016218:	380c0c0c 	.word	0x380c0c0c
 801621c:	3e0c3b0c 	.word	0x3e0c3b0c
 8016220:	2101      	movs	r1, #1
 8016222:	7001      	strb	r1, [r0, #0]
 8016224:	3a64      	subs	r2, #100	@ 0x64
 8016226:	2a13      	cmp	r2, #19
 8016228:	d80d      	bhi.n	8016246 <updateOrientation+0x86>
 801622a:	e8df f002 	tbb	[pc, r2]
 801622e:	0a30      	.short	0x0a30
 8016230:	0c0c0c0c 	.word	0x0c0c0c0c
 8016234:	0c0c0c0c 	.word	0x0c0c0c0c
 8016238:	0c0c0c33 	.word	0x0c0c0c33
 801623c:	390c360c 	.word	0x390c360c
 8016240:	3c0c      	.short	0x3c0c
 8016242:	2201      	movs	r2, #1
 8016244:	7042      	strb	r2, [r0, #1]
 8016246:	3b64      	subs	r3, #100	@ 0x64
 8016248:	2b13      	cmp	r3, #19
 801624a:	d80d      	bhi.n	8016268 <updateOrientation+0xa8>
 801624c:	e8df f003 	tbb	[pc, r3]
 8016250:	0c0c2e0a 	.word	0x0c0c2e0a
 8016254:	0c0c0c0c 	.word	0x0c0c0c0c
 8016258:	0c310c0c 	.word	0x0c310c0c
 801625c:	340c0c0c 	.word	0x340c0c0c
 8016260:	0d0c370c 	.word	0x0d0c370c
 8016264:	23ff      	movs	r3, #255	@ 0xff
 8016266:	7203      	strb	r3, [r0, #8]
 8016268:	4770      	bx	lr
 801626a:	23ff      	movs	r3, #255	@ 0xff
 801626c:	7083      	strb	r3, [r0, #2]
 801626e:	4770      	bx	lr
 8016270:	21ff      	movs	r1, #255	@ 0xff
 8016272:	7181      	strb	r1, [r0, #6]
 8016274:	e7d6      	b.n	8016224 <updateOrientation+0x64>
 8016276:	2101      	movs	r1, #1
 8016278:	70c1      	strb	r1, [r0, #3]
 801627a:	e7d3      	b.n	8016224 <updateOrientation+0x64>
 801627c:	21ff      	movs	r1, #255	@ 0xff
 801627e:	70c1      	strb	r1, [r0, #3]
 8016280:	e7d0      	b.n	8016224 <updateOrientation+0x64>
 8016282:	2101      	movs	r1, #1
 8016284:	7181      	strb	r1, [r0, #6]
 8016286:	e7cd      	b.n	8016224 <updateOrientation+0x64>
 8016288:	21ff      	movs	r1, #255	@ 0xff
 801628a:	7001      	strb	r1, [r0, #0]
 801628c:	e7ca      	b.n	8016224 <updateOrientation+0x64>
 801628e:	22ff      	movs	r2, #255	@ 0xff
 8016290:	71c2      	strb	r2, [r0, #7]
 8016292:	e7d8      	b.n	8016246 <updateOrientation+0x86>
 8016294:	2201      	movs	r2, #1
 8016296:	7102      	strb	r2, [r0, #4]
 8016298:	e7d5      	b.n	8016246 <updateOrientation+0x86>
 801629a:	22ff      	movs	r2, #255	@ 0xff
 801629c:	7102      	strb	r2, [r0, #4]
 801629e:	e7d2      	b.n	8016246 <updateOrientation+0x86>
 80162a0:	2201      	movs	r2, #1
 80162a2:	71c2      	strb	r2, [r0, #7]
 80162a4:	e7cf      	b.n	8016246 <updateOrientation+0x86>
 80162a6:	22ff      	movs	r2, #255	@ 0xff
 80162a8:	7042      	strb	r2, [r0, #1]
 80162aa:	e7cc      	b.n	8016246 <updateOrientation+0x86>
 80162ac:	2301      	movs	r3, #1
 80162ae:	7083      	strb	r3, [r0, #2]
 80162b0:	4770      	bx	lr
 80162b2:	2301      	movs	r3, #1
 80162b4:	7143      	strb	r3, [r0, #5]
 80162b6:	4770      	bx	lr
 80162b8:	23ff      	movs	r3, #255	@ 0xff
 80162ba:	7143      	strb	r3, [r0, #5]
 80162bc:	4770      	bx	lr
 80162be:	2301      	movs	r3, #1
 80162c0:	7203      	strb	r3, [r0, #8]
 80162c2:	4770      	bx	lr

080162c4 <qmult>:
 80162c4:	ed91 2a03 	vldr	s4, [r1, #12]
 80162c8:	ed90 3a01 	vldr	s6, [r0, #4]
 80162cc:	edd0 5a02 	vldr	s11, [r0, #8]
 80162d0:	edd1 4a01 	vldr	s9, [r1, #4]
 80162d4:	ed90 4a00 	vldr	s8, [r0]
 80162d8:	ed91 5a02 	vldr	s10, [r1, #8]
 80162dc:	edd1 3a00 	vldr	s7, [r1]
 80162e0:	edd0 2a03 	vldr	s5, [r0, #12]
 80162e4:	ee25 6aa4 	vmul.f32	s12, s11, s9
 80162e8:	ee62 6a03 	vmul.f32	s13, s4, s6
 80162ec:	ee22 7a25 	vmul.f32	s14, s4, s11
 80162f0:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 80162f4:	eea4 6a02 	vfma.f32	s12, s8, s4
 80162f8:	eee4 6a05 	vfma.f32	s13, s8, s10
 80162fc:	eea3 7a23 	vfma.f32	s14, s6, s7
 8016300:	eee4 7a63 	vfms.f32	s15, s8, s7
 8016304:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8016308:	eee4 6aa2 	vfma.f32	s13, s9, s5
 801630c:	eea5 7a22 	vfma.f32	s14, s10, s5
 8016310:	eee2 7a22 	vfma.f32	s15, s4, s5
 8016314:	eea3 6a45 	vfms.f32	s12, s6, s10
 8016318:	eee5 6ae3 	vfms.f32	s13, s11, s7
 801631c:	eea4 7a64 	vfms.f32	s14, s8, s9
 8016320:	eee5 7a65 	vfms.f32	s15, s10, s11
 8016324:	ed82 6a00 	vstr	s12, [r2]
 8016328:	edc2 6a01 	vstr	s13, [r2, #4]
 801632c:	ed82 7a02 	vstr	s14, [r2, #8]
 8016330:	edc2 7a03 	vstr	s15, [r2, #12]
 8016334:	4770      	bx	lr
 8016336:	bf00      	nop

08016338 <dataDerivative5>:
 8016338:	ed90 7a01 	vldr	s14, [r0, #4]
 801633c:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 8016340:	edd0 6a04 	vldr	s13, [r0, #16]
 8016344:	ed90 6a00 	vldr	s12, [r0]
 8016348:	ed90 4a02 	vldr	s8, [r0, #8]
 801634c:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8016350:	eeb8 5a00 	vmov.f32	s10, #128	@ 0xc0000000 -2.0
 8016354:	eee7 7a05 	vfma.f32	s15, s14, s10
 8016358:	ed90 7a03 	vldr	s14, [r0, #12]
 801635c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016360:	edd0 6a0b 	vldr	s13, [r0, #44]	@ 0x2c
 8016364:	ee96 7a05 	vfnms.f32	s14, s12, s10
 8016368:	eee4 6a05 	vfma.f32	s13, s8, s10
 801636c:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8016370:	ed90 5a0c 	vldr	s10, [r0, #48]	@ 0x30
 8016374:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8016378:	eee6 7a25 	vfma.f32	s15, s12, s11
 801637c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016380:	eeb0 6a66 	vmov.f32	s12, s13
 8016384:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80163c0 <dataDerivative5+0x88>
 8016388:	eea5 7a25 	vfma.f32	s14, s10, s11
 801638c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8016390:	ed90 5a05 	vldr	s10, [r0, #20]
 8016394:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016398:	ee36 6a45 	vsub.f32	s12, s12, s10
 801639c:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 80163a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80163a4:	eea5 6a25 	vfma.f32	s12, s10, s11
 80163a8:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80163ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 80163b0:	eea7 0a07 	vfma.f32	s0, s14, s14
 80163b4:	eea6 0aa6 	vfma.f32	s0, s13, s13
 80163b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop
 80163c0:	3dcccccd 	.word	0x3dcccccd

080163c4 <b_dcm2q>:
 80163c4:	ed90 5a08 	vldr	s10, [r0, #32]
 80163c8:	edd0 7a00 	vldr	s15, [r0]
 80163cc:	edd0 6a04 	vldr	s13, [r0, #16]
 80163d0:	ee37 7a85 	vadd.f32	s14, s15, s10
 80163d4:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80163d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80163dc:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 80163e0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80163e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163e8:	bfc5      	ittet	gt
 80163ea:	eeb7 6a00 	vmovgt.f32	s12, #112	@ 0x3f800000  1.0
 80163ee:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 80163f2:	eddf 5a43 	vldrle	s11, [pc, #268]	@ 8016500 <b_dcm2q+0x13c>
 80163f6:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 80163fa:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80163fe:	ee35 6a47 	vsub.f32	s12, s10, s14
 8016402:	ee35 7a07 	vadd.f32	s14, s10, s14
 8016406:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801640a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640e:	bfc5      	ittet	gt
 8016410:	eef7 4a00 	vmovgt.f32	s9, #112	@ 0x3f800000  1.0
 8016414:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8016418:	ed9f 6a39 	vldrle	s12, [pc, #228]	@ 8016500 <b_dcm2q+0x13c>
 801641c:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8016420:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8016424:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8016428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801642c:	dd5b      	ble.n	80164e6 <b_dcm2q+0x122>
 801642e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8016432:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016436:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801643a:	eef1 4ac7 	vsqrt.f32	s9, s14
 801643e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8016442:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016446:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801644a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801644e:	edd0 6a07 	vldr	s13, [r0, #28]
 8016452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801645a:	bf85      	ittet	hi
 801645c:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 8016460:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8016464:	ed9f 7a26 	vldrls	s14, [pc, #152]	@ 8016500 <b_dcm2q+0x13c>
 8016468:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 801646c:	edd0 7a05 	vldr	s15, [r0, #20]
 8016470:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801647c:	d43c      	bmi.n	80164f8 <b_dcm2q+0x134>
 801647e:	bfd8      	it	le
 8016480:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8016484:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016488:	ee27 7a27 	vmul.f32	s14, s14, s15
 801648c:	ed81 7a00 	vstr	s14, [r1]
 8016490:	edd0 7a06 	vldr	s15, [r0, #24]
 8016494:	ed90 7a02 	vldr	s14, [r0, #8]
 8016498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801649c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a4:	d425      	bmi.n	80164f2 <b_dcm2q+0x12e>
 80164a6:	bfd8      	it	le
 80164a8:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 80164ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80164b0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80164b4:	edc1 5a01 	vstr	s11, [r1, #4]
 80164b8:	edd0 7a01 	vldr	s15, [r0, #4]
 80164bc:	ed90 7a03 	vldr	s14, [r0, #12]
 80164c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164cc:	d40e      	bmi.n	80164ec <b_dcm2q+0x128>
 80164ce:	bfd8      	it	le
 80164d0:	ee26 6a27 	vmulle.f32	s12, s12, s15
 80164d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80164d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80164dc:	edc1 4a03 	vstr	s9, [r1, #12]
 80164e0:	ed81 6a02 	vstr	s12, [r1, #8]
 80164e4:	4770      	bx	lr
 80164e6:	eddf 4a06 	vldr	s9, [pc, #24]	@ 8016500 <b_dcm2q+0x13c>
 80164ea:	e7aa      	b.n	8016442 <b_dcm2q+0x7e>
 80164ec:	eeb1 6a46 	vneg.f32	s12, s12
 80164f0:	e7f0      	b.n	80164d4 <b_dcm2q+0x110>
 80164f2:	eef1 5a65 	vneg.f32	s11, s11
 80164f6:	e7d9      	b.n	80164ac <b_dcm2q+0xe8>
 80164f8:	eeb1 7a47 	vneg.f32	s14, s14
 80164fc:	e7c2      	b.n	8016484 <b_dcm2q+0xc0>
 80164fe:	bf00      	nop
 8016500:	00000000 	.word	0x00000000

08016504 <getRotationMatrix>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4613      	mov	r3, r2
 8016508:	4605      	mov	r5, r0
 801650a:	460c      	mov	r4, r1
 801650c:	4618      	mov	r0, r3
 801650e:	2224      	movs	r2, #36	@ 0x24
 8016510:	2100      	movs	r1, #0
 8016512:	f007 f834 	bl	801d57e <memset>
 8016516:	edd5 5a00 	vldr	s11, [r5]
 801651a:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8016640 <getRotationMatrix+0x13c>
 801651e:	edc0 5a02 	vstr	s11, [r0, #8]
 8016522:	edd5 4a01 	vldr	s9, [r5, #4]
 8016526:	edc0 4a05 	vstr	s9, [r0, #20]
 801652a:	ed95 5a02 	vldr	s10, [r5, #8]
 801652e:	ed80 5a08 	vstr	s10, [r0, #32]
 8016532:	ed94 4a02 	vldr	s8, [r4, #8]
 8016536:	edd4 3a01 	vldr	s7, [r4, #4]
 801653a:	ed94 6a00 	vldr	s12, [r4]
 801653e:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8016542:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8016546:	eee3 6a85 	vfma.f32	s13, s7, s10
 801654a:	4603      	mov	r3, r0
 801654c:	eee6 7a24 	vfma.f32	s15, s12, s9
 8016550:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8016554:	eeb0 6ae6 	vabs.f32	s12, s13
 8016558:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016560:	eea4 7a25 	vfma.f32	s14, s8, s11
 8016564:	bfdc      	itt	le
 8016566:	ee86 4a83 	vdivle.f32	s8, s13, s6
 801656a:	eeb0 6a43 	vmovle.f32	s12, s6
 801656e:	eef0 3ac7 	vabs.f32	s7, s14
 8016572:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8016576:	bfd4      	ite	le
 8016578:	ee24 4a04 	vmulle.f32	s8, s8, s8
 801657c:	eeb7 4a00 	vmovgt.f32	s8, #112	@ 0x3f800000  1.0
 8016580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016584:	ed80 7a03 	vstr	s14, [r0, #12]
 8016588:	edc0 7a06 	vstr	s15, [r0, #24]
 801658c:	d43f      	bmi.n	801660e <getRotationMatrix+0x10a>
 801658e:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8016592:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8016596:	eeb0 3a44 	vmov.f32	s6, s8
 801659a:	eeb0 4ae7 	vabs.f32	s8, s15
 801659e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80165a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165a6:	d543      	bpl.n	8016630 <getRotationMatrix+0x12c>
 80165a8:	eec6 2a04 	vdiv.f32	s5, s12, s8
 80165ac:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80165b0:	ee62 2aa2 	vmul.f32	s5, s5, s5
 80165b4:	eeb0 6a44 	vmov.f32	s12, s8
 80165b8:	eee3 3a22 	vfma.f32	s7, s6, s5
 80165bc:	eeb1 4ae3 	vsqrt.f32	s8, s7
 80165c0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80165c4:	ee24 6a06 	vmul.f32	s12, s8, s12
 80165c8:	ee83 4a86 	vdiv.f32	s8, s7, s12
 80165cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80165d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80165d4:	ee66 6a84 	vmul.f32	s13, s13, s8
 80165d8:	ee65 3a47 	vnmul.f32	s7, s10, s14
 80165dc:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 80165e0:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 80165e4:	eee7 3aa4 	vfma.f32	s7, s15, s9
 80165e8:	eef0 4a44 	vmov.f32	s9, s8
 80165ec:	eee6 4a85 	vfma.f32	s9, s13, s10
 80165f0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80165f4:	edc3 6a00 	vstr	s13, [r3]
 80165f8:	ed83 7a03 	vstr	s14, [r3, #12]
 80165fc:	edc3 7a06 	vstr	s15, [r3, #24]
 8016600:	edc3 3a01 	vstr	s7, [r3, #4]
 8016604:	edc3 4a04 	vstr	s9, [r3, #16]
 8016608:	ed83 6a07 	vstr	s12, [r3, #28]
 801660c:	bd38      	pop	{r3, r4, r5, pc}
 801660e:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8016612:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8016616:	ee62 2aa2 	vmul.f32	s5, s5, s5
 801661a:	eeb0 6a63 	vmov.f32	s12, s7
 801661e:	eea4 3a22 	vfma.f32	s6, s8, s5
 8016622:	eeb0 4ae7 	vabs.f32	s8, s15
 8016626:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801662a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801662e:	d4bb      	bmi.n	80165a8 <getRotationMatrix+0xa4>
 8016630:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8016634:	eef0 3a43 	vmov.f32	s7, s6
 8016638:	eee4 3a04 	vfma.f32	s7, s8, s8
 801663c:	e7be      	b.n	80165bc <getRotationMatrix+0xb8>
 801663e:	bf00      	nop
 8016640:	00000000 	.word	0x00000000

08016644 <kf_update>:
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016648:	ed2d 8b10 	vpush	{d8-d15}
 801664c:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 8016650:	3901      	subs	r1, #1
 8016652:	f8dd 4490 	ldr.w	r4, [sp, #1168]	@ 0x490
 8016656:	9303      	str	r3, [sp, #12]
 8016658:	ed94 2a00 	vldr	s4, [r4]
 801665c:	edd4 2a01 	vldr	s5, [r4, #4]
 8016660:	ed94 3a02 	vldr	s6, [r4, #8]
 8016664:	edd4 3a03 	vldr	s7, [r4, #12]
 8016668:	ed94 4a04 	vldr	s8, [r4, #16]
 801666c:	edd4 4a05 	vldr	s9, [r4, #20]
 8016670:	ed94 5a06 	vldr	s10, [r4, #24]
 8016674:	edd4 5a07 	vldr	s11, [r4, #28]
 8016678:	ed94 6a08 	vldr	s12, [r4, #32]
 801667c:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8016680:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8016684:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016688:	ed9f 8a1c 	vldr	s16, [pc, #112]	@ 80166fc <kf_update+0xb8>
 801668c:	9104      	str	r1, [sp, #16]
 801668e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8016690:	ee22 2a02 	vmul.f32	s4, s4, s4
 8016694:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8016698:	ee23 3a03 	vmul.f32	s6, s6, s6
 801669c:	ee63 3aa3 	vmul.f32	s7, s7, s7
 80166a0:	ee24 4a04 	vmul.f32	s8, s8, s8
 80166a4:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80166a8:	ee25 5a05 	vmul.f32	s10, s10, s10
 80166ac:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80166b0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80166b4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80166b8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80166bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80166c0:	9302      	str	r3, [sp, #8]
 80166c2:	2300      	movs	r3, #0
 80166c4:	4606      	mov	r6, r0
 80166c6:	9200      	str	r2, [sp, #0]
 80166c8:	ed8d 2a0b 	vstr	s4, [sp, #44]	@ 0x2c
 80166cc:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
 80166d0:	ed8d 3a0d 	vstr	s6, [sp, #52]	@ 0x34
 80166d4:	edcd 3a0e 	vstr	s7, [sp, #56]	@ 0x38
 80166d8:	ed8d 4a0f 	vstr	s8, [sp, #60]	@ 0x3c
 80166dc:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 80166e0:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
 80166e4:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 80166e8:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 80166ec:	edcd 6a14 	vstr	s13, [sp, #80]	@ 0x50
 80166f0:	ed8d 7a15 	vstr	s14, [sp, #84]	@ 0x54
 80166f4:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 80166f8:	9301      	str	r3, [sp, #4]
 80166fa:	e010      	b.n	801671e <kf_update+0xda>
 80166fc:	00000000 	.word	0x00000000
 8016700:	9a00      	ldr	r2, [sp, #0]
 8016702:	9b01      	ldr	r3, [sp, #4]
 8016704:	3204      	adds	r2, #4
 8016706:	9200      	str	r2, [sp, #0]
 8016708:	9a02      	ldr	r2, [sp, #8]
 801670a:	3204      	adds	r2, #4
 801670c:	9202      	str	r2, [sp, #8]
 801670e:	9a03      	ldr	r2, [sp, #12]
 8016710:	3301      	adds	r3, #1
 8016712:	3204      	adds	r2, #4
 8016714:	2b0c      	cmp	r3, #12
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	9203      	str	r2, [sp, #12]
 801671a:	f000 857b 	beq.w	8017214 <kf_update+0xbd0>
 801671e:	9a04      	ldr	r2, [sp, #16]
 8016720:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016724:	9204      	str	r2, [sp, #16]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d0ea      	beq.n	8016700 <kf_update+0xbc>
 801672a:	9a03      	ldr	r2, [sp, #12]
 801672c:	ed8d 8a17 	vstr	s16, [sp, #92]	@ 0x5c
 8016730:	f106 0328 	add.w	r3, r6, #40	@ 0x28
 8016734:	ac17      	add	r4, sp, #92	@ 0x5c
 8016736:	edd2 da00 	vldr	s27, [r2]
 801673a:	ed92 ea0c 	vldr	s28, [r2, #48]	@ 0x30
 801673e:	edd2 ea18 	vldr	s29, [r2, #96]	@ 0x60
 8016742:	ed92 fa24 	vldr	s30, [r2, #144]	@ 0x90
 8016746:	edd2 fa30 	vldr	s31, [r2, #192]	@ 0xc0
 801674a:	edd2 6a3c 	vldr	s13, [r2, #240]	@ 0xf0
 801674e:	ed92 6a48 	vldr	s12, [r2, #288]	@ 0x120
 8016752:	edd2 5a54 	vldr	s11, [r2, #336]	@ 0x150
 8016756:	ed92 5a60 	vldr	s10, [r2, #384]	@ 0x180
 801675a:	9305      	str	r3, [sp, #20]
 801675c:	ed8d 8a18 	vstr	s16, [sp, #96]	@ 0x60
 8016760:	ed8d 8a19 	vstr	s16, [sp, #100]	@ 0x64
 8016764:	ed8d 8a1a 	vstr	s16, [sp, #104]	@ 0x68
 8016768:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 801676c:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 8016770:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 8016774:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 8016778:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 801677c:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8016780:	4622      	mov	r2, r4
 8016782:	ecb3 7a01 	vldmia	r3!, {s14}
 8016786:	ecf2 7a01 	vldmia	r2!, {s15}
 801678a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016792:	d006      	beq.n	80167a2 <kf_update+0x15e>
 8016794:	eef5 da40 	vcmp.f32	s27, #0.0
 8016798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679c:	bf18      	it	ne
 801679e:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 80167a2:	ed93 7a08 	vldr	s14, [r3, #32]
 80167a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ae:	d006      	beq.n	80167be <kf_update+0x17a>
 80167b0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80167b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b8:	bf18      	it	ne
 80167ba:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 80167be:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80167c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ca:	d006      	beq.n	80167da <kf_update+0x196>
 80167cc:	eef5 ea40 	vcmp.f32	s29, #0.0
 80167d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167d4:	bf18      	it	ne
 80167d6:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 80167da:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80167de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e6:	d006      	beq.n	80167f6 <kf_update+0x1b2>
 80167e8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80167ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167f0:	bf18      	it	ne
 80167f2:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80167f6:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80167fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016802:	d006      	beq.n	8016812 <kf_update+0x1ce>
 8016804:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680c:	bf18      	it	ne
 801680e:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8016812:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8016816:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681e:	d006      	beq.n	801682e <kf_update+0x1ea>
 8016820:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016828:	bf18      	it	ne
 801682a:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801682e:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8016832:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801683a:	d006      	beq.n	801684a <kf_update+0x206>
 801683c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016844:	bf18      	it	ne
 8016846:	eee7 7a06 	vfmane.f32	s15, s14, s12
 801684a:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 801684e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016856:	d006      	beq.n	8016866 <kf_update+0x222>
 8016858:	eef5 5a40 	vcmp.f32	s11, #0.0
 801685c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016860:	bf18      	it	ne
 8016862:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8016866:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 801686a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016872:	d006      	beq.n	8016882 <kf_update+0x23e>
 8016874:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801687c:	bf18      	it	ne
 801687e:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8016882:	4299      	cmp	r1, r3
 8016884:	ed42 7a01 	vstr	s15, [r2, #-4]
 8016888:	f47f af7b 	bne.w	8016782 <kf_update+0x13e>
 801688c:	eef5 da40 	vcmp.f32	s27, #0.0
 8016890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016894:	eddd ba17 	vldr	s23, [sp, #92]	@ 0x5c
 8016898:	f040 8492 	bne.w	80171c0 <kf_update+0xb7c>
 801689c:	eef0 7a6d 	vmov.f32	s15, s27
 80168a0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80168a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168a8:	ed9d ca18 	vldr	s24, [sp, #96]	@ 0x60
 80168ac:	d006      	beq.n	80168bc <kf_update+0x278>
 80168ae:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80168b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b6:	bf18      	it	ne
 80168b8:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 80168bc:	eef5 ea40 	vcmp.f32	s29, #0.0
 80168c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c4:	ed9d aa19 	vldr	s20, [sp, #100]	@ 0x64
 80168c8:	d006      	beq.n	80168d8 <kf_update+0x294>
 80168ca:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80168ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d2:	bf18      	it	ne
 80168d4:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 80168d8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80168dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168e0:	ed9d da1a 	vldr	s26, [sp, #104]	@ 0x68
 80168e4:	d006      	beq.n	80168f4 <kf_update+0x2b0>
 80168e6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80168ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ee:	bf18      	it	ne
 80168f0:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 80168f4:	eef5 fa40 	vcmp.f32	s31, #0.0
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	eddd ca1b 	vldr	s25, [sp, #108]	@ 0x6c
 8016900:	d006      	beq.n	8016910 <kf_update+0x2cc>
 8016902:	eef5 ca40 	vcmp.f32	s25, #0.0
 8016906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690a:	bf18      	it	ne
 801690c:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8016910:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016918:	ed9d ba1c 	vldr	s22, [sp, #112]	@ 0x70
 801691c:	d006      	beq.n	801692c <kf_update+0x2e8>
 801691e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8016922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016926:	bf18      	it	ne
 8016928:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 801692c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016934:	eddd aa1d 	vldr	s21, [sp, #116]	@ 0x74
 8016938:	d006      	beq.n	8016948 <kf_update+0x304>
 801693a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801693e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016942:	bf18      	it	ne
 8016944:	eeea 7a86 	vfmane.f32	s15, s21, s12
 8016948:	eef5 5a40 	vcmp.f32	s11, #0.0
 801694c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016950:	eddd 9a1e 	vldr	s19, [sp, #120]	@ 0x78
 8016954:	d006      	beq.n	8016964 <kf_update+0x320>
 8016956:	eef5 9a40 	vcmp.f32	s19, #0.0
 801695a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801695e:	bf18      	it	ne
 8016960:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8016964:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801696c:	ed9d 9a1f 	vldr	s18, [sp, #124]	@ 0x7c
 8016970:	d006      	beq.n	8016980 <kf_update+0x33c>
 8016972:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801697a:	bf18      	it	ne
 801697c:	eee9 7a05 	vfmane.f32	s15, s18, s10
 8016980:	9b02      	ldr	r3, [sp, #8]
 8016982:	ed93 7a00 	vldr	s14, [r3]
 8016986:	9b01      	ldr	r3, [sp, #4]
 8016988:	ee77 7a87 	vadd.f32	s15, s15, s14
 801698c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8016990:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8016994:	2b05      	cmp	r3, #5
 8016996:	ee6b ba87 	vmul.f32	s23, s23, s14
 801699a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801699e:	ee2a aa07 	vmul.f32	s20, s20, s14
 80169a2:	ee2d da07 	vmul.f32	s26, s26, s14
 80169a6:	ee67 ca2c 	vmul.f32	s25, s14, s25
 80169aa:	ee27 ba0b 	vmul.f32	s22, s14, s22
 80169ae:	ee67 aa2a 	vmul.f32	s21, s14, s21
 80169b2:	ee69 9a87 	vmul.f32	s19, s19, s14
 80169b6:	ee29 9a07 	vmul.f32	s18, s18, s14
 80169ba:	edcd ba17 	vstr	s23, [sp, #92]	@ 0x5c
 80169be:	ed8d ca18 	vstr	s24, [sp, #96]	@ 0x60
 80169c2:	ed8d aa19 	vstr	s20, [sp, #100]	@ 0x64
 80169c6:	ed8d da1a 	vstr	s26, [sp, #104]	@ 0x68
 80169ca:	edcd ca1b 	vstr	s25, [sp, #108]	@ 0x6c
 80169ce:	ed8d ba1c 	vstr	s22, [sp, #112]	@ 0x70
 80169d2:	edcd aa1d 	vstr	s21, [sp, #116]	@ 0x74
 80169d6:	edcd 9a1e 	vstr	s19, [sp, #120]	@ 0x78
 80169da:	ed8d 9a1f 	vstr	s18, [sp, #124]	@ 0x7c
 80169de:	f340 83eb 	ble.w	80171b8 <kf_update+0xb74>
 80169e2:	eef5 da40 	vcmp.f32	s27, #0.0
 80169e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ea:	f000 8456 	beq.w	801729a <kf_update+0xc56>
 80169ee:	edd6 7a01 	vldr	s15, [r6, #4]
 80169f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80169f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169fa:	f040 8477 	bne.w	80172ec <kf_update+0xca8>
 80169fe:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8016a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a06:	d008      	beq.n	8016a1a <kf_update+0x3d6>
 8016a08:	ed96 7a02 	vldr	s14, [r6, #8]
 8016a0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a14:	bf18      	it	ne
 8016a16:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8016a1a:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a22:	d008      	beq.n	8016a36 <kf_update+0x3f2>
 8016a24:	ed96 7a03 	vldr	s14, [r6, #12]
 8016a28:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a30:	bf18      	it	ne
 8016a32:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8016a36:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8016a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a3e:	d008      	beq.n	8016a52 <kf_update+0x40e>
 8016a40:	ed96 7a04 	vldr	s14, [r6, #16]
 8016a44:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4c:	bf18      	it	ne
 8016a4e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8016a52:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5a:	d008      	beq.n	8016a6e <kf_update+0x42a>
 8016a5c:	ed96 7a05 	vldr	s14, [r6, #20]
 8016a60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a68:	bf18      	it	ne
 8016a6a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8016a6e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a76:	d008      	beq.n	8016a8a <kf_update+0x446>
 8016a78:	ed96 7a06 	vldr	s14, [r6, #24]
 8016a7c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a84:	bf18      	it	ne
 8016a86:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8016a8a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a92:	d008      	beq.n	8016aa6 <kf_update+0x462>
 8016a94:	ed96 7a07 	vldr	s14, [r6, #28]
 8016a98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa0:	bf18      	it	ne
 8016aa2:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8016aa6:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aae:	d008      	beq.n	8016ac2 <kf_update+0x47e>
 8016ab0:	ed96 7a08 	vldr	s14, [r6, #32]
 8016ab4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016abc:	bf18      	it	ne
 8016abe:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8016ac2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aca:	d008      	beq.n	8016ade <kf_update+0x49a>
 8016acc:	ed96 7a09 	vldr	s14, [r6, #36]	@ 0x24
 8016ad0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad8:	bf18      	it	ne
 8016ada:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8016ade:	9b00      	ldr	r3, [sp, #0]
 8016ae0:	edd3 8a00 	vldr	s17, [r3]
 8016ae4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8016ae8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8016aec:	2100      	movs	r1, #0
 8016aee:	a868      	add	r0, sp, #416	@ 0x1a0
 8016af0:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
 8016af4:	edcd 5a08 	vstr	s11, [sp, #32]
 8016af8:	ed8d 6a07 	vstr	s12, [sp, #28]
 8016afc:	edcd 6a06 	vstr	s13, [sp, #24]
 8016b00:	f006 fd3d 	bl	801d57e <memset>
 8016b04:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016b06:	ed9d 5a09 	vldr	s10, [sp, #36]	@ 0x24
 8016b0a:	eddd 5a08 	vldr	s11, [sp, #32]
 8016b0e:	ed9d 6a07 	vldr	s12, [sp, #28]
 8016b12:	eddd 6a06 	vldr	s13, [sp, #24]
 8016b16:	a971      	add	r1, sp, #452	@ 0x1c4
 8016b18:	461a      	mov	r2, r3
 8016b1a:	ecf4 7a01 	vldmia	r4!, {s15}
 8016b1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b26:	d062      	beq.n	8016bee <kf_update+0x5aa>
 8016b28:	eef5 da40 	vcmp.f32	s27, #0.0
 8016b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b30:	d005      	beq.n	8016b3e <kf_update+0x4fa>
 8016b32:	ed92 7a00 	vldr	s14, [r2]
 8016b36:	eea7 7aad 	vfma.f32	s14, s15, s27
 8016b3a:	ed82 7a00 	vstr	s14, [r2]
 8016b3e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8016b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b46:	d005      	beq.n	8016b54 <kf_update+0x510>
 8016b48:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8016b4c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8016b50:	ed82 7a09 	vstr	s14, [r2, #36]	@ 0x24
 8016b54:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5c:	d005      	beq.n	8016b6a <kf_update+0x526>
 8016b5e:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 8016b62:	eea7 7aae 	vfma.f32	s14, s15, s29
 8016b66:	ed82 7a12 	vstr	s14, [r2, #72]	@ 0x48
 8016b6a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8016b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b72:	d005      	beq.n	8016b80 <kf_update+0x53c>
 8016b74:	ed92 7a1b 	vldr	s14, [r2, #108]	@ 0x6c
 8016b78:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8016b7c:	ed82 7a1b 	vstr	s14, [r2, #108]	@ 0x6c
 8016b80:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b88:	d005      	beq.n	8016b96 <kf_update+0x552>
 8016b8a:	ed92 7a24 	vldr	s14, [r2, #144]	@ 0x90
 8016b8e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8016b92:	ed82 7a24 	vstr	s14, [r2, #144]	@ 0x90
 8016b96:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b9e:	d005      	beq.n	8016bac <kf_update+0x568>
 8016ba0:	ed92 7a2d 	vldr	s14, [r2, #180]	@ 0xb4
 8016ba4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016ba8:	ed82 7a2d 	vstr	s14, [r2, #180]	@ 0xb4
 8016bac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb4:	d005      	beq.n	8016bc2 <kf_update+0x57e>
 8016bb6:	ed92 7a36 	vldr	s14, [r2, #216]	@ 0xd8
 8016bba:	eea7 7a86 	vfma.f32	s14, s15, s12
 8016bbe:	ed82 7a36 	vstr	s14, [r2, #216]	@ 0xd8
 8016bc2:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bca:	d005      	beq.n	8016bd8 <kf_update+0x594>
 8016bcc:	ed92 7a3f 	vldr	s14, [r2, #252]	@ 0xfc
 8016bd0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016bd4:	ed82 7a3f 	vstr	s14, [r2, #252]	@ 0xfc
 8016bd8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be0:	d005      	beq.n	8016bee <kf_update+0x5aa>
 8016be2:	ed92 7a48 	vldr	s14, [r2, #288]	@ 0x120
 8016be6:	eea7 7a85 	vfma.f32	s14, s15, s10
 8016bea:	ed82 7a48 	vstr	s14, [r2, #288]	@ 0x120
 8016bee:	3204      	adds	r2, #4
 8016bf0:	4291      	cmp	r1, r2
 8016bf2:	d192      	bne.n	8016b1a <kf_update+0x4d6>
 8016bf4:	afb9      	add	r7, sp, #740	@ 0x2e4
 8016bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016bfa:	a868      	add	r0, sp, #416	@ 0x1a0
 8016bfc:	463a      	mov	r2, r7
 8016bfe:	f04f 0b02 	mov.w	fp, #2
 8016c02:	f04f 0e03 	mov.w	lr, #3
 8016c06:	f04f 0c04 	mov.w	ip, #4
 8016c0a:	f04f 0a05 	mov.w	sl, #5
 8016c0e:	f04f 0906 	mov.w	r9, #6
 8016c12:	f04f 0807 	mov.w	r8, #7
 8016c16:	2408      	movs	r4, #8
 8016c18:	2100      	movs	r1, #0
 8016c1a:	9306      	str	r3, [sp, #24]
 8016c1c:	e07b      	b.n	8016d16 <kf_update+0x6d2>
 8016c1e:	edd0 7a00 	vldr	s15, [r0]
 8016c22:	ed82 8a01 	vstr	s16, [r2, #4]
 8016c26:	eef1 7a67 	vneg.f32	s15, s15
 8016c2a:	2901      	cmp	r1, #1
 8016c2c:	edc0 7a00 	vstr	s15, [r0]
 8016c30:	f1a4 0507 	sub.w	r5, r4, #7
 8016c34:	f000 8110 	beq.w	8016e58 <kf_update+0x814>
 8016c38:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016c3a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8016c3e:	edd5 7a00 	vldr	s15, [r5]
 8016c42:	ed82 8a02 	vstr	s16, [r2, #8]
 8016c46:	eef1 7a67 	vneg.f32	s15, s15
 8016c4a:	2902      	cmp	r1, #2
 8016c4c:	edc5 7a00 	vstr	s15, [r5]
 8016c50:	f000 80ef 	beq.w	8016e32 <kf_update+0x7ee>
 8016c54:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016c56:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8016c5a:	edd5 7a00 	vldr	s15, [r5]
 8016c5e:	ed82 8a03 	vstr	s16, [r2, #12]
 8016c62:	eef1 7a67 	vneg.f32	s15, s15
 8016c66:	2903      	cmp	r1, #3
 8016c68:	edc5 7a00 	vstr	s15, [r5]
 8016c6c:	d176      	bne.n	8016d5c <kf_update+0x718>
 8016c6e:	edd0 7a03 	vldr	s15, [r0, #12]
 8016c72:	ed82 8a04 	vstr	s16, [r2, #16]
 8016c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c7a:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8016c7e:	edc0 7a03 	vstr	s15, [r0, #12]
 8016c82:	edd5 7a00 	vldr	s15, [r5]
 8016c86:	ed82 8a05 	vstr	s16, [r2, #20]
 8016c8a:	eef1 7a67 	vneg.f32	s15, s15
 8016c8e:	edc5 7a00 	vstr	s15, [r5]
 8016c92:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8016c96:	edd5 7a00 	vldr	s15, [r5]
 8016c9a:	ed82 8a06 	vstr	s16, [r2, #24]
 8016c9e:	eef1 7a67 	vneg.f32	s15, s15
 8016ca2:	edc5 7a00 	vstr	s15, [r5]
 8016ca6:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016ca8:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8016cac:	edd5 7a00 	vldr	s15, [r5]
 8016cb0:	ed82 8a07 	vstr	s16, [r2, #28]
 8016cb4:	eef1 7a67 	vneg.f32	s15, s15
 8016cb8:	2907      	cmp	r1, #7
 8016cba:	edc5 7a00 	vstr	s15, [r5]
 8016cbe:	f040 80a4 	bne.w	8016e0a <kf_update+0x7c6>
 8016cc2:	edd0 7a07 	vldr	s15, [r0, #28]
 8016cc6:	ed82 8a08 	vstr	s16, [r2, #32]
 8016cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cce:	edc0 7a07 	vstr	s15, [r0, #28]
 8016cd2:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016cd4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8016cd8:	edd5 7a00 	vldr	s15, [r5]
 8016cdc:	00a5      	lsls	r5, r4, #2
 8016cde:	eef1 7a67 	vneg.f32	s15, s15
 8016ce2:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016ce4:	3101      	adds	r1, #1
 8016ce6:	441d      	add	r5, r3
 8016ce8:	2909      	cmp	r1, #9
 8016cea:	edc5 7a00 	vstr	s15, [r5]
 8016cee:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8016cf2:	f104 0409 	add.w	r4, r4, #9
 8016cf6:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8016cfa:	f108 0809 	add.w	r8, r8, #9
 8016cfe:	f109 0909 	add.w	r9, r9, #9
 8016d02:	f10a 0a09 	add.w	sl, sl, #9
 8016d06:	f10c 0c09 	add.w	ip, ip, #9
 8016d0a:	f10e 0e09 	add.w	lr, lr, #9
 8016d0e:	f10b 0b09 	add.w	fp, fp, #9
 8016d12:	f000 80d2 	beq.w	8016eba <kf_update+0x876>
 8016d16:	ed82 8a00 	vstr	s16, [r2]
 8016d1a:	2900      	cmp	r1, #0
 8016d1c:	f47f af7f 	bne.w	8016c1e <kf_update+0x5da>
 8016d20:	eddd 7a68 	vldr	s15, [sp, #416]	@ 0x1a0
 8016d24:	ed82 8a01 	vstr	s16, [r2, #4]
 8016d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d2c:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016d2e:	1fe5      	subs	r5, r4, #7
 8016d30:	edc0 7a00 	vstr	s15, [r0]
 8016d34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8016d38:	edd5 7a00 	vldr	s15, [r5]
 8016d3c:	ed82 8a02 	vstr	s16, [r2, #8]
 8016d40:	eef1 7a67 	vneg.f32	s15, s15
 8016d44:	edc5 7a00 	vstr	s15, [r5]
 8016d48:	ed82 8a03 	vstr	s16, [r2, #12]
 8016d4c:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8016d50:	edd5 7a00 	vldr	s15, [r5]
 8016d54:	eef1 7a67 	vneg.f32	s15, s15
 8016d58:	edc5 7a00 	vstr	s15, [r5]
 8016d5c:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016d5e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8016d62:	edd5 7a00 	vldr	s15, [r5]
 8016d66:	ed82 8a04 	vstr	s16, [r2, #16]
 8016d6a:	eef1 7a67 	vneg.f32	s15, s15
 8016d6e:	2904      	cmp	r1, #4
 8016d70:	edc5 7a00 	vstr	s15, [r5]
 8016d74:	d02d      	beq.n	8016dd2 <kf_update+0x78e>
 8016d76:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016d78:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8016d7c:	edd5 7a00 	vldr	s15, [r5]
 8016d80:	ed82 8a05 	vstr	s16, [r2, #20]
 8016d84:	eef1 7a67 	vneg.f32	s15, s15
 8016d88:	2905      	cmp	r1, #5
 8016d8a:	edc5 7a00 	vstr	s15, [r5]
 8016d8e:	d077      	beq.n	8016e80 <kf_update+0x83c>
 8016d90:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016d92:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8016d96:	edd5 7a00 	vldr	s15, [r5]
 8016d9a:	ed82 8a06 	vstr	s16, [r2, #24]
 8016d9e:	eef1 7a67 	vneg.f32	s15, s15
 8016da2:	2906      	cmp	r1, #6
 8016da4:	edc5 7a00 	vstr	s15, [r5]
 8016da8:	f47f af7d 	bne.w	8016ca6 <kf_update+0x662>
 8016dac:	edd0 7a06 	vldr	s15, [r0, #24]
 8016db0:	ed82 8a07 	vstr	s16, [r2, #28]
 8016db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016db8:	ed82 8a08 	vstr	s16, [r2, #32]
 8016dbc:	edc0 7a06 	vstr	s15, [r0, #24]
 8016dc0:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8016dc4:	edd5 7a00 	vldr	s15, [r5]
 8016dc8:	eef1 7a67 	vneg.f32	s15, s15
 8016dcc:	edc5 7a00 	vstr	s15, [r5]
 8016dd0:	e77f      	b.n	8016cd2 <kf_update+0x68e>
 8016dd2:	edd0 7a04 	vldr	s15, [r0, #16]
 8016dd6:	ed82 8a05 	vstr	s16, [r2, #20]
 8016dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016dde:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8016de2:	edc0 7a04 	vstr	s15, [r0, #16]
 8016de6:	edd5 7a00 	vldr	s15, [r5]
 8016dea:	ed82 8a06 	vstr	s16, [r2, #24]
 8016dee:	eef1 7a67 	vneg.f32	s15, s15
 8016df2:	edc5 7a00 	vstr	s15, [r5]
 8016df6:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8016dfa:	edd5 7a00 	vldr	s15, [r5]
 8016dfe:	ed82 8a07 	vstr	s16, [r2, #28]
 8016e02:	eef1 7a67 	vneg.f32	s15, s15
 8016e06:	edc5 7a00 	vstr	s15, [r5]
 8016e0a:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016e0c:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8016e10:	edd5 7a00 	vldr	s15, [r5]
 8016e14:	ed82 8a08 	vstr	s16, [r2, #32]
 8016e18:	eef1 7a67 	vneg.f32	s15, s15
 8016e1c:	2908      	cmp	r1, #8
 8016e1e:	edc5 7a00 	vstr	s15, [r5]
 8016e22:	f47f af56 	bne.w	8016cd2 <kf_update+0x68e>
 8016e26:	edd0 7a08 	vldr	s15, [r0, #32]
 8016e2a:	00a5      	lsls	r5, r4, #2
 8016e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e30:	e757      	b.n	8016ce2 <kf_update+0x69e>
 8016e32:	edd0 7a02 	vldr	s15, [r0, #8]
 8016e36:	ed82 8a03 	vstr	s16, [r2, #12]
 8016e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e3e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8016e42:	edc0 7a02 	vstr	s15, [r0, #8]
 8016e46:	edd5 7a00 	vldr	s15, [r5]
 8016e4a:	ed82 8a04 	vstr	s16, [r2, #16]
 8016e4e:	eef1 7a67 	vneg.f32	s15, s15
 8016e52:	edc5 7a00 	vstr	s15, [r5]
 8016e56:	e78e      	b.n	8016d76 <kf_update+0x732>
 8016e58:	edd0 7a01 	vldr	s15, [r0, #4]
 8016e5c:	ed82 8a02 	vstr	s16, [r2, #8]
 8016e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e64:	ab68      	add	r3, sp, #416	@ 0x1a0
 8016e66:	ed82 8a03 	vstr	s16, [r2, #12]
 8016e6a:	edc0 7a01 	vstr	s15, [r0, #4]
 8016e6e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8016e72:	edd5 7a00 	vldr	s15, [r5]
 8016e76:	eef1 7a67 	vneg.f32	s15, s15
 8016e7a:	edc5 7a00 	vstr	s15, [r5]
 8016e7e:	e76d      	b.n	8016d5c <kf_update+0x718>
 8016e80:	edd0 7a05 	vldr	s15, [r0, #20]
 8016e84:	ed82 8a06 	vstr	s16, [r2, #24]
 8016e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e8c:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8016e90:	edc0 7a05 	vstr	s15, [r0, #20]
 8016e94:	edd5 7a00 	vldr	s15, [r5]
 8016e98:	ed82 8a07 	vstr	s16, [r2, #28]
 8016e9c:	eef1 7a67 	vneg.f32	s15, s15
 8016ea0:	edc5 7a00 	vstr	s15, [r5]
 8016ea4:	ed82 8a08 	vstr	s16, [r2, #32]
 8016ea8:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8016eac:	edd5 7a00 	vldr	s15, [r5]
 8016eb0:	eef1 7a67 	vneg.f32	s15, s15
 8016eb4:	edc5 7a00 	vstr	s15, [r5]
 8016eb8:	e70b      	b.n	8016cd2 <kf_update+0x68e>
 8016eba:	9b06      	ldr	r3, [sp, #24]
 8016ebc:	2400      	movs	r4, #0
 8016ebe:	f506 70a2 	add.w	r0, r6, #324	@ 0x144
 8016ec2:	ecf3 3a01 	vldmia	r3!, {s7}
 8016ec6:	ed93 4a08 	vldr	s8, [r3, #32]
 8016eca:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
 8016ece:	ed93 5a1a 	vldr	s10, [r3, #104]	@ 0x68
 8016ed2:	edd3 5a23 	vldr	s11, [r3, #140]	@ 0x8c
 8016ed6:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 8016eda:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 8016ede:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8016ee2:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8016ee6:	4632      	mov	r2, r6
 8016ee8:	4639      	mov	r1, r7
 8016eea:	eef5 3a40 	vcmp.f32	s7, #0.0
 8016eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef2:	d00c      	beq.n	8016f0e <kf_update+0x8ca>
 8016ef4:	ed92 3a0a 	vldr	s6, [r2, #40]	@ 0x28
 8016ef8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f00:	d005      	beq.n	8016f0e <kf_update+0x8ca>
 8016f02:	edd1 2a00 	vldr	s5, [r1]
 8016f06:	eee3 2a83 	vfma.f32	s5, s7, s6
 8016f0a:	edc1 2a00 	vstr	s5, [r1]
 8016f0e:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8016f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f16:	d00c      	beq.n	8016f32 <kf_update+0x8ee>
 8016f18:	ed92 3a0b 	vldr	s6, [r2, #44]	@ 0x2c
 8016f1c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f24:	d005      	beq.n	8016f32 <kf_update+0x8ee>
 8016f26:	edd1 2a00 	vldr	s5, [r1]
 8016f2a:	eee4 2a03 	vfma.f32	s5, s8, s6
 8016f2e:	edc1 2a00 	vstr	s5, [r1]
 8016f32:	eef5 4a40 	vcmp.f32	s9, #0.0
 8016f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3a:	d00c      	beq.n	8016f56 <kf_update+0x912>
 8016f3c:	ed92 3a0c 	vldr	s6, [r2, #48]	@ 0x30
 8016f40:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f48:	d005      	beq.n	8016f56 <kf_update+0x912>
 8016f4a:	edd1 2a00 	vldr	s5, [r1]
 8016f4e:	eee4 2a83 	vfma.f32	s5, s9, s6
 8016f52:	edc1 2a00 	vstr	s5, [r1]
 8016f56:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f5e:	d00c      	beq.n	8016f7a <kf_update+0x936>
 8016f60:	ed92 3a0d 	vldr	s6, [r2, #52]	@ 0x34
 8016f64:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f6c:	d005      	beq.n	8016f7a <kf_update+0x936>
 8016f6e:	edd1 2a00 	vldr	s5, [r1]
 8016f72:	eee5 2a03 	vfma.f32	s5, s10, s6
 8016f76:	edc1 2a00 	vstr	s5, [r1]
 8016f7a:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f82:	d00c      	beq.n	8016f9e <kf_update+0x95a>
 8016f84:	ed92 3a0e 	vldr	s6, [r2, #56]	@ 0x38
 8016f88:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f90:	d005      	beq.n	8016f9e <kf_update+0x95a>
 8016f92:	edd1 2a00 	vldr	s5, [r1]
 8016f96:	eee5 2a83 	vfma.f32	s5, s11, s6
 8016f9a:	edc1 2a00 	vstr	s5, [r1]
 8016f9e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa6:	d00c      	beq.n	8016fc2 <kf_update+0x97e>
 8016fa8:	ed92 3a0f 	vldr	s6, [r2, #60]	@ 0x3c
 8016fac:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fb4:	d005      	beq.n	8016fc2 <kf_update+0x97e>
 8016fb6:	edd1 2a00 	vldr	s5, [r1]
 8016fba:	eee6 2a03 	vfma.f32	s5, s12, s6
 8016fbe:	edc1 2a00 	vstr	s5, [r1]
 8016fc2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fca:	d00c      	beq.n	8016fe6 <kf_update+0x9a2>
 8016fcc:	ed92 3a10 	vldr	s6, [r2, #64]	@ 0x40
 8016fd0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd8:	d005      	beq.n	8016fe6 <kf_update+0x9a2>
 8016fda:	edd1 2a00 	vldr	s5, [r1]
 8016fde:	eee6 2a83 	vfma.f32	s5, s13, s6
 8016fe2:	edc1 2a00 	vstr	s5, [r1]
 8016fe6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fee:	d00c      	beq.n	801700a <kf_update+0x9c6>
 8016ff0:	ed92 3a11 	vldr	s6, [r2, #68]	@ 0x44
 8016ff4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ffc:	d005      	beq.n	801700a <kf_update+0x9c6>
 8016ffe:	edd1 2a00 	vldr	s5, [r1]
 8017002:	eee7 2a03 	vfma.f32	s5, s14, s6
 8017006:	edc1 2a00 	vstr	s5, [r1]
 801700a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017012:	d00c      	beq.n	801702e <kf_update+0x9ea>
 8017014:	ed92 3a12 	vldr	s6, [r2, #72]	@ 0x48
 8017018:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801701c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017020:	d005      	beq.n	801702e <kf_update+0x9ea>
 8017022:	edd1 2a00 	vldr	s5, [r1]
 8017026:	eee7 2a83 	vfma.f32	s5, s15, s6
 801702a:	edc1 2a00 	vstr	s5, [r1]
 801702e:	3224      	adds	r2, #36	@ 0x24
 8017030:	4282      	cmp	r2, r0
 8017032:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8017036:	f47f af58 	bne.w	8016eea <kf_update+0x8a6>
 801703a:	3401      	adds	r4, #1
 801703c:	2c09      	cmp	r4, #9
 801703e:	f107 0704 	add.w	r7, r7, #4
 8017042:	f47f af3e 	bne.w	8016ec2 <kf_update+0x87e>
 8017046:	9805      	ldr	r0, [sp, #20]
 8017048:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801704c:	a9b9      	add	r1, sp, #740	@ 0x2e4
 801704e:	f006 fb16 	bl	801d67e <memcpy>
 8017052:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705a:	d05f      	beq.n	801711c <kf_update+0xad8>
 801705c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017064:	d05a      	beq.n	801711c <kf_update+0xad8>
 8017066:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801706e:	ee68 baab 	vmul.f32	s23, s17, s23
 8017072:	f000 812c 	beq.w	80172ce <kf_update+0xc8a>
 8017076:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801707e:	ee2c ca28 	vmul.f32	s24, s24, s17
 8017082:	f000 8121 	beq.w	80172c8 <kf_update+0xc84>
 8017086:	eeb5 da40 	vcmp.f32	s26, #0.0
 801708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801708e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8017092:	f000 8114 	beq.w	80172be <kf_update+0xc7a>
 8017096:	eef5 ca40 	vcmp.f32	s25, #0.0
 801709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 80170a2:	eeb0 aa4c 	vmov.f32	s20, s24
 80170a6:	f040 812f 	bne.w	8017308 <kf_update+0xcc4>
 80170aa:	eef0 ca47 	vmov.f32	s25, s14
 80170ae:	eeb0 da67 	vmov.f32	s26, s15
 80170b2:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80170b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ba:	d065      	beq.n	8017188 <kf_update+0xb44>
 80170bc:	eef5 8a40 	vcmp.f32	s17, #0.0
 80170c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170c4:	f000 80f0 	beq.w	80172a8 <kf_update+0xc64>
 80170c8:	eef0 7a48 	vmov.f32	s15, s16
 80170cc:	eef5 aa40 	vcmp.f32	s21, #0.0
 80170d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d4:	ee28 7a8b 	vmul.f32	s14, s17, s22
 80170d8:	d17d      	bne.n	80171d6 <kf_update+0xb92>
 80170da:	eef0 aa47 	vmov.f32	s21, s14
 80170de:	eeb0 ba67 	vmov.f32	s22, s15
 80170e2:	eef5 9a40 	vcmp.f32	s19, #0.0
 80170e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ea:	f000 8082 	beq.w	80171f2 <kf_update+0xbae>
 80170ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 80170f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170f6:	f000 80da 	beq.w	80172ae <kf_update+0xc6a>
 80170fa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80170fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017102:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8017106:	eef0 7a48 	vmov.f32	s15, s16
 801710a:	f040 812a 	bne.w	8017362 <kf_update+0xd1e>
 801710e:	eef0 8a49 	vmov.f32	s17, s18
 8017112:	eef0 9a67 	vmov.f32	s19, s15
 8017116:	eeb0 9a47 	vmov.f32	s18, s14
 801711a:	e086      	b.n	801722a <kf_update+0xbe6>
 801711c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8017120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017124:	d005      	beq.n	8017132 <kf_update+0xaee>
 8017126:	eef5 8a40 	vcmp.f32	s17, #0.0
 801712a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801712e:	f040 80f9 	bne.w	8017324 <kf_update+0xce0>
 8017132:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801713a:	d071      	beq.n	8017220 <kf_update+0xbdc>
 801713c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017144:	f040 8116 	bne.w	8017374 <kf_update+0xd30>
 8017148:	eeb0 aa68 	vmov.f32	s20, s17
 801714c:	eef0 ba68 	vmov.f32	s23, s17
 8017150:	eeb5 da40 	vcmp.f32	s26, #0.0
 8017154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017158:	d007      	beq.n	801716a <kf_update+0xb26>
 801715a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017162:	f040 80c7 	bne.w	80172f4 <kf_update+0xcb0>
 8017166:	eeb0 da68 	vmov.f32	s26, s17
 801716a:	eef5 ca40 	vcmp.f32	s25, #0.0
 801716e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017172:	d09e      	beq.n	80170b2 <kf_update+0xa6e>
 8017174:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801717c:	f040 80f7 	bne.w	801736e <kf_update+0xd2a>
 8017180:	eeb0 ba68 	vmov.f32	s22, s17
 8017184:	eef0 ca68 	vmov.f32	s25, s17
 8017188:	eef5 aa40 	vcmp.f32	s21, #0.0
 801718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017190:	d0a7      	beq.n	80170e2 <kf_update+0xa9e>
 8017192:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801719a:	f040 80ce 	bne.w	801733a <kf_update+0xcf6>
 801719e:	eef5 9a40 	vcmp.f32	s19, #0.0
 80171a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171a6:	f000 8087 	beq.w	80172b8 <kf_update+0xc74>
 80171aa:	eeb0 9a68 	vmov.f32	s18, s17
 80171ae:	eef0 9a68 	vmov.f32	s19, s17
 80171b2:	eef0 aa68 	vmov.f32	s21, s17
 80171b6:	e038      	b.n	801722a <kf_update+0xbe6>
 80171b8:	9b00      	ldr	r3, [sp, #0]
 80171ba:	edd3 8a00 	vldr	s17, [r3]
 80171be:	e493      	b.n	8016ae8 <kf_update+0x4a4>
 80171c0:	eef5 ba40 	vcmp.f32	s23, #0.0
 80171c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c8:	bf14      	ite	ne
 80171ca:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 80171ce:	eef0 7a6b 	vmoveq.f32	s15, s23
 80171d2:	f7ff bb65 	b.w	80168a0 <kf_update+0x25c>
 80171d6:	eef5 9a40 	vcmp.f32	s19, #0.0
 80171da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171de:	eeb0 ba67 	vmov.f32	s22, s15
 80171e2:	ee68 7aaa 	vmul.f32	s15, s17, s21
 80171e6:	f040 80b2 	bne.w	801734e <kf_update+0xd0a>
 80171ea:	eef0 9a67 	vmov.f32	s19, s15
 80171ee:	eef0 aa47 	vmov.f32	s21, s14
 80171f2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80171f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171fa:	d014      	beq.n	8017226 <kf_update+0xbe2>
 80171fc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017204:	d04d      	beq.n	80172a2 <kf_update+0xc5e>
 8017206:	eeb0 7a48 	vmov.f32	s14, s16
 801720a:	ee68 8a89 	vmul.f32	s17, s17, s18
 801720e:	eeb0 9a47 	vmov.f32	s18, s14
 8017212:	e00a      	b.n	801722a <kf_update+0xbe6>
 8017214:	f20d 4d2c 	addw	sp, sp, #1068	@ 0x42c
 8017218:	ecbd 8b10 	vpop	{d8-d15}
 801721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017220:	eef0 ba4a 	vmov.f32	s23, s20
 8017224:	e794      	b.n	8017150 <kf_update+0xb0c>
 8017226:	eef0 8a49 	vmov.f32	s17, s18
 801722a:	edd6 3a01 	vldr	s7, [r6, #4]
 801722e:	ed96 4a02 	vldr	s8, [r6, #8]
 8017232:	edd6 4a03 	vldr	s9, [r6, #12]
 8017236:	ed96 5a04 	vldr	s10, [r6, #16]
 801723a:	edd6 5a05 	vldr	s11, [r6, #20]
 801723e:	ed96 6a06 	vldr	s12, [r6, #24]
 8017242:	edd6 6a07 	vldr	s13, [r6, #28]
 8017246:	ed96 7a08 	vldr	s14, [r6, #32]
 801724a:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 801724e:	ee73 baab 	vadd.f32	s23, s7, s23
 8017252:	ee34 aa0a 	vadd.f32	s20, s8, s20
 8017256:	ee34 da8d 	vadd.f32	s26, s9, s26
 801725a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 801725e:	ee35 ba8b 	vadd.f32	s22, s11, s22
 8017262:	ee76 aa2a 	vadd.f32	s21, s12, s21
 8017266:	ee76 9aa9 	vadd.f32	s19, s13, s19
 801726a:	ee37 9a09 	vadd.f32	s18, s14, s18
 801726e:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8017272:	edc6 ba01 	vstr	s23, [r6, #4]
 8017276:	ed86 aa02 	vstr	s20, [r6, #8]
 801727a:	ed86 da03 	vstr	s26, [r6, #12]
 801727e:	edc6 ca04 	vstr	s25, [r6, #16]
 8017282:	ed86 ba05 	vstr	s22, [r6, #20]
 8017286:	edc6 aa06 	vstr	s21, [r6, #24]
 801728a:	edc6 9a07 	vstr	s19, [r6, #28]
 801728e:	ed86 9a08 	vstr	s18, [r6, #32]
 8017292:	edc6 8a09 	vstr	s17, [r6, #36]	@ 0x24
 8017296:	f7ff ba33 	b.w	8016700 <kf_update+0xbc>
 801729a:	eef0 7a6d 	vmov.f32	s15, s27
 801729e:	f7ff bbae 	b.w	80169fe <kf_update+0x3ba>
 80172a2:	eeb0 9a68 	vmov.f32	s18, s17
 80172a6:	e7c0      	b.n	801722a <kf_update+0xbe6>
 80172a8:	eeb0 ba68 	vmov.f32	s22, s17
 80172ac:	e76c      	b.n	8017188 <kf_update+0xb44>
 80172ae:	eeb0 9a68 	vmov.f32	s18, s17
 80172b2:	eef0 9a68 	vmov.f32	s19, s17
 80172b6:	e7b8      	b.n	801722a <kf_update+0xbe6>
 80172b8:	eef0 aa69 	vmov.f32	s21, s19
 80172bc:	e799      	b.n	80171f2 <kf_update+0xbae>
 80172be:	eeb0 da67 	vmov.f32	s26, s15
 80172c2:	eeb0 aa4c 	vmov.f32	s20, s24
 80172c6:	e750      	b.n	801716a <kf_update+0xb26>
 80172c8:	eeb0 aa4c 	vmov.f32	s20, s24
 80172cc:	e740      	b.n	8017150 <kf_update+0xb0c>
 80172ce:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80172d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d6:	f43f af3b 	beq.w	8017150 <kf_update+0xb0c>
 80172da:	eeb5 da40 	vcmp.f32	s26, #0.0
 80172de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e2:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80172e6:	f47f aed6 	bne.w	8017096 <kf_update+0xa52>
 80172ea:	e7e8      	b.n	80172be <kf_update+0xc7a>
 80172ec:	ee67 7aad 	vmul.f32	s15, s15, s27
 80172f0:	f7ff bb85 	b.w	80169fe <kf_update+0x3ba>
 80172f4:	eef5 ca40 	vcmp.f32	s25, #0.0
 80172f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172fc:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8017300:	eef0 7a48 	vmov.f32	s15, s16
 8017304:	f43f aed1 	beq.w	80170aa <kf_update+0xa66>
 8017308:	eeb0 da67 	vmov.f32	s26, s15
 801730c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017314:	ee68 7aac 	vmul.f32	s15, s17, s25
 8017318:	d126      	bne.n	8017368 <kf_update+0xd24>
 801731a:	eeb0 ba67 	vmov.f32	s22, s15
 801731e:	eef0 ca47 	vmov.f32	s25, s14
 8017322:	e731      	b.n	8017188 <kf_update+0xb44>
 8017324:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801732c:	ee2c ca28 	vmul.f32	s24, s24, s17
 8017330:	eef0 ba48 	vmov.f32	s23, s16
 8017334:	f47f aea7 	bne.w	8017086 <kf_update+0xa42>
 8017338:	e7c6      	b.n	80172c8 <kf_update+0xc84>
 801733a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801733e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017342:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8017346:	eeb0 7a48 	vmov.f32	s14, s16
 801734a:	f43f af4e 	beq.w	80171ea <kf_update+0xba6>
 801734e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017356:	eef0 aa47 	vmov.f32	s21, s14
 801735a:	ee28 7aa9 	vmul.f32	s14, s17, s19
 801735e:	f43f aed6 	beq.w	801710e <kf_update+0xaca>
 8017362:	eef0 9a67 	vmov.f32	s19, s15
 8017366:	e750      	b.n	801720a <kf_update+0xbc6>
 8017368:	eef0 ca47 	vmov.f32	s25, s14
 801736c:	e6ae      	b.n	80170cc <kf_update+0xa88>
 801736e:	eeb0 7a48 	vmov.f32	s14, s16
 8017372:	e7cb      	b.n	801730c <kf_update+0xcc8>
 8017374:	ed9f ca06 	vldr	s24, [pc, #24]	@ 8017390 <kf_update+0xd4c>
 8017378:	eeb5 da40 	vcmp.f32	s26, #0.0
 801737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017380:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8017384:	eef0 ba4c 	vmov.f32	s23, s24
 8017388:	f47f ae85 	bne.w	8017096 <kf_update+0xa52>
 801738c:	e797      	b.n	80172be <kf_update+0xc7a>
 801738e:	bf00      	nop
 8017390:	00000000 	.word	0x00000000

08017394 <q2hpr>:
 8017394:	b510      	push	{r4, lr}
 8017396:	ed90 7a00 	vldr	s14, [r0]
 801739a:	edd0 6a01 	vldr	s13, [r0, #4]
 801739e:	edd0 7a02 	vldr	s15, [r0, #8]
 80173a2:	edd0 4a03 	vldr	s9, [r0, #12]
 80173a6:	ed2d 8b0a 	vpush	{d8-d12}
 80173aa:	ee27 0a26 	vmul.f32	s0, s14, s13
 80173ae:	ee27 5a27 	vmul.f32	s10, s14, s15
 80173b2:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80173b6:	ee67 0a07 	vmul.f32	s1, s14, s14
 80173ba:	ee26 aaa6 	vmul.f32	s20, s13, s13
 80173be:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80173c2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80173c6:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80173ca:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80173ce:	ee70 9aa0 	vadd.f32	s19, s1, s1
 80173d2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 80173d6:	ee36 ba06 	vadd.f32	s22, s12, s12
 80173da:	ee70 aa00 	vadd.f32	s21, s0, s0
 80173de:	ee35 ca05 	vadd.f32	s24, s10, s10
 80173e2:	ee77 8a07 	vadd.f32	s17, s14, s14
 80173e6:	ee75 baa5 	vadd.f32	s23, s11, s11
 80173ea:	ee36 9aa6 	vadd.f32	s18, s13, s13
 80173ee:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80173f2:	460c      	mov	r4, r1
 80173f4:	bb8a      	cbnz	r2, 801745a <q2hpr+0xc6>
 80173f6:	ee79 0a8b 	vadd.f32	s1, s19, s22
 80173fa:	eeb7 ba00 	vmov.f32	s22, #112	@ 0x3f800000  1.0
 80173fe:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8017402:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8017406:	f008 f9f3 	bl	801f7f0 <atan2f>
 801740a:	eeb0 8a40 	vmov.f32	s16, s0
 801740e:	ed84 8a00 	vstr	s16, [r4]
 8017412:	ee38 0aab 	vadd.f32	s0, s17, s23
 8017416:	f008 f9bf 	bl	801f798 <asinf>
 801741a:	ee79 0a8a 	vadd.f32	s1, s19, s20
 801741e:	eef0 8a40 	vmov.f32	s17, s0
 8017422:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8017426:	ee3c 0a49 	vsub.f32	s0, s24, s18
 801742a:	f008 f9e1 	bl	801f7f0 <atan2f>
 801742e:	eef1 8a68 	vneg.f32	s17, s17
 8017432:	eeb0 9a40 	vmov.f32	s18, s0
 8017436:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801743e:	ed84 9a02 	vstr	s18, [r4, #8]
 8017442:	edc4 8a01 	vstr	s17, [r4, #4]
 8017446:	d505      	bpl.n	8017454 <q2hpr+0xc0>
 8017448:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80174a0 <q2hpr+0x10c>
 801744c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8017450:	ed84 8a00 	vstr	s16, [r4]
 8017454:	ecbd 8b0a 	vpop	{d8-d12}
 8017458:	bd10      	pop	{r4, pc}
 801745a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 801745e:	f008 f99b 	bl	801f798 <asinf>
 8017462:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8017466:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801746a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 801746e:	eeb0 9a40 	vmov.f32	s18, s0
 8017472:	ee38 0aab 	vadd.f32	s0, s17, s23
 8017476:	f008 f9bb 	bl	801f7f0 <atan2f>
 801747a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 801747e:	eef0 8a40 	vmov.f32	s17, s0
 8017482:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8017486:	ee79 0ae0 	vsub.f32	s1, s19, s1
 801748a:	eeb1 0a40 	vneg.f32	s0, s0
 801748e:	f008 f9af 	bl	801f7f0 <atan2f>
 8017492:	eef1 8a68 	vneg.f32	s17, s17
 8017496:	eeb0 8a40 	vmov.f32	s16, s0
 801749a:	ed84 0a00 	vstr	s0, [r4]
 801749e:	e7ca      	b.n	8017436 <q2hpr+0xa2>
 80174a0:	40c90fdb 	.word	0x40c90fdb

080174a4 <output_update>:
 80174a4:	edd0 7a01 	vldr	s15, [r0, #4]
 80174a8:	edd0 5a00 	vldr	s11, [r0]
 80174ac:	edd0 6a02 	vldr	s13, [r0, #8]
 80174b0:	ed90 5a03 	vldr	s10, [r0, #12]
 80174b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80174b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174bc:	ee27 7aa6 	vmul.f32	s14, s15, s13
 80174c0:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80174c4:	4615      	mov	r5, r2
 80174c6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80174ca:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80174ce:	eea5 7a85 	vfma.f32	s14, s11, s10
 80174d2:	460f      	mov	r7, r1
 80174d4:	461e      	mov	r6, r3
 80174d6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80174da:	ee67 7a85 	vmul.f32	s15, s15, s10
 80174de:	ee36 6a06 	vadd.f32	s12, s12, s12
 80174e2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80174e6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80174ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80174ee:	ee37 7a07 	vadd.f32	s14, s14, s14
 80174f2:	ee35 5ac6 	vsub.f32	s10, s11, s12
 80174f6:	2a00      	cmp	r2, #0
 80174f8:	d145      	bne.n	8017586 <output_update+0xe2>
 80174fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80174fe:	eeb1 7a47 	vneg.f32	s14, s14
 8017502:	ed83 7a00 	vstr	s14, [r3]
 8017506:	edc3 7a01 	vstr	s15, [r3, #4]
 801750a:	ed83 5a02 	vstr	s10, [r3, #8]
 801750e:	4629      	mov	r1, r5
 8017510:	4604      	mov	r4, r0
 8017512:	f7ff ff3f 	bl	8017394 <q2hpr>
 8017516:	ed95 7a01 	vldr	s14, [r5, #4]
 801751a:	edd5 7a02 	vldr	s15, [r5, #8]
 801751e:	edd5 6a00 	vldr	s13, [r5]
 8017522:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 8017630 <output_update+0x18c>
 8017526:	ee27 7a46 	vnmul.f32	s14, s14, s12
 801752a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 801752e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017532:	ed85 7a01 	vstr	s14, [r5, #4]
 8017536:	edc5 6a00 	vstr	s13, [r5]
 801753a:	edc5 7a02 	vstr	s15, [r5, #8]
 801753e:	ed97 7a01 	vldr	s14, [r7, #4]
 8017542:	edd6 7a00 	vldr	s15, [r6]
 8017546:	6823      	ldr	r3, [r4, #0]
 8017548:	ee77 7a87 	vadd.f32	s15, s15, s14
 801754c:	edc8 7a00 	vstr	s15, [r8]
 8017550:	ed97 7a00 	vldr	s14, [r7]
 8017554:	edd6 7a01 	vldr	s15, [r6, #4]
 8017558:	ee77 7a87 	vadd.f32	s15, s15, s14
 801755c:	edc8 7a01 	vstr	s15, [r8, #4]
 8017560:	edd6 7a02 	vldr	s15, [r6, #8]
 8017564:	ed97 7a02 	vldr	s14, [r7, #8]
 8017568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801756c:	edc8 7a02 	vstr	s15, [r8, #8]
 8017570:	edd4 7a02 	vldr	s15, [r4, #8]
 8017574:	6862      	ldr	r2, [r4, #4]
 8017576:	6022      	str	r2, [r4, #0]
 8017578:	eef1 7a67 	vneg.f32	s15, s15
 801757c:	6063      	str	r3, [r4, #4]
 801757e:	edc4 7a02 	vstr	s15, [r4, #8]
 8017582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017586:	2a01      	cmp	r2, #1
 8017588:	d015      	beq.n	80175b6 <output_update+0x112>
 801758a:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8017630 <output_update+0x18c>
 801758e:	edd5 6a00 	vldr	s13, [r5]
 8017592:	ed95 7a01 	vldr	s14, [r5, #4]
 8017596:	edd5 7a02 	vldr	s15, [r5, #8]
 801759a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801759e:	ee27 7a06 	vmul.f32	s14, s14, s12
 80175a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80175a6:	edc5 6a00 	vstr	s13, [r5]
 80175aa:	ed85 7a01 	vstr	s14, [r5, #4]
 80175ae:	edc5 7a02 	vstr	s15, [r5, #8]
 80175b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80175ba:	ee36 6a65 	vsub.f32	s12, s12, s11
 80175be:	eeb1 7a47 	vneg.f32	s14, s14
 80175c2:	edc3 7a00 	vstr	s15, [r3]
 80175c6:	ed83 7a01 	vstr	s14, [r3, #4]
 80175ca:	ed83 6a02 	vstr	s12, [r3, #8]
 80175ce:	4629      	mov	r1, r5
 80175d0:	f7ff fee0 	bl	8017394 <q2hpr>
 80175d4:	edd5 6a00 	vldr	s13, [r5]
 80175d8:	ed95 7a01 	vldr	s14, [r5, #4]
 80175dc:	edd5 7a02 	vldr	s15, [r5, #8]
 80175e0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017630 <output_update+0x18c>
 80175e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80175e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80175ec:	ee66 6a86 	vmul.f32	s13, s13, s12
 80175f0:	ed85 7a01 	vstr	s14, [r5, #4]
 80175f4:	edc5 6a00 	vstr	s13, [r5]
 80175f8:	edc5 7a02 	vstr	s15, [r5, #8]
 80175fc:	ed97 7a00 	vldr	s14, [r7]
 8017600:	edd6 7a00 	vldr	s15, [r6]
 8017604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017608:	edc8 7a00 	vstr	s15, [r8]
 801760c:	ed97 7a01 	vldr	s14, [r7, #4]
 8017610:	edd6 7a01 	vldr	s15, [r6, #4]
 8017614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017618:	edc8 7a01 	vstr	s15, [r8, #4]
 801761c:	edd6 7a02 	vldr	s15, [r6, #8]
 8017620:	ed97 7a02 	vldr	s14, [r7, #8]
 8017624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017628:	edc8 7a02 	vstr	s15, [r8, #8]
 801762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017630:	42652ee1 	.word	0x42652ee1
 8017634:	00000000 	.word	0x00000000

08017638 <MFX_emptyAttitude>:
 8017638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801763c:	ed2d 8b02 	vpush	{d8}
 8017640:	4fe9      	ldr	r7, [pc, #932]	@ (80179e8 <MFX_emptyAttitude+0x3b0>)
 8017642:	eddf 8aea 	vldr	s17, [pc, #936]	@ 80179ec <MFX_emptyAttitude+0x3b4>
 8017646:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 801764a:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 801764e:	f04f 0800 	mov.w	r8, #0
 8017652:	46bc      	mov	ip, r7
 8017654:	e9c4 8800 	strd	r8, r8, [r4]
 8017658:	f83c 3b04 	ldrh.w	r3, [ip], #4
 801765c:	f8c4 8008 	str.w	r8, [r4, #8]
 8017660:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 8017664:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 8017668:	4681      	mov	r9, r0
 801766a:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 801766e:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8017672:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017676:	0c1b      	lsrs	r3, r3, #16
 8017678:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 801767c:	ab2b      	add	r3, sp, #172	@ 0xac
 801767e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017682:	ab2e      	add	r3, sp, #184	@ 0xb8
 8017684:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017688:	ab31      	add	r3, sp, #196	@ 0xc4
 801768a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801768e:	ab34      	add	r3, sp, #208	@ 0xd0
 8017690:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8017694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017698:	ab37      	add	r3, sp, #220	@ 0xdc
 801769a:	edcd 8a08 	vstr	s17, [sp, #32]
 801769e:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 80176a2:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 80176a6:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 80176aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80176ae:	ab3a      	add	r3, sp, #232	@ 0xe8
 80176b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80176b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80176b8:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 80176bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80176c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80176c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80176c8:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 80176cc:	f8dc 3000 	ldr.w	r3, [ip]
 80176d0:	f8ce 3000 	str.w	r3, [lr]
 80176d4:	462a      	mov	r2, r5
 80176d6:	4641      	mov	r1, r8
 80176d8:	4620      	mov	r0, r4
 80176da:	f005 ff50 	bl	801d57e <memset>
 80176de:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 80176e2:	462a      	mov	r2, r5
 80176e4:	4621      	mov	r1, r4
 80176e6:	a840      	add	r0, sp, #256	@ 0x100
 80176e8:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 80176ec:	f005 ffc7 	bl	801d67e <memcpy>
 80176f0:	462a      	mov	r2, r5
 80176f2:	4641      	mov	r1, r8
 80176f4:	4620      	mov	r0, r4
 80176f6:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 80176fa:	f005 ff40 	bl	801d57e <memset>
 80176fe:	462a      	mov	r2, r5
 8017700:	4621      	mov	r1, r4
 8017702:	a89c      	add	r0, sp, #624	@ 0x270
 8017704:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 8017708:	f005 ffb9 	bl	801d67e <memcpy>
 801770c:	462a      	mov	r2, r5
 801770e:	4641      	mov	r1, r8
 8017710:	4620      	mov	r0, r4
 8017712:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 8017716:	f005 ff32 	bl	801d57e <memset>
 801771a:	462a      	mov	r2, r5
 801771c:	4621      	mov	r1, r4
 801771e:	a8f8      	add	r0, sp, #992	@ 0x3e0
 8017720:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 8017724:	f005 ffab 	bl	801d67e <memcpy>
 8017728:	462a      	mov	r2, r5
 801772a:	4641      	mov	r1, r8
 801772c:	4620      	mov	r0, r4
 801772e:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 8017732:	f005 ff24 	bl	801d57e <memset>
 8017736:	462a      	mov	r2, r5
 8017738:	4621      	mov	r1, r4
 801773a:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 801773e:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 8017742:	f005 ff9c 	bl	801d67e <memcpy>
 8017746:	f04f 0301 	mov.w	r3, #1
 801774a:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 801774e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8017752:	4ba7      	ldr	r3, [pc, #668]	@ (80179f0 <MFX_emptyAttitude+0x3b8>)
 8017754:	9320      	str	r3, [sp, #128]	@ 0x80
 8017756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017758:	ae0c      	add	r6, sp, #48	@ 0x30
 801775a:	46b3      	mov	fp, r6
 801775c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801775e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8017762:	e9c4 8800 	strd	r8, r8, [r4]
 8017766:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801776a:	f8c4 8010 	str.w	r8, [r4, #16]
 801776e:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 8017772:	46a6      	mov	lr, r4
 8017774:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017778:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801777c:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 8017780:	682d      	ldr	r5, [r5, #0]
 8017782:	f8cc 5000 	str.w	r5, [ip]
 8017786:	af21      	add	r7, sp, #132	@ 0x84
 8017788:	ed8a 8a01 	vstr	s16, [sl, #4]
 801778c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801778e:	ab1a      	add	r3, sp, #104	@ 0x68
 8017790:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017794:	abf6      	add	r3, sp, #984	@ 0x3d8
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	aa3e      	add	r2, sp, #248	@ 0xf8
 801779a:	f8c7 8000 	str.w	r8, [r7]
 801779e:	ab9a      	add	r3, sp, #616	@ 0x268
 80177a0:	a911      	add	r1, sp, #68	@ 0x44
 80177a2:	9403      	str	r4, [sp, #12]
 80177a4:	2001      	movs	r0, #1
 80177a6:	f7fe fa49 	bl	8015c3c <DataHist_parameters>
 80177aa:	4b92      	ldr	r3, [pc, #584]	@ (80179f4 <MFX_emptyAttitude+0x3bc>)
 80177ac:	f8c9 3018 	str.w	r3, [r9, #24]
 80177b0:	4b91      	ldr	r3, [pc, #580]	@ (80179f8 <MFX_emptyAttitude+0x3c0>)
 80177b2:	f8c9 301c 	str.w	r3, [r9, #28]
 80177b6:	4b91      	ldr	r3, [pc, #580]	@ (80179fc <MFX_emptyAttitude+0x3c4>)
 80177b8:	f8c9 3020 	str.w	r3, [r9, #32]
 80177bc:	4b90      	ldr	r3, [pc, #576]	@ (8017a00 <MFX_emptyAttitude+0x3c8>)
 80177be:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 80177c2:	ae2b      	add	r6, sp, #172	@ 0xac
 80177c4:	4b8f      	ldr	r3, [pc, #572]	@ (8017a04 <MFX_emptyAttitude+0x3cc>)
 80177c6:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 80177ca:	ce07      	ldmia	r6!, {r0, r1, r2}
 80177cc:	4b8e      	ldr	r3, [pc, #568]	@ (8017a08 <MFX_emptyAttitude+0x3d0>)
 80177ce:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 80177d2:	4b8e      	ldr	r3, [pc, #568]	@ (8017a0c <MFX_emptyAttitude+0x3d4>)
 80177d4:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 80177d8:	4b8d      	ldr	r3, [pc, #564]	@ (8017a10 <MFX_emptyAttitude+0x3d8>)
 80177da:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 80177de:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 80177e2:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 80177e6:	ad2e      	add	r5, sp, #184	@ 0xb8
 80177e8:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 80177ec:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80177f0:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 80177f4:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 80177f8:	cd07      	ldmia	r5!, {r0, r1, r2}
 80177fa:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 80177fe:	f240 1301 	movw	r3, #257	@ 0x101
 8017802:	ed9f 6b77 	vldr	d6, [pc, #476]	@ 80179e0 <MFX_emptyAttitude+0x3a8>
 8017806:	f8a9 3000 	strh.w	r3, [r9]
 801780a:	f8a9 3004 	strh.w	r3, [r9, #4]
 801780e:	4b81      	ldr	r3, [pc, #516]	@ (8017a14 <MFX_emptyAttitude+0x3dc>)
 8017810:	f8c9 300c 	str.w	r3, [r9, #12]
 8017814:	4b80      	ldr	r3, [pc, #512]	@ (8017a18 <MFX_emptyAttitude+0x3e0>)
 8017816:	f8c9 3014 	str.w	r3, [r9, #20]
 801781a:	f509 7346 	add.w	r3, r9, #792	@ 0x318
 801781e:	9304      	str	r3, [sp, #16]
 8017820:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 8017824:	ed89 6b16 	vstr	d6, [r9, #88]	@ 0x58
 8017828:	ed89 6b18 	vstr	d6, [r9, #96]	@ 0x60
 801782c:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 8017830:	f8a9 8002 	strh.w	r8, [r9, #2]
 8017834:	ed89 8a02 	vstr	s16, [r9, #8]
 8017838:	ed89 8a04 	vstr	s16, [r9, #16]
 801783c:	ed89 6b1a 	vstr	d6, [r9, #104]	@ 0x68
 8017840:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 8017844:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 8017848:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 801784c:	f10d 0bd0 	add.w	fp, sp, #208	@ 0xd0
 8017850:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 8017854:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 8017858:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 801785c:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8017860:	af37      	add	r7, sp, #220	@ 0xdc
 8017862:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 8017866:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 801786a:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 801786e:	cf07      	ldmia	r7!, {r0, r1, r2}
 8017870:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 8017874:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 8017878:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 801787c:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 8017880:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8017884:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8017a1c <MFX_emptyAttitude+0x3e4>
 8017888:	ed9f 5a65 	vldr	s10, [pc, #404]	@ 8017a20 <MFX_emptyAttitude+0x3e8>
 801788c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8017a24 <MFX_emptyAttitude+0x3ec>
 8017890:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 8017894:	f44f 1c48 	mov.w	ip, #3276800	@ 0x320000
 8017898:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801789c:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 80178a0:	ed89 5a65 	vstr	s10, [r9, #404]	@ 0x194
 80178a4:	edc9 5a66 	vstr	s11, [r9, #408]	@ 0x198
 80178a8:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 80178ac:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 80178b0:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 80178b4:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 80178b8:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 80178bc:	f04f 0101 	mov.w	r1, #1
 80178c0:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 80178c4:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 80178c8:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 80178cc:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 80178d0:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 80178d4:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 80178d8:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 80178dc:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 80178e0:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 80178e4:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 80178e8:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 80178ec:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 80178f0:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 80178f4:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 80178f8:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 80178fc:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 8017900:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 8017904:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 8017908:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 801790c:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 8017910:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 8017914:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 8017918:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 801791c:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 8017920:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 8017924:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 8017928:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 801792c:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 8017930:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 8017934:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 8017938:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 801793c:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 8017940:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 8017944:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 8017948:	f8c9 c1a0 	str.w	ip, [r9, #416]	@ 0x1a0
 801794c:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 8017950:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 8017954:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 8017958:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 801795c:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 8017960:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 8017964:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 8017968:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 801796c:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 8017970:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 8017974:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 8017978:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 801797c:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 8017980:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 8017984:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 8017988:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 801798c:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 8017990:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 8017994:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 8017998:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 801799c:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 80179a0:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 80179a4:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 80179a8:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 80179ac:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 80179b0:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 80179b4:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 80179b8:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 80179bc:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 80179c0:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 80179c4:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 80179c8:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 80179cc:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 80179d0:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 80179d4:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 80179d8:	e026      	b.n	8017a28 <MFX_emptyAttitude+0x3f0>
 80179da:	bf00      	nop
 80179dc:	f3af 8000 	nop.w
	...
 80179e8:	080238f4 	.word	0x080238f4
 80179ec:	00000000 	.word	0x00000000
 80179f0:	40a00000 	.word	0x40a00000
 80179f4:	3a9d4952 	.word	0x3a9d4952
 80179f8:	3ac49ba6 	.word	0x3ac49ba6
 80179fc:	3b03126f 	.word	0x3b03126f
 8017a00:	3a83126f 	.word	0x3a83126f
 8017a04:	3f639581 	.word	0x3f639581
 8017a08:	402ab021 	.word	0x402ab021
 8017a0c:	3f13f7cf 	.word	0x3f13f7cf
 8017a10:	3f2ac083 	.word	0x3f2ac083
 8017a14:	01010100 	.word	0x01010100
 8017a18:	41200000 	.word	0x41200000
 8017a1c:	447a0000 	.word	0x447a0000
 8017a20:	3f4ccccd 	.word	0x3f4ccccd
 8017a24:	3f333333 	.word	0x3f333333
 8017a28:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 8017a2c:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 8017a30:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 8017a34:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 8017a38:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 8017a3c:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 8017a40:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 8017a44:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 8017a48:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 8017a4c:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 8017a50:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 8017a54:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 8017a58:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 8017a5c:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 8017a60:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 8017a64:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 8017a68:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 8017a6c:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 8017a70:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 8017a74:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 8017a78:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 8017a7c:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 8017a80:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 8017a84:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 8017a88:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 8017a8c:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 8017a90:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 8017a94:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 8017a98:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 8017a9c:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 8017aa0:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 8017aa4:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 8017aa8:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 8017aac:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 8017ab0:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 8017ab4:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 8017ab8:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 8017abc:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 8017ac0:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 8017ac4:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 8017ac8:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 8017acc:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 8017ad0:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 8017ad4:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 8017ad8:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 8017adc:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 8017ae0:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 8017ae4:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 8017ae8:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 8017aec:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 8017af0:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 8017af4:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 8017af8:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 8017afc:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 8017b00:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 8017b04:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 8017b08:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 8017b0c:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 8017b10:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 8017b14:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 8017b18:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 8017b1c:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 8017b20:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 8017b24:	9a04      	ldr	r2, [sp, #16]
 8017b26:	f889 11ac 	strb.w	r1, [r9, #428]	@ 0x1ac
 8017b2a:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 8017b2e:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 8017b32:	9203      	str	r2, [sp, #12]
 8017b34:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 8017b38:	9202      	str	r2, [sp, #8]
 8017b3a:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 8017b3e:	9201      	str	r2, [sp, #4]
 8017b40:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 8017b44:	9200      	str	r2, [sp, #0]
 8017b46:	7820      	ldrb	r0, [r4, #0]
 8017b48:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 8017b4c:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 8017b50:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 8017b54:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 8017b58:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 8017b5c:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 8017b60:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 8017b64:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 8017b68:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 8017b6c:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 8017b70:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 8017b74:	f7fe f862 	bl	8015c3c <DataHist_parameters>
 8017b78:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 8017b7c:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 8017b80:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 8017b84:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 8017b88:	f10d 0c20 	add.w	ip, sp, #32
 8017b8c:	9304      	str	r3, [sp, #16]
 8017b8e:	9205      	str	r2, [sp, #20]
 8017b90:	9106      	str	r1, [sp, #24]
 8017b92:	9007      	str	r0, [sp, #28]
 8017b94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b98:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 8017b9c:	9b04      	ldr	r3, [sp, #16]
 8017b9e:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 8017ba2:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 8017ba6:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 8017baa:	9906      	ldr	r1, [sp, #24]
 8017bac:	9a05      	ldr	r2, [sp, #20]
 8017bae:	9807      	ldr	r0, [sp, #28]
 8017bb0:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 8017bb4:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 8017bb8:	edcb 8a00 	vstr	s17, [fp]
 8017bbc:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 8017bc0:	edca 8a00 	vstr	s17, [sl]
 8017bc4:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 8017bc8:	edc3 8a00 	vstr	s17, [r3]
 8017bcc:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 8017bd0:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 8017bd4:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 8017bd8:	230a      	movs	r3, #10
 8017bda:	edc2 8a00 	vstr	s17, [r2]
 8017bde:	edc7 8a00 	vstr	s17, [r7]
 8017be2:	edc6 8a00 	vstr	s17, [r6]
 8017be6:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 8017bea:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 8017bee:	edc5 8a00 	vstr	s17, [r5]
 8017bf2:	ed84 8a00 	vstr	s16, [r4]
 8017bf6:	edc1 8a00 	vstr	s17, [r1]
 8017bfa:	edc0 8a00 	vstr	s17, [r0]
 8017bfe:	edce 8a00 	vstr	s17, [lr]
 8017c02:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 8017c06:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 8017c0a:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 8017c0e:	ecbd 8b02 	vpop	{d8}
 8017c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c16:	bf00      	nop

08017c18 <iNemoEngine_API_Update>:
 8017c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c1c:	ed2d 8b10 	vpush	{d8-d15}
 8017c20:	f2ad 5d94 	subw	sp, sp, #1428	@ 0x594
 8017c24:	eeb0 8a40 	vmov.f32	s16, s0
 8017c28:	9006      	str	r0, [sp, #24]
 8017c2a:	9114      	str	r1, [sp, #80]	@ 0x50
 8017c2c:	4614      	mov	r4, r2
 8017c2e:	9324      	str	r3, [sp, #144]	@ 0x90
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	f000 8222 	beq.w	801807a <iNemoEngine_API_Update+0x462>
 8017c36:	68e0      	ldr	r0, [r4, #12]
 8017c38:	6921      	ldr	r1, [r4, #16]
 8017c3a:	6962      	ldr	r2, [r4, #20]
 8017c3c:	9d06      	ldr	r5, [sp, #24]
 8017c3e:	aba1      	add	r3, sp, #644	@ 0x284
 8017c40:	c307      	stmia	r3!, {r0, r1, r2}
 8017c42:	6820      	ldr	r0, [r4, #0]
 8017c44:	6861      	ldr	r1, [r4, #4]
 8017c46:	68a2      	ldr	r2, [r4, #8]
 8017c48:	ab9e      	add	r3, sp, #632	@ 0x278
 8017c4a:	c307      	stmia	r3!, {r0, r1, r2}
 8017c4c:	69a0      	ldr	r0, [r4, #24]
 8017c4e:	69e1      	ldr	r1, [r4, #28]
 8017c50:	6a22      	ldr	r2, [r4, #32]
 8017c52:	f895 4978 	ldrb.w	r4, [r5, #2424]	@ 0x978
 8017c56:	aba4      	add	r3, sp, #656	@ 0x290
 8017c58:	c307      	stmia	r3!, {r0, r1, r2}
 8017c5a:	b12c      	cbz	r4, 8017c68 <iNemoEngine_API_Update+0x50>
 8017c5c:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	@ 0x950
 8017c60:	792b      	ldrb	r3, [r5, #4]
 8017c62:	429a      	cmp	r2, r3
 8017c64:	f082 82a5 	bcs.w	801a1b2 <iNemoEngine_API_Update+0x259a>
 8017c68:	9c06      	ldr	r4, [sp, #24]
 8017c6a:	ae31      	add	r6, sp, #196	@ 0xc4
 8017c6c:	f104 033a 	add.w	r3, r4, #58	@ 0x3a
 8017c70:	4619      	mov	r1, r3
 8017c72:	4630      	mov	r0, r6
 8017c74:	aaa1      	add	r2, sp, #644	@ 0x284
 8017c76:	9320      	str	r3, [sp, #128]	@ 0x80
 8017c78:	ad37      	add	r5, sp, #220	@ 0xdc
 8017c7a:	f7fe f897 	bl	8015dac <rotVect>
 8017c7e:	aaa4      	add	r2, sp, #656	@ 0x290
 8017c80:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8017c84:	a834      	add	r0, sp, #208	@ 0xd0
 8017c86:	f7fe f891 	bl	8015dac <rotVect>
 8017c8a:	aa9e      	add	r2, sp, #632	@ 0x278
 8017c8c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8017c90:	4628      	mov	r0, r5
 8017c92:	f7fe f88b 	bl	8015dac <rotVect>
 8017c96:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8017c9a:	b923      	cbnz	r3, 8017ca6 <iNemoEngine_API_Update+0x8e>
 8017c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8017f14 <iNemoEngine_API_Update+0x2fc>)
 8017c9e:	606b      	str	r3, [r5, #4]
 8017ca0:	60ab      	str	r3, [r5, #8]
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	602b      	str	r3, [r5, #0]
 8017ca6:	9b06      	ldr	r3, [sp, #24]
 8017ca8:	f8d3 794c 	ldr.w	r7, [r3, #2380]	@ 0x94c
 8017cac:	2f09      	cmp	r7, #9
 8017cae:	d851      	bhi.n	8017d54 <iNemoEngine_API_Update+0x13c>
 8017cb0:	edd6 aa01 	vldr	s21, [r6, #4]
 8017cb4:	ed96 ba00 	vldr	s22, [r6]
 8017cb8:	ed96 aa02 	vldr	s20, [r6, #8]
 8017cbc:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8017cc0:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8017cc4:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8017cc8:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8017ccc:	ee17 0a90 	vmov	r0, s15
 8017cd0:	f7e8 fc42 	bl	8000558 <__aeabi_f2d>
 8017cd4:	ec41 0b10 	vmov	d0, r0, r1
 8017cd8:	f007 fc4e 	bl	801f578 <sqrt>
 8017cdc:	ec51 0b10 	vmov	r0, r1, d0
 8017ce0:	f7e8 ff8a 	bl	8000bf8 <__aeabi_d2f>
 8017ce4:	ee07 0a90 	vmov	s15, r0
 8017ce8:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 8017cec:	ed95 9a01 	vldr	s18, [r5, #4]
 8017cf0:	edd5 9a00 	vldr	s19, [r5]
 8017cf4:	edd5 8a02 	vldr	s17, [r5, #8]
 8017cf8:	ee69 7a09 	vmul.f32	s15, s18, s18
 8017cfc:	ee2b ba07 	vmul.f32	s22, s22, s14
 8017d00:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8017d04:	ee6a aa87 	vmul.f32	s21, s21, s14
 8017d08:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017d0c:	ee2a aa07 	vmul.f32	s20, s20, s14
 8017d10:	ee17 0a90 	vmov	r0, s15
 8017d14:	ed86 ba00 	vstr	s22, [r6]
 8017d18:	edc6 aa01 	vstr	s21, [r6, #4]
 8017d1c:	ed86 aa02 	vstr	s20, [r6, #8]
 8017d20:	f7e8 fc1a 	bl	8000558 <__aeabi_f2d>
 8017d24:	ec41 0b10 	vmov	d0, r0, r1
 8017d28:	f007 fc26 	bl	801f578 <sqrt>
 8017d2c:	ec51 0b10 	vmov	r0, r1, d0
 8017d30:	f7e8 ff62 	bl	8000bf8 <__aeabi_d2f>
 8017d34:	ee07 0a90 	vmov	s15, r0
 8017d38:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8017d3c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017d40:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017d44:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017d48:	edc5 9a00 	vstr	s19, [r5]
 8017d4c:	ed85 9a01 	vstr	s18, [r5, #4]
 8017d50:	edc5 8a02 	vstr	s17, [r5, #8]
 8017d54:	9906      	ldr	r1, [sp, #24]
 8017d56:	790b      	ldrb	r3, [r1, #4]
 8017d58:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	@ 0x950
 8017d5c:	429a      	cmp	r2, r3
 8017d5e:	f080 80f5 	bcs.w	8017f4c <iNemoEngine_API_Update+0x334>
 8017d62:	abf8      	add	r3, sp, #992	@ 0x3e0
 8017d64:	9319      	str	r3, [sp, #100]	@ 0x64
 8017d66:	f501 6313 	add.w	r3, r1, #2352	@ 0x930
 8017d6a:	931c      	str	r3, [sp, #112]	@ 0x70
 8017d6c:	f601 1334 	addw	r3, r1, #2356	@ 0x934
 8017d70:	931d      	str	r3, [sp, #116]	@ 0x74
 8017d72:	f601 1338 	addw	r3, r1, #2360	@ 0x938
 8017d76:	931e      	str	r3, [sp, #120]	@ 0x78
 8017d78:	eddd 9af5 	vldr	s19, [sp, #980]	@ 0x3d4
 8017d7c:	f601 133c 	addw	r3, r1, #2364	@ 0x93c
 8017d80:	accc      	add	r4, sp, #816	@ 0x330
 8017d82:	931f      	str	r3, [sp, #124]	@ 0x7c
 8017d84:	460d      	mov	r5, r1
 8017d86:	3701      	adds	r7, #1
 8017d88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8017d8a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8017d8c:	f8c5 794c 	str.w	r7, [r5, #2380]	@ 0x94c
 8017d90:	aaa1      	add	r2, sp, #644	@ 0x284
 8017d92:	f7fe f80b 	bl	8015dac <rotVect>
 8017d96:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017d98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	60d3      	str	r3, [r2, #12]
 8017d9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	6113      	str	r3, [r2, #16]
 8017da4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	6153      	str	r3, [r2, #20]
 8017daa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	6193      	str	r3, [r2, #24]
 8017db0:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 8017db4:	9301      	str	r3, [sp, #4]
 8017db6:	4601      	mov	r1, r0
 8017db8:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8017dbc:	4610      	mov	r0, r2
 8017dbe:	4615      	mov	r5, r2
 8017dc0:	300c      	adds	r0, #12
 8017dc2:	9300      	str	r3, [sp, #0]
 8017dc4:	f102 031c 	add.w	r3, r2, #28
 8017dc8:	f7ff fb6c 	bl	80174a4 <output_update>
 8017dcc:	ed95 8a00 	vldr	s16, [r5]
 8017dd0:	ed95 aa01 	vldr	s20, [r5, #4]
 8017dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8017dd8:	f007 fd58 	bl	801f88c <sinf>
 8017ddc:	eeb0 9a40 	vmov.f32	s18, s0
 8017de0:	eeb0 0a48 	vmov.f32	s0, s16
 8017de4:	f007 fd06 	bl	801f7f4 <cosf>
 8017de8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8017dec:	edd4 6a3d 	vldr	s13, [r4, #244]	@ 0xf4
 8017df0:	ee60 8a00 	vmul.f32	s17, s0, s0
 8017df4:	eeb0 7aca 	vabs.f32	s14, s20
 8017df8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017dfc:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8017f18 <iNemoEngine_API_Update+0x300>
 8017e00:	ee29 9a09 	vmul.f32	s18, s18, s18
 8017e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e0c:	eee9 8a26 	vfma.f32	s17, s18, s13
 8017e10:	d579      	bpl.n	8017f06 <iNemoEngine_API_Update+0x2ee>
 8017e12:	eeb0 0a4a 	vmov.f32	s0, s20
 8017e16:	f007 fd7f 	bl	801f918 <tanf>
 8017e1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017e1e:	eeb0 7a69 	vmov.f32	s14, s19
 8017e22:	eea0 7a28 	vfma.f32	s14, s0, s17
 8017e26:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017e28:	9b06      	ldr	r3, [sp, #24]
 8017e2a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8017f1c <iNemoEngine_API_Update+0x304>
 8017e2e:	4c3c      	ldr	r4, [pc, #240]	@ (8017f20 <iNemoEngine_API_Update+0x308>)
 8017e30:	eef1 7ac7 	vsqrt.f32	s15, s14
 8017e34:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8017f40 <iNemoEngine_API_Update+0x328>
 8017e38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017e3c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e44:	bf88      	it	hi
 8017e46:	eef0 7a66 	vmovhi.f32	s15, s13
 8017e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e52:	bfb8      	it	lt
 8017e54:	eef0 7a47 	vmovlt.f32	s15, s14
 8017e58:	edc5 7a0e 	vstr	s15, [r5, #56]	@ 0x38
 8017e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017e60:	bbd3      	cbnz	r3, 8017ed8 <iNemoEngine_API_Update+0x2c0>
 8017e62:	ed95 1a09 	vldr	s2, [r5, #36]	@ 0x24
 8017e66:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 8017e6a:	edd5 0a08 	vldr	s1, [r5, #32]
 8017e6e:	ed95 0a07 	vldr	s0, [r5, #28]
 8017e72:	f7fe f86d 	bl	8015f50 <findDirection>
 8017e76:	ed95 7a03 	vldr	s14, [r5, #12]
 8017e7a:	edd5 6a04 	vldr	s13, [r5, #16]
 8017e7e:	edd5 8a05 	vldr	s17, [r5, #20]
 8017e82:	edd5 7a06 	vldr	s15, [r5, #24]
 8017e86:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 8017e8a:	2805      	cmp	r0, #5
 8017e8c:	f204 822c 	bhi.w	801c2e8 <iNemoEngine_API_Update+0x46d0>
 8017e90:	e8df f010 	tbh	[pc, r0, lsl #1]
 8017e94:	11d0000a 	.word	0x11d0000a
 8017e98:	11990006 	.word	0x11990006
 8017e9c:	000a0006 	.word	0x000a0006
 8017ea0:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8017f24 <iNemoEngine_API_Update+0x30c>
 8017ea4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8017ea8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8017f28 <iNemoEngine_API_Update+0x310>
 8017eac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eb4:	bfa8      	it	ge
 8017eb6:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8017eba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ec2:	f100 80d5 	bmi.w	8018070 <iNemoEngine_API_Update+0x458>
 8017ec6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017ec8:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
 8017ecc:	f20d 5d94 	addw	sp, sp, #1428	@ 0x594
 8017ed0:	ecbd 8b10 	vpop	{d8-d15}
 8017ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ed8:	ed95 1a09 	vldr	s2, [r5, #36]	@ 0x24
 8017edc:	edd5 8a05 	vldr	s17, [r5, #20]
 8017ee0:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 8017ee4:	edd5 0a07 	vldr	s1, [r5, #28]
 8017ee8:	ed95 0a08 	vldr	s0, [r5, #32]
 8017eec:	eeb1 1a41 	vneg.f32	s2, s2
 8017ef0:	f7fe f82e 	bl	8015f50 <findDirection>
 8017ef4:	eef1 8a68 	vneg.f32	s17, s17
 8017ef8:	ed95 7a04 	vldr	s14, [r5, #16]
 8017efc:	edd5 6a03 	vldr	s13, [r5, #12]
 8017f00:	edd5 7a06 	vldr	s15, [r5, #24]
 8017f04:	e7bf      	b.n	8017e86 <iNemoEngine_API_Update+0x26e>
 8017f06:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017f2c <iNemoEngine_API_Update+0x314>
 8017f0a:	eeb0 7a69 	vmov.f32	s14, s19
 8017f0e:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8017f12:	e788      	b.n	8017e26 <iNemoEngine_API_Update+0x20e>
 8017f14:	3f333333 	.word	0x3f333333
 8017f18:	3fbc430e 	.word	0x3fbc430e
 8017f1c:	40490fdb 	.word	0x40490fdb
 8017f20:	20000544 	.word	0x20000544
 8017f24:	43340000 	.word	0x43340000
 8017f28:	43b40000 	.word	0x43b40000
 8017f2c:	42c6ab07 	.word	0x42c6ab07
 8017f30:	3c03126f 	.word	0x3c03126f
 8017f34:	3b656042 	.word	0x3b656042
 8017f38:	3e4ccccd 	.word	0x3e4ccccd
 8017f3c:	3fb50481 	.word	0x3fb50481
 8017f40:	3c8efa35 	.word	0x3c8efa35
 8017f44:	3ed93dd9 	.word	0x3ed93dd9
 8017f48:	42c80000 	.word	0x42c80000
 8017f4c:	ee07 3a90 	vmov	s15, r3
 8017f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017f54:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 8017f30 <iNemoEngine_API_Update+0x318>
 8017f58:	ed5f 6a0a 	vldr	s13, [pc, #-40]	@ 8017f34 <iNemoEngine_API_Update+0x31c>
 8017f5c:	ed5f ba08 	vldr	s23, [pc, #-32]	@ 8017f40 <iNemoEngine_API_Update+0x328>
 8017f60:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 8017f3c <iNemoEngine_API_Update+0x324>
 8017f64:	ed5f 4a0c 	vldr	s9, [pc, #-48]	@ 8017f38 <iNemoEngine_API_Update+0x320>
 8017f68:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017f6c:	4608      	mov	r0, r1
 8017f6e:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8017f72:	f601 125c 	addw	r2, r1, #2396	@ 0x95c
 8017f76:	2300      	movs	r3, #0
 8017f78:	2100      	movs	r1, #0
 8017f7a:	f50d 7cb2 	add.w	ip, sp, #356	@ 0x164
 8017f7e:	ac56      	add	r4, sp, #344	@ 0x158
 8017f80:	edcd 7a07 	vstr	s15, [sp, #28]
 8017f84:	eef1 7ae5 	vsqrt.f32	s15, s11
 8017f88:	ed1f 7a12 	vldr	s14, [pc, #-72]	@ 8017f44 <iNemoEngine_API_Update+0x32c>
 8017f8c:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 8017f90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8017f94:	ed92 7a00 	vldr	s14, [r2]
 8017f98:	f8a0 1950 	strh.w	r1, [r0, #2384]	@ 0x950
 8017f9c:	6013      	str	r3, [r2, #0]
 8017f9e:	f500 6216 	add.w	r2, r0, #2400	@ 0x960
 8017fa2:	ee27 ea2b 	vmul.f32	s28, s14, s23
 8017fa6:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
 8017faa:	ed92 7a00 	vldr	s14, [r2]
 8017fae:	6013      	str	r3, [r2, #0]
 8017fb0:	f600 1264 	addw	r2, r0, #2404	@ 0x964
 8017fb4:	ee67 ea2b 	vmul.f32	s29, s14, s23
 8017fb8:	ed8d 7a1c 	vstr	s14, [sp, #112]	@ 0x70
 8017fbc:	ed92 7a00 	vldr	s14, [r2]
 8017fc0:	6013      	str	r3, [r2, #0]
 8017fc2:	7947      	ldrb	r7, [r0, #5]
 8017fc4:	ed8d 7a18 	vstr	s14, [sp, #96]	@ 0x60
 8017fc8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017fcc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8017fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017fd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017fd8:	9a06      	ldr	r2, [sp, #24]
 8017fda:	f8d2 01c8 	ldr.w	r0, [r2, #456]	@ 0x1c8
 8017fde:	f8d2 11cc 	ldr.w	r1, [r2, #460]	@ 0x1cc
 8017fe2:	f8d2 21d0 	ldr.w	r2, [r2, #464]	@ 0x1d0
 8017fe6:	abd9      	add	r3, sp, #868	@ 0x364
 8017fe8:	2f01      	cmp	r7, #1
 8017fea:	c307      	stmia	r3!, {r0, r1, r2}
 8017fec:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017ff0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8017ff4:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8017ff8:	f002 844a 	beq.w	801a890 <iNemoEngine_API_Update+0x2c78>
 8017ffc:	2f02      	cmp	r7, #2
 8017ffe:	f002 843c 	beq.w	801a87a <iNemoEngine_API_Update+0x2c62>
 8018002:	2f00      	cmp	r7, #0
 8018004:	f002 814d 	beq.w	801a2a2 <iNemoEngine_API_Update+0x268a>
 8018008:	9b06      	ldr	r3, [sp, #24]
 801800a:	ed5f 5a31 	vldr	s11, [pc, #-196]	@ 8017f48 <iNemoEngine_API_Update+0x330>
 801800e:	ed93 ba05 	vldr	s22, [r3, #20]
 8018012:	491b      	ldr	r1, [pc, #108]	@ (8018080 <iNemoEngine_API_Update+0x468>)
 8018014:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018018:	ee2b ba25 	vmul.f32	s22, s22, s11
 801801c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018020:	4618      	mov	r0, r3
 8018022:	8842      	ldrh	r2, [r0, #2]
 8018024:	1e53      	subs	r3, r2, #1
 8018026:	2b12      	cmp	r3, #18
 8018028:	d834      	bhi.n	8018094 <iNemoEngine_API_Update+0x47c>
 801802a:	3201      	adds	r2, #1
 801802c:	b213      	sxth	r3, r2
 801802e:	b292      	uxth	r2, r2
 8018030:	2a03      	cmp	r2, #3
 8018032:	8043      	strh	r3, [r0, #2]
 8018034:	f242 8401 	bls.w	801a83a <iNemoEngine_API_Update+0x2c22>
 8018038:	ee07 3a10 	vmov	s14, r3
 801803c:	eddf 5a11 	vldr	s11, [pc, #68]	@ 8018084 <iNemoEngine_API_Update+0x46c>
 8018040:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018044:	4603      	mov	r3, r0
 8018046:	ee27 7a25 	vmul.f32	s14, s14, s11
 801804a:	ee84 4a07 	vdiv.f32	s8, s8, s14
 801804e:	ed93 5a0d 	vldr	s10, [r3, #52]	@ 0x34
 8018052:	ed8d 4a22 	vstr	s8, [sp, #136]	@ 0x88
 8018056:	ee66 5a87 	vmul.f32	s11, s13, s14
 801805a:	ee66 6a05 	vmul.f32	s13, s12, s10
 801805e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8018090 <iNemoEngine_API_Update+0x478>
 8018062:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018066:	ee24 6a86 	vmul.f32	s12, s9, s12
 801806a:	eeb0 7a65 	vmov.f32	s14, s11
 801806e:	e02d      	b.n	80180cc <iNemoEngine_API_Update+0x4b4>
 8018070:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8018088 <iNemoEngine_API_Update+0x470>
 8018074:	ee38 8a27 	vadd.f32	s16, s16, s15
 8018078:	e725      	b.n	8017ec6 <iNemoEngine_API_Update+0x2ae>
 801807a:	ab46      	add	r3, sp, #280	@ 0x118
 801807c:	9324      	str	r3, [sp, #144]	@ 0x90
 801807e:	e5da      	b.n	8017c36 <iNemoEngine_API_Update+0x1e>
 8018080:	3a83126f 	.word	0x3a83126f
 8018084:	3d4ccccd 	.word	0x3d4ccccd
 8018088:	43b40000 	.word	0x43b40000
 801808c:	358637bd 	.word	0x358637bd
 8018090:	3f333333 	.word	0x3f333333
 8018094:	ed1f 5a03 	vldr	s10, [pc, #-12]	@ 801808c <iNemoEngine_API_Update+0x474>
 8018098:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
 801809c:	edd0 5a0b 	vldr	s11, [r0, #44]	@ 0x2c
 80180a0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80180a4:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 80180a8:	ee84 7a07 	vdiv.f32	s14, s8, s14
 80180ac:	2300      	movs	r3, #0
 80180ae:	8043      	strh	r3, [r0, #2]
 80180b0:	ee66 5aa5 	vmul.f32	s11, s13, s11
 80180b4:	ed8d 7a22 	vstr	s14, [sp, #136]	@ 0x88
 80180b8:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 80180bc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80180c0:	ee66 6a05 	vmul.f32	s13, s12, s10
 80180c4:	ed1f 6a0e 	vldr	s12, [pc, #-56]	@ 8018090 <iNemoEngine_API_Update+0x478>
 80180c8:	ee24 6a86 	vmul.f32	s12, s9, s12
 80180cc:	eef7 4a08 	vmov.f32	s9, #120	@ 0x3fc00000  1.5
 80180d0:	ee25 5a24 	vmul.f32	s10, s10, s9
 80180d4:	edcd 7a89 	vstr	s15, [sp, #548]	@ 0x224
 80180d8:	edcd 7a8a 	vstr	s15, [sp, #552]	@ 0x228
 80180dc:	edcd 7a8b 	vstr	s15, [sp, #556]	@ 0x22c
 80180e0:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 80180e4:	4bdd      	ldr	r3, [pc, #884]	@ (801845c <iNemoEngine_API_Update+0x844>)
 80180e6:	9162      	str	r1, [sp, #392]	@ 0x188
 80180e8:	a8f8      	add	r0, sp, #992	@ 0x3e0
 80180ea:	9163      	str	r1, [sp, #396]	@ 0x18c
 80180ec:	9164      	str	r1, [sp, #400]	@ 0x190
 80180ee:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80180f2:	2100      	movs	r1, #0
 80180f4:	4605      	mov	r5, r0
 80180f6:	9367      	str	r3, [sp, #412]	@ 0x19c
 80180f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80180fa:	edcd 5a83 	vstr	s11, [sp, #524]	@ 0x20c
 80180fe:	edcd 5a84 	vstr	s11, [sp, #528]	@ 0x210
 8018102:	edcd 5a85 	vstr	s11, [sp, #532]	@ 0x214
 8018106:	ed8d 7a86 	vstr	s14, [sp, #536]	@ 0x218
 801810a:	ed8d 7a87 	vstr	s14, [sp, #540]	@ 0x21c
 801810e:	ed8d 7a88 	vstr	s14, [sp, #544]	@ 0x220
 8018112:	edcd 6a8c 	vstr	s13, [sp, #560]	@ 0x230
 8018116:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 801811a:	ed8d 5a8e 	vstr	s10, [sp, #568]	@ 0x238
 801811e:	edcd 7a5f 	vstr	s15, [sp, #380]	@ 0x17c
 8018122:	edcd 7a60 	vstr	s15, [sp, #384]	@ 0x180
 8018126:	edcd 7a61 	vstr	s15, [sp, #388]	@ 0x184
 801812a:	f005 fa28 	bl	801d57e <memset>
 801812e:	9b06      	ldr	r3, [sp, #24]
 8018130:	7b5a      	ldrb	r2, [r3, #13]
 8018132:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8018136:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 801813a:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 801813e:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 8018142:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 8018146:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 801814a:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 801814e:	2a00      	cmp	r2, #0
 8018150:	f001 8124 	beq.w	801939c <iNemoEngine_API_Update+0x1784>
 8018154:	ed94 8a01 	vldr	s16, [r4, #4]
 8018158:	edd4 8a00 	vldr	s17, [r4]
 801815c:	ed94 ca02 	vldr	s24, [r4, #8]
 8018160:	ee28 9a08 	vmul.f32	s18, s16, s16
 8018164:	eef8 7a00 	vmov.f32	s15, #128	@ 0xc0000000 -2.0
 8018168:	eea8 9aa8 	vfma.f32	s18, s17, s17
 801816c:	ee68 5a27 	vmul.f32	s11, s16, s15
 8018170:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8018174:	ee6c 6a27 	vmul.f32	s13, s24, s15
 8018178:	eef1 cac9 	vsqrt.f32	s25, s18
 801817c:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 8018180:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018184:	ee38 6aa8 	vadd.f32	s12, s17, s17
 8018188:	ee38 7a08 	vadd.f32	s14, s16, s16
 801818c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801818e:	ed94 aa04 	vldr	s20, [r4, #16]
 8018192:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 8018196:	eef1 7a4a 	vneg.f32	s15, s20
 801819a:	edd4 9a05 	vldr	s19, [r4, #20]
 801819e:	edd4 aa03 	vldr	s21, [r4, #12]
 80181a2:	ed83 5a01 	vstr	s10, [r3, #4]
 80181a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80181aa:	edc3 5a02 	vstr	s11, [r3, #8]
 80181ae:	edc3 7a05 	vstr	s15, [r3, #20]
 80181b2:	eef1 7a69 	vneg.f32	s15, s19
 80181b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80181ba:	edc3 6a0c 	vstr	s13, [r3, #48]	@ 0x30
 80181be:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 80181c2:	eef1 7a6a 	vneg.f32	s15, s21
 80181c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80181ca:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 80181ce:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 80181d2:	ee79 7aa9 	vadd.f32	s15, s19, s19
 80181d6:	ed83 7a18 	vstr	s14, [r3, #96]	@ 0x60
 80181da:	edc3 7a04 	vstr	s15, [r3, #16]
 80181de:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 80181e2:	2230      	movs	r2, #48	@ 0x30
 80181e4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 80181e8:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 80181ec:	2100      	movs	r1, #0
 80181ee:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 80181f2:	a88f      	add	r0, sp, #572	@ 0x23c
 80181f4:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 80181f8:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
 80181fc:	933c      	str	r3, [sp, #240]	@ 0xf0
 80181fe:	f005 f9be 	bl	801d57e <memset>
 8018202:	9a06      	ldr	r2, [sp, #24]
 8018204:	edd2 7a07 	vldr	s15, [r2, #28]
 8018208:	ed92 da06 	vldr	s26, [r2, #24]
 801820c:	f892 31ac 	ldrb.w	r3, [r2, #428]	@ 0x1ac
 8018210:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8018214:	ee2b da0d 	vmul.f32	s26, s22, s26
 8018218:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 801821c:	edd2 7a08 	vldr	s15, [r2, #32]
 8018220:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8018224:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
 8018228:	2b00      	cmp	r3, #0
 801822a:	f043 8025 	bne.w	801b278 <iNemoEngine_API_Update+0x3660>
 801822e:	4613      	mov	r3, r2
 8018230:	f502 6214 	add.w	r2, r2, #2368	@ 0x940
 8018234:	9225      	str	r2, [sp, #148]	@ 0x94
 8018236:	f603 1244 	addw	r2, r3, #2372	@ 0x944
 801823a:	f603 1348 	addw	r3, r3, #2376	@ 0x948
 801823e:	9226      	str	r2, [sp, #152]	@ 0x98
 8018240:	9327      	str	r3, [sp, #156]	@ 0x9c
 8018242:	9a06      	ldr	r2, [sp, #24]
 8018244:	f892 3318 	ldrb.w	r3, [r2, #792]	@ 0x318
 8018248:	2b00      	cmp	r3, #0
 801824a:	f042 84db 	bne.w	801ac04 <iNemoEngine_API_Update+0x2fec>
 801824e:	4613      	mov	r3, r2
 8018250:	f502 6597 	add.w	r5, r2, #1208	@ 0x4b8
 8018254:	f202 47b4 	addw	r7, r2, #1204	@ 0x4b4
 8018258:	f502 66c5 	add.w	r6, r2, #1576	@ 0x628
 801825c:	f202 6824 	addw	r8, r2, #1572	@ 0x624
 8018260:	f203 7394 	addw	r3, r3, #1940	@ 0x794
 8018264:	f502 62f3 	add.w	r2, r2, #1944	@ 0x798
 8018268:	9215      	str	r2, [sp, #84]	@ 0x54
 801826a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801826c:	9b06      	ldr	r3, [sp, #24]
 801826e:	f503 6213 	add.w	r2, r3, #2352	@ 0x930
 8018272:	ed92 6a00 	vldr	s12, [r2]
 8018276:	921c      	str	r2, [sp, #112]	@ 0x70
 8018278:	f603 1134 	addw	r1, r3, #2356	@ 0x934
 801827c:	f603 1038 	addw	r0, r3, #2360	@ 0x938
 8018280:	f603 133c 	addw	r3, r3, #2364	@ 0x93c
 8018284:	edd3 7a00 	vldr	s15, [r3]
 8018288:	edd1 6a00 	vldr	s13, [r1]
 801828c:	ed90 7a00 	vldr	s14, [r0]
 8018290:	931f      	str	r3, [sp, #124]	@ 0x7c
 8018292:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801829a:	911d      	str	r1, [sp, #116]	@ 0x74
 801829c:	901e      	str	r0, [sp, #120]	@ 0x78
 801829e:	ed8d 6a4e 	vstr	s12, [sp, #312]	@ 0x138
 80182a2:	edcd 6a4f 	vstr	s13, [sp, #316]	@ 0x13c
 80182a6:	ed8d 7a50 	vstr	s14, [sp, #320]	@ 0x140
 80182aa:	edcd 7a51 	vstr	s15, [sp, #324]	@ 0x144
 80182ae:	f04f 0300 	mov.w	r3, #0
 80182b2:	d13a      	bne.n	801832a <iNemoEngine_API_Update+0x712>
 80182b4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80182b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182bc:	d135      	bne.n	801832a <iNemoEngine_API_Update+0x712>
 80182be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80182c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c6:	d130      	bne.n	801832a <iNemoEngine_API_Update+0x712>
 80182c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80182cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182d0:	d12b      	bne.n	801832a <iNemoEngine_API_Update+0x712>
 80182d2:	9a06      	ldr	r2, [sp, #24]
 80182d4:	934e      	str	r3, [sp, #312]	@ 0x138
 80182d6:	934f      	str	r3, [sp, #316]	@ 0x13c
 80182d8:	9350      	str	r3, [sp, #320]	@ 0x140
 80182da:	4b61      	ldr	r3, [pc, #388]	@ (8018460 <iNemoEngine_API_Update+0x848>)
 80182dc:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 80182e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80182e4:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
 80182e8:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 80182ec:	9351      	str	r3, [sp, #324]	@ 0x144
 80182ee:	2100      	movs	r1, #0
 80182f0:	4613      	mov	r3, r2
 80182f2:	f882 11ac 	strb.w	r1, [r2, #428]	@ 0x1ac
 80182f6:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80182fa:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80182fe:	f005 f93e 	bl	801d57e <memset>
 8018302:	9a06      	ldr	r2, [sp, #24]
 8018304:	4b57      	ldr	r3, [pc, #348]	@ (8018464 <iNemoEngine_API_Update+0x84c>)
 8018306:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 801830a:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
 801830e:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
 8018312:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 8018316:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
 801831a:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
 801831e:	f8c2 32c4 	str.w	r3, [r2, #708]	@ 0x2c4
 8018322:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
 8018326:	f8c2 3314 	str.w	r3, [r2, #788]	@ 0x314
 801832a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8018468 <iNemoEngine_API_Update+0x850>
 801832e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018336:	f100 87e0 	bmi.w	80192fa <iNemoEngine_API_Update+0x16e2>
 801833a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801833e:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 8018342:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 8018346:	eeb0 7ae6 	vabs.f32	s14, s13
 801834a:	eef0 6a47 	vmov.f32	s13, s14
 801834e:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8018352:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018356:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801835a:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 801835e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 8018362:	edd4 6a00 	vldr	s13, [r4]
 8018366:	ed94 6a01 	vldr	s12, [r4, #4]
 801836a:	edcd 6a2c 	vstr	s13, [sp, #176]	@ 0xb0
 801836e:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 8018372:	4628      	mov	r0, r5
 8018374:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8018378:	eea9 7aa9 	vfma.f32	s14, s19, s19
 801837c:	ee67 6a86 	vmul.f32	s13, s15, s12
 8018380:	ed8d 6a2d 	vstr	s12, [sp, #180]	@ 0xb4
 8018384:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 8018468 <iNemoEngine_API_Update+0x850>
 8018388:	edcd 6a3e 	vstr	s13, [sp, #248]	@ 0xf8
 801838c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8018390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018394:	bf54      	ite	pl
 8018396:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 801839a:	ed9f 9a34 	vldrmi	s18, [pc, #208]	@ 801846c <iNemoEngine_API_Update+0x854>
 801839e:	ed94 5a02 	vldr	s10, [r4, #8]
 80183a2:	edd7 3a00 	vldr	s7, [r7]
 80183a6:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 80183aa:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 80183ae:	ee83 7a09 	vdiv.f32	s14, s6, s18
 80183b2:	ee65 7a27 	vmul.f32	s15, s10, s15
 80183b6:	ee2a 6a07 	vmul.f32	s12, s20, s14
 80183ba:	eeb0 0a63 	vmov.f32	s0, s7
 80183be:	ee66 6a26 	vmul.f32	s13, s12, s13
 80183c2:	ed8d 6a41 	vstr	s12, [sp, #260]	@ 0x104
 80183c6:	ee2a 6a87 	vmul.f32	s12, s21, s14
 80183ca:	ee29 7a87 	vmul.f32	s14, s19, s14
 80183ce:	eee6 6a25 	vfma.f32	s13, s12, s11
 80183d2:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 80183d6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80183da:	ed8d 7a42 	vstr	s14, [sp, #264]	@ 0x108
 80183de:	edcd 5a3d 	vstr	s11, [sp, #244]	@ 0xf4
 80183e2:	ed8d 6a40 	vstr	s12, [sp, #256]	@ 0x100
 80183e6:	edcd 6a1a 	vstr	s13, [sp, #104]	@ 0x68
 80183ea:	f7fd ffa5 	bl	8016338 <dataDerivative5>
 80183ee:	edd8 fa00 	vldr	s31, [r8]
 80183f2:	ed8d 0a18 	vstr	s0, [sp, #96]	@ 0x60
 80183f6:	4630      	mov	r0, r6
 80183f8:	eeb0 0a6f 	vmov.f32	s0, s31
 80183fc:	f7fd ff9c 	bl	8016338 <dataDerivative5>
 8018400:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018402:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8018404:	ed93 fa00 	vldr	s30, [r3]
 8018408:	eeb0 ba40 	vmov.f32	s22, s0
 801840c:	eeb0 0a4f 	vmov.f32	s0, s30
 8018410:	f7fd ff92 	bl	8016338 <dataDerivative5>
 8018414:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8018418:	eef0 da40 	vmov.f32	s27, s0
 801841c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018420:	ee27 8a88 	vmul.f32	s16, s15, s16
 8018424:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8018428:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8018470 <iNemoEngine_API_Update+0x858>
 801842c:	eeb0 7ae8 	vabs.f32	s14, s17
 8018430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018438:	d52c      	bpl.n	8018494 <iNemoEngine_API_Update+0x87c>
 801843a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801843e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018446:	f281 8756 	bge.w	801a2f6 <iNemoEngine_API_Update+0x26de>
 801844a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801844e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018456:	f303 80bc 	bgt.w	801b5d2 <iNemoEngine_API_Update+0x39ba>
 801845a:	e00b      	b.n	8018474 <iNemoEngine_API_Update+0x85c>
 801845c:	3a9d4952 	.word	0x3a9d4952
 8018460:	bf666666 	.word	0xbf666666
 8018464:	40a00000 	.word	0x40a00000
 8018468:	3c23d70a 	.word	0x3c23d70a
 801846c:	3dcccccd 	.word	0x3dcccccd
 8018470:	4b000000 	.word	0x4b000000
 8018474:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018478:	ee17 0a90 	vmov	r0, s15
 801847c:	f7e8 f86c 	bl	8000558 <__aeabi_f2d>
 8018480:	ec41 0b10 	vmov	d0, r0, r1
 8018484:	f007 fb68 	bl	801fb58 <ceil>
 8018488:	ec51 0b10 	vmov	r0, r1, d0
 801848c:	f7e8 fbb4 	bl	8000bf8 <__aeabi_d2f>
 8018490:	ee08 0a90 	vmov	s17, r0
 8018494:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8018470 <iNemoEngine_API_Update+0x858>
 8018498:	edcd 8a43 	vstr	s17, [sp, #268]	@ 0x10c
 801849c:	eeb0 7ac8 	vabs.f32	s14, s16
 80184a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a8:	d51f      	bpl.n	80184ea <iNemoEngine_API_Update+0x8d2>
 80184aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80184ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80184b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184b6:	f281 870c 	bge.w	801a2d2 <iNemoEngine_API_Update+0x26ba>
 80184ba:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80184be:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80184c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184c6:	f303 8080 	bgt.w	801b5ca <iNemoEngine_API_Update+0x39b2>
 80184ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 80184ce:	ee17 0a90 	vmov	r0, s15
 80184d2:	f7e8 f841 	bl	8000558 <__aeabi_f2d>
 80184d6:	ec41 0b10 	vmov	d0, r0, r1
 80184da:	f007 fb3d 	bl	801fb58 <ceil>
 80184de:	ec51 0b10 	vmov	r0, r1, d0
 80184e2:	f7e8 fb89 	bl	8000bf8 <__aeabi_d2f>
 80184e6:	ee08 0a10 	vmov	s16, r0
 80184ea:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 8018470 <iNemoEngine_API_Update+0x858>
 80184ee:	ed8d 8a44 	vstr	s16, [sp, #272]	@ 0x110
 80184f2:	eeb0 7acc 	vabs.f32	s14, s24
 80184f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184fe:	d51f      	bpl.n	8018540 <iNemoEngine_API_Update+0x928>
 8018500:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018504:	eeb4 cae7 	vcmpe.f32	s24, s15
 8018508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801850c:	f281 86cf 	bge.w	801a2ae <iNemoEngine_API_Update+0x2696>
 8018510:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8018514:	eeb4 cac7 	vcmpe.f32	s24, s14
 8018518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801851c:	f303 8065 	bgt.w	801b5ea <iNemoEngine_API_Update+0x39d2>
 8018520:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8018524:	ee17 0a90 	vmov	r0, s15
 8018528:	f7e8 f816 	bl	8000558 <__aeabi_f2d>
 801852c:	ec41 0b10 	vmov	d0, r0, r1
 8018530:	f007 fb12 	bl	801fb58 <ceil>
 8018534:	ec51 0b10 	vmov	r0, r1, d0
 8018538:	f7e8 fb5e 	bl	8000bf8 <__aeabi_d2f>
 801853c:	ee0c 0a10 	vmov	s24, r0
 8018540:	9b06      	ldr	r3, [sp, #24]
 8018542:	ed8d ca45 	vstr	s24, [sp, #276]	@ 0x114
 8018546:	f893 04b1 	ldrb.w	r0, [r3, #1201]	@ 0x4b1
 801854a:	1e43      	subs	r3, r0, #1
 801854c:	b25b      	sxtb	r3, r3
 801854e:	2b00      	cmp	r3, #0
 8018550:	dd18      	ble.n	8018584 <iNemoEngine_API_Update+0x96c>
 8018552:	9c06      	ldr	r4, [sp, #24]
 8018554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018558:	1e81      	subs	r1, r0, #2
 801855a:	009b      	lsls	r3, r3, #2
 801855c:	b2c9      	uxtb	r1, r1
 801855e:	f504 6294 	add.w	r2, r4, #1184	@ 0x4a0
 8018562:	441a      	add	r2, r3
 8018564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018568:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 801856c:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 8018570:	4423      	add	r3, r4
 8018572:	681a      	ldr	r2, [r3, #0]
 8018574:	60da      	str	r2, [r3, #12]
 8018576:	685a      	ldr	r2, [r3, #4]
 8018578:	611a      	str	r2, [r3, #16]
 801857a:	689a      	ldr	r2, [r3, #8]
 801857c:	615a      	str	r2, [r3, #20]
 801857e:	3b0c      	subs	r3, #12
 8018580:	428b      	cmp	r3, r1
 8018582:	d1f6      	bne.n	8018572 <iNemoEngine_API_Update+0x95a>
 8018584:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018588:	edc5 8a00 	vstr	s17, [r5]
 801858c:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 8018590:	9a06      	ldr	r2, [sp, #24]
 8018592:	f202 43bc 	addw	r3, r2, #1212	@ 0x4bc
 8018596:	ed83 8a00 	vstr	s16, [r3]
 801859a:	f502 6398 	add.w	r3, r2, #1216	@ 0x4c0
 801859e:	ed83 ca00 	vstr	s24, [r3]
 80185a2:	f892 34b0 	ldrb.w	r3, [r2, #1200]	@ 0x4b0
 80185a6:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8018470 <iNemoEngine_API_Update+0x858>
 80185aa:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 80185ae:	3301      	adds	r3, #1
 80185b0:	b2db      	uxtb	r3, r3
 80185b2:	eeb0 7ac8 	vabs.f32	s14, s16
 80185b6:	4298      	cmp	r0, r3
 80185b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80185bc:	bf28      	it	cs
 80185be:	4618      	movcs	r0, r3
 80185c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c4:	ee2a ca28 	vmul.f32	s24, s20, s17
 80185c8:	f882 04b0 	strb.w	r0, [r2, #1200]	@ 0x4b0
 80185cc:	ee69 8aa8 	vmul.f32	s17, s19, s17
 80185d0:	d51f      	bpl.n	8018612 <iNemoEngine_API_Update+0x9fa>
 80185d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80185d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80185da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185de:	f281 87cb 	bge.w	801a578 <iNemoEngine_API_Update+0x2960>
 80185e2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80185e6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80185ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ee:	f303 8000 	bgt.w	801b5f2 <iNemoEngine_API_Update+0x39da>
 80185f2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80185f6:	ee17 0a90 	vmov	r0, s15
 80185fa:	f7e7 ffad 	bl	8000558 <__aeabi_f2d>
 80185fe:	ec41 0b10 	vmov	d0, r0, r1
 8018602:	f007 faa9 	bl	801fb58 <ceil>
 8018606:	ec51 0b10 	vmov	r0, r1, d0
 801860a:	f7e8 faf5 	bl	8000bf8 <__aeabi_d2f>
 801860e:	ee08 0a10 	vmov	s16, r0
 8018612:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 8018470 <iNemoEngine_API_Update+0x858>
 8018616:	ed8d 8a43 	vstr	s16, [sp, #268]	@ 0x10c
 801861a:	eeb0 7acc 	vabs.f32	s14, s24
 801861e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018626:	d51f      	bpl.n	8018668 <iNemoEngine_API_Update+0xa50>
 8018628:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801862c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8018630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018634:	f281 878e 	bge.w	801a554 <iNemoEngine_API_Update+0x293c>
 8018638:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801863c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8018640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018644:	f302 87cd 	bgt.w	801b5e2 <iNemoEngine_API_Update+0x39ca>
 8018648:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801864c:	ee17 0a90 	vmov	r0, s15
 8018650:	f7e7 ff82 	bl	8000558 <__aeabi_f2d>
 8018654:	ec41 0b10 	vmov	d0, r0, r1
 8018658:	f007 fa7e 	bl	801fb58 <ceil>
 801865c:	ec51 0b10 	vmov	r0, r1, d0
 8018660:	f7e8 faca 	bl	8000bf8 <__aeabi_d2f>
 8018664:	ee0c 0a10 	vmov	s24, r0
 8018668:	ed5f 7a7f 	vldr	s15, [pc, #-508]	@ 8018470 <iNemoEngine_API_Update+0x858>
 801866c:	ed8d ca44 	vstr	s24, [sp, #272]	@ 0x110
 8018670:	eeb0 7ae8 	vabs.f32	s14, s17
 8018674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801867c:	d51f      	bpl.n	80186be <iNemoEngine_API_Update+0xaa6>
 801867e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018682:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801868a:	f281 8751 	bge.w	801a530 <iNemoEngine_API_Update+0x2918>
 801868e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8018692:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869a:	f302 878e 	bgt.w	801b5ba <iNemoEngine_API_Update+0x39a2>
 801869e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80186a2:	ee17 0a90 	vmov	r0, s15
 80186a6:	f7e7 ff57 	bl	8000558 <__aeabi_f2d>
 80186aa:	ec41 0b10 	vmov	d0, r0, r1
 80186ae:	f007 fa53 	bl	801fb58 <ceil>
 80186b2:	ec51 0b10 	vmov	r0, r1, d0
 80186b6:	f7e8 fa9f 	bl	8000bf8 <__aeabi_d2f>
 80186ba:	ee08 0a90 	vmov	s17, r0
 80186be:	9b06      	ldr	r3, [sp, #24]
 80186c0:	edcd 8a45 	vstr	s17, [sp, #276]	@ 0x114
 80186c4:	f893 0621 	ldrb.w	r0, [r3, #1569]	@ 0x621
 80186c8:	1e43      	subs	r3, r0, #1
 80186ca:	b25b      	sxtb	r3, r3
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	dd18      	ble.n	8018702 <iNemoEngine_API_Update+0xaea>
 80186d0:	9c06      	ldr	r4, [sp, #24]
 80186d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186d6:	1e81      	subs	r1, r0, #2
 80186d8:	009b      	lsls	r3, r3, #2
 80186da:	b2c9      	uxtb	r1, r1
 80186dc:	f504 62c2 	add.w	r2, r4, #1552	@ 0x610
 80186e0:	441a      	add	r2, r3
 80186e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80186e6:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80186ea:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80186ee:	4423      	add	r3, r4
 80186f0:	681a      	ldr	r2, [r3, #0]
 80186f2:	60da      	str	r2, [r3, #12]
 80186f4:	685a      	ldr	r2, [r3, #4]
 80186f6:	611a      	str	r2, [r3, #16]
 80186f8:	689a      	ldr	r2, [r3, #8]
 80186fa:	615a      	str	r2, [r3, #20]
 80186fc:	3b0c      	subs	r3, #12
 80186fe:	4299      	cmp	r1, r3
 8018700:	d1f6      	bne.n	80186f0 <iNemoEngine_API_Update+0xad8>
 8018702:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018706:	ed86 8a00 	vstr	s16, [r6]
 801870a:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 801870e:	9a06      	ldr	r2, [sp, #24]
 8018710:	f202 632c 	addw	r3, r2, #1580	@ 0x62c
 8018714:	ed83 ca00 	vstr	s24, [r3]
 8018718:	f502 63c6 	add.w	r3, r2, #1584	@ 0x630
 801871c:	edc3 8a00 	vstr	s17, [r3]
 8018720:	f892 3620 	ldrb.w	r3, [r2, #1568]	@ 0x620
 8018724:	ed5f 7aae 	vldr	s15, [pc, #-696]	@ 8018470 <iNemoEngine_API_Update+0x858>
 8018728:	ee68 8a0e 	vmul.f32	s17, s16, s28
 801872c:	3301      	adds	r3, #1
 801872e:	b2db      	uxtb	r3, r3
 8018730:	eeb0 7ae8 	vabs.f32	s14, s17
 8018734:	4298      	cmp	r0, r3
 8018736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801873a:	bf28      	it	cs
 801873c:	4618      	movcs	r0, r3
 801873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018742:	ee28 ca2e 	vmul.f32	s24, s16, s29
 8018746:	f882 0620 	strb.w	r0, [r2, #1568]	@ 0x620
 801874a:	ee28 8a2b 	vmul.f32	s16, s16, s23
 801874e:	d51f      	bpl.n	8018790 <iNemoEngine_API_Update+0xb78>
 8018750:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018754:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801875c:	f281 86d6 	bge.w	801a50c <iNemoEngine_API_Update+0x28f4>
 8018760:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8018764:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801876c:	f302 8745 	bgt.w	801b5fa <iNemoEngine_API_Update+0x39e2>
 8018770:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018774:	ee17 0a90 	vmov	r0, s15
 8018778:	f7e7 feee 	bl	8000558 <__aeabi_f2d>
 801877c:	ec41 0b10 	vmov	d0, r0, r1
 8018780:	f007 f9ea 	bl	801fb58 <ceil>
 8018784:	ec51 0b10 	vmov	r0, r1, d0
 8018788:	f7e8 fa36 	bl	8000bf8 <__aeabi_d2f>
 801878c:	ee08 0a90 	vmov	s17, r0
 8018790:	ed5f 7ac9 	vldr	s15, [pc, #-804]	@ 8018470 <iNemoEngine_API_Update+0x858>
 8018794:	edcd 8a43 	vstr	s17, [sp, #268]	@ 0x10c
 8018798:	eeb0 7acc 	vabs.f32	s14, s24
 801879c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80187a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a4:	d51f      	bpl.n	80187e6 <iNemoEngine_API_Update+0xbce>
 80187a6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80187aa:	eeb4 cae7 	vcmpe.f32	s24, s15
 80187ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b2:	f281 871d 	bge.w	801a5f0 <iNemoEngine_API_Update+0x29d8>
 80187b6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80187ba:	eeb4 cac7 	vcmpe.f32	s24, s14
 80187be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c2:	f302 86fe 	bgt.w	801b5c2 <iNemoEngine_API_Update+0x39aa>
 80187c6:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80187ca:	ee17 0a90 	vmov	r0, s15
 80187ce:	f7e7 fec3 	bl	8000558 <__aeabi_f2d>
 80187d2:	ec41 0b10 	vmov	d0, r0, r1
 80187d6:	f007 f9bf 	bl	801fb58 <ceil>
 80187da:	ec51 0b10 	vmov	r0, r1, d0
 80187de:	f7e8 fa0b 	bl	8000bf8 <__aeabi_d2f>
 80187e2:	ee0c 0a10 	vmov	s24, r0
 80187e6:	ed5f 7ade 	vldr	s15, [pc, #-888]	@ 8018470 <iNemoEngine_API_Update+0x858>
 80187ea:	ed8d ca44 	vstr	s24, [sp, #272]	@ 0x110
 80187ee:	eeb0 7ac8 	vabs.f32	s14, s16
 80187f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80187f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fa:	d51f      	bpl.n	801883c <iNemoEngine_API_Update+0xc24>
 80187fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018800:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018808:	f281 86c8 	bge.w	801a59c <iNemoEngine_API_Update+0x2984>
 801880c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8018810:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018818:	f302 86df 	bgt.w	801b5da <iNemoEngine_API_Update+0x39c2>
 801881c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018820:	ee17 0a90 	vmov	r0, s15
 8018824:	f7e7 fe98 	bl	8000558 <__aeabi_f2d>
 8018828:	ec41 0b10 	vmov	d0, r0, r1
 801882c:	f007 f994 	bl	801fb58 <ceil>
 8018830:	ec51 0b10 	vmov	r0, r1, d0
 8018834:	f7e8 f9e0 	bl	8000bf8 <__aeabi_d2f>
 8018838:	ee08 0a10 	vmov	s16, r0
 801883c:	9b06      	ldr	r3, [sp, #24]
 801883e:	ed8d 8a45 	vstr	s16, [sp, #276]	@ 0x114
 8018842:	f893 0791 	ldrb.w	r0, [r3, #1937]	@ 0x791
 8018846:	1e43      	subs	r3, r0, #1
 8018848:	b25b      	sxtb	r3, r3
 801884a:	2b00      	cmp	r3, #0
 801884c:	dd18      	ble.n	8018880 <iNemoEngine_API_Update+0xc68>
 801884e:	9c06      	ldr	r4, [sp, #24]
 8018850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018854:	1e81      	subs	r1, r0, #2
 8018856:	009b      	lsls	r3, r3, #2
 8018858:	b2c9      	uxtb	r1, r1
 801885a:	f504 62f0 	add.w	r2, r4, #1920	@ 0x780
 801885e:	441a      	add	r2, r3
 8018860:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018864:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 8018868:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801886c:	4423      	add	r3, r4
 801886e:	681a      	ldr	r2, [r3, #0]
 8018870:	60da      	str	r2, [r3, #12]
 8018872:	685a      	ldr	r2, [r3, #4]
 8018874:	611a      	str	r2, [r3, #16]
 8018876:	689a      	ldr	r2, [r3, #8]
 8018878:	615a      	str	r2, [r3, #20]
 801887a:	3b0c      	subs	r3, #12
 801887c:	428b      	cmp	r3, r1
 801887e:	d1f6      	bne.n	801886e <iNemoEngine_API_Update+0xc56>
 8018880:	9c06      	ldr	r4, [sp, #24]
 8018882:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018884:	f204 729c 	addw	r2, r4, #1948	@ 0x79c
 8018888:	edc3 8a00 	vstr	s17, [r3]
 801888c:	922e      	str	r2, [sp, #184]	@ 0xb8
 801888e:	ed82 ca00 	vstr	s24, [r2]
 8018892:	f504 62f4 	add.w	r2, r4, #1952	@ 0x7a0
 8018896:	ed82 8a00 	vstr	s16, [r2]
 801889a:	f894 3790 	ldrb.w	r3, [r4, #1936]	@ 0x790
 801889e:	922f      	str	r2, [sp, #188]	@ 0xbc
 80188a0:	3301      	adds	r3, #1
 80188a2:	b2db      	uxtb	r3, r3
 80188a4:	4298      	cmp	r0, r3
 80188a6:	bf28      	it	cs
 80188a8:	4618      	movcs	r0, r3
 80188aa:	f884 0790 	strb.w	r0, [r4, #1936]	@ 0x790
 80188ae:	aa68      	add	r2, sp, #416	@ 0x1a0
 80188b0:	a93d      	add	r1, sp, #244	@ 0xf4
 80188b2:	a840      	add	r0, sp, #256	@ 0x100
 80188b4:	f7fd fe26 	bl	8016504 <getRotationMatrix>
 80188b8:	4623      	mov	r3, r4
 80188ba:	f504 7247 	add.w	r2, r4, #796	@ 0x31c
 80188be:	9229      	str	r2, [sp, #164]	@ 0xa4
 80188c0:	4614      	mov	r4, r2
 80188c2:	aeae      	add	r6, sp, #696	@ 0x2b8
 80188c4:	f503 774f 	add.w	r7, r3, #828	@ 0x33c
 80188c8:	6820      	ldr	r0, [r4, #0]
 80188ca:	6861      	ldr	r1, [r4, #4]
 80188cc:	68a2      	ldr	r2, [r4, #8]
 80188ce:	68e3      	ldr	r3, [r4, #12]
 80188d0:	4635      	mov	r5, r6
 80188d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188d4:	3410      	adds	r4, #16
 80188d6:	42bc      	cmp	r4, r7
 80188d8:	462e      	mov	r6, r5
 80188da:	d1f5      	bne.n	80188c8 <iNemoEngine_API_Update+0xcb0>
 80188dc:	6820      	ldr	r0, [r4, #0]
 80188de:	6028      	str	r0, [r5, #0]
 80188e0:	9b06      	ldr	r3, [sp, #24]
 80188e2:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80188e6:	ed93 7ac8 	vldr	s14, [r3, #800]	@ 0x320
 80188ea:	eef0 7ae7 	vabs.f32	s15, s15
 80188ee:	eeb0 7ac7 	vabs.f32	s14, s14
 80188f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80188f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fa:	f140 8543 	bpl.w	8019384 <iNemoEngine_API_Update+0x176c>
 80188fe:	2604      	movs	r6, #4
 8018900:	2400      	movs	r4, #0
 8018902:	eef0 7a47 	vmov.f32	s15, s14
 8018906:	f04f 0c07 	mov.w	ip, #7
 801890a:	f04f 0e06 	mov.w	lr, #6
 801890e:	2103      	movs	r1, #3
 8018910:	4630      	mov	r0, r6
 8018912:	4623      	mov	r3, r4
 8018914:	2701      	movs	r7, #1
 8018916:	9a06      	ldr	r2, [sp, #24]
 8018918:	ed92 7ac9 	vldr	s14, [r2, #804]	@ 0x324
 801891c:	eeb0 7ac7 	vabs.f32	s14, s14
 8018920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018928:	f340 8525 	ble.w	8019376 <iNemoEngine_API_Update+0x175e>
 801892c:	f04f 0c08 	mov.w	ip, #8
 8018930:	2104      	movs	r1, #4
 8018932:	f04f 0906 	mov.w	r9, #6
 8018936:	f04f 0e07 	mov.w	lr, #7
 801893a:	f04f 0803 	mov.w	r8, #3
 801893e:	2605      	movs	r6, #5
 8018940:	4660      	mov	r0, ip
 8018942:	460c      	mov	r4, r1
 8018944:	2200      	movs	r2, #0
 8018946:	2301      	movs	r3, #1
 8018948:	2702      	movs	r7, #2
 801894a:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 801894c:	442c      	add	r4, r5
 801894e:	4428      	add	r0, r5
 8018950:	ed90 7a00 	vldr	s14, [r0]
 8018954:	edd4 6a00 	vldr	s13, [r4]
 8018958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801895c:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801895e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018962:	acae      	add	r4, sp, #696	@ 0x2b8
 8018964:	adae      	add	r5, sp, #696	@ 0x2b8
 8018966:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801896a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801896e:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8018972:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8018976:	edc0 7a00 	vstr	s15, [r0]
 801897a:	edd5 7a00 	vldr	s15, [r5]
 801897e:	ed94 7a00 	vldr	s14, [r4]
 8018982:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018986:	edc4 6a00 	vstr	s13, [r4]
 801898a:	ed90 6a00 	vldr	s12, [r0]
 801898e:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8018990:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8018994:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8018998:	ed90 7a00 	vldr	s14, [r0]
 801899c:	edd5 7a00 	vldr	s15, [r5]
 80189a0:	eee6 7a47 	vfms.f32	s15, s12, s14
 80189a4:	00b4      	lsls	r4, r6, #2
 80189a6:	9403      	str	r4, [sp, #12]
 80189a8:	ea4f 048c 	mov.w	r4, ip, lsl #2
 80189ac:	edc5 7a00 	vstr	s15, [r5]
 80189b0:	ed90 7a00 	vldr	s14, [r0]
 80189b4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 80189b6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80189ba:	edd0 7a00 	vldr	s15, [r0]
 80189be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80189c2:	4626      	mov	r6, r4
 80189c4:	acae      	add	r4, sp, #696	@ 0x2b8
 80189c6:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 80189ca:	edc0 7a00 	vstr	s15, [r0]
 80189ce:	a8ae      	add	r0, sp, #696	@ 0x2b8
 80189d0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80189d4:	edd0 5a00 	vldr	s11, [r0]
 80189d8:	ed94 7a00 	vldr	s14, [r4]
 80189dc:	eea6 7a65 	vfms.f32	s14, s12, s11
 80189e0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80189e4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80189e8:	eef0 7ae7 	vabs.f32	s15, s15
 80189ec:	ed84 7a00 	vstr	s14, [r4]
 80189f0:	ed90 6a00 	vldr	s12, [r0]
 80189f4:	a8ae      	add	r0, sp, #696	@ 0x2b8
 80189f6:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80189fa:	ed90 7a00 	vldr	s14, [r0]
 80189fe:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8018a02:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8018a06:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8018a0a:	ed80 7a00 	vstr	s14, [r0]
 8018a0e:	ed95 7a00 	vldr	s14, [r5]
 8018a12:	eeb0 7ac7 	vabs.f32	s14, s14
 8018a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a1e:	ea4f 0581 	mov.w	r5, r1, lsl #2
 8018a22:	dd0b      	ble.n	8018a3c <iNemoEngine_API_Update+0xe24>
 8018a24:	4618      	mov	r0, r3
 8018a26:	4645      	mov	r5, r8
 8018a28:	4613      	mov	r3, r2
 8018a2a:	464c      	mov	r4, r9
 8018a2c:	46d4      	mov	ip, sl
 8018a2e:	4602      	mov	r2, r0
 8018a30:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8018a34:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8018a38:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8018a3c:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8018a3e:	eb01 0008 	add.w	r0, r1, r8
 8018a42:	440d      	add	r5, r1
 8018a44:	ed90 7a00 	vldr	s14, [r0]
 8018a48:	edd5 7a00 	vldr	s15, [r5]
 8018a4c:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8018a50:	440c      	add	r4, r1
 8018a52:	eb01 0809 	add.w	r8, r1, r9
 8018a56:	440e      	add	r6, r1
 8018a58:	46b6      	mov	lr, r6
 8018a5a:	460e      	mov	r6, r1
 8018a5c:	9903      	ldr	r1, [sp, #12]
 8018a5e:	4431      	add	r1, r6
 8018a60:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8018a64:	ed80 4a00 	vstr	s8, [r0]
 8018a68:	ed94 7a00 	vldr	s14, [r4]
 8018a6c:	edd8 7a00 	vldr	s15, [r8]
 8018a70:	eee4 7a47 	vfms.f32	s15, s8, s14
 8018a74:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8018a76:	edc8 7a00 	vstr	s15, [r8]
 8018a7a:	edd1 2a00 	vldr	s5, [r1]
 8018a7e:	ed95 7a00 	vldr	s14, [r5]
 8018a82:	ed94 1a00 	vldr	s2, [r4]
 8018a86:	edde 1a00 	vldr	s3, [lr]
 8018a8a:	f50b 61b2 	add.w	r1, fp, #1424	@ 0x590
 8018a8e:	4469      	add	r1, sp
 8018a90:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 8018a94:	ee83 2a87 	vdiv.f32	s4, s7, s14
 8018a98:	ed91 7a00 	vldr	s14, [r1]
 8018a9c:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8018a9e:	448b      	add	fp, r1
 8018aa0:	f50c 61b2 	add.w	r1, ip, #1424	@ 0x590
 8018aa4:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8018aa8:	4469      	add	r1, sp
 8018aaa:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 8018aae:	4484      	add	ip, r0
 8018ab0:	4450      	add	r0, sl
 8018ab2:	edd1 6a00 	vldr	s13, [r1]
 8018ab6:	eddb 7a00 	vldr	s15, [fp]
 8018aba:	ed90 0a00 	vldr	s0, [r0]
 8018abe:	f50a 61b2 	add.w	r1, sl, #1424	@ 0x590
 8018ac2:	4469      	add	r1, sp
 8018ac4:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 8018ac8:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 8018acc:	edd1 4a00 	vldr	s9, [r1]
 8018ad0:	eddc 7a00 	vldr	s15, [ip]
 8018ad4:	eee0 4a47 	vfms.f32	s9, s0, s14
 8018ad8:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 8018adc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8018ae0:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8018ae4:	4601      	mov	r1, r0
 8018ae6:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 8018aea:	f5a0 7079 	sub.w	r0, r0, #996	@ 0x3e4
 8018aee:	eee4 4a66 	vfms.f32	s9, s8, s13
 8018af2:	ed90 5a00 	vldr	s10, [r0]
 8018af6:	ee60 4aa4 	vmul.f32	s9, s1, s9
 8018afa:	f50d 60b2 	add.w	r0, sp, #1424	@ 0x590
 8018afe:	eee1 6a64 	vfms.f32	s13, s2, s9
 8018b02:	eea1 7ae4 	vfms.f32	s14, s3, s9
 8018b06:	ee62 8a26 	vmul.f32	s17, s4, s13
 8018b0a:	edd1 6a00 	vldr	s13, [r1]
 8018b0e:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 8018b12:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018b16:	460b      	mov	r3, r1
 8018b18:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8018b1c:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 8018b20:	edd1 5a00 	vldr	s11, [r1]
 8018b24:	ed93 8a00 	vldr	s16, [r3]
 8018b28:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8018b2c:	f5a1 7279 	sub.w	r2, r1, #996	@ 0x3e4
 8018b30:	f5a1 7376 	sub.w	r3, r1, #984	@ 0x3d8
 8018b34:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8018b38:	eea6 8ae7 	vfms.f32	s16, s13, s15
 8018b3c:	ed92 6a00 	vldr	s12, [r2]
 8018b40:	edd3 7a00 	vldr	s15, [r3]
 8018b44:	eea0 6a45 	vfms.f32	s12, s0, s10
 8018b48:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018b4c:	eea4 6a65 	vfms.f32	s12, s8, s11
 8018b50:	eee4 7a48 	vfms.f32	s15, s8, s16
 8018b54:	ee20 6a86 	vmul.f32	s12, s1, s12
 8018b58:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018b5c:	eee1 5a46 	vfms.f32	s11, s2, s12
 8018b60:	eea7 8ac1 	vfms.f32	s16, s15, s2
 8018b64:	eea1 5ac6 	vfms.f32	s10, s3, s12
 8018b68:	eee7 6ae1 	vfms.f32	s13, s15, s3
 8018b6c:	ee62 5a25 	vmul.f32	s11, s4, s11
 8018b70:	ee28 2a02 	vmul.f32	s4, s16, s4
 8018b74:	eea2 7ae8 	vfms.f32	s14, s5, s17
 8018b78:	eee2 6a62 	vfms.f32	s13, s4, s5
 8018b7c:	eea2 5ae5 	vfms.f32	s10, s5, s11
 8018b80:	ee23 7a07 	vmul.f32	s14, s6, s14
 8018b84:	ee23 5a05 	vmul.f32	s10, s6, s10
 8018b88:	ee26 3a83 	vmul.f32	s6, s13, s6
 8018b8c:	ee77 6aa5 	vadd.f32	s13, s15, s11
 8018b90:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 8018b94:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018b98:	ee36 6a42 	vsub.f32	s12, s12, s4
 8018b9c:	eef4 6ac4 	vcmpe.f32	s13, s8
 8018ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba4:	bfc8      	it	gt
 8018ba6:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 8018baa:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8018bae:	bfcc      	ite	gt
 8018bb0:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8018bb4:	ed9f 4ad7 	vldrle	s8, [pc, #860]	@ 8018f14 <iNemoEngine_API_Update+0x12fc>
 8018bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bbc:	f100 8411 	bmi.w	80193e2 <iNemoEngine_API_Update+0x17ca>
 8018bc0:	bfd8      	it	le
 8018bc2:	ee24 4a06 	vmulle.f32	s8, s8, s12
 8018bc6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018bca:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018bce:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8018bd2:	ee24 6a06 	vmul.f32	s12, s8, s12
 8018bd6:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 8018bda:	eef4 6ac4 	vcmpe.f32	s13, s8
 8018bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018be2:	bf88      	it	hi
 8018be4:	eeb7 4a00 	vmovhi.f32	s8, #112	@ 0x3f800000  1.0
 8018be8:	ee33 3a64 	vsub.f32	s6, s6, s9
 8018bec:	bf88      	it	hi
 8018bee:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 8018bf2:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8018bf6:	bf8c      	ite	hi
 8018bf8:	eef1 6ac4 	vsqrthi.f32	s13, s8
 8018bfc:	eddf 6ac5 	vldrls	s13, [pc, #788]	@ 8018f14 <iNemoEngine_API_Update+0x12fc>
 8018c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c04:	f100 83ea 	bmi.w	80193dc <iNemoEngine_API_Update+0x17c4>
 8018c08:	bfd8      	it	le
 8018c0a:	ee66 6a83 	vmulle.f32	s13, s13, s6
 8018c0e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018c12:	ee38 5ac5 	vsub.f32	s10, s17, s10
 8018c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018c1e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018c22:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8018c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c2e:	bf84      	itt	hi
 8018c30:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 8018c34:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 8018c38:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8018c3c:	bf8c      	ite	hi
 8018c3e:	eef1 7ac7 	vsqrthi.f32	s15, s14
 8018c42:	eddf 7ab4 	vldrls	s15, [pc, #720]	@ 8018f14 <iNemoEngine_API_Update+0x12fc>
 8018c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c4a:	f100 83ce 	bmi.w	80193ea <iNemoEngine_API_Update+0x17d2>
 8018c4e:	bfd8      	it	le
 8018c50:	ee67 7a85 	vmulle.f32	s15, s15, s10
 8018c54:	9b06      	ldr	r3, [sp, #24]
 8018c56:	f893 2341 	ldrb.w	r2, [r3, #833]	@ 0x341
 8018c5a:	1e53      	subs	r3, r2, #1
 8018c5c:	b25b      	sxtb	r3, r3
 8018c5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c68:	dd1d      	ble.n	8018ca6 <iNemoEngine_API_Update+0x108e>
 8018c6a:	9806      	ldr	r0, [sp, #24]
 8018c6c:	3a02      	subs	r2, #2
 8018c6e:	b2d1      	uxtb	r1, r2
 8018c70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c74:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8018c78:	f1a0 010c 	sub.w	r1, r0, #12
 8018c7c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018c80:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8018c84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018c88:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8018c8c:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
 8018c90:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8018c94:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 8018c98:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8018c9c:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 8018ca0:	3b0c      	subs	r3, #12
 8018ca2:	428b      	cmp	r3, r1
 8018ca4:	d1f0      	bne.n	8018c88 <iNemoEngine_API_Update+0x1070>
 8018ca6:	ed9d 7a07 	vldr	s14, [sp, #28]
 8018caa:	9b06      	ldr	r3, [sp, #24]
 8018cac:	9310      	str	r3, [sp, #64]	@ 0x40
 8018cae:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8018cb2:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8018cb6:	aa3d      	add	r2, sp, #244	@ 0xf4
 8018cb8:	922b      	str	r2, [sp, #172]	@ 0xac
 8018cba:	9212      	str	r2, [sp, #72]	@ 0x48
 8018cbc:	f50d 7be2 	add.w	fp, sp, #452	@ 0x1c4
 8018cc0:	f50d 7af4 	add.w	sl, sp, #488	@ 0x1e8
 8018cc4:	ee36 6a06 	vadd.f32	s12, s12, s12
 8018cc8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8018ccc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018cd0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018cd4:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018cdc:	ed83 6ad2 	vstr	s12, [r3, #840]	@ 0x348
 8018ce0:	edc3 6ad3 	vstr	s13, [r3, #844]	@ 0x34c
 8018ce4:	edc3 7ad4 	vstr	s15, [r3, #848]	@ 0x350
 8018ce8:	2300      	movs	r3, #0
 8018cea:	930e      	str	r3, [sp, #56]	@ 0x38
 8018cec:	f20d 13c3 	addw	r3, sp, #451	@ 0x1c3
 8018cf0:	f1c3 0301 	rsb	r3, r3, #1
 8018cf4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8018cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cf8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018cfa:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8018d00:	a9ae      	add	r1, sp, #696	@ 0x2b8
 8018d02:	f20d 13c3 	addw	r3, sp, #451	@ 0x1c3
 8018d06:	18e0      	adds	r0, r4, r3
 8018d08:	f803 0f01 	strb.w	r0, [r3, #1]!
 8018d0c:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 8018d10:	f841 0b04 	str.w	r0, [r1], #4
 8018d14:	f20d 10e1 	addw	r0, sp, #481	@ 0x1e1
 8018d18:	4283      	cmp	r3, r0
 8018d1a:	f102 020c 	add.w	r2, r2, #12
 8018d1e:	d1f2      	bne.n	8018d06 <iNemoEngine_API_Update+0x10ee>
 8018d20:	ed9d 7aae 	vldr	s14, [sp, #696]	@ 0x2b8
 8018d24:	eddd 7aaf 	vldr	s15, [sp, #700]	@ 0x2bc
 8018d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d2c:	ed9d 7ab0 	vldr	s14, [sp, #704]	@ 0x2c0
 8018d30:	eddd 7ab1 	vldr	s15, [sp, #708]	@ 0x2c4
 8018d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d38:	bf88      	it	hi
 8018d3a:	f44f 7381 	movhi.w	r3, #258	@ 0x102
 8018d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d42:	ed9d 7ab2 	vldr	s14, [sp, #712]	@ 0x2c8
 8018d46:	eddd 7ab3 	vldr	s15, [sp, #716]	@ 0x2cc
 8018d4a:	bf88      	it	hi
 8018d4c:	f8ab 3000 	strhhi.w	r3, [fp]
 8018d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d54:	bf88      	it	hi
 8018d56:	f44f 7341 	movhi.w	r3, #772	@ 0x304
 8018d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d5e:	ed9d 7ab4 	vldr	s14, [sp, #720]	@ 0x2d0
 8018d62:	eddd 7ab5 	vldr	s15, [sp, #724]	@ 0x2d4
 8018d66:	bf88      	it	hi
 8018d68:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 8018d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d70:	bf88      	it	hi
 8018d72:	f240 5306 	movwhi	r3, #1286	@ 0x506
 8018d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d7a:	ed9d 7ab6 	vldr	s14, [sp, #728]	@ 0x2d8
 8018d7e:	eddd 7ab7 	vldr	s15, [sp, #732]	@ 0x2dc
 8018d82:	bf88      	it	hi
 8018d84:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8018d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8c:	bf88      	it	hi
 8018d8e:	f44f 63e1 	movhi.w	r3, #1800	@ 0x708
 8018d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d96:	ed9d 7ab8 	vldr	s14, [sp, #736]	@ 0x2e0
 8018d9a:	eddd 7ab9 	vldr	s15, [sp, #740]	@ 0x2e4
 8018d9e:	bf88      	it	hi
 8018da0:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8018da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018da8:	bf88      	it	hi
 8018daa:	f640 130a 	movwhi	r3, #2314	@ 0x90a
 8018dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018db2:	ed9d 7aba 	vldr	s14, [sp, #744]	@ 0x2e8
 8018db6:	eddd 7abb 	vldr	s15, [sp, #748]	@ 0x2ec
 8018dba:	bf88      	it	hi
 8018dbc:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8018dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc4:	bf88      	it	hi
 8018dc6:	f640 330c 	movwhi	r3, #2828	@ 0xb0c
 8018dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018dce:	ed9d 7abc 	vldr	s14, [sp, #752]	@ 0x2f0
 8018dd2:	eddd 7abd 	vldr	s15, [sp, #756]	@ 0x2f4
 8018dd6:	bf88      	it	hi
 8018dd8:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 8018ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de0:	bf88      	it	hi
 8018de2:	f640 530e 	movwhi	r3, #3342	@ 0xd0e
 8018de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018dea:	ed9d 7abe 	vldr	s14, [sp, #760]	@ 0x2f8
 8018dee:	eddd 7abf 	vldr	s15, [sp, #764]	@ 0x2fc
 8018df2:	bf88      	it	hi
 8018df4:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8018df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfc:	bf88      	it	hi
 8018dfe:	f44f 6371 	movhi.w	r3, #3856	@ 0xf10
 8018e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e06:	ed9d 7ac0 	vldr	s14, [sp, #768]	@ 0x300
 8018e0a:	eddd 7ac1 	vldr	s15, [sp, #772]	@ 0x304
 8018e0e:	bf88      	it	hi
 8018e10:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8018e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e18:	bf88      	it	hi
 8018e1a:	f241 1312 	movwhi	r3, #4370	@ 0x1112
 8018e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e22:	ed9d 7ac2 	vldr	s14, [sp, #776]	@ 0x308
 8018e26:	eddd 7ac3 	vldr	s15, [sp, #780]	@ 0x30c
 8018e2a:	bf88      	it	hi
 8018e2c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8018e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e34:	bf88      	it	hi
 8018e36:	f241 3314 	movwhi	r3, #4884	@ 0x1314
 8018e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e3e:	bf88      	it	hi
 8018e40:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8018e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e48:	bf84      	itt	hi
 8018e4a:	f241 5316 	movwhi	r3, #5398	@ 0x1516
 8018e4e:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8018e52:	ed9d 7ac4 	vldr	s14, [sp, #784]	@ 0x310
 8018e56:	eddd 7ac5 	vldr	s15, [sp, #788]	@ 0x314
 8018e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e5e:	ed9d 7ac6 	vldr	s14, [sp, #792]	@ 0x318
 8018e62:	eddd 7ac7 	vldr	s15, [sp, #796]	@ 0x31c
 8018e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6a:	bf88      	it	hi
 8018e6c:	f241 7318 	movwhi	r3, #5912	@ 0x1718
 8018e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e74:	ed9d 7ac8 	vldr	s14, [sp, #800]	@ 0x320
 8018e78:	eddd 7ac9 	vldr	s15, [sp, #804]	@ 0x324
 8018e7c:	bf88      	it	hi
 8018e7e:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8018e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e86:	bf88      	it	hi
 8018e88:	f641 131a 	movwhi	r3, #6426	@ 0x191a
 8018e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e90:	ed9d 7aca 	vldr	s14, [sp, #808]	@ 0x328
 8018e94:	eddd 7acb 	vldr	s15, [sp, #812]	@ 0x32c
 8018e98:	bf88      	it	hi
 8018e9a:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8018e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea2:	bf88      	it	hi
 8018ea4:	f641 331c 	movwhi	r3, #6940	@ 0x1b1c
 8018ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018eac:	bf88      	it	hi
 8018eae:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8018eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eb6:	bf84      	itt	hi
 8018eb8:	f641 531e 	movwhi	r3, #7454	@ 0x1d1e
 8018ebc:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8018ec0:	221e      	movs	r2, #30
 8018ec2:	2101      	movs	r1, #1
 8018ec4:	4650      	mov	r0, sl
 8018ec6:	f004 fb5a 	bl	801d57e <memset>
 8018eca:	2304      	movs	r3, #4
 8018ecc:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ece:	2302      	movs	r3, #2
 8018ed0:	9307      	str	r3, [sp, #28]
 8018ed2:	9a07      	ldr	r2, [sp, #28]
 8018ed4:	920a      	str	r2, [sp, #40]	@ 0x28
 8018ed6:	4613      	mov	r3, r2
 8018ed8:	0052      	lsls	r2, r2, #1
 8018eda:	9207      	str	r2, [sp, #28]
 8018edc:	f103 0901 	add.w	r9, r3, #1
 8018ee0:	f04f 0801 	mov.w	r8, #1
 8018ee4:	9b07      	ldr	r3, [sp, #28]
 8018ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8018eea:	4443      	add	r3, r8
 8018eec:	2b1f      	cmp	r3, #31
 8018eee:	bfa8      	it	ge
 8018ef0:	231f      	movge	r3, #31
 8018ef2:	4642      	mov	r2, r8
 8018ef4:	1a9f      	subs	r7, r3, r2
 8018ef6:	2f00      	cmp	r7, #0
 8018ef8:	4698      	mov	r8, r3
 8018efa:	f109 35ff 	add.w	r5, r9, #4294967295	@ 0xffffffff
 8018efe:	dd54      	ble.n	8018faa <iNemoEngine_API_Update+0x1392>
 8018f00:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8018f04:	9304      	str	r3, [sp, #16]
 8018f06:	f1a8 0302 	sub.w	r3, r8, #2
 8018f0a:	4616      	mov	r6, r2
 8018f0c:	2400      	movs	r4, #0
 8018f0e:	9305      	str	r3, [sp, #20]
 8018f10:	e00f      	b.n	8018f32 <iNemoEngine_API_Update+0x131a>
 8018f12:	bf00      	nop
 8018f14:	00000000 	.word	0x00000000
 8018f18:	3f333333 	.word	0x3f333333
 8018f1c:	3f4ccccd 	.word	0x3f4ccccd
 8018f20:	45f0      	cmp	r8, lr
 8018f22:	f80a 2004 	strb.w	r2, [sl, r4]
 8018f26:	f000 81f6 	beq.w	8019316 <iNemoEngine_API_Update+0x16fe>
 8018f2a:	4665      	mov	r5, ip
 8018f2c:	3401      	adds	r4, #1
 8018f2e:	42a7      	cmp	r7, r4
 8018f30:	dd34      	ble.n	8018f9c <iNemoEngine_API_Update+0x1384>
 8018f32:	1e71      	subs	r1, r6, #1
 8018f34:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8018f36:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 8018f3a:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 8018f3e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018f42:	ed10 7a01 	vldr	s14, [r0, #-4]
 8018f46:	a8ae      	add	r0, sp, #696	@ 0x2b8
 8018f48:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8018f4c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8018f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f58:	f105 0e02 	add.w	lr, r5, #2
 8018f5c:	f105 0c01 	add.w	ip, r5, #1
 8018f60:	d8de      	bhi.n	8018f20 <iNemoEngine_API_Update+0x1308>
 8018f62:	3601      	adds	r6, #1
 8018f64:	454e      	cmp	r6, r9
 8018f66:	f80a 3004 	strb.w	r3, [sl, r4]
 8018f6a:	d1df      	bne.n	8018f2c <iNemoEngine_API_Update+0x1314>
 8018f6c:	1c6b      	adds	r3, r5, #1
 8018f6e:	9a04      	ldr	r2, [sp, #16]
 8018f70:	9308      	str	r3, [sp, #32]
 8018f72:	1c60      	adds	r0, r4, #1
 8018f74:	4598      	cmp	r8, r3
 8018f76:	eba2 0205 	sub.w	r2, r2, r5
 8018f7a:	4450      	add	r0, sl
 8018f7c:	ddd6      	ble.n	8018f2c <iNemoEngine_API_Update+0x1314>
 8018f7e:	eb0b 0105 	add.w	r1, fp, r5
 8018f82:	f004 fb7c 	bl	801d67e <memcpy>
 8018f86:	9a04      	ldr	r2, [sp, #16]
 8018f88:	9b05      	ldr	r3, [sp, #20]
 8018f8a:	4414      	add	r4, r2
 8018f8c:	1b64      	subs	r4, r4, r5
 8018f8e:	1b5a      	subs	r2, r3, r5
 8018f90:	3401      	adds	r4, #1
 8018f92:	9b08      	ldr	r3, [sp, #32]
 8018f94:	42a7      	cmp	r7, r4
 8018f96:	eb02 0503 	add.w	r5, r2, r3
 8018f9a:	dcca      	bgt.n	8018f32 <iNemoEngine_API_Update+0x131a>
 8018f9c:	9b03      	ldr	r3, [sp, #12]
 8018f9e:	1e58      	subs	r0, r3, #1
 8018fa0:	463a      	mov	r2, r7
 8018fa2:	4458      	add	r0, fp
 8018fa4:	4651      	mov	r1, sl
 8018fa6:	f004 fb6a 	bl	801d67e <memcpy>
 8018faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fac:	eb08 0903 	add.w	r9, r8, r3
 8018fb0:	f1b9 0f1e 	cmp.w	r9, #30
 8018fb4:	dd96      	ble.n	8018ee4 <iNemoEngine_API_Update+0x12cc>
 8018fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	930c      	str	r3, [sp, #48]	@ 0x30
 8018fbc:	d189      	bne.n	8018ed2 <iNemoEngine_API_Update+0x12ba>
 8018fbe:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 8018fc2:	aaae      	add	r2, sp, #696	@ 0x2b8
 8018fc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018fc8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8018fcc:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8018fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018fd4:	ed13 7a01 	vldr	s14, [r3, #-4]
 8018fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018fe4:	bf4c      	ite	mi
 8018fe6:	2201      	movmi	r2, #1
 8018fe8:	2200      	movpl	r2, #0
 8018fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fee:	bf4c      	ite	mi
 8018ff0:	2301      	movmi	r3, #1
 8018ff2:	2300      	movpl	r3, #0
 8018ff4:	429a      	cmp	r2, r3
 8018ff6:	f000 819d 	beq.w	8019334 <iNemoEngine_API_Update+0x171c>
 8018ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ffe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019006:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019008:	ece3 7a01 	vstmia	r3!, {s15}
 801900c:	9312      	str	r3, [sp, #72]	@ 0x48
 801900e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019010:	3304      	adds	r3, #4
 8019012:	9310      	str	r3, [sp, #64]	@ 0x40
 8019014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019016:	2b03      	cmp	r3, #3
 8019018:	f47f ae6d 	bne.w	8018cf6 <iNemoEngine_API_Update+0x10de>
 801901c:	eddd 7a3e 	vldr	s15, [sp, #248]	@ 0xf8
 8019020:	ed9d 7a3d 	vldr	s14, [sp, #244]	@ 0xf4
 8019024:	eddd 6a16 	vldr	s13, [sp, #88]	@ 0x58
 8019028:	ed1f 1a45 	vldr	s2, [pc, #-276]	@ 8018f18 <iNemoEngine_API_Update+0x1300>
 801902c:	9a06      	ldr	r2, [sp, #24]
 801902e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019032:	ee2d 1a81 	vmul.f32	s2, s27, s2
 8019036:	eee7 7a07 	vfma.f32	s15, s14, s14
 801903a:	f892 3900 	ldrb.w	r3, [r2, #2304]	@ 0x900
 801903e:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 8019042:	eeb0 8a67 	vmov.f32	s16, s15
 8019046:	eddd 7a3f 	vldr	s15, [sp, #252]	@ 0xfc
 801904a:	eea7 8aa7 	vfma.f32	s16, s15, s15
 801904e:	f502 6810 	add.w	r8, r2, #2304	@ 0x900
 8019052:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019056:	ee27 7a27 	vmul.f32	s14, s14, s15
 801905a:	eeb1 6ac8 	vsqrt.f32	s12, s16
 801905e:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 8019062:	ee2b 7a27 	vmul.f32	s14, s22, s15
 8019066:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 801906a:	eec7 6a26 	vdiv.f32	s13, s14, s13
 801906e:	ed9d 7a17 	vldr	s14, [sp, #92]	@ 0x5c
 8019072:	edcd 5a52 	vstr	s11, [sp, #328]	@ 0x148
 8019076:	ee87 5a87 	vdiv.f32	s10, s15, s14
 801907a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801907e:	eeb0 7a41 	vmov.f32	s14, s2
 8019082:	eeab 7a27 	vfma.f32	s14, s22, s15
 8019086:	ee26 6a27 	vmul.f32	s12, s12, s15
 801908a:	ed5f 7a5c 	vldr	s15, [pc, #-368]	@ 8018f1c <iNemoEngine_API_Update+0x1304>
 801908e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019096:	edcd 6a53 	vstr	s13, [sp, #332]	@ 0x14c
 801909a:	ed8d 5a54 	vstr	s10, [sp, #336]	@ 0x150
 801909e:	ed8d 6a55 	vstr	s12, [sp, #340]	@ 0x154
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	f040 8159 	bne.w	801935a <iNemoEngine_API_Update+0x1742>
 80190a8:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 80190ac:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
 80190b0:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80190b4:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
 80190b8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80190bc:	f8c8 3024 	str.w	r3, [r8, #36]	@ 0x24
 80190c0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80190c4:	f8c8 3020 	str.w	r3, [r8, #32]
 80190c8:	edc8 7a07 	vstr	s15, [r8, #28]
 80190cc:	f602 130c 	addw	r3, r2, #2316	@ 0x90c
 80190d0:	edd3 8a00 	vldr	s17, [r3]
 80190d4:	edd2 2a02 	vldr	s5, [r2, #8]
 80190d8:	f602 1324 	addw	r3, r2, #2340	@ 0x924
 80190dc:	edd3 7a00 	vldr	s15, [r3]
 80190e0:	f602 1308 	addw	r3, r2, #2312	@ 0x908
 80190e4:	ed93 7a00 	vldr	s14, [r3]
 80190e8:	f502 6312 	add.w	r3, r2, #2336	@ 0x920
 80190ec:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80190f0:	edd3 7a00 	vldr	s15, [r3]
 80190f4:	f502 6311 	add.w	r3, r2, #2320	@ 0x910
 80190f8:	eee7 8a27 	vfma.f32	s17, s14, s15
 80190fc:	ed93 7a00 	vldr	s14, [r3]
 8019100:	f602 1328 	addw	r3, r2, #2344	@ 0x928
 8019104:	edd3 7a00 	vldr	s15, [r3]
 8019108:	f602 1314 	addw	r3, r2, #2324	@ 0x914
 801910c:	eee7 8a27 	vfma.f32	s17, s14, s15
 8019110:	ed93 7a00 	vldr	s14, [r3]
 8019114:	f602 132c 	addw	r3, r2, #2348	@ 0x92c
 8019118:	edd3 7a00 	vldr	s15, [r3]
 801911c:	f602 1304 	addw	r3, r2, #2308	@ 0x904
 8019120:	eee7 8a27 	vfma.f32	s17, s14, s15
 8019124:	ed93 7a00 	vldr	s14, [r3]
 8019128:	f602 131c 	addw	r3, r2, #2332	@ 0x91c
 801912c:	edd3 7a00 	vldr	s15, [r3]
 8019130:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8019134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019138:	eee7 8a27 	vfma.f32	s17, s14, s15
 801913c:	f340 8158 	ble.w	80193f0 <iNemoEngine_API_Update+0x17d8>
 8019140:	edd2 7a30 	vldr	s15, [r2, #192]	@ 0xc0
 8019144:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801914c:	f101 8112 	bmi.w	801a374 <iNemoEngine_API_Update+0x275c>
 8019150:	ed92 fa31 	vldr	s30, [r2, #196]	@ 0xc4
 8019154:	4613      	mov	r3, r2
 8019156:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 801915a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019162:	f142 8186 	bpl.w	801b472 <iNemoEngine_API_Update+0x385a>
 8019166:	edd3 4a62 	vldr	s9, [r3, #392]	@ 0x188
 801916a:	eef4 4ae8 	vcmpe.f32	s9, s17
 801916e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019172:	f342 821e 	ble.w	801b5b2 <iNemoEngine_API_Update+0x399a>
 8019176:	ed93 7a4c 	vldr	s14, [r3, #304]	@ 0x130
 801917a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801917e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019182:	f302 8555 	bgt.w	801bc30 <iNemoEngine_API_Update+0x4018>
 8019186:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 801918a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019192:	f142 8565 	bpl.w	801bc60 <iNemoEngine_API_Update+0x4048>
 8019196:	edd3 3a4d 	vldr	s7, [r3, #308]	@ 0x134
 801919a:	ed93 4a4f 	vldr	s8, [r3, #316]	@ 0x13c
 801919e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191a2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80191a6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80191aa:	ee24 7a07 	vmul.f32	s14, s8, s14
 80191ae:	ee87 ca27 	vdiv.f32	s24, s14, s15
 80191b2:	ee3c ca23 	vadd.f32	s24, s24, s7
 80191b6:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 80191ba:	eef4 8ae7 	vcmpe.f32	s17, s15
 80191be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191c2:	f2c2 8566 	blt.w	801bc92 <iNemoEngine_API_Update+0x407a>
 80191c6:	9b06      	ldr	r3, [sp, #24]
 80191c8:	ed93 7a52 	vldr	s14, [r3, #328]	@ 0x148
 80191cc:	eef4 8ac7 	vcmpe.f32	s17, s14
 80191d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191d4:	f142 87a3 	bpl.w	801c11e <iNemoEngine_API_Update+0x4506>
 80191d8:	edd3 3a51 	vldr	s7, [r3, #324]	@ 0x144
 80191dc:	ed93 4a53 	vldr	s8, [r3, #332]	@ 0x14c
 80191e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80191e4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80191e8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80191ec:	ee64 7a27 	vmul.f32	s15, s8, s15
 80191f0:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80191f4:	ee3c ca23 	vadd.f32	s24, s24, s7
 80191f8:	9b06      	ldr	r3, [sp, #24]
 80191fa:	edd3 7a54 	vldr	s15, [r3, #336]	@ 0x150
 80191fe:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019206:	f2c2 8566 	blt.w	801bcd6 <iNemoEngine_API_Update+0x40be>
 801920a:	9b06      	ldr	r3, [sp, #24]
 801920c:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8019210:	eef4 8ac7 	vcmpe.f32	s17, s14
 8019214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019218:	f142 87dc 	bpl.w	801c1d4 <iNemoEngine_API_Update+0x45bc>
 801921c:	edd3 3a55 	vldr	s7, [r3, #340]	@ 0x154
 8019220:	ed93 4a57 	vldr	s8, [r3, #348]	@ 0x15c
 8019224:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019228:	ee34 4a63 	vsub.f32	s8, s8, s7
 801922c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8019230:	ee64 7a27 	vmul.f32	s15, s8, s15
 8019234:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8019238:	ee3c ca23 	vadd.f32	s24, s24, s7
 801923c:	9b06      	ldr	r3, [sp, #24]
 801923e:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 8019242:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801924a:	f2c2 8566 	blt.w	801bd1a <iNemoEngine_API_Update+0x4102>
 801924e:	9b06      	ldr	r3, [sp, #24]
 8019250:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8019254:	eef4 8ac7 	vcmpe.f32	s17, s14
 8019258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801925c:	f142 87c5 	bpl.w	801c1ea <iNemoEngine_API_Update+0x45d2>
 8019260:	edd3 3a59 	vldr	s7, [r3, #356]	@ 0x164
 8019264:	ed93 4a5b 	vldr	s8, [r3, #364]	@ 0x16c
 8019268:	ee37 7a67 	vsub.f32	s14, s14, s15
 801926c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8019270:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8019274:	ee64 7a27 	vmul.f32	s15, s8, s15
 8019278:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801927c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8019280:	9b06      	ldr	r3, [sp, #24]
 8019282:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 8019286:	eef4 8ae7 	vcmpe.f32	s17, s15
 801928a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801928e:	f2c2 8566 	blt.w	801bd5e <iNemoEngine_API_Update+0x4146>
 8019292:	9b06      	ldr	r3, [sp, #24]
 8019294:	ed93 7a5e 	vldr	s14, [r3, #376]	@ 0x178
 8019298:	eef4 8ac7 	vcmpe.f32	s17, s14
 801929c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192a0:	f142 8795 	bpl.w	801c1ce <iNemoEngine_API_Update+0x45b6>
 80192a4:	edd3 3a5d 	vldr	s7, [r3, #372]	@ 0x174
 80192a8:	ed93 4a5f 	vldr	s8, [r3, #380]	@ 0x17c
 80192ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80192b0:	ee34 4a63 	vsub.f32	s8, s8, s7
 80192b4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80192b8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80192bc:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80192c0:	ee3c ca23 	vadd.f32	s24, s24, s7
 80192c4:	9b06      	ldr	r3, [sp, #24]
 80192c6:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 80192ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 80192ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192d2:	f2c0 8092 	blt.w	80193fa <iNemoEngine_API_Update+0x17e2>
 80192d6:	9b06      	ldr	r3, [sp, #24]
 80192d8:	ed93 4a61 	vldr	s8, [r3, #388]	@ 0x184
 80192dc:	ed93 7a63 	vldr	s14, [r3, #396]	@ 0x18c
 80192e0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80192e4:	ee37 7a44 	vsub.f32	s14, s14, s8
 80192e8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80192ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192f0:	ee87 caa4 	vdiv.f32	s24, s15, s9
 80192f4:	ee3c ca04 	vadd.f32	s24, s24, s8
 80192f8:	e07f      	b.n	80193fa <iNemoEngine_API_Update+0x17e2>
 80192fa:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 8019644 <iNemoEngine_API_Update+0x1a2c>
 80192fe:	eddf cad2 	vldr	s25, [pc, #840]	@ 8019648 <iNemoEngine_API_Update+0x1a30>
 8019302:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 8019306:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 801964c <iNemoEngine_API_Update+0x1a34>
 801930a:	edcd 7a23 	vstr	s15, [sp, #140]	@ 0x8c
 801930e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019312:	f7ff b824 	b.w	801835e <iNemoEngine_API_Update+0x746>
 8019316:	1c60      	adds	r0, r4, #1
 8019318:	454e      	cmp	r6, r9
 801931a:	4459      	add	r1, fp
 801931c:	4450      	add	r0, sl
 801931e:	4665      	mov	r5, ip
 8019320:	f6bf ae04 	bge.w	8018f2c <iNemoEngine_API_Update+0x1314>
 8019324:	eba9 0206 	sub.w	r2, r9, r6
 8019328:	444c      	add	r4, r9
 801932a:	1ba4      	subs	r4, r4, r6
 801932c:	f004 f9a7 	bl	801d67e <memcpy>
 8019330:	464e      	mov	r6, r9
 8019332:	e5fb      	b.n	8018f2c <iNemoEngine_API_Update+0x1314>
 8019334:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801933c:	f43f ae5d 	beq.w	8018ffa <iNemoEngine_API_Update+0x13e2>
 8019340:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019348:	f43f ae57 	beq.w	8018ffa <iNemoEngine_API_Update+0x13e2>
 801934c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019350:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8019354:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019358:	e655      	b.n	8019006 <iNemoEngine_API_Update+0x13ee>
 801935a:	2300      	movs	r3, #0
 801935c:	f882 3900 	strb.w	r3, [r2, #2304]	@ 0x900
 8019360:	edc8 7a07 	vstr	s15, [r8, #28]
 8019364:	edc8 7a08 	vstr	s15, [r8, #32]
 8019368:	edc8 7a09 	vstr	s15, [r8, #36]	@ 0x24
 801936c:	edc8 7a0a 	vstr	s15, [r8, #40]	@ 0x28
 8019370:	edc8 7a0b 	vstr	s15, [r8, #44]	@ 0x2c
 8019374:	e6aa      	b.n	80190cc <iNemoEngine_API_Update+0x14b4>
 8019376:	f04f 0908 	mov.w	r9, #8
 801937a:	f04f 0805 	mov.w	r8, #5
 801937e:	2202      	movs	r2, #2
 8019380:	f7ff bae3 	b.w	801894a <iNemoEngine_API_Update+0xd32>
 8019384:	2104      	movs	r1, #4
 8019386:	2000      	movs	r0, #0
 8019388:	f04f 0c06 	mov.w	ip, #6
 801938c:	f04f 0e07 	mov.w	lr, #7
 8019390:	2603      	movs	r6, #3
 8019392:	460c      	mov	r4, r1
 8019394:	2301      	movs	r3, #1
 8019396:	4607      	mov	r7, r0
 8019398:	f7ff babd 	b.w	8018916 <iNemoEngine_API_Update+0xcfe>
 801939c:	ed9f 5aac 	vldr	s10, [pc, #688]	@ 8019650 <iNemoEngine_API_Update+0x1a38>
 80193a0:	ed9f 8aac 	vldr	s16, [pc, #688]	@ 8019654 <iNemoEngine_API_Update+0x1a3c>
 80193a4:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8019684 <iNemoEngine_API_Update+0x1a6c>
 80193a8:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8019658 <iNemoEngine_API_Update+0x1a40>
 80193ac:	ed84 5a00 	vstr	s10, [r4]
 80193b0:	eef0 7a45 	vmov.f32	s15, s10
 80193b4:	eeb0 6a45 	vmov.f32	s12, s10
 80193b8:	eddf caa8 	vldr	s25, [pc, #672]	@ 801965c <iNemoEngine_API_Update+0x1a44>
 80193bc:	ed9f 9aa8 	vldr	s18, [pc, #672]	@ 8019660 <iNemoEngine_API_Update+0x1a48>
 80193c0:	ed84 8a01 	vstr	s16, [r4, #4]
 80193c4:	eef0 5a66 	vmov.f32	s11, s13
 80193c8:	ed84 8a02 	vstr	s16, [r4, #8]
 80193cc:	eeb0 5a47 	vmov.f32	s10, s14
 80193d0:	eef0 8a67 	vmov.f32	s17, s15
 80193d4:	eeb0 ca48 	vmov.f32	s24, s16
 80193d8:	f7fe bed8 	b.w	801818c <iNemoEngine_API_Update+0x574>
 80193dc:	eef1 6a66 	vneg.f32	s13, s13
 80193e0:	e415      	b.n	8018c0e <iNemoEngine_API_Update+0xff6>
 80193e2:	eeb1 4a44 	vneg.f32	s8, s8
 80193e6:	f7ff bbee 	b.w	8018bc6 <iNemoEngine_API_Update+0xfae>
 80193ea:	eef1 7a67 	vneg.f32	s15, s15
 80193ee:	e431      	b.n	8018c54 <iNemoEngine_API_Update+0x103c>
 80193f0:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 80193f4:	eeb0 fa4c 	vmov.f32	s30, s24
 80193f8:	4613      	mov	r3, r2
 80193fa:	edd3 fa74 	vldr	s31, [r3, #464]	@ 0x1d0
 80193fe:	ed93 7a72 	vldr	s14, [r3, #456]	@ 0x1c8
 8019402:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 8019406:	eddf 4a90 	vldr	s9, [pc, #576]	@ 8019648 <iNemoEngine_API_Update+0x1a30>
 801940a:	ee7c faef 	vsub.f32	s31, s25, s31
 801940e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019412:	eef0 faef 	vabs.f32	s31, s31
 8019416:	eef0 7ae7 	vabs.f32	s15, s15
 801941a:	ee77 7aaf 	vadd.f32	s15, s15, s31
 801941e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8019422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019426:	dd0a      	ble.n	801943e <iNemoEngine_API_Update+0x1826>
 8019428:	ed9f 4a8e 	vldr	s8, [pc, #568]	@ 8019664 <iNemoEngine_API_Update+0x1a4c>
 801942c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019434:	f340 8790 	ble.w	801a358 <iNemoEngine_API_Update+0x2740>
 8019438:	eef1 4a04 	vmov.f32	s9, #20	@ 0x40a00000  5.0
 801943c:	e001      	b.n	8019442 <iNemoEngine_API_Update+0x182a>
 801943e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8019442:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 8019446:	781c      	ldrb	r4, [r3, #0]
 8019448:	eef4 4ae7 	vcmpe.f32	s9, s15
 801944c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019450:	bfa8      	it	ge
 8019452:	eef0 7a64 	vmovge.f32	s15, s9
 8019456:	edcd 7a04 	vstr	s15, [sp, #16]
 801945a:	b1cc      	cbz	r4, 8019490 <iNemoEngine_API_Update+0x1878>
 801945c:	785c      	ldrb	r4, [r3, #1]
 801945e:	2c00      	cmp	r4, #0
 8019460:	f040 8774 	bne.w	801a34c <iNemoEngine_API_Update+0x2734>
 8019464:	ee75 7aa6 	vadd.f32	s15, s11, s13
 8019468:	edd3 6a05 	vldr	s13, [r3, #20]
 801946c:	ee75 7a27 	vadd.f32	s15, s10, s15
 8019470:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019474:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8019478:	ee67 7a86 	vmul.f32	s15, s15, s12
 801947c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019480:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019484:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801948c:	f102 848b 	bmi.w	801bda6 <iNemoEngine_API_Update+0x418e>
 8019490:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8019494:	461a      	mov	r2, r3
 8019496:	eddd 6a1a 	vldr	s13, [sp, #104]	@ 0x68
 801949a:	ed9d 6a50 	vldr	s12, [sp, #320]	@ 0x140
 801949e:	edcd 6a98 	vstr	s13, [sp, #608]	@ 0x260
 80194a2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80194a6:	eef0 6a65 	vmov.f32	s13, s11
 80194aa:	eee7 6a47 	vfms.f32	s13, s14, s14
 80194ae:	2300      	movs	r3, #0
 80194b0:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
 80194b4:	ed9d 5a4e 	vldr	s10, [sp, #312]	@ 0x138
 80194b8:	eddd 4a4f 	vldr	s9, [sp, #316]	@ 0x13c
 80194bc:	eddd 0a51 	vldr	s1, [sp, #324]	@ 0x144
 80194c0:	ed8d 7a45 	vstr	s14, [sp, #276]	@ 0x114
 80194c4:	ee26 4a06 	vmul.f32	s8, s12, s12
 80194c8:	ee25 2a05 	vmul.f32	s4, s10, s10
 80194cc:	ee34 4a04 	vadd.f32	s8, s8, s8
 80194d0:	eeb1 3ae6 	vsqrt.f32	s6, s13
 80194d4:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
 80194d8:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
 80194dc:	9343      	str	r3, [sp, #268]	@ 0x10c
 80194de:	ee64 3a86 	vmul.f32	s7, s9, s12
 80194e2:	ee25 0a24 	vmul.f32	s0, s10, s9
 80194e6:	ee64 1aa4 	vmul.f32	s3, s9, s9
 80194ea:	ee64 6aa0 	vmul.f32	s13, s9, s1
 80194ee:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 80194f2:	eea2 4a24 	vfma.f32	s8, s4, s9
 80194f6:	ee73 3aa3 	vadd.f32	s7, s7, s7
 80194fa:	ee35 1ac4 	vsub.f32	s2, s11, s8
 80194fe:	ee25 4a06 	vmul.f32	s8, s10, s12
 8019502:	ee26 6a20 	vmul.f32	s12, s12, s1
 8019506:	ee71 1aa1 	vadd.f32	s3, s3, s3
 801950a:	ee30 6a06 	vadd.f32	s12, s0, s12
 801950e:	ee25 5a20 	vmul.f32	s10, s10, s1
 8019512:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8019516:	eee2 1a24 	vfma.f32	s3, s4, s9
 801951a:	ee36 2a06 	vadd.f32	s4, s12, s12
 801951e:	eeb0 6a63 	vmov.f32	s12, s7
 8019522:	eea5 6a24 	vfma.f32	s12, s10, s9
 8019526:	eee5 3a64 	vfms.f32	s7, s10, s9
 801952a:	eeb0 5a66 	vmov.f32	s10, s13
 801952e:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 8019532:	ee94 5a24 	vfnms.f32	s10, s8, s9
 8019536:	eee4 6a64 	vfms.f32	s13, s8, s9
 801953a:	ee25 5a07 	vmul.f32	s10, s10, s14
 801953e:	edcd 6a3d 	vstr	s13, [sp, #244]	@ 0xf4
 8019542:	edcd 6a92 	vstr	s13, [sp, #584]	@ 0x248
 8019546:	ee75 6ae1 	vsub.f32	s13, s11, s3
 801954a:	ee79 5ae5 	vsub.f32	s11, s19, s11
 801954e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8019552:	ee75 1aa1 	vadd.f32	s3, s11, s3
 8019556:	eee3 6a23 	vfma.f32	s13, s6, s7
 801955a:	ee26 7a07 	vmul.f32	s14, s12, s14
 801955e:	eddd 5a2a 	vldr	s11, [sp, #168]	@ 0xa8
 8019562:	eddd 4a2c 	vldr	s9, [sp, #176]	@ 0xb0
 8019566:	ed8d 9a99 	vstr	s18, [sp, #612]	@ 0x264
 801956a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801956e:	eea3 7a01 	vfma.f32	s14, s6, s2
 8019572:	edcd 6a91 	vstr	s13, [sp, #580]	@ 0x244
 8019576:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 801957a:	edcd ca9a 	vstr	s25, [sp, #616]	@ 0x268
 801957e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019582:	eea3 5a02 	vfma.f32	s10, s6, s4
 8019586:	ed8d 7a90 	vstr	s14, [sp, #576]	@ 0x240
 801958a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8019698 <iNemoEngine_API_Update+0x1a80>
 801958e:	ed8d 3a44 	vstr	s6, [sp, #272]	@ 0x110
 8019592:	ee3a 6a46 	vsub.f32	s12, s20, s12
 8019596:	ee34 5ac5 	vsub.f32	s10, s9, s10
 801959a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a2:	ed8d 5a8f 	vstr	s10, [sp, #572]	@ 0x23c
 80195a6:	edcd 1a3f 	vstr	s3, [sp, #252]	@ 0xfc
 80195aa:	edcd 1a94 	vstr	s3, [sp, #592]	@ 0x250
 80195ae:	ed8d 6a3e 	vstr	s12, [sp, #248]	@ 0xf8
 80195b2:	ed8d 6a93 	vstr	s12, [sp, #588]	@ 0x24c
 80195b6:	d541      	bpl.n	801963c <iNemoEngine_API_Update+0x1a24>
 80195b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8019668 <iNemoEngine_API_Update+0x1a50>
 80195bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80195c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c4:	dd3a      	ble.n	801963c <iNemoEngine_API_Update+0x1a24>
 80195c6:	ee79 7a67 	vsub.f32	s15, s18, s15
 80195ca:	eef0 7ae7 	vabs.f32	s15, s15
 80195ce:	ee77 7a8b 	vadd.f32	s15, s15, s22
 80195d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80195d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195da:	dd5f      	ble.n	801969c <iNemoEngine_API_Update+0x1a84>
 80195dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80195e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80195e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e8:	f140 86a4 	bpl.w	801a334 <iNemoEngine_API_Update+0x271c>
 80195ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801966c <iNemoEngine_API_Update+0x1a54>
 80195f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80195f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f8:	f141 8185 	bpl.w	801a906 <iNemoEngine_API_Update+0x2cee>
 80195fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801967c <iNemoEngine_API_Update+0x1a64>
 8019600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019608:	f2c1 8185 	blt.w	801a916 <iNemoEngine_API_Update+0x2cfe>
 801960c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8019670 <iNemoEngine_API_Update+0x1a58>
 8019610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019618:	f141 824e 	bpl.w	801aab8 <iNemoEngine_API_Update+0x2ea0>
 801961c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801967c <iNemoEngine_API_Update+0x1a64>
 8019620:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8019674 <iNemoEngine_API_Update+0x1a5c>
 8019624:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8019678 <iNemoEngine_API_Update+0x1a60>
 8019628:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801962c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8019630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019634:	eea6 7a86 	vfma.f32	s14, s13, s12
 8019638:	f001 b977 	b.w	801a92a <iNemoEngine_API_Update+0x2d12>
 801963c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019640:	e7c1      	b.n	80195c6 <iNemoEngine_API_Update+0x19ae>
 8019642:	bf00      	nop
 8019644:	3ecccccc 	.word	0x3ecccccc
 8019648:	3dcccccd 	.word	0x3dcccccd
 801964c:	3f666666 	.word	0x3f666666
 8019650:	00000000 	.word	0x00000000
 8019654:	3f333333 	.word	0x3f333333
 8019658:	bfb33333 	.word	0xbfb33333
 801965c:	3f7d6d54 	.word	0x3f7d6d54
 8019660:	3f7ae147 	.word	0x3f7ae147
 8019664:	3fb77778 	.word	0x3fb77778
 8019668:	3f4ccccd 	.word	0x3f4ccccd
 801966c:	3ba3d70a 	.word	0x3ba3d70a
 8019670:	3c75c28f 	.word	0x3c75c28f
 8019674:	3f19999a 	.word	0x3f19999a
 8019678:	43480000 	.word	0x43480000
 801967c:	3c23d70a 	.word	0x3c23d70a
 8019680:	3b449ba6 	.word	0x3b449ba6
 8019684:	3fb33333 	.word	0x3fb33333
 8019688:	3ecccccd 	.word	0x3ecccccd
 801968c:	3f8f5c29 	.word	0x3f8f5c29
 8019690:	3f59999a 	.word	0x3f59999a
 8019694:	3e4ccccd 	.word	0x3e4ccccd
 8019698:	3f99999a 	.word	0x3f99999a
 801969c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80196a0:	ed1f 4a0a 	vldr	s8, [pc, #-40]	@ 801967c <iNemoEngine_API_Update+0x1a64>
 80196a4:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 8019680 <iNemoEngine_API_Update+0x1a68>
 80196a8:	eeb0 7a65 	vmov.f32	s14, s11
 80196ac:	eef0 6a65 	vmov.f32	s13, s11
 80196b0:	ed8d 6a65 	vstr	s12, [sp, #404]	@ 0x194
 80196b4:	ed9d 6a04 	vldr	s12, [sp, #16]
 80196b8:	ed9d 3a84 	vldr	s6, [sp, #528]	@ 0x210
 80196bc:	ed9d 5a83 	vldr	s10, [sp, #524]	@ 0x20c
 80196c0:	ed9d 2a88 	vldr	s4, [sp, #544]	@ 0x220
 80196c4:	eddd 4a8c 	vldr	s9, [sp, #560]	@ 0x230
 80196c8:	9a06      	ldr	r2, [sp, #24]
 80196ca:	ed8d 4a66 	vstr	s8, [sp, #408]	@ 0x198
 80196ce:	ee66 3a0f 	vmul.f32	s7, s12, s30
 80196d2:	ed9d 6a8d 	vldr	s12, [sp, #564]	@ 0x234
 80196d6:	7b13      	ldrb	r3, [r2, #12]
 80196d8:	ee23 3a23 	vmul.f32	s6, s6, s7
 80196dc:	ee23 5a85 	vmul.f32	s10, s7, s10
 80196e0:	ed8d 3a84 	vstr	s6, [sp, #528]	@ 0x210
 80196e4:	ed9d 3a85 	vldr	s6, [sp, #532]	@ 0x214
 80196e8:	ed8d 5a83 	vstr	s10, [sp, #524]	@ 0x20c
 80196ec:	ee63 3a23 	vmul.f32	s7, s6, s7
 80196f0:	ed9d 3a86 	vldr	s6, [sp, #536]	@ 0x218
 80196f4:	edcd 3a85 	vstr	s7, [sp, #532]	@ 0x214
 80196f8:	eddd 3a87 	vldr	s7, [sp, #540]	@ 0x21c
 80196fc:	ee2c 3a03 	vmul.f32	s6, s24, s6
 8019700:	ee6c 3a23 	vmul.f32	s7, s24, s7
 8019704:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8019708:	ee2c ca02 	vmul.f32	s24, s24, s4
 801970c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8019710:	ed9d 2a8e 	vldr	s4, [sp, #568]	@ 0x238
 8019714:	ed8d 3a86 	vstr	s6, [sp, #536]	@ 0x218
 8019718:	ee64 4a87 	vmul.f32	s9, s9, s14
 801971c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019720:	ee2f fa02 	vmul.f32	s30, s30, s4
 8019724:	edcd 4a8c 	vstr	s9, [sp, #560]	@ 0x230
 8019728:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 801972c:	edcd 3a87 	vstr	s7, [sp, #540]	@ 0x21c
 8019730:	ed8d ca88 	vstr	s24, [sp, #544]	@ 0x220
 8019734:	ed8d fa8e 	vstr	s30, [sp, #568]	@ 0x238
 8019738:	2b00      	cmp	r3, #0
 801973a:	f000 8525 	beq.w	801a188 <iNemoEngine_API_Update+0x2570>
 801973e:	ee27 3a03 	vmul.f32	s6, s14, s6
 8019742:	ee67 3a23 	vmul.f32	s7, s14, s7
 8019746:	ee27 ca0c 	vmul.f32	s24, s14, s24
 801974a:	ed9d 2a22 	vldr	s4, [sp, #136]	@ 0x88
 801974e:	ed8d 3a86 	vstr	s6, [sp, #536]	@ 0x218
 8019752:	ee37 7a07 	vadd.f32	s14, s14, s14
 8019756:	4613      	mov	r3, r2
 8019758:	ee25 2a82 	vmul.f32	s4, s11, s4
 801975c:	7b92      	ldrb	r2, [r2, #14]
 801975e:	7b5b      	ldrb	r3, [r3, #13]
 8019760:	edcd 3a87 	vstr	s7, [sp, #540]	@ 0x21c
 8019764:	ee64 5a25 	vmul.f32	s11, s8, s11
 8019768:	ee26 6a07 	vmul.f32	s12, s12, s14
 801976c:	edcd 5a66 	vstr	s11, [sp, #408]	@ 0x198
 8019770:	ed8d ca88 	vstr	s24, [sp, #544]	@ 0x220
 8019774:	ed8d 2a5f 	vstr	s4, [sp, #380]	@ 0x17c
 8019778:	ed8d 2a60 	vstr	s4, [sp, #384]	@ 0x180
 801977c:	ed8d 2a61 	vstr	s4, [sp, #388]	@ 0x184
 8019780:	ed8d 6a8d 	vstr	s12, [sp, #564]	@ 0x234
 8019784:	f88d 20eb 	strb.w	r2, [sp, #235]	@ 0xeb
 8019788:	f88d 20ec 	strb.w	r2, [sp, #236]	@ 0xec
 801978c:	f88d 20ed 	strb.w	r2, [sp, #237]	@ 0xed
 8019790:	f88d 30e8 	strb.w	r3, [sp, #232]	@ 0xe8
 8019794:	f88d 30e9 	strb.w	r3, [sp, #233]	@ 0xe9
 8019798:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801979c:	b15a      	cbz	r2, 80197b6 <iNemoEngine_API_Update+0x1b9e>
 801979e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80197a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80197a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197aa:	dd04      	ble.n	80197b6 <iNemoEngine_API_Update+0x1b9e>
 80197ac:	2100      	movs	r1, #0
 80197ae:	f8ad 10eb 	strh.w	r1, [sp, #235]	@ 0xeb
 80197b2:	f88d 10ed 	strb.w	r1, [sp, #237]	@ 0xed
 80197b6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 80197ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197be:	dd08      	ble.n	80197d2 <iNemoEngine_API_Update+0x1bba>
 80197c0:	9906      	ldr	r1, [sp, #24]
 80197c2:	edd1 7a64 	vldr	s15, [r1, #400]	@ 0x190
 80197c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80197ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ce:	f280 85a4 	bge.w	801a31a <iNemoEngine_API_Update+0x2702>
 80197d2:	b133      	cbz	r3, 80197e2 <iNemoEngine_API_Update+0x1bca>
 80197d4:	f240 1101 	movw	r1, #257	@ 0x101
 80197d8:	f8ad 10e8 	strh.w	r1, [sp, #232]	@ 0xe8
 80197dc:	2101      	movs	r1, #1
 80197de:	f88d 10ea 	strb.w	r1, [sp, #234]	@ 0xea
 80197e2:	2401      	movs	r4, #1
 80197e4:	f88d 40f1 	strb.w	r4, [sp, #241]	@ 0xf1
 80197e8:	f88d 40f3 	strb.w	r4, [sp, #243]	@ 0xf3
 80197ec:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 8019684 <iNemoEngine_API_Update+0x1a6c>
 80197f0:	eef4 cae7 	vcmpe.f32	s25, s15
 80197f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f8:	dc07      	bgt.n	801980a <iNemoEngine_API_Update+0x1bf2>
 80197fa:	ed5f 7a5d 	vldr	s15, [pc, #-372]	@ 8019688 <iNemoEngine_API_Update+0x1a70>
 80197fe:	eef4 cae7 	vcmpe.f32	s25, s15
 8019802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019806:	f141 801d 	bpl.w	801a844 <iNemoEngine_API_Update+0x2c2c>
 801980a:	2300      	movs	r3, #0
 801980c:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 8019810:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 8019814:	f88d 30f1 	strb.w	r3, [sp, #241]	@ 0xf1
 8019818:	f88d 30f3 	strb.w	r3, [sp, #243]	@ 0xf3
 801981c:	ed5f 7a65 	vldr	s15, [pc, #-404]	@ 801968c <iNemoEngine_API_Update+0x1a74>
 8019820:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8019824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019828:	dc07      	bgt.n	801983a <iNemoEngine_API_Update+0x1c22>
 801982a:	ed5f 7a67 	vldr	s15, [pc, #-412]	@ 8019690 <iNemoEngine_API_Update+0x1a78>
 801982e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8019832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019836:	f140 86ed 	bpl.w	801a614 <iNemoEngine_API_Update+0x29fc>
 801983a:	2300      	movs	r3, #0
 801983c:	f8ad 30eb 	strh.w	r3, [sp, #235]	@ 0xeb
 8019840:	f88d 30ed 	strb.w	r3, [sp, #237]	@ 0xed
 8019844:	f8ad 30f1 	strh.w	r3, [sp, #241]	@ 0xf1
 8019848:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801984c:	eef4 fae7 	vcmpe.f32	s31, s15
 8019850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019854:	f340 8486 	ble.w	801a164 <iNemoEngine_API_Update+0x254c>
 8019858:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801985c:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 8019860:	9a06      	ldr	r2, [sp, #24]
 8019862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019866:	2300      	movs	r3, #0
 8019868:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801986c:	ee27 fa8f 	vmul.f32	s30, s15, s30
 8019870:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019874:	eef4 fae7 	vcmpe.f32	s31, s15
 8019878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801987c:	bfc4      	itt	gt
 801987e:	f88d 30f1 	strbgt.w	r3, [sp, #241]	@ 0xf1
 8019882:	f88d 30f3 	strbgt.w	r3, [sp, #243]	@ 0xf3
 8019886:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 801988a:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801988e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8019890:	edcd 4a8c 	vstr	s9, [sp, #560]	@ 0x230
 8019894:	2b0e      	cmp	r3, #14
 8019896:	ed8d fa8e 	vstr	s30, [sp, #568]	@ 0x238
 801989a:	f340 8567 	ble.w	801a36c <iNemoEngine_API_Update+0x2754>
 801989e:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 80198a2:	eeb4 dae7 	vcmpe.f32	s26, s15
 80198a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198aa:	f340 82ed 	ble.w	8019e88 <iNemoEngine_API_Update+0x2270>
 80198ae:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 80198b2:	eef4 7acb 	vcmpe.f32	s15, s22
 80198b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ba:	f340 82e5 	ble.w	8019e88 <iNemoEngine_API_Update+0x2270>
 80198be:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 80198c2:	eef4 7aed 	vcmpe.f32	s15, s27
 80198c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ca:	f340 82dd 	ble.w	8019e88 <iNemoEngine_API_Update+0x2270>
 80198ce:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 8019694 <iNemoEngine_API_Update+0x1a7c>
 80198d2:	eeb0 7ace 	vabs.f32	s14, s28
 80198d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198de:	f140 82d3 	bpl.w	8019e88 <iNemoEngine_API_Update+0x2270>
 80198e2:	eeb0 7aee 	vabs.f32	s14, s29
 80198e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ee:	f140 82cb 	bpl.w	8019e88 <iNemoEngine_API_Update+0x2270>
 80198f2:	eeb0 7aeb 	vabs.f32	s14, s23
 80198f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198fe:	f140 82c3 	bpl.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019902:	ed5f 7a9b 	vldr	s15, [pc, #-620]	@ 8019698 <iNemoEngine_API_Update+0x1a80>
 8019906:	eef0 aaea 	vabs.f32	s21, s21
 801990a:	eef4 aae7 	vcmpe.f32	s21, s15
 801990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019912:	f140 82b9 	bpl.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019916:	eeb0 aaca 	vabs.f32	s20, s20
 801991a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801991e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019922:	f140 82b1 	bpl.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019926:	eef0 9ae9 	vabs.f32	s19, s19
 801992a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019932:	f140 82a9 	bpl.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019936:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019938:	9806      	ldr	r0, [sp, #24]
 801993a:	ed93 6a00 	vldr	s12, [r3]
 801993e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019940:	f890 11a0 	ldrb.w	r1, [r0, #416]	@ 0x1a0
 8019944:	ed93 7a00 	vldr	s14, [r3]
 8019948:	f200 73a4 	addw	r3, r0, #1956	@ 0x7a4
 801994c:	edd3 4a00 	vldr	s9, [r3]
 8019950:	2909      	cmp	r1, #9
 8019952:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8019956:	f500 63f6 	add.w	r3, r0, #1968	@ 0x7b0
 801995a:	ed93 5a00 	vldr	s10, [r3]
 801995e:	bf8c      	ite	hi
 8019960:	220a      	movhi	r2, #10
 8019962:	2205      	movls	r2, #5
 8019964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019968:	bfb4      	ite	lt
 801996a:	eef0 7a64 	vmovlt.f32	s15, s9
 801996e:	eef0 7a46 	vmovge.f32	s15, s12
 8019972:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019976:	bf8c      	ite	hi
 8019978:	eef0 5a64 	vmovhi.f32	s11, s9
 801997c:	eef0 5a46 	vmovls.f32	s11, s12
 8019980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019984:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019988:	eef4 5ac5 	vcmpe.f32	s11, s10
 801998c:	bfb8      	it	lt
 801998e:	eef0 7a45 	vmovlt.f32	s15, s10
 8019992:	f200 73bc 	addw	r3, r0, #1980	@ 0x7bc
 8019996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801999a:	bf88      	it	hi
 801999c:	eef0 5a45 	vmovhi.f32	s11, s10
 80199a0:	ee36 6a05 	vadd.f32	s12, s12, s10
 80199a4:	ed93 5a00 	vldr	s10, [r3]
 80199a8:	eef4 7ac5 	vcmpe.f32	s15, s10
 80199ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b0:	eef4 5ac5 	vcmpe.f32	s11, s10
 80199b4:	bfb8      	it	lt
 80199b6:	eef0 7a45 	vmovlt.f32	s15, s10
 80199ba:	f500 63f9 	add.w	r3, r0, #1992	@ 0x7c8
 80199be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c2:	bf88      	it	hi
 80199c4:	eef0 5a45 	vmovhi.f32	s11, s10
 80199c8:	ee36 6a05 	vadd.f32	s12, s12, s10
 80199cc:	ed93 5a00 	vldr	s10, [r3]
 80199d0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80199d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80199dc:	bfb8      	it	lt
 80199de:	eef0 7a45 	vmovlt.f32	s15, s10
 80199e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e6:	bf88      	it	hi
 80199e8:	eef0 5a45 	vmovhi.f32	s11, s10
 80199ec:	2a05      	cmp	r2, #5
 80199ee:	ee36 6a05 	vadd.f32	s12, s12, s10
 80199f2:	d065      	beq.n	8019ac0 <iNemoEngine_API_Update+0x1ea8>
 80199f4:	f200 73d4 	addw	r3, r0, #2004	@ 0x7d4
 80199f8:	ed93 5a00 	vldr	s10, [r3]
 80199fc:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a04:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019a08:	bfb8      	it	lt
 8019a0a:	eef0 7a45 	vmovlt.f32	s15, s10
 8019a0e:	f500 63fc 	add.w	r3, r0, #2016	@ 0x7e0
 8019a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a16:	bf88      	it	hi
 8019a18:	eef0 5a45 	vmovhi.f32	s11, s10
 8019a1c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019a20:	ed93 5a00 	vldr	s10, [r3]
 8019a24:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019a30:	bfb8      	it	lt
 8019a32:	eef0 7a45 	vmovlt.f32	s15, s10
 8019a36:	f200 73ec 	addw	r3, r0, #2028	@ 0x7ec
 8019a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a3e:	bf88      	it	hi
 8019a40:	eef0 5a45 	vmovhi.f32	s11, s10
 8019a44:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019a48:	ed93 5a00 	vldr	s10, [r3]
 8019a4c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a54:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019a58:	bfb8      	it	lt
 8019a5a:	eef0 7a45 	vmovlt.f32	s15, s10
 8019a5e:	f500 63ff 	add.w	r3, r0, #2040	@ 0x7f8
 8019a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a66:	bf88      	it	hi
 8019a68:	eef0 5a45 	vmovhi.f32	s11, s10
 8019a6c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019a70:	ed93 5a00 	vldr	s10, [r3]
 8019a74:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a7c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019a80:	bfb8      	it	lt
 8019a82:	eef0 7a45 	vmovlt.f32	s15, s10
 8019a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a8a:	bf88      	it	hi
 8019a8c:	eef0 5a45 	vmovhi.f32	s11, s10
 8019a90:	2a0a      	cmp	r2, #10
 8019a92:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019a96:	d113      	bne.n	8019ac0 <iNemoEngine_API_Update+0x1ea8>
 8019a98:	f600 0304 	addw	r3, r0, #2052	@ 0x804
 8019a9c:	ed93 5a00 	vldr	s10, [r3]
 8019aa0:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa8:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019aac:	bfb8      	it	lt
 8019aae:	eef0 7a45 	vmovlt.f32	s15, s10
 8019ab2:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aba:	bf88      	it	hi
 8019abc:	eef0 5a45 	vmovhi.f32	s11, s10
 8019ac0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019ac4:	eddf 5aeb 	vldr	s11, [pc, #940]	@ 8019e74 <iNemoEngine_API_Update+0x225c>
 8019ac8:	ed9f 5aeb 	vldr	s10, [pc, #940]	@ 8019e78 <iNemoEngine_API_Update+0x2260>
 8019acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019ad0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019ad4:	eef4 7ae5 	vcmpe.f32	s15, s11
 8019ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019adc:	f300 81d4 	bgt.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019ae0:	eef0 7ac6 	vabs.f32	s15, s12
 8019ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019ae8:	ed9f 6ae4 	vldr	s12, [pc, #912]	@ 8019e7c <iNemoEngine_API_Update+0x2264>
 8019aec:	eef4 7ac6 	vcmpe.f32	s15, s12
 8019af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af4:	f300 81c8 	bgt.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019af8:	9806      	ldr	r0, [sp, #24]
 8019afa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8019afc:	ed93 6a00 	vldr	s12, [r3]
 8019b00:	f500 63f5 	add.w	r3, r0, #1960	@ 0x7a8
 8019b04:	edd3 4a00 	vldr	s9, [r3]
 8019b08:	f200 73b4 	addw	r3, r0, #1972	@ 0x7b4
 8019b0c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8019b10:	ed93 5a00 	vldr	s10, [r3]
 8019b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b18:	bfb4      	ite	lt
 8019b1a:	eef0 7a64 	vmovlt.f32	s15, s9
 8019b1e:	eef0 7a46 	vmovge.f32	s15, s12
 8019b22:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019b26:	bf8c      	ite	hi
 8019b28:	eef0 5a64 	vmovhi.f32	s11, s9
 8019b2c:	eef0 5a46 	vmovls.f32	s11, s12
 8019b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b34:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019b38:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019b3c:	bfb8      	it	lt
 8019b3e:	eef0 7a45 	vmovlt.f32	s15, s10
 8019b42:	f500 63f8 	add.w	r3, r0, #1984	@ 0x7c0
 8019b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b4a:	bf88      	it	hi
 8019b4c:	eef0 5a45 	vmovhi.f32	s11, s10
 8019b50:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019b54:	ed93 5a00 	vldr	s10, [r3]
 8019b58:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b60:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019b64:	bfb8      	it	lt
 8019b66:	eef0 7a45 	vmovlt.f32	s15, s10
 8019b6a:	f200 73cc 	addw	r3, r0, #1996	@ 0x7cc
 8019b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b72:	bf88      	it	hi
 8019b74:	eef0 5a45 	vmovhi.f32	s11, s10
 8019b78:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019b7c:	ed93 5a00 	vldr	s10, [r3]
 8019b80:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b88:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019b8c:	bfb8      	it	lt
 8019b8e:	eef0 7a45 	vmovlt.f32	s15, s10
 8019b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b96:	bf88      	it	hi
 8019b98:	eef0 5a45 	vmovhi.f32	s11, s10
 8019b9c:	2a05      	cmp	r2, #5
 8019b9e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019ba2:	d065      	beq.n	8019c70 <iNemoEngine_API_Update+0x2058>
 8019ba4:	f500 63fb 	add.w	r3, r0, #2008	@ 0x7d8
 8019ba8:	ed93 5a00 	vldr	s10, [r3]
 8019bac:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb4:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019bb8:	bfb8      	it	lt
 8019bba:	eef0 7a45 	vmovlt.f32	s15, s10
 8019bbe:	f200 73e4 	addw	r3, r0, #2020	@ 0x7e4
 8019bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc6:	bf88      	it	hi
 8019bc8:	eef0 5a45 	vmovhi.f32	s11, s10
 8019bcc:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019bd0:	ed93 5a00 	vldr	s10, [r3]
 8019bd4:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bdc:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019be0:	bfb8      	it	lt
 8019be2:	eef0 7a45 	vmovlt.f32	s15, s10
 8019be6:	f500 63fe 	add.w	r3, r0, #2032	@ 0x7f0
 8019bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bee:	bf88      	it	hi
 8019bf0:	eef0 5a45 	vmovhi.f32	s11, s10
 8019bf4:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019bf8:	ed93 5a00 	vldr	s10, [r3]
 8019bfc:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c04:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019c08:	bfb8      	it	lt
 8019c0a:	eef0 7a45 	vmovlt.f32	s15, s10
 8019c0e:	f200 73fc 	addw	r3, r0, #2044	@ 0x7fc
 8019c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c16:	bf88      	it	hi
 8019c18:	eef0 5a45 	vmovhi.f32	s11, s10
 8019c1c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019c20:	ed93 5a00 	vldr	s10, [r3]
 8019c24:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019c30:	bfb8      	it	lt
 8019c32:	eef0 7a45 	vmovlt.f32	s15, s10
 8019c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c3a:	bf88      	it	hi
 8019c3c:	eef0 5a45 	vmovhi.f32	s11, s10
 8019c40:	2a0a      	cmp	r2, #10
 8019c42:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019c46:	d113      	bne.n	8019c70 <iNemoEngine_API_Update+0x2058>
 8019c48:	f600 0308 	addw	r3, r0, #2056	@ 0x808
 8019c4c:	ed93 5a00 	vldr	s10, [r3]
 8019c50:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c58:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019c5c:	bfb8      	it	lt
 8019c5e:	eef0 7a45 	vmovlt.f32	s15, s10
 8019c62:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c6a:	bf88      	it	hi
 8019c6c:	eef0 5a45 	vmovhi.f32	s11, s10
 8019c70:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019c74:	eddf 5a7f 	vldr	s11, [pc, #508]	@ 8019e74 <iNemoEngine_API_Update+0x225c>
 8019c78:	ed9f 5a7f 	vldr	s10, [pc, #508]	@ 8019e78 <iNemoEngine_API_Update+0x2260>
 8019c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c80:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019c84:	eef4 7ae5 	vcmpe.f32	s15, s11
 8019c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c8c:	f300 80fc 	bgt.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019c90:	eef0 7ac6 	vabs.f32	s15, s12
 8019c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c98:	ed9f 6a78 	vldr	s12, [pc, #480]	@ 8019e7c <iNemoEngine_API_Update+0x2264>
 8019c9c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8019ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca4:	f300 80f0 	bgt.w	8019e88 <iNemoEngine_API_Update+0x2270>
 8019ca8:	9806      	ldr	r0, [sp, #24]
 8019caa:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8019cac:	ed93 5a00 	vldr	s10, [r3]
 8019cb0:	f200 73ac 	addw	r3, r0, #1964	@ 0x7ac
 8019cb4:	edd3 4a00 	vldr	s9, [r3]
 8019cb8:	f500 63f7 	add.w	r3, r0, #1976	@ 0x7b8
 8019cbc:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8019cc0:	ed93 6a00 	vldr	s12, [r3]
 8019cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cc8:	bfb4      	ite	lt
 8019cca:	eef0 7a64 	vmovlt.f32	s15, s9
 8019cce:	eef0 7a45 	vmovge.f32	s15, s10
 8019cd2:	bf8c      	ite	hi
 8019cd4:	eef0 5a64 	vmovhi.f32	s11, s9
 8019cd8:	eef0 5a45 	vmovls.f32	s11, s10
 8019cdc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8019ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ce4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8019ce8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8019cec:	bfa8      	it	ge
 8019cee:	eef0 7a46 	vmovge.f32	s15, s12
 8019cf2:	f200 73c4 	addw	r3, r0, #1988	@ 0x7c4
 8019cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cfa:	bf98      	it	ls
 8019cfc:	eef0 5a46 	vmovls.f32	s11, s12
 8019d00:	ee76 4a05 	vadd.f32	s9, s12, s10
 8019d04:	ed93 6a00 	vldr	s12, [r3]
 8019d08:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8019d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d10:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8019d14:	bfa8      	it	ge
 8019d16:	eef0 7a46 	vmovge.f32	s15, s12
 8019d1a:	f500 63fa 	add.w	r3, r0, #2000	@ 0x7d0
 8019d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d22:	bf8c      	ite	hi
 8019d24:	eeb0 5a65 	vmovhi.f32	s10, s11
 8019d28:	eeb0 5a46 	vmovls.f32	s10, s12
 8019d2c:	edd3 5a00 	vldr	s11, [r3]
 8019d30:	eef4 5ae7 	vcmpe.f32	s11, s15
 8019d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d38:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019d3c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019d40:	bfa8      	it	ge
 8019d42:	eef0 7a65 	vmovge.f32	s15, s11
 8019d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d4a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8019d4e:	bf88      	it	hi
 8019d50:	eef0 5a45 	vmovhi.f32	s11, s10
 8019d54:	2a05      	cmp	r2, #5
 8019d56:	d065      	beq.n	8019e24 <iNemoEngine_API_Update+0x220c>
 8019d58:	f200 73dc 	addw	r3, r0, #2012	@ 0x7dc
 8019d5c:	ed93 5a00 	vldr	s10, [r3]
 8019d60:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8019d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d68:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8019d6c:	bfa8      	it	ge
 8019d6e:	eef0 7a45 	vmovge.f32	s15, s10
 8019d72:	f500 63fd 	add.w	r3, r0, #2024	@ 0x7e8
 8019d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d7a:	bf98      	it	ls
 8019d7c:	eef0 5a45 	vmovls.f32	s11, s10
 8019d80:	ee35 5a06 	vadd.f32	s10, s10, s12
 8019d84:	ed93 6a00 	vldr	s12, [r3]
 8019d88:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8019d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d90:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8019d94:	bfa8      	it	ge
 8019d96:	eef0 7a46 	vmovge.f32	s15, s12
 8019d9a:	f200 73f4 	addw	r3, r0, #2036	@ 0x7f4
 8019d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019da2:	bf98      	it	ls
 8019da4:	eef0 5a46 	vmovls.f32	s11, s12
 8019da8:	ee36 5a05 	vadd.f32	s10, s12, s10
 8019dac:	ed93 6a00 	vldr	s12, [r3]
 8019db0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8019db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8019dbc:	bfa8      	it	ge
 8019dbe:	eef0 7a46 	vmovge.f32	s15, s12
 8019dc2:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
 8019dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dca:	bf98      	it	ls
 8019dcc:	eef0 5a46 	vmovls.f32	s11, s12
 8019dd0:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019dd4:	ed93 5a00 	vldr	s10, [r3]
 8019dd8:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8019ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019de0:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8019de4:	bfa8      	it	ge
 8019de6:	eef0 7a45 	vmovge.f32	s15, s10
 8019dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dee:	bf98      	it	ls
 8019df0:	eef0 5a45 	vmovls.f32	s11, s10
 8019df4:	2a0a      	cmp	r2, #10
 8019df6:	ee35 6a06 	vadd.f32	s12, s10, s12
 8019dfa:	d113      	bne.n	8019e24 <iNemoEngine_API_Update+0x220c>
 8019dfc:	f600 030c 	addw	r3, r0, #2060	@ 0x80c
 8019e00:	ed93 5a00 	vldr	s10, [r3]
 8019e04:	eef4 7ac5 	vcmpe.f32	s15, s10
 8019e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e0c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8019e10:	bfb8      	it	lt
 8019e12:	eef0 7a45 	vmovlt.f32	s15, s10
 8019e16:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e1e:	bf88      	it	hi
 8019e20:	eef0 5a45 	vmovhi.f32	s11, s10
 8019e24:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019e28:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8019e74 <iNemoEngine_API_Update+0x225c>
 8019e2c:	ed9f 5a12 	vldr	s10, [pc, #72]	@ 8019e78 <iNemoEngine_API_Update+0x2260>
 8019e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019e34:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019e38:	eef4 7ae5 	vcmpe.f32	s15, s11
 8019e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e40:	dc22      	bgt.n	8019e88 <iNemoEngine_API_Update+0x2270>
 8019e42:	eef0 7ac6 	vabs.f32	s15, s12
 8019e46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019e4a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019e7c <iNemoEngine_API_Update+0x2264>
 8019e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e56:	dc17      	bgt.n	8019e88 <iNemoEngine_API_Update+0x2270>
 8019e58:	9b06      	ldr	r3, [sp, #24]
 8019e5a:	795b      	ldrb	r3, [r3, #5]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	f002 8117 	beq.w	801c090 <iNemoEngine_API_Update+0x4478>
 8019e62:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 8019e66:	2a01      	cmp	r2, #1
 8019e68:	f001 87d1 	beq.w	801be0e <iNemoEngine_API_Update+0x41f6>
 8019e6c:	f04f 0901 	mov.w	r9, #1
 8019e70:	f000 bc0b 	b.w	801a68a <iNemoEngine_API_Update+0x2a72>
 8019e74:	3be56041 	.word	0x3be56041
 8019e78:	3dcccccd 	.word	0x3dcccccd
 8019e7c:	3e333333 	.word	0x3e333333
 8019e80:	42480000 	.word	0x42480000
 8019e84:	00000000 	.word	0x00000000
 8019e88:	9b06      	ldr	r3, [sp, #24]
 8019e8a:	795b      	ldrb	r3, [r3, #5]
 8019e8c:	f04f 0900 	mov.w	r9, #0
 8019e90:	f8ad 90ee 	strh.w	r9, [sp, #238]	@ 0xee
 8019e94:	f88d 90f0 	strb.w	r9, [sp, #240]	@ 0xf0
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	f040 83f1 	bne.w	801a680 <iNemoEngine_API_Update+0x2a68>
 8019e9e:	9906      	ldr	r1, [sp, #24]
 8019ea0:	f8d1 21bc 	ldr.w	r2, [r1, #444]	@ 0x1bc
 8019ea4:	9295      	str	r2, [sp, #596]	@ 0x254
 8019ea6:	f8d1 21c0 	ldr.w	r2, [r1, #448]	@ 0x1c0
 8019eaa:	9296      	str	r2, [sp, #600]	@ 0x258
 8019eac:	f8d1 21c4 	ldr.w	r2, [r1, #452]	@ 0x1c4
 8019eb0:	9297      	str	r2, [sp, #604]	@ 0x25c
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8019eb8:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8019ebc:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 8019ec0:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 8019ec4:	704a      	strb	r2, [r1, #1]
 8019ec6:	ed5f 7a12 	vldr	s15, [pc, #-72]	@ 8019e80 <iNemoEngine_API_Update+0x2268>
 8019eca:	eef4 6ae7 	vcmpe.f32	s13, s15
 8019ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ed2:	f2c0 8138 	blt.w	801a146 <iNemoEngine_API_Update+0x252e>
 8019ed6:	9906      	ldr	r1, [sp, #24]
 8019ed8:	2200      	movs	r2, #0
 8019eda:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8019ede:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 8019ee2:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 8019ee6:	2b01      	cmp	r3, #1
 8019ee8:	d125      	bne.n	8019f36 <iNemoEngine_API_Update+0x231e>
 8019eea:	eddd 4a86 	vldr	s9, [sp, #536]	@ 0x218
 8019eee:	ed9d 6a5f 	vldr	s12, [sp, #380]	@ 0x17c
 8019ef2:	ed9d 5a87 	vldr	s10, [sp, #540]	@ 0x21c
 8019ef6:	ed9d 7a60 	vldr	s14, [sp, #384]	@ 0x180
 8019efa:	eddd 5a88 	vldr	s11, [sp, #544]	@ 0x220
 8019efe:	eddd 7a61 	vldr	s15, [sp, #388]	@ 0x184
 8019f02:	eeb6 4a08 	vmov.f32	s8, #104	@ 0x3f400000  0.750
 8019f06:	ee64 4a84 	vmul.f32	s9, s9, s8
 8019f0a:	ee36 6a06 	vadd.f32	s12, s12, s12
 8019f0e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019f12:	ee37 7a07 	vadd.f32	s14, s14, s14
 8019f16:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019f1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019f1e:	edcd 4a86 	vstr	s9, [sp, #536]	@ 0x218
 8019f22:	ed8d 6a5f 	vstr	s12, [sp, #380]	@ 0x17c
 8019f26:	ed8d 5a87 	vstr	s10, [sp, #540]	@ 0x21c
 8019f2a:	ed8d 7a60 	vstr	s14, [sp, #384]	@ 0x180
 8019f2e:	edcd 5a88 	vstr	s11, [sp, #544]	@ 0x220
 8019f32:	edcd 7a61 	vstr	s15, [sp, #388]	@ 0x184
 8019f36:	9c06      	ldr	r4, [sp, #24]
 8019f38:	ed9d 6a60 	vldr	s12, [sp, #384]	@ 0x180
 8019f3c:	ed94 2a7f 	vldr	s4, [r4, #508]	@ 0x1fc
 8019f40:	edd4 1a75 	vldr	s3, [r4, #468]	@ 0x1d4
 8019f44:	edd4 2a89 	vldr	s5, [r4, #548]	@ 0x224
 8019f48:	edd4 3a93 	vldr	s7, [r4, #588]	@ 0x24c
 8019f4c:	eddd 0a5f 	vldr	s1, [sp, #380]	@ 0x17c
 8019f50:	ed9d 1a61 	vldr	s2, [sp, #388]	@ 0x184
 8019f54:	ed94 4a9d 	vldr	s8, [r4, #628]	@ 0x274
 8019f58:	edd4 4aa7 	vldr	s9, [r4, #668]	@ 0x29c
 8019f5c:	ed94 5ab1 	vldr	s10, [r4, #708]	@ 0x2c4
 8019f60:	ed9d 3a8b 	vldr	s6, [sp, #556]	@ 0x22c
 8019f64:	ed9d 7a89 	vldr	s14, [sp, #548]	@ 0x224
 8019f68:	eddd 7a8a 	vldr	s15, [sp, #552]	@ 0x228
 8019f6c:	edd4 5abb 	vldr	s11, [r4, #748]	@ 0x2ec
 8019f70:	eea6 2a06 	vfma.f32	s4, s12, s12
 8019f74:	ab83      	add	r3, sp, #524	@ 0x20c
 8019f76:	aa8f      	add	r2, sp, #572	@ 0x23c
 8019f78:	ed9d 6a62 	vldr	s12, [sp, #392]	@ 0x188
 8019f7c:	ed84 2a7f 	vstr	s4, [r4, #508]	@ 0x1fc
 8019f80:	eee0 1aa0 	vfma.f32	s3, s1, s1
 8019f84:	a93a      	add	r1, sp, #232	@ 0xe8
 8019f86:	f504 70d6 	add.w	r0, r4, #428	@ 0x1ac
 8019f8a:	eee1 2a01 	vfma.f32	s5, s2, s2
 8019f8e:	eee6 3a06 	vfma.f32	s7, s12, s12
 8019f92:	eddd 0a63 	vldr	s1, [sp, #396]	@ 0x18c
 8019f96:	ed9d 1a64 	vldr	s2, [sp, #400]	@ 0x190
 8019f9a:	ed9d 6a65 	vldr	s12, [sp, #404]	@ 0x194
 8019f9e:	edc4 1a75 	vstr	s3, [r4, #468]	@ 0x1d4
 8019fa2:	eea0 4aa0 	vfma.f32	s8, s1, s1
 8019fa6:	eee1 4a01 	vfma.f32	s9, s2, s2
 8019faa:	eea6 5a06 	vfma.f32	s10, s12, s12
 8019fae:	eddd 0a66 	vldr	s1, [sp, #408]	@ 0x198
 8019fb2:	ed9d 1a67 	vldr	s2, [sp, #412]	@ 0x19c
 8019fb6:	ed94 6ac5 	vldr	s12, [r4, #788]	@ 0x314
 8019fba:	edc4 2a89 	vstr	s5, [r4, #548]	@ 0x224
 8019fbe:	eee0 5aa0 	vfma.f32	s11, s1, s1
 8019fc2:	eea1 6a01 	vfma.f32	s12, s2, s2
 8019fc6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8019fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019fce:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019fd2:	ee27 7a28 	vmul.f32	s14, s14, s17
 8019fd6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8019fda:	ee66 8aa8 	vmul.f32	s17, s13, s17
 8019fde:	ed8d 7a89 	vstr	s14, [sp, #548]	@ 0x224
 8019fe2:	edcd 7a8a 	vstr	s15, [sp, #552]	@ 0x228
 8019fe6:	edc4 3a93 	vstr	s7, [r4, #588]	@ 0x24c
 8019fea:	ed84 4a9d 	vstr	s8, [r4, #628]	@ 0x274
 8019fee:	edc4 4aa7 	vstr	s9, [r4, #668]	@ 0x29c
 8019ff2:	ed84 5ab1 	vstr	s10, [r4, #708]	@ 0x2c4
 8019ff6:	edcd 8a8b 	vstr	s17, [sp, #556]	@ 0x22c
 8019ffa:	edc4 5abb 	vstr	s11, [r4, #748]	@ 0x2ec
 8019ffe:	ed84 6ac5 	vstr	s12, [r4, #788]	@ 0x314
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a006:	f7fc fb1d 	bl	8016644 <kf_update>
 801a00a:	edd4 6a6d 	vldr	s13, [r4, #436]	@ 0x1b4
 801a00e:	ed94 6a6c 	vldr	s12, [r4, #432]	@ 0x1b0
 801a012:	ed94 7a6e 	vldr	s14, [r4, #440]	@ 0x1b8
 801a016:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801a01a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801a01e:	eee6 7a06 	vfma.f32	s15, s12, s12
 801a022:	eee7 7a07 	vfma.f32	s15, s14, s14
 801a026:	eef4 7ae5 	vcmpe.f32	s15, s11
 801a02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a02e:	f100 80bb 	bmi.w	801a1a8 <iNemoEngine_API_Update+0x2590>
 801a032:	ed5f 5a6c 	vldr	s11, [pc, #-432]	@ 8019e84 <iNemoEngine_API_Update+0x226c>
 801a036:	ed8d 6a52 	vstr	s12, [sp, #328]	@ 0x148
 801a03a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801a03e:	aa4e      	add	r2, sp, #312	@ 0x138
 801a040:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801a042:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801a046:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801a04a:	4611      	mov	r1, r2
 801a04c:	ae68      	add	r6, sp, #416	@ 0x1a0
 801a04e:	af70      	add	r7, sp, #448	@ 0x1c0
 801a050:	edcd 6a53 	vstr	s13, [sp, #332]	@ 0x14c
 801a054:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801a058:	ed8d 7a54 	vstr	s14, [sp, #336]	@ 0x150
 801a05c:	ee27 6a86 	vmul.f32	s12, s15, s12
 801a060:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801a064:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a068:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a06c:	edcd 5a55 	vstr	s11, [sp, #340]	@ 0x154
 801a070:	ed8d 6aae 	vstr	s12, [sp, #696]	@ 0x2b8
 801a074:	edcd 6aaf 	vstr	s13, [sp, #700]	@ 0x2bc
 801a078:	ed8d 7ab0 	vstr	s14, [sp, #704]	@ 0x2c0
 801a07c:	edcd 7ab1 	vstr	s15, [sp, #708]	@ 0x2c4
 801a080:	f7fc f920 	bl	80162c4 <qmult>
 801a084:	ed92 6a01 	vldr	s12, [r2, #4]
 801a088:	edd2 5a00 	vldr	s11, [r2]
 801a08c:	edd2 6a02 	vldr	s13, [r2, #8]
 801a090:	ed92 7a03 	vldr	s14, [r2, #12]
 801a094:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 801a096:	ee66 7a06 	vmul.f32	s15, s12, s12
 801a09a:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801a09e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801a0a2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801a0a6:	eee7 7a07 	vfma.f32	s15, s14, s14
 801a0aa:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801a0ae:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801a0b2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801a0b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 801a0ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801a0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a0c2:	edcd 5a4a 	vstr	s11, [sp, #296]	@ 0x128
 801a0c6:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 801a0ca:	edcd 6a4c 	vstr	s13, [sp, #304]	@ 0x130
 801a0ce:	ed8d 7a4d 	vstr	s14, [sp, #308]	@ 0x134
 801a0d2:	4634      	mov	r4, r6
 801a0d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0d6:	42bc      	cmp	r4, r7
 801a0d8:	f105 0510 	add.w	r5, r5, #16
 801a0dc:	f106 0610 	add.w	r6, r6, #16
 801a0e0:	f845 0c10 	str.w	r0, [r5, #-16]
 801a0e4:	f845 1c0c 	str.w	r1, [r5, #-12]
 801a0e8:	f845 2c08 	str.w	r2, [r5, #-8]
 801a0ec:	f845 3c04 	str.w	r3, [r5, #-4]
 801a0f0:	d1ef      	bne.n	801a0d2 <iNemoEngine_API_Update+0x24ba>
 801a0f2:	6830      	ldr	r0, [r6, #0]
 801a0f4:	6028      	str	r0, [r5, #0]
 801a0f6:	9e06      	ldr	r6, [sp, #24]
 801a0f8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801a0fa:	f8d6 31bc 	ldr.w	r3, [r6, #444]	@ 0x1bc
 801a0fe:	6013      	str	r3, [r2, #0]
 801a100:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a102:	f8d6 31c0 	ldr.w	r3, [r6, #448]	@ 0x1c0
 801a106:	6013      	str	r3, [r2, #0]
 801a108:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801a10a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	@ 0x1c4
 801a10e:	6013      	str	r3, [r2, #0]
 801a110:	ad4a      	add	r5, sp, #296	@ 0x128
 801a112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a114:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 801a116:	60eb      	str	r3, [r5, #12]
 801a118:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a11a:	6028      	str	r0, [r5, #0]
 801a11c:	6069      	str	r1, [r5, #4]
 801a11e:	60aa      	str	r2, [r5, #8]
 801a120:	edd6 9a75 	vldr	s19, [r6, #468]	@ 0x1d4
 801a124:	edc3 5a00 	vstr	s11, [r3]
 801a128:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a12a:	f8d6 794c 	ldr.w	r7, [r6, #2380]	@ 0x94c
 801a12e:	ed83 6a00 	vstr	s12, [r3]
 801a132:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a134:	edc3 6a00 	vstr	s13, [r3]
 801a138:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a13a:	accc      	add	r4, sp, #816	@ 0x330
 801a13c:	ed83 7a00 	vstr	s14, [r3]
 801a140:	4635      	mov	r5, r6
 801a142:	f7fd be20 	b.w	8017d86 <iNemoEngine_API_Update+0x16e>
 801a146:	9906      	ldr	r1, [sp, #24]
 801a148:	f891 21a2 	ldrb.w	r2, [r1, #418]	@ 0x1a2
 801a14c:	2a31      	cmp	r2, #49	@ 0x31
 801a14e:	f63f aeca 	bhi.w	8019ee6 <iNemoEngine_API_Update+0x22ce>
 801a152:	3201      	adds	r2, #1
 801a154:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 801a158:	2200      	movs	r2, #0
 801a15a:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801a15e:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801a162:	e6c0      	b.n	8019ee6 <iNemoEngine_API_Update+0x22ce>
 801a164:	9a06      	ldr	r2, [sp, #24]
 801a166:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801a168:	2b00      	cmp	r3, #0
 801a16a:	f340 8398 	ble.w	801a89e <iNemoEngine_API_Update+0x2c86>
 801a16e:	3b01      	subs	r3, #1
 801a170:	6593      	str	r3, [r2, #88]	@ 0x58
 801a172:	2300      	movs	r3, #0
 801a174:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
 801a178:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801a17c:	f88d 30f1 	strb.w	r3, [sp, #241]	@ 0xf1
 801a180:	f88d 30f3 	strb.w	r3, [sp, #243]	@ 0xf3
 801a184:	f7ff bb8b 	b.w	801989e <iNemoEngine_API_Update+0x1c86>
 801a188:	7b53      	ldrb	r3, [r2, #13]
 801a18a:	7b92      	ldrb	r2, [r2, #14]
 801a18c:	f88d 30e8 	strb.w	r3, [sp, #232]	@ 0xe8
 801a190:	f88d 30e9 	strb.w	r3, [sp, #233]	@ 0xe9
 801a194:	f88d 30ea 	strb.w	r3, [sp, #234]	@ 0xea
 801a198:	f88d 20eb 	strb.w	r2, [sp, #235]	@ 0xeb
 801a19c:	f88d 20ec 	strb.w	r2, [sp, #236]	@ 0xec
 801a1a0:	f88d 20ed 	strb.w	r2, [sp, #237]	@ 0xed
 801a1a4:	f7ff bb07 	b.w	80197b6 <iNemoEngine_API_Update+0x1b9e>
 801a1a8:	ee35 5ae7 	vsub.f32	s10, s11, s15
 801a1ac:	eef1 5ac5 	vsqrt.f32	s11, s10
 801a1b0:	e741      	b.n	801a036 <iNemoEngine_API_Update+0x241e>
 801a1b2:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	@ 0x974
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	f341 8173 	ble.w	801b4a2 <iNemoEngine_API_Update+0x388a>
 801a1bc:	3b01      	subs	r3, #1
 801a1be:	f8a5 3974 	strh.w	r3, [r5, #2420]	@ 0x974
 801a1c2:	f7fd bd51 	b.w	8017c68 <iNemoEngine_API_Update+0x50>
 801a1c6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a1ca:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801a1ce:	eea7 6a07 	vfma.f32	s12, s14, s14
 801a1d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a1d6:	eeb0 8a67 	vmov.f32	s16, s15
 801a1da:	eef0 7a46 	vmov.f32	s15, s12
 801a1de:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801a1e2:	eee8 7ae8 	vfms.f32	s15, s17, s17
 801a1e6:	ee17 0a90 	vmov	r0, s15
 801a1ea:	f7e6 f9b5 	bl	8000558 <__aeabi_f2d>
 801a1ee:	ee78 7a08 	vadd.f32	s15, s16, s16
 801a1f2:	4602      	mov	r2, r0
 801a1f4:	460b      	mov	r3, r1
 801a1f6:	ee17 0a90 	vmov	r0, s15
 801a1fa:	ec43 2b18 	vmov	d8, r2, r3
 801a1fe:	f7e6 f9ab 	bl	8000558 <__aeabi_f2d>
 801a202:	eeb0 1a48 	vmov.f32	s2, s16
 801a206:	eef0 1a68 	vmov.f32	s3, s17
 801a20a:	ec41 0b10 	vmov	d0, r0, r1
 801a20e:	f005 f941 	bl	801f494 <atan2>
 801a212:	a3eb      	add	r3, pc, #940	@ (adr r3, 801a5c0 <iNemoEngine_API_Update+0x29a8>)
 801a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a218:	ec51 0b10 	vmov	r0, r1, d0
 801a21c:	f7e6 f9f4 	bl	8000608 <__aeabi_dmul>
 801a220:	4be9      	ldr	r3, [pc, #932]	@ (801a5c8 <iNemoEngine_API_Update+0x29b0>)
 801a222:	2200      	movs	r2, #0
 801a224:	f7e6 f83a 	bl	800029c <__adddf3>
 801a228:	f7e6 fce6 	bl	8000bf8 <__aeabi_d2f>
 801a22c:	ee08 0a10 	vmov	s16, r0
 801a230:	f7fd be3a 	b.w	8017ea8 <iNemoEngine_API_Update+0x290>
 801a234:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a238:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801a23c:	eea7 6a07 	vfma.f32	s12, s14, s14
 801a240:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a244:	eeb0 8a67 	vmov.f32	s16, s15
 801a248:	eef0 7a46 	vmov.f32	s15, s12
 801a24c:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801a250:	eee8 7ae8 	vfms.f32	s15, s17, s17
 801a254:	ee17 0a90 	vmov	r0, s15
 801a258:	f7e6 f97e 	bl	8000558 <__aeabi_f2d>
 801a25c:	ee78 7a08 	vadd.f32	s15, s16, s16
 801a260:	4602      	mov	r2, r0
 801a262:	460b      	mov	r3, r1
 801a264:	ee17 0a90 	vmov	r0, s15
 801a268:	ec43 2b18 	vmov	d8, r2, r3
 801a26c:	f7e6 f974 	bl	8000558 <__aeabi_f2d>
 801a270:	eeb0 1a48 	vmov.f32	s2, s16
 801a274:	eef0 1a68 	vmov.f32	s3, s17
 801a278:	ec41 0b10 	vmov	d0, r0, r1
 801a27c:	f005 f90a 	bl	801f494 <atan2>
 801a280:	a3cf      	add	r3, pc, #828	@ (adr r3, 801a5c0 <iNemoEngine_API_Update+0x29a8>)
 801a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a286:	ec51 0b10 	vmov	r0, r1, d0
 801a28a:	f7e6 f9bd 	bl	8000608 <__aeabi_dmul>
 801a28e:	4bce      	ldr	r3, [pc, #824]	@ (801a5c8 <iNemoEngine_API_Update+0x29b0>)
 801a290:	2200      	movs	r2, #0
 801a292:	f7e6 f801 	bl	8000298 <__aeabi_dsub>
 801a296:	f7e6 fcaf 	bl	8000bf8 <__aeabi_d2f>
 801a29a:	ee08 0a10 	vmov	s16, r0
 801a29e:	f7fd be03 	b.w	8017ea8 <iNemoEngine_API_Update+0x290>
 801a2a2:	ed9f baca 	vldr	s22, [pc, #808]	@ 801a5cc <iNemoEngine_API_Update+0x29b4>
 801a2a6:	49ca      	ldr	r1, [pc, #808]	@ (801a5d0 <iNemoEngine_API_Update+0x29b8>)
 801a2a8:	9806      	ldr	r0, [sp, #24]
 801a2aa:	f7fd beba 	b.w	8018022 <iNemoEngine_API_Update+0x40a>
 801a2ae:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801a2b2:	ee17 0a90 	vmov	r0, s15
 801a2b6:	f7e6 f94f 	bl	8000558 <__aeabi_f2d>
 801a2ba:	ec41 0b10 	vmov	d0, r0, r1
 801a2be:	f005 fcc7 	bl	801fc50 <floor>
 801a2c2:	ec51 0b10 	vmov	r0, r1, d0
 801a2c6:	f7e6 fc97 	bl	8000bf8 <__aeabi_d2f>
 801a2ca:	ee0c 0a10 	vmov	s24, r0
 801a2ce:	f7fe b937 	b.w	8018540 <iNemoEngine_API_Update+0x928>
 801a2d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 801a2d6:	ee17 0a90 	vmov	r0, s15
 801a2da:	f7e6 f93d 	bl	8000558 <__aeabi_f2d>
 801a2de:	ec41 0b10 	vmov	d0, r0, r1
 801a2e2:	f005 fcb5 	bl	801fc50 <floor>
 801a2e6:	ec51 0b10 	vmov	r0, r1, d0
 801a2ea:	f7e6 fc85 	bl	8000bf8 <__aeabi_d2f>
 801a2ee:	ee08 0a10 	vmov	s16, r0
 801a2f2:	f7fe b8fa 	b.w	80184ea <iNemoEngine_API_Update+0x8d2>
 801a2f6:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801a2fa:	ee17 0a90 	vmov	r0, s15
 801a2fe:	f7e6 f92b 	bl	8000558 <__aeabi_f2d>
 801a302:	ec41 0b10 	vmov	d0, r0, r1
 801a306:	f005 fca3 	bl	801fc50 <floor>
 801a30a:	ec51 0b10 	vmov	r0, r1, d0
 801a30e:	f7e6 fc73 	bl	8000bf8 <__aeabi_d2f>
 801a312:	ee08 0a90 	vmov	s17, r0
 801a316:	f7fe b8bd 	b.w	8018494 <iNemoEngine_API_Update+0x87c>
 801a31a:	2c00      	cmp	r4, #0
 801a31c:	f47f aa59 	bne.w	80197d2 <iNemoEngine_API_Update+0x1bba>
 801a320:	f8ad 40e8 	strh.w	r4, [sp, #232]	@ 0xe8
 801a324:	f88d 40ea 	strb.w	r4, [sp, #234]	@ 0xea
 801a328:	f88d 40f1 	strb.w	r4, [sp, #241]	@ 0xf1
 801a32c:	f88d 40f3 	strb.w	r4, [sp, #243]	@ 0xf3
 801a330:	f7ff ba5c 	b.w	80197ec <iNemoEngine_API_Update+0x1bd4>
 801a334:	eddf 5aa7 	vldr	s11, [pc, #668]	@ 801a5d4 <iNemoEngine_API_Update+0x29bc>
 801a338:	ed9f 4aa7 	vldr	s8, [pc, #668]	@ 801a5d8 <iNemoEngine_API_Update+0x29c0>
 801a33c:	ed9f 6aa7 	vldr	s12, [pc, #668]	@ 801a5dc <iNemoEngine_API_Update+0x29c4>
 801a340:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 801a5e0 <iNemoEngine_API_Update+0x29c8>
 801a344:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 801a5e4 <iNemoEngine_API_Update+0x29cc>
 801a348:	f7ff b9b2 	b.w	80196b0 <iNemoEngine_API_Update+0x1a98>
 801a34c:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 801a350:	2400      	movs	r4, #0
 801a352:	461a      	mov	r2, r3
 801a354:	f7ff b89f 	b.w	8019496 <iNemoEngine_API_Update+0x187e>
 801a358:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801a35c:	eeb0 4a08 	vmov.f32	s8, #8	@ 0x40400000  3.0
 801a360:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801a364:	eee7 4a84 	vfma.f32	s9, s15, s8
 801a368:	f7ff b86b 	b.w	8019442 <iNemoEngine_API_Update+0x182a>
 801a36c:	3305      	adds	r3, #5
 801a36e:	6593      	str	r3, [r2, #88]	@ 0x58
 801a370:	f7ff ba95 	b.w	801989e <iNemoEngine_API_Update+0x1c86>
 801a374:	edd2 4a48 	vldr	s9, [r2, #288]	@ 0x120
 801a378:	eef4 4ae8 	vcmpe.f32	s9, s17
 801a37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a380:	f341 8112 	ble.w	801b5a8 <iNemoEngine_API_Update+0x3990>
 801a384:	ed92 7a32 	vldr	s14, [r2, #200]	@ 0xc8
 801a388:	eef4 8ac7 	vcmpe.f32	s17, s14
 801a38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a390:	4613      	mov	r3, r2
 801a392:	f101 8392 	bmi.w	801baba <iNemoEngine_API_Update+0x3ea2>
 801a396:	edd2 7a34 	vldr	s15, [r2, #208]	@ 0xd0
 801a39a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3a2:	f141 83a2 	bpl.w	801baea <iNemoEngine_API_Update+0x3ed2>
 801a3a6:	edd3 3a33 	vldr	s7, [r3, #204]	@ 0xcc
 801a3aa:	ed93 4a35 	vldr	s8, [r3, #212]	@ 0xd4
 801a3ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3b2:	ee34 4a63 	vsub.f32	s8, s8, s7
 801a3b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801a3ba:	ee24 7a07 	vmul.f32	s14, s8, s14
 801a3be:	ee87 fa27 	vdiv.f32	s30, s14, s15
 801a3c2:	ee3f fa23 	vadd.f32	s30, s30, s7
 801a3c6:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 801a3ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3d2:	f2c1 83a3 	blt.w	801bb1c <iNemoEngine_API_Update+0x3f04>
 801a3d6:	9b06      	ldr	r3, [sp, #24]
 801a3d8:	ed93 7a38 	vldr	s14, [r3, #224]	@ 0xe0
 801a3dc:	eef4 8ac7 	vcmpe.f32	s17, s14
 801a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3e4:	f141 86ad 	bpl.w	801c142 <iNemoEngine_API_Update+0x452a>
 801a3e8:	edd3 3a37 	vldr	s7, [r3, #220]	@ 0xdc
 801a3ec:	ed93 4a39 	vldr	s8, [r3, #228]	@ 0xe4
 801a3f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a3f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 801a3f8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801a3fc:	ee64 7a27 	vmul.f32	s15, s8, s15
 801a400:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801a404:	ee3f fa23 	vadd.f32	s30, s30, s7
 801a408:	9b06      	ldr	r3, [sp, #24]
 801a40a:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 801a40e:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a416:	f2c1 83a3 	blt.w	801bb60 <iNemoEngine_API_Update+0x3f48>
 801a41a:	9b06      	ldr	r3, [sp, #24]
 801a41c:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 801a420:	eef4 8ac7 	vcmpe.f32	s17, s14
 801a424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a428:	f141 86ca 	bpl.w	801c1c0 <iNemoEngine_API_Update+0x45a8>
 801a42c:	edd3 3a3b 	vldr	s7, [r3, #236]	@ 0xec
 801a430:	ed93 4a3d 	vldr	s8, [r3, #244]	@ 0xf4
 801a434:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a438:	ee34 4a63 	vsub.f32	s8, s8, s7
 801a43c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801a440:	ee64 7a27 	vmul.f32	s15, s8, s15
 801a444:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801a448:	ee3f fa23 	vadd.f32	s30, s30, s7
 801a44c:	9b06      	ldr	r3, [sp, #24]
 801a44e:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 801a452:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a45a:	f2c1 83a3 	blt.w	801bba4 <iNemoEngine_API_Update+0x3f8c>
 801a45e:	9b06      	ldr	r3, [sp, #24]
 801a460:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 801a464:	eef4 8ac7 	vcmpe.f32	s17, s14
 801a468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a46c:	f141 866c 	bpl.w	801c148 <iNemoEngine_API_Update+0x4530>
 801a470:	edd3 3a3f 	vldr	s7, [r3, #252]	@ 0xfc
 801a474:	ed93 4a41 	vldr	s8, [r3, #260]	@ 0x104
 801a478:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a47c:	ee34 4a63 	vsub.f32	s8, s8, s7
 801a480:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801a484:	ee64 7a27 	vmul.f32	s15, s8, s15
 801a488:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801a48c:	ee3f fa23 	vadd.f32	s30, s30, s7
 801a490:	9b06      	ldr	r3, [sp, #24]
 801a492:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 801a496:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a49e:	f2c1 83a3 	blt.w	801bbe8 <iNemoEngine_API_Update+0x3fd0>
 801a4a2:	9b06      	ldr	r3, [sp, #24]
 801a4a4:	ed93 7a44 	vldr	s14, [r3, #272]	@ 0x110
 801a4a8:	eef4 8ac7 	vcmpe.f32	s17, s14
 801a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4b0:	f141 863c 	bpl.w	801c12c <iNemoEngine_API_Update+0x4514>
 801a4b4:	edd3 3a43 	vldr	s7, [r3, #268]	@ 0x10c
 801a4b8:	ed93 4a45 	vldr	s8, [r3, #276]	@ 0x114
 801a4bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a4c0:	ee34 4a63 	vsub.f32	s8, s8, s7
 801a4c4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801a4c8:	ee64 7a27 	vmul.f32	s15, s8, s15
 801a4cc:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801a4d0:	ee3f fa23 	vadd.f32	s30, s30, s7
 801a4d4:	9b06      	ldr	r3, [sp, #24]
 801a4d6:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 801a4da:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4e2:	f6fe ae38 	blt.w	8019156 <iNemoEngine_API_Update+0x153e>
 801a4e6:	9b06      	ldr	r3, [sp, #24]
 801a4e8:	ed93 4a47 	vldr	s8, [r3, #284]	@ 0x11c
 801a4ec:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 801a4f0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 801a4f4:	ee37 7a44 	vsub.f32	s14, s14, s8
 801a4f8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801a4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a500:	ee87 faa4 	vdiv.f32	s30, s15, s9
 801a504:	ee3f fa04 	vadd.f32	s30, s30, s8
 801a508:	f7fe be25 	b.w	8019156 <iNemoEngine_API_Update+0x153e>
 801a50c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801a510:	ee17 0a90 	vmov	r0, s15
 801a514:	f7e6 f820 	bl	8000558 <__aeabi_f2d>
 801a518:	ec41 0b10 	vmov	d0, r0, r1
 801a51c:	f005 fb98 	bl	801fc50 <floor>
 801a520:	ec51 0b10 	vmov	r0, r1, d0
 801a524:	f7e6 fb68 	bl	8000bf8 <__aeabi_d2f>
 801a528:	ee08 0a90 	vmov	s17, r0
 801a52c:	f7fe b930 	b.w	8018790 <iNemoEngine_API_Update+0xb78>
 801a530:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801a534:	ee17 0a90 	vmov	r0, s15
 801a538:	f7e6 f80e 	bl	8000558 <__aeabi_f2d>
 801a53c:	ec41 0b10 	vmov	d0, r0, r1
 801a540:	f005 fb86 	bl	801fc50 <floor>
 801a544:	ec51 0b10 	vmov	r0, r1, d0
 801a548:	f7e6 fb56 	bl	8000bf8 <__aeabi_d2f>
 801a54c:	ee08 0a90 	vmov	s17, r0
 801a550:	f7fe b8b5 	b.w	80186be <iNemoEngine_API_Update+0xaa6>
 801a554:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801a558:	ee17 0a90 	vmov	r0, s15
 801a55c:	f7e5 fffc 	bl	8000558 <__aeabi_f2d>
 801a560:	ec41 0b10 	vmov	d0, r0, r1
 801a564:	f005 fb74 	bl	801fc50 <floor>
 801a568:	ec51 0b10 	vmov	r0, r1, d0
 801a56c:	f7e6 fb44 	bl	8000bf8 <__aeabi_d2f>
 801a570:	ee0c 0a10 	vmov	s24, r0
 801a574:	f7fe b878 	b.w	8018668 <iNemoEngine_API_Update+0xa50>
 801a578:	ee78 7a27 	vadd.f32	s15, s16, s15
 801a57c:	ee17 0a90 	vmov	r0, s15
 801a580:	f7e5 ffea 	bl	8000558 <__aeabi_f2d>
 801a584:	ec41 0b10 	vmov	d0, r0, r1
 801a588:	f005 fb62 	bl	801fc50 <floor>
 801a58c:	ec51 0b10 	vmov	r0, r1, d0
 801a590:	f7e6 fb32 	bl	8000bf8 <__aeabi_d2f>
 801a594:	ee08 0a10 	vmov	s16, r0
 801a598:	f7fe b83b 	b.w	8018612 <iNemoEngine_API_Update+0x9fa>
 801a59c:	ee78 7a27 	vadd.f32	s15, s16, s15
 801a5a0:	ee17 0a90 	vmov	r0, s15
 801a5a4:	f7e5 ffd8 	bl	8000558 <__aeabi_f2d>
 801a5a8:	ec41 0b10 	vmov	d0, r0, r1
 801a5ac:	f005 fb50 	bl	801fc50 <floor>
 801a5b0:	ec51 0b10 	vmov	r0, r1, d0
 801a5b4:	f7e6 fb20 	bl	8000bf8 <__aeabi_d2f>
 801a5b8:	ee08 0a10 	vmov	s16, r0
 801a5bc:	f7fe b93e 	b.w	801883c <iNemoEngine_API_Update+0xc24>
 801a5c0:	20000000 	.word	0x20000000
 801a5c4:	404ca5dc 	.word	0x404ca5dc
 801a5c8:	40568000 	.word	0x40568000
 801a5cc:	3dcccccd 	.word	0x3dcccccd
 801a5d0:	3a83126f 	.word	0x3a83126f
 801a5d4:	3c75c28f 	.word	0x3c75c28f
 801a5d8:	391d4951 	.word	0x391d4951
 801a5dc:	383cbe62 	.word	0x383cbe62
 801a5e0:	469c3e00 	.word	0x469c3e00
 801a5e4:	43168000 	.word	0x43168000
 801a5e8:	3d088889 	.word	0x3d088889
 801a5ec:	3e4ccccd 	.word	0x3e4ccccd
 801a5f0:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801a5f4:	ee17 0a90 	vmov	r0, s15
 801a5f8:	f7e5 ffae 	bl	8000558 <__aeabi_f2d>
 801a5fc:	ec41 0b10 	vmov	d0, r0, r1
 801a600:	f005 fb26 	bl	801fc50 <floor>
 801a604:	ec51 0b10 	vmov	r0, r1, d0
 801a608:	f7e6 faf6 	bl	8000bf8 <__aeabi_d2f>
 801a60c:	ee0c 0a10 	vmov	s24, r0
 801a610:	f7fe b8e9 	b.w	80187e6 <iNemoEngine_API_Update+0xbce>
 801a614:	2a00      	cmp	r2, #0
 801a616:	f43f a910 	beq.w	801983a <iNemoEngine_API_Update+0x1c22>
 801a61a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a61e:	ee39 9a47 	vsub.f32	s18, s18, s14
 801a622:	eef0 7ac9 	vabs.f32	s15, s18
 801a626:	ee29 9a09 	vmul.f32	s18, s18, s18
 801a62a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a632:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801a636:	bfb8      	it	lt
 801a638:	eef0 7a46 	vmovlt.f32	s15, s12
 801a63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a640:	edcd 7a8d 	vstr	s15, [sp, #564]	@ 0x234
 801a644:	f77f a900 	ble.w	8019848 <iNemoEngine_API_Update+0x1c30>
 801a648:	eddd 7a86 	vldr	s15, [sp, #536]	@ 0x218
 801a64c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801a650:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a658:	f77f a8f6 	ble.w	8019848 <iNemoEngine_API_Update+0x1c30>
 801a65c:	ee67 7a89 	vmul.f32	s15, s15, s18
 801a660:	edcd 7a86 	vstr	s15, [sp, #536]	@ 0x218
 801a664:	eddd 7a87 	vldr	s15, [sp, #540]	@ 0x21c
 801a668:	ee67 7a89 	vmul.f32	s15, s15, s18
 801a66c:	edcd 7a87 	vstr	s15, [sp, #540]	@ 0x21c
 801a670:	eddd 7a88 	vldr	s15, [sp, #544]	@ 0x220
 801a674:	ee27 9a89 	vmul.f32	s18, s15, s18
 801a678:	ed8d 9a88 	vstr	s18, [sp, #544]	@ 0x220
 801a67c:	f7ff b8e4 	b.w	8019848 <iNemoEngine_API_Update+0x1c30>
 801a680:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 801a684:	2a01      	cmp	r2, #1
 801a686:	f000 877b 	beq.w	801b580 <iNemoEngine_API_Update+0x3968>
 801a68a:	2b02      	cmp	r3, #2
 801a68c:	f040 8778 	bne.w	801b580 <iNemoEngine_API_Update+0x3968>
 801a690:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 801a694:	9a06      	ldr	r2, [sp, #24]
 801a696:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 801a69a:	f240 1301 	movw	r3, #257	@ 0x101
 801a69e:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	f88d 30f0 	strb.w	r3, [sp, #240]	@ 0xf0
 801a6a8:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 801a6ac:	ed92 6a64 	vldr	s12, [r2, #400]	@ 0x190
 801a6b0:	ed8d 7a3d 	vstr	s14, [sp, #244]	@ 0xf4
 801a6b4:	eecb 5a27 	vdiv.f32	s11, s22, s15
 801a6b8:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 801a6bc:	edcd 5a3e 	vstr	s11, [sp, #248]	@ 0xf8
 801a6c0:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 801a6c4:	eeb4 5a00 	vmov.f32	s10, #64	@ 0x3e000000  0.125
 801a6c8:	ee26 6a05 	vmul.f32	s12, s12, s10
 801a6cc:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 801a6d0:	eeb4 6ae8 	vcmpe.f32	s12, s17
 801a6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d8:	f280 87d8 	bge.w	801b68c <iNemoEngine_API_Update+0x3a74>
 801a6dc:	ed9d 6a18 	vldr	s12, [sp, #96]	@ 0x60
 801a6e0:	eeb4 dac6 	vcmpe.f32	s26, s12
 801a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6e8:	f341 83a4 	ble.w	801be34 <iNemoEngine_API_Update+0x421c>
 801a6ec:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 801a6f0:	eeb4 6acb 	vcmpe.f32	s12, s22
 801a6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6f8:	f341 839c 	ble.w	801be34 <iNemoEngine_API_Update+0x421c>
 801a6fc:	ed9d 6a17 	vldr	s12, [sp, #92]	@ 0x5c
 801a700:	eeb4 6aed 	vcmpe.f32	s12, s27
 801a704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a708:	f341 8394 	ble.w	801be34 <iNemoEngine_API_Update+0x421c>
 801a70c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801a710:	eeb4 8ac6 	vcmpe.f32	s16, s12
 801a714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a718:	f141 838c 	bpl.w	801be34 <iNemoEngine_API_Update+0x421c>
 801a71c:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a720:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 801a724:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a728:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a730:	f141 8380 	bpl.w	801be34 <iNemoEngine_API_Update+0x421c>
 801a734:	2300      	movs	r3, #0
 801a736:	f8a2 31a6 	strh.w	r3, [r2, #422]	@ 0x1a6
 801a73a:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 801a73e:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 801a742:	2a00      	cmp	r2, #0
 801a744:	f040 87c7 	bne.w	801b6d6 <iNemoEngine_API_Update+0x3abe>
 801a748:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a74a:	a840      	add	r0, sp, #256	@ 0x100
 801a74c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a750:	4613      	mov	r3, r2
 801a752:	edd2 7a00 	vldr	s15, [r2]
 801a756:	3101      	adds	r1, #1
 801a758:	330c      	adds	r3, #12
 801a75a:	3204      	adds	r2, #4
 801a75c:	461c      	mov	r4, r3
 801a75e:	ed94 7a00 	vldr	s14, [r4]
 801a762:	330c      	adds	r3, #12
 801a764:	4598      	cmp	r8, r3
 801a766:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a76a:	d1f7      	bne.n	801a75c <iNemoEngine_API_Update+0x2b44>
 801a76c:	2902      	cmp	r1, #2
 801a76e:	ece0 7a01 	vstmia	r0!, {s15}
 801a772:	f108 0804 	add.w	r8, r8, #4
 801a776:	d1eb      	bne.n	801a750 <iNemoEngine_API_Update+0x2b38>
 801a778:	ed5f 7a65 	vldr	s15, [pc, #-404]	@ 801a5e8 <iNemoEngine_API_Update+0x29d0>
 801a77c:	9b06      	ldr	r3, [sp, #24]
 801a77e:	eddd 4a40 	vldr	s9, [sp, #256]	@ 0x100
 801a782:	ed9d 5a41 	vldr	s10, [sp, #260]	@ 0x104
 801a786:	eddd 5a42 	vldr	s11, [sp, #264]	@ 0x108
 801a78a:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 801a78c:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 801a790:	ee64 4aa7 	vmul.f32	s9, s9, s15
 801a794:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a798:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801a79c:	f503 71b2 	add.w	r1, r3, #356	@ 0x164
 801a7a0:	4602      	mov	r2, r0
 801a7a2:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 801a7a6:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 801a7aa:	ed93 7ad6 	vldr	s14, [r3, #856]	@ 0x358
 801a7ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b6:	f103 030c 	add.w	r3, r3, #12
 801a7ba:	bf88      	it	hi
 801a7bc:	eef0 7a47 	vmovhi.f32	s15, s14
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d1f2      	bne.n	801a7aa <iNemoEngine_API_Update+0x2b92>
 801a7c4:	1d1a      	adds	r2, r3, #4
 801a7c6:	4291      	cmp	r1, r2
 801a7c8:	ece4 7a01 	vstmia	r4!, {s15}
 801a7cc:	d1e9      	bne.n	801a7a2 <iNemoEngine_API_Update+0x2b8a>
 801a7ce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a7d0:	ed9d 4a3d 	vldr	s8, [sp, #244]	@ 0xf4
 801a7d4:	edd3 7a00 	vldr	s15, [r3]
 801a7d8:	ed9d 7a3e 	vldr	s14, [sp, #248]	@ 0xf8
 801a7dc:	ed9d 6a3f 	vldr	s12, [sp, #252]	@ 0xfc
 801a7e0:	9b06      	ldr	r3, [sp, #24]
 801a7e2:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 801a7e6:	785b      	ldrb	r3, [r3, #1]
 801a7e8:	ee97 7a85 	vfnms.f32	s14, s15, s10
 801a7ec:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 801a7f0:	eef0 4a47 	vmov.f32	s9, s14
 801a7f4:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 801a7f8:	ed8d 7a41 	vstr	s14, [sp, #260]	@ 0x104
 801a7fc:	ed8d 6a42 	vstr	s12, [sp, #264]	@ 0x108
 801a800:	b13b      	cbz	r3, 801a812 <iNemoEngine_API_Update+0x2bfa>
 801a802:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801a806:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a80e:	f101 83e1 	bmi.w	801bfd4 <iNemoEngine_API_Update+0x43bc>
 801a812:	9b06      	ldr	r3, [sp, #24]
 801a814:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
 801a818:	2a1e      	cmp	r2, #30
 801a81a:	f001 843c 	beq.w	801c096 <iNemoEngine_API_Update+0x447e>
 801a81e:	1c53      	adds	r3, r2, #1
 801a820:	2aff      	cmp	r2, #255	@ 0xff
 801a822:	9906      	ldr	r1, [sp, #24]
 801a824:	bf14      	ite	ne
 801a826:	b2db      	uxtbne	r3, r3
 801a828:	23ff      	moveq	r3, #255	@ 0xff
 801a82a:	2200      	movs	r2, #0
 801a82c:	f881 31a1 	strb.w	r3, [r1, #417]	@ 0x1a1
 801a830:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801a834:	464b      	mov	r3, r9
 801a836:	f7ff bb46 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801a83a:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 801a5ec <iNemoEngine_API_Update+0x29d4>
 801a83e:	4603      	mov	r3, r0
 801a840:	f7fd bc03 	b.w	801804a <iNemoEngine_API_Update+0x432>
 801a844:	2b00      	cmp	r3, #0
 801a846:	f43e afe0 	beq.w	801980a <iNemoEngine_API_Update+0x1bf2>
 801a84a:	f89d 30e8 	ldrb.w	r3, [sp, #232]	@ 0xe8
 801a84e:	2b01      	cmp	r3, #1
 801a850:	d002      	beq.n	801a858 <iNemoEngine_API_Update+0x2c40>
 801a852:	2c01      	cmp	r4, #1
 801a854:	f47e afe2 	bne.w	801981c <iNemoEngine_API_Update+0x1c04>
 801a858:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c
 801a85c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801a860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a864:	bfb8      	it	lt
 801a866:	eeb0 5a67 	vmovlt.f32	s10, s15
 801a86a:	ed8d 5a83 	vstr	s10, [sp, #524]	@ 0x20c
 801a86e:	ed8d 5a84 	vstr	s10, [sp, #528]	@ 0x210
 801a872:	ed8d 5a85 	vstr	s10, [sp, #532]	@ 0x214
 801a876:	f7fe bfd1 	b.w	801981c <iNemoEngine_API_Update+0x1c04>
 801a87a:	9b06      	ldr	r3, [sp, #24]
 801a87c:	49c6      	ldr	r1, [pc, #792]	@ (801ab98 <iNemoEngine_API_Update+0x2f80>)
 801a87e:	ed93 ba05 	vldr	s22, [r3, #20]
 801a882:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801a886:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a88a:	4618      	mov	r0, r3
 801a88c:	f7fd bbc9 	b.w	8018022 <iNemoEngine_API_Update+0x40a>
 801a890:	9b06      	ldr	r3, [sp, #24]
 801a892:	49c2      	ldr	r1, [pc, #776]	@ (801ab9c <iNemoEngine_API_Update+0x2f84>)
 801a894:	ed93 ba05 	vldr	s22, [r3, #20]
 801a898:	4618      	mov	r0, r3
 801a89a:	f7fd bbc2 	b.w	8018022 <iNemoEngine_API_Update+0x40a>
 801a89e:	4611      	mov	r1, r2
 801a8a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801a8a2:	2a00      	cmp	r2, #0
 801a8a4:	dd0c      	ble.n	801a8c0 <iNemoEngine_API_Update+0x2ca8>
 801a8a6:	ed9d 7a03 	vldr	s14, [sp, #12]
 801a8aa:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 801a8ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b6:	dd03      	ble.n	801a8c0 <iNemoEngine_API_Update+0x2ca8>
 801a8b8:	3a01      	subs	r2, #1
 801a8ba:	65ca      	str	r2, [r1, #92]	@ 0x5c
 801a8bc:	f7fe bfef 	b.w	801989e <iNemoEngine_API_Update+0x1c86>
 801a8c0:	ed9d 7a16 	vldr	s14, [sp, #88]	@ 0x58
 801a8c4:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801a8c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a8cc:	eeb4 bac7 	vcmpe.f32	s22, s14
 801a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d4:	f57e afe3 	bpl.w	801989e <iNemoEngine_API_Update+0x1c86>
 801a8d8:	ed9d 7a17 	vldr	s14, [sp, #92]	@ 0x5c
 801a8dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a8e0:	eef4 dae7 	vcmpe.f32	s27, s15
 801a8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e8:	f57e afd9 	bpl.w	801989e <iNemoEngine_API_Update+0x1c86>
 801a8ec:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 801a8f0:	ed9d 7a18 	vldr	s14, [sp, #96]	@ 0x60
 801a8f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8fc:	f341 8492 	ble.w	801c224 <iNemoEngine_API_Update+0x460c>
 801a900:	9a06      	ldr	r2, [sp, #24]
 801a902:	3303      	adds	r3, #3
 801a904:	e434      	b.n	801a170 <iNemoEngine_API_Update+0x2558>
 801a906:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 801aba0 <iNemoEngine_API_Update+0x2f88>
 801a90a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a912:	f57e ae7b 	bpl.w	801960c <iNemoEngine_API_Update+0x19f4>
 801a916:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 801aba4 <iNemoEngine_API_Update+0x2f8c>
 801a91a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a922:	f280 80c9 	bge.w	801aab8 <iNemoEngine_API_Update+0x2ea0>
 801a926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a92a:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 801aba8 <iNemoEngine_API_Update+0x2f90>
 801a92e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a936:	f280 80d5 	bge.w	801aae4 <iNemoEngine_API_Update+0x2ecc>
 801a93a:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 801abac <iNemoEngine_API_Update+0x2f94>
 801a93e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a946:	f280 80e3 	bge.w	801ab10 <iNemoEngine_API_Update+0x2ef8>
 801a94a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801abb0 <iNemoEngine_API_Update+0x2f98>
 801a94e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a956:	f280 80f1 	bge.w	801ab3c <iNemoEngine_API_Update+0x2f24>
 801a95a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 801abb4 <iNemoEngine_API_Update+0x2f9c>
 801a95e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a966:	f280 80ff 	bge.w	801ab68 <iNemoEngine_API_Update+0x2f50>
 801a96a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801a96e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a976:	db0d      	blt.n	801a994 <iNemoEngine_API_Update+0x2d7c>
 801a978:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801a97c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 801abb8 <iNemoEngine_API_Update+0x2fa0>
 801a980:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801a984:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801a988:	ee66 6a87 	vmul.f32	s13, s13, s14
 801a98c:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 801abbc <iNemoEngine_API_Update+0x2fa4>
 801a990:	eea6 7a86 	vfma.f32	s14, s13, s12
 801a994:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 801abc0 <iNemoEngine_API_Update+0x2fa8>
 801a998:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9a0:	f141 82fa 	bpl.w	801bf98 <iNemoEngine_API_Update+0x4380>
 801a9a4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 801aba0 <iNemoEngine_API_Update+0x2f88>
 801a9a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9b0:	f2c1 82fa 	blt.w	801bfa8 <iNemoEngine_API_Update+0x4390>
 801a9b4:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 801aba4 <iNemoEngine_API_Update+0x2f8c>
 801a9b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9c0:	f141 8296 	bpl.w	801bef0 <iNemoEngine_API_Update+0x42d8>
 801a9c4:	ed9f 6a76 	vldr	s12, [pc, #472]	@ 801aba0 <iNemoEngine_API_Update+0x2f88>
 801a9c8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 801abc4 <iNemoEngine_API_Update+0x2fac>
 801a9cc:	eddf 5a7e 	vldr	s11, [pc, #504]	@ 801abc8 <iNemoEngine_API_Update+0x2fb0>
 801a9d0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801a9d4:	ee26 6a26 	vmul.f32	s12, s12, s13
 801a9d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a9dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a9e0:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 801aba8 <iNemoEngine_API_Update+0x2f90>
 801a9e4:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9ec:	f2c1 8296 	blt.w	801bf1c <iNemoEngine_API_Update+0x4304>
 801a9f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801abac <iNemoEngine_API_Update+0x2f94>
 801a9f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9fc:	f141 8296 	bpl.w	801bf2c <iNemoEngine_API_Update+0x4314>
 801aa00:	ed9f 6a69 	vldr	s12, [pc, #420]	@ 801aba8 <iNemoEngine_API_Update+0x2f90>
 801aa04:	eddf 6a71 	vldr	s13, [pc, #452]	@ 801abcc <iNemoEngine_API_Update+0x2fb4>
 801aa08:	eddf 5a71 	vldr	s11, [pc, #452]	@ 801abd0 <iNemoEngine_API_Update+0x2fb8>
 801aa0c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801aa10:	ee26 6a26 	vmul.f32	s12, s12, s13
 801aa14:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801abd4 <iNemoEngine_API_Update+0x2fbc>
 801aa18:	eee6 6a25 	vfma.f32	s13, s12, s11
 801aa1c:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 801abb0 <iNemoEngine_API_Update+0x2f98>
 801aa20:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa28:	f2c1 8296 	blt.w	801bf58 <iNemoEngine_API_Update+0x4340>
 801aa2c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 801abb4 <iNemoEngine_API_Update+0x2f9c>
 801aa30:	eef4 7ae6 	vcmpe.f32	s15, s13
 801aa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa38:	f141 8296 	bpl.w	801bf68 <iNemoEngine_API_Update+0x4350>
 801aa3c:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 801abb0 <iNemoEngine_API_Update+0x2f98>
 801aa40:	eddf 6a65 	vldr	s13, [pc, #404]	@ 801abd8 <iNemoEngine_API_Update+0x2fc0>
 801aa44:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801aa48:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 801aa4c:	ee26 6a26 	vmul.f32	s12, s12, s13
 801aa50:	eef7 6a0c 	vmov.f32	s13, #124	@ 0x3fe00000  1.750
 801aa54:	eee6 6a25 	vfma.f32	s13, s12, s11
 801aa58:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801aa5c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa64:	db0d      	blt.n	801aa82 <iNemoEngine_API_Update+0x2e6a>
 801aa66:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801aa6a:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 801abdc <iNemoEngine_API_Update+0x2fc4>
 801aa6e:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801aa72:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 801aa76:	ee26 6a26 	vmul.f32	s12, s12, s13
 801aa7a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801abe0 <iNemoEngine_API_Update+0x2fc8>
 801aa7e:	eee6 6a25 	vfma.f32	s13, s12, s11
 801aa82:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801aa86:	ee37 6a06 	vadd.f32	s12, s14, s12
 801aa8a:	eeb0 5a00 	vmov.f32	s10, #0	@ 0x40000000  2.0
 801aa8e:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801aa92:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801aba4 <iNemoEngine_API_Update+0x2f8c>
 801aa96:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 801aba0 <iNemoEngine_API_Update+0x2f88>
 801aa9a:	eef4 5ac6 	vcmpe.f32	s11, s12
 801aa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaa2:	bfb8      	it	lt
 801aaa4:	eef0 5a46 	vmovlt.f32	s11, s12
 801aaa8:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 801abe4 <iNemoEngine_API_Update+0x2fcc>
 801aaac:	ee25 4a84 	vmul.f32	s8, s11, s8
 801aab0:	ee25 6a86 	vmul.f32	s12, s11, s12
 801aab4:	f7fe bdfc 	b.w	80196b0 <iNemoEngine_API_Update+0x1a98>
 801aab8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801aba8 <iNemoEngine_API_Update+0x2f90>
 801aabc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aac4:	d50e      	bpl.n	801aae4 <iNemoEngine_API_Update+0x2ecc>
 801aac6:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801aba4 <iNemoEngine_API_Update+0x2f8c>
 801aaca:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801abe8 <iNemoEngine_API_Update+0x2fd0>
 801aace:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 801abec <iNemoEngine_API_Update+0x2fd4>
 801aad2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801aad6:	ee66 6a87 	vmul.f32	s13, s13, s14
 801aada:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801abf0 <iNemoEngine_API_Update+0x2fd8>
 801aade:	eea6 7a86 	vfma.f32	s14, s13, s12
 801aae2:	e72a      	b.n	801a93a <iNemoEngine_API_Update+0x2d22>
 801aae4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801abac <iNemoEngine_API_Update+0x2f94>
 801aae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaf0:	d50e      	bpl.n	801ab10 <iNemoEngine_API_Update+0x2ef8>
 801aaf2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 801aba8 <iNemoEngine_API_Update+0x2f90>
 801aaf6:	ed9f 6a36 	vldr	s12, [pc, #216]	@ 801abd0 <iNemoEngine_API_Update+0x2fb8>
 801aafa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801aafe:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801ab02:	ee66 6a87 	vmul.f32	s13, s13, s14
 801ab06:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801ab0a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801ab0e:	e71c      	b.n	801a94a <iNemoEngine_API_Update+0x2d32>
 801ab10:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801abb0 <iNemoEngine_API_Update+0x2f98>
 801ab14:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab1c:	d50e      	bpl.n	801ab3c <iNemoEngine_API_Update+0x2f24>
 801ab1e:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801abac <iNemoEngine_API_Update+0x2f94>
 801ab22:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ab26:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801ab2a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801ab2e:	eeb3 6a04 	vmov.f32	s12, #52	@ 0x41a00000  20.0
 801ab32:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801ab36:	eea6 7a86 	vfma.f32	s14, s13, s12
 801ab3a:	e70e      	b.n	801a95a <iNemoEngine_API_Update+0x2d42>
 801ab3c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 801abb4 <iNemoEngine_API_Update+0x2f9c>
 801ab40:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab48:	d50e      	bpl.n	801ab68 <iNemoEngine_API_Update+0x2f50>
 801ab4a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 801abb0 <iNemoEngine_API_Update+0x2f98>
 801ab4e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 801abf4 <iNemoEngine_API_Update+0x2fdc>
 801ab52:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ab56:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 801ab5a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801ab5e:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 801ab62:	eea6 7a86 	vfma.f32	s14, s13, s12
 801ab66:	e700      	b.n	801a96a <iNemoEngine_API_Update+0x2d52>
 801ab68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ab6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab74:	f57f af00 	bpl.w	801a978 <iNemoEngine_API_Update+0x2d60>
 801ab78:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801abb4 <iNemoEngine_API_Update+0x2f9c>
 801ab7c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 801abf8 <iNemoEngine_API_Update+0x2fe0>
 801ab80:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 801abfc <iNemoEngine_API_Update+0x2fe4>
 801ab84:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ab88:	ee66 6a87 	vmul.f32	s13, s13, s14
 801ab8c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 801ac00 <iNemoEngine_API_Update+0x2fe8>
 801ab90:	eea6 7a86 	vfma.f32	s14, s13, s12
 801ab94:	e6fe      	b.n	801a994 <iNemoEngine_API_Update+0x2d7c>
 801ab96:	bf00      	nop
 801ab98:	3727c5ac 	.word	0x3727c5ac
 801ab9c:	3ac49ba6 	.word	0x3ac49ba6
 801aba0:	3c23d70a 	.word	0x3c23d70a
 801aba4:	3c75c28f 	.word	0x3c75c28f
 801aba8:	3cf5c28f 	.word	0x3cf5c28f
 801abac:	3d4ccccd 	.word	0x3d4ccccd
 801abb0:	3dcccccd 	.word	0x3dcccccd
 801abb4:	3e4ccccd 	.word	0x3e4ccccd
 801abb8:	46979000 	.word	0x46979000
 801abbc:	4415c000 	.word	0x4415c000
 801abc0:	3ba3d70a 	.word	0x3ba3d70a
 801abc4:	3d4cccc0 	.word	0x3d4cccc0
 801abc8:	43480000 	.word	0x43480000
 801abcc:	3eb33334 	.word	0x3eb33334
 801abd0:	4247ffff 	.word	0x4247ffff
 801abd4:	3f933333 	.word	0x3f933333
 801abd8:	410c0000 	.word	0x410c0000
 801abdc:	42c80000 	.word	0x42c80000
 801abe0:	424a0000 	.word	0x424a0000
 801abe4:	3b449ba6 	.word	0x3b449ba6
 801abe8:	3ecccccc 	.word	0x3ecccccc
 801abec:	42855556 	.word	0x42855556
 801abf0:	3fcccccd 	.word	0x3fcccccd
 801abf4:	42d40000 	.word	0x42d40000
 801abf8:	43f00000 	.word	0x43f00000
 801abfc:	40555555 	.word	0x40555555
 801ac00:	42ee0000 	.word	0x42ee0000
 801ac04:	4615      	mov	r5, r2
 801ac06:	f205 47b4 	addw	r7, r5, #1204	@ 0x4b4
 801ac0a:	49d7      	ldr	r1, [pc, #860]	@ (801af68 <iNemoEngine_API_Update+0x3350>)
 801ac0c:	4ad7      	ldr	r2, [pc, #860]	@ (801af6c <iNemoEngine_API_Update+0x3354>)
 801ac0e:	4bd8      	ldr	r3, [pc, #864]	@ (801af70 <iNemoEngine_API_Update+0x3358>)
 801ac10:	2000      	movs	r0, #0
 801ac12:	f885 0318 	strb.w	r0, [r5, #792]	@ 0x318
 801ac16:	f205 6824 	addw	r8, r5, #1572	@ 0x624
 801ac1a:	6039      	str	r1, [r7, #0]
 801ac1c:	f205 7194 	addw	r1, r5, #1940	@ 0x794
 801ac20:	f8c8 2000 	str.w	r2, [r8]
 801ac24:	600b      	str	r3, [r1, #0]
 801ac26:	f895 64b1 	ldrb.w	r6, [r5, #1201]	@ 0x4b1
 801ac2a:	911b      	str	r1, [sp, #108]	@ 0x6c
 801ac2c:	2e00      	cmp	r6, #0
 801ac2e:	f001 8297 	beq.w	801c160 <iNemoEngine_API_Update+0x4548>
 801ac32:	eddf 7ad0 	vldr	s15, [pc, #832]	@ 801af74 <iNemoEngine_API_Update+0x335c>
 801ac36:	ee68 faa7 	vmul.f32	s31, s17, s15
 801ac3a:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 801ac3e:	ee28 fa27 	vmul.f32	s30, s16, s15
 801ac42:	ee6c da27 	vmul.f32	s27, s24, s15
 801ac46:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801ac4a:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 801ac4e:	ee17 0a90 	vmov	r0, s15
 801ac52:	f7e5 fc81 	bl	8000558 <__aeabi_f2d>
 801ac56:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801ac5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ac5e:	ee17 0a90 	vmov	r0, s15
 801ac62:	f7e5 fc79 	bl	8000558 <__aeabi_f2d>
 801ac66:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801ac6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801ac6e:	ee17 0a90 	vmov	r0, s15
 801ac72:	f7e5 fc71 	bl	8000558 <__aeabi_f2d>
 801ac76:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801ac7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801ac7e:	ee17 0a90 	vmov	r0, s15
 801ac82:	f7e5 fc69 	bl	8000558 <__aeabi_f2d>
 801ac86:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801ac8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ac8e:	ee17 0a90 	vmov	r0, s15
 801ac92:	f7e5 fc61 	bl	8000558 <__aeabi_f2d>
 801ac96:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801ac9a:	4602      	mov	r2, r0
 801ac9c:	460b      	mov	r3, r1
 801ac9e:	ee17 0a90 	vmov	r0, s15
 801aca2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801aca6:	f7e5 fc57 	bl	8000558 <__aeabi_f2d>
 801acaa:	9b06      	ldr	r3, [sp, #24]
 801acac:	ed9f bab8 	vldr	s22, [pc, #736]	@ 801af90 <iNemoEngine_API_Update+0x3378>
 801acb0:	eef0 7aef 	vabs.f32	s15, s31
 801acb4:	edcd 7a03 	vstr	s15, [sp, #12]
 801acb8:	eef0 7acf 	vabs.f32	s15, s30
 801acbc:	f503 6597 	add.w	r5, r3, #1208	@ 0x4b8
 801acc0:	edcd 7a04 	vstr	s15, [sp, #16]
 801acc4:	230c      	movs	r3, #12
 801acc6:	eef0 7aed 	vabs.f32	s15, s27
 801acca:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801acce:	fb13 5606 	smlabb	r6, r3, r6, r5
 801acd2:	edcd 7a05 	vstr	s15, [sp, #20]
 801acd6:	46aa      	mov	sl, r5
 801acd8:	e060      	b.n	801ad9c <iNemoEngine_API_Update+0x3184>
 801acda:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 801af78 <iNemoEngine_API_Update+0x3360>
 801acde:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ace6:	f280 8162 	bge.w	801afae <iNemoEngine_API_Update+0x3396>
 801acea:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801af7c <iNemoEngine_API_Update+0x3364>
 801acee:	eef4 8ae7 	vcmpe.f32	s17, s15
 801acf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acf6:	f300 816c 	bgt.w	801afd2 <iNemoEngine_API_Update+0x33ba>
 801acfa:	ed9d 0b08 	vldr	d0, [sp, #32]
 801acfe:	f004 ff2b 	bl	801fb58 <ceil>
 801ad02:	ec51 0b10 	vmov	r0, r1, d0
 801ad06:	f7e5 ff77 	bl	8000bf8 <__aeabi_d2f>
 801ad0a:	eddd 7a04 	vldr	s15, [sp, #16]
 801ad0e:	f8ca 0000 	str.w	r0, [sl]
 801ad12:	eef4 7acb 	vcmpe.f32	s15, s22
 801ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad1a:	f140 8121 	bpl.w	801af60 <iNemoEngine_API_Update+0x3348>
 801ad1e:	eddf 7a96 	vldr	s15, [pc, #600]	@ 801af78 <iNemoEngine_API_Update+0x3360>
 801ad22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ad26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad2a:	f280 8137 	bge.w	801af9c <iNemoEngine_API_Update+0x3384>
 801ad2e:	eddf 7a93 	vldr	s15, [pc, #588]	@ 801af7c <iNemoEngine_API_Update+0x3364>
 801ad32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ad36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad3a:	f300 8257 	bgt.w	801b1ec <iNemoEngine_API_Update+0x35d4>
 801ad3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ad42:	f004 ff09 	bl	801fb58 <ceil>
 801ad46:	ec51 0b10 	vmov	r0, r1, d0
 801ad4a:	f7e5 ff55 	bl	8000bf8 <__aeabi_d2f>
 801ad4e:	eddd 7a05 	vldr	s15, [sp, #20]
 801ad52:	f8ca 0004 	str.w	r0, [sl, #4]
 801ad56:	eef4 7acb 	vcmpe.f32	s15, s22
 801ad5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad5e:	d527      	bpl.n	801adb0 <iNemoEngine_API_Update+0x3198>
 801ad60:	eddf 7a85 	vldr	s15, [pc, #532]	@ 801af78 <iNemoEngine_API_Update+0x3360>
 801ad64:	eeb4 cae7 	vcmpe.f32	s24, s15
 801ad68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad6c:	f280 8128 	bge.w	801afc0 <iNemoEngine_API_Update+0x33a8>
 801ad70:	eddf 7a82 	vldr	s15, [pc, #520]	@ 801af7c <iNemoEngine_API_Update+0x3364>
 801ad74:	eeb4 cae7 	vcmpe.f32	s24, s15
 801ad78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad7c:	f300 812b 	bgt.w	801afd6 <iNemoEngine_API_Update+0x33be>
 801ad80:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 801ad84:	f004 fee8 	bl	801fb58 <ceil>
 801ad88:	ec51 0b10 	vmov	r0, r1, d0
 801ad8c:	f7e5 ff34 	bl	8000bf8 <__aeabi_d2f>
 801ad90:	f8ca 0008 	str.w	r0, [sl, #8]
 801ad94:	f10a 0a0c 	add.w	sl, sl, #12
 801ad98:	45b2      	cmp	sl, r6
 801ad9a:	d011      	beq.n	801adc0 <iNemoEngine_API_Update+0x31a8>
 801ad9c:	eddd 7a03 	vldr	s15, [sp, #12]
 801ada0:	eef4 7acb 	vcmpe.f32	s15, s22
 801ada4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada8:	d497      	bmi.n	801acda <iNemoEngine_API_Update+0x30c2>
 801adaa:	ee1f 0a90 	vmov	r0, s31
 801adae:	e7ac      	b.n	801ad0a <iNemoEngine_API_Update+0x30f2>
 801adb0:	ee1d 0a90 	vmov	r0, s27
 801adb4:	f10a 0a0c 	add.w	sl, sl, #12
 801adb8:	f84a 0c04 	str.w	r0, [sl, #-4]
 801adbc:	45b2      	cmp	sl, r6
 801adbe:	d1ed      	bne.n	801ad9c <iNemoEngine_API_Update+0x3184>
 801adc0:	9b06      	ldr	r3, [sp, #24]
 801adc2:	f893 9621 	ldrb.w	r9, [r3, #1569]	@ 0x621
 801adc6:	f503 66c5 	add.w	r6, r3, #1576	@ 0x628
 801adca:	f1b9 0f00 	cmp.w	r9, #0
 801adce:	f000 8114 	beq.w	801affa <iNemoEngine_API_Update+0x33e2>
 801add2:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 801af80 <iNemoEngine_API_Update+0x3368>
 801add6:	ee6a faa7 	vmul.f32	s31, s21, s15
 801adda:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 801adde:	ee2a fa27 	vmul.f32	s30, s20, s15
 801ade2:	ee69 daa7 	vmul.f32	s27, s19, s15
 801ade6:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801adea:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801adee:	ee17 0a90 	vmov	r0, s15
 801adf2:	f7e5 fbb1 	bl	8000558 <__aeabi_f2d>
 801adf6:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801adfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801adfe:	ee17 0a90 	vmov	r0, s15
 801ae02:	f7e5 fba9 	bl	8000558 <__aeabi_f2d>
 801ae06:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801ae0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801ae0e:	ee17 0a90 	vmov	r0, s15
 801ae12:	f7e5 fba1 	bl	8000558 <__aeabi_f2d>
 801ae16:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801ae1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801ae1e:	ee17 0a90 	vmov	r0, s15
 801ae22:	f7e5 fb99 	bl	8000558 <__aeabi_f2d>
 801ae26:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801ae2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ae2e:	ee17 0a90 	vmov	r0, s15
 801ae32:	f7e5 fb91 	bl	8000558 <__aeabi_f2d>
 801ae36:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801ae3a:	4602      	mov	r2, r0
 801ae3c:	460b      	mov	r3, r1
 801ae3e:	ee17 0a90 	vmov	r0, s15
 801ae42:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801ae46:	f7e5 fb87 	bl	8000558 <__aeabi_f2d>
 801ae4a:	eef0 7aef 	vabs.f32	s15, s31
 801ae4e:	9b06      	ldr	r3, [sp, #24]
 801ae50:	edcd 7a03 	vstr	s15, [sp, #12]
 801ae54:	eef0 7acf 	vabs.f32	s15, s30
 801ae58:	edcd 7a04 	vstr	s15, [sp, #16]
 801ae5c:	eef0 7aed 	vabs.f32	s15, s27
 801ae60:	f503 66c5 	add.w	r6, r3, #1576	@ 0x628
 801ae64:	edcd 7a05 	vstr	s15, [sp, #20]
 801ae68:	230c      	movs	r3, #12
 801ae6a:	eef0 7a6c 	vmov.f32	s15, s25
 801ae6e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801ae72:	eef0 ca48 	vmov.f32	s25, s16
 801ae76:	ed9f ba46 	vldr	s22, [pc, #280]	@ 801af90 <iNemoEngine_API_Update+0x3378>
 801ae7a:	eeb0 8a4d 	vmov.f32	s16, s26
 801ae7e:	fb13 6909 	smlabb	r9, r3, r9, r6
 801ae82:	46b3      	mov	fp, r6
 801ae84:	eeb0 da67 	vmov.f32	s26, s15
 801ae88:	e060      	b.n	801af4c <iNemoEngine_API_Update+0x3334>
 801ae8a:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 801af84 <iNemoEngine_API_Update+0x336c>
 801ae8e:	eef4 aae7 	vcmpe.f32	s21, s15
 801ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae96:	f280 8197 	bge.w	801b1c8 <iNemoEngine_API_Update+0x35b0>
 801ae9a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801af88 <iNemoEngine_API_Update+0x3370>
 801ae9e:	eef4 aae7 	vcmpe.f32	s21, s15
 801aea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea6:	f300 81a3 	bgt.w	801b1f0 <iNemoEngine_API_Update+0x35d8>
 801aeaa:	ed9d 0b08 	vldr	d0, [sp, #32]
 801aeae:	f004 fe53 	bl	801fb58 <ceil>
 801aeb2:	ec51 0b10 	vmov	r0, r1, d0
 801aeb6:	f7e5 fe9f 	bl	8000bf8 <__aeabi_d2f>
 801aeba:	eddd 7a04 	vldr	s15, [sp, #16]
 801aebe:	f8cb 0000 	str.w	r0, [fp]
 801aec2:	eef4 7acb 	vcmpe.f32	s15, s22
 801aec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeca:	f140 8171 	bpl.w	801b1b0 <iNemoEngine_API_Update+0x3598>
 801aece:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801af84 <iNemoEngine_API_Update+0x336c>
 801aed2:	eeb4 aae7 	vcmpe.f32	s20, s15
 801aed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeda:	f280 816c 	bge.w	801b1b6 <iNemoEngine_API_Update+0x359e>
 801aede:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 801af88 <iNemoEngine_API_Update+0x3370>
 801aee2:	eeb4 aae7 	vcmpe.f32	s20, s15
 801aee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeea:	f300 81bd 	bgt.w	801b268 <iNemoEngine_API_Update+0x3650>
 801aeee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801aef2:	f004 fe31 	bl	801fb58 <ceil>
 801aef6:	ec51 0b10 	vmov	r0, r1, d0
 801aefa:	f7e5 fe7d 	bl	8000bf8 <__aeabi_d2f>
 801aefe:	eddd 7a05 	vldr	s15, [sp, #20]
 801af02:	f8cb 0004 	str.w	r0, [fp, #4]
 801af06:	eef4 7acb 	vcmpe.f32	s15, s22
 801af0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af0e:	d564      	bpl.n	801afda <iNemoEngine_API_Update+0x33c2>
 801af10:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 801af84 <iNemoEngine_API_Update+0x336c>
 801af14:	eef4 9ae7 	vcmpe.f32	s19, s15
 801af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af1c:	f280 815d 	bge.w	801b1da <iNemoEngine_API_Update+0x35c2>
 801af20:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801af88 <iNemoEngine_API_Update+0x3370>
 801af24:	eef4 9ae7 	vcmpe.f32	s19, s15
 801af28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af2c:	f300 8162 	bgt.w	801b1f4 <iNemoEngine_API_Update+0x35dc>
 801af30:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 801af34:	f004 fe10 	bl	801fb58 <ceil>
 801af38:	ec51 0b10 	vmov	r0, r1, d0
 801af3c:	f7e5 fe5c 	bl	8000bf8 <__aeabi_d2f>
 801af40:	f8cb 0008 	str.w	r0, [fp, #8]
 801af44:	f10b 0b0c 	add.w	fp, fp, #12
 801af48:	45cb      	cmp	fp, r9
 801af4a:	d04e      	beq.n	801afea <iNemoEngine_API_Update+0x33d2>
 801af4c:	eddd 7a03 	vldr	s15, [sp, #12]
 801af50:	eef4 7acb 	vcmpe.f32	s15, s22
 801af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af58:	d497      	bmi.n	801ae8a <iNemoEngine_API_Update+0x3272>
 801af5a:	ee1f 0a90 	vmov	r0, s31
 801af5e:	e7ac      	b.n	801aeba <iNemoEngine_API_Update+0x32a2>
 801af60:	ee1f 0a10 	vmov	r0, s30
 801af64:	e6f3      	b.n	801ad4e <iNemoEngine_API_Update+0x3136>
 801af66:	bf00      	nop
 801af68:	3a7001e0 	.word	0x3a7001e0
 801af6c:	3a000100 	.word	0x3a000100
 801af70:	3a8c0118 	.word	0x3a8c0118
 801af74:	44888777 	.word	0x44888777
 801af78:	39f001e1 	.word	0x39f001e1
 801af7c:	b9f001e1 	.word	0xb9f001e1
 801af80:	44fffe00 	.word	0x44fffe00
 801af84:	39800100 	.word	0x39800100
 801af88:	b9800100 	.word	0xb9800100
 801af8c:	446a0ccd 	.word	0x446a0ccd
 801af90:	4b000000 	.word	0x4b000000
 801af94:	3cfaad3b 	.word	0x3cfaad3b
 801af98:	bcfaad3b 	.word	0xbcfaad3b
 801af9c:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801afa0:	f004 fe56 	bl	801fc50 <floor>
 801afa4:	ec51 0b10 	vmov	r0, r1, d0
 801afa8:	f7e5 fe26 	bl	8000bf8 <__aeabi_d2f>
 801afac:	e6cf      	b.n	801ad4e <iNemoEngine_API_Update+0x3136>
 801afae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801afb2:	f004 fe4d 	bl	801fc50 <floor>
 801afb6:	ec51 0b10 	vmov	r0, r1, d0
 801afba:	f7e5 fe1d 	bl	8000bf8 <__aeabi_d2f>
 801afbe:	e6a4      	b.n	801ad0a <iNemoEngine_API_Update+0x30f2>
 801afc0:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801afc4:	f004 fe44 	bl	801fc50 <floor>
 801afc8:	ec51 0b10 	vmov	r0, r1, d0
 801afcc:	f7e5 fe14 	bl	8000bf8 <__aeabi_d2f>
 801afd0:	e6de      	b.n	801ad90 <iNemoEngine_API_Update+0x3178>
 801afd2:	4648      	mov	r0, r9
 801afd4:	e699      	b.n	801ad0a <iNemoEngine_API_Update+0x30f2>
 801afd6:	4648      	mov	r0, r9
 801afd8:	e6da      	b.n	801ad90 <iNemoEngine_API_Update+0x3178>
 801afda:	ee1d 0a90 	vmov	r0, s27
 801afde:	f10b 0b0c 	add.w	fp, fp, #12
 801afe2:	f84b 0c04 	str.w	r0, [fp, #-4]
 801afe6:	45cb      	cmp	fp, r9
 801afe8:	d1b0      	bne.n	801af4c <iNemoEngine_API_Update+0x3334>
 801afea:	eef0 7a4d 	vmov.f32	s15, s26
 801afee:	eeb0 da48 	vmov.f32	s26, s16
 801aff2:	eeb0 8a6c 	vmov.f32	s16, s25
 801aff6:	eef0 ca67 	vmov.f32	s25, s15
 801affa:	9b06      	ldr	r3, [sp, #24]
 801affc:	f893 9791 	ldrb.w	r9, [r3, #1937]	@ 0x791
 801b000:	f1b9 0f00 	cmp.w	r9, #0
 801b004:	f001 80a7 	beq.w	801c156 <iNemoEngine_API_Update+0x453e>
 801b008:	ed5f 7a20 	vldr	s15, [pc, #-128]	@ 801af8c <iNemoEngine_API_Update+0x3374>
 801b00c:	ee6e fa27 	vmul.f32	s31, s28, s15
 801b010:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 801b014:	ee2e faa7 	vmul.f32	s30, s29, s15
 801b018:	ee6b daa7 	vmul.f32	s27, s23, s15
 801b01c:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801b020:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801b024:	ee17 0a90 	vmov	r0, s15
 801b028:	f7e5 fa96 	bl	8000558 <__aeabi_f2d>
 801b02c:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801b030:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b034:	ee17 0a90 	vmov	r0, s15
 801b038:	f7e5 fa8e 	bl	8000558 <__aeabi_f2d>
 801b03c:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801b040:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801b044:	ee17 0a90 	vmov	r0, s15
 801b048:	f7e5 fa86 	bl	8000558 <__aeabi_f2d>
 801b04c:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801b050:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801b054:	ee17 0a90 	vmov	r0, s15
 801b058:	f7e5 fa7e 	bl	8000558 <__aeabi_f2d>
 801b05c:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801b060:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b064:	ee17 0a90 	vmov	r0, s15
 801b068:	f7e5 fa76 	bl	8000558 <__aeabi_f2d>
 801b06c:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801b070:	4602      	mov	r2, r0
 801b072:	460b      	mov	r3, r1
 801b074:	ee17 0a90 	vmov	r0, s15
 801b078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801b07c:	f7e5 fa6c 	bl	8000558 <__aeabi_f2d>
 801b080:	eef0 7aef 	vabs.f32	s15, s31
 801b084:	9b06      	ldr	r3, [sp, #24]
 801b086:	edcd 7a03 	vstr	s15, [sp, #12]
 801b08a:	eef0 7acf 	vabs.f32	s15, s30
 801b08e:	edcd 7a04 	vstr	s15, [sp, #16]
 801b092:	eef0 7aed 	vabs.f32	s15, s27
 801b096:	f503 62f3 	add.w	r2, r3, #1944	@ 0x798
 801b09a:	eeb0 7a48 	vmov.f32	s14, s16
 801b09e:	230c      	movs	r3, #12
 801b0a0:	edcd 7a05 	vstr	s15, [sp, #20]
 801b0a4:	eef0 7a6c 	vmov.f32	s15, s25
 801b0a8:	eeb0 8a4d 	vmov.f32	s16, s26
 801b0ac:	eef0 ca4a 	vmov.f32	s25, s20
 801b0b0:	eeb0 da6a 	vmov.f32	s26, s21
 801b0b4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801b0b8:	eef0 aa69 	vmov.f32	s21, s19
 801b0bc:	ed1f ba4c 	vldr	s22, [pc, #-304]	@ 801af90 <iNemoEngine_API_Update+0x3378>
 801b0c0:	9215      	str	r2, [sp, #84]	@ 0x54
 801b0c2:	fb13 2909 	smlabb	r9, r3, r9, r2
 801b0c6:	4693      	mov	fp, r2
 801b0c8:	eeb0 aa67 	vmov.f32	s20, s15
 801b0cc:	eef0 9a47 	vmov.f32	s19, s14
 801b0d0:	e064      	b.n	801b19c <iNemoEngine_API_Update+0x3584>
 801b0d2:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 801b0d6:	ed1f 7a51 	vldr	s14, [pc, #-324]	@ 801af94 <iNemoEngine_API_Update+0x337c>
 801b0da:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0e2:	f280 80af 	bge.w	801b244 <iNemoEngine_API_Update+0x362c>
 801b0e6:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 801af98 <iNemoEngine_API_Update+0x3380>
 801b0ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0f2:	f300 80bb 	bgt.w	801b26c <iNemoEngine_API_Update+0x3654>
 801b0f6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801b0fa:	f004 fd2d 	bl	801fb58 <ceil>
 801b0fe:	ec51 0b10 	vmov	r0, r1, d0
 801b102:	f7e5 fd79 	bl	8000bf8 <__aeabi_d2f>
 801b106:	eddd 7a04 	vldr	s15, [sp, #16]
 801b10a:	f8cb 0000 	str.w	r0, [fp]
 801b10e:	eef4 7acb 	vcmpe.f32	s15, s22
 801b112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b116:	f140 8089 	bpl.w	801b22c <iNemoEngine_API_Update+0x3614>
 801b11a:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 801b11e:	ed1f 7a63 	vldr	s14, [pc, #-396]	@ 801af94 <iNemoEngine_API_Update+0x337c>
 801b122:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b12a:	f280 8082 	bge.w	801b232 <iNemoEngine_API_Update+0x361a>
 801b12e:	ed1f 7a66 	vldr	s14, [pc, #-408]	@ 801af98 <iNemoEngine_API_Update+0x3380>
 801b132:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b13a:	f300 809b 	bgt.w	801b274 <iNemoEngine_API_Update+0x365c>
 801b13e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b142:	f004 fd09 	bl	801fb58 <ceil>
 801b146:	ec51 0b10 	vmov	r0, r1, d0
 801b14a:	f7e5 fd55 	bl	8000bf8 <__aeabi_d2f>
 801b14e:	eddd 7a05 	vldr	s15, [sp, #20]
 801b152:	f8cb 0004 	str.w	r0, [fp, #4]
 801b156:	eef4 7acb 	vcmpe.f32	s15, s22
 801b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b15e:	d54b      	bpl.n	801b1f8 <iNemoEngine_API_Update+0x35e0>
 801b160:	eddd 7a18 	vldr	s15, [sp, #96]	@ 0x60
 801b164:	ed1f 7a75 	vldr	s14, [pc, #-468]	@ 801af94 <iNemoEngine_API_Update+0x337c>
 801b168:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b170:	da71      	bge.n	801b256 <iNemoEngine_API_Update+0x363e>
 801b172:	ed1f 7a77 	vldr	s14, [pc, #-476]	@ 801af98 <iNemoEngine_API_Update+0x3380>
 801b176:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b17e:	dc77      	bgt.n	801b270 <iNemoEngine_API_Update+0x3658>
 801b180:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 801b184:	f004 fce8 	bl	801fb58 <ceil>
 801b188:	ec51 0b10 	vmov	r0, r1, d0
 801b18c:	f7e5 fd34 	bl	8000bf8 <__aeabi_d2f>
 801b190:	f8cb 0008 	str.w	r0, [fp, #8]
 801b194:	f10b 0b0c 	add.w	fp, fp, #12
 801b198:	45cb      	cmp	fp, r9
 801b19a:	d035      	beq.n	801b208 <iNemoEngine_API_Update+0x35f0>
 801b19c:	eddd 7a03 	vldr	s15, [sp, #12]
 801b1a0:	eef4 7acb 	vcmpe.f32	s15, s22
 801b1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1a8:	d493      	bmi.n	801b0d2 <iNemoEngine_API_Update+0x34ba>
 801b1aa:	ee1f 0a90 	vmov	r0, s31
 801b1ae:	e7aa      	b.n	801b106 <iNemoEngine_API_Update+0x34ee>
 801b1b0:	ee1f 0a10 	vmov	r0, s30
 801b1b4:	e6a3      	b.n	801aefe <iNemoEngine_API_Update+0x32e6>
 801b1b6:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801b1ba:	f004 fd49 	bl	801fc50 <floor>
 801b1be:	ec51 0b10 	vmov	r0, r1, d0
 801b1c2:	f7e5 fd19 	bl	8000bf8 <__aeabi_d2f>
 801b1c6:	e69a      	b.n	801aefe <iNemoEngine_API_Update+0x32e6>
 801b1c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801b1cc:	f004 fd40 	bl	801fc50 <floor>
 801b1d0:	ec51 0b10 	vmov	r0, r1, d0
 801b1d4:	f7e5 fd10 	bl	8000bf8 <__aeabi_d2f>
 801b1d8:	e66f      	b.n	801aeba <iNemoEngine_API_Update+0x32a2>
 801b1da:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801b1de:	f004 fd37 	bl	801fc50 <floor>
 801b1e2:	ec51 0b10 	vmov	r0, r1, d0
 801b1e6:	f7e5 fd07 	bl	8000bf8 <__aeabi_d2f>
 801b1ea:	e6a9      	b.n	801af40 <iNemoEngine_API_Update+0x3328>
 801b1ec:	4648      	mov	r0, r9
 801b1ee:	e5ae      	b.n	801ad4e <iNemoEngine_API_Update+0x3136>
 801b1f0:	4650      	mov	r0, sl
 801b1f2:	e662      	b.n	801aeba <iNemoEngine_API_Update+0x32a2>
 801b1f4:	4650      	mov	r0, sl
 801b1f6:	e6a3      	b.n	801af40 <iNemoEngine_API_Update+0x3328>
 801b1f8:	ee1d 0a90 	vmov	r0, s27
 801b1fc:	f10b 0b0c 	add.w	fp, fp, #12
 801b200:	f84b 0c04 	str.w	r0, [fp, #-4]
 801b204:	45cb      	cmp	fp, r9
 801b206:	d1c9      	bne.n	801b19c <iNemoEngine_API_Update+0x3584>
 801b208:	eeb0 7a69 	vmov.f32	s14, s19
 801b20c:	eef0 7a4a 	vmov.f32	s15, s20
 801b210:	eef0 9a6a 	vmov.f32	s19, s21
 801b214:	eeb0 aa6c 	vmov.f32	s20, s25
 801b218:	eef0 aa4d 	vmov.f32	s21, s26
 801b21c:	eef0 ca67 	vmov.f32	s25, s15
 801b220:	eeb0 da48 	vmov.f32	s26, s16
 801b224:	eeb0 8a47 	vmov.f32	s16, s14
 801b228:	f7fd b820 	b.w	801826c <iNemoEngine_API_Update+0x654>
 801b22c:	ee1f 0a10 	vmov	r0, s30
 801b230:	e78d      	b.n	801b14e <iNemoEngine_API_Update+0x3536>
 801b232:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801b236:	f004 fd0b 	bl	801fc50 <floor>
 801b23a:	ec51 0b10 	vmov	r0, r1, d0
 801b23e:	f7e5 fcdb 	bl	8000bf8 <__aeabi_d2f>
 801b242:	e784      	b.n	801b14e <iNemoEngine_API_Update+0x3536>
 801b244:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801b248:	f004 fd02 	bl	801fc50 <floor>
 801b24c:	ec51 0b10 	vmov	r0, r1, d0
 801b250:	f7e5 fcd2 	bl	8000bf8 <__aeabi_d2f>
 801b254:	e757      	b.n	801b106 <iNemoEngine_API_Update+0x34ee>
 801b256:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801b25a:	f004 fcf9 	bl	801fc50 <floor>
 801b25e:	ec51 0b10 	vmov	r0, r1, d0
 801b262:	f7e5 fcc9 	bl	8000bf8 <__aeabi_d2f>
 801b266:	e793      	b.n	801b190 <iNemoEngine_API_Update+0x3578>
 801b268:	4650      	mov	r0, sl
 801b26a:	e648      	b.n	801aefe <iNemoEngine_API_Update+0x32e6>
 801b26c:	4650      	mov	r0, sl
 801b26e:	e74a      	b.n	801b106 <iNemoEngine_API_Update+0x34ee>
 801b270:	4650      	mov	r0, sl
 801b272:	e78d      	b.n	801b190 <iNemoEngine_API_Update+0x3578>
 801b274:	4650      	mov	r0, sl
 801b276:	e76a      	b.n	801b14e <iNemoEngine_API_Update+0x3536>
 801b278:	4616      	mov	r6, r2
 801b27a:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 801b27e:	4be1      	ldr	r3, [pc, #900]	@ (801b604 <iNemoEngine_API_Update+0x39ec>)
 801b280:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 801b284:	2100      	movs	r1, #0
 801b286:	f8c2 51cc 	str.w	r5, [r2, #460]	@ 0x1cc
 801b28a:	f8c2 51d0 	str.w	r5, [r2, #464]	@ 0x1d0
 801b28e:	f882 11ac 	strb.w	r1, [r2, #428]	@ 0x1ac
 801b292:	f506 70ea 	add.w	r0, r6, #468	@ 0x1d4
 801b296:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801b29a:	f002 f970 	bl	801d57e <memset>
 801b29e:	ed96 6a02 	vldr	s12, [r6, #8]
 801b2a2:	eddf 7ad9 	vldr	s15, [pc, #868]	@ 801b608 <iNemoEngine_API_Update+0x39f0>
 801b2a6:	eddf 5ad9 	vldr	s11, [pc, #868]	@ 801b60c <iNemoEngine_API_Update+0x39f4>
 801b2aa:	ed9f 5ad9 	vldr	s10, [pc, #868]	@ 801b610 <iNemoEngine_API_Update+0x39f8>
 801b2ae:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
 801b2b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	edc6 7a34 	vstr	s15, [r6, #208]	@ 0xd0
 801b2bc:	eddf 7ad5 	vldr	s15, [pc, #852]	@ 801b614 <iNemoEngine_API_Update+0x39fc>
 801b2c0:	f8c6 30c0 	str.w	r3, [r6, #192]	@ 0xc0
 801b2c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b2c8:	f8c6 3128 	str.w	r3, [r6, #296]	@ 0x128
 801b2cc:	edc6 7a4e 	vstr	s15, [r6, #312]	@ 0x138
 801b2d0:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 801b618 <iNemoEngine_API_Update+0x3a00>
 801b2d4:	4bd1      	ldr	r3, [pc, #836]	@ (801b61c <iNemoEngine_API_Update+0x3a04>)
 801b2d6:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
 801b2da:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b2de:	f8c6 30e4 	str.w	r3, [r6, #228]	@ 0xe4
 801b2e2:	edc6 7a50 	vstr	s15, [r6, #320]	@ 0x140
 801b2e6:	eddf 7ace 	vldr	s15, [pc, #824]	@ 801b620 <iNemoEngine_API_Update+0x3a08>
 801b2ea:	4bce      	ldr	r3, [pc, #824]	@ (801b624 <iNemoEngine_API_Update+0x3a0c>)
 801b2ec:	f8c6 30d4 	str.w	r3, [r6, #212]	@ 0xd4
 801b2f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b2f4:	4bcc      	ldr	r3, [pc, #816]	@ (801b628 <iNemoEngine_API_Update+0x3a10>)
 801b2f6:	edc6 7a38 	vstr	s15, [r6, #224]	@ 0xe0
 801b2fa:	eddf 7acc 	vldr	s15, [pc, #816]	@ 801b62c <iNemoEngine_API_Update+0x3a14>
 801b2fe:	f8c6 313c 	str.w	r3, [r6, #316]	@ 0x13c
 801b302:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b306:	4bca      	ldr	r3, [pc, #808]	@ (801b630 <iNemoEngine_API_Update+0x3a18>)
 801b308:	edc6 7a52 	vstr	s15, [r6, #328]	@ 0x148
 801b30c:	eddf 7ac9 	vldr	s15, [pc, #804]	@ 801b634 <iNemoEngine_API_Update+0x3a1c>
 801b310:	f8c6 3144 	str.w	r3, [r6, #324]	@ 0x144
 801b314:	4bc8      	ldr	r3, [pc, #800]	@ (801b638 <iNemoEngine_API_Update+0x3a20>)
 801b316:	f8c6 314c 	str.w	r3, [r6, #332]	@ 0x14c
 801b31a:	4631      	mov	r1, r6
 801b31c:	ee66 5a25 	vmul.f32	s11, s12, s11
 801b320:	ee26 5a05 	vmul.f32	s10, s12, s10
 801b324:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b328:	4bc4      	ldr	r3, [pc, #784]	@ (801b63c <iNemoEngine_API_Update+0x3a24>)
 801b32a:	f8c6 30ec 	str.w	r3, [r6, #236]	@ 0xec
 801b32e:	4bc4      	ldr	r3, [pc, #784]	@ (801b640 <iNemoEngine_API_Update+0x3a28>)
 801b330:	f8c6 512c 	str.w	r5, [r6, #300]	@ 0x12c
 801b334:	f8c6 50cc 	str.w	r5, [r6, #204]	@ 0xcc
 801b338:	f8c6 5134 	str.w	r5, [r6, #308]	@ 0x134
 801b33c:	edc6 7a3a 	vstr	s15, [r6, #232]	@ 0xe8
 801b340:	edc6 5a32 	vstr	s11, [r6, #200]	@ 0xc8
 801b344:	edc6 5a4c 	vstr	s11, [r6, #304]	@ 0x130
 801b348:	ed86 5a36 	vstr	s10, [r6, #216]	@ 0xd8
 801b34c:	f8c1 31d4 	str.w	r3, [r1, #468]	@ 0x1d4
 801b350:	f8c1 31fc 	str.w	r3, [r1, #508]	@ 0x1fc
 801b354:	f8c1 3224 	str.w	r3, [r1, #548]	@ 0x224
 801b358:	f8c1 324c 	str.w	r3, [r1, #588]	@ 0x24c
 801b35c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
 801b360:	f8c1 329c 	str.w	r3, [r1, #668]	@ 0x29c
 801b364:	f8c1 32c4 	str.w	r3, [r1, #708]	@ 0x2c4
 801b368:	f8c1 32ec 	str.w	r3, [r1, #748]	@ 0x2ec
 801b36c:	f8c1 3314 	str.w	r3, [r1, #788]	@ 0x314
 801b370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801b374:	ed81 5a54 	vstr	s10, [r1, #336]	@ 0x150
 801b378:	eddf 3ab2 	vldr	s7, [pc, #712]	@ 801b644 <iNemoEngine_API_Update+0x3a2c>
 801b37c:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 801b648 <iNemoEngine_API_Update+0x3a30>
 801b380:	f8c1 317c 	str.w	r3, [r1, #380]	@ 0x17c
 801b384:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
 801b388:	f8c1 3124 	str.w	r3, [r1, #292]	@ 0x124
 801b38c:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 801b64c <iNemoEngine_API_Update+0x3a34>
 801b390:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 801b650 <iNemoEngine_API_Update+0x3a38>
 801b394:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 801b654 <iNemoEngine_API_Update+0x3a3c>
 801b398:	eddf 4aaf 	vldr	s9, [pc, #700]	@ 801b658 <iNemoEngine_API_Update+0x3a40>
 801b39c:	4aaf      	ldr	r2, [pc, #700]	@ (801b65c <iNemoEngine_API_Update+0x3a44>)
 801b39e:	f8df c2dc 	ldr.w	ip, [pc, #732]	@ 801b67c <iNemoEngine_API_Update+0x3a64>
 801b3a2:	4faf      	ldr	r7, [pc, #700]	@ (801b660 <iNemoEngine_API_Update+0x3a48>)
 801b3a4:	4eaf      	ldr	r6, [pc, #700]	@ (801b664 <iNemoEngine_API_Update+0x3a4c>)
 801b3a6:	4db0      	ldr	r5, [pc, #704]	@ (801b668 <iNemoEngine_API_Update+0x3a50>)
 801b3a8:	48b0      	ldr	r0, [pc, #704]	@ (801b66c <iNemoEngine_API_Update+0x3a54>)
 801b3aa:	f8df e2d4 	ldr.w	lr, [pc, #724]	@ 801b680 <iNemoEngine_API_Update+0x3a68>
 801b3ae:	edc1 3a3d 	vstr	s7, [r1, #244]	@ 0xf4
 801b3b2:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 801b3b6:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 801b3ba:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
 801b3be:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801b3c2:	ee66 6a26 	vmul.f32	s13, s12, s13
 801b3c6:	ee26 7a07 	vmul.f32	s14, s12, s14
 801b3ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 801b3ce:	ee66 2a23 	vmul.f32	s5, s12, s7
 801b3d2:	ee26 3a02 	vmul.f32	s6, s12, s4
 801b3d6:	f8c1 3114 	str.w	r3, [r1, #276]	@ 0x114
 801b3da:	ee66 4a24 	vmul.f32	s9, s12, s9
 801b3de:	4ba4      	ldr	r3, [pc, #656]	@ (801b670 <iNemoEngine_API_Update+0x3a58>)
 801b3e0:	f8c1 3184 	str.w	r3, [r1, #388]	@ 0x184
 801b3e4:	ee66 1a04 	vmul.f32	s3, s12, s8
 801b3e8:	4ba2      	ldr	r3, [pc, #648]	@ (801b674 <iNemoEngine_API_Update+0x3a5c>)
 801b3ea:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
 801b3ee:	f8c1 c15c 	str.w	ip, [r1, #348]	@ 0x15c
 801b3f2:	f8c1 70fc 	str.w	r7, [r1, #252]	@ 0xfc
 801b3f6:	f8c1 6164 	str.w	r6, [r1, #356]	@ 0x164
 801b3fa:	f8c1 516c 	str.w	r5, [r1, #364]	@ 0x16c
 801b3fe:	f8c1 0174 	str.w	r0, [r1, #372]	@ 0x174
 801b402:	edc1 1a46 	vstr	s3, [r1, #280]	@ 0x118
 801b406:	edc1 4a60 	vstr	s9, [r1, #384]	@ 0x180
 801b40a:	f8c1 e19c 	str.w	lr, [r1, #412]	@ 0x19c
 801b40e:	ed81 2a66 	vstr	s4, [r1, #408]	@ 0x198
 801b412:	ed81 4a65 	vstr	s8, [r1, #404]	@ 0x194
 801b416:	f8c1 2154 	str.w	r2, [r1, #340]	@ 0x154
 801b41a:	f8c1 210c 	str.w	r2, [r1, #268]	@ 0x10c
 801b41e:	edc1 6a3c 	vstr	s13, [r1, #240]	@ 0xf0
 801b422:	edc1 6a56 	vstr	s13, [r1, #344]	@ 0x158
 801b426:	ed81 7a3e 	vstr	s14, [r1, #248]	@ 0xf8
 801b42a:	ed81 7a58 	vstr	s14, [r1, #352]	@ 0x160
 801b42e:	edc1 7a40 	vstr	s15, [r1, #256]	@ 0x100
 801b432:	edc1 7a5a 	vstr	s15, [r1, #360]	@ 0x168
 801b436:	edc1 2a42 	vstr	s5, [r1, #264]	@ 0x108
 801b43a:	edc1 2a5c 	vstr	s5, [r1, #368]	@ 0x170
 801b43e:	ed81 3a44 	vstr	s6, [r1, #272]	@ 0x110
 801b442:	ed81 3a5e 	vstr	s6, [r1, #376]	@ 0x178
 801b446:	ed81 6a48 	vstr	s12, [r1, #288]	@ 0x120
 801b44a:	ed81 6a62 	vstr	s12, [r1, #392]	@ 0x188
 801b44e:	edc1 5a64 	vstr	s11, [r1, #400]	@ 0x190
 801b452:	784b      	ldrb	r3, [r1, #1]
 801b454:	b18b      	cbz	r3, 801b47a <iNemoEngine_API_Update+0x3862>
 801b456:	f501 6214 	add.w	r2, r1, #2368	@ 0x940
 801b45a:	9225      	str	r2, [sp, #148]	@ 0x94
 801b45c:	f601 1348 	addw	r3, r1, #2376	@ 0x948
 801b460:	f601 1244 	addw	r2, r1, #2372	@ 0x944
 801b464:	9226      	str	r2, [sp, #152]	@ 0x98
 801b466:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b468:	9a06      	ldr	r2, [sp, #24]
 801b46a:	2300      	movs	r3, #0
 801b46c:	7053      	strb	r3, [r2, #1]
 801b46e:	f7fc bee8 	b.w	8018242 <iNemoEngine_API_Update+0x62a>
 801b472:	ed93 ca4b 	vldr	s24, [r3, #300]	@ 0x12c
 801b476:	f7fd bfc0 	b.w	80193fa <iNemoEngine_API_Update+0x17e2>
 801b47a:	9a06      	ldr	r2, [sp, #24]
 801b47c:	f502 6314 	add.w	r3, r2, #2368	@ 0x940
 801b480:	f602 1144 	addw	r1, r2, #2372	@ 0x944
 801b484:	f602 1048 	addw	r0, r2, #2376	@ 0x948
 801b488:	9325      	str	r3, [sp, #148]	@ 0x94
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
 801b490:	680b      	ldr	r3, [r1, #0]
 801b492:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	9126      	str	r1, [sp, #152]	@ 0x98
 801b49a:	9027      	str	r0, [sp, #156]	@ 0x9c
 801b49c:	f8c2 31c4 	str.w	r3, [r2, #452]	@ 0x1c4
 801b4a0:	e7e2      	b.n	801b468 <iNemoEngine_API_Update+0x3850>
 801b4a2:	f205 47b4 	addw	r7, r5, #1204	@ 0x4b4
 801b4a6:	ed97 0a00 	vldr	s0, [r7]
 801b4aa:	f505 6097 	add.w	r0, r5, #1208	@ 0x4b8
 801b4ae:	f7fa ff43 	bl	8016338 <dataDerivative5>
 801b4b2:	f205 6824 	addw	r8, r5, #1572	@ 0x624
 801b4b6:	eef0 3a40 	vmov.f32	s7, s0
 801b4ba:	f505 60c5 	add.w	r0, r5, #1576	@ 0x628
 801b4be:	ed98 0a00 	vldr	s0, [r8]
 801b4c2:	f7fa ff39 	bl	8016338 <dataDerivative5>
 801b4c6:	f205 7394 	addw	r3, r5, #1940	@ 0x794
 801b4ca:	eeb0 3a40 	vmov.f32	s6, s0
 801b4ce:	f505 60f3 	add.w	r0, r5, #1944	@ 0x798
 801b4d2:	ed93 0a00 	vldr	s0, [r3]
 801b4d6:	f7fa ff2f 	bl	8016338 <dataDerivative5>
 801b4da:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	@ 0x976
 801b4de:	ee07 3a90 	vmov	s15, r3
 801b4e2:	3301      	adds	r3, #1
 801b4e4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801b4e8:	ee07 3a90 	vmov	s15, r3
 801b4ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b4f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b4f4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801b4f8:	f605 106c 	addw	r0, r5, #2412	@ 0x96c
 801b4fc:	f605 1168 	addw	r1, r5, #2408	@ 0x968
 801b500:	f505 6217 	add.w	r2, r5, #2416	@ 0x970
 801b504:	b21b      	sxth	r3, r3
 801b506:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801b50a:	ed90 7a00 	vldr	s14, [r0]
 801b50e:	ed91 5a00 	vldr	s10, [r1]
 801b512:	eef0 7a63 	vmov.f32	s15, s7
 801b516:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b51a:	eeb0 7a43 	vmov.f32	s14, s6
 801b51e:	eea5 7a85 	vfma.f32	s14, s11, s10
 801b522:	ed92 5a00 	vldr	s10, [r2]
 801b526:	eef0 6a40 	vmov.f32	s13, s0
 801b52a:	eee5 6a85 	vfma.f32	s13, s11, s10
 801b52e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b532:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b536:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b53a:	edc0 7a00 	vstr	s15, [r0]
 801b53e:	ed81 7a00 	vstr	s14, [r1]
 801b542:	edc2 6a00 	vstr	s13, [r2]
 801b546:	f8a5 3976 	strh.w	r3, [r5, #2422]	@ 0x976
 801b54a:	f47c ab8d 	bne.w	8017c68 <iNemoEngine_API_Update+0x50>
 801b54e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801b552:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b556:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b55a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b55e:	2300      	movs	r3, #0
 801b560:	ed85 7a07 	vstr	s14, [r5, #28]
 801b564:	edc5 6a08 	vstr	s13, [r5, #32]
 801b568:	edc5 7a06 	vstr	s15, [r5, #24]
 801b56c:	6003      	str	r3, [r0, #0]
 801b56e:	600b      	str	r3, [r1, #0]
 801b570:	6013      	str	r3, [r2, #0]
 801b572:	2300      	movs	r3, #0
 801b574:	f8a5 3976 	strh.w	r3, [r5, #2422]	@ 0x976
 801b578:	f885 3978 	strb.w	r3, [r5, #2424]	@ 0x978
 801b57c:	f7fc bb74 	b.w	8017c68 <iNemoEngine_API_Update+0x50>
 801b580:	9906      	ldr	r1, [sp, #24]
 801b582:	f8d1 21bc 	ldr.w	r2, [r1, #444]	@ 0x1bc
 801b586:	9295      	str	r2, [sp, #596]	@ 0x254
 801b588:	f8d1 21c0 	ldr.w	r2, [r1, #448]	@ 0x1c0
 801b58c:	9296      	str	r2, [sp, #600]	@ 0x258
 801b58e:	f8d1 21c4 	ldr.w	r2, [r1, #452]	@ 0x1c4
 801b592:	9297      	str	r2, [sp, #604]	@ 0x25c
 801b594:	2200      	movs	r2, #0
 801b596:	464b      	mov	r3, r9
 801b598:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801b59c:	f881 21a0 	strb.w	r2, [r1, #416]	@ 0x1a0
 801b5a0:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801b5a4:	f7fe bc8f 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801b5a8:	ed92 fa49 	vldr	s30, [r2, #292]	@ 0x124
 801b5ac:	4613      	mov	r3, r2
 801b5ae:	f7fd bdd2 	b.w	8019156 <iNemoEngine_API_Update+0x153e>
 801b5b2:	ed93 ca63 	vldr	s24, [r3, #396]	@ 0x18c
 801b5b6:	f7fd bf20 	b.w	80193fa <iNemoEngine_API_Update+0x17e2>
 801b5ba:	eddf 8a2f 	vldr	s17, [pc, #188]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5be:	f7fd b87e 	b.w	80186be <iNemoEngine_API_Update+0xaa6>
 801b5c2:	ed9f ca2d 	vldr	s24, [pc, #180]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5c6:	f7fd b90e 	b.w	80187e6 <iNemoEngine_API_Update+0xbce>
 801b5ca:	ed9f 8a2b 	vldr	s16, [pc, #172]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5ce:	f7fc bf8c 	b.w	80184ea <iNemoEngine_API_Update+0x8d2>
 801b5d2:	eddf 8a29 	vldr	s17, [pc, #164]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5d6:	f7fc bf5d 	b.w	8018494 <iNemoEngine_API_Update+0x87c>
 801b5da:	ed9f 8a27 	vldr	s16, [pc, #156]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5de:	f7fd b92d 	b.w	801883c <iNemoEngine_API_Update+0xc24>
 801b5e2:	ed9f ca25 	vldr	s24, [pc, #148]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5e6:	f7fd b83f 	b.w	8018668 <iNemoEngine_API_Update+0xa50>
 801b5ea:	ed9f ca23 	vldr	s24, [pc, #140]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5ee:	f7fc bfa7 	b.w	8018540 <iNemoEngine_API_Update+0x928>
 801b5f2:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5f6:	f7fd b80c 	b.w	8018612 <iNemoEngine_API_Update+0x9fa>
 801b5fa:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 801b678 <iNemoEngine_API_Update+0x3a60>
 801b5fe:	f7fd b8c7 	b.w	8018790 <iNemoEngine_API_Update+0xb78>
 801b602:	bf00      	nop
 801b604:	bf666666 	.word	0xbf666666
 801b608:	3d072b02 	.word	0x3d072b02
 801b60c:	3ca3d70a 	.word	0x3ca3d70a
 801b610:	3d4ccccd 	.word	0x3d4ccccd
 801b614:	3cb43958 	.word	0x3cb43958
 801b618:	3cf5c28f 	.word	0x3cf5c28f
 801b61c:	3eb33333 	.word	0x3eb33333
 801b620:	3d75c28f 	.word	0x3d75c28f
 801b624:	3ee66666 	.word	0x3ee66666
 801b628:	3f866666 	.word	0x3f866666
 801b62c:	3d23d70a 	.word	0x3d23d70a
 801b630:	3f8ccccd 	.word	0x3f8ccccd
 801b634:	3d8f5c29 	.word	0x3d8f5c29
 801b638:	3f933333 	.word	0x3f933333
 801b63c:	3ebd70a4 	.word	0x3ebd70a4
 801b640:	40a00000 	.word	0x40a00000
 801b644:	3ecccccd 	.word	0x3ecccccd
 801b648:	3f4ccccd 	.word	0x3f4ccccd
 801b64c:	3dcccccd 	.word	0x3dcccccd
 801b650:	3e4ccccd 	.word	0x3e4ccccd
 801b654:	3e99999a 	.word	0x3e99999a
 801b658:	3f666666 	.word	0x3f666666
 801b65c:	3f99999a 	.word	0x3f99999a
 801b660:	3f19999a 	.word	0x3f19999a
 801b664:	3fb9999a 	.word	0x3fb9999a
 801b668:	3fcccccd 	.word	0x3fcccccd
 801b66c:	3fe66666 	.word	0x3fe66666
 801b670:	40200000 	.word	0x40200000
 801b674:	40400000 	.word	0x40400000
 801b678:	80000000 	.word	0x80000000
 801b67c:	3fa66666 	.word	0x3fa66666
 801b680:	3f333333 	.word	0x3f333333
 801b684:	3e4cccce 	.word	0x3e4cccce
 801b688:	3eaaaaab 	.word	0x3eaaaaab
 801b68c:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 801b690:	2a00      	cmp	r2, #0
 801b692:	f040 85bc 	bne.w	801c20e <iNemoEngine_API_Update+0x45f6>
 801b696:	9906      	ldr	r1, [sp, #24]
 801b698:	ed5f 8a06 	vldr	s17, [pc, #-24]	@ 801b684 <iNemoEngine_API_Update+0x3a6c>
 801b69c:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	@ 0x1a6
 801b6a0:	ed5f 7a07 	vldr	s15, [pc, #-28]	@ 801b688 <iNemoEngine_API_Update+0x3a70>
 801b6a4:	3301      	adds	r3, #1
 801b6a6:	b29b      	uxth	r3, r3
 801b6a8:	2b31      	cmp	r3, #49	@ 0x31
 801b6aa:	f8a1 31a6 	strh.w	r3, [r1, #422]	@ 0x1a6
 801b6ae:	bf98      	it	ls
 801b6b0:	eef0 8a67 	vmovls.f32	s17, s15
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 801b6ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801b6be:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 801b6c2:	f000 8599 	beq.w	801c1f8 <iNemoEngine_API_Update+0x45e0>
 801b6c6:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 801b6ca:	f47f a83a 	bne.w	801a742 <iNemoEngine_API_Update+0x2b2a>
 801b6ce:	9a06      	ldr	r2, [sp, #24]
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	f882 31a4 	strb.w	r3, [r2, #420]	@ 0x1a4
 801b6d6:	9a06      	ldr	r2, [sp, #24]
 801b6d8:	edcd 6a03 	vstr	s13, [sp, #12]
 801b6dc:	f502 63c3 	add.w	r3, r2, #1560	@ 0x618
 801b6e0:	ed93 5a00 	vldr	s10, [r3]
 801b6e4:	f502 63f1 	add.w	r3, r2, #1928	@ 0x788
 801b6e8:	ed93 7a00 	vldr	s14, [r3]
 801b6ec:	f202 6314 	addw	r3, r2, #1556	@ 0x614
 801b6f0:	edd3 4a00 	vldr	s9, [r3]
 801b6f4:	ee25 4a05 	vmul.f32	s8, s10, s10
 801b6f8:	f202 7384 	addw	r3, r2, #1924	@ 0x784
 801b6fc:	eea4 4aa4 	vfma.f32	s8, s9, s9
 801b700:	a93d      	add	r1, sp, #244	@ 0xf4
 801b702:	a843      	add	r0, sp, #268	@ 0x10c
 801b704:	ed93 6a00 	vldr	s12, [r3]
 801b708:	f202 631c 	addw	r3, r2, #1564	@ 0x61c
 801b70c:	edd3 7a00 	vldr	s15, [r3]
 801b710:	eea7 4aa7 	vfma.f32	s8, s15, s15
 801b714:	f202 738c 	addw	r3, r2, #1932	@ 0x78c
 801b718:	465e      	mov	r6, fp
 801b71a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801b71e:	eeb1 3ac4 	vsqrt.f32	s6, s8
 801b722:	465a      	mov	r2, fp
 801b724:	4655      	mov	r5, sl
 801b726:	4657      	mov	r7, sl
 801b728:	acae      	add	r4, sp, #696	@ 0x2b8
 801b72a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801b72e:	ee83 4a83 	vdiv.f32	s8, s7, s6
 801b732:	eee6 5a06 	vfma.f32	s11, s12, s12
 801b736:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b73a:	ee25 5a04 	vmul.f32	s10, s10, s8
 801b73e:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 801b742:	edd3 7a00 	vldr	s15, [r3]
 801b746:	ed8d 5a3e 	vstr	s10, [sp, #248]	@ 0xf8
 801b74a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801b74e:	ee64 4a84 	vmul.f32	s9, s9, s8
 801b752:	eeb1 5ae5 	vsqrt.f32	s10, s11
 801b756:	edcd 4a3d 	vstr	s9, [sp, #244]	@ 0xf4
 801b75a:	eec3 5a85 	vdiv.f32	s11, s7, s10
 801b75e:	ee27 7a25 	vmul.f32	s14, s14, s11
 801b762:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b766:	ee26 6a25 	vmul.f32	s12, s12, s11
 801b76a:	ed8d 7a44 	vstr	s14, [sp, #272]	@ 0x110
 801b76e:	edcd 7a45 	vstr	s15, [sp, #276]	@ 0x114
 801b772:	ed8d 6a43 	vstr	s12, [sp, #268]	@ 0x10c
 801b776:	f7fa fec5 	bl	8016504 <getRotationMatrix>
 801b77a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b77c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b77e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b782:	6836      	ldr	r6, [r6, #0]
 801b784:	602e      	str	r6, [r5, #0]
 801b786:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b78a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b78c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b78e:	edda 7a00 	vldr	s15, [sl]
 801b792:	ed9a 7a01 	vldr	s14, [sl, #4]
 801b796:	eddd 6a03 	vldr	s13, [sp, #12]
 801b79a:	6026      	str	r6, [r4, #0]
 801b79c:	eef0 7ae7 	vabs.f32	s15, s15
 801b7a0:	eeb0 7ac7 	vabs.f32	s14, s14
 801b7a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ac:	f140 8407 	bpl.w	801bfbe <iNemoEngine_API_Update+0x43a6>
 801b7b0:	2304      	movs	r3, #4
 801b7b2:	2000      	movs	r0, #0
 801b7b4:	930c      	str	r3, [sp, #48]	@ 0x30
 801b7b6:	469e      	mov	lr, r3
 801b7b8:	eef0 7a47 	vmov.f32	s15, s14
 801b7bc:	2103      	movs	r1, #3
 801b7be:	2707      	movs	r7, #7
 801b7c0:	f04f 0c06 	mov.w	ip, #6
 801b7c4:	4603      	mov	r3, r0
 801b7c6:	2601      	movs	r6, #1
 801b7c8:	ed9a 7a02 	vldr	s14, [sl, #8]
 801b7cc:	eeb0 7ac7 	vabs.f32	s14, s14
 801b7d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7d8:	f340 8453 	ble.w	801c082 <iNemoEngine_API_Update+0x446a>
 801b7dc:	2306      	movs	r3, #6
 801b7de:	2708      	movs	r7, #8
 801b7e0:	2104      	movs	r1, #4
 801b7e2:	9303      	str	r3, [sp, #12]
 801b7e4:	f04f 0c07 	mov.w	ip, #7
 801b7e8:	f04f 0e05 	mov.w	lr, #5
 801b7ec:	970c      	str	r7, [sp, #48]	@ 0x30
 801b7ee:	4608      	mov	r0, r1
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	2301      	movs	r3, #1
 801b7f4:	2602      	movs	r6, #2
 801b7f6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b7f8:	4450      	add	r0, sl
 801b7fa:	4454      	add	r4, sl
 801b7fc:	ed90 6a00 	vldr	s12, [r0]
 801b800:	ed94 7a00 	vldr	s14, [r4]
 801b804:	eec6 7a07 	vdiv.f32	s15, s12, s14
 801b808:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b80a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801b80e:	acae      	add	r4, sp, #696	@ 0x2b8
 801b810:	adae      	add	r5, sp, #696	@ 0x2b8
 801b812:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801b816:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801b81a:	edc0 7a00 	vstr	s15, [r0]
 801b81e:	ed94 7a00 	vldr	s14, [r4]
 801b822:	edd5 7a00 	vldr	s15, [r5]
 801b826:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801b82a:	ed84 6a00 	vstr	s12, [r4]
 801b82e:	edd0 5a00 	vldr	s11, [r0]
 801b832:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b834:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801b838:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801b83c:	ed90 7a00 	vldr	s14, [r0]
 801b840:	edd5 7a00 	vldr	s15, [r5]
 801b844:	eee5 7ac7 	vfms.f32	s15, s11, s14
 801b848:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801b84c:	9404      	str	r4, [sp, #16]
 801b84e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b850:	edc5 7a00 	vstr	s15, [r5]
 801b854:	ed90 7a00 	vldr	s14, [r0]
 801b858:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b85a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801b85e:	edd0 7a00 	vldr	s15, [r0]
 801b862:	eee6 7a47 	vfms.f32	s15, s12, s14
 801b866:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801b86a:	00bc      	lsls	r4, r7, #2
 801b86c:	9405      	str	r4, [sp, #20]
 801b86e:	edc0 7a00 	vstr	s15, [r0]
 801b872:	acae      	add	r4, sp, #696	@ 0x2b8
 801b874:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b876:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801b87a:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 801b87e:	ed90 5a00 	vldr	s10, [r0]
 801b882:	ed94 7a00 	vldr	s14, [r4]
 801b886:	eea5 7ac5 	vfms.f32	s14, s11, s10
 801b88a:	0097      	lsls	r7, r2, #2
 801b88c:	eef0 7ae7 	vabs.f32	s15, s15
 801b890:	ed84 7a00 	vstr	s14, [r4]
 801b894:	9c03      	ldr	r4, [sp, #12]
 801b896:	edd0 5a00 	vldr	s11, [r0]
 801b89a:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b89c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801b8a0:	ed90 7a00 	vldr	s14, [r0]
 801b8a4:	eea6 7a65 	vfms.f32	s14, s12, s11
 801b8a8:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801b8ac:	008c      	lsls	r4, r1, #2
 801b8ae:	ed80 7a00 	vstr	s14, [r0]
 801b8b2:	ed95 7a00 	vldr	s14, [r5]
 801b8b6:	eeb0 7ac7 	vabs.f32	s14, s14
 801b8ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b8be:	00b0      	lsls	r0, r6, #2
 801b8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8c4:	9003      	str	r0, [sp, #12]
 801b8c6:	ea4f 0583 	mov.w	r5, r3, lsl #2
 801b8ca:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801b8ce:	dd0a      	ble.n	801b8e6 <iNemoEngine_API_Update+0x3cce>
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	4613      	mov	r3, r2
 801b8d4:	4602      	mov	r2, r0
 801b8d6:	4674      	mov	r4, lr
 801b8d8:	4650      	mov	r0, sl
 801b8da:	463d      	mov	r5, r7
 801b8dc:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801b8e0:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 801b8e4:	0097      	lsls	r7, r2, #2
 801b8e6:	a9ae      	add	r1, sp, #696	@ 0x2b8
 801b8e8:	448e      	add	lr, r1
 801b8ea:	440c      	add	r4, r1
 801b8ec:	ed9e 7a00 	vldr	s14, [lr]
 801b8f0:	edd4 7a00 	vldr	s15, [r4]
 801b8f4:	edcd 6a03 	vstr	s13, [sp, #12]
 801b8f8:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801b8fc:	4408      	add	r0, r1
 801b8fe:	4451      	add	r1, sl
 801b900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b904:	ed8e 2a00 	vstr	s4, [lr]
 801b908:	ed90 6a00 	vldr	s12, [r0]
 801b90c:	edd1 7a00 	vldr	s15, [r1]
 801b910:	eee2 7a46 	vfms.f32	s15, s4, s12
 801b914:	edc1 7a00 	vstr	s15, [r1]
 801b918:	9905      	ldr	r1, [sp, #20]
 801b91a:	ed90 3a00 	vldr	s6, [r0]
 801b91e:	ed94 6a00 	vldr	s12, [r4]
 801b922:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b924:	4401      	add	r1, r0
 801b926:	edd1 3a00 	vldr	s7, [r1]
 801b92a:	9904      	ldr	r1, [sp, #16]
 801b92c:	4401      	add	r1, r0
 801b92e:	00b0      	lsls	r0, r6, #2
 801b930:	edd1 4a00 	vldr	s9, [r1]
 801b934:	f500 61b2 	add.w	r1, r0, #1424	@ 0x590
 801b938:	4469      	add	r1, sp
 801b93a:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 801b93e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 801b942:	edd1 7a00 	vldr	s15, [r1]
 801b946:	a9ae      	add	r1, sp, #696	@ 0x2b8
 801b948:	4401      	add	r1, r0
 801b94a:	ee87 4a06 	vdiv.f32	s8, s14, s12
 801b94e:	a8ae      	add	r0, sp, #696	@ 0x2b8
 801b950:	ed91 6a00 	vldr	s12, [r1]
 801b954:	f505 61b2 	add.w	r1, r5, #1424	@ 0x590
 801b958:	4469      	add	r1, sp
 801b95a:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 801b95e:	ee87 5a06 	vdiv.f32	s10, s14, s12
 801b962:	4405      	add	r5, r0
 801b964:	ed91 7a00 	vldr	s14, [r1]
 801b968:	edd5 5a00 	vldr	s11, [r5]
 801b96c:	f507 61b2 	add.w	r1, r7, #1424	@ 0x590
 801b970:	4469      	add	r1, sp
 801b972:	4407      	add	r7, r0
 801b974:	f5a1 717c 	sub.w	r1, r1, #1008	@ 0x3f0
 801b978:	edd7 1a00 	vldr	s3, [r7]
 801b97c:	ed91 6a00 	vldr	s12, [r1]
 801b980:	eea5 7ae7 	vfms.f32	s14, s11, s15
 801b984:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 801b988:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 801b98c:	eea1 6ae7 	vfms.f32	s12, s3, s15
 801b990:	4601      	mov	r1, r0
 801b992:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 801b996:	ed91 1a00 	vldr	s2, [r1]
 801b99a:	eea2 6a47 	vfms.f32	s12, s4, s14
 801b99e:	f50d 61b2 	add.w	r1, sp, #1424	@ 0x590
 801b9a2:	f5a0 7079 	sub.w	r0, r0, #996	@ 0x3e4
 801b9a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b9aa:	ee22 6a86 	vmul.f32	s12, s5, s12
 801b9ae:	460b      	mov	r3, r1
 801b9b0:	eea3 7a46 	vfms.f32	s14, s6, s12
 801b9b4:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 801b9b8:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 801b9bc:	eee3 7ac6 	vfms.f32	s15, s7, s12
 801b9c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b9c4:	ed8b 6a02 	vstr	s12, [fp, #8]
 801b9c8:	eee4 7ac7 	vfms.f32	s15, s9, s14
 801b9cc:	ed8b 7a01 	vstr	s14, [fp, #4]
 801b9d0:	ee65 7a27 	vmul.f32	s15, s10, s15
 801b9d4:	ed90 7a00 	vldr	s14, [r0]
 801b9d8:	ed91 6a00 	vldr	s12, [r1]
 801b9dc:	edcb 7a00 	vstr	s15, [fp]
 801b9e0:	f50d 60b2 	add.w	r0, sp, #1424	@ 0x590
 801b9e4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801b9e8:	edd3 7a00 	vldr	s15, [r3]
 801b9ec:	f5a1 7376 	sub.w	r3, r1, #984	@ 0x3d8
 801b9f0:	edd3 0a00 	vldr	s1, [r3]
 801b9f4:	f5a1 7279 	sub.w	r2, r1, #996	@ 0x3e4
 801b9f8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801b9fc:	4658      	mov	r0, fp
 801b9fe:	a952      	add	r1, sp, #328	@ 0x148
 801ba00:	eee1 7a65 	vfms.f32	s15, s2, s11
 801ba04:	edd2 5a00 	vldr	s11, [r2]
 801ba08:	eee1 0a61 	vfms.f32	s1, s2, s3
 801ba0c:	eee1 5ac7 	vfms.f32	s11, s3, s14
 801ba10:	eef0 1a60 	vmov.f32	s3, s1
 801ba14:	eee2 5a46 	vfms.f32	s11, s4, s12
 801ba18:	eee2 1a67 	vfms.f32	s3, s4, s15
 801ba1c:	ee62 5aa5 	vmul.f32	s11, s5, s11
 801ba20:	ee62 2aa1 	vmul.f32	s5, s5, s3
 801ba24:	eea3 6a65 	vfms.f32	s12, s6, s11
 801ba28:	eee2 7ac3 	vfms.f32	s15, s5, s6
 801ba2c:	eea2 1ae3 	vfms.f32	s2, s5, s7
 801ba30:	eea3 7ae5 	vfms.f32	s14, s7, s11
 801ba34:	ee26 6a04 	vmul.f32	s12, s12, s8
 801ba38:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ba3c:	edcb 5a05 	vstr	s11, [fp, #20]
 801ba40:	eef0 5a41 	vmov.f32	s11, s2
 801ba44:	eea4 7ac6 	vfms.f32	s14, s9, s12
 801ba48:	eee7 5ae4 	vfms.f32	s11, s15, s9
 801ba4c:	ee25 7a07 	vmul.f32	s14, s10, s14
 801ba50:	ee65 5a25 	vmul.f32	s11, s10, s11
 801ba54:	ed8b 6a04 	vstr	s12, [fp, #16]
 801ba58:	ed8b 7a03 	vstr	s14, [fp, #12]
 801ba5c:	edcb 2a08 	vstr	s5, [fp, #32]
 801ba60:	edcb 7a07 	vstr	s15, [fp, #28]
 801ba64:	edcb 5a06 	vstr	s11, [fp, #24]
 801ba68:	f7fa fcac 	bl	80163c4 <b_dcm2q>
 801ba6c:	ed9d 7a53 	vldr	s14, [sp, #332]	@ 0x14c
 801ba70:	eddd 7a54 	vldr	s15, [sp, #336]	@ 0x150
 801ba74:	ed9d 6a52 	vldr	s12, [sp, #328]	@ 0x148
 801ba78:	9b06      	ldr	r3, [sp, #24]
 801ba7a:	eddd 6a03 	vldr	s13, [sp, #12]
 801ba7e:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 801ba82:	ee37 7a07 	vadd.f32	s14, s14, s14
 801ba86:	ee36 6a06 	vadd.f32	s12, s12, s12
 801ba8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ba8e:	ed8d 6a3d 	vstr	s12, [sp, #244]	@ 0xf4
 801ba92:	ed8d 7a3e 	vstr	s14, [sp, #248]	@ 0xf8
 801ba96:	edcd 7a3f 	vstr	s15, [sp, #252]	@ 0xfc
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	f43e ae54 	beq.w	801a748 <iNemoEngine_API_Update+0x2b30>
 801baa0:	9906      	ldr	r1, [sp, #24]
 801baa2:	2200      	movs	r2, #0
 801baa4:	464b      	mov	r3, r9
 801baa6:	f881 21a0 	strb.w	r2, [r1, #416]	@ 0x1a0
 801baaa:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801baae:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801bab2:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801bab6:	f7fe ba06 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801baba:	ee37 7a67 	vsub.f32	s14, s14, s15
 801babe:	ee38 4ae7 	vsub.f32	s8, s17, s15
 801bac2:	edd2 3a31 	vldr	s7, [r2, #196]	@ 0xc4
 801bac6:	edd2 7a33 	vldr	s15, [r2, #204]	@ 0xcc
 801baca:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801bace:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bad2:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801bad6:	edd2 7a34 	vldr	s15, [r2, #208]	@ 0xd0
 801bada:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bae2:	ee3f fa23 	vadd.f32	s30, s30, s7
 801bae6:	f6fe ac6e 	blt.w	801a3c6 <iNemoEngine_API_Update+0x27ae>
 801baea:	9b06      	ldr	r3, [sp, #24]
 801baec:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 801baf0:	eef4 8ac7 	vcmpe.f32	s17, s14
 801baf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baf8:	f140 837a 	bpl.w	801c1f0 <iNemoEngine_API_Update+0x45d8>
 801bafc:	edd3 3a35 	vldr	s7, [r3, #212]	@ 0xd4
 801bb00:	ed93 4a37 	vldr	s8, [r3, #220]	@ 0xdc
 801bb04:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb08:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bb0c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bb10:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bb14:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801bb18:	ee3f fa23 	vadd.f32	s30, s30, s7
 801bb1c:	9b06      	ldr	r3, [sp, #24]
 801bb1e:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 801bb22:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb2a:	f6fe ac6d 	blt.w	801a408 <iNemoEngine_API_Update+0x27f0>
 801bb2e:	9b06      	ldr	r3, [sp, #24]
 801bb30:	ed93 7a3a 	vldr	s14, [r3, #232]	@ 0xe8
 801bb34:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb3c:	f140 82fd 	bpl.w	801c13a <iNemoEngine_API_Update+0x4522>
 801bb40:	edd3 3a39 	vldr	s7, [r3, #228]	@ 0xe4
 801bb44:	ed93 4a3b 	vldr	s8, [r3, #236]	@ 0xec
 801bb48:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb4c:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bb50:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bb54:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bb58:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801bb5c:	ee3f fa23 	vadd.f32	s30, s30, s7
 801bb60:	9b06      	ldr	r3, [sp, #24]
 801bb62:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 801bb66:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb6e:	f6fe ac6d 	blt.w	801a44c <iNemoEngine_API_Update+0x2834>
 801bb72:	9b06      	ldr	r3, [sp, #24]
 801bb74:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 801bb78:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb80:	f140 831a 	bpl.w	801c1b8 <iNemoEngine_API_Update+0x45a0>
 801bb84:	edd3 3a3d 	vldr	s7, [r3, #244]	@ 0xf4
 801bb88:	ed93 4a3f 	vldr	s8, [r3, #252]	@ 0xfc
 801bb8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb90:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bb94:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bb98:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bb9c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801bba0:	ee3f fa23 	vadd.f32	s30, s30, s7
 801bba4:	9b06      	ldr	r3, [sp, #24]
 801bba6:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 801bbaa:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb2:	f6fe ac6d 	blt.w	801a490 <iNemoEngine_API_Update+0x2878>
 801bbb6:	9b06      	ldr	r3, [sp, #24]
 801bbb8:	ed93 7a42 	vldr	s14, [r3, #264]	@ 0x108
 801bbbc:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbc4:	f140 82c3 	bpl.w	801c14e <iNemoEngine_API_Update+0x4536>
 801bbc8:	edd3 3a41 	vldr	s7, [r3, #260]	@ 0x104
 801bbcc:	ed93 4a43 	vldr	s8, [r3, #268]	@ 0x10c
 801bbd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bbd4:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bbd8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bbdc:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bbe0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801bbe4:	ee3f fa23 	vadd.f32	s30, s30, s7
 801bbe8:	9b06      	ldr	r3, [sp, #24]
 801bbea:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 801bbee:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbf6:	f6fe ac6d 	blt.w	801a4d4 <iNemoEngine_API_Update+0x28bc>
 801bbfa:	9b06      	ldr	r3, [sp, #24]
 801bbfc:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 801bc00:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc08:	f140 82d2 	bpl.w	801c1b0 <iNemoEngine_API_Update+0x4598>
 801bc0c:	ed93 4a45 	vldr	s8, [r3, #276]	@ 0x114
 801bc10:	edd3 4a47 	vldr	s9, [r3, #284]	@ 0x11c
 801bc14:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bc18:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801bc1c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bc20:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801bc24:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801bc28:	ee3f fa04 	vadd.f32	s30, s30, s8
 801bc2c:	f7fd ba93 	b.w	8019156 <iNemoEngine_API_Update+0x153e>
 801bc30:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bc34:	ee38 4ae7 	vsub.f32	s8, s17, s15
 801bc38:	edd3 3a4b 	vldr	s7, [r3, #300]	@ 0x12c
 801bc3c:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 801bc40:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801bc44:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bc48:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801bc4c:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 801bc50:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc58:	ee3c ca23 	vadd.f32	s24, s24, s7
 801bc5c:	f6fd aaab 	blt.w	80191b6 <iNemoEngine_API_Update+0x159e>
 801bc60:	9b06      	ldr	r3, [sp, #24]
 801bc62:	ed93 7a50 	vldr	s14, [r3, #320]	@ 0x140
 801bc66:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc6e:	f140 8260 	bpl.w	801c132 <iNemoEngine_API_Update+0x451a>
 801bc72:	edd3 3a4f 	vldr	s7, [r3, #316]	@ 0x13c
 801bc76:	ed93 4a51 	vldr	s8, [r3, #324]	@ 0x144
 801bc7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bc7e:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bc82:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bc86:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bc8a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801bc8e:	ee3c ca23 	vadd.f32	s24, s24, s7
 801bc92:	9b06      	ldr	r3, [sp, #24]
 801bc94:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 801bc98:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca0:	f6fd aaaa 	blt.w	80191f8 <iNemoEngine_API_Update+0x15e0>
 801bca4:	9b06      	ldr	r3, [sp, #24]
 801bca6:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 801bcaa:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcb2:	f140 8237 	bpl.w	801c124 <iNemoEngine_API_Update+0x450c>
 801bcb6:	edd3 3a53 	vldr	s7, [r3, #332]	@ 0x14c
 801bcba:	ed93 4a55 	vldr	s8, [r3, #340]	@ 0x154
 801bcbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bcc2:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bcc6:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bcca:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bcce:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801bcd2:	ee3c ca23 	vadd.f32	s24, s24, s7
 801bcd6:	9b06      	ldr	r3, [sp, #24]
 801bcd8:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 801bcdc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bce4:	f6fd aaaa 	blt.w	801923c <iNemoEngine_API_Update+0x1624>
 801bce8:	9b06      	ldr	r3, [sp, #24]
 801bcea:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 801bcee:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcf6:	f140 8270 	bpl.w	801c1da <iNemoEngine_API_Update+0x45c2>
 801bcfa:	edd3 3a57 	vldr	s7, [r3, #348]	@ 0x15c
 801bcfe:	ed93 4a59 	vldr	s8, [r3, #356]	@ 0x164
 801bd02:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bd06:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bd0a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bd0e:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bd12:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801bd16:	ee3c ca23 	vadd.f32	s24, s24, s7
 801bd1a:	9b06      	ldr	r3, [sp, #24]
 801bd1c:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 801bd20:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd28:	f6fd aaaa 	blt.w	8019280 <iNemoEngine_API_Update+0x1668>
 801bd2c:	9b06      	ldr	r3, [sp, #24]
 801bd2e:	ed93 7a5c 	vldr	s14, [r3, #368]	@ 0x170
 801bd32:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd3a:	f140 8252 	bpl.w	801c1e2 <iNemoEngine_API_Update+0x45ca>
 801bd3e:	edd3 3a5b 	vldr	s7, [r3, #364]	@ 0x16c
 801bd42:	ed93 4a5d 	vldr	s8, [r3, #372]	@ 0x174
 801bd46:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bd4a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801bd4e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bd52:	ee64 7a27 	vmul.f32	s15, s8, s15
 801bd56:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801bd5a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801bd5e:	9b06      	ldr	r3, [sp, #24]
 801bd60:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 801bd64:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd6c:	f6fd aaaa 	blt.w	80192c4 <iNemoEngine_API_Update+0x16ac>
 801bd70:	9b06      	ldr	r3, [sp, #24]
 801bd72:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 801bd76:	eef4 8ac7 	vcmpe.f32	s17, s14
 801bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd7e:	f140 8222 	bpl.w	801c1c6 <iNemoEngine_API_Update+0x45ae>
 801bd82:	ed93 4a5f 	vldr	s8, [r3, #380]	@ 0x17c
 801bd86:	edd3 4a61 	vldr	s9, [r3, #388]	@ 0x184
 801bd8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bd8e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801bd92:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801bd96:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801bd9a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801bd9e:	ee3c ca04 	vadd.f32	s24, s24, s8
 801bda2:	f7fd bb2a 	b.w	80193fa <iNemoEngine_API_Update+0x17e2>
 801bda6:	a94e      	add	r1, sp, #312	@ 0x138
 801bda8:	a868      	add	r0, sp, #416	@ 0x1a0
 801bdaa:	f7fa fb0b 	bl	80163c4 <b_dcm2q>
 801bdae:	9d06      	ldr	r5, [sp, #24]
 801bdb0:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 801bdb4:	edc5 7a72 	vstr	s15, [r5, #456]	@ 0x1c8
 801bdb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801bdbc:	edc5 7a73 	vstr	s15, [r5, #460]	@ 0x1cc
 801bdc0:	4621      	mov	r1, r4
 801bdc2:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801bdc6:	f505 70ea 	add.w	r0, r5, #468	@ 0x1d4
 801bdca:	edcd 7a05 	vstr	s15, [sp, #20]
 801bdce:	f001 fbd6 	bl	801d57e <memset>
 801bdd2:	4be5      	ldr	r3, [pc, #916]	@ (801c168 <iNemoEngine_API_Update+0x4550>)
 801bdd4:	702c      	strb	r4, [r5, #0]
 801bdd6:	eddd 7a05 	vldr	s15, [sp, #20]
 801bdda:	edd5 2a02 	vldr	s5, [r5, #8]
 801bdde:	ed9d 7a1a 	vldr	s14, [sp, #104]	@ 0x68
 801bde2:	9a06      	ldr	r2, [sp, #24]
 801bde4:	f8c5 31d4 	str.w	r3, [r5, #468]	@ 0x1d4
 801bde8:	f8c5 31fc 	str.w	r3, [r5, #508]	@ 0x1fc
 801bdec:	f8c5 3224 	str.w	r3, [r5, #548]	@ 0x224
 801bdf0:	f8c5 324c 	str.w	r3, [r5, #588]	@ 0x24c
 801bdf4:	f8c5 3274 	str.w	r3, [r5, #628]	@ 0x274
 801bdf8:	f8c5 329c 	str.w	r3, [r5, #668]	@ 0x29c
 801bdfc:	f8c5 32c4 	str.w	r3, [r5, #708]	@ 0x2c4
 801be00:	f8c5 32ec 	str.w	r3, [r5, #748]	@ 0x2ec
 801be04:	f8c5 3314 	str.w	r3, [r5, #788]	@ 0x314
 801be08:	2401      	movs	r4, #1
 801be0a:	f7fd bb44 	b.w	8019496 <iNemoEngine_API_Update+0x187e>
 801be0e:	290a      	cmp	r1, #10
 801be10:	f000 815d 	beq.w	801c0ce <iNemoEngine_API_Update+0x44b6>
 801be14:	1c4b      	adds	r3, r1, #1
 801be16:	9906      	ldr	r1, [sp, #24]
 801be18:	f881 31a0 	strb.w	r3, [r1, #416]	@ 0x1a0
 801be1c:	4613      	mov	r3, r2
 801be1e:	2200      	movs	r2, #0
 801be20:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801be24:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801be28:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801be2c:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801be30:	f7fe b849 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801be34:	ed9d 7a55 	vldr	s14, [sp, #340]	@ 0x154
 801be38:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801be3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be40:	f340 824f 	ble.w	801c2e2 <iNemoEngine_API_Update+0x46ca>
 801be44:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801be48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be50:	f140 8244 	bpl.w	801c2dc <iNemoEngine_API_Update+0x46c4>
 801be54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801be58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be60:	f140 81f9 	bpl.w	801c256 <iNemoEngine_API_Update+0x463e>
 801be64:	eddf 7ace 	vldr	s15, [pc, #824]	@ 801c1a0 <iNemoEngine_API_Update+0x4588>
 801be68:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801be6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801be70:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801be74:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 801be78:	eef0 8a46 	vmov.f32	s17, s12
 801be7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be80:	eee7 8aa5 	vfma.f32	s17, s15, s11
 801be84:	f2c0 81fb 	blt.w	801c27e <iNemoEngine_API_Update+0x4666>
 801be88:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801be8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be94:	f140 81fb 	bpl.w	801c28e <iNemoEngine_API_Update+0x4676>
 801be98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801be9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bea0:	ed9f 6ab2 	vldr	s12, [pc, #712]	@ 801c16c <iNemoEngine_API_Update+0x4554>
 801bea4:	eddf 8ab2 	vldr	s17, [pc, #712]	@ 801c170 <iNemoEngine_API_Update+0x4558>
 801bea8:	eee7 8a86 	vfma.f32	s17, s15, s12
 801beac:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801beb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801beb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beb8:	f2c0 81fb 	blt.w	801c2b2 <iNemoEngine_API_Update+0x469a>
 801bebc:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 801bec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bec8:	f140 81fb 	bpl.w	801c2c2 <iNemoEngine_API_Update+0x46aa>
 801becc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801bed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bed4:	eef0 8a00 	vmov.f32	s17, #0	@ 0x40000000  2.0
 801bed8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801bedc:	eee7 8a87 	vfma.f32	s17, s15, s14
 801bee0:	9a06      	ldr	r2, [sp, #24]
 801bee2:	2300      	movs	r3, #0
 801bee4:	f8a2 31a6 	strh.w	r3, [r2, #422]	@ 0x1a6
 801bee8:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 801beec:	f7fe bc29 	b.w	801a742 <iNemoEngine_API_Update+0x2b2a>
 801bef0:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 801c174 <iNemoEngine_API_Update+0x455c>
 801bef4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801befc:	f57e ad78 	bpl.w	801a9f0 <iNemoEngine_API_Update+0x2dd8>
 801bf00:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 801c178 <iNemoEngine_API_Update+0x4560>
 801bf04:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 801c1a0 <iNemoEngine_API_Update+0x4588>
 801bf08:	eddf 5a9c 	vldr	s11, [pc, #624]	@ 801c17c <iNemoEngine_API_Update+0x4564>
 801bf0c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801bf10:	ee26 6a26 	vmul.f32	s12, s12, s13
 801bf14:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 801c180 <iNemoEngine_API_Update+0x4568>
 801bf18:	eee6 6a25 	vfma.f32	s13, s12, s11
 801bf1c:	ed9f 6a99 	vldr	s12, [pc, #612]	@ 801c184 <iNemoEngine_API_Update+0x456c>
 801bf20:	eef4 7ac6 	vcmpe.f32	s15, s12
 801bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf28:	f6fe ad78 	blt.w	801aa1c <iNemoEngine_API_Update+0x2e04>
 801bf2c:	eddf 6a96 	vldr	s13, [pc, #600]	@ 801c188 <iNemoEngine_API_Update+0x4570>
 801bf30:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf38:	f57e ad78 	bpl.w	801aa2c <iNemoEngine_API_Update+0x2e14>
 801bf3c:	ed9f 6a91 	vldr	s12, [pc, #580]	@ 801c184 <iNemoEngine_API_Update+0x456c>
 801bf40:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801bf44:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 801bf48:	ee26 6a26 	vmul.f32	s12, s12, s13
 801bf4c:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
 801bf50:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 801bf54:	eee6 6a25 	vfma.f32	s13, s12, s11
 801bf58:	ed9f 6a93 	vldr	s12, [pc, #588]	@ 801c1a8 <iNemoEngine_API_Update+0x4590>
 801bf5c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801bf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf64:	f6fe ad78 	blt.w	801aa58 <iNemoEngine_API_Update+0x2e40>
 801bf68:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801bf6c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf74:	f57e ad77 	bpl.w	801aa66 <iNemoEngine_API_Update+0x2e4e>
 801bf78:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 801c1a8 <iNemoEngine_API_Update+0x4590>
 801bf7c:	eddf 6a83 	vldr	s13, [pc, #524]	@ 801c18c <iNemoEngine_API_Update+0x4574>
 801bf80:	eddf 5a83 	vldr	s11, [pc, #524]	@ 801c190 <iNemoEngine_API_Update+0x4578>
 801bf84:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801bf88:	ee26 6a26 	vmul.f32	s12, s12, s13
 801bf8c:	eef2 6a05 	vmov.f32	s13, #37	@ 0x41280000  10.5
 801bf90:	eee6 6a25 	vfma.f32	s13, s12, s11
 801bf94:	f7fe bd75 	b.w	801aa82 <iNemoEngine_API_Update+0x2e6a>
 801bf98:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 801c194 <iNemoEngine_API_Update+0x457c>
 801bf9c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfa4:	f57e ad06 	bpl.w	801a9b4 <iNemoEngine_API_Update+0x2d9c>
 801bfa8:	eddf 6a73 	vldr	s13, [pc, #460]	@ 801c178 <iNemoEngine_API_Update+0x4560>
 801bfac:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfb4:	da9c      	bge.n	801bef0 <iNemoEngine_API_Update+0x42d8>
 801bfb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bfba:	f7fe bd11 	b.w	801a9e0 <iNemoEngine_API_Update+0x2dc8>
 801bfbe:	2104      	movs	r1, #4
 801bfc0:	f04f 0e03 	mov.w	lr, #3
 801bfc4:	2706      	movs	r7, #6
 801bfc6:	f04f 0c07 	mov.w	ip, #7
 801bfca:	4608      	mov	r0, r1
 801bfcc:	2301      	movs	r3, #1
 801bfce:	2600      	movs	r6, #0
 801bfd0:	f7ff bbfa 	b.w	801b7c8 <iNemoEngine_API_Update+0x3bb0>
 801bfd4:	eddf 3a70 	vldr	s7, [pc, #448]	@ 801c198 <iNemoEngine_API_Update+0x4580>
 801bfd8:	ed9f 5a70 	vldr	s10, [pc, #448]	@ 801c19c <iNemoEngine_API_Update+0x4584>
 801bfdc:	ac43      	add	r4, sp, #268	@ 0x10c
 801bfde:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801bfe2:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 801bfe6:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 801bfea:	3101      	adds	r1, #1
 801bfec:	eeb0 7a67 	vmov.f32	s14, s15
 801bff0:	461a      	mov	r2, r3
 801bff2:	edd2 5ad6 	vldr	s11, [r2, #856]	@ 0x358
 801bff6:	320c      	adds	r2, #12
 801bff8:	4290      	cmp	r0, r2
 801bffa:	ee37 7a25 	vadd.f32	s14, s14, s11
 801bffe:	d1f8      	bne.n	801bff2 <iNemoEngine_API_Update+0x43da>
 801c000:	ee27 7a23 	vmul.f32	s14, s14, s7
 801c004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c008:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801c00c:	edd3 5ad6 	vldr	s11, [r3, #856]	@ 0x358
 801c010:	330c      	adds	r3, #12
 801c012:	ee75 5ac7 	vsub.f32	s11, s11, s14
 801c016:	4298      	cmp	r0, r3
 801c018:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801c01c:	d1f6      	bne.n	801c00c <iNemoEngine_API_Update+0x43f4>
 801c01e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c022:	2902      	cmp	r1, #2
 801c024:	f100 0004 	add.w	r0, r0, #4
 801c028:	ece4 7a01 	vstmia	r4!, {s15}
 801c02c:	d1d9      	bne.n	801bfe2 <iNemoEngine_API_Update+0x43ca>
 801c02e:	eddd 5a43 	vldr	s11, [sp, #268]	@ 0x10c
 801c032:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 801c036:	ed9d 7a45 	vldr	s14, [sp, #276]	@ 0x114
 801c03a:	eeb1 3ae5 	vsqrt.f32	s6, s11
 801c03e:	eef1 3ae7 	vsqrt.f32	s7, s15
 801c042:	eeb1 5ac7 	vsqrt.f32	s10, s14
 801c046:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801c04a:	eef3 5a00 	vmov.f32	s11, #48	@ 0x41800000  16.0
 801c04e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c052:	ed8d 3a43 	vstr	s6, [sp, #268]	@ 0x10c
 801c056:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c05e:	edcd 3a44 	vstr	s7, [sp, #272]	@ 0x110
 801c062:	ed8d 5a45 	vstr	s10, [sp, #276]	@ 0x114
 801c066:	f57e abd4 	bpl.w	801a812 <iNemoEngine_API_Update+0x2bfa>
 801c06a:	9906      	ldr	r1, [sp, #24]
 801c06c:	ed8d 4a95 	vstr	s8, [sp, #596]	@ 0x254
 801c070:	2200      	movs	r2, #0
 801c072:	edcd 4a96 	vstr	s9, [sp, #600]	@ 0x258
 801c076:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 801c07a:	464b      	mov	r3, r9
 801c07c:	704a      	strb	r2, [r1, #1]
 801c07e:	f7fd bf22 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801c082:	2208      	movs	r2, #8
 801c084:	9203      	str	r2, [sp, #12]
 801c086:	2205      	movs	r2, #5
 801c088:	920e      	str	r2, [sp, #56]	@ 0x38
 801c08a:	2202      	movs	r2, #2
 801c08c:	f7ff bbb3 	b.w	801b7f6 <iNemoEngine_API_Update+0x3bde>
 801c090:	2301      	movs	r3, #1
 801c092:	f7fd bf04 	b.w	8019e9e <iNemoEngine_API_Update+0x2286>
 801c096:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 801c09a:	2b27      	cmp	r3, #39	@ 0x27
 801c09c:	d838      	bhi.n	801c110 <iNemoEngine_API_Update+0x44f8>
 801c09e:	ed8d 4a95 	vstr	s8, [sp, #596]	@ 0x254
 801c0a2:	edcd 4a96 	vstr	s9, [sp, #600]	@ 0x258
 801c0a6:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 801c0aa:	9906      	ldr	r1, [sp, #24]
 801c0ac:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	@ 0x1a8
 801c0b0:	3301      	adds	r3, #1
 801c0b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0b6:	bf14      	ite	ne
 801c0b8:	b29b      	uxthne	r3, r3
 801c0ba:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 801c0be:	2201      	movs	r2, #1
 801c0c0:	f8a1 31a8 	strh.w	r3, [r1, #424]	@ 0x1a8
 801c0c4:	f881 21a3 	strb.w	r2, [r1, #419]	@ 0x1a3
 801c0c8:	464b      	mov	r3, r9
 801c0ca:	f7fd befc 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801c0ce:	9906      	ldr	r1, [sp, #24]
 801c0d0:	f88d 20f0 	strb.w	r2, [sp, #240]	@ 0xf0
 801c0d4:	f891 31a3 	ldrb.w	r3, [r1, #419]	@ 0x1a3
 801c0d8:	ed8d ea95 	vstr	s28, [sp, #596]	@ 0x254
 801c0dc:	3301      	adds	r3, #1
 801c0de:	f881 31a3 	strb.w	r3, [r1, #419]	@ 0x1a3
 801c0e2:	784b      	ldrb	r3, [r1, #1]
 801c0e4:	edcd ea96 	vstr	s29, [sp, #600]	@ 0x258
 801c0e8:	f240 1201 	movw	r2, #257	@ 0x101
 801c0ec:	edcd ba97 	vstr	s23, [sp, #604]	@ 0x25c
 801c0f0:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 801c0f4:	b13b      	cbz	r3, 801c106 <iNemoEngine_API_Update+0x44ee>
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	ed81 ea6f 	vstr	s28, [r1, #444]	@ 0x1bc
 801c0fc:	edc1 ea70 	vstr	s29, [r1, #448]	@ 0x1c0
 801c100:	edc1 ba71 	vstr	s23, [r1, #452]	@ 0x1c4
 801c104:	704b      	strb	r3, [r1, #1]
 801c106:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c10a:	2301      	movs	r3, #1
 801c10c:	f7fd bedb 	b.w	8019ec6 <iNemoEngine_API_Update+0x22ae>
 801c110:	ed8d ea95 	vstr	s28, [sp, #596]	@ 0x254
 801c114:	edcd ea96 	vstr	s29, [sp, #600]	@ 0x258
 801c118:	edcd ba97 	vstr	s23, [sp, #604]	@ 0x25c
 801c11c:	e7c5      	b.n	801c0aa <iNemoEngine_API_Update+0x4492>
 801c11e:	eef0 7a47 	vmov.f32	s15, s14
 801c122:	e5bf      	b.n	801bca4 <iNemoEngine_API_Update+0x408c>
 801c124:	eef0 7a47 	vmov.f32	s15, s14
 801c128:	f7fd b86f 	b.w	801920a <iNemoEngine_API_Update+0x15f2>
 801c12c:	eef0 7a47 	vmov.f32	s15, s14
 801c130:	e563      	b.n	801bbfa <iNemoEngine_API_Update+0x3fe2>
 801c132:	eef0 7a47 	vmov.f32	s15, s14
 801c136:	f7fd b846 	b.w	80191c6 <iNemoEngine_API_Update+0x15ae>
 801c13a:	eef0 7a47 	vmov.f32	s15, s14
 801c13e:	f7fe b96c 	b.w	801a41a <iNemoEngine_API_Update+0x2802>
 801c142:	eef0 7a47 	vmov.f32	s15, s14
 801c146:	e4f2      	b.n	801bb2e <iNemoEngine_API_Update+0x3f16>
 801c148:	eef0 7a47 	vmov.f32	s15, s14
 801c14c:	e533      	b.n	801bbb6 <iNemoEngine_API_Update+0x3f9e>
 801c14e:	eef0 7a47 	vmov.f32	s15, s14
 801c152:	f7fe b9a6 	b.w	801a4a2 <iNemoEngine_API_Update+0x288a>
 801c156:	f503 63f3 	add.w	r3, r3, #1944	@ 0x798
 801c15a:	9315      	str	r3, [sp, #84]	@ 0x54
 801c15c:	f7fc b886 	b.w	801826c <iNemoEngine_API_Update+0x654>
 801c160:	f505 6597 	add.w	r5, r5, #1208	@ 0x4b8
 801c164:	f7fe be2c 	b.w	801adc0 <iNemoEngine_API_Update+0x31a8>
 801c168:	40a00000 	.word	0x40a00000
 801c16c:	3e999998 	.word	0x3e999998
 801c170:	3f99999a 	.word	0x3f99999a
 801c174:	3cf5c28f 	.word	0x3cf5c28f
 801c178:	3c75c28f 	.word	0x3c75c28f
 801c17c:	42855556 	.word	0x42855556
 801c180:	3f866666 	.word	0x3f866666
 801c184:	3d4ccccd 	.word	0x3d4ccccd
 801c188:	3dcccccd 	.word	0x3dcccccd
 801c18c:	42200000 	.word	0x42200000
 801c190:	40555555 	.word	0x40555555
 801c194:	3c23d70a 	.word	0x3c23d70a
 801c198:	3d088889 	.word	0x3d088889
 801c19c:	3d0d3dcb 	.word	0x3d0d3dcb
 801c1a0:	3dccccd0 	.word	0x3dccccd0
 801c1a4:	3f8ccccd 	.word	0x3f8ccccd
 801c1a8:	3e4ccccd 	.word	0x3e4ccccd
 801c1ac:	00000000 	.word	0x00000000
 801c1b0:	eef0 7a47 	vmov.f32	s15, s14
 801c1b4:	f7fe b997 	b.w	801a4e6 <iNemoEngine_API_Update+0x28ce>
 801c1b8:	eef0 7a47 	vmov.f32	s15, s14
 801c1bc:	f7fe b94f 	b.w	801a45e <iNemoEngine_API_Update+0x2846>
 801c1c0:	eef0 7a47 	vmov.f32	s15, s14
 801c1c4:	e4d5      	b.n	801bb72 <iNemoEngine_API_Update+0x3f5a>
 801c1c6:	eef0 7a47 	vmov.f32	s15, s14
 801c1ca:	f7fd b884 	b.w	80192d6 <iNemoEngine_API_Update+0x16be>
 801c1ce:	eef0 7a47 	vmov.f32	s15, s14
 801c1d2:	e5cd      	b.n	801bd70 <iNemoEngine_API_Update+0x4158>
 801c1d4:	eef0 7a47 	vmov.f32	s15, s14
 801c1d8:	e586      	b.n	801bce8 <iNemoEngine_API_Update+0x40d0>
 801c1da:	eef0 7a47 	vmov.f32	s15, s14
 801c1de:	f7fd b836 	b.w	801924e <iNemoEngine_API_Update+0x1636>
 801c1e2:	eef0 7a47 	vmov.f32	s15, s14
 801c1e6:	f7fd b854 	b.w	8019292 <iNemoEngine_API_Update+0x167a>
 801c1ea:	eef0 7a47 	vmov.f32	s15, s14
 801c1ee:	e59d      	b.n	801bd2c <iNemoEngine_API_Update+0x4114>
 801c1f0:	eef0 7a47 	vmov.f32	s15, s14
 801c1f4:	f7fe b8ef 	b.w	801a3d6 <iNemoEngine_API_Update+0x27be>
 801c1f8:	9906      	ldr	r1, [sp, #24]
 801c1fa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801c1fe:	f8c1 324c 	str.w	r3, [r1, #588]	@ 0x24c
 801c202:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
 801c206:	f8c1 329c 	str.w	r3, [r1, #668]	@ 0x29c
 801c20a:	f7fe ba9a 	b.w	801a742 <iNemoEngine_API_Update+0x2b2a>
 801c20e:	9906      	ldr	r1, [sp, #24]
 801c210:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	@ 0x1a6
 801c214:	3301      	adds	r3, #1
 801c216:	f8a1 31a6 	strh.w	r3, [r1, #422]	@ 0x1a6
 801c21a:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 801c21e:	460b      	mov	r3, r1
 801c220:	f7ff ba49 	b.w	801b6b6 <iNemoEngine_API_Update+0x3a9e>
 801c224:	2a00      	cmp	r2, #0
 801c226:	f73d afa4 	bgt.w	801a172 <iNemoEngine_API_Update+0x255a>
 801c22a:	eddd 5a83 	vldr	s11, [sp, #524]	@ 0x20c
 801c22e:	ed9d 7a84 	vldr	s14, [sp, #528]	@ 0x210
 801c232:	eddd 7a85 	vldr	s15, [sp, #532]	@ 0x214
 801c236:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 801c23a:	ee65 5a86 	vmul.f32	s11, s11, s12
 801c23e:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c242:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c246:	edcd 5a83 	vstr	s11, [sp, #524]	@ 0x20c
 801c24a:	ed8d 7a84 	vstr	s14, [sp, #528]	@ 0x210
 801c24e:	edcd 7a85 	vstr	s15, [sp, #532]	@ 0x214
 801c252:	f7fd bb24 	b.w	801989e <iNemoEngine_API_Update+0x1c86>
 801c256:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801c25a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801c25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c262:	f57f ae11 	bpl.w	801be88 <iNemoEngine_API_Update+0x4270>
 801c266:	ed1f 6a32 	vldr	s12, [pc, #-200]	@ 801c1a0 <iNemoEngine_API_Update+0x4588>
 801c26a:	ed5f 8a32 	vldr	s17, [pc, #-200]	@ 801c1a4 <iNemoEngine_API_Update+0x458c>
 801c26e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c272:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c276:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801c27a:	eee7 8a86 	vfma.f32	s17, s15, s12
 801c27e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801c282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c28a:	f6ff ae0f 	blt.w	801beac <iNemoEngine_API_Update+0x4294>
 801c28e:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c29a:	f57f ae0f 	bpl.w	801bebc <iNemoEngine_API_Update+0x42a4>
 801c29e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801c2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c2a6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c2aa:	eef7 8a08 	vmov.f32	s17, #120	@ 0x3fc00000  1.5
 801c2ae:	eee7 8a86 	vfma.f32	s17, s15, s12
 801c2b2:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 801c2b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2be:	f6ff ae0f 	blt.w	801bee0 <iNemoEngine_API_Update+0x42c8>
 801c2c2:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 801c2c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c2ca:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 801c1a8 <iNemoEngine_API_Update+0x4590>
 801c2ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c2d2:	eef0 8a08 	vmov.f32	s17, #8	@ 0x40400000  3.0
 801c2d6:	eee7 8a87 	vfma.f32	s17, s15, s14
 801c2da:	e601      	b.n	801bee0 <iNemoEngine_API_Update+0x42c8>
 801c2dc:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 801c2e0:	e5fe      	b.n	801bee0 <iNemoEngine_API_Update+0x42c8>
 801c2e2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c2e6:	e5fb      	b.n	801bee0 <iNemoEngine_API_Update+0x42c8>
 801c2e8:	ed1f 8a50 	vldr	s16, [pc, #-320]	@ 801c1ac <iNemoEngine_API_Update+0x4594>
 801c2ec:	f7fb bdeb 	b.w	8017ec6 <iNemoEngine_API_Update+0x2ae>

0801c2f0 <MotionFX_GetStateSize>:
 801c2f0:	f44f 6018 	mov.w	r0, #2432	@ 0x980
 801c2f4:	4770      	bx	lr
 801c2f6:	bf00      	nop

0801c2f8 <MotionFX_initialize>:
 801c2f8:	4a4c      	ldr	r2, [pc, #304]	@ (801c42c <MotionFX_initialize+0x134>)
 801c2fa:	6813      	ldr	r3, [r2, #0]
 801c2fc:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 801c300:	f023 0301 	bic.w	r3, r3, #1
 801c304:	b530      	push	{r4, r5, lr}
 801c306:	6013      	str	r3, [r2, #0]
 801c308:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801c30c:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801c310:	400b      	ands	r3, r1
 801c312:	f24c 2240 	movw	r2, #49728	@ 0xc240
 801c316:	4293      	cmp	r3, r2
 801c318:	b085      	sub	sp, #20
 801c31a:	4604      	mov	r4, r0
 801c31c:	d013      	beq.n	801c346 <MotionFX_initialize+0x4e>
 801c31e:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801c322:	f24c 2270 	movw	r2, #49776	@ 0xc270
 801c326:	4019      	ands	r1, r3
 801c328:	4291      	cmp	r1, r2
 801c32a:	d00c      	beq.n	801c346 <MotionFX_initialize+0x4e>
 801c32c:	4a40      	ldr	r2, [pc, #256]	@ (801c430 <MotionFX_initialize+0x138>)
 801c32e:	2301      	movs	r3, #1
 801c330:	6093      	str	r3, [r2, #8]
 801c332:	6893      	ldr	r3, [r2, #8]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d1fc      	bne.n	801c332 <MotionFX_initialize+0x3a>
 801c338:	4b3e      	ldr	r3, [pc, #248]	@ (801c434 <MotionFX_initialize+0x13c>)
 801c33a:	6013      	str	r3, [r2, #0]
 801c33c:	6812      	ldr	r2, [r2, #0]
 801c33e:	4b3e      	ldr	r3, [pc, #248]	@ (801c438 <MotionFX_initialize+0x140>)
 801c340:	429a      	cmp	r2, r3
 801c342:	d02c      	beq.n	801c39e <MotionFX_initialize+0xa6>
 801c344:	e7fe      	b.n	801c344 <MotionFX_initialize+0x4c>
 801c346:	4b3d      	ldr	r3, [pc, #244]	@ (801c43c <MotionFX_initialize+0x144>)
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d1ee      	bne.n	801c32c <MotionFX_initialize+0x34>
 801c34e:	4a3c      	ldr	r2, [pc, #240]	@ (801c440 <MotionFX_initialize+0x148>)
 801c350:	6813      	ldr	r3, [r2, #0]
 801c352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c356:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801c35a:	d056      	beq.n	801c40a <MotionFX_initialize+0x112>
 801c35c:	6813      	ldr	r3, [r2, #0]
 801c35e:	f240 4183 	movw	r1, #1155	@ 0x483
 801c362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c366:	428b      	cmp	r3, r1
 801c368:	d04f      	beq.n	801c40a <MotionFX_initialize+0x112>
 801c36a:	6813      	ldr	r3, [r2, #0]
 801c36c:	f240 4285 	movw	r2, #1157	@ 0x485
 801c370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c374:	4293      	cmp	r3, r2
 801c376:	d048      	beq.n	801c40a <MotionFX_initialize+0x112>
 801c378:	4b32      	ldr	r3, [pc, #200]	@ (801c444 <MotionFX_initialize+0x14c>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c380:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c384:	d1d2      	bne.n	801c32c <MotionFX_initialize+0x34>
 801c386:	4a30      	ldr	r2, [pc, #192]	@ (801c448 <MotionFX_initialize+0x150>)
 801c388:	2301      	movs	r3, #1
 801c38a:	6093      	str	r3, [r2, #8]
 801c38c:	6893      	ldr	r3, [r2, #8]
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d1fc      	bne.n	801c38c <MotionFX_initialize+0x94>
 801c392:	4b28      	ldr	r3, [pc, #160]	@ (801c434 <MotionFX_initialize+0x13c>)
 801c394:	6013      	str	r3, [r2, #0]
 801c396:	6812      	ldr	r2, [r2, #0]
 801c398:	4b27      	ldr	r3, [pc, #156]	@ (801c438 <MotionFX_initialize+0x140>)
 801c39a:	429a      	cmp	r2, r3
 801c39c:	d1d2      	bne.n	801c344 <MotionFX_initialize+0x4c>
 801c39e:	4b2b      	ldr	r3, [pc, #172]	@ (801c44c <MotionFX_initialize+0x154>)
 801c3a0:	4a2b      	ldr	r2, [pc, #172]	@ (801c450 <MotionFX_initialize+0x158>)
 801c3a2:	9303      	str	r3, [sp, #12]
 801c3a4:	2501      	movs	r5, #1
 801c3a6:	4620      	mov	r0, r4
 801c3a8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801c3ac:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 801c3b0:	f7fb f942 	bl	8017638 <MFX_emptyAttitude>
 801c3b4:	a901      	add	r1, sp, #4
 801c3b6:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c3ba:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 801c3be:	f7f9 feff 	bl	80161c0 <updateOrientation>
 801c3c2:	a903      	add	r1, sp, #12
 801c3c4:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c3c8:	f7f9 fefa 	bl	80161c0 <updateOrientation>
 801c3cc:	a902      	add	r1, sp, #8
 801c3ce:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c3d2:	f7f9 fef5 	bl	80161c0 <updateOrientation>
 801c3d6:	4b1f      	ldr	r3, [pc, #124]	@ (801c454 <MotionFX_initialize+0x15c>)
 801c3d8:	491f      	ldr	r1, [pc, #124]	@ (801c458 <MotionFX_initialize+0x160>)
 801c3da:	6363      	str	r3, [r4, #52]	@ 0x34
 801c3dc:	4b1f      	ldr	r3, [pc, #124]	@ (801c45c <MotionFX_initialize+0x164>)
 801c3de:	4a20      	ldr	r2, [pc, #128]	@ (801c460 <MotionFX_initialize+0x168>)
 801c3e0:	62a1      	str	r1, [r4, #40]	@ 0x28
 801c3e2:	61e3      	str	r3, [r4, #28]
 801c3e4:	491f      	ldr	r1, [pc, #124]	@ (801c464 <MotionFX_initialize+0x16c>)
 801c3e6:	61a2      	str	r2, [r4, #24]
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 801c3ee:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801c3f2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 801c3f6:	f240 1301 	movw	r3, #257	@ 0x101
 801c3fa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c3fc:	6221      	str	r1, [r4, #32]
 801c3fe:	80a2      	strh	r2, [r4, #4]
 801c400:	f8a4 300d 	strh.w	r3, [r4, #13]
 801c404:	73e5      	strb	r5, [r4, #15]
 801c406:	b005      	add	sp, #20
 801c408:	bd30      	pop	{r4, r5, pc}
 801c40a:	4a17      	ldr	r2, [pc, #92]	@ (801c468 <MotionFX_initialize+0x170>)
 801c40c:	2301      	movs	r3, #1
 801c40e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801c412:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801c416:	2b00      	cmp	r3, #0
 801c418:	d1fb      	bne.n	801c412 <MotionFX_initialize+0x11a>
 801c41a:	4b06      	ldr	r3, [pc, #24]	@ (801c434 <MotionFX_initialize+0x13c>)
 801c41c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 801c420:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801c424:	4b04      	ldr	r3, [pc, #16]	@ (801c438 <MotionFX_initialize+0x140>)
 801c426:	429a      	cmp	r2, r3
 801c428:	d0b9      	beq.n	801c39e <MotionFX_initialize+0xa6>
 801c42a:	e78b      	b.n	801c344 <MotionFX_initialize+0x4c>
 801c42c:	e0002000 	.word	0xe0002000
 801c430:	40023000 	.word	0x40023000
 801c434:	f407a5c2 	.word	0xf407a5c2
 801c438:	b5e8b5cd 	.word	0xb5e8b5cd
 801c43c:	e0042000 	.word	0xe0042000
 801c440:	5c001000 	.word	0x5c001000
 801c444:	50081000 	.word	0x50081000
 801c448:	4c004000 	.word	0x4c004000
 801c44c:	00756e65 	.word	0x00756e65
 801c450:	20000544 	.word	0x20000544
 801c454:	3f2ac083 	.word	0x3f2ac083
 801c458:	3f666666 	.word	0x3f666666
 801c45c:	3a378034 	.word	0x3a378034
 801c460:	3a51b717 	.word	0x3a51b717
 801c464:	3b378034 	.word	0x3b378034
 801c468:	58024000 	.word	0x58024000

0801c46c <MotionFX_setKnobs>:
 801c46c:	4b24      	ldr	r3, [pc, #144]	@ (801c500 <MotionFX_setKnobs+0x94>)
 801c46e:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 801c472:	b902      	cbnz	r2, 801c476 <MotionFX_setKnobs+0xa>
 801c474:	4770      	bx	lr
 801c476:	460b      	mov	r3, r1
 801c478:	2900      	cmp	r1, #0
 801c47a:	d0fb      	beq.n	801c474 <MotionFX_setKnobs+0x8>
 801c47c:	b510      	push	{r4, lr}
 801c47e:	4604      	mov	r4, r0
 801c480:	689a      	ldr	r2, [r3, #8]
 801c482:	6808      	ldr	r0, [r1, #0]
 801c484:	6849      	ldr	r1, [r1, #4]
 801c486:	62e1      	str	r1, [r4, #44]	@ 0x2c
 801c488:	62a0      	str	r0, [r4, #40]	@ 0x28
 801c48a:	6362      	str	r2, [r4, #52]	@ 0x34
 801c48c:	7b1a      	ldrb	r2, [r3, #12]
 801c48e:	7162      	strb	r2, [r4, #5]
 801c490:	6918      	ldr	r0, [r3, #16]
 801c492:	6959      	ldr	r1, [r3, #20]
 801c494:	699a      	ldr	r2, [r3, #24]
 801c496:	6222      	str	r2, [r4, #32]
 801c498:	61a0      	str	r0, [r4, #24]
 801c49a:	61e1      	str	r1, [r4, #28]
 801c49c:	7f1a      	ldrb	r2, [r3, #28]
 801c49e:	7122      	strb	r2, [r4, #4]
 801c4a0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801c4a4:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 801c4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c4aa:	f884 2978 	strb.w	r2, [r4, #2424]	@ 0x978
 801c4ae:	b084      	sub	sp, #16
 801c4b0:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 801c4b4:	7fda      	ldrb	r2, [r3, #31]
 801c4b6:	f88d 2006 	strb.w	r2, [sp, #6]
 801c4ba:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c4be:	f8b3 2021 	ldrh.w	r2, [r3, #33]	@ 0x21
 801c4c2:	f8ad 2008 	strh.w	r2, [sp, #8]
 801c4c6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801c4ca:	f88d 200a 	strb.w	r2, [sp, #10]
 801c4ce:	f8b3 2025 	ldrh.w	r2, [r3, #37]	@ 0x25
 801c4d2:	f8ad 200c 	strh.w	r2, [sp, #12]
 801c4d6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801c4da:	f88d 300e 	strb.w	r3, [sp, #14]
 801c4de:	a901      	add	r1, sp, #4
 801c4e0:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c4e4:	f7f9 fe6c 	bl	80161c0 <updateOrientation>
 801c4e8:	a903      	add	r1, sp, #12
 801c4ea:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c4ee:	f7f9 fe67 	bl	80161c0 <updateOrientation>
 801c4f2:	a902      	add	r1, sp, #8
 801c4f4:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c4f8:	f7f9 fe62 	bl	80161c0 <updateOrientation>
 801c4fc:	b004      	add	sp, #16
 801c4fe:	bd10      	pop	{r4, pc}
 801c500:	20000544 	.word	0x20000544

0801c504 <MotionFX_getKnobs>:
 801c504:	4b1d      	ldr	r3, [pc, #116]	@ (801c57c <MotionFX_getKnobs+0x78>)
 801c506:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c50a:	b903      	cbnz	r3, 801c50e <MotionFX_getKnobs+0xa>
 801c50c:	4770      	bx	lr
 801c50e:	460a      	mov	r2, r1
 801c510:	2900      	cmp	r1, #0
 801c512:	d0fb      	beq.n	801c50c <MotionFX_getKnobs+0x8>
 801c514:	b510      	push	{r4, lr}
 801c516:	4604      	mov	r4, r0
 801c518:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801c51a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c51c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c51e:	6093      	str	r3, [r2, #8]
 801c520:	6010      	str	r0, [r2, #0]
 801c522:	6051      	str	r1, [r2, #4]
 801c524:	7963      	ldrb	r3, [r4, #5]
 801c526:	7313      	strb	r3, [r2, #12]
 801c528:	69a0      	ldr	r0, [r4, #24]
 801c52a:	69e1      	ldr	r1, [r4, #28]
 801c52c:	6a23      	ldr	r3, [r4, #32]
 801c52e:	6193      	str	r3, [r2, #24]
 801c530:	6110      	str	r0, [r2, #16]
 801c532:	6151      	str	r1, [r2, #20]
 801c534:	7923      	ldrb	r3, [r4, #4]
 801c536:	7713      	strb	r3, [r2, #28]
 801c538:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801c53c:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 801c540:	f894 3978 	ldrb.w	r3, [r4, #2424]	@ 0x978
 801c544:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801c546:	f102 011d 	add.w	r1, r2, #29
 801c54a:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c54e:	f7f9 fc8f 	bl	8015e70 <findAxis>
 801c552:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 801c556:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c55a:	f7f9 fc89 	bl	8015e70 <findAxis>
 801c55e:	f102 0125 	add.w	r1, r2, #37	@ 0x25
 801c562:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c566:	f7f9 fc83 	bl	8015e70 <findAxis>
 801c56a:	2300      	movs	r3, #0
 801c56c:	f882 3020 	strb.w	r3, [r2, #32]
 801c570:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 801c574:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 801c578:	bd10      	pop	{r4, pc}
 801c57a:	bf00      	nop
 801c57c:	20000544 	.word	0x20000544

0801c580 <MotionFX_enable_6X>:
 801c580:	4b0e      	ldr	r3, [pc, #56]	@ (801c5bc <MotionFX_enable_6X+0x3c>)
 801c582:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c586:	b903      	cbnz	r3, 801c58a <MotionFX_enable_6X+0xa>
 801c588:	4770      	bx	lr
 801c58a:	2900      	cmp	r1, #0
 801c58c:	d0fc      	beq.n	801c588 <MotionFX_enable_6X+0x8>
 801c58e:	b530      	push	{r4, r5, lr}
 801c590:	1d05      	adds	r5, r0, #4
 801c592:	b099      	sub	sp, #100	@ 0x64
 801c594:	4604      	mov	r4, r0
 801c596:	4629      	mov	r1, r5
 801c598:	225c      	movs	r2, #92	@ 0x5c
 801c59a:	a801      	add	r0, sp, #4
 801c59c:	f001 f86f 	bl	801d67e <memcpy>
 801c5a0:	4620      	mov	r0, r4
 801c5a2:	f7fb f849 	bl	8017638 <MFX_emptyAttitude>
 801c5a6:	225c      	movs	r2, #92	@ 0x5c
 801c5a8:	a901      	add	r1, sp, #4
 801c5aa:	4628      	mov	r0, r5
 801c5ac:	f001 f867 	bl	801d67e <memcpy>
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801c5b6:	7363      	strb	r3, [r4, #13]
 801c5b8:	b019      	add	sp, #100	@ 0x64
 801c5ba:	bd30      	pop	{r4, r5, pc}
 801c5bc:	20000544 	.word	0x20000544

0801c5c0 <MotionFX_enable_9X>:
 801c5c0:	4b0e      	ldr	r3, [pc, #56]	@ (801c5fc <MotionFX_enable_9X+0x3c>)
 801c5c2:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c5c6:	b903      	cbnz	r3, 801c5ca <MotionFX_enable_9X+0xa>
 801c5c8:	4770      	bx	lr
 801c5ca:	2900      	cmp	r1, #0
 801c5cc:	d0fc      	beq.n	801c5c8 <MotionFX_enable_9X+0x8>
 801c5ce:	b530      	push	{r4, r5, lr}
 801c5d0:	1d05      	adds	r5, r0, #4
 801c5d2:	b099      	sub	sp, #100	@ 0x64
 801c5d4:	4604      	mov	r4, r0
 801c5d6:	4629      	mov	r1, r5
 801c5d8:	225c      	movs	r2, #92	@ 0x5c
 801c5da:	a801      	add	r0, sp, #4
 801c5dc:	f001 f84f 	bl	801d67e <memcpy>
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	f7fb f829 	bl	8017638 <MFX_emptyAttitude>
 801c5e6:	225c      	movs	r2, #92	@ 0x5c
 801c5e8:	a901      	add	r1, sp, #4
 801c5ea:	4628      	mov	r0, r5
 801c5ec:	f001 f847 	bl	801d67e <memcpy>
 801c5f0:	2301      	movs	r3, #1
 801c5f2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801c5f6:	7363      	strb	r3, [r4, #13]
 801c5f8:	b019      	add	sp, #100	@ 0x64
 801c5fa:	bd30      	pop	{r4, r5, pc}
 801c5fc:	20000544 	.word	0x20000544

0801c600 <MotionFX_update>:
 801c600:	b430      	push	{r4, r5}
 801c602:	4c06      	ldr	r4, [pc, #24]	@ (801c61c <MotionFX_update+0x1c>)
 801c604:	9d02      	ldr	r5, [sp, #8]
 801c606:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 801c60a:	b90c      	cbnz	r4, 801c610 <MotionFX_update+0x10>
 801c60c:	bc30      	pop	{r4, r5}
 801c60e:	4770      	bx	lr
 801c610:	ed93 0a00 	vldr	s0, [r3]
 801c614:	462b      	mov	r3, r5
 801c616:	bc30      	pop	{r4, r5}
 801c618:	f7fb bafe 	b.w	8017c18 <iNemoEngine_API_Update>
 801c61c:	20000544 	.word	0x20000544

0801c620 <MotionFX_propagate>:
 801c620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c624:	ed2d 8b06 	vpush	{d8-d10}
 801c628:	4ca2      	ldr	r4, [pc, #648]	@ (801c8b4 <MotionFX_propagate+0x294>)
 801c62a:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 801c62e:	b0a1      	sub	sp, #132	@ 0x84
 801c630:	b926      	cbnz	r6, 801c63c <MotionFX_propagate+0x1c>
 801c632:	b021      	add	sp, #132	@ 0x84
 801c634:	ecbd 8b06 	vpop	{d8-d10}
 801c638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c63c:	4694      	mov	ip, r2
 801c63e:	4604      	mov	r4, r0
 801c640:	460d      	mov	r5, r1
 801c642:	68d0      	ldr	r0, [r2, #12]
 801c644:	6911      	ldr	r1, [r2, #16]
 801c646:	6952      	ldr	r2, [r2, #20]
 801c648:	edd3 9a00 	vldr	s19, [r3]
 801c64c:	ab13      	add	r3, sp, #76	@ 0x4c
 801c64e:	c307      	stmia	r3!, {r0, r1, r2}
 801c650:	f8dc 0000 	ldr.w	r0, [ip]
 801c654:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c658:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c65c:	ab10      	add	r3, sp, #64	@ 0x40
 801c65e:	c307      	stmia	r3!, {r0, r1, r2}
 801c660:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801c664:	f8dc 101c 	ldr.w	r1, [ip, #28]
 801c668:	f8dc 2020 	ldr.w	r2, [ip, #32]
 801c66c:	ab16      	add	r3, sp, #88	@ 0x58
 801c66e:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 801c672:	c307      	stmia	r3!, {r0, r1, r2}
 801c674:	4639      	mov	r1, r7
 801c676:	a803      	add	r0, sp, #12
 801c678:	aa13      	add	r2, sp, #76	@ 0x4c
 801c67a:	f7f9 fb97 	bl	8015dac <rotVect>
 801c67e:	aa16      	add	r2, sp, #88	@ 0x58
 801c680:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 801c684:	a806      	add	r0, sp, #24
 801c686:	f7f9 fb91 	bl	8015dac <rotVect>
 801c68a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	@ 0x94c
 801c68e:	2b09      	cmp	r3, #9
 801c690:	d829      	bhi.n	801c6e6 <MotionFX_propagate+0xc6>
 801c692:	eddd 8a04 	vldr	s17, [sp, #16]
 801c696:	ed9d 9a03 	vldr	s18, [sp, #12]
 801c69a:	ed9d 8a05 	vldr	s16, [sp, #20]
 801c69e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801c6a2:	eee9 7a09 	vfma.f32	s15, s18, s18
 801c6a6:	eee8 7a08 	vfma.f32	s15, s16, s16
 801c6aa:	ee17 0a90 	vmov	r0, s15
 801c6ae:	f7e3 ff53 	bl	8000558 <__aeabi_f2d>
 801c6b2:	ec41 0b10 	vmov	d0, r0, r1
 801c6b6:	f002 ff5f 	bl	801f578 <sqrt>
 801c6ba:	ec51 0b10 	vmov	r0, r1, d0
 801c6be:	f7e4 fa9b 	bl	8000bf8 <__aeabi_d2f>
 801c6c2:	ee07 0a90 	vmov	s15, r0
 801c6c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c6ca:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801c6ce:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c6d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c6d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c6da:	ed8d 9a03 	vstr	s18, [sp, #12]
 801c6de:	edcd 8a04 	vstr	s17, [sp, #16]
 801c6e2:	ed8d 8a05 	vstr	s16, [sp, #20]
 801c6e6:	7923      	ldrb	r3, [r4, #4]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	f000 80ce 	beq.w	801c88a <MotionFX_propagate+0x26a>
 801c6ee:	ee07 3a90 	vmov	s15, r3
 801c6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c6fe:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 801c702:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 801c706:	edd3 7a00 	vldr	s15, [r3]
 801c70a:	eddd 8a06 	vldr	s17, [sp, #24]
 801c70e:	ed9d 6a07 	vldr	s12, [sp, #28]
 801c712:	eddd 6a08 	vldr	s13, [sp, #32]
 801c716:	ed9f 8a68 	vldr	s16, [pc, #416]	@ 801c8b8 <MotionFX_propagate+0x298>
 801c71a:	eddf 5a68 	vldr	s11, [pc, #416]	@ 801c8bc <MotionFX_propagate+0x29c>
 801c71e:	eee7 7a28 	vfma.f32	s15, s14, s17
 801c722:	ee26 9a08 	vmul.f32	s18, s12, s16
 801c726:	edc3 7a00 	vstr	s15, [r3]
 801c72a:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 801c72e:	edd3 7a00 	vldr	s15, [r3]
 801c732:	ed8d 9a07 	vstr	s18, [sp, #28]
 801c736:	eee7 7a06 	vfma.f32	s15, s14, s12
 801c73a:	ee68 8a88 	vmul.f32	s17, s17, s16
 801c73e:	edc3 7a00 	vstr	s15, [r3]
 801c742:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 801c746:	edd3 7a00 	vldr	s15, [r3]
 801c74a:	edcd 8a06 	vstr	s17, [sp, #24]
 801c74e:	eee7 7a26 	vfma.f32	s15, s14, s13
 801c752:	ee26 8a88 	vmul.f32	s16, s13, s16
 801c756:	edc3 7a00 	vstr	s15, [r3]
 801c75a:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 801c75e:	edd3 7a00 	vldr	s15, [r3]
 801c762:	ed8d 8a08 	vstr	s16, [sp, #32]
 801c766:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 801c76a:	ed93 7a00 	vldr	s14, [r3]
 801c76e:	ee39 9a67 	vsub.f32	s18, s18, s15
 801c772:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801c776:	ee69 7a09 	vmul.f32	s15, s18, s18
 801c77a:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 801c77e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801c782:	ed93 7a00 	vldr	s14, [r3]
 801c786:	ee38 8a47 	vsub.f32	s16, s16, s14
 801c78a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801c78e:	eee8 7a08 	vfma.f32	s15, s16, s16
 801c792:	ee29 0a80 	vmul.f32	s0, s19, s0
 801c796:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c79e:	dd79      	ble.n	801c894 <MotionFX_propagate+0x274>
 801c7a0:	eeb1 aae7 	vsqrt.f32	s20, s15
 801c7a4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 801c7a8:	eeb0 0a69 	vmov.f32	s0, s19
 801c7ac:	f003 f86e 	bl	801f88c <sinf>
 801c7b0:	eeb0 7a40 	vmov.f32	s14, s0
 801c7b4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c7b8:	eeb0 0a69 	vmov.f32	s0, s19
 801c7bc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c7c0:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c7c4:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c7c8:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 801c7cc:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 801c7d0:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 801c7d4:	f003 f80e 	bl	801f7f4 <cosf>
 801c7d8:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 801c7dc:	a809      	add	r0, sp, #36	@ 0x24
 801c7de:	f604 1838 	addw	r8, r4, #2360	@ 0x938
 801c7e2:	4632      	mov	r2, r6
 801c7e4:	4631      	mov	r1, r6
 801c7e6:	f7f9 fd6d 	bl	80162c4 <qmult>
 801c7ea:	edd8 6a00 	vldr	s13, [r8]
 801c7ee:	edd6 5a00 	vldr	s11, [r6]
 801c7f2:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 801c7f6:	f604 1934 	addw	r9, r4, #2356	@ 0x934
 801c7fa:	ed99 6a00 	vldr	s12, [r9]
 801c7fe:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801c802:	4639      	mov	r1, r7
 801c804:	eee6 7a06 	vfma.f32	s15, s12, s12
 801c808:	f604 173c 	addw	r7, r4, #2364	@ 0x93c
 801c80c:	3301      	adds	r3, #1
 801c80e:	ed97 7a00 	vldr	s14, [r7]
 801c812:	eee7 7a07 	vfma.f32	s15, s14, s14
 801c816:	aa13      	add	r2, sp, #76	@ 0x4c
 801c818:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801c81c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801c820:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801c824:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801c828:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801c82c:	ee27 6a86 	vmul.f32	s12, s15, s12
 801c830:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c834:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c838:	edc6 5a00 	vstr	s11, [r6]
 801c83c:	ed89 6a00 	vstr	s12, [r9]
 801c840:	edc8 6a00 	vstr	s13, [r8]
 801c844:	ed87 7a00 	vstr	s14, [r7]
 801c848:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 801c84c:	f7f9 faae 	bl	8015dac <rotVect>
 801c850:	6833      	ldr	r3, [r6, #0]
 801c852:	60eb      	str	r3, [r5, #12]
 801c854:	f8d9 3000 	ldr.w	r3, [r9]
 801c858:	f8d8 2000 	ldr.w	r2, [r8]
 801c85c:	612b      	str	r3, [r5, #16]
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	61ab      	str	r3, [r5, #24]
 801c862:	616a      	str	r2, [r5, #20]
 801c864:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801c868:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 801c86c:	e9cd 3200 	strd	r3, r2, [sp]
 801c870:	4601      	mov	r1, r0
 801c872:	f105 031c 	add.w	r3, r5, #28
 801c876:	462a      	mov	r2, r5
 801c878:	f105 000c 	add.w	r0, r5, #12
 801c87c:	f7fa fe12 	bl	80174a4 <output_update>
 801c880:	b021      	add	sp, #132	@ 0x84
 801c882:	ecbd 8b06 	vpop	{d8-d10}
 801c886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c88a:	2301      	movs	r3, #1
 801c88c:	7123      	strb	r3, [r4, #4]
 801c88e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c892:	e734      	b.n	801c6fe <MotionFX_propagate+0xde>
 801c894:	ee68 8a80 	vmul.f32	s17, s17, s0
 801c898:	ee29 9a00 	vmul.f32	s18, s18, s0
 801c89c:	ee28 8a00 	vmul.f32	s16, s16, s0
 801c8a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801c8a4:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 801c8a8:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
 801c8ac:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 801c8b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801c8b2:	e793      	b.n	801c7dc <MotionFX_propagate+0x1bc>
 801c8b4:	20000544 	.word	0x20000544
 801c8b8:	3c8efa35 	.word	0x3c8efa35
 801c8bc:	38d1b718 	.word	0x38d1b718

0801c8c0 <MotionFX_MagCal_init>:
 801c8c0:	b570      	push	{r4, r5, r6, lr}
 801c8c2:	4c42      	ldr	r4, [pc, #264]	@ (801c9cc <MotionFX_MagCal_init+0x10c>)
 801c8c4:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 801c8c8:	b903      	cbnz	r3, 801c8cc <MotionFX_MagCal_init+0xc>
 801c8ca:	bd70      	pop	{r4, r5, r6, pc}
 801c8cc:	1e43      	subs	r3, r0, #1
 801c8ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c8d2:	4605      	mov	r5, r0
 801c8d4:	d2f9      	bcs.n	801c8ca <MotionFX_MagCal_init+0xa>
 801c8d6:	2900      	cmp	r1, #0
 801c8d8:	d139      	bne.n	801c94e <MotionFX_MagCal_init+0x8e>
 801c8da:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
 801c8de:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c8e2:	4a3b      	ldr	r2, [pc, #236]	@ (801c9d0 <MotionFX_MagCal_init+0x110>)
 801c8e4:	1b5b      	subs	r3, r3, r5
 801c8e6:	ee07 3a90 	vmov	s15, r3
 801c8ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c8ee:	23c8      	movs	r3, #200	@ 0xc8
 801c8f0:	eef0 7ae7 	vabs.f32	s15, s15
 801c8f4:	fb93 f3f5 	sdiv	r3, r3, r5
 801c8f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c8fc:	b2db      	uxtb	r3, r3
 801c8fe:	2b0f      	cmp	r3, #15
 801c900:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c904:	bf28      	it	cs
 801c906:	230f      	movcs	r3, #15
 801c908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c90c:	6015      	str	r5, [r2, #0]
 801c90e:	f884 37de 	strb.w	r3, [r4, #2014]	@ 0x7de
 801c912:	b22d      	sxth	r5, r5
 801c914:	dc0e      	bgt.n	801c934 <MotionFX_MagCal_init+0x74>
 801c916:	edd4 7a01 	vldr	s15, [r4, #4]
 801c91a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 801c9d4 <MotionFX_MagCal_init+0x114>
 801c91e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801c9d8 <MotionFX_MagCal_init+0x118>
 801c922:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c926:	eef0 7ae7 	vabs.f32	s15, s15
 801c92a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c932:	dd08      	ble.n	801c946 <MotionFX_MagCal_init+0x86>
 801c934:	2300      	movs	r3, #0
 801c936:	4a29      	ldr	r2, [pc, #164]	@ (801c9dc <MotionFX_MagCal_init+0x11c>)
 801c938:	8123      	strh	r3, [r4, #8]
 801c93a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 801c93e:	60e3      	str	r3, [r4, #12]
 801c940:	8021      	strh	r1, [r4, #0]
 801c942:	8065      	strh	r5, [r4, #2]
 801c944:	6062      	str	r2, [r4, #4]
 801c946:	2300      	movs	r3, #0
 801c948:	f884 3858 	strb.w	r3, [r4, #2136]	@ 0x858
 801c94c:	bd70      	pop	{r4, r5, r6, pc}
 801c94e:	2600      	movs	r6, #0
 801c950:	f44f 0302 	mov.w	r3, #8519680	@ 0x820000
 801c954:	e9c4 3602 	strd	r3, r6, [r4, #8]
 801c958:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 801c95c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c960:	4631      	mov	r1, r6
 801c962:	6123      	str	r3, [r4, #16]
 801c964:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 801c968:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c96c:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 801c970:	f884 6048 	strb.w	r6, [r4, #72]	@ 0x48
 801c974:	64e6      	str	r6, [r4, #76]	@ 0x4c
 801c976:	82a6      	strh	r6, [r4, #20]
 801c978:	f000 fe01 	bl	801d57e <memset>
 801c97c:	225f      	movs	r2, #95	@ 0x5f
 801c97e:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
 801c982:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 801c986:	84a2      	strh	r2, [r4, #36]	@ 0x24
 801c988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c98c:	23ff      	movs	r3, #255	@ 0xff
 801c98e:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 801c992:	4631      	mov	r1, r6
 801c994:	2230      	movs	r2, #48	@ 0x30
 801c996:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801c99a:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 801c99e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801c9a2:	e9c4 6606 	strd	r6, r6, [r4, #24]
 801c9a6:	6226      	str	r6, [r4, #32]
 801c9a8:	f000 fde9 	bl	801d57e <memset>
 801c9ac:	f1a5 030a 	sub.w	r3, r5, #10
 801c9b0:	b29b      	uxth	r3, r3
 801c9b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c9b6:	2101      	movs	r1, #1
 801c9b8:	2b32      	cmp	r3, #50	@ 0x32
 801c9ba:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
 801c9be:	67e2      	str	r2, [r4, #124]	@ 0x7c
 801c9c0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 801c9c4:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801c9c8:	d889      	bhi.n	801c8de <MotionFX_MagCal_init+0x1e>
 801c9ca:	e786      	b.n	801c8da <MotionFX_MagCal_init+0x1a>
 801c9cc:	20000544 	.word	0x20000544
 801c9d0:	20000000 	.word	0x20000000
 801c9d4:	3dcccccd 	.word	0x3dcccccd
 801c9d8:	3c23d70a 	.word	0x3c23d70a
 801c9dc:	3dcccccd 	.word	0x3dcccccd

0801c9e0 <MotionFX_MagCal_getParams>:
 801c9e0:	4b20      	ldr	r3, [pc, #128]	@ (801ca64 <MotionFX_MagCal_getParams+0x84>)
 801c9e2:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 801c9e6:	b902      	cbnz	r2, 801c9ea <MotionFX_MagCal_getParams+0xa>
 801c9e8:	4770      	bx	lr
 801c9ea:	b530      	push	{r4, r5, lr}
 801c9ec:	f103 0e6c 	add.w	lr, r3, #108	@ 0x6c
 801c9f0:	4604      	mov	r4, r0
 801c9f2:	f893 506c 	ldrb.w	r5, [r3, #108]	@ 0x6c
 801c9f6:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 801ca68 <MotionFX_MagCal_getParams+0x88>
 801c9fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c9fe:	b08f      	sub	sp, #60	@ 0x3c
 801ca00:	f10d 0c04 	add.w	ip, sp, #4
 801ca04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca14:	eddd 6a02 	vldr	s13, [sp, #8]
 801ca18:	ed9d 7a03 	vldr	s14, [sp, #12]
 801ca1c:	eddd 7a04 	vldr	s15, [sp, #16]
 801ca20:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801ca24:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ca28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ca34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca3c:	f8de 3000 	ldr.w	r3, [lr]
 801ca40:	7325      	strb	r5, [r4, #12]
 801ca42:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ca46:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ca4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ca4e:	edc4 6a00 	vstr	s13, [r4]
 801ca52:	f8cc 3000 	str.w	r3, [ip]
 801ca56:	ed84 7a01 	vstr	s14, [r4, #4]
 801ca5a:	edc4 7a02 	vstr	s15, [r4, #8]
 801ca5e:	b00f      	add	sp, #60	@ 0x3c
 801ca60:	bd30      	pop	{r4, r5, pc}
 801ca62:	bf00      	nop
 801ca64:	20000544 	.word	0x20000544
 801ca68:	3b03126f 	.word	0x3b03126f

0801ca6c <MotionFX_GetLibVersion>:
 801ca6c:	b570      	push	{r4, r5, r6, lr}
 801ca6e:	4b13      	ldr	r3, [pc, #76]	@ (801cabc <MotionFX_GetLibVersion+0x50>)
 801ca70:	f893 63c4 	ldrb.w	r6, [r3, #964]	@ 0x3c4
 801ca74:	b08a      	sub	sp, #40	@ 0x28
 801ca76:	b1ee      	cbz	r6, 801cab4 <MotionFX_GetLibVersion+0x48>
 801ca78:	4d11      	ldr	r5, [pc, #68]	@ (801cac0 <MotionFX_GetLibVersion+0x54>)
 801ca7a:	4684      	mov	ip, r0
 801ca7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ca7e:	f10d 0e04 	add.w	lr, sp, #4
 801ca82:	4674      	mov	r4, lr
 801ca84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ca88:	682b      	ldr	r3, [r5, #0]
 801ca8a:	f82e 3b02 	strh.w	r3, [lr], #2
 801ca8e:	0c1b      	lsrs	r3, r3, #16
 801ca90:	f88e 3000 	strb.w	r3, [lr]
 801ca94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca96:	f8cc 2008 	str.w	r2, [ip, #8]
 801ca9a:	8822      	ldrh	r2, [r4, #0]
 801ca9c:	f8ac 2010 	strh.w	r2, [ip, #16]
 801caa0:	78a2      	ldrb	r2, [r4, #2]
 801caa2:	f8cc 0000 	str.w	r0, [ip]
 801caa6:	2612      	movs	r6, #18
 801caa8:	f8cc 1004 	str.w	r1, [ip, #4]
 801caac:	f8cc 300c 	str.w	r3, [ip, #12]
 801cab0:	f88c 2012 	strb.w	r2, [ip, #18]
 801cab4:	4630      	mov	r0, r6
 801cab6:	b00a      	add	sp, #40	@ 0x28
 801cab8:	bd70      	pop	{r4, r5, r6, pc}
 801caba:	bf00      	nop
 801cabc:	20000544 	.word	0x20000544
 801cac0:	08023930 	.word	0x08023930

0801cac4 <__cvt>:
 801cac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cac8:	ec57 6b10 	vmov	r6, r7, d0
 801cacc:	2f00      	cmp	r7, #0
 801cace:	460c      	mov	r4, r1
 801cad0:	4619      	mov	r1, r3
 801cad2:	463b      	mov	r3, r7
 801cad4:	bfbb      	ittet	lt
 801cad6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801cada:	461f      	movlt	r7, r3
 801cadc:	2300      	movge	r3, #0
 801cade:	232d      	movlt	r3, #45	@ 0x2d
 801cae0:	700b      	strb	r3, [r1, #0]
 801cae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cae4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801cae8:	4691      	mov	r9, r2
 801caea:	f023 0820 	bic.w	r8, r3, #32
 801caee:	bfbc      	itt	lt
 801caf0:	4632      	movlt	r2, r6
 801caf2:	4616      	movlt	r6, r2
 801caf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801caf8:	d005      	beq.n	801cb06 <__cvt+0x42>
 801cafa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801cafe:	d100      	bne.n	801cb02 <__cvt+0x3e>
 801cb00:	3401      	adds	r4, #1
 801cb02:	2102      	movs	r1, #2
 801cb04:	e000      	b.n	801cb08 <__cvt+0x44>
 801cb06:	2103      	movs	r1, #3
 801cb08:	ab03      	add	r3, sp, #12
 801cb0a:	9301      	str	r3, [sp, #4]
 801cb0c:	ab02      	add	r3, sp, #8
 801cb0e:	9300      	str	r3, [sp, #0]
 801cb10:	ec47 6b10 	vmov	d0, r6, r7
 801cb14:	4653      	mov	r3, sl
 801cb16:	4622      	mov	r2, r4
 801cb18:	f000 fe4a 	bl	801d7b0 <_dtoa_r>
 801cb1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cb20:	4605      	mov	r5, r0
 801cb22:	d119      	bne.n	801cb58 <__cvt+0x94>
 801cb24:	f019 0f01 	tst.w	r9, #1
 801cb28:	d00e      	beq.n	801cb48 <__cvt+0x84>
 801cb2a:	eb00 0904 	add.w	r9, r0, r4
 801cb2e:	2200      	movs	r2, #0
 801cb30:	2300      	movs	r3, #0
 801cb32:	4630      	mov	r0, r6
 801cb34:	4639      	mov	r1, r7
 801cb36:	f7e3 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 801cb3a:	b108      	cbz	r0, 801cb40 <__cvt+0x7c>
 801cb3c:	f8cd 900c 	str.w	r9, [sp, #12]
 801cb40:	2230      	movs	r2, #48	@ 0x30
 801cb42:	9b03      	ldr	r3, [sp, #12]
 801cb44:	454b      	cmp	r3, r9
 801cb46:	d31e      	bcc.n	801cb86 <__cvt+0xc2>
 801cb48:	9b03      	ldr	r3, [sp, #12]
 801cb4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cb4c:	1b5b      	subs	r3, r3, r5
 801cb4e:	4628      	mov	r0, r5
 801cb50:	6013      	str	r3, [r2, #0]
 801cb52:	b004      	add	sp, #16
 801cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cb5c:	eb00 0904 	add.w	r9, r0, r4
 801cb60:	d1e5      	bne.n	801cb2e <__cvt+0x6a>
 801cb62:	7803      	ldrb	r3, [r0, #0]
 801cb64:	2b30      	cmp	r3, #48	@ 0x30
 801cb66:	d10a      	bne.n	801cb7e <__cvt+0xba>
 801cb68:	2200      	movs	r2, #0
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	4630      	mov	r0, r6
 801cb6e:	4639      	mov	r1, r7
 801cb70:	f7e3 ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 801cb74:	b918      	cbnz	r0, 801cb7e <__cvt+0xba>
 801cb76:	f1c4 0401 	rsb	r4, r4, #1
 801cb7a:	f8ca 4000 	str.w	r4, [sl]
 801cb7e:	f8da 3000 	ldr.w	r3, [sl]
 801cb82:	4499      	add	r9, r3
 801cb84:	e7d3      	b.n	801cb2e <__cvt+0x6a>
 801cb86:	1c59      	adds	r1, r3, #1
 801cb88:	9103      	str	r1, [sp, #12]
 801cb8a:	701a      	strb	r2, [r3, #0]
 801cb8c:	e7d9      	b.n	801cb42 <__cvt+0x7e>

0801cb8e <__exponent>:
 801cb8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb90:	2900      	cmp	r1, #0
 801cb92:	bfba      	itte	lt
 801cb94:	4249      	neglt	r1, r1
 801cb96:	232d      	movlt	r3, #45	@ 0x2d
 801cb98:	232b      	movge	r3, #43	@ 0x2b
 801cb9a:	2909      	cmp	r1, #9
 801cb9c:	7002      	strb	r2, [r0, #0]
 801cb9e:	7043      	strb	r3, [r0, #1]
 801cba0:	dd29      	ble.n	801cbf6 <__exponent+0x68>
 801cba2:	f10d 0307 	add.w	r3, sp, #7
 801cba6:	461d      	mov	r5, r3
 801cba8:	270a      	movs	r7, #10
 801cbaa:	461a      	mov	r2, r3
 801cbac:	fbb1 f6f7 	udiv	r6, r1, r7
 801cbb0:	fb07 1416 	mls	r4, r7, r6, r1
 801cbb4:	3430      	adds	r4, #48	@ 0x30
 801cbb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cbba:	460c      	mov	r4, r1
 801cbbc:	2c63      	cmp	r4, #99	@ 0x63
 801cbbe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801cbc2:	4631      	mov	r1, r6
 801cbc4:	dcf1      	bgt.n	801cbaa <__exponent+0x1c>
 801cbc6:	3130      	adds	r1, #48	@ 0x30
 801cbc8:	1e94      	subs	r4, r2, #2
 801cbca:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cbce:	1c41      	adds	r1, r0, #1
 801cbd0:	4623      	mov	r3, r4
 801cbd2:	42ab      	cmp	r3, r5
 801cbd4:	d30a      	bcc.n	801cbec <__exponent+0x5e>
 801cbd6:	f10d 0309 	add.w	r3, sp, #9
 801cbda:	1a9b      	subs	r3, r3, r2
 801cbdc:	42ac      	cmp	r4, r5
 801cbde:	bf88      	it	hi
 801cbe0:	2300      	movhi	r3, #0
 801cbe2:	3302      	adds	r3, #2
 801cbe4:	4403      	add	r3, r0
 801cbe6:	1a18      	subs	r0, r3, r0
 801cbe8:	b003      	add	sp, #12
 801cbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbec:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cbf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cbf4:	e7ed      	b.n	801cbd2 <__exponent+0x44>
 801cbf6:	2330      	movs	r3, #48	@ 0x30
 801cbf8:	3130      	adds	r1, #48	@ 0x30
 801cbfa:	7083      	strb	r3, [r0, #2]
 801cbfc:	70c1      	strb	r1, [r0, #3]
 801cbfe:	1d03      	adds	r3, r0, #4
 801cc00:	e7f1      	b.n	801cbe6 <__exponent+0x58>
	...

0801cc04 <_printf_float>:
 801cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc08:	b08d      	sub	sp, #52	@ 0x34
 801cc0a:	460c      	mov	r4, r1
 801cc0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cc10:	4616      	mov	r6, r2
 801cc12:	461f      	mov	r7, r3
 801cc14:	4605      	mov	r5, r0
 801cc16:	f000 fcbb 	bl	801d590 <_localeconv_r>
 801cc1a:	6803      	ldr	r3, [r0, #0]
 801cc1c:	9304      	str	r3, [sp, #16]
 801cc1e:	4618      	mov	r0, r3
 801cc20:	f7e3 fb2e 	bl	8000280 <strlen>
 801cc24:	2300      	movs	r3, #0
 801cc26:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc28:	f8d8 3000 	ldr.w	r3, [r8]
 801cc2c:	9005      	str	r0, [sp, #20]
 801cc2e:	3307      	adds	r3, #7
 801cc30:	f023 0307 	bic.w	r3, r3, #7
 801cc34:	f103 0208 	add.w	r2, r3, #8
 801cc38:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cc3c:	f8d4 b000 	ldr.w	fp, [r4]
 801cc40:	f8c8 2000 	str.w	r2, [r8]
 801cc44:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cc48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cc4c:	9307      	str	r3, [sp, #28]
 801cc4e:	f8cd 8018 	str.w	r8, [sp, #24]
 801cc52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cc56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc5a:	4b9c      	ldr	r3, [pc, #624]	@ (801cecc <_printf_float+0x2c8>)
 801cc5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cc60:	f7e3 ff6c 	bl	8000b3c <__aeabi_dcmpun>
 801cc64:	bb70      	cbnz	r0, 801ccc4 <_printf_float+0xc0>
 801cc66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc6a:	4b98      	ldr	r3, [pc, #608]	@ (801cecc <_printf_float+0x2c8>)
 801cc6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cc70:	f7e3 ff46 	bl	8000b00 <__aeabi_dcmple>
 801cc74:	bb30      	cbnz	r0, 801ccc4 <_printf_float+0xc0>
 801cc76:	2200      	movs	r2, #0
 801cc78:	2300      	movs	r3, #0
 801cc7a:	4640      	mov	r0, r8
 801cc7c:	4649      	mov	r1, r9
 801cc7e:	f7e3 ff35 	bl	8000aec <__aeabi_dcmplt>
 801cc82:	b110      	cbz	r0, 801cc8a <_printf_float+0x86>
 801cc84:	232d      	movs	r3, #45	@ 0x2d
 801cc86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cc8a:	4a91      	ldr	r2, [pc, #580]	@ (801ced0 <_printf_float+0x2cc>)
 801cc8c:	4b91      	ldr	r3, [pc, #580]	@ (801ced4 <_printf_float+0x2d0>)
 801cc8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cc92:	bf94      	ite	ls
 801cc94:	4690      	movls	r8, r2
 801cc96:	4698      	movhi	r8, r3
 801cc98:	2303      	movs	r3, #3
 801cc9a:	6123      	str	r3, [r4, #16]
 801cc9c:	f02b 0304 	bic.w	r3, fp, #4
 801cca0:	6023      	str	r3, [r4, #0]
 801cca2:	f04f 0900 	mov.w	r9, #0
 801cca6:	9700      	str	r7, [sp, #0]
 801cca8:	4633      	mov	r3, r6
 801ccaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 801ccac:	4621      	mov	r1, r4
 801ccae:	4628      	mov	r0, r5
 801ccb0:	f000 f9d2 	bl	801d058 <_printf_common>
 801ccb4:	3001      	adds	r0, #1
 801ccb6:	f040 808d 	bne.w	801cdd4 <_printf_float+0x1d0>
 801ccba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ccbe:	b00d      	add	sp, #52	@ 0x34
 801ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccc4:	4642      	mov	r2, r8
 801ccc6:	464b      	mov	r3, r9
 801ccc8:	4640      	mov	r0, r8
 801ccca:	4649      	mov	r1, r9
 801cccc:	f7e3 ff36 	bl	8000b3c <__aeabi_dcmpun>
 801ccd0:	b140      	cbz	r0, 801cce4 <_printf_float+0xe0>
 801ccd2:	464b      	mov	r3, r9
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	bfbc      	itt	lt
 801ccd8:	232d      	movlt	r3, #45	@ 0x2d
 801ccda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ccde:	4a7e      	ldr	r2, [pc, #504]	@ (801ced8 <_printf_float+0x2d4>)
 801cce0:	4b7e      	ldr	r3, [pc, #504]	@ (801cedc <_printf_float+0x2d8>)
 801cce2:	e7d4      	b.n	801cc8e <_printf_float+0x8a>
 801cce4:	6863      	ldr	r3, [r4, #4]
 801cce6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801ccea:	9206      	str	r2, [sp, #24]
 801ccec:	1c5a      	adds	r2, r3, #1
 801ccee:	d13b      	bne.n	801cd68 <_printf_float+0x164>
 801ccf0:	2306      	movs	r3, #6
 801ccf2:	6063      	str	r3, [r4, #4]
 801ccf4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801ccf8:	2300      	movs	r3, #0
 801ccfa:	6022      	str	r2, [r4, #0]
 801ccfc:	9303      	str	r3, [sp, #12]
 801ccfe:	ab0a      	add	r3, sp, #40	@ 0x28
 801cd00:	e9cd a301 	strd	sl, r3, [sp, #4]
 801cd04:	ab09      	add	r3, sp, #36	@ 0x24
 801cd06:	9300      	str	r3, [sp, #0]
 801cd08:	6861      	ldr	r1, [r4, #4]
 801cd0a:	ec49 8b10 	vmov	d0, r8, r9
 801cd0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801cd12:	4628      	mov	r0, r5
 801cd14:	f7ff fed6 	bl	801cac4 <__cvt>
 801cd18:	9b06      	ldr	r3, [sp, #24]
 801cd1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cd1c:	2b47      	cmp	r3, #71	@ 0x47
 801cd1e:	4680      	mov	r8, r0
 801cd20:	d129      	bne.n	801cd76 <_printf_float+0x172>
 801cd22:	1cc8      	adds	r0, r1, #3
 801cd24:	db02      	blt.n	801cd2c <_printf_float+0x128>
 801cd26:	6863      	ldr	r3, [r4, #4]
 801cd28:	4299      	cmp	r1, r3
 801cd2a:	dd41      	ble.n	801cdb0 <_printf_float+0x1ac>
 801cd2c:	f1aa 0a02 	sub.w	sl, sl, #2
 801cd30:	fa5f fa8a 	uxtb.w	sl, sl
 801cd34:	3901      	subs	r1, #1
 801cd36:	4652      	mov	r2, sl
 801cd38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cd3c:	9109      	str	r1, [sp, #36]	@ 0x24
 801cd3e:	f7ff ff26 	bl	801cb8e <__exponent>
 801cd42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd44:	1813      	adds	r3, r2, r0
 801cd46:	2a01      	cmp	r2, #1
 801cd48:	4681      	mov	r9, r0
 801cd4a:	6123      	str	r3, [r4, #16]
 801cd4c:	dc02      	bgt.n	801cd54 <_printf_float+0x150>
 801cd4e:	6822      	ldr	r2, [r4, #0]
 801cd50:	07d2      	lsls	r2, r2, #31
 801cd52:	d501      	bpl.n	801cd58 <_printf_float+0x154>
 801cd54:	3301      	adds	r3, #1
 801cd56:	6123      	str	r3, [r4, #16]
 801cd58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d0a2      	beq.n	801cca6 <_printf_float+0xa2>
 801cd60:	232d      	movs	r3, #45	@ 0x2d
 801cd62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cd66:	e79e      	b.n	801cca6 <_printf_float+0xa2>
 801cd68:	9a06      	ldr	r2, [sp, #24]
 801cd6a:	2a47      	cmp	r2, #71	@ 0x47
 801cd6c:	d1c2      	bne.n	801ccf4 <_printf_float+0xf0>
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d1c0      	bne.n	801ccf4 <_printf_float+0xf0>
 801cd72:	2301      	movs	r3, #1
 801cd74:	e7bd      	b.n	801ccf2 <_printf_float+0xee>
 801cd76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cd7a:	d9db      	bls.n	801cd34 <_printf_float+0x130>
 801cd7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801cd80:	d118      	bne.n	801cdb4 <_printf_float+0x1b0>
 801cd82:	2900      	cmp	r1, #0
 801cd84:	6863      	ldr	r3, [r4, #4]
 801cd86:	dd0b      	ble.n	801cda0 <_printf_float+0x19c>
 801cd88:	6121      	str	r1, [r4, #16]
 801cd8a:	b913      	cbnz	r3, 801cd92 <_printf_float+0x18e>
 801cd8c:	6822      	ldr	r2, [r4, #0]
 801cd8e:	07d0      	lsls	r0, r2, #31
 801cd90:	d502      	bpl.n	801cd98 <_printf_float+0x194>
 801cd92:	3301      	adds	r3, #1
 801cd94:	440b      	add	r3, r1
 801cd96:	6123      	str	r3, [r4, #16]
 801cd98:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cd9a:	f04f 0900 	mov.w	r9, #0
 801cd9e:	e7db      	b.n	801cd58 <_printf_float+0x154>
 801cda0:	b913      	cbnz	r3, 801cda8 <_printf_float+0x1a4>
 801cda2:	6822      	ldr	r2, [r4, #0]
 801cda4:	07d2      	lsls	r2, r2, #31
 801cda6:	d501      	bpl.n	801cdac <_printf_float+0x1a8>
 801cda8:	3302      	adds	r3, #2
 801cdaa:	e7f4      	b.n	801cd96 <_printf_float+0x192>
 801cdac:	2301      	movs	r3, #1
 801cdae:	e7f2      	b.n	801cd96 <_printf_float+0x192>
 801cdb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801cdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdb6:	4299      	cmp	r1, r3
 801cdb8:	db05      	blt.n	801cdc6 <_printf_float+0x1c2>
 801cdba:	6823      	ldr	r3, [r4, #0]
 801cdbc:	6121      	str	r1, [r4, #16]
 801cdbe:	07d8      	lsls	r0, r3, #31
 801cdc0:	d5ea      	bpl.n	801cd98 <_printf_float+0x194>
 801cdc2:	1c4b      	adds	r3, r1, #1
 801cdc4:	e7e7      	b.n	801cd96 <_printf_float+0x192>
 801cdc6:	2900      	cmp	r1, #0
 801cdc8:	bfd4      	ite	le
 801cdca:	f1c1 0202 	rsble	r2, r1, #2
 801cdce:	2201      	movgt	r2, #1
 801cdd0:	4413      	add	r3, r2
 801cdd2:	e7e0      	b.n	801cd96 <_printf_float+0x192>
 801cdd4:	6823      	ldr	r3, [r4, #0]
 801cdd6:	055a      	lsls	r2, r3, #21
 801cdd8:	d407      	bmi.n	801cdea <_printf_float+0x1e6>
 801cdda:	6923      	ldr	r3, [r4, #16]
 801cddc:	4642      	mov	r2, r8
 801cdde:	4631      	mov	r1, r6
 801cde0:	4628      	mov	r0, r5
 801cde2:	47b8      	blx	r7
 801cde4:	3001      	adds	r0, #1
 801cde6:	d12b      	bne.n	801ce40 <_printf_float+0x23c>
 801cde8:	e767      	b.n	801ccba <_printf_float+0xb6>
 801cdea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cdee:	f240 80dd 	bls.w	801cfac <_printf_float+0x3a8>
 801cdf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	f7e3 fe6d 	bl	8000ad8 <__aeabi_dcmpeq>
 801cdfe:	2800      	cmp	r0, #0
 801ce00:	d033      	beq.n	801ce6a <_printf_float+0x266>
 801ce02:	4a37      	ldr	r2, [pc, #220]	@ (801cee0 <_printf_float+0x2dc>)
 801ce04:	2301      	movs	r3, #1
 801ce06:	4631      	mov	r1, r6
 801ce08:	4628      	mov	r0, r5
 801ce0a:	47b8      	blx	r7
 801ce0c:	3001      	adds	r0, #1
 801ce0e:	f43f af54 	beq.w	801ccba <_printf_float+0xb6>
 801ce12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ce16:	4543      	cmp	r3, r8
 801ce18:	db02      	blt.n	801ce20 <_printf_float+0x21c>
 801ce1a:	6823      	ldr	r3, [r4, #0]
 801ce1c:	07d8      	lsls	r0, r3, #31
 801ce1e:	d50f      	bpl.n	801ce40 <_printf_float+0x23c>
 801ce20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce24:	4631      	mov	r1, r6
 801ce26:	4628      	mov	r0, r5
 801ce28:	47b8      	blx	r7
 801ce2a:	3001      	adds	r0, #1
 801ce2c:	f43f af45 	beq.w	801ccba <_printf_float+0xb6>
 801ce30:	f04f 0900 	mov.w	r9, #0
 801ce34:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801ce38:	f104 0a1a 	add.w	sl, r4, #26
 801ce3c:	45c8      	cmp	r8, r9
 801ce3e:	dc09      	bgt.n	801ce54 <_printf_float+0x250>
 801ce40:	6823      	ldr	r3, [r4, #0]
 801ce42:	079b      	lsls	r3, r3, #30
 801ce44:	f100 8103 	bmi.w	801d04e <_printf_float+0x44a>
 801ce48:	68e0      	ldr	r0, [r4, #12]
 801ce4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce4c:	4298      	cmp	r0, r3
 801ce4e:	bfb8      	it	lt
 801ce50:	4618      	movlt	r0, r3
 801ce52:	e734      	b.n	801ccbe <_printf_float+0xba>
 801ce54:	2301      	movs	r3, #1
 801ce56:	4652      	mov	r2, sl
 801ce58:	4631      	mov	r1, r6
 801ce5a:	4628      	mov	r0, r5
 801ce5c:	47b8      	blx	r7
 801ce5e:	3001      	adds	r0, #1
 801ce60:	f43f af2b 	beq.w	801ccba <_printf_float+0xb6>
 801ce64:	f109 0901 	add.w	r9, r9, #1
 801ce68:	e7e8      	b.n	801ce3c <_printf_float+0x238>
 801ce6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	dc39      	bgt.n	801cee4 <_printf_float+0x2e0>
 801ce70:	4a1b      	ldr	r2, [pc, #108]	@ (801cee0 <_printf_float+0x2dc>)
 801ce72:	2301      	movs	r3, #1
 801ce74:	4631      	mov	r1, r6
 801ce76:	4628      	mov	r0, r5
 801ce78:	47b8      	blx	r7
 801ce7a:	3001      	adds	r0, #1
 801ce7c:	f43f af1d 	beq.w	801ccba <_printf_float+0xb6>
 801ce80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ce84:	ea59 0303 	orrs.w	r3, r9, r3
 801ce88:	d102      	bne.n	801ce90 <_printf_float+0x28c>
 801ce8a:	6823      	ldr	r3, [r4, #0]
 801ce8c:	07d9      	lsls	r1, r3, #31
 801ce8e:	d5d7      	bpl.n	801ce40 <_printf_float+0x23c>
 801ce90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce94:	4631      	mov	r1, r6
 801ce96:	4628      	mov	r0, r5
 801ce98:	47b8      	blx	r7
 801ce9a:	3001      	adds	r0, #1
 801ce9c:	f43f af0d 	beq.w	801ccba <_printf_float+0xb6>
 801cea0:	f04f 0a00 	mov.w	sl, #0
 801cea4:	f104 0b1a 	add.w	fp, r4, #26
 801cea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceaa:	425b      	negs	r3, r3
 801ceac:	4553      	cmp	r3, sl
 801ceae:	dc01      	bgt.n	801ceb4 <_printf_float+0x2b0>
 801ceb0:	464b      	mov	r3, r9
 801ceb2:	e793      	b.n	801cddc <_printf_float+0x1d8>
 801ceb4:	2301      	movs	r3, #1
 801ceb6:	465a      	mov	r2, fp
 801ceb8:	4631      	mov	r1, r6
 801ceba:	4628      	mov	r0, r5
 801cebc:	47b8      	blx	r7
 801cebe:	3001      	adds	r0, #1
 801cec0:	f43f aefb 	beq.w	801ccba <_printf_float+0xb6>
 801cec4:	f10a 0a01 	add.w	sl, sl, #1
 801cec8:	e7ee      	b.n	801cea8 <_printf_float+0x2a4>
 801ceca:	bf00      	nop
 801cecc:	7fefffff 	.word	0x7fefffff
 801ced0:	08023980 	.word	0x08023980
 801ced4:	08023984 	.word	0x08023984
 801ced8:	08023988 	.word	0x08023988
 801cedc:	0802398c 	.word	0x0802398c
 801cee0:	08023990 	.word	0x08023990
 801cee4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cee6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ceea:	4553      	cmp	r3, sl
 801ceec:	bfa8      	it	ge
 801ceee:	4653      	movge	r3, sl
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	4699      	mov	r9, r3
 801cef4:	dc36      	bgt.n	801cf64 <_printf_float+0x360>
 801cef6:	f04f 0b00 	mov.w	fp, #0
 801cefa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cefe:	f104 021a 	add.w	r2, r4, #26
 801cf02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cf04:	9306      	str	r3, [sp, #24]
 801cf06:	eba3 0309 	sub.w	r3, r3, r9
 801cf0a:	455b      	cmp	r3, fp
 801cf0c:	dc31      	bgt.n	801cf72 <_printf_float+0x36e>
 801cf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf10:	459a      	cmp	sl, r3
 801cf12:	dc3a      	bgt.n	801cf8a <_printf_float+0x386>
 801cf14:	6823      	ldr	r3, [r4, #0]
 801cf16:	07da      	lsls	r2, r3, #31
 801cf18:	d437      	bmi.n	801cf8a <_printf_float+0x386>
 801cf1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf1c:	ebaa 0903 	sub.w	r9, sl, r3
 801cf20:	9b06      	ldr	r3, [sp, #24]
 801cf22:	ebaa 0303 	sub.w	r3, sl, r3
 801cf26:	4599      	cmp	r9, r3
 801cf28:	bfa8      	it	ge
 801cf2a:	4699      	movge	r9, r3
 801cf2c:	f1b9 0f00 	cmp.w	r9, #0
 801cf30:	dc33      	bgt.n	801cf9a <_printf_float+0x396>
 801cf32:	f04f 0800 	mov.w	r8, #0
 801cf36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf3a:	f104 0b1a 	add.w	fp, r4, #26
 801cf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf40:	ebaa 0303 	sub.w	r3, sl, r3
 801cf44:	eba3 0309 	sub.w	r3, r3, r9
 801cf48:	4543      	cmp	r3, r8
 801cf4a:	f77f af79 	ble.w	801ce40 <_printf_float+0x23c>
 801cf4e:	2301      	movs	r3, #1
 801cf50:	465a      	mov	r2, fp
 801cf52:	4631      	mov	r1, r6
 801cf54:	4628      	mov	r0, r5
 801cf56:	47b8      	blx	r7
 801cf58:	3001      	adds	r0, #1
 801cf5a:	f43f aeae 	beq.w	801ccba <_printf_float+0xb6>
 801cf5e:	f108 0801 	add.w	r8, r8, #1
 801cf62:	e7ec      	b.n	801cf3e <_printf_float+0x33a>
 801cf64:	4642      	mov	r2, r8
 801cf66:	4631      	mov	r1, r6
 801cf68:	4628      	mov	r0, r5
 801cf6a:	47b8      	blx	r7
 801cf6c:	3001      	adds	r0, #1
 801cf6e:	d1c2      	bne.n	801cef6 <_printf_float+0x2f2>
 801cf70:	e6a3      	b.n	801ccba <_printf_float+0xb6>
 801cf72:	2301      	movs	r3, #1
 801cf74:	4631      	mov	r1, r6
 801cf76:	4628      	mov	r0, r5
 801cf78:	9206      	str	r2, [sp, #24]
 801cf7a:	47b8      	blx	r7
 801cf7c:	3001      	adds	r0, #1
 801cf7e:	f43f ae9c 	beq.w	801ccba <_printf_float+0xb6>
 801cf82:	9a06      	ldr	r2, [sp, #24]
 801cf84:	f10b 0b01 	add.w	fp, fp, #1
 801cf88:	e7bb      	b.n	801cf02 <_printf_float+0x2fe>
 801cf8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf8e:	4631      	mov	r1, r6
 801cf90:	4628      	mov	r0, r5
 801cf92:	47b8      	blx	r7
 801cf94:	3001      	adds	r0, #1
 801cf96:	d1c0      	bne.n	801cf1a <_printf_float+0x316>
 801cf98:	e68f      	b.n	801ccba <_printf_float+0xb6>
 801cf9a:	9a06      	ldr	r2, [sp, #24]
 801cf9c:	464b      	mov	r3, r9
 801cf9e:	4442      	add	r2, r8
 801cfa0:	4631      	mov	r1, r6
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	47b8      	blx	r7
 801cfa6:	3001      	adds	r0, #1
 801cfa8:	d1c3      	bne.n	801cf32 <_printf_float+0x32e>
 801cfaa:	e686      	b.n	801ccba <_printf_float+0xb6>
 801cfac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cfb0:	f1ba 0f01 	cmp.w	sl, #1
 801cfb4:	dc01      	bgt.n	801cfba <_printf_float+0x3b6>
 801cfb6:	07db      	lsls	r3, r3, #31
 801cfb8:	d536      	bpl.n	801d028 <_printf_float+0x424>
 801cfba:	2301      	movs	r3, #1
 801cfbc:	4642      	mov	r2, r8
 801cfbe:	4631      	mov	r1, r6
 801cfc0:	4628      	mov	r0, r5
 801cfc2:	47b8      	blx	r7
 801cfc4:	3001      	adds	r0, #1
 801cfc6:	f43f ae78 	beq.w	801ccba <_printf_float+0xb6>
 801cfca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfce:	4631      	mov	r1, r6
 801cfd0:	4628      	mov	r0, r5
 801cfd2:	47b8      	blx	r7
 801cfd4:	3001      	adds	r0, #1
 801cfd6:	f43f ae70 	beq.w	801ccba <_printf_float+0xb6>
 801cfda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cfde:	2200      	movs	r2, #0
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801cfe6:	f7e3 fd77 	bl	8000ad8 <__aeabi_dcmpeq>
 801cfea:	b9c0      	cbnz	r0, 801d01e <_printf_float+0x41a>
 801cfec:	4653      	mov	r3, sl
 801cfee:	f108 0201 	add.w	r2, r8, #1
 801cff2:	4631      	mov	r1, r6
 801cff4:	4628      	mov	r0, r5
 801cff6:	47b8      	blx	r7
 801cff8:	3001      	adds	r0, #1
 801cffa:	d10c      	bne.n	801d016 <_printf_float+0x412>
 801cffc:	e65d      	b.n	801ccba <_printf_float+0xb6>
 801cffe:	2301      	movs	r3, #1
 801d000:	465a      	mov	r2, fp
 801d002:	4631      	mov	r1, r6
 801d004:	4628      	mov	r0, r5
 801d006:	47b8      	blx	r7
 801d008:	3001      	adds	r0, #1
 801d00a:	f43f ae56 	beq.w	801ccba <_printf_float+0xb6>
 801d00e:	f108 0801 	add.w	r8, r8, #1
 801d012:	45d0      	cmp	r8, sl
 801d014:	dbf3      	blt.n	801cffe <_printf_float+0x3fa>
 801d016:	464b      	mov	r3, r9
 801d018:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d01c:	e6df      	b.n	801cdde <_printf_float+0x1da>
 801d01e:	f04f 0800 	mov.w	r8, #0
 801d022:	f104 0b1a 	add.w	fp, r4, #26
 801d026:	e7f4      	b.n	801d012 <_printf_float+0x40e>
 801d028:	2301      	movs	r3, #1
 801d02a:	4642      	mov	r2, r8
 801d02c:	e7e1      	b.n	801cff2 <_printf_float+0x3ee>
 801d02e:	2301      	movs	r3, #1
 801d030:	464a      	mov	r2, r9
 801d032:	4631      	mov	r1, r6
 801d034:	4628      	mov	r0, r5
 801d036:	47b8      	blx	r7
 801d038:	3001      	adds	r0, #1
 801d03a:	f43f ae3e 	beq.w	801ccba <_printf_float+0xb6>
 801d03e:	f108 0801 	add.w	r8, r8, #1
 801d042:	68e3      	ldr	r3, [r4, #12]
 801d044:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d046:	1a5b      	subs	r3, r3, r1
 801d048:	4543      	cmp	r3, r8
 801d04a:	dcf0      	bgt.n	801d02e <_printf_float+0x42a>
 801d04c:	e6fc      	b.n	801ce48 <_printf_float+0x244>
 801d04e:	f04f 0800 	mov.w	r8, #0
 801d052:	f104 0919 	add.w	r9, r4, #25
 801d056:	e7f4      	b.n	801d042 <_printf_float+0x43e>

0801d058 <_printf_common>:
 801d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d05c:	4616      	mov	r6, r2
 801d05e:	4698      	mov	r8, r3
 801d060:	688a      	ldr	r2, [r1, #8]
 801d062:	690b      	ldr	r3, [r1, #16]
 801d064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d068:	4293      	cmp	r3, r2
 801d06a:	bfb8      	it	lt
 801d06c:	4613      	movlt	r3, r2
 801d06e:	6033      	str	r3, [r6, #0]
 801d070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d074:	4607      	mov	r7, r0
 801d076:	460c      	mov	r4, r1
 801d078:	b10a      	cbz	r2, 801d07e <_printf_common+0x26>
 801d07a:	3301      	adds	r3, #1
 801d07c:	6033      	str	r3, [r6, #0]
 801d07e:	6823      	ldr	r3, [r4, #0]
 801d080:	0699      	lsls	r1, r3, #26
 801d082:	bf42      	ittt	mi
 801d084:	6833      	ldrmi	r3, [r6, #0]
 801d086:	3302      	addmi	r3, #2
 801d088:	6033      	strmi	r3, [r6, #0]
 801d08a:	6825      	ldr	r5, [r4, #0]
 801d08c:	f015 0506 	ands.w	r5, r5, #6
 801d090:	d106      	bne.n	801d0a0 <_printf_common+0x48>
 801d092:	f104 0a19 	add.w	sl, r4, #25
 801d096:	68e3      	ldr	r3, [r4, #12]
 801d098:	6832      	ldr	r2, [r6, #0]
 801d09a:	1a9b      	subs	r3, r3, r2
 801d09c:	42ab      	cmp	r3, r5
 801d09e:	dc26      	bgt.n	801d0ee <_printf_common+0x96>
 801d0a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d0a4:	6822      	ldr	r2, [r4, #0]
 801d0a6:	3b00      	subs	r3, #0
 801d0a8:	bf18      	it	ne
 801d0aa:	2301      	movne	r3, #1
 801d0ac:	0692      	lsls	r2, r2, #26
 801d0ae:	d42b      	bmi.n	801d108 <_printf_common+0xb0>
 801d0b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d0b4:	4641      	mov	r1, r8
 801d0b6:	4638      	mov	r0, r7
 801d0b8:	47c8      	blx	r9
 801d0ba:	3001      	adds	r0, #1
 801d0bc:	d01e      	beq.n	801d0fc <_printf_common+0xa4>
 801d0be:	6823      	ldr	r3, [r4, #0]
 801d0c0:	6922      	ldr	r2, [r4, #16]
 801d0c2:	f003 0306 	and.w	r3, r3, #6
 801d0c6:	2b04      	cmp	r3, #4
 801d0c8:	bf02      	ittt	eq
 801d0ca:	68e5      	ldreq	r5, [r4, #12]
 801d0cc:	6833      	ldreq	r3, [r6, #0]
 801d0ce:	1aed      	subeq	r5, r5, r3
 801d0d0:	68a3      	ldr	r3, [r4, #8]
 801d0d2:	bf0c      	ite	eq
 801d0d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d0d8:	2500      	movne	r5, #0
 801d0da:	4293      	cmp	r3, r2
 801d0dc:	bfc4      	itt	gt
 801d0de:	1a9b      	subgt	r3, r3, r2
 801d0e0:	18ed      	addgt	r5, r5, r3
 801d0e2:	2600      	movs	r6, #0
 801d0e4:	341a      	adds	r4, #26
 801d0e6:	42b5      	cmp	r5, r6
 801d0e8:	d11a      	bne.n	801d120 <_printf_common+0xc8>
 801d0ea:	2000      	movs	r0, #0
 801d0ec:	e008      	b.n	801d100 <_printf_common+0xa8>
 801d0ee:	2301      	movs	r3, #1
 801d0f0:	4652      	mov	r2, sl
 801d0f2:	4641      	mov	r1, r8
 801d0f4:	4638      	mov	r0, r7
 801d0f6:	47c8      	blx	r9
 801d0f8:	3001      	adds	r0, #1
 801d0fa:	d103      	bne.n	801d104 <_printf_common+0xac>
 801d0fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d104:	3501      	adds	r5, #1
 801d106:	e7c6      	b.n	801d096 <_printf_common+0x3e>
 801d108:	18e1      	adds	r1, r4, r3
 801d10a:	1c5a      	adds	r2, r3, #1
 801d10c:	2030      	movs	r0, #48	@ 0x30
 801d10e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d112:	4422      	add	r2, r4
 801d114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d11c:	3302      	adds	r3, #2
 801d11e:	e7c7      	b.n	801d0b0 <_printf_common+0x58>
 801d120:	2301      	movs	r3, #1
 801d122:	4622      	mov	r2, r4
 801d124:	4641      	mov	r1, r8
 801d126:	4638      	mov	r0, r7
 801d128:	47c8      	blx	r9
 801d12a:	3001      	adds	r0, #1
 801d12c:	d0e6      	beq.n	801d0fc <_printf_common+0xa4>
 801d12e:	3601      	adds	r6, #1
 801d130:	e7d9      	b.n	801d0e6 <_printf_common+0x8e>
	...

0801d134 <_printf_i>:
 801d134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d138:	7e0f      	ldrb	r7, [r1, #24]
 801d13a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d13c:	2f78      	cmp	r7, #120	@ 0x78
 801d13e:	4691      	mov	r9, r2
 801d140:	4680      	mov	r8, r0
 801d142:	460c      	mov	r4, r1
 801d144:	469a      	mov	sl, r3
 801d146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d14a:	d807      	bhi.n	801d15c <_printf_i+0x28>
 801d14c:	2f62      	cmp	r7, #98	@ 0x62
 801d14e:	d80a      	bhi.n	801d166 <_printf_i+0x32>
 801d150:	2f00      	cmp	r7, #0
 801d152:	f000 80d2 	beq.w	801d2fa <_printf_i+0x1c6>
 801d156:	2f58      	cmp	r7, #88	@ 0x58
 801d158:	f000 80b9 	beq.w	801d2ce <_printf_i+0x19a>
 801d15c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d164:	e03a      	b.n	801d1dc <_printf_i+0xa8>
 801d166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d16a:	2b15      	cmp	r3, #21
 801d16c:	d8f6      	bhi.n	801d15c <_printf_i+0x28>
 801d16e:	a101      	add	r1, pc, #4	@ (adr r1, 801d174 <_printf_i+0x40>)
 801d170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d174:	0801d1cd 	.word	0x0801d1cd
 801d178:	0801d1e1 	.word	0x0801d1e1
 801d17c:	0801d15d 	.word	0x0801d15d
 801d180:	0801d15d 	.word	0x0801d15d
 801d184:	0801d15d 	.word	0x0801d15d
 801d188:	0801d15d 	.word	0x0801d15d
 801d18c:	0801d1e1 	.word	0x0801d1e1
 801d190:	0801d15d 	.word	0x0801d15d
 801d194:	0801d15d 	.word	0x0801d15d
 801d198:	0801d15d 	.word	0x0801d15d
 801d19c:	0801d15d 	.word	0x0801d15d
 801d1a0:	0801d2e1 	.word	0x0801d2e1
 801d1a4:	0801d20b 	.word	0x0801d20b
 801d1a8:	0801d29b 	.word	0x0801d29b
 801d1ac:	0801d15d 	.word	0x0801d15d
 801d1b0:	0801d15d 	.word	0x0801d15d
 801d1b4:	0801d303 	.word	0x0801d303
 801d1b8:	0801d15d 	.word	0x0801d15d
 801d1bc:	0801d20b 	.word	0x0801d20b
 801d1c0:	0801d15d 	.word	0x0801d15d
 801d1c4:	0801d15d 	.word	0x0801d15d
 801d1c8:	0801d2a3 	.word	0x0801d2a3
 801d1cc:	6833      	ldr	r3, [r6, #0]
 801d1ce:	1d1a      	adds	r2, r3, #4
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	6032      	str	r2, [r6, #0]
 801d1d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d1d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d1dc:	2301      	movs	r3, #1
 801d1de:	e09d      	b.n	801d31c <_printf_i+0x1e8>
 801d1e0:	6833      	ldr	r3, [r6, #0]
 801d1e2:	6820      	ldr	r0, [r4, #0]
 801d1e4:	1d19      	adds	r1, r3, #4
 801d1e6:	6031      	str	r1, [r6, #0]
 801d1e8:	0606      	lsls	r6, r0, #24
 801d1ea:	d501      	bpl.n	801d1f0 <_printf_i+0xbc>
 801d1ec:	681d      	ldr	r5, [r3, #0]
 801d1ee:	e003      	b.n	801d1f8 <_printf_i+0xc4>
 801d1f0:	0645      	lsls	r5, r0, #25
 801d1f2:	d5fb      	bpl.n	801d1ec <_printf_i+0xb8>
 801d1f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d1f8:	2d00      	cmp	r5, #0
 801d1fa:	da03      	bge.n	801d204 <_printf_i+0xd0>
 801d1fc:	232d      	movs	r3, #45	@ 0x2d
 801d1fe:	426d      	negs	r5, r5
 801d200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d204:	4859      	ldr	r0, [pc, #356]	@ (801d36c <_printf_i+0x238>)
 801d206:	230a      	movs	r3, #10
 801d208:	e011      	b.n	801d22e <_printf_i+0xfa>
 801d20a:	6821      	ldr	r1, [r4, #0]
 801d20c:	6833      	ldr	r3, [r6, #0]
 801d20e:	0608      	lsls	r0, r1, #24
 801d210:	f853 5b04 	ldr.w	r5, [r3], #4
 801d214:	d402      	bmi.n	801d21c <_printf_i+0xe8>
 801d216:	0649      	lsls	r1, r1, #25
 801d218:	bf48      	it	mi
 801d21a:	b2ad      	uxthmi	r5, r5
 801d21c:	2f6f      	cmp	r7, #111	@ 0x6f
 801d21e:	4853      	ldr	r0, [pc, #332]	@ (801d36c <_printf_i+0x238>)
 801d220:	6033      	str	r3, [r6, #0]
 801d222:	bf14      	ite	ne
 801d224:	230a      	movne	r3, #10
 801d226:	2308      	moveq	r3, #8
 801d228:	2100      	movs	r1, #0
 801d22a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d22e:	6866      	ldr	r6, [r4, #4]
 801d230:	60a6      	str	r6, [r4, #8]
 801d232:	2e00      	cmp	r6, #0
 801d234:	bfa2      	ittt	ge
 801d236:	6821      	ldrge	r1, [r4, #0]
 801d238:	f021 0104 	bicge.w	r1, r1, #4
 801d23c:	6021      	strge	r1, [r4, #0]
 801d23e:	b90d      	cbnz	r5, 801d244 <_printf_i+0x110>
 801d240:	2e00      	cmp	r6, #0
 801d242:	d04b      	beq.n	801d2dc <_printf_i+0x1a8>
 801d244:	4616      	mov	r6, r2
 801d246:	fbb5 f1f3 	udiv	r1, r5, r3
 801d24a:	fb03 5711 	mls	r7, r3, r1, r5
 801d24e:	5dc7      	ldrb	r7, [r0, r7]
 801d250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d254:	462f      	mov	r7, r5
 801d256:	42bb      	cmp	r3, r7
 801d258:	460d      	mov	r5, r1
 801d25a:	d9f4      	bls.n	801d246 <_printf_i+0x112>
 801d25c:	2b08      	cmp	r3, #8
 801d25e:	d10b      	bne.n	801d278 <_printf_i+0x144>
 801d260:	6823      	ldr	r3, [r4, #0]
 801d262:	07df      	lsls	r7, r3, #31
 801d264:	d508      	bpl.n	801d278 <_printf_i+0x144>
 801d266:	6923      	ldr	r3, [r4, #16]
 801d268:	6861      	ldr	r1, [r4, #4]
 801d26a:	4299      	cmp	r1, r3
 801d26c:	bfde      	ittt	le
 801d26e:	2330      	movle	r3, #48	@ 0x30
 801d270:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d274:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d278:	1b92      	subs	r2, r2, r6
 801d27a:	6122      	str	r2, [r4, #16]
 801d27c:	f8cd a000 	str.w	sl, [sp]
 801d280:	464b      	mov	r3, r9
 801d282:	aa03      	add	r2, sp, #12
 801d284:	4621      	mov	r1, r4
 801d286:	4640      	mov	r0, r8
 801d288:	f7ff fee6 	bl	801d058 <_printf_common>
 801d28c:	3001      	adds	r0, #1
 801d28e:	d14a      	bne.n	801d326 <_printf_i+0x1f2>
 801d290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d294:	b004      	add	sp, #16
 801d296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d29a:	6823      	ldr	r3, [r4, #0]
 801d29c:	f043 0320 	orr.w	r3, r3, #32
 801d2a0:	6023      	str	r3, [r4, #0]
 801d2a2:	4833      	ldr	r0, [pc, #204]	@ (801d370 <_printf_i+0x23c>)
 801d2a4:	2778      	movs	r7, #120	@ 0x78
 801d2a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d2aa:	6823      	ldr	r3, [r4, #0]
 801d2ac:	6831      	ldr	r1, [r6, #0]
 801d2ae:	061f      	lsls	r7, r3, #24
 801d2b0:	f851 5b04 	ldr.w	r5, [r1], #4
 801d2b4:	d402      	bmi.n	801d2bc <_printf_i+0x188>
 801d2b6:	065f      	lsls	r7, r3, #25
 801d2b8:	bf48      	it	mi
 801d2ba:	b2ad      	uxthmi	r5, r5
 801d2bc:	6031      	str	r1, [r6, #0]
 801d2be:	07d9      	lsls	r1, r3, #31
 801d2c0:	bf44      	itt	mi
 801d2c2:	f043 0320 	orrmi.w	r3, r3, #32
 801d2c6:	6023      	strmi	r3, [r4, #0]
 801d2c8:	b11d      	cbz	r5, 801d2d2 <_printf_i+0x19e>
 801d2ca:	2310      	movs	r3, #16
 801d2cc:	e7ac      	b.n	801d228 <_printf_i+0xf4>
 801d2ce:	4827      	ldr	r0, [pc, #156]	@ (801d36c <_printf_i+0x238>)
 801d2d0:	e7e9      	b.n	801d2a6 <_printf_i+0x172>
 801d2d2:	6823      	ldr	r3, [r4, #0]
 801d2d4:	f023 0320 	bic.w	r3, r3, #32
 801d2d8:	6023      	str	r3, [r4, #0]
 801d2da:	e7f6      	b.n	801d2ca <_printf_i+0x196>
 801d2dc:	4616      	mov	r6, r2
 801d2de:	e7bd      	b.n	801d25c <_printf_i+0x128>
 801d2e0:	6833      	ldr	r3, [r6, #0]
 801d2e2:	6825      	ldr	r5, [r4, #0]
 801d2e4:	6961      	ldr	r1, [r4, #20]
 801d2e6:	1d18      	adds	r0, r3, #4
 801d2e8:	6030      	str	r0, [r6, #0]
 801d2ea:	062e      	lsls	r6, r5, #24
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	d501      	bpl.n	801d2f4 <_printf_i+0x1c0>
 801d2f0:	6019      	str	r1, [r3, #0]
 801d2f2:	e002      	b.n	801d2fa <_printf_i+0x1c6>
 801d2f4:	0668      	lsls	r0, r5, #25
 801d2f6:	d5fb      	bpl.n	801d2f0 <_printf_i+0x1bc>
 801d2f8:	8019      	strh	r1, [r3, #0]
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	6123      	str	r3, [r4, #16]
 801d2fe:	4616      	mov	r6, r2
 801d300:	e7bc      	b.n	801d27c <_printf_i+0x148>
 801d302:	6833      	ldr	r3, [r6, #0]
 801d304:	1d1a      	adds	r2, r3, #4
 801d306:	6032      	str	r2, [r6, #0]
 801d308:	681e      	ldr	r6, [r3, #0]
 801d30a:	6862      	ldr	r2, [r4, #4]
 801d30c:	2100      	movs	r1, #0
 801d30e:	4630      	mov	r0, r6
 801d310:	f7e2 ff66 	bl	80001e0 <memchr>
 801d314:	b108      	cbz	r0, 801d31a <_printf_i+0x1e6>
 801d316:	1b80      	subs	r0, r0, r6
 801d318:	6060      	str	r0, [r4, #4]
 801d31a:	6863      	ldr	r3, [r4, #4]
 801d31c:	6123      	str	r3, [r4, #16]
 801d31e:	2300      	movs	r3, #0
 801d320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d324:	e7aa      	b.n	801d27c <_printf_i+0x148>
 801d326:	6923      	ldr	r3, [r4, #16]
 801d328:	4632      	mov	r2, r6
 801d32a:	4649      	mov	r1, r9
 801d32c:	4640      	mov	r0, r8
 801d32e:	47d0      	blx	sl
 801d330:	3001      	adds	r0, #1
 801d332:	d0ad      	beq.n	801d290 <_printf_i+0x15c>
 801d334:	6823      	ldr	r3, [r4, #0]
 801d336:	079b      	lsls	r3, r3, #30
 801d338:	d413      	bmi.n	801d362 <_printf_i+0x22e>
 801d33a:	68e0      	ldr	r0, [r4, #12]
 801d33c:	9b03      	ldr	r3, [sp, #12]
 801d33e:	4298      	cmp	r0, r3
 801d340:	bfb8      	it	lt
 801d342:	4618      	movlt	r0, r3
 801d344:	e7a6      	b.n	801d294 <_printf_i+0x160>
 801d346:	2301      	movs	r3, #1
 801d348:	4632      	mov	r2, r6
 801d34a:	4649      	mov	r1, r9
 801d34c:	4640      	mov	r0, r8
 801d34e:	47d0      	blx	sl
 801d350:	3001      	adds	r0, #1
 801d352:	d09d      	beq.n	801d290 <_printf_i+0x15c>
 801d354:	3501      	adds	r5, #1
 801d356:	68e3      	ldr	r3, [r4, #12]
 801d358:	9903      	ldr	r1, [sp, #12]
 801d35a:	1a5b      	subs	r3, r3, r1
 801d35c:	42ab      	cmp	r3, r5
 801d35e:	dcf2      	bgt.n	801d346 <_printf_i+0x212>
 801d360:	e7eb      	b.n	801d33a <_printf_i+0x206>
 801d362:	2500      	movs	r5, #0
 801d364:	f104 0619 	add.w	r6, r4, #25
 801d368:	e7f5      	b.n	801d356 <_printf_i+0x222>
 801d36a:	bf00      	nop
 801d36c:	08023992 	.word	0x08023992
 801d370:	080239a3 	.word	0x080239a3

0801d374 <std>:
 801d374:	2300      	movs	r3, #0
 801d376:	b510      	push	{r4, lr}
 801d378:	4604      	mov	r4, r0
 801d37a:	e9c0 3300 	strd	r3, r3, [r0]
 801d37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d382:	6083      	str	r3, [r0, #8]
 801d384:	8181      	strh	r1, [r0, #12]
 801d386:	6643      	str	r3, [r0, #100]	@ 0x64
 801d388:	81c2      	strh	r2, [r0, #14]
 801d38a:	6183      	str	r3, [r0, #24]
 801d38c:	4619      	mov	r1, r3
 801d38e:	2208      	movs	r2, #8
 801d390:	305c      	adds	r0, #92	@ 0x5c
 801d392:	f000 f8f4 	bl	801d57e <memset>
 801d396:	4b0d      	ldr	r3, [pc, #52]	@ (801d3cc <std+0x58>)
 801d398:	6263      	str	r3, [r4, #36]	@ 0x24
 801d39a:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d0 <std+0x5c>)
 801d39c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d39e:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d4 <std+0x60>)
 801d3a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d3a2:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d8 <std+0x64>)
 801d3a4:	6323      	str	r3, [r4, #48]	@ 0x30
 801d3a6:	4b0d      	ldr	r3, [pc, #52]	@ (801d3dc <std+0x68>)
 801d3a8:	6224      	str	r4, [r4, #32]
 801d3aa:	429c      	cmp	r4, r3
 801d3ac:	d006      	beq.n	801d3bc <std+0x48>
 801d3ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d3b2:	4294      	cmp	r4, r2
 801d3b4:	d002      	beq.n	801d3bc <std+0x48>
 801d3b6:	33d0      	adds	r3, #208	@ 0xd0
 801d3b8:	429c      	cmp	r4, r3
 801d3ba:	d105      	bne.n	801d3c8 <std+0x54>
 801d3bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3c4:	f000 b958 	b.w	801d678 <__retarget_lock_init_recursive>
 801d3c8:	bd10      	pop	{r4, pc}
 801d3ca:	bf00      	nop
 801d3cc:	0801d4f9 	.word	0x0801d4f9
 801d3d0:	0801d51b 	.word	0x0801d51b
 801d3d4:	0801d553 	.word	0x0801d553
 801d3d8:	0801d577 	.word	0x0801d577
 801d3dc:	2000230c 	.word	0x2000230c

0801d3e0 <stdio_exit_handler>:
 801d3e0:	4a02      	ldr	r2, [pc, #8]	@ (801d3ec <stdio_exit_handler+0xc>)
 801d3e2:	4903      	ldr	r1, [pc, #12]	@ (801d3f0 <stdio_exit_handler+0x10>)
 801d3e4:	4803      	ldr	r0, [pc, #12]	@ (801d3f4 <stdio_exit_handler+0x14>)
 801d3e6:	f000 b869 	b.w	801d4bc <_fwalk_sglue>
 801d3ea:	bf00      	nop
 801d3ec:	20000350 	.word	0x20000350
 801d3f0:	0801ed45 	.word	0x0801ed45
 801d3f4:	20000360 	.word	0x20000360

0801d3f8 <cleanup_stdio>:
 801d3f8:	6841      	ldr	r1, [r0, #4]
 801d3fa:	4b0c      	ldr	r3, [pc, #48]	@ (801d42c <cleanup_stdio+0x34>)
 801d3fc:	4299      	cmp	r1, r3
 801d3fe:	b510      	push	{r4, lr}
 801d400:	4604      	mov	r4, r0
 801d402:	d001      	beq.n	801d408 <cleanup_stdio+0x10>
 801d404:	f001 fc9e 	bl	801ed44 <_fflush_r>
 801d408:	68a1      	ldr	r1, [r4, #8]
 801d40a:	4b09      	ldr	r3, [pc, #36]	@ (801d430 <cleanup_stdio+0x38>)
 801d40c:	4299      	cmp	r1, r3
 801d40e:	d002      	beq.n	801d416 <cleanup_stdio+0x1e>
 801d410:	4620      	mov	r0, r4
 801d412:	f001 fc97 	bl	801ed44 <_fflush_r>
 801d416:	68e1      	ldr	r1, [r4, #12]
 801d418:	4b06      	ldr	r3, [pc, #24]	@ (801d434 <cleanup_stdio+0x3c>)
 801d41a:	4299      	cmp	r1, r3
 801d41c:	d004      	beq.n	801d428 <cleanup_stdio+0x30>
 801d41e:	4620      	mov	r0, r4
 801d420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d424:	f001 bc8e 	b.w	801ed44 <_fflush_r>
 801d428:	bd10      	pop	{r4, pc}
 801d42a:	bf00      	nop
 801d42c:	2000230c 	.word	0x2000230c
 801d430:	20002374 	.word	0x20002374
 801d434:	200023dc 	.word	0x200023dc

0801d438 <global_stdio_init.part.0>:
 801d438:	b510      	push	{r4, lr}
 801d43a:	4b0b      	ldr	r3, [pc, #44]	@ (801d468 <global_stdio_init.part.0+0x30>)
 801d43c:	4c0b      	ldr	r4, [pc, #44]	@ (801d46c <global_stdio_init.part.0+0x34>)
 801d43e:	4a0c      	ldr	r2, [pc, #48]	@ (801d470 <global_stdio_init.part.0+0x38>)
 801d440:	601a      	str	r2, [r3, #0]
 801d442:	4620      	mov	r0, r4
 801d444:	2200      	movs	r2, #0
 801d446:	2104      	movs	r1, #4
 801d448:	f7ff ff94 	bl	801d374 <std>
 801d44c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d450:	2201      	movs	r2, #1
 801d452:	2109      	movs	r1, #9
 801d454:	f7ff ff8e 	bl	801d374 <std>
 801d458:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d45c:	2202      	movs	r2, #2
 801d45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d462:	2112      	movs	r1, #18
 801d464:	f7ff bf86 	b.w	801d374 <std>
 801d468:	20002444 	.word	0x20002444
 801d46c:	2000230c 	.word	0x2000230c
 801d470:	0801d3e1 	.word	0x0801d3e1

0801d474 <__sfp_lock_acquire>:
 801d474:	4801      	ldr	r0, [pc, #4]	@ (801d47c <__sfp_lock_acquire+0x8>)
 801d476:	f000 b900 	b.w	801d67a <__retarget_lock_acquire_recursive>
 801d47a:	bf00      	nop
 801d47c:	2000244d 	.word	0x2000244d

0801d480 <__sfp_lock_release>:
 801d480:	4801      	ldr	r0, [pc, #4]	@ (801d488 <__sfp_lock_release+0x8>)
 801d482:	f000 b8fb 	b.w	801d67c <__retarget_lock_release_recursive>
 801d486:	bf00      	nop
 801d488:	2000244d 	.word	0x2000244d

0801d48c <__sinit>:
 801d48c:	b510      	push	{r4, lr}
 801d48e:	4604      	mov	r4, r0
 801d490:	f7ff fff0 	bl	801d474 <__sfp_lock_acquire>
 801d494:	6a23      	ldr	r3, [r4, #32]
 801d496:	b11b      	cbz	r3, 801d4a0 <__sinit+0x14>
 801d498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d49c:	f7ff bff0 	b.w	801d480 <__sfp_lock_release>
 801d4a0:	4b04      	ldr	r3, [pc, #16]	@ (801d4b4 <__sinit+0x28>)
 801d4a2:	6223      	str	r3, [r4, #32]
 801d4a4:	4b04      	ldr	r3, [pc, #16]	@ (801d4b8 <__sinit+0x2c>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d1f5      	bne.n	801d498 <__sinit+0xc>
 801d4ac:	f7ff ffc4 	bl	801d438 <global_stdio_init.part.0>
 801d4b0:	e7f2      	b.n	801d498 <__sinit+0xc>
 801d4b2:	bf00      	nop
 801d4b4:	0801d3f9 	.word	0x0801d3f9
 801d4b8:	20002444 	.word	0x20002444

0801d4bc <_fwalk_sglue>:
 801d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4c0:	4607      	mov	r7, r0
 801d4c2:	4688      	mov	r8, r1
 801d4c4:	4614      	mov	r4, r2
 801d4c6:	2600      	movs	r6, #0
 801d4c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d4cc:	f1b9 0901 	subs.w	r9, r9, #1
 801d4d0:	d505      	bpl.n	801d4de <_fwalk_sglue+0x22>
 801d4d2:	6824      	ldr	r4, [r4, #0]
 801d4d4:	2c00      	cmp	r4, #0
 801d4d6:	d1f7      	bne.n	801d4c8 <_fwalk_sglue+0xc>
 801d4d8:	4630      	mov	r0, r6
 801d4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4de:	89ab      	ldrh	r3, [r5, #12]
 801d4e0:	2b01      	cmp	r3, #1
 801d4e2:	d907      	bls.n	801d4f4 <_fwalk_sglue+0x38>
 801d4e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d4e8:	3301      	adds	r3, #1
 801d4ea:	d003      	beq.n	801d4f4 <_fwalk_sglue+0x38>
 801d4ec:	4629      	mov	r1, r5
 801d4ee:	4638      	mov	r0, r7
 801d4f0:	47c0      	blx	r8
 801d4f2:	4306      	orrs	r6, r0
 801d4f4:	3568      	adds	r5, #104	@ 0x68
 801d4f6:	e7e9      	b.n	801d4cc <_fwalk_sglue+0x10>

0801d4f8 <__sread>:
 801d4f8:	b510      	push	{r4, lr}
 801d4fa:	460c      	mov	r4, r1
 801d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d500:	f000 f86c 	bl	801d5dc <_read_r>
 801d504:	2800      	cmp	r0, #0
 801d506:	bfab      	itete	ge
 801d508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d50a:	89a3      	ldrhlt	r3, [r4, #12]
 801d50c:	181b      	addge	r3, r3, r0
 801d50e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d512:	bfac      	ite	ge
 801d514:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d516:	81a3      	strhlt	r3, [r4, #12]
 801d518:	bd10      	pop	{r4, pc}

0801d51a <__swrite>:
 801d51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d51e:	461f      	mov	r7, r3
 801d520:	898b      	ldrh	r3, [r1, #12]
 801d522:	05db      	lsls	r3, r3, #23
 801d524:	4605      	mov	r5, r0
 801d526:	460c      	mov	r4, r1
 801d528:	4616      	mov	r6, r2
 801d52a:	d505      	bpl.n	801d538 <__swrite+0x1e>
 801d52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d530:	2302      	movs	r3, #2
 801d532:	2200      	movs	r2, #0
 801d534:	f000 f840 	bl	801d5b8 <_lseek_r>
 801d538:	89a3      	ldrh	r3, [r4, #12]
 801d53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d53e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d542:	81a3      	strh	r3, [r4, #12]
 801d544:	4632      	mov	r2, r6
 801d546:	463b      	mov	r3, r7
 801d548:	4628      	mov	r0, r5
 801d54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d54e:	f000 b857 	b.w	801d600 <_write_r>

0801d552 <__sseek>:
 801d552:	b510      	push	{r4, lr}
 801d554:	460c      	mov	r4, r1
 801d556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d55a:	f000 f82d 	bl	801d5b8 <_lseek_r>
 801d55e:	1c43      	adds	r3, r0, #1
 801d560:	89a3      	ldrh	r3, [r4, #12]
 801d562:	bf15      	itete	ne
 801d564:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d56a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d56e:	81a3      	strheq	r3, [r4, #12]
 801d570:	bf18      	it	ne
 801d572:	81a3      	strhne	r3, [r4, #12]
 801d574:	bd10      	pop	{r4, pc}

0801d576 <__sclose>:
 801d576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d57a:	f000 b80d 	b.w	801d598 <_close_r>

0801d57e <memset>:
 801d57e:	4402      	add	r2, r0
 801d580:	4603      	mov	r3, r0
 801d582:	4293      	cmp	r3, r2
 801d584:	d100      	bne.n	801d588 <memset+0xa>
 801d586:	4770      	bx	lr
 801d588:	f803 1b01 	strb.w	r1, [r3], #1
 801d58c:	e7f9      	b.n	801d582 <memset+0x4>
	...

0801d590 <_localeconv_r>:
 801d590:	4800      	ldr	r0, [pc, #0]	@ (801d594 <_localeconv_r+0x4>)
 801d592:	4770      	bx	lr
 801d594:	2000049c 	.word	0x2000049c

0801d598 <_close_r>:
 801d598:	b538      	push	{r3, r4, r5, lr}
 801d59a:	4d06      	ldr	r5, [pc, #24]	@ (801d5b4 <_close_r+0x1c>)
 801d59c:	2300      	movs	r3, #0
 801d59e:	4604      	mov	r4, r0
 801d5a0:	4608      	mov	r0, r1
 801d5a2:	602b      	str	r3, [r5, #0]
 801d5a4:	f7e8 fa54 	bl	8005a50 <_close>
 801d5a8:	1c43      	adds	r3, r0, #1
 801d5aa:	d102      	bne.n	801d5b2 <_close_r+0x1a>
 801d5ac:	682b      	ldr	r3, [r5, #0]
 801d5ae:	b103      	cbz	r3, 801d5b2 <_close_r+0x1a>
 801d5b0:	6023      	str	r3, [r4, #0]
 801d5b2:	bd38      	pop	{r3, r4, r5, pc}
 801d5b4:	20002448 	.word	0x20002448

0801d5b8 <_lseek_r>:
 801d5b8:	b538      	push	{r3, r4, r5, lr}
 801d5ba:	4d07      	ldr	r5, [pc, #28]	@ (801d5d8 <_lseek_r+0x20>)
 801d5bc:	4604      	mov	r4, r0
 801d5be:	4608      	mov	r0, r1
 801d5c0:	4611      	mov	r1, r2
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	602a      	str	r2, [r5, #0]
 801d5c6:	461a      	mov	r2, r3
 801d5c8:	f7e8 fa69 	bl	8005a9e <_lseek>
 801d5cc:	1c43      	adds	r3, r0, #1
 801d5ce:	d102      	bne.n	801d5d6 <_lseek_r+0x1e>
 801d5d0:	682b      	ldr	r3, [r5, #0]
 801d5d2:	b103      	cbz	r3, 801d5d6 <_lseek_r+0x1e>
 801d5d4:	6023      	str	r3, [r4, #0]
 801d5d6:	bd38      	pop	{r3, r4, r5, pc}
 801d5d8:	20002448 	.word	0x20002448

0801d5dc <_read_r>:
 801d5dc:	b538      	push	{r3, r4, r5, lr}
 801d5de:	4d07      	ldr	r5, [pc, #28]	@ (801d5fc <_read_r+0x20>)
 801d5e0:	4604      	mov	r4, r0
 801d5e2:	4608      	mov	r0, r1
 801d5e4:	4611      	mov	r1, r2
 801d5e6:	2200      	movs	r2, #0
 801d5e8:	602a      	str	r2, [r5, #0]
 801d5ea:	461a      	mov	r2, r3
 801d5ec:	f7e8 f9f7 	bl	80059de <_read>
 801d5f0:	1c43      	adds	r3, r0, #1
 801d5f2:	d102      	bne.n	801d5fa <_read_r+0x1e>
 801d5f4:	682b      	ldr	r3, [r5, #0]
 801d5f6:	b103      	cbz	r3, 801d5fa <_read_r+0x1e>
 801d5f8:	6023      	str	r3, [r4, #0]
 801d5fa:	bd38      	pop	{r3, r4, r5, pc}
 801d5fc:	20002448 	.word	0x20002448

0801d600 <_write_r>:
 801d600:	b538      	push	{r3, r4, r5, lr}
 801d602:	4d07      	ldr	r5, [pc, #28]	@ (801d620 <_write_r+0x20>)
 801d604:	4604      	mov	r4, r0
 801d606:	4608      	mov	r0, r1
 801d608:	4611      	mov	r1, r2
 801d60a:	2200      	movs	r2, #0
 801d60c:	602a      	str	r2, [r5, #0]
 801d60e:	461a      	mov	r2, r3
 801d610:	f7e8 fa02 	bl	8005a18 <_write>
 801d614:	1c43      	adds	r3, r0, #1
 801d616:	d102      	bne.n	801d61e <_write_r+0x1e>
 801d618:	682b      	ldr	r3, [r5, #0]
 801d61a:	b103      	cbz	r3, 801d61e <_write_r+0x1e>
 801d61c:	6023      	str	r3, [r4, #0]
 801d61e:	bd38      	pop	{r3, r4, r5, pc}
 801d620:	20002448 	.word	0x20002448

0801d624 <__errno>:
 801d624:	4b01      	ldr	r3, [pc, #4]	@ (801d62c <__errno+0x8>)
 801d626:	6818      	ldr	r0, [r3, #0]
 801d628:	4770      	bx	lr
 801d62a:	bf00      	nop
 801d62c:	2000035c 	.word	0x2000035c

0801d630 <__libc_init_array>:
 801d630:	b570      	push	{r4, r5, r6, lr}
 801d632:	4d0d      	ldr	r5, [pc, #52]	@ (801d668 <__libc_init_array+0x38>)
 801d634:	4c0d      	ldr	r4, [pc, #52]	@ (801d66c <__libc_init_array+0x3c>)
 801d636:	1b64      	subs	r4, r4, r5
 801d638:	10a4      	asrs	r4, r4, #2
 801d63a:	2600      	movs	r6, #0
 801d63c:	42a6      	cmp	r6, r4
 801d63e:	d109      	bne.n	801d654 <__libc_init_array+0x24>
 801d640:	4d0b      	ldr	r5, [pc, #44]	@ (801d670 <__libc_init_array+0x40>)
 801d642:	4c0c      	ldr	r4, [pc, #48]	@ (801d674 <__libc_init_array+0x44>)
 801d644:	f006 f948 	bl	80238d8 <_init>
 801d648:	1b64      	subs	r4, r4, r5
 801d64a:	10a4      	asrs	r4, r4, #2
 801d64c:	2600      	movs	r6, #0
 801d64e:	42a6      	cmp	r6, r4
 801d650:	d105      	bne.n	801d65e <__libc_init_array+0x2e>
 801d652:	bd70      	pop	{r4, r5, r6, pc}
 801d654:	f855 3b04 	ldr.w	r3, [r5], #4
 801d658:	4798      	blx	r3
 801d65a:	3601      	adds	r6, #1
 801d65c:	e7ee      	b.n	801d63c <__libc_init_array+0xc>
 801d65e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d662:	4798      	blx	r3
 801d664:	3601      	adds	r6, #1
 801d666:	e7f2      	b.n	801d64e <__libc_init_array+0x1e>
 801d668:	08024378 	.word	0x08024378
 801d66c:	08024378 	.word	0x08024378
 801d670:	08024378 	.word	0x08024378
 801d674:	0802437c 	.word	0x0802437c

0801d678 <__retarget_lock_init_recursive>:
 801d678:	4770      	bx	lr

0801d67a <__retarget_lock_acquire_recursive>:
 801d67a:	4770      	bx	lr

0801d67c <__retarget_lock_release_recursive>:
 801d67c:	4770      	bx	lr

0801d67e <memcpy>:
 801d67e:	440a      	add	r2, r1
 801d680:	4291      	cmp	r1, r2
 801d682:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d686:	d100      	bne.n	801d68a <memcpy+0xc>
 801d688:	4770      	bx	lr
 801d68a:	b510      	push	{r4, lr}
 801d68c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d690:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d694:	4291      	cmp	r1, r2
 801d696:	d1f9      	bne.n	801d68c <memcpy+0xe>
 801d698:	bd10      	pop	{r4, pc}

0801d69a <quorem>:
 801d69a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d69e:	6903      	ldr	r3, [r0, #16]
 801d6a0:	690c      	ldr	r4, [r1, #16]
 801d6a2:	42a3      	cmp	r3, r4
 801d6a4:	4607      	mov	r7, r0
 801d6a6:	db7e      	blt.n	801d7a6 <quorem+0x10c>
 801d6a8:	3c01      	subs	r4, #1
 801d6aa:	f101 0814 	add.w	r8, r1, #20
 801d6ae:	00a3      	lsls	r3, r4, #2
 801d6b0:	f100 0514 	add.w	r5, r0, #20
 801d6b4:	9300      	str	r3, [sp, #0]
 801d6b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d6ba:	9301      	str	r3, [sp, #4]
 801d6bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d6c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d6c4:	3301      	adds	r3, #1
 801d6c6:	429a      	cmp	r2, r3
 801d6c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d6cc:	fbb2 f6f3 	udiv	r6, r2, r3
 801d6d0:	d32e      	bcc.n	801d730 <quorem+0x96>
 801d6d2:	f04f 0a00 	mov.w	sl, #0
 801d6d6:	46c4      	mov	ip, r8
 801d6d8:	46ae      	mov	lr, r5
 801d6da:	46d3      	mov	fp, sl
 801d6dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d6e0:	b298      	uxth	r0, r3
 801d6e2:	fb06 a000 	mla	r0, r6, r0, sl
 801d6e6:	0c02      	lsrs	r2, r0, #16
 801d6e8:	0c1b      	lsrs	r3, r3, #16
 801d6ea:	fb06 2303 	mla	r3, r6, r3, r2
 801d6ee:	f8de 2000 	ldr.w	r2, [lr]
 801d6f2:	b280      	uxth	r0, r0
 801d6f4:	b292      	uxth	r2, r2
 801d6f6:	1a12      	subs	r2, r2, r0
 801d6f8:	445a      	add	r2, fp
 801d6fa:	f8de 0000 	ldr.w	r0, [lr]
 801d6fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d702:	b29b      	uxth	r3, r3
 801d704:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d708:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d70c:	b292      	uxth	r2, r2
 801d70e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d712:	45e1      	cmp	r9, ip
 801d714:	f84e 2b04 	str.w	r2, [lr], #4
 801d718:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d71c:	d2de      	bcs.n	801d6dc <quorem+0x42>
 801d71e:	9b00      	ldr	r3, [sp, #0]
 801d720:	58eb      	ldr	r3, [r5, r3]
 801d722:	b92b      	cbnz	r3, 801d730 <quorem+0x96>
 801d724:	9b01      	ldr	r3, [sp, #4]
 801d726:	3b04      	subs	r3, #4
 801d728:	429d      	cmp	r5, r3
 801d72a:	461a      	mov	r2, r3
 801d72c:	d32f      	bcc.n	801d78e <quorem+0xf4>
 801d72e:	613c      	str	r4, [r7, #16]
 801d730:	4638      	mov	r0, r7
 801d732:	f001 f97b 	bl	801ea2c <__mcmp>
 801d736:	2800      	cmp	r0, #0
 801d738:	db25      	blt.n	801d786 <quorem+0xec>
 801d73a:	4629      	mov	r1, r5
 801d73c:	2000      	movs	r0, #0
 801d73e:	f858 2b04 	ldr.w	r2, [r8], #4
 801d742:	f8d1 c000 	ldr.w	ip, [r1]
 801d746:	fa1f fe82 	uxth.w	lr, r2
 801d74a:	fa1f f38c 	uxth.w	r3, ip
 801d74e:	eba3 030e 	sub.w	r3, r3, lr
 801d752:	4403      	add	r3, r0
 801d754:	0c12      	lsrs	r2, r2, #16
 801d756:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d75a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d75e:	b29b      	uxth	r3, r3
 801d760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d764:	45c1      	cmp	r9, r8
 801d766:	f841 3b04 	str.w	r3, [r1], #4
 801d76a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d76e:	d2e6      	bcs.n	801d73e <quorem+0xa4>
 801d770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d778:	b922      	cbnz	r2, 801d784 <quorem+0xea>
 801d77a:	3b04      	subs	r3, #4
 801d77c:	429d      	cmp	r5, r3
 801d77e:	461a      	mov	r2, r3
 801d780:	d30b      	bcc.n	801d79a <quorem+0x100>
 801d782:	613c      	str	r4, [r7, #16]
 801d784:	3601      	adds	r6, #1
 801d786:	4630      	mov	r0, r6
 801d788:	b003      	add	sp, #12
 801d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d78e:	6812      	ldr	r2, [r2, #0]
 801d790:	3b04      	subs	r3, #4
 801d792:	2a00      	cmp	r2, #0
 801d794:	d1cb      	bne.n	801d72e <quorem+0x94>
 801d796:	3c01      	subs	r4, #1
 801d798:	e7c6      	b.n	801d728 <quorem+0x8e>
 801d79a:	6812      	ldr	r2, [r2, #0]
 801d79c:	3b04      	subs	r3, #4
 801d79e:	2a00      	cmp	r2, #0
 801d7a0:	d1ef      	bne.n	801d782 <quorem+0xe8>
 801d7a2:	3c01      	subs	r4, #1
 801d7a4:	e7ea      	b.n	801d77c <quorem+0xe2>
 801d7a6:	2000      	movs	r0, #0
 801d7a8:	e7ee      	b.n	801d788 <quorem+0xee>
 801d7aa:	0000      	movs	r0, r0
 801d7ac:	0000      	movs	r0, r0
	...

0801d7b0 <_dtoa_r>:
 801d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7b4:	69c7      	ldr	r7, [r0, #28]
 801d7b6:	b099      	sub	sp, #100	@ 0x64
 801d7b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d7bc:	ec55 4b10 	vmov	r4, r5, d0
 801d7c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d7c2:	9109      	str	r1, [sp, #36]	@ 0x24
 801d7c4:	4683      	mov	fp, r0
 801d7c6:	920e      	str	r2, [sp, #56]	@ 0x38
 801d7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d7ca:	b97f      	cbnz	r7, 801d7ec <_dtoa_r+0x3c>
 801d7cc:	2010      	movs	r0, #16
 801d7ce:	f000 fdfd 	bl	801e3cc <malloc>
 801d7d2:	4602      	mov	r2, r0
 801d7d4:	f8cb 001c 	str.w	r0, [fp, #28]
 801d7d8:	b920      	cbnz	r0, 801d7e4 <_dtoa_r+0x34>
 801d7da:	4ba7      	ldr	r3, [pc, #668]	@ (801da78 <_dtoa_r+0x2c8>)
 801d7dc:	21ef      	movs	r1, #239	@ 0xef
 801d7de:	48a7      	ldr	r0, [pc, #668]	@ (801da7c <_dtoa_r+0x2cc>)
 801d7e0:	f001 fae8 	bl	801edb4 <__assert_func>
 801d7e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d7e8:	6007      	str	r7, [r0, #0]
 801d7ea:	60c7      	str	r7, [r0, #12]
 801d7ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d7f0:	6819      	ldr	r1, [r3, #0]
 801d7f2:	b159      	cbz	r1, 801d80c <_dtoa_r+0x5c>
 801d7f4:	685a      	ldr	r2, [r3, #4]
 801d7f6:	604a      	str	r2, [r1, #4]
 801d7f8:	2301      	movs	r3, #1
 801d7fa:	4093      	lsls	r3, r2
 801d7fc:	608b      	str	r3, [r1, #8]
 801d7fe:	4658      	mov	r0, fp
 801d800:	f000 feda 	bl	801e5b8 <_Bfree>
 801d804:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d808:	2200      	movs	r2, #0
 801d80a:	601a      	str	r2, [r3, #0]
 801d80c:	1e2b      	subs	r3, r5, #0
 801d80e:	bfb9      	ittee	lt
 801d810:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d814:	9303      	strlt	r3, [sp, #12]
 801d816:	2300      	movge	r3, #0
 801d818:	6033      	strge	r3, [r6, #0]
 801d81a:	9f03      	ldr	r7, [sp, #12]
 801d81c:	4b98      	ldr	r3, [pc, #608]	@ (801da80 <_dtoa_r+0x2d0>)
 801d81e:	bfbc      	itt	lt
 801d820:	2201      	movlt	r2, #1
 801d822:	6032      	strlt	r2, [r6, #0]
 801d824:	43bb      	bics	r3, r7
 801d826:	d112      	bne.n	801d84e <_dtoa_r+0x9e>
 801d828:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d82a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d82e:	6013      	str	r3, [r2, #0]
 801d830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d834:	4323      	orrs	r3, r4
 801d836:	f000 854d 	beq.w	801e2d4 <_dtoa_r+0xb24>
 801d83a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d83c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801da94 <_dtoa_r+0x2e4>
 801d840:	2b00      	cmp	r3, #0
 801d842:	f000 854f 	beq.w	801e2e4 <_dtoa_r+0xb34>
 801d846:	f10a 0303 	add.w	r3, sl, #3
 801d84a:	f000 bd49 	b.w	801e2e0 <_dtoa_r+0xb30>
 801d84e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d852:	2200      	movs	r2, #0
 801d854:	ec51 0b17 	vmov	r0, r1, d7
 801d858:	2300      	movs	r3, #0
 801d85a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801d85e:	f7e3 f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 801d862:	4680      	mov	r8, r0
 801d864:	b158      	cbz	r0, 801d87e <_dtoa_r+0xce>
 801d866:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d868:	2301      	movs	r3, #1
 801d86a:	6013      	str	r3, [r2, #0]
 801d86c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d86e:	b113      	cbz	r3, 801d876 <_dtoa_r+0xc6>
 801d870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d872:	4b84      	ldr	r3, [pc, #528]	@ (801da84 <_dtoa_r+0x2d4>)
 801d874:	6013      	str	r3, [r2, #0]
 801d876:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801da98 <_dtoa_r+0x2e8>
 801d87a:	f000 bd33 	b.w	801e2e4 <_dtoa_r+0xb34>
 801d87e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d882:	aa16      	add	r2, sp, #88	@ 0x58
 801d884:	a917      	add	r1, sp, #92	@ 0x5c
 801d886:	4658      	mov	r0, fp
 801d888:	f001 f980 	bl	801eb8c <__d2b>
 801d88c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d890:	4681      	mov	r9, r0
 801d892:	2e00      	cmp	r6, #0
 801d894:	d077      	beq.n	801d986 <_dtoa_r+0x1d6>
 801d896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d898:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d8a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d8a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d8ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d8b0:	4619      	mov	r1, r3
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	4b74      	ldr	r3, [pc, #464]	@ (801da88 <_dtoa_r+0x2d8>)
 801d8b6:	f7e2 fcef 	bl	8000298 <__aeabi_dsub>
 801d8ba:	a369      	add	r3, pc, #420	@ (adr r3, 801da60 <_dtoa_r+0x2b0>)
 801d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c0:	f7e2 fea2 	bl	8000608 <__aeabi_dmul>
 801d8c4:	a368      	add	r3, pc, #416	@ (adr r3, 801da68 <_dtoa_r+0x2b8>)
 801d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ca:	f7e2 fce7 	bl	800029c <__adddf3>
 801d8ce:	4604      	mov	r4, r0
 801d8d0:	4630      	mov	r0, r6
 801d8d2:	460d      	mov	r5, r1
 801d8d4:	f7e2 fe2e 	bl	8000534 <__aeabi_i2d>
 801d8d8:	a365      	add	r3, pc, #404	@ (adr r3, 801da70 <_dtoa_r+0x2c0>)
 801d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8de:	f7e2 fe93 	bl	8000608 <__aeabi_dmul>
 801d8e2:	4602      	mov	r2, r0
 801d8e4:	460b      	mov	r3, r1
 801d8e6:	4620      	mov	r0, r4
 801d8e8:	4629      	mov	r1, r5
 801d8ea:	f7e2 fcd7 	bl	800029c <__adddf3>
 801d8ee:	4604      	mov	r4, r0
 801d8f0:	460d      	mov	r5, r1
 801d8f2:	f7e3 f939 	bl	8000b68 <__aeabi_d2iz>
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	4607      	mov	r7, r0
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	4620      	mov	r0, r4
 801d8fe:	4629      	mov	r1, r5
 801d900:	f7e3 f8f4 	bl	8000aec <__aeabi_dcmplt>
 801d904:	b140      	cbz	r0, 801d918 <_dtoa_r+0x168>
 801d906:	4638      	mov	r0, r7
 801d908:	f7e2 fe14 	bl	8000534 <__aeabi_i2d>
 801d90c:	4622      	mov	r2, r4
 801d90e:	462b      	mov	r3, r5
 801d910:	f7e3 f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 801d914:	b900      	cbnz	r0, 801d918 <_dtoa_r+0x168>
 801d916:	3f01      	subs	r7, #1
 801d918:	2f16      	cmp	r7, #22
 801d91a:	d851      	bhi.n	801d9c0 <_dtoa_r+0x210>
 801d91c:	4b5b      	ldr	r3, [pc, #364]	@ (801da8c <_dtoa_r+0x2dc>)
 801d91e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d92a:	f7e3 f8df 	bl	8000aec <__aeabi_dcmplt>
 801d92e:	2800      	cmp	r0, #0
 801d930:	d048      	beq.n	801d9c4 <_dtoa_r+0x214>
 801d932:	3f01      	subs	r7, #1
 801d934:	2300      	movs	r3, #0
 801d936:	9312      	str	r3, [sp, #72]	@ 0x48
 801d938:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d93a:	1b9b      	subs	r3, r3, r6
 801d93c:	1e5a      	subs	r2, r3, #1
 801d93e:	bf44      	itt	mi
 801d940:	f1c3 0801 	rsbmi	r8, r3, #1
 801d944:	2300      	movmi	r3, #0
 801d946:	9208      	str	r2, [sp, #32]
 801d948:	bf54      	ite	pl
 801d94a:	f04f 0800 	movpl.w	r8, #0
 801d94e:	9308      	strmi	r3, [sp, #32]
 801d950:	2f00      	cmp	r7, #0
 801d952:	db39      	blt.n	801d9c8 <_dtoa_r+0x218>
 801d954:	9b08      	ldr	r3, [sp, #32]
 801d956:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d958:	443b      	add	r3, r7
 801d95a:	9308      	str	r3, [sp, #32]
 801d95c:	2300      	movs	r3, #0
 801d95e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d962:	2b09      	cmp	r3, #9
 801d964:	d864      	bhi.n	801da30 <_dtoa_r+0x280>
 801d966:	2b05      	cmp	r3, #5
 801d968:	bfc4      	itt	gt
 801d96a:	3b04      	subgt	r3, #4
 801d96c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d970:	f1a3 0302 	sub.w	r3, r3, #2
 801d974:	bfcc      	ite	gt
 801d976:	2400      	movgt	r4, #0
 801d978:	2401      	movle	r4, #1
 801d97a:	2b03      	cmp	r3, #3
 801d97c:	d863      	bhi.n	801da46 <_dtoa_r+0x296>
 801d97e:	e8df f003 	tbb	[pc, r3]
 801d982:	372a      	.short	0x372a
 801d984:	5535      	.short	0x5535
 801d986:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d98a:	441e      	add	r6, r3
 801d98c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d990:	2b20      	cmp	r3, #32
 801d992:	bfc1      	itttt	gt
 801d994:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d998:	409f      	lslgt	r7, r3
 801d99a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d99e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d9a2:	bfd6      	itet	le
 801d9a4:	f1c3 0320 	rsble	r3, r3, #32
 801d9a8:	ea47 0003 	orrgt.w	r0, r7, r3
 801d9ac:	fa04 f003 	lslle.w	r0, r4, r3
 801d9b0:	f7e2 fdb0 	bl	8000514 <__aeabi_ui2d>
 801d9b4:	2201      	movs	r2, #1
 801d9b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d9ba:	3e01      	subs	r6, #1
 801d9bc:	9214      	str	r2, [sp, #80]	@ 0x50
 801d9be:	e777      	b.n	801d8b0 <_dtoa_r+0x100>
 801d9c0:	2301      	movs	r3, #1
 801d9c2:	e7b8      	b.n	801d936 <_dtoa_r+0x186>
 801d9c4:	9012      	str	r0, [sp, #72]	@ 0x48
 801d9c6:	e7b7      	b.n	801d938 <_dtoa_r+0x188>
 801d9c8:	427b      	negs	r3, r7
 801d9ca:	930a      	str	r3, [sp, #40]	@ 0x28
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	eba8 0807 	sub.w	r8, r8, r7
 801d9d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d9d4:	e7c4      	b.n	801d960 <_dtoa_r+0x1b0>
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	dc35      	bgt.n	801da4c <_dtoa_r+0x29c>
 801d9e0:	2301      	movs	r3, #1
 801d9e2:	9300      	str	r3, [sp, #0]
 801d9e4:	9307      	str	r3, [sp, #28]
 801d9e6:	461a      	mov	r2, r3
 801d9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 801d9ea:	e00b      	b.n	801da04 <_dtoa_r+0x254>
 801d9ec:	2301      	movs	r3, #1
 801d9ee:	e7f3      	b.n	801d9d8 <_dtoa_r+0x228>
 801d9f0:	2300      	movs	r3, #0
 801d9f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9f6:	18fb      	adds	r3, r7, r3
 801d9f8:	9300      	str	r3, [sp, #0]
 801d9fa:	3301      	adds	r3, #1
 801d9fc:	2b01      	cmp	r3, #1
 801d9fe:	9307      	str	r3, [sp, #28]
 801da00:	bfb8      	it	lt
 801da02:	2301      	movlt	r3, #1
 801da04:	f8db 001c 	ldr.w	r0, [fp, #28]
 801da08:	2100      	movs	r1, #0
 801da0a:	2204      	movs	r2, #4
 801da0c:	f102 0514 	add.w	r5, r2, #20
 801da10:	429d      	cmp	r5, r3
 801da12:	d91f      	bls.n	801da54 <_dtoa_r+0x2a4>
 801da14:	6041      	str	r1, [r0, #4]
 801da16:	4658      	mov	r0, fp
 801da18:	f000 fd8e 	bl	801e538 <_Balloc>
 801da1c:	4682      	mov	sl, r0
 801da1e:	2800      	cmp	r0, #0
 801da20:	d13c      	bne.n	801da9c <_dtoa_r+0x2ec>
 801da22:	4b1b      	ldr	r3, [pc, #108]	@ (801da90 <_dtoa_r+0x2e0>)
 801da24:	4602      	mov	r2, r0
 801da26:	f240 11af 	movw	r1, #431	@ 0x1af
 801da2a:	e6d8      	b.n	801d7de <_dtoa_r+0x2e>
 801da2c:	2301      	movs	r3, #1
 801da2e:	e7e0      	b.n	801d9f2 <_dtoa_r+0x242>
 801da30:	2401      	movs	r4, #1
 801da32:	2300      	movs	r3, #0
 801da34:	9309      	str	r3, [sp, #36]	@ 0x24
 801da36:	940b      	str	r4, [sp, #44]	@ 0x2c
 801da38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801da3c:	9300      	str	r3, [sp, #0]
 801da3e:	9307      	str	r3, [sp, #28]
 801da40:	2200      	movs	r2, #0
 801da42:	2312      	movs	r3, #18
 801da44:	e7d0      	b.n	801d9e8 <_dtoa_r+0x238>
 801da46:	2301      	movs	r3, #1
 801da48:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da4a:	e7f5      	b.n	801da38 <_dtoa_r+0x288>
 801da4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da4e:	9300      	str	r3, [sp, #0]
 801da50:	9307      	str	r3, [sp, #28]
 801da52:	e7d7      	b.n	801da04 <_dtoa_r+0x254>
 801da54:	3101      	adds	r1, #1
 801da56:	0052      	lsls	r2, r2, #1
 801da58:	e7d8      	b.n	801da0c <_dtoa_r+0x25c>
 801da5a:	bf00      	nop
 801da5c:	f3af 8000 	nop.w
 801da60:	636f4361 	.word	0x636f4361
 801da64:	3fd287a7 	.word	0x3fd287a7
 801da68:	8b60c8b3 	.word	0x8b60c8b3
 801da6c:	3fc68a28 	.word	0x3fc68a28
 801da70:	509f79fb 	.word	0x509f79fb
 801da74:	3fd34413 	.word	0x3fd34413
 801da78:	080239c1 	.word	0x080239c1
 801da7c:	080239d8 	.word	0x080239d8
 801da80:	7ff00000 	.word	0x7ff00000
 801da84:	08023991 	.word	0x08023991
 801da88:	3ff80000 	.word	0x3ff80000
 801da8c:	08023ad0 	.word	0x08023ad0
 801da90:	08023a30 	.word	0x08023a30
 801da94:	080239bd 	.word	0x080239bd
 801da98:	08023990 	.word	0x08023990
 801da9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801daa0:	6018      	str	r0, [r3, #0]
 801daa2:	9b07      	ldr	r3, [sp, #28]
 801daa4:	2b0e      	cmp	r3, #14
 801daa6:	f200 80a4 	bhi.w	801dbf2 <_dtoa_r+0x442>
 801daaa:	2c00      	cmp	r4, #0
 801daac:	f000 80a1 	beq.w	801dbf2 <_dtoa_r+0x442>
 801dab0:	2f00      	cmp	r7, #0
 801dab2:	dd33      	ble.n	801db1c <_dtoa_r+0x36c>
 801dab4:	4bad      	ldr	r3, [pc, #692]	@ (801dd6c <_dtoa_r+0x5bc>)
 801dab6:	f007 020f 	and.w	r2, r7, #15
 801daba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dabe:	ed93 7b00 	vldr	d7, [r3]
 801dac2:	05f8      	lsls	r0, r7, #23
 801dac4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801dacc:	d516      	bpl.n	801dafc <_dtoa_r+0x34c>
 801dace:	4ba8      	ldr	r3, [pc, #672]	@ (801dd70 <_dtoa_r+0x5c0>)
 801dad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dad8:	f7e2 fec0 	bl	800085c <__aeabi_ddiv>
 801dadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dae0:	f004 040f 	and.w	r4, r4, #15
 801dae4:	2603      	movs	r6, #3
 801dae6:	4da2      	ldr	r5, [pc, #648]	@ (801dd70 <_dtoa_r+0x5c0>)
 801dae8:	b954      	cbnz	r4, 801db00 <_dtoa_r+0x350>
 801daea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801daee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801daf2:	f7e2 feb3 	bl	800085c <__aeabi_ddiv>
 801daf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dafa:	e028      	b.n	801db4e <_dtoa_r+0x39e>
 801dafc:	2602      	movs	r6, #2
 801dafe:	e7f2      	b.n	801dae6 <_dtoa_r+0x336>
 801db00:	07e1      	lsls	r1, r4, #31
 801db02:	d508      	bpl.n	801db16 <_dtoa_r+0x366>
 801db04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801db08:	e9d5 2300 	ldrd	r2, r3, [r5]
 801db0c:	f7e2 fd7c 	bl	8000608 <__aeabi_dmul>
 801db10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801db14:	3601      	adds	r6, #1
 801db16:	1064      	asrs	r4, r4, #1
 801db18:	3508      	adds	r5, #8
 801db1a:	e7e5      	b.n	801dae8 <_dtoa_r+0x338>
 801db1c:	f000 80d2 	beq.w	801dcc4 <_dtoa_r+0x514>
 801db20:	427c      	negs	r4, r7
 801db22:	4b92      	ldr	r3, [pc, #584]	@ (801dd6c <_dtoa_r+0x5bc>)
 801db24:	4d92      	ldr	r5, [pc, #584]	@ (801dd70 <_dtoa_r+0x5c0>)
 801db26:	f004 020f 	and.w	r2, r4, #15
 801db2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801db2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801db36:	f7e2 fd67 	bl	8000608 <__aeabi_dmul>
 801db3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db3e:	1124      	asrs	r4, r4, #4
 801db40:	2300      	movs	r3, #0
 801db42:	2602      	movs	r6, #2
 801db44:	2c00      	cmp	r4, #0
 801db46:	f040 80b2 	bne.w	801dcae <_dtoa_r+0x4fe>
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d1d3      	bne.n	801daf6 <_dtoa_r+0x346>
 801db4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801db50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801db54:	2b00      	cmp	r3, #0
 801db56:	f000 80b7 	beq.w	801dcc8 <_dtoa_r+0x518>
 801db5a:	4b86      	ldr	r3, [pc, #536]	@ (801dd74 <_dtoa_r+0x5c4>)
 801db5c:	2200      	movs	r2, #0
 801db5e:	4620      	mov	r0, r4
 801db60:	4629      	mov	r1, r5
 801db62:	f7e2 ffc3 	bl	8000aec <__aeabi_dcmplt>
 801db66:	2800      	cmp	r0, #0
 801db68:	f000 80ae 	beq.w	801dcc8 <_dtoa_r+0x518>
 801db6c:	9b07      	ldr	r3, [sp, #28]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	f000 80aa 	beq.w	801dcc8 <_dtoa_r+0x518>
 801db74:	9b00      	ldr	r3, [sp, #0]
 801db76:	2b00      	cmp	r3, #0
 801db78:	dd37      	ble.n	801dbea <_dtoa_r+0x43a>
 801db7a:	1e7b      	subs	r3, r7, #1
 801db7c:	9304      	str	r3, [sp, #16]
 801db7e:	4620      	mov	r0, r4
 801db80:	4b7d      	ldr	r3, [pc, #500]	@ (801dd78 <_dtoa_r+0x5c8>)
 801db82:	2200      	movs	r2, #0
 801db84:	4629      	mov	r1, r5
 801db86:	f7e2 fd3f 	bl	8000608 <__aeabi_dmul>
 801db8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db8e:	9c00      	ldr	r4, [sp, #0]
 801db90:	3601      	adds	r6, #1
 801db92:	4630      	mov	r0, r6
 801db94:	f7e2 fcce 	bl	8000534 <__aeabi_i2d>
 801db98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db9c:	f7e2 fd34 	bl	8000608 <__aeabi_dmul>
 801dba0:	4b76      	ldr	r3, [pc, #472]	@ (801dd7c <_dtoa_r+0x5cc>)
 801dba2:	2200      	movs	r2, #0
 801dba4:	f7e2 fb7a 	bl	800029c <__adddf3>
 801dba8:	4605      	mov	r5, r0
 801dbaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dbae:	2c00      	cmp	r4, #0
 801dbb0:	f040 808d 	bne.w	801dcce <_dtoa_r+0x51e>
 801dbb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbb8:	4b71      	ldr	r3, [pc, #452]	@ (801dd80 <_dtoa_r+0x5d0>)
 801dbba:	2200      	movs	r2, #0
 801dbbc:	f7e2 fb6c 	bl	8000298 <__aeabi_dsub>
 801dbc0:	4602      	mov	r2, r0
 801dbc2:	460b      	mov	r3, r1
 801dbc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dbc8:	462a      	mov	r2, r5
 801dbca:	4633      	mov	r3, r6
 801dbcc:	f7e2 ffac 	bl	8000b28 <__aeabi_dcmpgt>
 801dbd0:	2800      	cmp	r0, #0
 801dbd2:	f040 828b 	bne.w	801e0ec <_dtoa_r+0x93c>
 801dbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbda:	462a      	mov	r2, r5
 801dbdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dbe0:	f7e2 ff84 	bl	8000aec <__aeabi_dcmplt>
 801dbe4:	2800      	cmp	r0, #0
 801dbe6:	f040 8128 	bne.w	801de3a <_dtoa_r+0x68a>
 801dbea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801dbee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dbf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	f2c0 815a 	blt.w	801deae <_dtoa_r+0x6fe>
 801dbfa:	2f0e      	cmp	r7, #14
 801dbfc:	f300 8157 	bgt.w	801deae <_dtoa_r+0x6fe>
 801dc00:	4b5a      	ldr	r3, [pc, #360]	@ (801dd6c <_dtoa_r+0x5bc>)
 801dc02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dc06:	ed93 7b00 	vldr	d7, [r3]
 801dc0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	ed8d 7b00 	vstr	d7, [sp]
 801dc12:	da03      	bge.n	801dc1c <_dtoa_r+0x46c>
 801dc14:	9b07      	ldr	r3, [sp, #28]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	f340 8101 	ble.w	801de1e <_dtoa_r+0x66e>
 801dc1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dc20:	4656      	mov	r6, sl
 801dc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc26:	4620      	mov	r0, r4
 801dc28:	4629      	mov	r1, r5
 801dc2a:	f7e2 fe17 	bl	800085c <__aeabi_ddiv>
 801dc2e:	f7e2 ff9b 	bl	8000b68 <__aeabi_d2iz>
 801dc32:	4680      	mov	r8, r0
 801dc34:	f7e2 fc7e 	bl	8000534 <__aeabi_i2d>
 801dc38:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc3c:	f7e2 fce4 	bl	8000608 <__aeabi_dmul>
 801dc40:	4602      	mov	r2, r0
 801dc42:	460b      	mov	r3, r1
 801dc44:	4620      	mov	r0, r4
 801dc46:	4629      	mov	r1, r5
 801dc48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801dc4c:	f7e2 fb24 	bl	8000298 <__aeabi_dsub>
 801dc50:	f806 4b01 	strb.w	r4, [r6], #1
 801dc54:	9d07      	ldr	r5, [sp, #28]
 801dc56:	eba6 040a 	sub.w	r4, r6, sl
 801dc5a:	42a5      	cmp	r5, r4
 801dc5c:	4602      	mov	r2, r0
 801dc5e:	460b      	mov	r3, r1
 801dc60:	f040 8117 	bne.w	801de92 <_dtoa_r+0x6e2>
 801dc64:	f7e2 fb1a 	bl	800029c <__adddf3>
 801dc68:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	460d      	mov	r5, r1
 801dc70:	f7e2 ff5a 	bl	8000b28 <__aeabi_dcmpgt>
 801dc74:	2800      	cmp	r0, #0
 801dc76:	f040 80f9 	bne.w	801de6c <_dtoa_r+0x6bc>
 801dc7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc7e:	4620      	mov	r0, r4
 801dc80:	4629      	mov	r1, r5
 801dc82:	f7e2 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 801dc86:	b118      	cbz	r0, 801dc90 <_dtoa_r+0x4e0>
 801dc88:	f018 0f01 	tst.w	r8, #1
 801dc8c:	f040 80ee 	bne.w	801de6c <_dtoa_r+0x6bc>
 801dc90:	4649      	mov	r1, r9
 801dc92:	4658      	mov	r0, fp
 801dc94:	f000 fc90 	bl	801e5b8 <_Bfree>
 801dc98:	2300      	movs	r3, #0
 801dc9a:	7033      	strb	r3, [r6, #0]
 801dc9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc9e:	3701      	adds	r7, #1
 801dca0:	601f      	str	r7, [r3, #0]
 801dca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	f000 831d 	beq.w	801e2e4 <_dtoa_r+0xb34>
 801dcaa:	601e      	str	r6, [r3, #0]
 801dcac:	e31a      	b.n	801e2e4 <_dtoa_r+0xb34>
 801dcae:	07e2      	lsls	r2, r4, #31
 801dcb0:	d505      	bpl.n	801dcbe <_dtoa_r+0x50e>
 801dcb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dcb6:	f7e2 fca7 	bl	8000608 <__aeabi_dmul>
 801dcba:	3601      	adds	r6, #1
 801dcbc:	2301      	movs	r3, #1
 801dcbe:	1064      	asrs	r4, r4, #1
 801dcc0:	3508      	adds	r5, #8
 801dcc2:	e73f      	b.n	801db44 <_dtoa_r+0x394>
 801dcc4:	2602      	movs	r6, #2
 801dcc6:	e742      	b.n	801db4e <_dtoa_r+0x39e>
 801dcc8:	9c07      	ldr	r4, [sp, #28]
 801dcca:	9704      	str	r7, [sp, #16]
 801dccc:	e761      	b.n	801db92 <_dtoa_r+0x3e2>
 801dcce:	4b27      	ldr	r3, [pc, #156]	@ (801dd6c <_dtoa_r+0x5bc>)
 801dcd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dcd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dcd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dcda:	4454      	add	r4, sl
 801dcdc:	2900      	cmp	r1, #0
 801dcde:	d053      	beq.n	801dd88 <_dtoa_r+0x5d8>
 801dce0:	4928      	ldr	r1, [pc, #160]	@ (801dd84 <_dtoa_r+0x5d4>)
 801dce2:	2000      	movs	r0, #0
 801dce4:	f7e2 fdba 	bl	800085c <__aeabi_ddiv>
 801dce8:	4633      	mov	r3, r6
 801dcea:	462a      	mov	r2, r5
 801dcec:	f7e2 fad4 	bl	8000298 <__aeabi_dsub>
 801dcf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dcf4:	4656      	mov	r6, sl
 801dcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcfa:	f7e2 ff35 	bl	8000b68 <__aeabi_d2iz>
 801dcfe:	4605      	mov	r5, r0
 801dd00:	f7e2 fc18 	bl	8000534 <__aeabi_i2d>
 801dd04:	4602      	mov	r2, r0
 801dd06:	460b      	mov	r3, r1
 801dd08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd0c:	f7e2 fac4 	bl	8000298 <__aeabi_dsub>
 801dd10:	3530      	adds	r5, #48	@ 0x30
 801dd12:	4602      	mov	r2, r0
 801dd14:	460b      	mov	r3, r1
 801dd16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dd1a:	f806 5b01 	strb.w	r5, [r6], #1
 801dd1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd22:	f7e2 fee3 	bl	8000aec <__aeabi_dcmplt>
 801dd26:	2800      	cmp	r0, #0
 801dd28:	d171      	bne.n	801de0e <_dtoa_r+0x65e>
 801dd2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dd2e:	4911      	ldr	r1, [pc, #68]	@ (801dd74 <_dtoa_r+0x5c4>)
 801dd30:	2000      	movs	r0, #0
 801dd32:	f7e2 fab1 	bl	8000298 <__aeabi_dsub>
 801dd36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd3a:	f7e2 fed7 	bl	8000aec <__aeabi_dcmplt>
 801dd3e:	2800      	cmp	r0, #0
 801dd40:	f040 8095 	bne.w	801de6e <_dtoa_r+0x6be>
 801dd44:	42a6      	cmp	r6, r4
 801dd46:	f43f af50 	beq.w	801dbea <_dtoa_r+0x43a>
 801dd4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801dd4e:	4b0a      	ldr	r3, [pc, #40]	@ (801dd78 <_dtoa_r+0x5c8>)
 801dd50:	2200      	movs	r2, #0
 801dd52:	f7e2 fc59 	bl	8000608 <__aeabi_dmul>
 801dd56:	4b08      	ldr	r3, [pc, #32]	@ (801dd78 <_dtoa_r+0x5c8>)
 801dd58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd62:	f7e2 fc51 	bl	8000608 <__aeabi_dmul>
 801dd66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd6a:	e7c4      	b.n	801dcf6 <_dtoa_r+0x546>
 801dd6c:	08023ad0 	.word	0x08023ad0
 801dd70:	08023aa8 	.word	0x08023aa8
 801dd74:	3ff00000 	.word	0x3ff00000
 801dd78:	40240000 	.word	0x40240000
 801dd7c:	401c0000 	.word	0x401c0000
 801dd80:	40140000 	.word	0x40140000
 801dd84:	3fe00000 	.word	0x3fe00000
 801dd88:	4631      	mov	r1, r6
 801dd8a:	4628      	mov	r0, r5
 801dd8c:	f7e2 fc3c 	bl	8000608 <__aeabi_dmul>
 801dd90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dd94:	9415      	str	r4, [sp, #84]	@ 0x54
 801dd96:	4656      	mov	r6, sl
 801dd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd9c:	f7e2 fee4 	bl	8000b68 <__aeabi_d2iz>
 801dda0:	4605      	mov	r5, r0
 801dda2:	f7e2 fbc7 	bl	8000534 <__aeabi_i2d>
 801dda6:	4602      	mov	r2, r0
 801dda8:	460b      	mov	r3, r1
 801ddaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddae:	f7e2 fa73 	bl	8000298 <__aeabi_dsub>
 801ddb2:	3530      	adds	r5, #48	@ 0x30
 801ddb4:	f806 5b01 	strb.w	r5, [r6], #1
 801ddb8:	4602      	mov	r2, r0
 801ddba:	460b      	mov	r3, r1
 801ddbc:	42a6      	cmp	r6, r4
 801ddbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ddc2:	f04f 0200 	mov.w	r2, #0
 801ddc6:	d124      	bne.n	801de12 <_dtoa_r+0x662>
 801ddc8:	4bac      	ldr	r3, [pc, #688]	@ (801e07c <_dtoa_r+0x8cc>)
 801ddca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ddce:	f7e2 fa65 	bl	800029c <__adddf3>
 801ddd2:	4602      	mov	r2, r0
 801ddd4:	460b      	mov	r3, r1
 801ddd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddda:	f7e2 fea5 	bl	8000b28 <__aeabi_dcmpgt>
 801ddde:	2800      	cmp	r0, #0
 801dde0:	d145      	bne.n	801de6e <_dtoa_r+0x6be>
 801dde2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dde6:	49a5      	ldr	r1, [pc, #660]	@ (801e07c <_dtoa_r+0x8cc>)
 801dde8:	2000      	movs	r0, #0
 801ddea:	f7e2 fa55 	bl	8000298 <__aeabi_dsub>
 801ddee:	4602      	mov	r2, r0
 801ddf0:	460b      	mov	r3, r1
 801ddf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddf6:	f7e2 fe79 	bl	8000aec <__aeabi_dcmplt>
 801ddfa:	2800      	cmp	r0, #0
 801ddfc:	f43f aef5 	beq.w	801dbea <_dtoa_r+0x43a>
 801de00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801de02:	1e73      	subs	r3, r6, #1
 801de04:	9315      	str	r3, [sp, #84]	@ 0x54
 801de06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801de0a:	2b30      	cmp	r3, #48	@ 0x30
 801de0c:	d0f8      	beq.n	801de00 <_dtoa_r+0x650>
 801de0e:	9f04      	ldr	r7, [sp, #16]
 801de10:	e73e      	b.n	801dc90 <_dtoa_r+0x4e0>
 801de12:	4b9b      	ldr	r3, [pc, #620]	@ (801e080 <_dtoa_r+0x8d0>)
 801de14:	f7e2 fbf8 	bl	8000608 <__aeabi_dmul>
 801de18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de1c:	e7bc      	b.n	801dd98 <_dtoa_r+0x5e8>
 801de1e:	d10c      	bne.n	801de3a <_dtoa_r+0x68a>
 801de20:	4b98      	ldr	r3, [pc, #608]	@ (801e084 <_dtoa_r+0x8d4>)
 801de22:	2200      	movs	r2, #0
 801de24:	e9dd 0100 	ldrd	r0, r1, [sp]
 801de28:	f7e2 fbee 	bl	8000608 <__aeabi_dmul>
 801de2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de30:	f7e2 fe70 	bl	8000b14 <__aeabi_dcmpge>
 801de34:	2800      	cmp	r0, #0
 801de36:	f000 8157 	beq.w	801e0e8 <_dtoa_r+0x938>
 801de3a:	2400      	movs	r4, #0
 801de3c:	4625      	mov	r5, r4
 801de3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de40:	43db      	mvns	r3, r3
 801de42:	9304      	str	r3, [sp, #16]
 801de44:	4656      	mov	r6, sl
 801de46:	2700      	movs	r7, #0
 801de48:	4621      	mov	r1, r4
 801de4a:	4658      	mov	r0, fp
 801de4c:	f000 fbb4 	bl	801e5b8 <_Bfree>
 801de50:	2d00      	cmp	r5, #0
 801de52:	d0dc      	beq.n	801de0e <_dtoa_r+0x65e>
 801de54:	b12f      	cbz	r7, 801de62 <_dtoa_r+0x6b2>
 801de56:	42af      	cmp	r7, r5
 801de58:	d003      	beq.n	801de62 <_dtoa_r+0x6b2>
 801de5a:	4639      	mov	r1, r7
 801de5c:	4658      	mov	r0, fp
 801de5e:	f000 fbab 	bl	801e5b8 <_Bfree>
 801de62:	4629      	mov	r1, r5
 801de64:	4658      	mov	r0, fp
 801de66:	f000 fba7 	bl	801e5b8 <_Bfree>
 801de6a:	e7d0      	b.n	801de0e <_dtoa_r+0x65e>
 801de6c:	9704      	str	r7, [sp, #16]
 801de6e:	4633      	mov	r3, r6
 801de70:	461e      	mov	r6, r3
 801de72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de76:	2a39      	cmp	r2, #57	@ 0x39
 801de78:	d107      	bne.n	801de8a <_dtoa_r+0x6da>
 801de7a:	459a      	cmp	sl, r3
 801de7c:	d1f8      	bne.n	801de70 <_dtoa_r+0x6c0>
 801de7e:	9a04      	ldr	r2, [sp, #16]
 801de80:	3201      	adds	r2, #1
 801de82:	9204      	str	r2, [sp, #16]
 801de84:	2230      	movs	r2, #48	@ 0x30
 801de86:	f88a 2000 	strb.w	r2, [sl]
 801de8a:	781a      	ldrb	r2, [r3, #0]
 801de8c:	3201      	adds	r2, #1
 801de8e:	701a      	strb	r2, [r3, #0]
 801de90:	e7bd      	b.n	801de0e <_dtoa_r+0x65e>
 801de92:	4b7b      	ldr	r3, [pc, #492]	@ (801e080 <_dtoa_r+0x8d0>)
 801de94:	2200      	movs	r2, #0
 801de96:	f7e2 fbb7 	bl	8000608 <__aeabi_dmul>
 801de9a:	2200      	movs	r2, #0
 801de9c:	2300      	movs	r3, #0
 801de9e:	4604      	mov	r4, r0
 801dea0:	460d      	mov	r5, r1
 801dea2:	f7e2 fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 801dea6:	2800      	cmp	r0, #0
 801dea8:	f43f aebb 	beq.w	801dc22 <_dtoa_r+0x472>
 801deac:	e6f0      	b.n	801dc90 <_dtoa_r+0x4e0>
 801deae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801deb0:	2a00      	cmp	r2, #0
 801deb2:	f000 80db 	beq.w	801e06c <_dtoa_r+0x8bc>
 801deb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801deb8:	2a01      	cmp	r2, #1
 801deba:	f300 80bf 	bgt.w	801e03c <_dtoa_r+0x88c>
 801debe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dec0:	2a00      	cmp	r2, #0
 801dec2:	f000 80b7 	beq.w	801e034 <_dtoa_r+0x884>
 801dec6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801deca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801decc:	4646      	mov	r6, r8
 801dece:	9a08      	ldr	r2, [sp, #32]
 801ded0:	2101      	movs	r1, #1
 801ded2:	441a      	add	r2, r3
 801ded4:	4658      	mov	r0, fp
 801ded6:	4498      	add	r8, r3
 801ded8:	9208      	str	r2, [sp, #32]
 801deda:	f000 fc21 	bl	801e720 <__i2b>
 801dede:	4605      	mov	r5, r0
 801dee0:	b15e      	cbz	r6, 801defa <_dtoa_r+0x74a>
 801dee2:	9b08      	ldr	r3, [sp, #32]
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	dd08      	ble.n	801defa <_dtoa_r+0x74a>
 801dee8:	42b3      	cmp	r3, r6
 801deea:	9a08      	ldr	r2, [sp, #32]
 801deec:	bfa8      	it	ge
 801deee:	4633      	movge	r3, r6
 801def0:	eba8 0803 	sub.w	r8, r8, r3
 801def4:	1af6      	subs	r6, r6, r3
 801def6:	1ad3      	subs	r3, r2, r3
 801def8:	9308      	str	r3, [sp, #32]
 801defa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801defc:	b1f3      	cbz	r3, 801df3c <_dtoa_r+0x78c>
 801defe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df00:	2b00      	cmp	r3, #0
 801df02:	f000 80b7 	beq.w	801e074 <_dtoa_r+0x8c4>
 801df06:	b18c      	cbz	r4, 801df2c <_dtoa_r+0x77c>
 801df08:	4629      	mov	r1, r5
 801df0a:	4622      	mov	r2, r4
 801df0c:	4658      	mov	r0, fp
 801df0e:	f000 fcc7 	bl	801e8a0 <__pow5mult>
 801df12:	464a      	mov	r2, r9
 801df14:	4601      	mov	r1, r0
 801df16:	4605      	mov	r5, r0
 801df18:	4658      	mov	r0, fp
 801df1a:	f000 fc17 	bl	801e74c <__multiply>
 801df1e:	4649      	mov	r1, r9
 801df20:	9004      	str	r0, [sp, #16]
 801df22:	4658      	mov	r0, fp
 801df24:	f000 fb48 	bl	801e5b8 <_Bfree>
 801df28:	9b04      	ldr	r3, [sp, #16]
 801df2a:	4699      	mov	r9, r3
 801df2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df2e:	1b1a      	subs	r2, r3, r4
 801df30:	d004      	beq.n	801df3c <_dtoa_r+0x78c>
 801df32:	4649      	mov	r1, r9
 801df34:	4658      	mov	r0, fp
 801df36:	f000 fcb3 	bl	801e8a0 <__pow5mult>
 801df3a:	4681      	mov	r9, r0
 801df3c:	2101      	movs	r1, #1
 801df3e:	4658      	mov	r0, fp
 801df40:	f000 fbee 	bl	801e720 <__i2b>
 801df44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df46:	4604      	mov	r4, r0
 801df48:	2b00      	cmp	r3, #0
 801df4a:	f000 81cf 	beq.w	801e2ec <_dtoa_r+0xb3c>
 801df4e:	461a      	mov	r2, r3
 801df50:	4601      	mov	r1, r0
 801df52:	4658      	mov	r0, fp
 801df54:	f000 fca4 	bl	801e8a0 <__pow5mult>
 801df58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df5a:	2b01      	cmp	r3, #1
 801df5c:	4604      	mov	r4, r0
 801df5e:	f300 8095 	bgt.w	801e08c <_dtoa_r+0x8dc>
 801df62:	9b02      	ldr	r3, [sp, #8]
 801df64:	2b00      	cmp	r3, #0
 801df66:	f040 8087 	bne.w	801e078 <_dtoa_r+0x8c8>
 801df6a:	9b03      	ldr	r3, [sp, #12]
 801df6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801df70:	2b00      	cmp	r3, #0
 801df72:	f040 8089 	bne.w	801e088 <_dtoa_r+0x8d8>
 801df76:	9b03      	ldr	r3, [sp, #12]
 801df78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801df7c:	0d1b      	lsrs	r3, r3, #20
 801df7e:	051b      	lsls	r3, r3, #20
 801df80:	b12b      	cbz	r3, 801df8e <_dtoa_r+0x7de>
 801df82:	9b08      	ldr	r3, [sp, #32]
 801df84:	3301      	adds	r3, #1
 801df86:	9308      	str	r3, [sp, #32]
 801df88:	f108 0801 	add.w	r8, r8, #1
 801df8c:	2301      	movs	r3, #1
 801df8e:	930a      	str	r3, [sp, #40]	@ 0x28
 801df90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df92:	2b00      	cmp	r3, #0
 801df94:	f000 81b0 	beq.w	801e2f8 <_dtoa_r+0xb48>
 801df98:	6923      	ldr	r3, [r4, #16]
 801df9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801df9e:	6918      	ldr	r0, [r3, #16]
 801dfa0:	f000 fb72 	bl	801e688 <__hi0bits>
 801dfa4:	f1c0 0020 	rsb	r0, r0, #32
 801dfa8:	9b08      	ldr	r3, [sp, #32]
 801dfaa:	4418      	add	r0, r3
 801dfac:	f010 001f 	ands.w	r0, r0, #31
 801dfb0:	d077      	beq.n	801e0a2 <_dtoa_r+0x8f2>
 801dfb2:	f1c0 0320 	rsb	r3, r0, #32
 801dfb6:	2b04      	cmp	r3, #4
 801dfb8:	dd6b      	ble.n	801e092 <_dtoa_r+0x8e2>
 801dfba:	9b08      	ldr	r3, [sp, #32]
 801dfbc:	f1c0 001c 	rsb	r0, r0, #28
 801dfc0:	4403      	add	r3, r0
 801dfc2:	4480      	add	r8, r0
 801dfc4:	4406      	add	r6, r0
 801dfc6:	9308      	str	r3, [sp, #32]
 801dfc8:	f1b8 0f00 	cmp.w	r8, #0
 801dfcc:	dd05      	ble.n	801dfda <_dtoa_r+0x82a>
 801dfce:	4649      	mov	r1, r9
 801dfd0:	4642      	mov	r2, r8
 801dfd2:	4658      	mov	r0, fp
 801dfd4:	f000 fcbe 	bl	801e954 <__lshift>
 801dfd8:	4681      	mov	r9, r0
 801dfda:	9b08      	ldr	r3, [sp, #32]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	dd05      	ble.n	801dfec <_dtoa_r+0x83c>
 801dfe0:	4621      	mov	r1, r4
 801dfe2:	461a      	mov	r2, r3
 801dfe4:	4658      	mov	r0, fp
 801dfe6:	f000 fcb5 	bl	801e954 <__lshift>
 801dfea:	4604      	mov	r4, r0
 801dfec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d059      	beq.n	801e0a6 <_dtoa_r+0x8f6>
 801dff2:	4621      	mov	r1, r4
 801dff4:	4648      	mov	r0, r9
 801dff6:	f000 fd19 	bl	801ea2c <__mcmp>
 801dffa:	2800      	cmp	r0, #0
 801dffc:	da53      	bge.n	801e0a6 <_dtoa_r+0x8f6>
 801dffe:	1e7b      	subs	r3, r7, #1
 801e000:	9304      	str	r3, [sp, #16]
 801e002:	4649      	mov	r1, r9
 801e004:	2300      	movs	r3, #0
 801e006:	220a      	movs	r2, #10
 801e008:	4658      	mov	r0, fp
 801e00a:	f000 faf7 	bl	801e5fc <__multadd>
 801e00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e010:	4681      	mov	r9, r0
 801e012:	2b00      	cmp	r3, #0
 801e014:	f000 8172 	beq.w	801e2fc <_dtoa_r+0xb4c>
 801e018:	2300      	movs	r3, #0
 801e01a:	4629      	mov	r1, r5
 801e01c:	220a      	movs	r2, #10
 801e01e:	4658      	mov	r0, fp
 801e020:	f000 faec 	bl	801e5fc <__multadd>
 801e024:	9b00      	ldr	r3, [sp, #0]
 801e026:	2b00      	cmp	r3, #0
 801e028:	4605      	mov	r5, r0
 801e02a:	dc67      	bgt.n	801e0fc <_dtoa_r+0x94c>
 801e02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e02e:	2b02      	cmp	r3, #2
 801e030:	dc41      	bgt.n	801e0b6 <_dtoa_r+0x906>
 801e032:	e063      	b.n	801e0fc <_dtoa_r+0x94c>
 801e034:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e036:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e03a:	e746      	b.n	801deca <_dtoa_r+0x71a>
 801e03c:	9b07      	ldr	r3, [sp, #28]
 801e03e:	1e5c      	subs	r4, r3, #1
 801e040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e042:	42a3      	cmp	r3, r4
 801e044:	bfbf      	itttt	lt
 801e046:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e048:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e04a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e04c:	1ae3      	sublt	r3, r4, r3
 801e04e:	bfb4      	ite	lt
 801e050:	18d2      	addlt	r2, r2, r3
 801e052:	1b1c      	subge	r4, r3, r4
 801e054:	9b07      	ldr	r3, [sp, #28]
 801e056:	bfbc      	itt	lt
 801e058:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e05a:	2400      	movlt	r4, #0
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	bfb5      	itete	lt
 801e060:	eba8 0603 	sublt.w	r6, r8, r3
 801e064:	9b07      	ldrge	r3, [sp, #28]
 801e066:	2300      	movlt	r3, #0
 801e068:	4646      	movge	r6, r8
 801e06a:	e730      	b.n	801dece <_dtoa_r+0x71e>
 801e06c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e06e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e070:	4646      	mov	r6, r8
 801e072:	e735      	b.n	801dee0 <_dtoa_r+0x730>
 801e074:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e076:	e75c      	b.n	801df32 <_dtoa_r+0x782>
 801e078:	2300      	movs	r3, #0
 801e07a:	e788      	b.n	801df8e <_dtoa_r+0x7de>
 801e07c:	3fe00000 	.word	0x3fe00000
 801e080:	40240000 	.word	0x40240000
 801e084:	40140000 	.word	0x40140000
 801e088:	9b02      	ldr	r3, [sp, #8]
 801e08a:	e780      	b.n	801df8e <_dtoa_r+0x7de>
 801e08c:	2300      	movs	r3, #0
 801e08e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e090:	e782      	b.n	801df98 <_dtoa_r+0x7e8>
 801e092:	d099      	beq.n	801dfc8 <_dtoa_r+0x818>
 801e094:	9a08      	ldr	r2, [sp, #32]
 801e096:	331c      	adds	r3, #28
 801e098:	441a      	add	r2, r3
 801e09a:	4498      	add	r8, r3
 801e09c:	441e      	add	r6, r3
 801e09e:	9208      	str	r2, [sp, #32]
 801e0a0:	e792      	b.n	801dfc8 <_dtoa_r+0x818>
 801e0a2:	4603      	mov	r3, r0
 801e0a4:	e7f6      	b.n	801e094 <_dtoa_r+0x8e4>
 801e0a6:	9b07      	ldr	r3, [sp, #28]
 801e0a8:	9704      	str	r7, [sp, #16]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	dc20      	bgt.n	801e0f0 <_dtoa_r+0x940>
 801e0ae:	9300      	str	r3, [sp, #0]
 801e0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0b2:	2b02      	cmp	r3, #2
 801e0b4:	dd1e      	ble.n	801e0f4 <_dtoa_r+0x944>
 801e0b6:	9b00      	ldr	r3, [sp, #0]
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	f47f aec0 	bne.w	801de3e <_dtoa_r+0x68e>
 801e0be:	4621      	mov	r1, r4
 801e0c0:	2205      	movs	r2, #5
 801e0c2:	4658      	mov	r0, fp
 801e0c4:	f000 fa9a 	bl	801e5fc <__multadd>
 801e0c8:	4601      	mov	r1, r0
 801e0ca:	4604      	mov	r4, r0
 801e0cc:	4648      	mov	r0, r9
 801e0ce:	f000 fcad 	bl	801ea2c <__mcmp>
 801e0d2:	2800      	cmp	r0, #0
 801e0d4:	f77f aeb3 	ble.w	801de3e <_dtoa_r+0x68e>
 801e0d8:	4656      	mov	r6, sl
 801e0da:	2331      	movs	r3, #49	@ 0x31
 801e0dc:	f806 3b01 	strb.w	r3, [r6], #1
 801e0e0:	9b04      	ldr	r3, [sp, #16]
 801e0e2:	3301      	adds	r3, #1
 801e0e4:	9304      	str	r3, [sp, #16]
 801e0e6:	e6ae      	b.n	801de46 <_dtoa_r+0x696>
 801e0e8:	9c07      	ldr	r4, [sp, #28]
 801e0ea:	9704      	str	r7, [sp, #16]
 801e0ec:	4625      	mov	r5, r4
 801e0ee:	e7f3      	b.n	801e0d8 <_dtoa_r+0x928>
 801e0f0:	9b07      	ldr	r3, [sp, #28]
 801e0f2:	9300      	str	r3, [sp, #0]
 801e0f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	f000 8104 	beq.w	801e304 <_dtoa_r+0xb54>
 801e0fc:	2e00      	cmp	r6, #0
 801e0fe:	dd05      	ble.n	801e10c <_dtoa_r+0x95c>
 801e100:	4629      	mov	r1, r5
 801e102:	4632      	mov	r2, r6
 801e104:	4658      	mov	r0, fp
 801e106:	f000 fc25 	bl	801e954 <__lshift>
 801e10a:	4605      	mov	r5, r0
 801e10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d05a      	beq.n	801e1c8 <_dtoa_r+0xa18>
 801e112:	6869      	ldr	r1, [r5, #4]
 801e114:	4658      	mov	r0, fp
 801e116:	f000 fa0f 	bl	801e538 <_Balloc>
 801e11a:	4606      	mov	r6, r0
 801e11c:	b928      	cbnz	r0, 801e12a <_dtoa_r+0x97a>
 801e11e:	4b84      	ldr	r3, [pc, #528]	@ (801e330 <_dtoa_r+0xb80>)
 801e120:	4602      	mov	r2, r0
 801e122:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e126:	f7ff bb5a 	b.w	801d7de <_dtoa_r+0x2e>
 801e12a:	692a      	ldr	r2, [r5, #16]
 801e12c:	3202      	adds	r2, #2
 801e12e:	0092      	lsls	r2, r2, #2
 801e130:	f105 010c 	add.w	r1, r5, #12
 801e134:	300c      	adds	r0, #12
 801e136:	f7ff faa2 	bl	801d67e <memcpy>
 801e13a:	2201      	movs	r2, #1
 801e13c:	4631      	mov	r1, r6
 801e13e:	4658      	mov	r0, fp
 801e140:	f000 fc08 	bl	801e954 <__lshift>
 801e144:	f10a 0301 	add.w	r3, sl, #1
 801e148:	9307      	str	r3, [sp, #28]
 801e14a:	9b00      	ldr	r3, [sp, #0]
 801e14c:	4453      	add	r3, sl
 801e14e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e150:	9b02      	ldr	r3, [sp, #8]
 801e152:	f003 0301 	and.w	r3, r3, #1
 801e156:	462f      	mov	r7, r5
 801e158:	930a      	str	r3, [sp, #40]	@ 0x28
 801e15a:	4605      	mov	r5, r0
 801e15c:	9b07      	ldr	r3, [sp, #28]
 801e15e:	4621      	mov	r1, r4
 801e160:	3b01      	subs	r3, #1
 801e162:	4648      	mov	r0, r9
 801e164:	9300      	str	r3, [sp, #0]
 801e166:	f7ff fa98 	bl	801d69a <quorem>
 801e16a:	4639      	mov	r1, r7
 801e16c:	9002      	str	r0, [sp, #8]
 801e16e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e172:	4648      	mov	r0, r9
 801e174:	f000 fc5a 	bl	801ea2c <__mcmp>
 801e178:	462a      	mov	r2, r5
 801e17a:	9008      	str	r0, [sp, #32]
 801e17c:	4621      	mov	r1, r4
 801e17e:	4658      	mov	r0, fp
 801e180:	f000 fc70 	bl	801ea64 <__mdiff>
 801e184:	68c2      	ldr	r2, [r0, #12]
 801e186:	4606      	mov	r6, r0
 801e188:	bb02      	cbnz	r2, 801e1cc <_dtoa_r+0xa1c>
 801e18a:	4601      	mov	r1, r0
 801e18c:	4648      	mov	r0, r9
 801e18e:	f000 fc4d 	bl	801ea2c <__mcmp>
 801e192:	4602      	mov	r2, r0
 801e194:	4631      	mov	r1, r6
 801e196:	4658      	mov	r0, fp
 801e198:	920e      	str	r2, [sp, #56]	@ 0x38
 801e19a:	f000 fa0d 	bl	801e5b8 <_Bfree>
 801e19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1a2:	9e07      	ldr	r6, [sp, #28]
 801e1a4:	ea43 0102 	orr.w	r1, r3, r2
 801e1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1aa:	4319      	orrs	r1, r3
 801e1ac:	d110      	bne.n	801e1d0 <_dtoa_r+0xa20>
 801e1ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e1b2:	d029      	beq.n	801e208 <_dtoa_r+0xa58>
 801e1b4:	9b08      	ldr	r3, [sp, #32]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	dd02      	ble.n	801e1c0 <_dtoa_r+0xa10>
 801e1ba:	9b02      	ldr	r3, [sp, #8]
 801e1bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e1c0:	9b00      	ldr	r3, [sp, #0]
 801e1c2:	f883 8000 	strb.w	r8, [r3]
 801e1c6:	e63f      	b.n	801de48 <_dtoa_r+0x698>
 801e1c8:	4628      	mov	r0, r5
 801e1ca:	e7bb      	b.n	801e144 <_dtoa_r+0x994>
 801e1cc:	2201      	movs	r2, #1
 801e1ce:	e7e1      	b.n	801e194 <_dtoa_r+0x9e4>
 801e1d0:	9b08      	ldr	r3, [sp, #32]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	db04      	blt.n	801e1e0 <_dtoa_r+0xa30>
 801e1d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e1d8:	430b      	orrs	r3, r1
 801e1da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e1dc:	430b      	orrs	r3, r1
 801e1de:	d120      	bne.n	801e222 <_dtoa_r+0xa72>
 801e1e0:	2a00      	cmp	r2, #0
 801e1e2:	dded      	ble.n	801e1c0 <_dtoa_r+0xa10>
 801e1e4:	4649      	mov	r1, r9
 801e1e6:	2201      	movs	r2, #1
 801e1e8:	4658      	mov	r0, fp
 801e1ea:	f000 fbb3 	bl	801e954 <__lshift>
 801e1ee:	4621      	mov	r1, r4
 801e1f0:	4681      	mov	r9, r0
 801e1f2:	f000 fc1b 	bl	801ea2c <__mcmp>
 801e1f6:	2800      	cmp	r0, #0
 801e1f8:	dc03      	bgt.n	801e202 <_dtoa_r+0xa52>
 801e1fa:	d1e1      	bne.n	801e1c0 <_dtoa_r+0xa10>
 801e1fc:	f018 0f01 	tst.w	r8, #1
 801e200:	d0de      	beq.n	801e1c0 <_dtoa_r+0xa10>
 801e202:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e206:	d1d8      	bne.n	801e1ba <_dtoa_r+0xa0a>
 801e208:	9a00      	ldr	r2, [sp, #0]
 801e20a:	2339      	movs	r3, #57	@ 0x39
 801e20c:	7013      	strb	r3, [r2, #0]
 801e20e:	4633      	mov	r3, r6
 801e210:	461e      	mov	r6, r3
 801e212:	3b01      	subs	r3, #1
 801e214:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e218:	2a39      	cmp	r2, #57	@ 0x39
 801e21a:	d052      	beq.n	801e2c2 <_dtoa_r+0xb12>
 801e21c:	3201      	adds	r2, #1
 801e21e:	701a      	strb	r2, [r3, #0]
 801e220:	e612      	b.n	801de48 <_dtoa_r+0x698>
 801e222:	2a00      	cmp	r2, #0
 801e224:	dd07      	ble.n	801e236 <_dtoa_r+0xa86>
 801e226:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e22a:	d0ed      	beq.n	801e208 <_dtoa_r+0xa58>
 801e22c:	9a00      	ldr	r2, [sp, #0]
 801e22e:	f108 0301 	add.w	r3, r8, #1
 801e232:	7013      	strb	r3, [r2, #0]
 801e234:	e608      	b.n	801de48 <_dtoa_r+0x698>
 801e236:	9b07      	ldr	r3, [sp, #28]
 801e238:	9a07      	ldr	r2, [sp, #28]
 801e23a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e240:	4293      	cmp	r3, r2
 801e242:	d028      	beq.n	801e296 <_dtoa_r+0xae6>
 801e244:	4649      	mov	r1, r9
 801e246:	2300      	movs	r3, #0
 801e248:	220a      	movs	r2, #10
 801e24a:	4658      	mov	r0, fp
 801e24c:	f000 f9d6 	bl	801e5fc <__multadd>
 801e250:	42af      	cmp	r7, r5
 801e252:	4681      	mov	r9, r0
 801e254:	f04f 0300 	mov.w	r3, #0
 801e258:	f04f 020a 	mov.w	r2, #10
 801e25c:	4639      	mov	r1, r7
 801e25e:	4658      	mov	r0, fp
 801e260:	d107      	bne.n	801e272 <_dtoa_r+0xac2>
 801e262:	f000 f9cb 	bl	801e5fc <__multadd>
 801e266:	4607      	mov	r7, r0
 801e268:	4605      	mov	r5, r0
 801e26a:	9b07      	ldr	r3, [sp, #28]
 801e26c:	3301      	adds	r3, #1
 801e26e:	9307      	str	r3, [sp, #28]
 801e270:	e774      	b.n	801e15c <_dtoa_r+0x9ac>
 801e272:	f000 f9c3 	bl	801e5fc <__multadd>
 801e276:	4629      	mov	r1, r5
 801e278:	4607      	mov	r7, r0
 801e27a:	2300      	movs	r3, #0
 801e27c:	220a      	movs	r2, #10
 801e27e:	4658      	mov	r0, fp
 801e280:	f000 f9bc 	bl	801e5fc <__multadd>
 801e284:	4605      	mov	r5, r0
 801e286:	e7f0      	b.n	801e26a <_dtoa_r+0xaba>
 801e288:	9b00      	ldr	r3, [sp, #0]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	bfcc      	ite	gt
 801e28e:	461e      	movgt	r6, r3
 801e290:	2601      	movle	r6, #1
 801e292:	4456      	add	r6, sl
 801e294:	2700      	movs	r7, #0
 801e296:	4649      	mov	r1, r9
 801e298:	2201      	movs	r2, #1
 801e29a:	4658      	mov	r0, fp
 801e29c:	f000 fb5a 	bl	801e954 <__lshift>
 801e2a0:	4621      	mov	r1, r4
 801e2a2:	4681      	mov	r9, r0
 801e2a4:	f000 fbc2 	bl	801ea2c <__mcmp>
 801e2a8:	2800      	cmp	r0, #0
 801e2aa:	dcb0      	bgt.n	801e20e <_dtoa_r+0xa5e>
 801e2ac:	d102      	bne.n	801e2b4 <_dtoa_r+0xb04>
 801e2ae:	f018 0f01 	tst.w	r8, #1
 801e2b2:	d1ac      	bne.n	801e20e <_dtoa_r+0xa5e>
 801e2b4:	4633      	mov	r3, r6
 801e2b6:	461e      	mov	r6, r3
 801e2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e2bc:	2a30      	cmp	r2, #48	@ 0x30
 801e2be:	d0fa      	beq.n	801e2b6 <_dtoa_r+0xb06>
 801e2c0:	e5c2      	b.n	801de48 <_dtoa_r+0x698>
 801e2c2:	459a      	cmp	sl, r3
 801e2c4:	d1a4      	bne.n	801e210 <_dtoa_r+0xa60>
 801e2c6:	9b04      	ldr	r3, [sp, #16]
 801e2c8:	3301      	adds	r3, #1
 801e2ca:	9304      	str	r3, [sp, #16]
 801e2cc:	2331      	movs	r3, #49	@ 0x31
 801e2ce:	f88a 3000 	strb.w	r3, [sl]
 801e2d2:	e5b9      	b.n	801de48 <_dtoa_r+0x698>
 801e2d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e334 <_dtoa_r+0xb84>
 801e2da:	b11b      	cbz	r3, 801e2e4 <_dtoa_r+0xb34>
 801e2dc:	f10a 0308 	add.w	r3, sl, #8
 801e2e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e2e2:	6013      	str	r3, [r2, #0]
 801e2e4:	4650      	mov	r0, sl
 801e2e6:	b019      	add	sp, #100	@ 0x64
 801e2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2ee:	2b01      	cmp	r3, #1
 801e2f0:	f77f ae37 	ble.w	801df62 <_dtoa_r+0x7b2>
 801e2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2f8:	2001      	movs	r0, #1
 801e2fa:	e655      	b.n	801dfa8 <_dtoa_r+0x7f8>
 801e2fc:	9b00      	ldr	r3, [sp, #0]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	f77f aed6 	ble.w	801e0b0 <_dtoa_r+0x900>
 801e304:	4656      	mov	r6, sl
 801e306:	4621      	mov	r1, r4
 801e308:	4648      	mov	r0, r9
 801e30a:	f7ff f9c6 	bl	801d69a <quorem>
 801e30e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e312:	f806 8b01 	strb.w	r8, [r6], #1
 801e316:	9b00      	ldr	r3, [sp, #0]
 801e318:	eba6 020a 	sub.w	r2, r6, sl
 801e31c:	4293      	cmp	r3, r2
 801e31e:	ddb3      	ble.n	801e288 <_dtoa_r+0xad8>
 801e320:	4649      	mov	r1, r9
 801e322:	2300      	movs	r3, #0
 801e324:	220a      	movs	r2, #10
 801e326:	4658      	mov	r0, fp
 801e328:	f000 f968 	bl	801e5fc <__multadd>
 801e32c:	4681      	mov	r9, r0
 801e32e:	e7ea      	b.n	801e306 <_dtoa_r+0xb56>
 801e330:	08023a30 	.word	0x08023a30
 801e334:	080239b4 	.word	0x080239b4

0801e338 <_free_r>:
 801e338:	b538      	push	{r3, r4, r5, lr}
 801e33a:	4605      	mov	r5, r0
 801e33c:	2900      	cmp	r1, #0
 801e33e:	d041      	beq.n	801e3c4 <_free_r+0x8c>
 801e340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e344:	1f0c      	subs	r4, r1, #4
 801e346:	2b00      	cmp	r3, #0
 801e348:	bfb8      	it	lt
 801e34a:	18e4      	addlt	r4, r4, r3
 801e34c:	f000 f8e8 	bl	801e520 <__malloc_lock>
 801e350:	4a1d      	ldr	r2, [pc, #116]	@ (801e3c8 <_free_r+0x90>)
 801e352:	6813      	ldr	r3, [r2, #0]
 801e354:	b933      	cbnz	r3, 801e364 <_free_r+0x2c>
 801e356:	6063      	str	r3, [r4, #4]
 801e358:	6014      	str	r4, [r2, #0]
 801e35a:	4628      	mov	r0, r5
 801e35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e360:	f000 b8e4 	b.w	801e52c <__malloc_unlock>
 801e364:	42a3      	cmp	r3, r4
 801e366:	d908      	bls.n	801e37a <_free_r+0x42>
 801e368:	6820      	ldr	r0, [r4, #0]
 801e36a:	1821      	adds	r1, r4, r0
 801e36c:	428b      	cmp	r3, r1
 801e36e:	bf01      	itttt	eq
 801e370:	6819      	ldreq	r1, [r3, #0]
 801e372:	685b      	ldreq	r3, [r3, #4]
 801e374:	1809      	addeq	r1, r1, r0
 801e376:	6021      	streq	r1, [r4, #0]
 801e378:	e7ed      	b.n	801e356 <_free_r+0x1e>
 801e37a:	461a      	mov	r2, r3
 801e37c:	685b      	ldr	r3, [r3, #4]
 801e37e:	b10b      	cbz	r3, 801e384 <_free_r+0x4c>
 801e380:	42a3      	cmp	r3, r4
 801e382:	d9fa      	bls.n	801e37a <_free_r+0x42>
 801e384:	6811      	ldr	r1, [r2, #0]
 801e386:	1850      	adds	r0, r2, r1
 801e388:	42a0      	cmp	r0, r4
 801e38a:	d10b      	bne.n	801e3a4 <_free_r+0x6c>
 801e38c:	6820      	ldr	r0, [r4, #0]
 801e38e:	4401      	add	r1, r0
 801e390:	1850      	adds	r0, r2, r1
 801e392:	4283      	cmp	r3, r0
 801e394:	6011      	str	r1, [r2, #0]
 801e396:	d1e0      	bne.n	801e35a <_free_r+0x22>
 801e398:	6818      	ldr	r0, [r3, #0]
 801e39a:	685b      	ldr	r3, [r3, #4]
 801e39c:	6053      	str	r3, [r2, #4]
 801e39e:	4408      	add	r0, r1
 801e3a0:	6010      	str	r0, [r2, #0]
 801e3a2:	e7da      	b.n	801e35a <_free_r+0x22>
 801e3a4:	d902      	bls.n	801e3ac <_free_r+0x74>
 801e3a6:	230c      	movs	r3, #12
 801e3a8:	602b      	str	r3, [r5, #0]
 801e3aa:	e7d6      	b.n	801e35a <_free_r+0x22>
 801e3ac:	6820      	ldr	r0, [r4, #0]
 801e3ae:	1821      	adds	r1, r4, r0
 801e3b0:	428b      	cmp	r3, r1
 801e3b2:	bf04      	itt	eq
 801e3b4:	6819      	ldreq	r1, [r3, #0]
 801e3b6:	685b      	ldreq	r3, [r3, #4]
 801e3b8:	6063      	str	r3, [r4, #4]
 801e3ba:	bf04      	itt	eq
 801e3bc:	1809      	addeq	r1, r1, r0
 801e3be:	6021      	streq	r1, [r4, #0]
 801e3c0:	6054      	str	r4, [r2, #4]
 801e3c2:	e7ca      	b.n	801e35a <_free_r+0x22>
 801e3c4:	bd38      	pop	{r3, r4, r5, pc}
 801e3c6:	bf00      	nop
 801e3c8:	20002454 	.word	0x20002454

0801e3cc <malloc>:
 801e3cc:	4b02      	ldr	r3, [pc, #8]	@ (801e3d8 <malloc+0xc>)
 801e3ce:	4601      	mov	r1, r0
 801e3d0:	6818      	ldr	r0, [r3, #0]
 801e3d2:	f000 b825 	b.w	801e420 <_malloc_r>
 801e3d6:	bf00      	nop
 801e3d8:	2000035c 	.word	0x2000035c

0801e3dc <sbrk_aligned>:
 801e3dc:	b570      	push	{r4, r5, r6, lr}
 801e3de:	4e0f      	ldr	r6, [pc, #60]	@ (801e41c <sbrk_aligned+0x40>)
 801e3e0:	460c      	mov	r4, r1
 801e3e2:	6831      	ldr	r1, [r6, #0]
 801e3e4:	4605      	mov	r5, r0
 801e3e6:	b911      	cbnz	r1, 801e3ee <sbrk_aligned+0x12>
 801e3e8:	f000 fcd4 	bl	801ed94 <_sbrk_r>
 801e3ec:	6030      	str	r0, [r6, #0]
 801e3ee:	4621      	mov	r1, r4
 801e3f0:	4628      	mov	r0, r5
 801e3f2:	f000 fccf 	bl	801ed94 <_sbrk_r>
 801e3f6:	1c43      	adds	r3, r0, #1
 801e3f8:	d103      	bne.n	801e402 <sbrk_aligned+0x26>
 801e3fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801e3fe:	4620      	mov	r0, r4
 801e400:	bd70      	pop	{r4, r5, r6, pc}
 801e402:	1cc4      	adds	r4, r0, #3
 801e404:	f024 0403 	bic.w	r4, r4, #3
 801e408:	42a0      	cmp	r0, r4
 801e40a:	d0f8      	beq.n	801e3fe <sbrk_aligned+0x22>
 801e40c:	1a21      	subs	r1, r4, r0
 801e40e:	4628      	mov	r0, r5
 801e410:	f000 fcc0 	bl	801ed94 <_sbrk_r>
 801e414:	3001      	adds	r0, #1
 801e416:	d1f2      	bne.n	801e3fe <sbrk_aligned+0x22>
 801e418:	e7ef      	b.n	801e3fa <sbrk_aligned+0x1e>
 801e41a:	bf00      	nop
 801e41c:	20002450 	.word	0x20002450

0801e420 <_malloc_r>:
 801e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e424:	1ccd      	adds	r5, r1, #3
 801e426:	f025 0503 	bic.w	r5, r5, #3
 801e42a:	3508      	adds	r5, #8
 801e42c:	2d0c      	cmp	r5, #12
 801e42e:	bf38      	it	cc
 801e430:	250c      	movcc	r5, #12
 801e432:	2d00      	cmp	r5, #0
 801e434:	4606      	mov	r6, r0
 801e436:	db01      	blt.n	801e43c <_malloc_r+0x1c>
 801e438:	42a9      	cmp	r1, r5
 801e43a:	d904      	bls.n	801e446 <_malloc_r+0x26>
 801e43c:	230c      	movs	r3, #12
 801e43e:	6033      	str	r3, [r6, #0]
 801e440:	2000      	movs	r0, #0
 801e442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e51c <_malloc_r+0xfc>
 801e44a:	f000 f869 	bl	801e520 <__malloc_lock>
 801e44e:	f8d8 3000 	ldr.w	r3, [r8]
 801e452:	461c      	mov	r4, r3
 801e454:	bb44      	cbnz	r4, 801e4a8 <_malloc_r+0x88>
 801e456:	4629      	mov	r1, r5
 801e458:	4630      	mov	r0, r6
 801e45a:	f7ff ffbf 	bl	801e3dc <sbrk_aligned>
 801e45e:	1c43      	adds	r3, r0, #1
 801e460:	4604      	mov	r4, r0
 801e462:	d158      	bne.n	801e516 <_malloc_r+0xf6>
 801e464:	f8d8 4000 	ldr.w	r4, [r8]
 801e468:	4627      	mov	r7, r4
 801e46a:	2f00      	cmp	r7, #0
 801e46c:	d143      	bne.n	801e4f6 <_malloc_r+0xd6>
 801e46e:	2c00      	cmp	r4, #0
 801e470:	d04b      	beq.n	801e50a <_malloc_r+0xea>
 801e472:	6823      	ldr	r3, [r4, #0]
 801e474:	4639      	mov	r1, r7
 801e476:	4630      	mov	r0, r6
 801e478:	eb04 0903 	add.w	r9, r4, r3
 801e47c:	f000 fc8a 	bl	801ed94 <_sbrk_r>
 801e480:	4581      	cmp	r9, r0
 801e482:	d142      	bne.n	801e50a <_malloc_r+0xea>
 801e484:	6821      	ldr	r1, [r4, #0]
 801e486:	1a6d      	subs	r5, r5, r1
 801e488:	4629      	mov	r1, r5
 801e48a:	4630      	mov	r0, r6
 801e48c:	f7ff ffa6 	bl	801e3dc <sbrk_aligned>
 801e490:	3001      	adds	r0, #1
 801e492:	d03a      	beq.n	801e50a <_malloc_r+0xea>
 801e494:	6823      	ldr	r3, [r4, #0]
 801e496:	442b      	add	r3, r5
 801e498:	6023      	str	r3, [r4, #0]
 801e49a:	f8d8 3000 	ldr.w	r3, [r8]
 801e49e:	685a      	ldr	r2, [r3, #4]
 801e4a0:	bb62      	cbnz	r2, 801e4fc <_malloc_r+0xdc>
 801e4a2:	f8c8 7000 	str.w	r7, [r8]
 801e4a6:	e00f      	b.n	801e4c8 <_malloc_r+0xa8>
 801e4a8:	6822      	ldr	r2, [r4, #0]
 801e4aa:	1b52      	subs	r2, r2, r5
 801e4ac:	d420      	bmi.n	801e4f0 <_malloc_r+0xd0>
 801e4ae:	2a0b      	cmp	r2, #11
 801e4b0:	d917      	bls.n	801e4e2 <_malloc_r+0xc2>
 801e4b2:	1961      	adds	r1, r4, r5
 801e4b4:	42a3      	cmp	r3, r4
 801e4b6:	6025      	str	r5, [r4, #0]
 801e4b8:	bf18      	it	ne
 801e4ba:	6059      	strne	r1, [r3, #4]
 801e4bc:	6863      	ldr	r3, [r4, #4]
 801e4be:	bf08      	it	eq
 801e4c0:	f8c8 1000 	streq.w	r1, [r8]
 801e4c4:	5162      	str	r2, [r4, r5]
 801e4c6:	604b      	str	r3, [r1, #4]
 801e4c8:	4630      	mov	r0, r6
 801e4ca:	f000 f82f 	bl	801e52c <__malloc_unlock>
 801e4ce:	f104 000b 	add.w	r0, r4, #11
 801e4d2:	1d23      	adds	r3, r4, #4
 801e4d4:	f020 0007 	bic.w	r0, r0, #7
 801e4d8:	1ac2      	subs	r2, r0, r3
 801e4da:	bf1c      	itt	ne
 801e4dc:	1a1b      	subne	r3, r3, r0
 801e4de:	50a3      	strne	r3, [r4, r2]
 801e4e0:	e7af      	b.n	801e442 <_malloc_r+0x22>
 801e4e2:	6862      	ldr	r2, [r4, #4]
 801e4e4:	42a3      	cmp	r3, r4
 801e4e6:	bf0c      	ite	eq
 801e4e8:	f8c8 2000 	streq.w	r2, [r8]
 801e4ec:	605a      	strne	r2, [r3, #4]
 801e4ee:	e7eb      	b.n	801e4c8 <_malloc_r+0xa8>
 801e4f0:	4623      	mov	r3, r4
 801e4f2:	6864      	ldr	r4, [r4, #4]
 801e4f4:	e7ae      	b.n	801e454 <_malloc_r+0x34>
 801e4f6:	463c      	mov	r4, r7
 801e4f8:	687f      	ldr	r7, [r7, #4]
 801e4fa:	e7b6      	b.n	801e46a <_malloc_r+0x4a>
 801e4fc:	461a      	mov	r2, r3
 801e4fe:	685b      	ldr	r3, [r3, #4]
 801e500:	42a3      	cmp	r3, r4
 801e502:	d1fb      	bne.n	801e4fc <_malloc_r+0xdc>
 801e504:	2300      	movs	r3, #0
 801e506:	6053      	str	r3, [r2, #4]
 801e508:	e7de      	b.n	801e4c8 <_malloc_r+0xa8>
 801e50a:	230c      	movs	r3, #12
 801e50c:	6033      	str	r3, [r6, #0]
 801e50e:	4630      	mov	r0, r6
 801e510:	f000 f80c 	bl	801e52c <__malloc_unlock>
 801e514:	e794      	b.n	801e440 <_malloc_r+0x20>
 801e516:	6005      	str	r5, [r0, #0]
 801e518:	e7d6      	b.n	801e4c8 <_malloc_r+0xa8>
 801e51a:	bf00      	nop
 801e51c:	20002454 	.word	0x20002454

0801e520 <__malloc_lock>:
 801e520:	4801      	ldr	r0, [pc, #4]	@ (801e528 <__malloc_lock+0x8>)
 801e522:	f7ff b8aa 	b.w	801d67a <__retarget_lock_acquire_recursive>
 801e526:	bf00      	nop
 801e528:	2000244c 	.word	0x2000244c

0801e52c <__malloc_unlock>:
 801e52c:	4801      	ldr	r0, [pc, #4]	@ (801e534 <__malloc_unlock+0x8>)
 801e52e:	f7ff b8a5 	b.w	801d67c <__retarget_lock_release_recursive>
 801e532:	bf00      	nop
 801e534:	2000244c 	.word	0x2000244c

0801e538 <_Balloc>:
 801e538:	b570      	push	{r4, r5, r6, lr}
 801e53a:	69c6      	ldr	r6, [r0, #28]
 801e53c:	4604      	mov	r4, r0
 801e53e:	460d      	mov	r5, r1
 801e540:	b976      	cbnz	r6, 801e560 <_Balloc+0x28>
 801e542:	2010      	movs	r0, #16
 801e544:	f7ff ff42 	bl	801e3cc <malloc>
 801e548:	4602      	mov	r2, r0
 801e54a:	61e0      	str	r0, [r4, #28]
 801e54c:	b920      	cbnz	r0, 801e558 <_Balloc+0x20>
 801e54e:	4b18      	ldr	r3, [pc, #96]	@ (801e5b0 <_Balloc+0x78>)
 801e550:	4818      	ldr	r0, [pc, #96]	@ (801e5b4 <_Balloc+0x7c>)
 801e552:	216b      	movs	r1, #107	@ 0x6b
 801e554:	f000 fc2e 	bl	801edb4 <__assert_func>
 801e558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e55c:	6006      	str	r6, [r0, #0]
 801e55e:	60c6      	str	r6, [r0, #12]
 801e560:	69e6      	ldr	r6, [r4, #28]
 801e562:	68f3      	ldr	r3, [r6, #12]
 801e564:	b183      	cbz	r3, 801e588 <_Balloc+0x50>
 801e566:	69e3      	ldr	r3, [r4, #28]
 801e568:	68db      	ldr	r3, [r3, #12]
 801e56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e56e:	b9b8      	cbnz	r0, 801e5a0 <_Balloc+0x68>
 801e570:	2101      	movs	r1, #1
 801e572:	fa01 f605 	lsl.w	r6, r1, r5
 801e576:	1d72      	adds	r2, r6, #5
 801e578:	0092      	lsls	r2, r2, #2
 801e57a:	4620      	mov	r0, r4
 801e57c:	f000 fc38 	bl	801edf0 <_calloc_r>
 801e580:	b160      	cbz	r0, 801e59c <_Balloc+0x64>
 801e582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e586:	e00e      	b.n	801e5a6 <_Balloc+0x6e>
 801e588:	2221      	movs	r2, #33	@ 0x21
 801e58a:	2104      	movs	r1, #4
 801e58c:	4620      	mov	r0, r4
 801e58e:	f000 fc2f 	bl	801edf0 <_calloc_r>
 801e592:	69e3      	ldr	r3, [r4, #28]
 801e594:	60f0      	str	r0, [r6, #12]
 801e596:	68db      	ldr	r3, [r3, #12]
 801e598:	2b00      	cmp	r3, #0
 801e59a:	d1e4      	bne.n	801e566 <_Balloc+0x2e>
 801e59c:	2000      	movs	r0, #0
 801e59e:	bd70      	pop	{r4, r5, r6, pc}
 801e5a0:	6802      	ldr	r2, [r0, #0]
 801e5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e5ac:	e7f7      	b.n	801e59e <_Balloc+0x66>
 801e5ae:	bf00      	nop
 801e5b0:	080239c1 	.word	0x080239c1
 801e5b4:	08023a41 	.word	0x08023a41

0801e5b8 <_Bfree>:
 801e5b8:	b570      	push	{r4, r5, r6, lr}
 801e5ba:	69c6      	ldr	r6, [r0, #28]
 801e5bc:	4605      	mov	r5, r0
 801e5be:	460c      	mov	r4, r1
 801e5c0:	b976      	cbnz	r6, 801e5e0 <_Bfree+0x28>
 801e5c2:	2010      	movs	r0, #16
 801e5c4:	f7ff ff02 	bl	801e3cc <malloc>
 801e5c8:	4602      	mov	r2, r0
 801e5ca:	61e8      	str	r0, [r5, #28]
 801e5cc:	b920      	cbnz	r0, 801e5d8 <_Bfree+0x20>
 801e5ce:	4b09      	ldr	r3, [pc, #36]	@ (801e5f4 <_Bfree+0x3c>)
 801e5d0:	4809      	ldr	r0, [pc, #36]	@ (801e5f8 <_Bfree+0x40>)
 801e5d2:	218f      	movs	r1, #143	@ 0x8f
 801e5d4:	f000 fbee 	bl	801edb4 <__assert_func>
 801e5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e5dc:	6006      	str	r6, [r0, #0]
 801e5de:	60c6      	str	r6, [r0, #12]
 801e5e0:	b13c      	cbz	r4, 801e5f2 <_Bfree+0x3a>
 801e5e2:	69eb      	ldr	r3, [r5, #28]
 801e5e4:	6862      	ldr	r2, [r4, #4]
 801e5e6:	68db      	ldr	r3, [r3, #12]
 801e5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e5ec:	6021      	str	r1, [r4, #0]
 801e5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e5f2:	bd70      	pop	{r4, r5, r6, pc}
 801e5f4:	080239c1 	.word	0x080239c1
 801e5f8:	08023a41 	.word	0x08023a41

0801e5fc <__multadd>:
 801e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e600:	690d      	ldr	r5, [r1, #16]
 801e602:	4607      	mov	r7, r0
 801e604:	460c      	mov	r4, r1
 801e606:	461e      	mov	r6, r3
 801e608:	f101 0c14 	add.w	ip, r1, #20
 801e60c:	2000      	movs	r0, #0
 801e60e:	f8dc 3000 	ldr.w	r3, [ip]
 801e612:	b299      	uxth	r1, r3
 801e614:	fb02 6101 	mla	r1, r2, r1, r6
 801e618:	0c1e      	lsrs	r6, r3, #16
 801e61a:	0c0b      	lsrs	r3, r1, #16
 801e61c:	fb02 3306 	mla	r3, r2, r6, r3
 801e620:	b289      	uxth	r1, r1
 801e622:	3001      	adds	r0, #1
 801e624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e628:	4285      	cmp	r5, r0
 801e62a:	f84c 1b04 	str.w	r1, [ip], #4
 801e62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e632:	dcec      	bgt.n	801e60e <__multadd+0x12>
 801e634:	b30e      	cbz	r6, 801e67a <__multadd+0x7e>
 801e636:	68a3      	ldr	r3, [r4, #8]
 801e638:	42ab      	cmp	r3, r5
 801e63a:	dc19      	bgt.n	801e670 <__multadd+0x74>
 801e63c:	6861      	ldr	r1, [r4, #4]
 801e63e:	4638      	mov	r0, r7
 801e640:	3101      	adds	r1, #1
 801e642:	f7ff ff79 	bl	801e538 <_Balloc>
 801e646:	4680      	mov	r8, r0
 801e648:	b928      	cbnz	r0, 801e656 <__multadd+0x5a>
 801e64a:	4602      	mov	r2, r0
 801e64c:	4b0c      	ldr	r3, [pc, #48]	@ (801e680 <__multadd+0x84>)
 801e64e:	480d      	ldr	r0, [pc, #52]	@ (801e684 <__multadd+0x88>)
 801e650:	21ba      	movs	r1, #186	@ 0xba
 801e652:	f000 fbaf 	bl	801edb4 <__assert_func>
 801e656:	6922      	ldr	r2, [r4, #16]
 801e658:	3202      	adds	r2, #2
 801e65a:	f104 010c 	add.w	r1, r4, #12
 801e65e:	0092      	lsls	r2, r2, #2
 801e660:	300c      	adds	r0, #12
 801e662:	f7ff f80c 	bl	801d67e <memcpy>
 801e666:	4621      	mov	r1, r4
 801e668:	4638      	mov	r0, r7
 801e66a:	f7ff ffa5 	bl	801e5b8 <_Bfree>
 801e66e:	4644      	mov	r4, r8
 801e670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e674:	3501      	adds	r5, #1
 801e676:	615e      	str	r6, [r3, #20]
 801e678:	6125      	str	r5, [r4, #16]
 801e67a:	4620      	mov	r0, r4
 801e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e680:	08023a30 	.word	0x08023a30
 801e684:	08023a41 	.word	0x08023a41

0801e688 <__hi0bits>:
 801e688:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e68c:	4603      	mov	r3, r0
 801e68e:	bf36      	itet	cc
 801e690:	0403      	lslcc	r3, r0, #16
 801e692:	2000      	movcs	r0, #0
 801e694:	2010      	movcc	r0, #16
 801e696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e69a:	bf3c      	itt	cc
 801e69c:	021b      	lslcc	r3, r3, #8
 801e69e:	3008      	addcc	r0, #8
 801e6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e6a4:	bf3c      	itt	cc
 801e6a6:	011b      	lslcc	r3, r3, #4
 801e6a8:	3004      	addcc	r0, #4
 801e6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e6ae:	bf3c      	itt	cc
 801e6b0:	009b      	lslcc	r3, r3, #2
 801e6b2:	3002      	addcc	r0, #2
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	db05      	blt.n	801e6c4 <__hi0bits+0x3c>
 801e6b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e6bc:	f100 0001 	add.w	r0, r0, #1
 801e6c0:	bf08      	it	eq
 801e6c2:	2020      	moveq	r0, #32
 801e6c4:	4770      	bx	lr

0801e6c6 <__lo0bits>:
 801e6c6:	6803      	ldr	r3, [r0, #0]
 801e6c8:	4602      	mov	r2, r0
 801e6ca:	f013 0007 	ands.w	r0, r3, #7
 801e6ce:	d00b      	beq.n	801e6e8 <__lo0bits+0x22>
 801e6d0:	07d9      	lsls	r1, r3, #31
 801e6d2:	d421      	bmi.n	801e718 <__lo0bits+0x52>
 801e6d4:	0798      	lsls	r0, r3, #30
 801e6d6:	bf49      	itett	mi
 801e6d8:	085b      	lsrmi	r3, r3, #1
 801e6da:	089b      	lsrpl	r3, r3, #2
 801e6dc:	2001      	movmi	r0, #1
 801e6de:	6013      	strmi	r3, [r2, #0]
 801e6e0:	bf5c      	itt	pl
 801e6e2:	6013      	strpl	r3, [r2, #0]
 801e6e4:	2002      	movpl	r0, #2
 801e6e6:	4770      	bx	lr
 801e6e8:	b299      	uxth	r1, r3
 801e6ea:	b909      	cbnz	r1, 801e6f0 <__lo0bits+0x2a>
 801e6ec:	0c1b      	lsrs	r3, r3, #16
 801e6ee:	2010      	movs	r0, #16
 801e6f0:	b2d9      	uxtb	r1, r3
 801e6f2:	b909      	cbnz	r1, 801e6f8 <__lo0bits+0x32>
 801e6f4:	3008      	adds	r0, #8
 801e6f6:	0a1b      	lsrs	r3, r3, #8
 801e6f8:	0719      	lsls	r1, r3, #28
 801e6fa:	bf04      	itt	eq
 801e6fc:	091b      	lsreq	r3, r3, #4
 801e6fe:	3004      	addeq	r0, #4
 801e700:	0799      	lsls	r1, r3, #30
 801e702:	bf04      	itt	eq
 801e704:	089b      	lsreq	r3, r3, #2
 801e706:	3002      	addeq	r0, #2
 801e708:	07d9      	lsls	r1, r3, #31
 801e70a:	d403      	bmi.n	801e714 <__lo0bits+0x4e>
 801e70c:	085b      	lsrs	r3, r3, #1
 801e70e:	f100 0001 	add.w	r0, r0, #1
 801e712:	d003      	beq.n	801e71c <__lo0bits+0x56>
 801e714:	6013      	str	r3, [r2, #0]
 801e716:	4770      	bx	lr
 801e718:	2000      	movs	r0, #0
 801e71a:	4770      	bx	lr
 801e71c:	2020      	movs	r0, #32
 801e71e:	4770      	bx	lr

0801e720 <__i2b>:
 801e720:	b510      	push	{r4, lr}
 801e722:	460c      	mov	r4, r1
 801e724:	2101      	movs	r1, #1
 801e726:	f7ff ff07 	bl	801e538 <_Balloc>
 801e72a:	4602      	mov	r2, r0
 801e72c:	b928      	cbnz	r0, 801e73a <__i2b+0x1a>
 801e72e:	4b05      	ldr	r3, [pc, #20]	@ (801e744 <__i2b+0x24>)
 801e730:	4805      	ldr	r0, [pc, #20]	@ (801e748 <__i2b+0x28>)
 801e732:	f240 1145 	movw	r1, #325	@ 0x145
 801e736:	f000 fb3d 	bl	801edb4 <__assert_func>
 801e73a:	2301      	movs	r3, #1
 801e73c:	6144      	str	r4, [r0, #20]
 801e73e:	6103      	str	r3, [r0, #16]
 801e740:	bd10      	pop	{r4, pc}
 801e742:	bf00      	nop
 801e744:	08023a30 	.word	0x08023a30
 801e748:	08023a41 	.word	0x08023a41

0801e74c <__multiply>:
 801e74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e750:	4614      	mov	r4, r2
 801e752:	690a      	ldr	r2, [r1, #16]
 801e754:	6923      	ldr	r3, [r4, #16]
 801e756:	429a      	cmp	r2, r3
 801e758:	bfa8      	it	ge
 801e75a:	4623      	movge	r3, r4
 801e75c:	460f      	mov	r7, r1
 801e75e:	bfa4      	itt	ge
 801e760:	460c      	movge	r4, r1
 801e762:	461f      	movge	r7, r3
 801e764:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e768:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e76c:	68a3      	ldr	r3, [r4, #8]
 801e76e:	6861      	ldr	r1, [r4, #4]
 801e770:	eb0a 0609 	add.w	r6, sl, r9
 801e774:	42b3      	cmp	r3, r6
 801e776:	b085      	sub	sp, #20
 801e778:	bfb8      	it	lt
 801e77a:	3101      	addlt	r1, #1
 801e77c:	f7ff fedc 	bl	801e538 <_Balloc>
 801e780:	b930      	cbnz	r0, 801e790 <__multiply+0x44>
 801e782:	4602      	mov	r2, r0
 801e784:	4b44      	ldr	r3, [pc, #272]	@ (801e898 <__multiply+0x14c>)
 801e786:	4845      	ldr	r0, [pc, #276]	@ (801e89c <__multiply+0x150>)
 801e788:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e78c:	f000 fb12 	bl	801edb4 <__assert_func>
 801e790:	f100 0514 	add.w	r5, r0, #20
 801e794:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e798:	462b      	mov	r3, r5
 801e79a:	2200      	movs	r2, #0
 801e79c:	4543      	cmp	r3, r8
 801e79e:	d321      	bcc.n	801e7e4 <__multiply+0x98>
 801e7a0:	f107 0114 	add.w	r1, r7, #20
 801e7a4:	f104 0214 	add.w	r2, r4, #20
 801e7a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e7ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e7b0:	9302      	str	r3, [sp, #8]
 801e7b2:	1b13      	subs	r3, r2, r4
 801e7b4:	3b15      	subs	r3, #21
 801e7b6:	f023 0303 	bic.w	r3, r3, #3
 801e7ba:	3304      	adds	r3, #4
 801e7bc:	f104 0715 	add.w	r7, r4, #21
 801e7c0:	42ba      	cmp	r2, r7
 801e7c2:	bf38      	it	cc
 801e7c4:	2304      	movcc	r3, #4
 801e7c6:	9301      	str	r3, [sp, #4]
 801e7c8:	9b02      	ldr	r3, [sp, #8]
 801e7ca:	9103      	str	r1, [sp, #12]
 801e7cc:	428b      	cmp	r3, r1
 801e7ce:	d80c      	bhi.n	801e7ea <__multiply+0x9e>
 801e7d0:	2e00      	cmp	r6, #0
 801e7d2:	dd03      	ble.n	801e7dc <__multiply+0x90>
 801e7d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d05b      	beq.n	801e894 <__multiply+0x148>
 801e7dc:	6106      	str	r6, [r0, #16]
 801e7de:	b005      	add	sp, #20
 801e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7e4:	f843 2b04 	str.w	r2, [r3], #4
 801e7e8:	e7d8      	b.n	801e79c <__multiply+0x50>
 801e7ea:	f8b1 a000 	ldrh.w	sl, [r1]
 801e7ee:	f1ba 0f00 	cmp.w	sl, #0
 801e7f2:	d024      	beq.n	801e83e <__multiply+0xf2>
 801e7f4:	f104 0e14 	add.w	lr, r4, #20
 801e7f8:	46a9      	mov	r9, r5
 801e7fa:	f04f 0c00 	mov.w	ip, #0
 801e7fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e802:	f8d9 3000 	ldr.w	r3, [r9]
 801e806:	fa1f fb87 	uxth.w	fp, r7
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	fb0a 330b 	mla	r3, sl, fp, r3
 801e810:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e814:	f8d9 7000 	ldr.w	r7, [r9]
 801e818:	4463      	add	r3, ip
 801e81a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e81e:	fb0a c70b 	mla	r7, sl, fp, ip
 801e822:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e826:	b29b      	uxth	r3, r3
 801e828:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e82c:	4572      	cmp	r2, lr
 801e82e:	f849 3b04 	str.w	r3, [r9], #4
 801e832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e836:	d8e2      	bhi.n	801e7fe <__multiply+0xb2>
 801e838:	9b01      	ldr	r3, [sp, #4]
 801e83a:	f845 c003 	str.w	ip, [r5, r3]
 801e83e:	9b03      	ldr	r3, [sp, #12]
 801e840:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e844:	3104      	adds	r1, #4
 801e846:	f1b9 0f00 	cmp.w	r9, #0
 801e84a:	d021      	beq.n	801e890 <__multiply+0x144>
 801e84c:	682b      	ldr	r3, [r5, #0]
 801e84e:	f104 0c14 	add.w	ip, r4, #20
 801e852:	46ae      	mov	lr, r5
 801e854:	f04f 0a00 	mov.w	sl, #0
 801e858:	f8bc b000 	ldrh.w	fp, [ip]
 801e85c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e860:	fb09 770b 	mla	r7, r9, fp, r7
 801e864:	4457      	add	r7, sl
 801e866:	b29b      	uxth	r3, r3
 801e868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e86c:	f84e 3b04 	str.w	r3, [lr], #4
 801e870:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e878:	f8be 3000 	ldrh.w	r3, [lr]
 801e87c:	fb09 330a 	mla	r3, r9, sl, r3
 801e880:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e884:	4562      	cmp	r2, ip
 801e886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e88a:	d8e5      	bhi.n	801e858 <__multiply+0x10c>
 801e88c:	9f01      	ldr	r7, [sp, #4]
 801e88e:	51eb      	str	r3, [r5, r7]
 801e890:	3504      	adds	r5, #4
 801e892:	e799      	b.n	801e7c8 <__multiply+0x7c>
 801e894:	3e01      	subs	r6, #1
 801e896:	e79b      	b.n	801e7d0 <__multiply+0x84>
 801e898:	08023a30 	.word	0x08023a30
 801e89c:	08023a41 	.word	0x08023a41

0801e8a0 <__pow5mult>:
 801e8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e8a4:	4615      	mov	r5, r2
 801e8a6:	f012 0203 	ands.w	r2, r2, #3
 801e8aa:	4607      	mov	r7, r0
 801e8ac:	460e      	mov	r6, r1
 801e8ae:	d007      	beq.n	801e8c0 <__pow5mult+0x20>
 801e8b0:	4c25      	ldr	r4, [pc, #148]	@ (801e948 <__pow5mult+0xa8>)
 801e8b2:	3a01      	subs	r2, #1
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e8ba:	f7ff fe9f 	bl	801e5fc <__multadd>
 801e8be:	4606      	mov	r6, r0
 801e8c0:	10ad      	asrs	r5, r5, #2
 801e8c2:	d03d      	beq.n	801e940 <__pow5mult+0xa0>
 801e8c4:	69fc      	ldr	r4, [r7, #28]
 801e8c6:	b97c      	cbnz	r4, 801e8e8 <__pow5mult+0x48>
 801e8c8:	2010      	movs	r0, #16
 801e8ca:	f7ff fd7f 	bl	801e3cc <malloc>
 801e8ce:	4602      	mov	r2, r0
 801e8d0:	61f8      	str	r0, [r7, #28]
 801e8d2:	b928      	cbnz	r0, 801e8e0 <__pow5mult+0x40>
 801e8d4:	4b1d      	ldr	r3, [pc, #116]	@ (801e94c <__pow5mult+0xac>)
 801e8d6:	481e      	ldr	r0, [pc, #120]	@ (801e950 <__pow5mult+0xb0>)
 801e8d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e8dc:	f000 fa6a 	bl	801edb4 <__assert_func>
 801e8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e8e4:	6004      	str	r4, [r0, #0]
 801e8e6:	60c4      	str	r4, [r0, #12]
 801e8e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e8f0:	b94c      	cbnz	r4, 801e906 <__pow5mult+0x66>
 801e8f2:	f240 2171 	movw	r1, #625	@ 0x271
 801e8f6:	4638      	mov	r0, r7
 801e8f8:	f7ff ff12 	bl	801e720 <__i2b>
 801e8fc:	2300      	movs	r3, #0
 801e8fe:	f8c8 0008 	str.w	r0, [r8, #8]
 801e902:	4604      	mov	r4, r0
 801e904:	6003      	str	r3, [r0, #0]
 801e906:	f04f 0900 	mov.w	r9, #0
 801e90a:	07eb      	lsls	r3, r5, #31
 801e90c:	d50a      	bpl.n	801e924 <__pow5mult+0x84>
 801e90e:	4631      	mov	r1, r6
 801e910:	4622      	mov	r2, r4
 801e912:	4638      	mov	r0, r7
 801e914:	f7ff ff1a 	bl	801e74c <__multiply>
 801e918:	4631      	mov	r1, r6
 801e91a:	4680      	mov	r8, r0
 801e91c:	4638      	mov	r0, r7
 801e91e:	f7ff fe4b 	bl	801e5b8 <_Bfree>
 801e922:	4646      	mov	r6, r8
 801e924:	106d      	asrs	r5, r5, #1
 801e926:	d00b      	beq.n	801e940 <__pow5mult+0xa0>
 801e928:	6820      	ldr	r0, [r4, #0]
 801e92a:	b938      	cbnz	r0, 801e93c <__pow5mult+0x9c>
 801e92c:	4622      	mov	r2, r4
 801e92e:	4621      	mov	r1, r4
 801e930:	4638      	mov	r0, r7
 801e932:	f7ff ff0b 	bl	801e74c <__multiply>
 801e936:	6020      	str	r0, [r4, #0]
 801e938:	f8c0 9000 	str.w	r9, [r0]
 801e93c:	4604      	mov	r4, r0
 801e93e:	e7e4      	b.n	801e90a <__pow5mult+0x6a>
 801e940:	4630      	mov	r0, r6
 801e942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e946:	bf00      	nop
 801e948:	08023a9c 	.word	0x08023a9c
 801e94c:	080239c1 	.word	0x080239c1
 801e950:	08023a41 	.word	0x08023a41

0801e954 <__lshift>:
 801e954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e958:	460c      	mov	r4, r1
 801e95a:	6849      	ldr	r1, [r1, #4]
 801e95c:	6923      	ldr	r3, [r4, #16]
 801e95e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e962:	68a3      	ldr	r3, [r4, #8]
 801e964:	4607      	mov	r7, r0
 801e966:	4691      	mov	r9, r2
 801e968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e96c:	f108 0601 	add.w	r6, r8, #1
 801e970:	42b3      	cmp	r3, r6
 801e972:	db0b      	blt.n	801e98c <__lshift+0x38>
 801e974:	4638      	mov	r0, r7
 801e976:	f7ff fddf 	bl	801e538 <_Balloc>
 801e97a:	4605      	mov	r5, r0
 801e97c:	b948      	cbnz	r0, 801e992 <__lshift+0x3e>
 801e97e:	4602      	mov	r2, r0
 801e980:	4b28      	ldr	r3, [pc, #160]	@ (801ea24 <__lshift+0xd0>)
 801e982:	4829      	ldr	r0, [pc, #164]	@ (801ea28 <__lshift+0xd4>)
 801e984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e988:	f000 fa14 	bl	801edb4 <__assert_func>
 801e98c:	3101      	adds	r1, #1
 801e98e:	005b      	lsls	r3, r3, #1
 801e990:	e7ee      	b.n	801e970 <__lshift+0x1c>
 801e992:	2300      	movs	r3, #0
 801e994:	f100 0114 	add.w	r1, r0, #20
 801e998:	f100 0210 	add.w	r2, r0, #16
 801e99c:	4618      	mov	r0, r3
 801e99e:	4553      	cmp	r3, sl
 801e9a0:	db33      	blt.n	801ea0a <__lshift+0xb6>
 801e9a2:	6920      	ldr	r0, [r4, #16]
 801e9a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e9a8:	f104 0314 	add.w	r3, r4, #20
 801e9ac:	f019 091f 	ands.w	r9, r9, #31
 801e9b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e9b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e9b8:	d02b      	beq.n	801ea12 <__lshift+0xbe>
 801e9ba:	f1c9 0e20 	rsb	lr, r9, #32
 801e9be:	468a      	mov	sl, r1
 801e9c0:	2200      	movs	r2, #0
 801e9c2:	6818      	ldr	r0, [r3, #0]
 801e9c4:	fa00 f009 	lsl.w	r0, r0, r9
 801e9c8:	4310      	orrs	r0, r2
 801e9ca:	f84a 0b04 	str.w	r0, [sl], #4
 801e9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9d2:	459c      	cmp	ip, r3
 801e9d4:	fa22 f20e 	lsr.w	r2, r2, lr
 801e9d8:	d8f3      	bhi.n	801e9c2 <__lshift+0x6e>
 801e9da:	ebac 0304 	sub.w	r3, ip, r4
 801e9de:	3b15      	subs	r3, #21
 801e9e0:	f023 0303 	bic.w	r3, r3, #3
 801e9e4:	3304      	adds	r3, #4
 801e9e6:	f104 0015 	add.w	r0, r4, #21
 801e9ea:	4584      	cmp	ip, r0
 801e9ec:	bf38      	it	cc
 801e9ee:	2304      	movcc	r3, #4
 801e9f0:	50ca      	str	r2, [r1, r3]
 801e9f2:	b10a      	cbz	r2, 801e9f8 <__lshift+0xa4>
 801e9f4:	f108 0602 	add.w	r6, r8, #2
 801e9f8:	3e01      	subs	r6, #1
 801e9fa:	4638      	mov	r0, r7
 801e9fc:	612e      	str	r6, [r5, #16]
 801e9fe:	4621      	mov	r1, r4
 801ea00:	f7ff fdda 	bl	801e5b8 <_Bfree>
 801ea04:	4628      	mov	r0, r5
 801ea06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea0a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ea0e:	3301      	adds	r3, #1
 801ea10:	e7c5      	b.n	801e99e <__lshift+0x4a>
 801ea12:	3904      	subs	r1, #4
 801ea14:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea18:	f841 2f04 	str.w	r2, [r1, #4]!
 801ea1c:	459c      	cmp	ip, r3
 801ea1e:	d8f9      	bhi.n	801ea14 <__lshift+0xc0>
 801ea20:	e7ea      	b.n	801e9f8 <__lshift+0xa4>
 801ea22:	bf00      	nop
 801ea24:	08023a30 	.word	0x08023a30
 801ea28:	08023a41 	.word	0x08023a41

0801ea2c <__mcmp>:
 801ea2c:	690a      	ldr	r2, [r1, #16]
 801ea2e:	4603      	mov	r3, r0
 801ea30:	6900      	ldr	r0, [r0, #16]
 801ea32:	1a80      	subs	r0, r0, r2
 801ea34:	b530      	push	{r4, r5, lr}
 801ea36:	d10e      	bne.n	801ea56 <__mcmp+0x2a>
 801ea38:	3314      	adds	r3, #20
 801ea3a:	3114      	adds	r1, #20
 801ea3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ea40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ea44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ea48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ea4c:	4295      	cmp	r5, r2
 801ea4e:	d003      	beq.n	801ea58 <__mcmp+0x2c>
 801ea50:	d205      	bcs.n	801ea5e <__mcmp+0x32>
 801ea52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ea56:	bd30      	pop	{r4, r5, pc}
 801ea58:	42a3      	cmp	r3, r4
 801ea5a:	d3f3      	bcc.n	801ea44 <__mcmp+0x18>
 801ea5c:	e7fb      	b.n	801ea56 <__mcmp+0x2a>
 801ea5e:	2001      	movs	r0, #1
 801ea60:	e7f9      	b.n	801ea56 <__mcmp+0x2a>
	...

0801ea64 <__mdiff>:
 801ea64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea68:	4689      	mov	r9, r1
 801ea6a:	4606      	mov	r6, r0
 801ea6c:	4611      	mov	r1, r2
 801ea6e:	4648      	mov	r0, r9
 801ea70:	4614      	mov	r4, r2
 801ea72:	f7ff ffdb 	bl	801ea2c <__mcmp>
 801ea76:	1e05      	subs	r5, r0, #0
 801ea78:	d112      	bne.n	801eaa0 <__mdiff+0x3c>
 801ea7a:	4629      	mov	r1, r5
 801ea7c:	4630      	mov	r0, r6
 801ea7e:	f7ff fd5b 	bl	801e538 <_Balloc>
 801ea82:	4602      	mov	r2, r0
 801ea84:	b928      	cbnz	r0, 801ea92 <__mdiff+0x2e>
 801ea86:	4b3f      	ldr	r3, [pc, #252]	@ (801eb84 <__mdiff+0x120>)
 801ea88:	f240 2137 	movw	r1, #567	@ 0x237
 801ea8c:	483e      	ldr	r0, [pc, #248]	@ (801eb88 <__mdiff+0x124>)
 801ea8e:	f000 f991 	bl	801edb4 <__assert_func>
 801ea92:	2301      	movs	r3, #1
 801ea94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ea98:	4610      	mov	r0, r2
 801ea9a:	b003      	add	sp, #12
 801ea9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaa0:	bfbc      	itt	lt
 801eaa2:	464b      	movlt	r3, r9
 801eaa4:	46a1      	movlt	r9, r4
 801eaa6:	4630      	mov	r0, r6
 801eaa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801eaac:	bfba      	itte	lt
 801eaae:	461c      	movlt	r4, r3
 801eab0:	2501      	movlt	r5, #1
 801eab2:	2500      	movge	r5, #0
 801eab4:	f7ff fd40 	bl	801e538 <_Balloc>
 801eab8:	4602      	mov	r2, r0
 801eaba:	b918      	cbnz	r0, 801eac4 <__mdiff+0x60>
 801eabc:	4b31      	ldr	r3, [pc, #196]	@ (801eb84 <__mdiff+0x120>)
 801eabe:	f240 2145 	movw	r1, #581	@ 0x245
 801eac2:	e7e3      	b.n	801ea8c <__mdiff+0x28>
 801eac4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801eac8:	6926      	ldr	r6, [r4, #16]
 801eaca:	60c5      	str	r5, [r0, #12]
 801eacc:	f109 0310 	add.w	r3, r9, #16
 801ead0:	f109 0514 	add.w	r5, r9, #20
 801ead4:	f104 0e14 	add.w	lr, r4, #20
 801ead8:	f100 0b14 	add.w	fp, r0, #20
 801eadc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801eae0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801eae4:	9301      	str	r3, [sp, #4]
 801eae6:	46d9      	mov	r9, fp
 801eae8:	f04f 0c00 	mov.w	ip, #0
 801eaec:	9b01      	ldr	r3, [sp, #4]
 801eaee:	f85e 0b04 	ldr.w	r0, [lr], #4
 801eaf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801eaf6:	9301      	str	r3, [sp, #4]
 801eaf8:	fa1f f38a 	uxth.w	r3, sl
 801eafc:	4619      	mov	r1, r3
 801eafe:	b283      	uxth	r3, r0
 801eb00:	1acb      	subs	r3, r1, r3
 801eb02:	0c00      	lsrs	r0, r0, #16
 801eb04:	4463      	add	r3, ip
 801eb06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801eb0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801eb14:	4576      	cmp	r6, lr
 801eb16:	f849 3b04 	str.w	r3, [r9], #4
 801eb1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801eb1e:	d8e5      	bhi.n	801eaec <__mdiff+0x88>
 801eb20:	1b33      	subs	r3, r6, r4
 801eb22:	3b15      	subs	r3, #21
 801eb24:	f023 0303 	bic.w	r3, r3, #3
 801eb28:	3415      	adds	r4, #21
 801eb2a:	3304      	adds	r3, #4
 801eb2c:	42a6      	cmp	r6, r4
 801eb2e:	bf38      	it	cc
 801eb30:	2304      	movcc	r3, #4
 801eb32:	441d      	add	r5, r3
 801eb34:	445b      	add	r3, fp
 801eb36:	461e      	mov	r6, r3
 801eb38:	462c      	mov	r4, r5
 801eb3a:	4544      	cmp	r4, r8
 801eb3c:	d30e      	bcc.n	801eb5c <__mdiff+0xf8>
 801eb3e:	f108 0103 	add.w	r1, r8, #3
 801eb42:	1b49      	subs	r1, r1, r5
 801eb44:	f021 0103 	bic.w	r1, r1, #3
 801eb48:	3d03      	subs	r5, #3
 801eb4a:	45a8      	cmp	r8, r5
 801eb4c:	bf38      	it	cc
 801eb4e:	2100      	movcc	r1, #0
 801eb50:	440b      	add	r3, r1
 801eb52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eb56:	b191      	cbz	r1, 801eb7e <__mdiff+0x11a>
 801eb58:	6117      	str	r7, [r2, #16]
 801eb5a:	e79d      	b.n	801ea98 <__mdiff+0x34>
 801eb5c:	f854 1b04 	ldr.w	r1, [r4], #4
 801eb60:	46e6      	mov	lr, ip
 801eb62:	0c08      	lsrs	r0, r1, #16
 801eb64:	fa1c fc81 	uxtah	ip, ip, r1
 801eb68:	4471      	add	r1, lr
 801eb6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801eb6e:	b289      	uxth	r1, r1
 801eb70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801eb74:	f846 1b04 	str.w	r1, [r6], #4
 801eb78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801eb7c:	e7dd      	b.n	801eb3a <__mdiff+0xd6>
 801eb7e:	3f01      	subs	r7, #1
 801eb80:	e7e7      	b.n	801eb52 <__mdiff+0xee>
 801eb82:	bf00      	nop
 801eb84:	08023a30 	.word	0x08023a30
 801eb88:	08023a41 	.word	0x08023a41

0801eb8c <__d2b>:
 801eb8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eb90:	460f      	mov	r7, r1
 801eb92:	2101      	movs	r1, #1
 801eb94:	ec59 8b10 	vmov	r8, r9, d0
 801eb98:	4616      	mov	r6, r2
 801eb9a:	f7ff fccd 	bl	801e538 <_Balloc>
 801eb9e:	4604      	mov	r4, r0
 801eba0:	b930      	cbnz	r0, 801ebb0 <__d2b+0x24>
 801eba2:	4602      	mov	r2, r0
 801eba4:	4b23      	ldr	r3, [pc, #140]	@ (801ec34 <__d2b+0xa8>)
 801eba6:	4824      	ldr	r0, [pc, #144]	@ (801ec38 <__d2b+0xac>)
 801eba8:	f240 310f 	movw	r1, #783	@ 0x30f
 801ebac:	f000 f902 	bl	801edb4 <__assert_func>
 801ebb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ebb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ebb8:	b10d      	cbz	r5, 801ebbe <__d2b+0x32>
 801ebba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ebbe:	9301      	str	r3, [sp, #4]
 801ebc0:	f1b8 0300 	subs.w	r3, r8, #0
 801ebc4:	d023      	beq.n	801ec0e <__d2b+0x82>
 801ebc6:	4668      	mov	r0, sp
 801ebc8:	9300      	str	r3, [sp, #0]
 801ebca:	f7ff fd7c 	bl	801e6c6 <__lo0bits>
 801ebce:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ebd2:	b1d0      	cbz	r0, 801ec0a <__d2b+0x7e>
 801ebd4:	f1c0 0320 	rsb	r3, r0, #32
 801ebd8:	fa02 f303 	lsl.w	r3, r2, r3
 801ebdc:	430b      	orrs	r3, r1
 801ebde:	40c2      	lsrs	r2, r0
 801ebe0:	6163      	str	r3, [r4, #20]
 801ebe2:	9201      	str	r2, [sp, #4]
 801ebe4:	9b01      	ldr	r3, [sp, #4]
 801ebe6:	61a3      	str	r3, [r4, #24]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	bf0c      	ite	eq
 801ebec:	2201      	moveq	r2, #1
 801ebee:	2202      	movne	r2, #2
 801ebf0:	6122      	str	r2, [r4, #16]
 801ebf2:	b1a5      	cbz	r5, 801ec1e <__d2b+0x92>
 801ebf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ebf8:	4405      	add	r5, r0
 801ebfa:	603d      	str	r5, [r7, #0]
 801ebfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ec00:	6030      	str	r0, [r6, #0]
 801ec02:	4620      	mov	r0, r4
 801ec04:	b003      	add	sp, #12
 801ec06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec0a:	6161      	str	r1, [r4, #20]
 801ec0c:	e7ea      	b.n	801ebe4 <__d2b+0x58>
 801ec0e:	a801      	add	r0, sp, #4
 801ec10:	f7ff fd59 	bl	801e6c6 <__lo0bits>
 801ec14:	9b01      	ldr	r3, [sp, #4]
 801ec16:	6163      	str	r3, [r4, #20]
 801ec18:	3020      	adds	r0, #32
 801ec1a:	2201      	movs	r2, #1
 801ec1c:	e7e8      	b.n	801ebf0 <__d2b+0x64>
 801ec1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ec22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ec26:	6038      	str	r0, [r7, #0]
 801ec28:	6918      	ldr	r0, [r3, #16]
 801ec2a:	f7ff fd2d 	bl	801e688 <__hi0bits>
 801ec2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ec32:	e7e5      	b.n	801ec00 <__d2b+0x74>
 801ec34:	08023a30 	.word	0x08023a30
 801ec38:	08023a41 	.word	0x08023a41

0801ec3c <__sflush_r>:
 801ec3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ec40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec44:	0716      	lsls	r6, r2, #28
 801ec46:	4605      	mov	r5, r0
 801ec48:	460c      	mov	r4, r1
 801ec4a:	d454      	bmi.n	801ecf6 <__sflush_r+0xba>
 801ec4c:	684b      	ldr	r3, [r1, #4]
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	dc02      	bgt.n	801ec58 <__sflush_r+0x1c>
 801ec52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	dd48      	ble.n	801ecea <__sflush_r+0xae>
 801ec58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec5a:	2e00      	cmp	r6, #0
 801ec5c:	d045      	beq.n	801ecea <__sflush_r+0xae>
 801ec5e:	2300      	movs	r3, #0
 801ec60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ec64:	682f      	ldr	r7, [r5, #0]
 801ec66:	6a21      	ldr	r1, [r4, #32]
 801ec68:	602b      	str	r3, [r5, #0]
 801ec6a:	d030      	beq.n	801ecce <__sflush_r+0x92>
 801ec6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ec6e:	89a3      	ldrh	r3, [r4, #12]
 801ec70:	0759      	lsls	r1, r3, #29
 801ec72:	d505      	bpl.n	801ec80 <__sflush_r+0x44>
 801ec74:	6863      	ldr	r3, [r4, #4]
 801ec76:	1ad2      	subs	r2, r2, r3
 801ec78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ec7a:	b10b      	cbz	r3, 801ec80 <__sflush_r+0x44>
 801ec7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ec7e:	1ad2      	subs	r2, r2, r3
 801ec80:	2300      	movs	r3, #0
 801ec82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec84:	6a21      	ldr	r1, [r4, #32]
 801ec86:	4628      	mov	r0, r5
 801ec88:	47b0      	blx	r6
 801ec8a:	1c43      	adds	r3, r0, #1
 801ec8c:	89a3      	ldrh	r3, [r4, #12]
 801ec8e:	d106      	bne.n	801ec9e <__sflush_r+0x62>
 801ec90:	6829      	ldr	r1, [r5, #0]
 801ec92:	291d      	cmp	r1, #29
 801ec94:	d82b      	bhi.n	801ecee <__sflush_r+0xb2>
 801ec96:	4a2a      	ldr	r2, [pc, #168]	@ (801ed40 <__sflush_r+0x104>)
 801ec98:	410a      	asrs	r2, r1
 801ec9a:	07d6      	lsls	r6, r2, #31
 801ec9c:	d427      	bmi.n	801ecee <__sflush_r+0xb2>
 801ec9e:	2200      	movs	r2, #0
 801eca0:	6062      	str	r2, [r4, #4]
 801eca2:	04d9      	lsls	r1, r3, #19
 801eca4:	6922      	ldr	r2, [r4, #16]
 801eca6:	6022      	str	r2, [r4, #0]
 801eca8:	d504      	bpl.n	801ecb4 <__sflush_r+0x78>
 801ecaa:	1c42      	adds	r2, r0, #1
 801ecac:	d101      	bne.n	801ecb2 <__sflush_r+0x76>
 801ecae:	682b      	ldr	r3, [r5, #0]
 801ecb0:	b903      	cbnz	r3, 801ecb4 <__sflush_r+0x78>
 801ecb2:	6560      	str	r0, [r4, #84]	@ 0x54
 801ecb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ecb6:	602f      	str	r7, [r5, #0]
 801ecb8:	b1b9      	cbz	r1, 801ecea <__sflush_r+0xae>
 801ecba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ecbe:	4299      	cmp	r1, r3
 801ecc0:	d002      	beq.n	801ecc8 <__sflush_r+0x8c>
 801ecc2:	4628      	mov	r0, r5
 801ecc4:	f7ff fb38 	bl	801e338 <_free_r>
 801ecc8:	2300      	movs	r3, #0
 801ecca:	6363      	str	r3, [r4, #52]	@ 0x34
 801eccc:	e00d      	b.n	801ecea <__sflush_r+0xae>
 801ecce:	2301      	movs	r3, #1
 801ecd0:	4628      	mov	r0, r5
 801ecd2:	47b0      	blx	r6
 801ecd4:	4602      	mov	r2, r0
 801ecd6:	1c50      	adds	r0, r2, #1
 801ecd8:	d1c9      	bne.n	801ec6e <__sflush_r+0x32>
 801ecda:	682b      	ldr	r3, [r5, #0]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d0c6      	beq.n	801ec6e <__sflush_r+0x32>
 801ece0:	2b1d      	cmp	r3, #29
 801ece2:	d001      	beq.n	801ece8 <__sflush_r+0xac>
 801ece4:	2b16      	cmp	r3, #22
 801ece6:	d11e      	bne.n	801ed26 <__sflush_r+0xea>
 801ece8:	602f      	str	r7, [r5, #0]
 801ecea:	2000      	movs	r0, #0
 801ecec:	e022      	b.n	801ed34 <__sflush_r+0xf8>
 801ecee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ecf2:	b21b      	sxth	r3, r3
 801ecf4:	e01b      	b.n	801ed2e <__sflush_r+0xf2>
 801ecf6:	690f      	ldr	r7, [r1, #16]
 801ecf8:	2f00      	cmp	r7, #0
 801ecfa:	d0f6      	beq.n	801ecea <__sflush_r+0xae>
 801ecfc:	0793      	lsls	r3, r2, #30
 801ecfe:	680e      	ldr	r6, [r1, #0]
 801ed00:	bf08      	it	eq
 801ed02:	694b      	ldreq	r3, [r1, #20]
 801ed04:	600f      	str	r7, [r1, #0]
 801ed06:	bf18      	it	ne
 801ed08:	2300      	movne	r3, #0
 801ed0a:	eba6 0807 	sub.w	r8, r6, r7
 801ed0e:	608b      	str	r3, [r1, #8]
 801ed10:	f1b8 0f00 	cmp.w	r8, #0
 801ed14:	dde9      	ble.n	801ecea <__sflush_r+0xae>
 801ed16:	6a21      	ldr	r1, [r4, #32]
 801ed18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ed1a:	4643      	mov	r3, r8
 801ed1c:	463a      	mov	r2, r7
 801ed1e:	4628      	mov	r0, r5
 801ed20:	47b0      	blx	r6
 801ed22:	2800      	cmp	r0, #0
 801ed24:	dc08      	bgt.n	801ed38 <__sflush_r+0xfc>
 801ed26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed2e:	81a3      	strh	r3, [r4, #12]
 801ed30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ed34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed38:	4407      	add	r7, r0
 801ed3a:	eba8 0800 	sub.w	r8, r8, r0
 801ed3e:	e7e7      	b.n	801ed10 <__sflush_r+0xd4>
 801ed40:	dfbffffe 	.word	0xdfbffffe

0801ed44 <_fflush_r>:
 801ed44:	b538      	push	{r3, r4, r5, lr}
 801ed46:	690b      	ldr	r3, [r1, #16]
 801ed48:	4605      	mov	r5, r0
 801ed4a:	460c      	mov	r4, r1
 801ed4c:	b913      	cbnz	r3, 801ed54 <_fflush_r+0x10>
 801ed4e:	2500      	movs	r5, #0
 801ed50:	4628      	mov	r0, r5
 801ed52:	bd38      	pop	{r3, r4, r5, pc}
 801ed54:	b118      	cbz	r0, 801ed5e <_fflush_r+0x1a>
 801ed56:	6a03      	ldr	r3, [r0, #32]
 801ed58:	b90b      	cbnz	r3, 801ed5e <_fflush_r+0x1a>
 801ed5a:	f7fe fb97 	bl	801d48c <__sinit>
 801ed5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d0f3      	beq.n	801ed4e <_fflush_r+0xa>
 801ed66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ed68:	07d0      	lsls	r0, r2, #31
 801ed6a:	d404      	bmi.n	801ed76 <_fflush_r+0x32>
 801ed6c:	0599      	lsls	r1, r3, #22
 801ed6e:	d402      	bmi.n	801ed76 <_fflush_r+0x32>
 801ed70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ed72:	f7fe fc82 	bl	801d67a <__retarget_lock_acquire_recursive>
 801ed76:	4628      	mov	r0, r5
 801ed78:	4621      	mov	r1, r4
 801ed7a:	f7ff ff5f 	bl	801ec3c <__sflush_r>
 801ed7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ed80:	07da      	lsls	r2, r3, #31
 801ed82:	4605      	mov	r5, r0
 801ed84:	d4e4      	bmi.n	801ed50 <_fflush_r+0xc>
 801ed86:	89a3      	ldrh	r3, [r4, #12]
 801ed88:	059b      	lsls	r3, r3, #22
 801ed8a:	d4e1      	bmi.n	801ed50 <_fflush_r+0xc>
 801ed8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ed8e:	f7fe fc75 	bl	801d67c <__retarget_lock_release_recursive>
 801ed92:	e7dd      	b.n	801ed50 <_fflush_r+0xc>

0801ed94 <_sbrk_r>:
 801ed94:	b538      	push	{r3, r4, r5, lr}
 801ed96:	4d06      	ldr	r5, [pc, #24]	@ (801edb0 <_sbrk_r+0x1c>)
 801ed98:	2300      	movs	r3, #0
 801ed9a:	4604      	mov	r4, r0
 801ed9c:	4608      	mov	r0, r1
 801ed9e:	602b      	str	r3, [r5, #0]
 801eda0:	f7e6 fe8a 	bl	8005ab8 <_sbrk>
 801eda4:	1c43      	adds	r3, r0, #1
 801eda6:	d102      	bne.n	801edae <_sbrk_r+0x1a>
 801eda8:	682b      	ldr	r3, [r5, #0]
 801edaa:	b103      	cbz	r3, 801edae <_sbrk_r+0x1a>
 801edac:	6023      	str	r3, [r4, #0]
 801edae:	bd38      	pop	{r3, r4, r5, pc}
 801edb0:	20002448 	.word	0x20002448

0801edb4 <__assert_func>:
 801edb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801edb6:	4614      	mov	r4, r2
 801edb8:	461a      	mov	r2, r3
 801edba:	4b09      	ldr	r3, [pc, #36]	@ (801ede0 <__assert_func+0x2c>)
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	4605      	mov	r5, r0
 801edc0:	68d8      	ldr	r0, [r3, #12]
 801edc2:	b954      	cbnz	r4, 801edda <__assert_func+0x26>
 801edc4:	4b07      	ldr	r3, [pc, #28]	@ (801ede4 <__assert_func+0x30>)
 801edc6:	461c      	mov	r4, r3
 801edc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801edcc:	9100      	str	r1, [sp, #0]
 801edce:	462b      	mov	r3, r5
 801edd0:	4905      	ldr	r1, [pc, #20]	@ (801ede8 <__assert_func+0x34>)
 801edd2:	f000 f841 	bl	801ee58 <fiprintf>
 801edd6:	f000 f851 	bl	801ee7c <abort>
 801edda:	4b04      	ldr	r3, [pc, #16]	@ (801edec <__assert_func+0x38>)
 801eddc:	e7f4      	b.n	801edc8 <__assert_func+0x14>
 801edde:	bf00      	nop
 801ede0:	2000035c 	.word	0x2000035c
 801ede4:	08023bdd 	.word	0x08023bdd
 801ede8:	08023baf 	.word	0x08023baf
 801edec:	08023ba2 	.word	0x08023ba2

0801edf0 <_calloc_r>:
 801edf0:	b570      	push	{r4, r5, r6, lr}
 801edf2:	fba1 5402 	umull	r5, r4, r1, r2
 801edf6:	b93c      	cbnz	r4, 801ee08 <_calloc_r+0x18>
 801edf8:	4629      	mov	r1, r5
 801edfa:	f7ff fb11 	bl	801e420 <_malloc_r>
 801edfe:	4606      	mov	r6, r0
 801ee00:	b928      	cbnz	r0, 801ee0e <_calloc_r+0x1e>
 801ee02:	2600      	movs	r6, #0
 801ee04:	4630      	mov	r0, r6
 801ee06:	bd70      	pop	{r4, r5, r6, pc}
 801ee08:	220c      	movs	r2, #12
 801ee0a:	6002      	str	r2, [r0, #0]
 801ee0c:	e7f9      	b.n	801ee02 <_calloc_r+0x12>
 801ee0e:	462a      	mov	r2, r5
 801ee10:	4621      	mov	r1, r4
 801ee12:	f7fe fbb4 	bl	801d57e <memset>
 801ee16:	e7f5      	b.n	801ee04 <_calloc_r+0x14>

0801ee18 <__ascii_mbtowc>:
 801ee18:	b082      	sub	sp, #8
 801ee1a:	b901      	cbnz	r1, 801ee1e <__ascii_mbtowc+0x6>
 801ee1c:	a901      	add	r1, sp, #4
 801ee1e:	b142      	cbz	r2, 801ee32 <__ascii_mbtowc+0x1a>
 801ee20:	b14b      	cbz	r3, 801ee36 <__ascii_mbtowc+0x1e>
 801ee22:	7813      	ldrb	r3, [r2, #0]
 801ee24:	600b      	str	r3, [r1, #0]
 801ee26:	7812      	ldrb	r2, [r2, #0]
 801ee28:	1e10      	subs	r0, r2, #0
 801ee2a:	bf18      	it	ne
 801ee2c:	2001      	movne	r0, #1
 801ee2e:	b002      	add	sp, #8
 801ee30:	4770      	bx	lr
 801ee32:	4610      	mov	r0, r2
 801ee34:	e7fb      	b.n	801ee2e <__ascii_mbtowc+0x16>
 801ee36:	f06f 0001 	mvn.w	r0, #1
 801ee3a:	e7f8      	b.n	801ee2e <__ascii_mbtowc+0x16>

0801ee3c <__ascii_wctomb>:
 801ee3c:	4603      	mov	r3, r0
 801ee3e:	4608      	mov	r0, r1
 801ee40:	b141      	cbz	r1, 801ee54 <__ascii_wctomb+0x18>
 801ee42:	2aff      	cmp	r2, #255	@ 0xff
 801ee44:	d904      	bls.n	801ee50 <__ascii_wctomb+0x14>
 801ee46:	228a      	movs	r2, #138	@ 0x8a
 801ee48:	601a      	str	r2, [r3, #0]
 801ee4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ee4e:	4770      	bx	lr
 801ee50:	700a      	strb	r2, [r1, #0]
 801ee52:	2001      	movs	r0, #1
 801ee54:	4770      	bx	lr
	...

0801ee58 <fiprintf>:
 801ee58:	b40e      	push	{r1, r2, r3}
 801ee5a:	b503      	push	{r0, r1, lr}
 801ee5c:	4601      	mov	r1, r0
 801ee5e:	ab03      	add	r3, sp, #12
 801ee60:	4805      	ldr	r0, [pc, #20]	@ (801ee78 <fiprintf+0x20>)
 801ee62:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee66:	6800      	ldr	r0, [r0, #0]
 801ee68:	9301      	str	r3, [sp, #4]
 801ee6a:	f000 f837 	bl	801eedc <_vfiprintf_r>
 801ee6e:	b002      	add	sp, #8
 801ee70:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee74:	b003      	add	sp, #12
 801ee76:	4770      	bx	lr
 801ee78:	2000035c 	.word	0x2000035c

0801ee7c <abort>:
 801ee7c:	b508      	push	{r3, lr}
 801ee7e:	2006      	movs	r0, #6
 801ee80:	f000 fa00 	bl	801f284 <raise>
 801ee84:	2001      	movs	r0, #1
 801ee86:	f7e6 fd9f 	bl	80059c8 <_exit>

0801ee8a <__sfputc_r>:
 801ee8a:	6893      	ldr	r3, [r2, #8]
 801ee8c:	3b01      	subs	r3, #1
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	b410      	push	{r4}
 801ee92:	6093      	str	r3, [r2, #8]
 801ee94:	da08      	bge.n	801eea8 <__sfputc_r+0x1e>
 801ee96:	6994      	ldr	r4, [r2, #24]
 801ee98:	42a3      	cmp	r3, r4
 801ee9a:	db01      	blt.n	801eea0 <__sfputc_r+0x16>
 801ee9c:	290a      	cmp	r1, #10
 801ee9e:	d103      	bne.n	801eea8 <__sfputc_r+0x1e>
 801eea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eea4:	f000 b932 	b.w	801f10c <__swbuf_r>
 801eea8:	6813      	ldr	r3, [r2, #0]
 801eeaa:	1c58      	adds	r0, r3, #1
 801eeac:	6010      	str	r0, [r2, #0]
 801eeae:	7019      	strb	r1, [r3, #0]
 801eeb0:	4608      	mov	r0, r1
 801eeb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eeb6:	4770      	bx	lr

0801eeb8 <__sfputs_r>:
 801eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeba:	4606      	mov	r6, r0
 801eebc:	460f      	mov	r7, r1
 801eebe:	4614      	mov	r4, r2
 801eec0:	18d5      	adds	r5, r2, r3
 801eec2:	42ac      	cmp	r4, r5
 801eec4:	d101      	bne.n	801eeca <__sfputs_r+0x12>
 801eec6:	2000      	movs	r0, #0
 801eec8:	e007      	b.n	801eeda <__sfputs_r+0x22>
 801eeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eece:	463a      	mov	r2, r7
 801eed0:	4630      	mov	r0, r6
 801eed2:	f7ff ffda 	bl	801ee8a <__sfputc_r>
 801eed6:	1c43      	adds	r3, r0, #1
 801eed8:	d1f3      	bne.n	801eec2 <__sfputs_r+0xa>
 801eeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801eedc <_vfiprintf_r>:
 801eedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eee0:	460d      	mov	r5, r1
 801eee2:	b09d      	sub	sp, #116	@ 0x74
 801eee4:	4614      	mov	r4, r2
 801eee6:	4698      	mov	r8, r3
 801eee8:	4606      	mov	r6, r0
 801eeea:	b118      	cbz	r0, 801eef4 <_vfiprintf_r+0x18>
 801eeec:	6a03      	ldr	r3, [r0, #32]
 801eeee:	b90b      	cbnz	r3, 801eef4 <_vfiprintf_r+0x18>
 801eef0:	f7fe facc 	bl	801d48c <__sinit>
 801eef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801eef6:	07d9      	lsls	r1, r3, #31
 801eef8:	d405      	bmi.n	801ef06 <_vfiprintf_r+0x2a>
 801eefa:	89ab      	ldrh	r3, [r5, #12]
 801eefc:	059a      	lsls	r2, r3, #22
 801eefe:	d402      	bmi.n	801ef06 <_vfiprintf_r+0x2a>
 801ef00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ef02:	f7fe fbba 	bl	801d67a <__retarget_lock_acquire_recursive>
 801ef06:	89ab      	ldrh	r3, [r5, #12]
 801ef08:	071b      	lsls	r3, r3, #28
 801ef0a:	d501      	bpl.n	801ef10 <_vfiprintf_r+0x34>
 801ef0c:	692b      	ldr	r3, [r5, #16]
 801ef0e:	b99b      	cbnz	r3, 801ef38 <_vfiprintf_r+0x5c>
 801ef10:	4629      	mov	r1, r5
 801ef12:	4630      	mov	r0, r6
 801ef14:	f000 f938 	bl	801f188 <__swsetup_r>
 801ef18:	b170      	cbz	r0, 801ef38 <_vfiprintf_r+0x5c>
 801ef1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ef1c:	07dc      	lsls	r4, r3, #31
 801ef1e:	d504      	bpl.n	801ef2a <_vfiprintf_r+0x4e>
 801ef20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ef24:	b01d      	add	sp, #116	@ 0x74
 801ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef2a:	89ab      	ldrh	r3, [r5, #12]
 801ef2c:	0598      	lsls	r0, r3, #22
 801ef2e:	d4f7      	bmi.n	801ef20 <_vfiprintf_r+0x44>
 801ef30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ef32:	f7fe fba3 	bl	801d67c <__retarget_lock_release_recursive>
 801ef36:	e7f3      	b.n	801ef20 <_vfiprintf_r+0x44>
 801ef38:	2300      	movs	r3, #0
 801ef3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef3c:	2320      	movs	r3, #32
 801ef3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ef42:	f8cd 800c 	str.w	r8, [sp, #12]
 801ef46:	2330      	movs	r3, #48	@ 0x30
 801ef48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f0f8 <_vfiprintf_r+0x21c>
 801ef4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ef50:	f04f 0901 	mov.w	r9, #1
 801ef54:	4623      	mov	r3, r4
 801ef56:	469a      	mov	sl, r3
 801ef58:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef5c:	b10a      	cbz	r2, 801ef62 <_vfiprintf_r+0x86>
 801ef5e:	2a25      	cmp	r2, #37	@ 0x25
 801ef60:	d1f9      	bne.n	801ef56 <_vfiprintf_r+0x7a>
 801ef62:	ebba 0b04 	subs.w	fp, sl, r4
 801ef66:	d00b      	beq.n	801ef80 <_vfiprintf_r+0xa4>
 801ef68:	465b      	mov	r3, fp
 801ef6a:	4622      	mov	r2, r4
 801ef6c:	4629      	mov	r1, r5
 801ef6e:	4630      	mov	r0, r6
 801ef70:	f7ff ffa2 	bl	801eeb8 <__sfputs_r>
 801ef74:	3001      	adds	r0, #1
 801ef76:	f000 80a7 	beq.w	801f0c8 <_vfiprintf_r+0x1ec>
 801ef7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef7c:	445a      	add	r2, fp
 801ef7e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ef80:	f89a 3000 	ldrb.w	r3, [sl]
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	f000 809f 	beq.w	801f0c8 <_vfiprintf_r+0x1ec>
 801ef8a:	2300      	movs	r3, #0
 801ef8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ef90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef94:	f10a 0a01 	add.w	sl, sl, #1
 801ef98:	9304      	str	r3, [sp, #16]
 801ef9a:	9307      	str	r3, [sp, #28]
 801ef9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801efa0:	931a      	str	r3, [sp, #104]	@ 0x68
 801efa2:	4654      	mov	r4, sl
 801efa4:	2205      	movs	r2, #5
 801efa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efaa:	4853      	ldr	r0, [pc, #332]	@ (801f0f8 <_vfiprintf_r+0x21c>)
 801efac:	f7e1 f918 	bl	80001e0 <memchr>
 801efb0:	9a04      	ldr	r2, [sp, #16]
 801efb2:	b9d8      	cbnz	r0, 801efec <_vfiprintf_r+0x110>
 801efb4:	06d1      	lsls	r1, r2, #27
 801efb6:	bf44      	itt	mi
 801efb8:	2320      	movmi	r3, #32
 801efba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801efbe:	0713      	lsls	r3, r2, #28
 801efc0:	bf44      	itt	mi
 801efc2:	232b      	movmi	r3, #43	@ 0x2b
 801efc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801efc8:	f89a 3000 	ldrb.w	r3, [sl]
 801efcc:	2b2a      	cmp	r3, #42	@ 0x2a
 801efce:	d015      	beq.n	801effc <_vfiprintf_r+0x120>
 801efd0:	9a07      	ldr	r2, [sp, #28]
 801efd2:	4654      	mov	r4, sl
 801efd4:	2000      	movs	r0, #0
 801efd6:	f04f 0c0a 	mov.w	ip, #10
 801efda:	4621      	mov	r1, r4
 801efdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801efe0:	3b30      	subs	r3, #48	@ 0x30
 801efe2:	2b09      	cmp	r3, #9
 801efe4:	d94b      	bls.n	801f07e <_vfiprintf_r+0x1a2>
 801efe6:	b1b0      	cbz	r0, 801f016 <_vfiprintf_r+0x13a>
 801efe8:	9207      	str	r2, [sp, #28]
 801efea:	e014      	b.n	801f016 <_vfiprintf_r+0x13a>
 801efec:	eba0 0308 	sub.w	r3, r0, r8
 801eff0:	fa09 f303 	lsl.w	r3, r9, r3
 801eff4:	4313      	orrs	r3, r2
 801eff6:	9304      	str	r3, [sp, #16]
 801eff8:	46a2      	mov	sl, r4
 801effa:	e7d2      	b.n	801efa2 <_vfiprintf_r+0xc6>
 801effc:	9b03      	ldr	r3, [sp, #12]
 801effe:	1d19      	adds	r1, r3, #4
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	9103      	str	r1, [sp, #12]
 801f004:	2b00      	cmp	r3, #0
 801f006:	bfbb      	ittet	lt
 801f008:	425b      	neglt	r3, r3
 801f00a:	f042 0202 	orrlt.w	r2, r2, #2
 801f00e:	9307      	strge	r3, [sp, #28]
 801f010:	9307      	strlt	r3, [sp, #28]
 801f012:	bfb8      	it	lt
 801f014:	9204      	strlt	r2, [sp, #16]
 801f016:	7823      	ldrb	r3, [r4, #0]
 801f018:	2b2e      	cmp	r3, #46	@ 0x2e
 801f01a:	d10a      	bne.n	801f032 <_vfiprintf_r+0x156>
 801f01c:	7863      	ldrb	r3, [r4, #1]
 801f01e:	2b2a      	cmp	r3, #42	@ 0x2a
 801f020:	d132      	bne.n	801f088 <_vfiprintf_r+0x1ac>
 801f022:	9b03      	ldr	r3, [sp, #12]
 801f024:	1d1a      	adds	r2, r3, #4
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	9203      	str	r2, [sp, #12]
 801f02a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f02e:	3402      	adds	r4, #2
 801f030:	9305      	str	r3, [sp, #20]
 801f032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f108 <_vfiprintf_r+0x22c>
 801f036:	7821      	ldrb	r1, [r4, #0]
 801f038:	2203      	movs	r2, #3
 801f03a:	4650      	mov	r0, sl
 801f03c:	f7e1 f8d0 	bl	80001e0 <memchr>
 801f040:	b138      	cbz	r0, 801f052 <_vfiprintf_r+0x176>
 801f042:	9b04      	ldr	r3, [sp, #16]
 801f044:	eba0 000a 	sub.w	r0, r0, sl
 801f048:	2240      	movs	r2, #64	@ 0x40
 801f04a:	4082      	lsls	r2, r0
 801f04c:	4313      	orrs	r3, r2
 801f04e:	3401      	adds	r4, #1
 801f050:	9304      	str	r3, [sp, #16]
 801f052:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f056:	4829      	ldr	r0, [pc, #164]	@ (801f0fc <_vfiprintf_r+0x220>)
 801f058:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f05c:	2206      	movs	r2, #6
 801f05e:	f7e1 f8bf 	bl	80001e0 <memchr>
 801f062:	2800      	cmp	r0, #0
 801f064:	d03f      	beq.n	801f0e6 <_vfiprintf_r+0x20a>
 801f066:	4b26      	ldr	r3, [pc, #152]	@ (801f100 <_vfiprintf_r+0x224>)
 801f068:	bb1b      	cbnz	r3, 801f0b2 <_vfiprintf_r+0x1d6>
 801f06a:	9b03      	ldr	r3, [sp, #12]
 801f06c:	3307      	adds	r3, #7
 801f06e:	f023 0307 	bic.w	r3, r3, #7
 801f072:	3308      	adds	r3, #8
 801f074:	9303      	str	r3, [sp, #12]
 801f076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f078:	443b      	add	r3, r7
 801f07a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f07c:	e76a      	b.n	801ef54 <_vfiprintf_r+0x78>
 801f07e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f082:	460c      	mov	r4, r1
 801f084:	2001      	movs	r0, #1
 801f086:	e7a8      	b.n	801efda <_vfiprintf_r+0xfe>
 801f088:	2300      	movs	r3, #0
 801f08a:	3401      	adds	r4, #1
 801f08c:	9305      	str	r3, [sp, #20]
 801f08e:	4619      	mov	r1, r3
 801f090:	f04f 0c0a 	mov.w	ip, #10
 801f094:	4620      	mov	r0, r4
 801f096:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f09a:	3a30      	subs	r2, #48	@ 0x30
 801f09c:	2a09      	cmp	r2, #9
 801f09e:	d903      	bls.n	801f0a8 <_vfiprintf_r+0x1cc>
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	d0c6      	beq.n	801f032 <_vfiprintf_r+0x156>
 801f0a4:	9105      	str	r1, [sp, #20]
 801f0a6:	e7c4      	b.n	801f032 <_vfiprintf_r+0x156>
 801f0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 801f0ac:	4604      	mov	r4, r0
 801f0ae:	2301      	movs	r3, #1
 801f0b0:	e7f0      	b.n	801f094 <_vfiprintf_r+0x1b8>
 801f0b2:	ab03      	add	r3, sp, #12
 801f0b4:	9300      	str	r3, [sp, #0]
 801f0b6:	462a      	mov	r2, r5
 801f0b8:	4b12      	ldr	r3, [pc, #72]	@ (801f104 <_vfiprintf_r+0x228>)
 801f0ba:	a904      	add	r1, sp, #16
 801f0bc:	4630      	mov	r0, r6
 801f0be:	f7fd fda1 	bl	801cc04 <_printf_float>
 801f0c2:	4607      	mov	r7, r0
 801f0c4:	1c78      	adds	r0, r7, #1
 801f0c6:	d1d6      	bne.n	801f076 <_vfiprintf_r+0x19a>
 801f0c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f0ca:	07d9      	lsls	r1, r3, #31
 801f0cc:	d405      	bmi.n	801f0da <_vfiprintf_r+0x1fe>
 801f0ce:	89ab      	ldrh	r3, [r5, #12]
 801f0d0:	059a      	lsls	r2, r3, #22
 801f0d2:	d402      	bmi.n	801f0da <_vfiprintf_r+0x1fe>
 801f0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f0d6:	f7fe fad1 	bl	801d67c <__retarget_lock_release_recursive>
 801f0da:	89ab      	ldrh	r3, [r5, #12]
 801f0dc:	065b      	lsls	r3, r3, #25
 801f0de:	f53f af1f 	bmi.w	801ef20 <_vfiprintf_r+0x44>
 801f0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f0e4:	e71e      	b.n	801ef24 <_vfiprintf_r+0x48>
 801f0e6:	ab03      	add	r3, sp, #12
 801f0e8:	9300      	str	r3, [sp, #0]
 801f0ea:	462a      	mov	r2, r5
 801f0ec:	4b05      	ldr	r3, [pc, #20]	@ (801f104 <_vfiprintf_r+0x228>)
 801f0ee:	a904      	add	r1, sp, #16
 801f0f0:	4630      	mov	r0, r6
 801f0f2:	f7fe f81f 	bl	801d134 <_printf_i>
 801f0f6:	e7e4      	b.n	801f0c2 <_vfiprintf_r+0x1e6>
 801f0f8:	08023cdf 	.word	0x08023cdf
 801f0fc:	08023ce9 	.word	0x08023ce9
 801f100:	0801cc05 	.word	0x0801cc05
 801f104:	0801eeb9 	.word	0x0801eeb9
 801f108:	08023ce5 	.word	0x08023ce5

0801f10c <__swbuf_r>:
 801f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f10e:	460e      	mov	r6, r1
 801f110:	4614      	mov	r4, r2
 801f112:	4605      	mov	r5, r0
 801f114:	b118      	cbz	r0, 801f11e <__swbuf_r+0x12>
 801f116:	6a03      	ldr	r3, [r0, #32]
 801f118:	b90b      	cbnz	r3, 801f11e <__swbuf_r+0x12>
 801f11a:	f7fe f9b7 	bl	801d48c <__sinit>
 801f11e:	69a3      	ldr	r3, [r4, #24]
 801f120:	60a3      	str	r3, [r4, #8]
 801f122:	89a3      	ldrh	r3, [r4, #12]
 801f124:	071a      	lsls	r2, r3, #28
 801f126:	d501      	bpl.n	801f12c <__swbuf_r+0x20>
 801f128:	6923      	ldr	r3, [r4, #16]
 801f12a:	b943      	cbnz	r3, 801f13e <__swbuf_r+0x32>
 801f12c:	4621      	mov	r1, r4
 801f12e:	4628      	mov	r0, r5
 801f130:	f000 f82a 	bl	801f188 <__swsetup_r>
 801f134:	b118      	cbz	r0, 801f13e <__swbuf_r+0x32>
 801f136:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f13a:	4638      	mov	r0, r7
 801f13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f13e:	6823      	ldr	r3, [r4, #0]
 801f140:	6922      	ldr	r2, [r4, #16]
 801f142:	1a98      	subs	r0, r3, r2
 801f144:	6963      	ldr	r3, [r4, #20]
 801f146:	b2f6      	uxtb	r6, r6
 801f148:	4283      	cmp	r3, r0
 801f14a:	4637      	mov	r7, r6
 801f14c:	dc05      	bgt.n	801f15a <__swbuf_r+0x4e>
 801f14e:	4621      	mov	r1, r4
 801f150:	4628      	mov	r0, r5
 801f152:	f7ff fdf7 	bl	801ed44 <_fflush_r>
 801f156:	2800      	cmp	r0, #0
 801f158:	d1ed      	bne.n	801f136 <__swbuf_r+0x2a>
 801f15a:	68a3      	ldr	r3, [r4, #8]
 801f15c:	3b01      	subs	r3, #1
 801f15e:	60a3      	str	r3, [r4, #8]
 801f160:	6823      	ldr	r3, [r4, #0]
 801f162:	1c5a      	adds	r2, r3, #1
 801f164:	6022      	str	r2, [r4, #0]
 801f166:	701e      	strb	r6, [r3, #0]
 801f168:	6962      	ldr	r2, [r4, #20]
 801f16a:	1c43      	adds	r3, r0, #1
 801f16c:	429a      	cmp	r2, r3
 801f16e:	d004      	beq.n	801f17a <__swbuf_r+0x6e>
 801f170:	89a3      	ldrh	r3, [r4, #12]
 801f172:	07db      	lsls	r3, r3, #31
 801f174:	d5e1      	bpl.n	801f13a <__swbuf_r+0x2e>
 801f176:	2e0a      	cmp	r6, #10
 801f178:	d1df      	bne.n	801f13a <__swbuf_r+0x2e>
 801f17a:	4621      	mov	r1, r4
 801f17c:	4628      	mov	r0, r5
 801f17e:	f7ff fde1 	bl	801ed44 <_fflush_r>
 801f182:	2800      	cmp	r0, #0
 801f184:	d0d9      	beq.n	801f13a <__swbuf_r+0x2e>
 801f186:	e7d6      	b.n	801f136 <__swbuf_r+0x2a>

0801f188 <__swsetup_r>:
 801f188:	b538      	push	{r3, r4, r5, lr}
 801f18a:	4b29      	ldr	r3, [pc, #164]	@ (801f230 <__swsetup_r+0xa8>)
 801f18c:	4605      	mov	r5, r0
 801f18e:	6818      	ldr	r0, [r3, #0]
 801f190:	460c      	mov	r4, r1
 801f192:	b118      	cbz	r0, 801f19c <__swsetup_r+0x14>
 801f194:	6a03      	ldr	r3, [r0, #32]
 801f196:	b90b      	cbnz	r3, 801f19c <__swsetup_r+0x14>
 801f198:	f7fe f978 	bl	801d48c <__sinit>
 801f19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1a0:	0719      	lsls	r1, r3, #28
 801f1a2:	d422      	bmi.n	801f1ea <__swsetup_r+0x62>
 801f1a4:	06da      	lsls	r2, r3, #27
 801f1a6:	d407      	bmi.n	801f1b8 <__swsetup_r+0x30>
 801f1a8:	2209      	movs	r2, #9
 801f1aa:	602a      	str	r2, [r5, #0]
 801f1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f1b0:	81a3      	strh	r3, [r4, #12]
 801f1b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f1b6:	e033      	b.n	801f220 <__swsetup_r+0x98>
 801f1b8:	0758      	lsls	r0, r3, #29
 801f1ba:	d512      	bpl.n	801f1e2 <__swsetup_r+0x5a>
 801f1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f1be:	b141      	cbz	r1, 801f1d2 <__swsetup_r+0x4a>
 801f1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f1c4:	4299      	cmp	r1, r3
 801f1c6:	d002      	beq.n	801f1ce <__swsetup_r+0x46>
 801f1c8:	4628      	mov	r0, r5
 801f1ca:	f7ff f8b5 	bl	801e338 <_free_r>
 801f1ce:	2300      	movs	r3, #0
 801f1d0:	6363      	str	r3, [r4, #52]	@ 0x34
 801f1d2:	89a3      	ldrh	r3, [r4, #12]
 801f1d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f1d8:	81a3      	strh	r3, [r4, #12]
 801f1da:	2300      	movs	r3, #0
 801f1dc:	6063      	str	r3, [r4, #4]
 801f1de:	6923      	ldr	r3, [r4, #16]
 801f1e0:	6023      	str	r3, [r4, #0]
 801f1e2:	89a3      	ldrh	r3, [r4, #12]
 801f1e4:	f043 0308 	orr.w	r3, r3, #8
 801f1e8:	81a3      	strh	r3, [r4, #12]
 801f1ea:	6923      	ldr	r3, [r4, #16]
 801f1ec:	b94b      	cbnz	r3, 801f202 <__swsetup_r+0x7a>
 801f1ee:	89a3      	ldrh	r3, [r4, #12]
 801f1f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f1f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f1f8:	d003      	beq.n	801f202 <__swsetup_r+0x7a>
 801f1fa:	4621      	mov	r1, r4
 801f1fc:	4628      	mov	r0, r5
 801f1fe:	f000 f883 	bl	801f308 <__smakebuf_r>
 801f202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f206:	f013 0201 	ands.w	r2, r3, #1
 801f20a:	d00a      	beq.n	801f222 <__swsetup_r+0x9a>
 801f20c:	2200      	movs	r2, #0
 801f20e:	60a2      	str	r2, [r4, #8]
 801f210:	6962      	ldr	r2, [r4, #20]
 801f212:	4252      	negs	r2, r2
 801f214:	61a2      	str	r2, [r4, #24]
 801f216:	6922      	ldr	r2, [r4, #16]
 801f218:	b942      	cbnz	r2, 801f22c <__swsetup_r+0xa4>
 801f21a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f21e:	d1c5      	bne.n	801f1ac <__swsetup_r+0x24>
 801f220:	bd38      	pop	{r3, r4, r5, pc}
 801f222:	0799      	lsls	r1, r3, #30
 801f224:	bf58      	it	pl
 801f226:	6962      	ldrpl	r2, [r4, #20]
 801f228:	60a2      	str	r2, [r4, #8]
 801f22a:	e7f4      	b.n	801f216 <__swsetup_r+0x8e>
 801f22c:	2000      	movs	r0, #0
 801f22e:	e7f7      	b.n	801f220 <__swsetup_r+0x98>
 801f230:	2000035c 	.word	0x2000035c

0801f234 <_raise_r>:
 801f234:	291f      	cmp	r1, #31
 801f236:	b538      	push	{r3, r4, r5, lr}
 801f238:	4605      	mov	r5, r0
 801f23a:	460c      	mov	r4, r1
 801f23c:	d904      	bls.n	801f248 <_raise_r+0x14>
 801f23e:	2316      	movs	r3, #22
 801f240:	6003      	str	r3, [r0, #0]
 801f242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f246:	bd38      	pop	{r3, r4, r5, pc}
 801f248:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f24a:	b112      	cbz	r2, 801f252 <_raise_r+0x1e>
 801f24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f250:	b94b      	cbnz	r3, 801f266 <_raise_r+0x32>
 801f252:	4628      	mov	r0, r5
 801f254:	f000 f830 	bl	801f2b8 <_getpid_r>
 801f258:	4622      	mov	r2, r4
 801f25a:	4601      	mov	r1, r0
 801f25c:	4628      	mov	r0, r5
 801f25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f262:	f000 b817 	b.w	801f294 <_kill_r>
 801f266:	2b01      	cmp	r3, #1
 801f268:	d00a      	beq.n	801f280 <_raise_r+0x4c>
 801f26a:	1c59      	adds	r1, r3, #1
 801f26c:	d103      	bne.n	801f276 <_raise_r+0x42>
 801f26e:	2316      	movs	r3, #22
 801f270:	6003      	str	r3, [r0, #0]
 801f272:	2001      	movs	r0, #1
 801f274:	e7e7      	b.n	801f246 <_raise_r+0x12>
 801f276:	2100      	movs	r1, #0
 801f278:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f27c:	4620      	mov	r0, r4
 801f27e:	4798      	blx	r3
 801f280:	2000      	movs	r0, #0
 801f282:	e7e0      	b.n	801f246 <_raise_r+0x12>

0801f284 <raise>:
 801f284:	4b02      	ldr	r3, [pc, #8]	@ (801f290 <raise+0xc>)
 801f286:	4601      	mov	r1, r0
 801f288:	6818      	ldr	r0, [r3, #0]
 801f28a:	f7ff bfd3 	b.w	801f234 <_raise_r>
 801f28e:	bf00      	nop
 801f290:	2000035c 	.word	0x2000035c

0801f294 <_kill_r>:
 801f294:	b538      	push	{r3, r4, r5, lr}
 801f296:	4d07      	ldr	r5, [pc, #28]	@ (801f2b4 <_kill_r+0x20>)
 801f298:	2300      	movs	r3, #0
 801f29a:	4604      	mov	r4, r0
 801f29c:	4608      	mov	r0, r1
 801f29e:	4611      	mov	r1, r2
 801f2a0:	602b      	str	r3, [r5, #0]
 801f2a2:	f7e6 fb81 	bl	80059a8 <_kill>
 801f2a6:	1c43      	adds	r3, r0, #1
 801f2a8:	d102      	bne.n	801f2b0 <_kill_r+0x1c>
 801f2aa:	682b      	ldr	r3, [r5, #0]
 801f2ac:	b103      	cbz	r3, 801f2b0 <_kill_r+0x1c>
 801f2ae:	6023      	str	r3, [r4, #0]
 801f2b0:	bd38      	pop	{r3, r4, r5, pc}
 801f2b2:	bf00      	nop
 801f2b4:	20002448 	.word	0x20002448

0801f2b8 <_getpid_r>:
 801f2b8:	f7e6 bb6e 	b.w	8005998 <_getpid>

0801f2bc <__swhatbuf_r>:
 801f2bc:	b570      	push	{r4, r5, r6, lr}
 801f2be:	460c      	mov	r4, r1
 801f2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2c4:	2900      	cmp	r1, #0
 801f2c6:	b096      	sub	sp, #88	@ 0x58
 801f2c8:	4615      	mov	r5, r2
 801f2ca:	461e      	mov	r6, r3
 801f2cc:	da0d      	bge.n	801f2ea <__swhatbuf_r+0x2e>
 801f2ce:	89a3      	ldrh	r3, [r4, #12]
 801f2d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f2d4:	f04f 0100 	mov.w	r1, #0
 801f2d8:	bf14      	ite	ne
 801f2da:	2340      	movne	r3, #64	@ 0x40
 801f2dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f2e0:	2000      	movs	r0, #0
 801f2e2:	6031      	str	r1, [r6, #0]
 801f2e4:	602b      	str	r3, [r5, #0]
 801f2e6:	b016      	add	sp, #88	@ 0x58
 801f2e8:	bd70      	pop	{r4, r5, r6, pc}
 801f2ea:	466a      	mov	r2, sp
 801f2ec:	f000 f848 	bl	801f380 <_fstat_r>
 801f2f0:	2800      	cmp	r0, #0
 801f2f2:	dbec      	blt.n	801f2ce <__swhatbuf_r+0x12>
 801f2f4:	9901      	ldr	r1, [sp, #4]
 801f2f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f2fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f2fe:	4259      	negs	r1, r3
 801f300:	4159      	adcs	r1, r3
 801f302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f306:	e7eb      	b.n	801f2e0 <__swhatbuf_r+0x24>

0801f308 <__smakebuf_r>:
 801f308:	898b      	ldrh	r3, [r1, #12]
 801f30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f30c:	079d      	lsls	r5, r3, #30
 801f30e:	4606      	mov	r6, r0
 801f310:	460c      	mov	r4, r1
 801f312:	d507      	bpl.n	801f324 <__smakebuf_r+0x1c>
 801f314:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f318:	6023      	str	r3, [r4, #0]
 801f31a:	6123      	str	r3, [r4, #16]
 801f31c:	2301      	movs	r3, #1
 801f31e:	6163      	str	r3, [r4, #20]
 801f320:	b003      	add	sp, #12
 801f322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f324:	ab01      	add	r3, sp, #4
 801f326:	466a      	mov	r2, sp
 801f328:	f7ff ffc8 	bl	801f2bc <__swhatbuf_r>
 801f32c:	9f00      	ldr	r7, [sp, #0]
 801f32e:	4605      	mov	r5, r0
 801f330:	4639      	mov	r1, r7
 801f332:	4630      	mov	r0, r6
 801f334:	f7ff f874 	bl	801e420 <_malloc_r>
 801f338:	b948      	cbnz	r0, 801f34e <__smakebuf_r+0x46>
 801f33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f33e:	059a      	lsls	r2, r3, #22
 801f340:	d4ee      	bmi.n	801f320 <__smakebuf_r+0x18>
 801f342:	f023 0303 	bic.w	r3, r3, #3
 801f346:	f043 0302 	orr.w	r3, r3, #2
 801f34a:	81a3      	strh	r3, [r4, #12]
 801f34c:	e7e2      	b.n	801f314 <__smakebuf_r+0xc>
 801f34e:	89a3      	ldrh	r3, [r4, #12]
 801f350:	6020      	str	r0, [r4, #0]
 801f352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f356:	81a3      	strh	r3, [r4, #12]
 801f358:	9b01      	ldr	r3, [sp, #4]
 801f35a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f35e:	b15b      	cbz	r3, 801f378 <__smakebuf_r+0x70>
 801f360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f364:	4630      	mov	r0, r6
 801f366:	f000 f81d 	bl	801f3a4 <_isatty_r>
 801f36a:	b128      	cbz	r0, 801f378 <__smakebuf_r+0x70>
 801f36c:	89a3      	ldrh	r3, [r4, #12]
 801f36e:	f023 0303 	bic.w	r3, r3, #3
 801f372:	f043 0301 	orr.w	r3, r3, #1
 801f376:	81a3      	strh	r3, [r4, #12]
 801f378:	89a3      	ldrh	r3, [r4, #12]
 801f37a:	431d      	orrs	r5, r3
 801f37c:	81a5      	strh	r5, [r4, #12]
 801f37e:	e7cf      	b.n	801f320 <__smakebuf_r+0x18>

0801f380 <_fstat_r>:
 801f380:	b538      	push	{r3, r4, r5, lr}
 801f382:	4d07      	ldr	r5, [pc, #28]	@ (801f3a0 <_fstat_r+0x20>)
 801f384:	2300      	movs	r3, #0
 801f386:	4604      	mov	r4, r0
 801f388:	4608      	mov	r0, r1
 801f38a:	4611      	mov	r1, r2
 801f38c:	602b      	str	r3, [r5, #0]
 801f38e:	f7e6 fb6b 	bl	8005a68 <_fstat>
 801f392:	1c43      	adds	r3, r0, #1
 801f394:	d102      	bne.n	801f39c <_fstat_r+0x1c>
 801f396:	682b      	ldr	r3, [r5, #0]
 801f398:	b103      	cbz	r3, 801f39c <_fstat_r+0x1c>
 801f39a:	6023      	str	r3, [r4, #0]
 801f39c:	bd38      	pop	{r3, r4, r5, pc}
 801f39e:	bf00      	nop
 801f3a0:	20002448 	.word	0x20002448

0801f3a4 <_isatty_r>:
 801f3a4:	b538      	push	{r3, r4, r5, lr}
 801f3a6:	4d06      	ldr	r5, [pc, #24]	@ (801f3c0 <_isatty_r+0x1c>)
 801f3a8:	2300      	movs	r3, #0
 801f3aa:	4604      	mov	r4, r0
 801f3ac:	4608      	mov	r0, r1
 801f3ae:	602b      	str	r3, [r5, #0]
 801f3b0:	f7e6 fb6a 	bl	8005a88 <_isatty>
 801f3b4:	1c43      	adds	r3, r0, #1
 801f3b6:	d102      	bne.n	801f3be <_isatty_r+0x1a>
 801f3b8:	682b      	ldr	r3, [r5, #0]
 801f3ba:	b103      	cbz	r3, 801f3be <_isatty_r+0x1a>
 801f3bc:	6023      	str	r3, [r4, #0]
 801f3be:	bd38      	pop	{r3, r4, r5, pc}
 801f3c0:	20002448 	.word	0x20002448

0801f3c4 <acos>:
 801f3c4:	b538      	push	{r3, r4, r5, lr}
 801f3c6:	ed2d 8b02 	vpush	{d8}
 801f3ca:	ec55 4b10 	vmov	r4, r5, d0
 801f3ce:	f001 f843 	bl	8020458 <__ieee754_acos>
 801f3d2:	4622      	mov	r2, r4
 801f3d4:	462b      	mov	r3, r5
 801f3d6:	4620      	mov	r0, r4
 801f3d8:	4629      	mov	r1, r5
 801f3da:	eeb0 8a40 	vmov.f32	s16, s0
 801f3de:	eef0 8a60 	vmov.f32	s17, s1
 801f3e2:	f7e1 fbab 	bl	8000b3c <__aeabi_dcmpun>
 801f3e6:	b9a8      	cbnz	r0, 801f414 <acos+0x50>
 801f3e8:	ec45 4b10 	vmov	d0, r4, r5
 801f3ec:	f000 f944 	bl	801f678 <fabs>
 801f3f0:	4b0c      	ldr	r3, [pc, #48]	@ (801f424 <acos+0x60>)
 801f3f2:	ec51 0b10 	vmov	r0, r1, d0
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	f7e1 fb96 	bl	8000b28 <__aeabi_dcmpgt>
 801f3fc:	b150      	cbz	r0, 801f414 <acos+0x50>
 801f3fe:	f7fe f911 	bl	801d624 <__errno>
 801f402:	ecbd 8b02 	vpop	{d8}
 801f406:	2321      	movs	r3, #33	@ 0x21
 801f408:	6003      	str	r3, [r0, #0]
 801f40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f40e:	4806      	ldr	r0, [pc, #24]	@ (801f428 <acos+0x64>)
 801f410:	f000 baba 	b.w	801f988 <nan>
 801f414:	eeb0 0a48 	vmov.f32	s0, s16
 801f418:	eef0 0a68 	vmov.f32	s1, s17
 801f41c:	ecbd 8b02 	vpop	{d8}
 801f420:	bd38      	pop	{r3, r4, r5, pc}
 801f422:	bf00      	nop
 801f424:	3ff00000 	.word	0x3ff00000
 801f428:	08023bdd 	.word	0x08023bdd

0801f42c <asin>:
 801f42c:	b538      	push	{r3, r4, r5, lr}
 801f42e:	ed2d 8b02 	vpush	{d8}
 801f432:	ec55 4b10 	vmov	r4, r5, d0
 801f436:	f001 fa6b 	bl	8020910 <__ieee754_asin>
 801f43a:	4622      	mov	r2, r4
 801f43c:	462b      	mov	r3, r5
 801f43e:	4620      	mov	r0, r4
 801f440:	4629      	mov	r1, r5
 801f442:	eeb0 8a40 	vmov.f32	s16, s0
 801f446:	eef0 8a60 	vmov.f32	s17, s1
 801f44a:	f7e1 fb77 	bl	8000b3c <__aeabi_dcmpun>
 801f44e:	b9a8      	cbnz	r0, 801f47c <asin+0x50>
 801f450:	ec45 4b10 	vmov	d0, r4, r5
 801f454:	f000 f910 	bl	801f678 <fabs>
 801f458:	4b0c      	ldr	r3, [pc, #48]	@ (801f48c <asin+0x60>)
 801f45a:	ec51 0b10 	vmov	r0, r1, d0
 801f45e:	2200      	movs	r2, #0
 801f460:	f7e1 fb62 	bl	8000b28 <__aeabi_dcmpgt>
 801f464:	b150      	cbz	r0, 801f47c <asin+0x50>
 801f466:	f7fe f8dd 	bl	801d624 <__errno>
 801f46a:	ecbd 8b02 	vpop	{d8}
 801f46e:	2321      	movs	r3, #33	@ 0x21
 801f470:	6003      	str	r3, [r0, #0]
 801f472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f476:	4806      	ldr	r0, [pc, #24]	@ (801f490 <asin+0x64>)
 801f478:	f000 ba86 	b.w	801f988 <nan>
 801f47c:	eeb0 0a48 	vmov.f32	s0, s16
 801f480:	eef0 0a68 	vmov.f32	s1, s17
 801f484:	ecbd 8b02 	vpop	{d8}
 801f488:	bd38      	pop	{r3, r4, r5, pc}
 801f48a:	bf00      	nop
 801f48c:	3ff00000 	.word	0x3ff00000
 801f490:	08023bdd 	.word	0x08023bdd

0801f494 <atan2>:
 801f494:	f001 bc40 	b.w	8020d18 <__ieee754_atan2>

0801f498 <pow>:
 801f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f49a:	ed2d 8b02 	vpush	{d8}
 801f49e:	eeb0 8a40 	vmov.f32	s16, s0
 801f4a2:	eef0 8a60 	vmov.f32	s17, s1
 801f4a6:	ec55 4b11 	vmov	r4, r5, d1
 801f4aa:	f001 fcfd 	bl	8020ea8 <__ieee754_pow>
 801f4ae:	4622      	mov	r2, r4
 801f4b0:	462b      	mov	r3, r5
 801f4b2:	4620      	mov	r0, r4
 801f4b4:	4629      	mov	r1, r5
 801f4b6:	ec57 6b10 	vmov	r6, r7, d0
 801f4ba:	f7e1 fb3f 	bl	8000b3c <__aeabi_dcmpun>
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	d13b      	bne.n	801f53a <pow+0xa2>
 801f4c2:	ec51 0b18 	vmov	r0, r1, d8
 801f4c6:	2200      	movs	r2, #0
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	f7e1 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 801f4ce:	b1b8      	cbz	r0, 801f500 <pow+0x68>
 801f4d0:	2200      	movs	r2, #0
 801f4d2:	2300      	movs	r3, #0
 801f4d4:	4620      	mov	r0, r4
 801f4d6:	4629      	mov	r1, r5
 801f4d8:	f7e1 fafe 	bl	8000ad8 <__aeabi_dcmpeq>
 801f4dc:	2800      	cmp	r0, #0
 801f4de:	d146      	bne.n	801f56e <pow+0xd6>
 801f4e0:	ec45 4b10 	vmov	d0, r4, r5
 801f4e4:	f000 fa44 	bl	801f970 <finite>
 801f4e8:	b338      	cbz	r0, 801f53a <pow+0xa2>
 801f4ea:	2200      	movs	r2, #0
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	4620      	mov	r0, r4
 801f4f0:	4629      	mov	r1, r5
 801f4f2:	f7e1 fafb 	bl	8000aec <__aeabi_dcmplt>
 801f4f6:	b300      	cbz	r0, 801f53a <pow+0xa2>
 801f4f8:	f7fe f894 	bl	801d624 <__errno>
 801f4fc:	2322      	movs	r3, #34	@ 0x22
 801f4fe:	e01b      	b.n	801f538 <pow+0xa0>
 801f500:	ec47 6b10 	vmov	d0, r6, r7
 801f504:	f000 fa34 	bl	801f970 <finite>
 801f508:	b9e0      	cbnz	r0, 801f544 <pow+0xac>
 801f50a:	eeb0 0a48 	vmov.f32	s0, s16
 801f50e:	eef0 0a68 	vmov.f32	s1, s17
 801f512:	f000 fa2d 	bl	801f970 <finite>
 801f516:	b1a8      	cbz	r0, 801f544 <pow+0xac>
 801f518:	ec45 4b10 	vmov	d0, r4, r5
 801f51c:	f000 fa28 	bl	801f970 <finite>
 801f520:	b180      	cbz	r0, 801f544 <pow+0xac>
 801f522:	4632      	mov	r2, r6
 801f524:	463b      	mov	r3, r7
 801f526:	4630      	mov	r0, r6
 801f528:	4639      	mov	r1, r7
 801f52a:	f7e1 fb07 	bl	8000b3c <__aeabi_dcmpun>
 801f52e:	2800      	cmp	r0, #0
 801f530:	d0e2      	beq.n	801f4f8 <pow+0x60>
 801f532:	f7fe f877 	bl	801d624 <__errno>
 801f536:	2321      	movs	r3, #33	@ 0x21
 801f538:	6003      	str	r3, [r0, #0]
 801f53a:	ecbd 8b02 	vpop	{d8}
 801f53e:	ec47 6b10 	vmov	d0, r6, r7
 801f542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f544:	2200      	movs	r2, #0
 801f546:	2300      	movs	r3, #0
 801f548:	4630      	mov	r0, r6
 801f54a:	4639      	mov	r1, r7
 801f54c:	f7e1 fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 801f550:	2800      	cmp	r0, #0
 801f552:	d0f2      	beq.n	801f53a <pow+0xa2>
 801f554:	eeb0 0a48 	vmov.f32	s0, s16
 801f558:	eef0 0a68 	vmov.f32	s1, s17
 801f55c:	f000 fa08 	bl	801f970 <finite>
 801f560:	2800      	cmp	r0, #0
 801f562:	d0ea      	beq.n	801f53a <pow+0xa2>
 801f564:	ec45 4b10 	vmov	d0, r4, r5
 801f568:	f000 fa02 	bl	801f970 <finite>
 801f56c:	e7c3      	b.n	801f4f6 <pow+0x5e>
 801f56e:	4f01      	ldr	r7, [pc, #4]	@ (801f574 <pow+0xdc>)
 801f570:	2600      	movs	r6, #0
 801f572:	e7e2      	b.n	801f53a <pow+0xa2>
 801f574:	3ff00000 	.word	0x3ff00000

0801f578 <sqrt>:
 801f578:	b538      	push	{r3, r4, r5, lr}
 801f57a:	ed2d 8b02 	vpush	{d8}
 801f57e:	ec55 4b10 	vmov	r4, r5, d0
 801f582:	f000 fa0f 	bl	801f9a4 <__ieee754_sqrt>
 801f586:	4622      	mov	r2, r4
 801f588:	462b      	mov	r3, r5
 801f58a:	4620      	mov	r0, r4
 801f58c:	4629      	mov	r1, r5
 801f58e:	eeb0 8a40 	vmov.f32	s16, s0
 801f592:	eef0 8a60 	vmov.f32	s17, s1
 801f596:	f7e1 fad1 	bl	8000b3c <__aeabi_dcmpun>
 801f59a:	b990      	cbnz	r0, 801f5c2 <sqrt+0x4a>
 801f59c:	2200      	movs	r2, #0
 801f59e:	2300      	movs	r3, #0
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	4629      	mov	r1, r5
 801f5a4:	f7e1 faa2 	bl	8000aec <__aeabi_dcmplt>
 801f5a8:	b158      	cbz	r0, 801f5c2 <sqrt+0x4a>
 801f5aa:	f7fe f83b 	bl	801d624 <__errno>
 801f5ae:	2321      	movs	r3, #33	@ 0x21
 801f5b0:	6003      	str	r3, [r0, #0]
 801f5b2:	2200      	movs	r2, #0
 801f5b4:	2300      	movs	r3, #0
 801f5b6:	4610      	mov	r0, r2
 801f5b8:	4619      	mov	r1, r3
 801f5ba:	f7e1 f94f 	bl	800085c <__aeabi_ddiv>
 801f5be:	ec41 0b18 	vmov	d8, r0, r1
 801f5c2:	eeb0 0a48 	vmov.f32	s0, s16
 801f5c6:	eef0 0a68 	vmov.f32	s1, s17
 801f5ca:	ecbd 8b02 	vpop	{d8}
 801f5ce:	bd38      	pop	{r3, r4, r5, pc}

0801f5d0 <cos>:
 801f5d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f5d2:	ec53 2b10 	vmov	r2, r3, d0
 801f5d6:	4826      	ldr	r0, [pc, #152]	@ (801f670 <cos+0xa0>)
 801f5d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f5dc:	4281      	cmp	r1, r0
 801f5de:	d806      	bhi.n	801f5ee <cos+0x1e>
 801f5e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f668 <cos+0x98>
 801f5e4:	b005      	add	sp, #20
 801f5e6:	f85d eb04 	ldr.w	lr, [sp], #4
 801f5ea:	f000 bbad 	b.w	801fd48 <__kernel_cos>
 801f5ee:	4821      	ldr	r0, [pc, #132]	@ (801f674 <cos+0xa4>)
 801f5f0:	4281      	cmp	r1, r0
 801f5f2:	d908      	bls.n	801f606 <cos+0x36>
 801f5f4:	4610      	mov	r0, r2
 801f5f6:	4619      	mov	r1, r3
 801f5f8:	f7e0 fe4e 	bl	8000298 <__aeabi_dsub>
 801f5fc:	ec41 0b10 	vmov	d0, r0, r1
 801f600:	b005      	add	sp, #20
 801f602:	f85d fb04 	ldr.w	pc, [sp], #4
 801f606:	4668      	mov	r0, sp
 801f608:	f002 f992 	bl	8021930 <__ieee754_rem_pio2>
 801f60c:	f000 0003 	and.w	r0, r0, #3
 801f610:	2801      	cmp	r0, #1
 801f612:	d00b      	beq.n	801f62c <cos+0x5c>
 801f614:	2802      	cmp	r0, #2
 801f616:	d015      	beq.n	801f644 <cos+0x74>
 801f618:	b9d8      	cbnz	r0, 801f652 <cos+0x82>
 801f61a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f61e:	ed9d 0b00 	vldr	d0, [sp]
 801f622:	f000 fb91 	bl	801fd48 <__kernel_cos>
 801f626:	ec51 0b10 	vmov	r0, r1, d0
 801f62a:	e7e7      	b.n	801f5fc <cos+0x2c>
 801f62c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f630:	ed9d 0b00 	vldr	d0, [sp]
 801f634:	f000 fc50 	bl	801fed8 <__kernel_sin>
 801f638:	ec53 2b10 	vmov	r2, r3, d0
 801f63c:	4610      	mov	r0, r2
 801f63e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f642:	e7db      	b.n	801f5fc <cos+0x2c>
 801f644:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f648:	ed9d 0b00 	vldr	d0, [sp]
 801f64c:	f000 fb7c 	bl	801fd48 <__kernel_cos>
 801f650:	e7f2      	b.n	801f638 <cos+0x68>
 801f652:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f656:	ed9d 0b00 	vldr	d0, [sp]
 801f65a:	2001      	movs	r0, #1
 801f65c:	f000 fc3c 	bl	801fed8 <__kernel_sin>
 801f660:	e7e1      	b.n	801f626 <cos+0x56>
 801f662:	bf00      	nop
 801f664:	f3af 8000 	nop.w
	...
 801f670:	3fe921fb 	.word	0x3fe921fb
 801f674:	7fefffff 	.word	0x7fefffff

0801f678 <fabs>:
 801f678:	ec51 0b10 	vmov	r0, r1, d0
 801f67c:	4602      	mov	r2, r0
 801f67e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f682:	ec43 2b10 	vmov	d0, r2, r3
 801f686:	4770      	bx	lr

0801f688 <sin>:
 801f688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f68a:	ec53 2b10 	vmov	r2, r3, d0
 801f68e:	4826      	ldr	r0, [pc, #152]	@ (801f728 <sin+0xa0>)
 801f690:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f694:	4281      	cmp	r1, r0
 801f696:	d807      	bhi.n	801f6a8 <sin+0x20>
 801f698:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f720 <sin+0x98>
 801f69c:	2000      	movs	r0, #0
 801f69e:	b005      	add	sp, #20
 801f6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f6a4:	f000 bc18 	b.w	801fed8 <__kernel_sin>
 801f6a8:	4820      	ldr	r0, [pc, #128]	@ (801f72c <sin+0xa4>)
 801f6aa:	4281      	cmp	r1, r0
 801f6ac:	d908      	bls.n	801f6c0 <sin+0x38>
 801f6ae:	4610      	mov	r0, r2
 801f6b0:	4619      	mov	r1, r3
 801f6b2:	f7e0 fdf1 	bl	8000298 <__aeabi_dsub>
 801f6b6:	ec41 0b10 	vmov	d0, r0, r1
 801f6ba:	b005      	add	sp, #20
 801f6bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801f6c0:	4668      	mov	r0, sp
 801f6c2:	f002 f935 	bl	8021930 <__ieee754_rem_pio2>
 801f6c6:	f000 0003 	and.w	r0, r0, #3
 801f6ca:	2801      	cmp	r0, #1
 801f6cc:	d00c      	beq.n	801f6e8 <sin+0x60>
 801f6ce:	2802      	cmp	r0, #2
 801f6d0:	d011      	beq.n	801f6f6 <sin+0x6e>
 801f6d2:	b9e8      	cbnz	r0, 801f710 <sin+0x88>
 801f6d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f6d8:	ed9d 0b00 	vldr	d0, [sp]
 801f6dc:	2001      	movs	r0, #1
 801f6de:	f000 fbfb 	bl	801fed8 <__kernel_sin>
 801f6e2:	ec51 0b10 	vmov	r0, r1, d0
 801f6e6:	e7e6      	b.n	801f6b6 <sin+0x2e>
 801f6e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f6ec:	ed9d 0b00 	vldr	d0, [sp]
 801f6f0:	f000 fb2a 	bl	801fd48 <__kernel_cos>
 801f6f4:	e7f5      	b.n	801f6e2 <sin+0x5a>
 801f6f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f6fa:	ed9d 0b00 	vldr	d0, [sp]
 801f6fe:	2001      	movs	r0, #1
 801f700:	f000 fbea 	bl	801fed8 <__kernel_sin>
 801f704:	ec53 2b10 	vmov	r2, r3, d0
 801f708:	4610      	mov	r0, r2
 801f70a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f70e:	e7d2      	b.n	801f6b6 <sin+0x2e>
 801f710:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f714:	ed9d 0b00 	vldr	d0, [sp]
 801f718:	f000 fb16 	bl	801fd48 <__kernel_cos>
 801f71c:	e7f2      	b.n	801f704 <sin+0x7c>
 801f71e:	bf00      	nop
	...
 801f728:	3fe921fb 	.word	0x3fe921fb
 801f72c:	7fefffff 	.word	0x7fefffff

0801f730 <tan>:
 801f730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f732:	ec53 2b10 	vmov	r2, r3, d0
 801f736:	4816      	ldr	r0, [pc, #88]	@ (801f790 <tan+0x60>)
 801f738:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f73c:	4281      	cmp	r1, r0
 801f73e:	d807      	bhi.n	801f750 <tan+0x20>
 801f740:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 801f788 <tan+0x58>
 801f744:	2001      	movs	r0, #1
 801f746:	b005      	add	sp, #20
 801f748:	f85d eb04 	ldr.w	lr, [sp], #4
 801f74c:	f000 bc80 	b.w	8020050 <__kernel_tan>
 801f750:	4810      	ldr	r0, [pc, #64]	@ (801f794 <tan+0x64>)
 801f752:	4281      	cmp	r1, r0
 801f754:	d908      	bls.n	801f768 <tan+0x38>
 801f756:	4610      	mov	r0, r2
 801f758:	4619      	mov	r1, r3
 801f75a:	f7e0 fd9d 	bl	8000298 <__aeabi_dsub>
 801f75e:	ec41 0b10 	vmov	d0, r0, r1
 801f762:	b005      	add	sp, #20
 801f764:	f85d fb04 	ldr.w	pc, [sp], #4
 801f768:	4668      	mov	r0, sp
 801f76a:	f002 f8e1 	bl	8021930 <__ieee754_rem_pio2>
 801f76e:	0040      	lsls	r0, r0, #1
 801f770:	f000 0002 	and.w	r0, r0, #2
 801f774:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f778:	ed9d 0b00 	vldr	d0, [sp]
 801f77c:	f1c0 0001 	rsb	r0, r0, #1
 801f780:	f000 fc66 	bl	8020050 <__kernel_tan>
 801f784:	e7ed      	b.n	801f762 <tan+0x32>
 801f786:	bf00      	nop
	...
 801f790:	3fe921fb 	.word	0x3fe921fb
 801f794:	7fefffff 	.word	0x7fefffff

0801f798 <asinf>:
 801f798:	b508      	push	{r3, lr}
 801f79a:	ed2d 8b02 	vpush	{d8}
 801f79e:	eeb0 8a40 	vmov.f32	s16, s0
 801f7a2:	f002 fdd9 	bl	8022358 <__ieee754_asinf>
 801f7a6:	eeb4 8a48 	vcmp.f32	s16, s16
 801f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ae:	eef0 8a40 	vmov.f32	s17, s0
 801f7b2:	d615      	bvs.n	801f7e0 <asinf+0x48>
 801f7b4:	eeb0 0a48 	vmov.f32	s0, s16
 801f7b8:	f000 f860 	bl	801f87c <fabsf>
 801f7bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801f7c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7c8:	dd0a      	ble.n	801f7e0 <asinf+0x48>
 801f7ca:	f7fd ff2b 	bl	801d624 <__errno>
 801f7ce:	ecbd 8b02 	vpop	{d8}
 801f7d2:	2321      	movs	r3, #33	@ 0x21
 801f7d4:	6003      	str	r3, [r0, #0]
 801f7d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f7da:	4804      	ldr	r0, [pc, #16]	@ (801f7ec <asinf+0x54>)
 801f7dc:	f000 b8dc 	b.w	801f998 <nanf>
 801f7e0:	eeb0 0a68 	vmov.f32	s0, s17
 801f7e4:	ecbd 8b02 	vpop	{d8}
 801f7e8:	bd08      	pop	{r3, pc}
 801f7ea:	bf00      	nop
 801f7ec:	08023bdd 	.word	0x08023bdd

0801f7f0 <atan2f>:
 801f7f0:	f002 be98 	b.w	8022524 <__ieee754_atan2f>

0801f7f4 <cosf>:
 801f7f4:	ee10 3a10 	vmov	r3, s0
 801f7f8:	b507      	push	{r0, r1, r2, lr}
 801f7fa:	4a1e      	ldr	r2, [pc, #120]	@ (801f874 <cosf+0x80>)
 801f7fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f800:	4293      	cmp	r3, r2
 801f802:	d806      	bhi.n	801f812 <cosf+0x1e>
 801f804:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801f878 <cosf+0x84>
 801f808:	b003      	add	sp, #12
 801f80a:	f85d eb04 	ldr.w	lr, [sp], #4
 801f80e:	f002 bc23 	b.w	8022058 <__kernel_cosf>
 801f812:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f816:	d304      	bcc.n	801f822 <cosf+0x2e>
 801f818:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f81c:	b003      	add	sp, #12
 801f81e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f822:	4668      	mov	r0, sp
 801f824:	f002 ff1e 	bl	8022664 <__ieee754_rem_pio2f>
 801f828:	f000 0003 	and.w	r0, r0, #3
 801f82c:	2801      	cmp	r0, #1
 801f82e:	d009      	beq.n	801f844 <cosf+0x50>
 801f830:	2802      	cmp	r0, #2
 801f832:	d010      	beq.n	801f856 <cosf+0x62>
 801f834:	b9b0      	cbnz	r0, 801f864 <cosf+0x70>
 801f836:	eddd 0a01 	vldr	s1, [sp, #4]
 801f83a:	ed9d 0a00 	vldr	s0, [sp]
 801f83e:	f002 fc0b 	bl	8022058 <__kernel_cosf>
 801f842:	e7eb      	b.n	801f81c <cosf+0x28>
 801f844:	eddd 0a01 	vldr	s1, [sp, #4]
 801f848:	ed9d 0a00 	vldr	s0, [sp]
 801f84c:	f002 fc5c 	bl	8022108 <__kernel_sinf>
 801f850:	eeb1 0a40 	vneg.f32	s0, s0
 801f854:	e7e2      	b.n	801f81c <cosf+0x28>
 801f856:	eddd 0a01 	vldr	s1, [sp, #4]
 801f85a:	ed9d 0a00 	vldr	s0, [sp]
 801f85e:	f002 fbfb 	bl	8022058 <__kernel_cosf>
 801f862:	e7f5      	b.n	801f850 <cosf+0x5c>
 801f864:	eddd 0a01 	vldr	s1, [sp, #4]
 801f868:	ed9d 0a00 	vldr	s0, [sp]
 801f86c:	2001      	movs	r0, #1
 801f86e:	f002 fc4b 	bl	8022108 <__kernel_sinf>
 801f872:	e7d3      	b.n	801f81c <cosf+0x28>
 801f874:	3f490fd8 	.word	0x3f490fd8
 801f878:	00000000 	.word	0x00000000

0801f87c <fabsf>:
 801f87c:	ee10 3a10 	vmov	r3, s0
 801f880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f884:	ee00 3a10 	vmov	s0, r3
 801f888:	4770      	bx	lr
	...

0801f88c <sinf>:
 801f88c:	ee10 3a10 	vmov	r3, s0
 801f890:	b507      	push	{r0, r1, r2, lr}
 801f892:	4a1f      	ldr	r2, [pc, #124]	@ (801f910 <sinf+0x84>)
 801f894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f898:	4293      	cmp	r3, r2
 801f89a:	d807      	bhi.n	801f8ac <sinf+0x20>
 801f89c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801f914 <sinf+0x88>
 801f8a0:	2000      	movs	r0, #0
 801f8a2:	b003      	add	sp, #12
 801f8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f8a8:	f002 bc2e 	b.w	8022108 <__kernel_sinf>
 801f8ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f8b0:	d304      	bcc.n	801f8bc <sinf+0x30>
 801f8b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f8b6:	b003      	add	sp, #12
 801f8b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801f8bc:	4668      	mov	r0, sp
 801f8be:	f002 fed1 	bl	8022664 <__ieee754_rem_pio2f>
 801f8c2:	f000 0003 	and.w	r0, r0, #3
 801f8c6:	2801      	cmp	r0, #1
 801f8c8:	d00a      	beq.n	801f8e0 <sinf+0x54>
 801f8ca:	2802      	cmp	r0, #2
 801f8cc:	d00f      	beq.n	801f8ee <sinf+0x62>
 801f8ce:	b9c0      	cbnz	r0, 801f902 <sinf+0x76>
 801f8d0:	eddd 0a01 	vldr	s1, [sp, #4]
 801f8d4:	ed9d 0a00 	vldr	s0, [sp]
 801f8d8:	2001      	movs	r0, #1
 801f8da:	f002 fc15 	bl	8022108 <__kernel_sinf>
 801f8de:	e7ea      	b.n	801f8b6 <sinf+0x2a>
 801f8e0:	eddd 0a01 	vldr	s1, [sp, #4]
 801f8e4:	ed9d 0a00 	vldr	s0, [sp]
 801f8e8:	f002 fbb6 	bl	8022058 <__kernel_cosf>
 801f8ec:	e7e3      	b.n	801f8b6 <sinf+0x2a>
 801f8ee:	eddd 0a01 	vldr	s1, [sp, #4]
 801f8f2:	ed9d 0a00 	vldr	s0, [sp]
 801f8f6:	2001      	movs	r0, #1
 801f8f8:	f002 fc06 	bl	8022108 <__kernel_sinf>
 801f8fc:	eeb1 0a40 	vneg.f32	s0, s0
 801f900:	e7d9      	b.n	801f8b6 <sinf+0x2a>
 801f902:	eddd 0a01 	vldr	s1, [sp, #4]
 801f906:	ed9d 0a00 	vldr	s0, [sp]
 801f90a:	f002 fba5 	bl	8022058 <__kernel_cosf>
 801f90e:	e7f5      	b.n	801f8fc <sinf+0x70>
 801f910:	3f490fd8 	.word	0x3f490fd8
 801f914:	00000000 	.word	0x00000000

0801f918 <tanf>:
 801f918:	ee10 3a10 	vmov	r3, s0
 801f91c:	b507      	push	{r0, r1, r2, lr}
 801f91e:	4a12      	ldr	r2, [pc, #72]	@ (801f968 <tanf+0x50>)
 801f920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f924:	4293      	cmp	r3, r2
 801f926:	d807      	bhi.n	801f938 <tanf+0x20>
 801f928:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801f96c <tanf+0x54>
 801f92c:	2001      	movs	r0, #1
 801f92e:	b003      	add	sp, #12
 801f930:	f85d eb04 	ldr.w	lr, [sp], #4
 801f934:	f002 bc30 	b.w	8022198 <__kernel_tanf>
 801f938:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f93c:	d304      	bcc.n	801f948 <tanf+0x30>
 801f93e:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f942:	b003      	add	sp, #12
 801f944:	f85d fb04 	ldr.w	pc, [sp], #4
 801f948:	4668      	mov	r0, sp
 801f94a:	f002 fe8b 	bl	8022664 <__ieee754_rem_pio2f>
 801f94e:	0040      	lsls	r0, r0, #1
 801f950:	f000 0002 	and.w	r0, r0, #2
 801f954:	eddd 0a01 	vldr	s1, [sp, #4]
 801f958:	ed9d 0a00 	vldr	s0, [sp]
 801f95c:	f1c0 0001 	rsb	r0, r0, #1
 801f960:	f002 fc1a 	bl	8022198 <__kernel_tanf>
 801f964:	e7ed      	b.n	801f942 <tanf+0x2a>
 801f966:	bf00      	nop
 801f968:	3f490fda 	.word	0x3f490fda
 801f96c:	00000000 	.word	0x00000000

0801f970 <finite>:
 801f970:	b082      	sub	sp, #8
 801f972:	ed8d 0b00 	vstr	d0, [sp]
 801f976:	9801      	ldr	r0, [sp, #4]
 801f978:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801f97c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801f980:	0fc0      	lsrs	r0, r0, #31
 801f982:	b002      	add	sp, #8
 801f984:	4770      	bx	lr
	...

0801f988 <nan>:
 801f988:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f990 <nan+0x8>
 801f98c:	4770      	bx	lr
 801f98e:	bf00      	nop
 801f990:	00000000 	.word	0x00000000
 801f994:	7ff80000 	.word	0x7ff80000

0801f998 <nanf>:
 801f998:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f9a0 <nanf+0x8>
 801f99c:	4770      	bx	lr
 801f99e:	bf00      	nop
 801f9a0:	7fc00000 	.word	0x7fc00000

0801f9a4 <__ieee754_sqrt>:
 801f9a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9a8:	4a68      	ldr	r2, [pc, #416]	@ (801fb4c <__ieee754_sqrt+0x1a8>)
 801f9aa:	ec55 4b10 	vmov	r4, r5, d0
 801f9ae:	43aa      	bics	r2, r5
 801f9b0:	462b      	mov	r3, r5
 801f9b2:	4621      	mov	r1, r4
 801f9b4:	d110      	bne.n	801f9d8 <__ieee754_sqrt+0x34>
 801f9b6:	4622      	mov	r2, r4
 801f9b8:	4620      	mov	r0, r4
 801f9ba:	4629      	mov	r1, r5
 801f9bc:	f7e0 fe24 	bl	8000608 <__aeabi_dmul>
 801f9c0:	4602      	mov	r2, r0
 801f9c2:	460b      	mov	r3, r1
 801f9c4:	4620      	mov	r0, r4
 801f9c6:	4629      	mov	r1, r5
 801f9c8:	f7e0 fc68 	bl	800029c <__adddf3>
 801f9cc:	4604      	mov	r4, r0
 801f9ce:	460d      	mov	r5, r1
 801f9d0:	ec45 4b10 	vmov	d0, r4, r5
 801f9d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9d8:	2d00      	cmp	r5, #0
 801f9da:	dc0e      	bgt.n	801f9fa <__ieee754_sqrt+0x56>
 801f9dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f9e0:	4322      	orrs	r2, r4
 801f9e2:	d0f5      	beq.n	801f9d0 <__ieee754_sqrt+0x2c>
 801f9e4:	b19d      	cbz	r5, 801fa0e <__ieee754_sqrt+0x6a>
 801f9e6:	4622      	mov	r2, r4
 801f9e8:	4620      	mov	r0, r4
 801f9ea:	4629      	mov	r1, r5
 801f9ec:	f7e0 fc54 	bl	8000298 <__aeabi_dsub>
 801f9f0:	4602      	mov	r2, r0
 801f9f2:	460b      	mov	r3, r1
 801f9f4:	f7e0 ff32 	bl	800085c <__aeabi_ddiv>
 801f9f8:	e7e8      	b.n	801f9cc <__ieee754_sqrt+0x28>
 801f9fa:	152a      	asrs	r2, r5, #20
 801f9fc:	d115      	bne.n	801fa2a <__ieee754_sqrt+0x86>
 801f9fe:	2000      	movs	r0, #0
 801fa00:	e009      	b.n	801fa16 <__ieee754_sqrt+0x72>
 801fa02:	0acb      	lsrs	r3, r1, #11
 801fa04:	3a15      	subs	r2, #21
 801fa06:	0549      	lsls	r1, r1, #21
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d0fa      	beq.n	801fa02 <__ieee754_sqrt+0x5e>
 801fa0c:	e7f7      	b.n	801f9fe <__ieee754_sqrt+0x5a>
 801fa0e:	462a      	mov	r2, r5
 801fa10:	e7fa      	b.n	801fa08 <__ieee754_sqrt+0x64>
 801fa12:	005b      	lsls	r3, r3, #1
 801fa14:	3001      	adds	r0, #1
 801fa16:	02dc      	lsls	r4, r3, #11
 801fa18:	d5fb      	bpl.n	801fa12 <__ieee754_sqrt+0x6e>
 801fa1a:	1e44      	subs	r4, r0, #1
 801fa1c:	1b12      	subs	r2, r2, r4
 801fa1e:	f1c0 0420 	rsb	r4, r0, #32
 801fa22:	fa21 f404 	lsr.w	r4, r1, r4
 801fa26:	4323      	orrs	r3, r4
 801fa28:	4081      	lsls	r1, r0
 801fa2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fa2e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fa32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa36:	07d2      	lsls	r2, r2, #31
 801fa38:	bf5c      	itt	pl
 801fa3a:	005b      	lslpl	r3, r3, #1
 801fa3c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fa40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fa44:	bf58      	it	pl
 801fa46:	0049      	lslpl	r1, r1, #1
 801fa48:	2600      	movs	r6, #0
 801fa4a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fa4e:	106d      	asrs	r5, r5, #1
 801fa50:	0049      	lsls	r1, r1, #1
 801fa52:	2016      	movs	r0, #22
 801fa54:	4632      	mov	r2, r6
 801fa56:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fa5a:	1917      	adds	r7, r2, r4
 801fa5c:	429f      	cmp	r7, r3
 801fa5e:	bfde      	ittt	le
 801fa60:	193a      	addle	r2, r7, r4
 801fa62:	1bdb      	suble	r3, r3, r7
 801fa64:	1936      	addle	r6, r6, r4
 801fa66:	0fcf      	lsrs	r7, r1, #31
 801fa68:	3801      	subs	r0, #1
 801fa6a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fa6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fa72:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fa76:	d1f0      	bne.n	801fa5a <__ieee754_sqrt+0xb6>
 801fa78:	4604      	mov	r4, r0
 801fa7a:	2720      	movs	r7, #32
 801fa7c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fa80:	429a      	cmp	r2, r3
 801fa82:	eb00 0e0c 	add.w	lr, r0, ip
 801fa86:	db02      	blt.n	801fa8e <__ieee754_sqrt+0xea>
 801fa88:	d113      	bne.n	801fab2 <__ieee754_sqrt+0x10e>
 801fa8a:	458e      	cmp	lr, r1
 801fa8c:	d811      	bhi.n	801fab2 <__ieee754_sqrt+0x10e>
 801fa8e:	f1be 0f00 	cmp.w	lr, #0
 801fa92:	eb0e 000c 	add.w	r0, lr, ip
 801fa96:	da42      	bge.n	801fb1e <__ieee754_sqrt+0x17a>
 801fa98:	2800      	cmp	r0, #0
 801fa9a:	db40      	blt.n	801fb1e <__ieee754_sqrt+0x17a>
 801fa9c:	f102 0801 	add.w	r8, r2, #1
 801faa0:	1a9b      	subs	r3, r3, r2
 801faa2:	458e      	cmp	lr, r1
 801faa4:	bf88      	it	hi
 801faa6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801faaa:	eba1 010e 	sub.w	r1, r1, lr
 801faae:	4464      	add	r4, ip
 801fab0:	4642      	mov	r2, r8
 801fab2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fab6:	3f01      	subs	r7, #1
 801fab8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fabc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fac0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fac4:	d1dc      	bne.n	801fa80 <__ieee754_sqrt+0xdc>
 801fac6:	4319      	orrs	r1, r3
 801fac8:	d01b      	beq.n	801fb02 <__ieee754_sqrt+0x15e>
 801faca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fb50 <__ieee754_sqrt+0x1ac>
 801face:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fb54 <__ieee754_sqrt+0x1b0>
 801fad2:	e9da 0100 	ldrd	r0, r1, [sl]
 801fad6:	e9db 2300 	ldrd	r2, r3, [fp]
 801fada:	f7e0 fbdd 	bl	8000298 <__aeabi_dsub>
 801fade:	e9da 8900 	ldrd	r8, r9, [sl]
 801fae2:	4602      	mov	r2, r0
 801fae4:	460b      	mov	r3, r1
 801fae6:	4640      	mov	r0, r8
 801fae8:	4649      	mov	r1, r9
 801faea:	f7e1 f809 	bl	8000b00 <__aeabi_dcmple>
 801faee:	b140      	cbz	r0, 801fb02 <__ieee754_sqrt+0x15e>
 801faf0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801faf4:	e9da 0100 	ldrd	r0, r1, [sl]
 801faf8:	e9db 2300 	ldrd	r2, r3, [fp]
 801fafc:	d111      	bne.n	801fb22 <__ieee754_sqrt+0x17e>
 801fafe:	3601      	adds	r6, #1
 801fb00:	463c      	mov	r4, r7
 801fb02:	1072      	asrs	r2, r6, #1
 801fb04:	0863      	lsrs	r3, r4, #1
 801fb06:	07f1      	lsls	r1, r6, #31
 801fb08:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fb0c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fb10:	bf48      	it	mi
 801fb12:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fb16:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fb1a:	4618      	mov	r0, r3
 801fb1c:	e756      	b.n	801f9cc <__ieee754_sqrt+0x28>
 801fb1e:	4690      	mov	r8, r2
 801fb20:	e7be      	b.n	801faa0 <__ieee754_sqrt+0xfc>
 801fb22:	f7e0 fbbb 	bl	800029c <__adddf3>
 801fb26:	e9da 8900 	ldrd	r8, r9, [sl]
 801fb2a:	4602      	mov	r2, r0
 801fb2c:	460b      	mov	r3, r1
 801fb2e:	4640      	mov	r0, r8
 801fb30:	4649      	mov	r1, r9
 801fb32:	f7e0 ffdb 	bl	8000aec <__aeabi_dcmplt>
 801fb36:	b120      	cbz	r0, 801fb42 <__ieee754_sqrt+0x19e>
 801fb38:	1ca0      	adds	r0, r4, #2
 801fb3a:	bf08      	it	eq
 801fb3c:	3601      	addeq	r6, #1
 801fb3e:	3402      	adds	r4, #2
 801fb40:	e7df      	b.n	801fb02 <__ieee754_sqrt+0x15e>
 801fb42:	1c63      	adds	r3, r4, #1
 801fb44:	f023 0401 	bic.w	r4, r3, #1
 801fb48:	e7db      	b.n	801fb02 <__ieee754_sqrt+0x15e>
 801fb4a:	bf00      	nop
 801fb4c:	7ff00000 	.word	0x7ff00000
 801fb50:	20000520 	.word	0x20000520
 801fb54:	20000518 	.word	0x20000518

0801fb58 <ceil>:
 801fb58:	ec51 0b10 	vmov	r0, r1, d0
 801fb5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801fb68:	2e13      	cmp	r6, #19
 801fb6a:	460c      	mov	r4, r1
 801fb6c:	4605      	mov	r5, r0
 801fb6e:	4680      	mov	r8, r0
 801fb70:	dc2e      	bgt.n	801fbd0 <ceil+0x78>
 801fb72:	2e00      	cmp	r6, #0
 801fb74:	da11      	bge.n	801fb9a <ceil+0x42>
 801fb76:	a332      	add	r3, pc, #200	@ (adr r3, 801fc40 <ceil+0xe8>)
 801fb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb7c:	f7e0 fb8e 	bl	800029c <__adddf3>
 801fb80:	2200      	movs	r2, #0
 801fb82:	2300      	movs	r3, #0
 801fb84:	f7e0 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 801fb88:	b120      	cbz	r0, 801fb94 <ceil+0x3c>
 801fb8a:	2c00      	cmp	r4, #0
 801fb8c:	db4f      	blt.n	801fc2e <ceil+0xd6>
 801fb8e:	4325      	orrs	r5, r4
 801fb90:	d151      	bne.n	801fc36 <ceil+0xde>
 801fb92:	462c      	mov	r4, r5
 801fb94:	4621      	mov	r1, r4
 801fb96:	4628      	mov	r0, r5
 801fb98:	e023      	b.n	801fbe2 <ceil+0x8a>
 801fb9a:	4f2b      	ldr	r7, [pc, #172]	@ (801fc48 <ceil+0xf0>)
 801fb9c:	4137      	asrs	r7, r6
 801fb9e:	ea01 0307 	and.w	r3, r1, r7
 801fba2:	4303      	orrs	r3, r0
 801fba4:	d01d      	beq.n	801fbe2 <ceil+0x8a>
 801fba6:	a326      	add	r3, pc, #152	@ (adr r3, 801fc40 <ceil+0xe8>)
 801fba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbac:	f7e0 fb76 	bl	800029c <__adddf3>
 801fbb0:	2200      	movs	r2, #0
 801fbb2:	2300      	movs	r3, #0
 801fbb4:	f7e0 ffb8 	bl	8000b28 <__aeabi_dcmpgt>
 801fbb8:	2800      	cmp	r0, #0
 801fbba:	d0eb      	beq.n	801fb94 <ceil+0x3c>
 801fbbc:	2c00      	cmp	r4, #0
 801fbbe:	bfc2      	ittt	gt
 801fbc0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 801fbc4:	4133      	asrgt	r3, r6
 801fbc6:	18e4      	addgt	r4, r4, r3
 801fbc8:	ea24 0407 	bic.w	r4, r4, r7
 801fbcc:	2500      	movs	r5, #0
 801fbce:	e7e1      	b.n	801fb94 <ceil+0x3c>
 801fbd0:	2e33      	cmp	r6, #51	@ 0x33
 801fbd2:	dd0a      	ble.n	801fbea <ceil+0x92>
 801fbd4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fbd8:	d103      	bne.n	801fbe2 <ceil+0x8a>
 801fbda:	4602      	mov	r2, r0
 801fbdc:	460b      	mov	r3, r1
 801fbde:	f7e0 fb5d 	bl	800029c <__adddf3>
 801fbe2:	ec41 0b10 	vmov	d0, r0, r1
 801fbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbea:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801fbee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801fbf2:	40df      	lsrs	r7, r3
 801fbf4:	4238      	tst	r0, r7
 801fbf6:	d0f4      	beq.n	801fbe2 <ceil+0x8a>
 801fbf8:	a311      	add	r3, pc, #68	@ (adr r3, 801fc40 <ceil+0xe8>)
 801fbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbfe:	f7e0 fb4d 	bl	800029c <__adddf3>
 801fc02:	2200      	movs	r2, #0
 801fc04:	2300      	movs	r3, #0
 801fc06:	f7e0 ff8f 	bl	8000b28 <__aeabi_dcmpgt>
 801fc0a:	2800      	cmp	r0, #0
 801fc0c:	d0c2      	beq.n	801fb94 <ceil+0x3c>
 801fc0e:	2c00      	cmp	r4, #0
 801fc10:	dd0a      	ble.n	801fc28 <ceil+0xd0>
 801fc12:	2e14      	cmp	r6, #20
 801fc14:	d101      	bne.n	801fc1a <ceil+0xc2>
 801fc16:	3401      	adds	r4, #1
 801fc18:	e006      	b.n	801fc28 <ceil+0xd0>
 801fc1a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801fc1e:	2301      	movs	r3, #1
 801fc20:	40b3      	lsls	r3, r6
 801fc22:	441d      	add	r5, r3
 801fc24:	45a8      	cmp	r8, r5
 801fc26:	d8f6      	bhi.n	801fc16 <ceil+0xbe>
 801fc28:	ea25 0507 	bic.w	r5, r5, r7
 801fc2c:	e7b2      	b.n	801fb94 <ceil+0x3c>
 801fc2e:	2500      	movs	r5, #0
 801fc30:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801fc34:	e7ae      	b.n	801fb94 <ceil+0x3c>
 801fc36:	4c05      	ldr	r4, [pc, #20]	@ (801fc4c <ceil+0xf4>)
 801fc38:	2500      	movs	r5, #0
 801fc3a:	e7ab      	b.n	801fb94 <ceil+0x3c>
 801fc3c:	f3af 8000 	nop.w
 801fc40:	8800759c 	.word	0x8800759c
 801fc44:	7e37e43c 	.word	0x7e37e43c
 801fc48:	000fffff 	.word	0x000fffff
 801fc4c:	3ff00000 	.word	0x3ff00000

0801fc50 <floor>:
 801fc50:	ec51 0b10 	vmov	r0, r1, d0
 801fc54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc5c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801fc60:	2e13      	cmp	r6, #19
 801fc62:	460c      	mov	r4, r1
 801fc64:	4605      	mov	r5, r0
 801fc66:	4680      	mov	r8, r0
 801fc68:	dc34      	bgt.n	801fcd4 <floor+0x84>
 801fc6a:	2e00      	cmp	r6, #0
 801fc6c:	da17      	bge.n	801fc9e <floor+0x4e>
 801fc6e:	a332      	add	r3, pc, #200	@ (adr r3, 801fd38 <floor+0xe8>)
 801fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc74:	f7e0 fb12 	bl	800029c <__adddf3>
 801fc78:	2200      	movs	r2, #0
 801fc7a:	2300      	movs	r3, #0
 801fc7c:	f7e0 ff54 	bl	8000b28 <__aeabi_dcmpgt>
 801fc80:	b150      	cbz	r0, 801fc98 <floor+0x48>
 801fc82:	2c00      	cmp	r4, #0
 801fc84:	da55      	bge.n	801fd32 <floor+0xe2>
 801fc86:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801fc8a:	432c      	orrs	r4, r5
 801fc8c:	2500      	movs	r5, #0
 801fc8e:	42ac      	cmp	r4, r5
 801fc90:	4c2b      	ldr	r4, [pc, #172]	@ (801fd40 <floor+0xf0>)
 801fc92:	bf08      	it	eq
 801fc94:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801fc98:	4621      	mov	r1, r4
 801fc9a:	4628      	mov	r0, r5
 801fc9c:	e023      	b.n	801fce6 <floor+0x96>
 801fc9e:	4f29      	ldr	r7, [pc, #164]	@ (801fd44 <floor+0xf4>)
 801fca0:	4137      	asrs	r7, r6
 801fca2:	ea01 0307 	and.w	r3, r1, r7
 801fca6:	4303      	orrs	r3, r0
 801fca8:	d01d      	beq.n	801fce6 <floor+0x96>
 801fcaa:	a323      	add	r3, pc, #140	@ (adr r3, 801fd38 <floor+0xe8>)
 801fcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcb0:	f7e0 faf4 	bl	800029c <__adddf3>
 801fcb4:	2200      	movs	r2, #0
 801fcb6:	2300      	movs	r3, #0
 801fcb8:	f7e0 ff36 	bl	8000b28 <__aeabi_dcmpgt>
 801fcbc:	2800      	cmp	r0, #0
 801fcbe:	d0eb      	beq.n	801fc98 <floor+0x48>
 801fcc0:	2c00      	cmp	r4, #0
 801fcc2:	bfbe      	ittt	lt
 801fcc4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801fcc8:	4133      	asrlt	r3, r6
 801fcca:	18e4      	addlt	r4, r4, r3
 801fccc:	ea24 0407 	bic.w	r4, r4, r7
 801fcd0:	2500      	movs	r5, #0
 801fcd2:	e7e1      	b.n	801fc98 <floor+0x48>
 801fcd4:	2e33      	cmp	r6, #51	@ 0x33
 801fcd6:	dd0a      	ble.n	801fcee <floor+0x9e>
 801fcd8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fcdc:	d103      	bne.n	801fce6 <floor+0x96>
 801fcde:	4602      	mov	r2, r0
 801fce0:	460b      	mov	r3, r1
 801fce2:	f7e0 fadb 	bl	800029c <__adddf3>
 801fce6:	ec41 0b10 	vmov	d0, r0, r1
 801fcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801fcf2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801fcf6:	40df      	lsrs	r7, r3
 801fcf8:	4207      	tst	r7, r0
 801fcfa:	d0f4      	beq.n	801fce6 <floor+0x96>
 801fcfc:	a30e      	add	r3, pc, #56	@ (adr r3, 801fd38 <floor+0xe8>)
 801fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd02:	f7e0 facb 	bl	800029c <__adddf3>
 801fd06:	2200      	movs	r2, #0
 801fd08:	2300      	movs	r3, #0
 801fd0a:	f7e0 ff0d 	bl	8000b28 <__aeabi_dcmpgt>
 801fd0e:	2800      	cmp	r0, #0
 801fd10:	d0c2      	beq.n	801fc98 <floor+0x48>
 801fd12:	2c00      	cmp	r4, #0
 801fd14:	da0a      	bge.n	801fd2c <floor+0xdc>
 801fd16:	2e14      	cmp	r6, #20
 801fd18:	d101      	bne.n	801fd1e <floor+0xce>
 801fd1a:	3401      	adds	r4, #1
 801fd1c:	e006      	b.n	801fd2c <floor+0xdc>
 801fd1e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801fd22:	2301      	movs	r3, #1
 801fd24:	40b3      	lsls	r3, r6
 801fd26:	441d      	add	r5, r3
 801fd28:	4545      	cmp	r5, r8
 801fd2a:	d3f6      	bcc.n	801fd1a <floor+0xca>
 801fd2c:	ea25 0507 	bic.w	r5, r5, r7
 801fd30:	e7b2      	b.n	801fc98 <floor+0x48>
 801fd32:	2500      	movs	r5, #0
 801fd34:	462c      	mov	r4, r5
 801fd36:	e7af      	b.n	801fc98 <floor+0x48>
 801fd38:	8800759c 	.word	0x8800759c
 801fd3c:	7e37e43c 	.word	0x7e37e43c
 801fd40:	bff00000 	.word	0xbff00000
 801fd44:	000fffff 	.word	0x000fffff

0801fd48 <__kernel_cos>:
 801fd48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd4c:	ec57 6b10 	vmov	r6, r7, d0
 801fd50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801fd54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801fd58:	ed8d 1b00 	vstr	d1, [sp]
 801fd5c:	d206      	bcs.n	801fd6c <__kernel_cos+0x24>
 801fd5e:	4630      	mov	r0, r6
 801fd60:	4639      	mov	r1, r7
 801fd62:	f7e0 ff01 	bl	8000b68 <__aeabi_d2iz>
 801fd66:	2800      	cmp	r0, #0
 801fd68:	f000 8088 	beq.w	801fe7c <__kernel_cos+0x134>
 801fd6c:	4632      	mov	r2, r6
 801fd6e:	463b      	mov	r3, r7
 801fd70:	4630      	mov	r0, r6
 801fd72:	4639      	mov	r1, r7
 801fd74:	f7e0 fc48 	bl	8000608 <__aeabi_dmul>
 801fd78:	4b51      	ldr	r3, [pc, #324]	@ (801fec0 <__kernel_cos+0x178>)
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	4604      	mov	r4, r0
 801fd7e:	460d      	mov	r5, r1
 801fd80:	f7e0 fc42 	bl	8000608 <__aeabi_dmul>
 801fd84:	a340      	add	r3, pc, #256	@ (adr r3, 801fe88 <__kernel_cos+0x140>)
 801fd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd8a:	4682      	mov	sl, r0
 801fd8c:	468b      	mov	fp, r1
 801fd8e:	4620      	mov	r0, r4
 801fd90:	4629      	mov	r1, r5
 801fd92:	f7e0 fc39 	bl	8000608 <__aeabi_dmul>
 801fd96:	a33e      	add	r3, pc, #248	@ (adr r3, 801fe90 <__kernel_cos+0x148>)
 801fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd9c:	f7e0 fa7e 	bl	800029c <__adddf3>
 801fda0:	4622      	mov	r2, r4
 801fda2:	462b      	mov	r3, r5
 801fda4:	f7e0 fc30 	bl	8000608 <__aeabi_dmul>
 801fda8:	a33b      	add	r3, pc, #236	@ (adr r3, 801fe98 <__kernel_cos+0x150>)
 801fdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdae:	f7e0 fa73 	bl	8000298 <__aeabi_dsub>
 801fdb2:	4622      	mov	r2, r4
 801fdb4:	462b      	mov	r3, r5
 801fdb6:	f7e0 fc27 	bl	8000608 <__aeabi_dmul>
 801fdba:	a339      	add	r3, pc, #228	@ (adr r3, 801fea0 <__kernel_cos+0x158>)
 801fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdc0:	f7e0 fa6c 	bl	800029c <__adddf3>
 801fdc4:	4622      	mov	r2, r4
 801fdc6:	462b      	mov	r3, r5
 801fdc8:	f7e0 fc1e 	bl	8000608 <__aeabi_dmul>
 801fdcc:	a336      	add	r3, pc, #216	@ (adr r3, 801fea8 <__kernel_cos+0x160>)
 801fdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd2:	f7e0 fa61 	bl	8000298 <__aeabi_dsub>
 801fdd6:	4622      	mov	r2, r4
 801fdd8:	462b      	mov	r3, r5
 801fdda:	f7e0 fc15 	bl	8000608 <__aeabi_dmul>
 801fdde:	a334      	add	r3, pc, #208	@ (adr r3, 801feb0 <__kernel_cos+0x168>)
 801fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fde4:	f7e0 fa5a 	bl	800029c <__adddf3>
 801fde8:	4622      	mov	r2, r4
 801fdea:	462b      	mov	r3, r5
 801fdec:	f7e0 fc0c 	bl	8000608 <__aeabi_dmul>
 801fdf0:	4622      	mov	r2, r4
 801fdf2:	462b      	mov	r3, r5
 801fdf4:	f7e0 fc08 	bl	8000608 <__aeabi_dmul>
 801fdf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fdfc:	4604      	mov	r4, r0
 801fdfe:	460d      	mov	r5, r1
 801fe00:	4630      	mov	r0, r6
 801fe02:	4639      	mov	r1, r7
 801fe04:	f7e0 fc00 	bl	8000608 <__aeabi_dmul>
 801fe08:	460b      	mov	r3, r1
 801fe0a:	4602      	mov	r2, r0
 801fe0c:	4629      	mov	r1, r5
 801fe0e:	4620      	mov	r0, r4
 801fe10:	f7e0 fa42 	bl	8000298 <__aeabi_dsub>
 801fe14:	4b2b      	ldr	r3, [pc, #172]	@ (801fec4 <__kernel_cos+0x17c>)
 801fe16:	4598      	cmp	r8, r3
 801fe18:	4606      	mov	r6, r0
 801fe1a:	460f      	mov	r7, r1
 801fe1c:	d810      	bhi.n	801fe40 <__kernel_cos+0xf8>
 801fe1e:	4602      	mov	r2, r0
 801fe20:	460b      	mov	r3, r1
 801fe22:	4650      	mov	r0, sl
 801fe24:	4659      	mov	r1, fp
 801fe26:	f7e0 fa37 	bl	8000298 <__aeabi_dsub>
 801fe2a:	460b      	mov	r3, r1
 801fe2c:	4926      	ldr	r1, [pc, #152]	@ (801fec8 <__kernel_cos+0x180>)
 801fe2e:	4602      	mov	r2, r0
 801fe30:	2000      	movs	r0, #0
 801fe32:	f7e0 fa31 	bl	8000298 <__aeabi_dsub>
 801fe36:	ec41 0b10 	vmov	d0, r0, r1
 801fe3a:	b003      	add	sp, #12
 801fe3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe40:	4b22      	ldr	r3, [pc, #136]	@ (801fecc <__kernel_cos+0x184>)
 801fe42:	4921      	ldr	r1, [pc, #132]	@ (801fec8 <__kernel_cos+0x180>)
 801fe44:	4598      	cmp	r8, r3
 801fe46:	bf8c      	ite	hi
 801fe48:	4d21      	ldrhi	r5, [pc, #132]	@ (801fed0 <__kernel_cos+0x188>)
 801fe4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801fe4e:	2400      	movs	r4, #0
 801fe50:	4622      	mov	r2, r4
 801fe52:	462b      	mov	r3, r5
 801fe54:	2000      	movs	r0, #0
 801fe56:	f7e0 fa1f 	bl	8000298 <__aeabi_dsub>
 801fe5a:	4622      	mov	r2, r4
 801fe5c:	4680      	mov	r8, r0
 801fe5e:	4689      	mov	r9, r1
 801fe60:	462b      	mov	r3, r5
 801fe62:	4650      	mov	r0, sl
 801fe64:	4659      	mov	r1, fp
 801fe66:	f7e0 fa17 	bl	8000298 <__aeabi_dsub>
 801fe6a:	4632      	mov	r2, r6
 801fe6c:	463b      	mov	r3, r7
 801fe6e:	f7e0 fa13 	bl	8000298 <__aeabi_dsub>
 801fe72:	4602      	mov	r2, r0
 801fe74:	460b      	mov	r3, r1
 801fe76:	4640      	mov	r0, r8
 801fe78:	4649      	mov	r1, r9
 801fe7a:	e7da      	b.n	801fe32 <__kernel_cos+0xea>
 801fe7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801feb8 <__kernel_cos+0x170>
 801fe80:	e7db      	b.n	801fe3a <__kernel_cos+0xf2>
 801fe82:	bf00      	nop
 801fe84:	f3af 8000 	nop.w
 801fe88:	be8838d4 	.word	0xbe8838d4
 801fe8c:	bda8fae9 	.word	0xbda8fae9
 801fe90:	bdb4b1c4 	.word	0xbdb4b1c4
 801fe94:	3e21ee9e 	.word	0x3e21ee9e
 801fe98:	809c52ad 	.word	0x809c52ad
 801fe9c:	3e927e4f 	.word	0x3e927e4f
 801fea0:	19cb1590 	.word	0x19cb1590
 801fea4:	3efa01a0 	.word	0x3efa01a0
 801fea8:	16c15177 	.word	0x16c15177
 801feac:	3f56c16c 	.word	0x3f56c16c
 801feb0:	5555554c 	.word	0x5555554c
 801feb4:	3fa55555 	.word	0x3fa55555
 801feb8:	00000000 	.word	0x00000000
 801febc:	3ff00000 	.word	0x3ff00000
 801fec0:	3fe00000 	.word	0x3fe00000
 801fec4:	3fd33332 	.word	0x3fd33332
 801fec8:	3ff00000 	.word	0x3ff00000
 801fecc:	3fe90000 	.word	0x3fe90000
 801fed0:	3fd20000 	.word	0x3fd20000
 801fed4:	00000000 	.word	0x00000000

0801fed8 <__kernel_sin>:
 801fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fedc:	ec55 4b10 	vmov	r4, r5, d0
 801fee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fee4:	b085      	sub	sp, #20
 801fee6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801feea:	ed8d 1b02 	vstr	d1, [sp, #8]
 801feee:	4680      	mov	r8, r0
 801fef0:	d205      	bcs.n	801fefe <__kernel_sin+0x26>
 801fef2:	4620      	mov	r0, r4
 801fef4:	4629      	mov	r1, r5
 801fef6:	f7e0 fe37 	bl	8000b68 <__aeabi_d2iz>
 801fefa:	2800      	cmp	r0, #0
 801fefc:	d052      	beq.n	801ffa4 <__kernel_sin+0xcc>
 801fefe:	4622      	mov	r2, r4
 801ff00:	462b      	mov	r3, r5
 801ff02:	4620      	mov	r0, r4
 801ff04:	4629      	mov	r1, r5
 801ff06:	f7e0 fb7f 	bl	8000608 <__aeabi_dmul>
 801ff0a:	4682      	mov	sl, r0
 801ff0c:	468b      	mov	fp, r1
 801ff0e:	4602      	mov	r2, r0
 801ff10:	460b      	mov	r3, r1
 801ff12:	4620      	mov	r0, r4
 801ff14:	4629      	mov	r1, r5
 801ff16:	f7e0 fb77 	bl	8000608 <__aeabi_dmul>
 801ff1a:	a342      	add	r3, pc, #264	@ (adr r3, 8020024 <__kernel_sin+0x14c>)
 801ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff20:	e9cd 0100 	strd	r0, r1, [sp]
 801ff24:	4650      	mov	r0, sl
 801ff26:	4659      	mov	r1, fp
 801ff28:	f7e0 fb6e 	bl	8000608 <__aeabi_dmul>
 801ff2c:	a33f      	add	r3, pc, #252	@ (adr r3, 802002c <__kernel_sin+0x154>)
 801ff2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff32:	f7e0 f9b1 	bl	8000298 <__aeabi_dsub>
 801ff36:	4652      	mov	r2, sl
 801ff38:	465b      	mov	r3, fp
 801ff3a:	f7e0 fb65 	bl	8000608 <__aeabi_dmul>
 801ff3e:	a33d      	add	r3, pc, #244	@ (adr r3, 8020034 <__kernel_sin+0x15c>)
 801ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff44:	f7e0 f9aa 	bl	800029c <__adddf3>
 801ff48:	4652      	mov	r2, sl
 801ff4a:	465b      	mov	r3, fp
 801ff4c:	f7e0 fb5c 	bl	8000608 <__aeabi_dmul>
 801ff50:	a33a      	add	r3, pc, #232	@ (adr r3, 802003c <__kernel_sin+0x164>)
 801ff52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff56:	f7e0 f99f 	bl	8000298 <__aeabi_dsub>
 801ff5a:	4652      	mov	r2, sl
 801ff5c:	465b      	mov	r3, fp
 801ff5e:	f7e0 fb53 	bl	8000608 <__aeabi_dmul>
 801ff62:	a338      	add	r3, pc, #224	@ (adr r3, 8020044 <__kernel_sin+0x16c>)
 801ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff68:	f7e0 f998 	bl	800029c <__adddf3>
 801ff6c:	4606      	mov	r6, r0
 801ff6e:	460f      	mov	r7, r1
 801ff70:	f1b8 0f00 	cmp.w	r8, #0
 801ff74:	d11b      	bne.n	801ffae <__kernel_sin+0xd6>
 801ff76:	4602      	mov	r2, r0
 801ff78:	460b      	mov	r3, r1
 801ff7a:	4650      	mov	r0, sl
 801ff7c:	4659      	mov	r1, fp
 801ff7e:	f7e0 fb43 	bl	8000608 <__aeabi_dmul>
 801ff82:	a325      	add	r3, pc, #148	@ (adr r3, 8020018 <__kernel_sin+0x140>)
 801ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff88:	f7e0 f986 	bl	8000298 <__aeabi_dsub>
 801ff8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ff90:	f7e0 fb3a 	bl	8000608 <__aeabi_dmul>
 801ff94:	4602      	mov	r2, r0
 801ff96:	460b      	mov	r3, r1
 801ff98:	4620      	mov	r0, r4
 801ff9a:	4629      	mov	r1, r5
 801ff9c:	f7e0 f97e 	bl	800029c <__adddf3>
 801ffa0:	4604      	mov	r4, r0
 801ffa2:	460d      	mov	r5, r1
 801ffa4:	ec45 4b10 	vmov	d0, r4, r5
 801ffa8:	b005      	add	sp, #20
 801ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ffb2:	4b1b      	ldr	r3, [pc, #108]	@ (8020020 <__kernel_sin+0x148>)
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	f7e0 fb27 	bl	8000608 <__aeabi_dmul>
 801ffba:	4632      	mov	r2, r6
 801ffbc:	4680      	mov	r8, r0
 801ffbe:	4689      	mov	r9, r1
 801ffc0:	463b      	mov	r3, r7
 801ffc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ffc6:	f7e0 fb1f 	bl	8000608 <__aeabi_dmul>
 801ffca:	4602      	mov	r2, r0
 801ffcc:	460b      	mov	r3, r1
 801ffce:	4640      	mov	r0, r8
 801ffd0:	4649      	mov	r1, r9
 801ffd2:	f7e0 f961 	bl	8000298 <__aeabi_dsub>
 801ffd6:	4652      	mov	r2, sl
 801ffd8:	465b      	mov	r3, fp
 801ffda:	f7e0 fb15 	bl	8000608 <__aeabi_dmul>
 801ffde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ffe2:	f7e0 f959 	bl	8000298 <__aeabi_dsub>
 801ffe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8020018 <__kernel_sin+0x140>)
 801ffe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffec:	4606      	mov	r6, r0
 801ffee:	460f      	mov	r7, r1
 801fff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fff4:	f7e0 fb08 	bl	8000608 <__aeabi_dmul>
 801fff8:	4602      	mov	r2, r0
 801fffa:	460b      	mov	r3, r1
 801fffc:	4630      	mov	r0, r6
 801fffe:	4639      	mov	r1, r7
 8020000:	f7e0 f94c 	bl	800029c <__adddf3>
 8020004:	4602      	mov	r2, r0
 8020006:	460b      	mov	r3, r1
 8020008:	4620      	mov	r0, r4
 802000a:	4629      	mov	r1, r5
 802000c:	f7e0 f944 	bl	8000298 <__aeabi_dsub>
 8020010:	e7c6      	b.n	801ffa0 <__kernel_sin+0xc8>
 8020012:	bf00      	nop
 8020014:	f3af 8000 	nop.w
 8020018:	55555549 	.word	0x55555549
 802001c:	3fc55555 	.word	0x3fc55555
 8020020:	3fe00000 	.word	0x3fe00000
 8020024:	5acfd57c 	.word	0x5acfd57c
 8020028:	3de5d93a 	.word	0x3de5d93a
 802002c:	8a2b9ceb 	.word	0x8a2b9ceb
 8020030:	3e5ae5e6 	.word	0x3e5ae5e6
 8020034:	57b1fe7d 	.word	0x57b1fe7d
 8020038:	3ec71de3 	.word	0x3ec71de3
 802003c:	19c161d5 	.word	0x19c161d5
 8020040:	3f2a01a0 	.word	0x3f2a01a0
 8020044:	1110f8a6 	.word	0x1110f8a6
 8020048:	3f811111 	.word	0x3f811111
 802004c:	00000000 	.word	0x00000000

08020050 <__kernel_tan>:
 8020050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020054:	ec5b ab10 	vmov	sl, fp, d0
 8020058:	4bdb      	ldr	r3, [pc, #876]	@ (80203c8 <__kernel_tan+0x378>)
 802005a:	b089      	sub	sp, #36	@ 0x24
 802005c:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8020060:	429f      	cmp	r7, r3
 8020062:	ec59 8b11 	vmov	r8, r9, d1
 8020066:	4606      	mov	r6, r0
 8020068:	f8cd b008 	str.w	fp, [sp, #8]
 802006c:	d85d      	bhi.n	802012a <__kernel_tan+0xda>
 802006e:	4650      	mov	r0, sl
 8020070:	4659      	mov	r1, fp
 8020072:	f7e0 fd79 	bl	8000b68 <__aeabi_d2iz>
 8020076:	4605      	mov	r5, r0
 8020078:	2800      	cmp	r0, #0
 802007a:	d17c      	bne.n	8020176 <__kernel_tan+0x126>
 802007c:	1c73      	adds	r3, r6, #1
 802007e:	4652      	mov	r2, sl
 8020080:	4313      	orrs	r3, r2
 8020082:	433b      	orrs	r3, r7
 8020084:	d110      	bne.n	80200a8 <__kernel_tan+0x58>
 8020086:	ec4b ab10 	vmov	d0, sl, fp
 802008a:	f7ff faf5 	bl	801f678 <fabs>
 802008e:	49cf      	ldr	r1, [pc, #828]	@ (80203cc <__kernel_tan+0x37c>)
 8020090:	ec53 2b10 	vmov	r2, r3, d0
 8020094:	2000      	movs	r0, #0
 8020096:	f7e0 fbe1 	bl	800085c <__aeabi_ddiv>
 802009a:	4682      	mov	sl, r0
 802009c:	468b      	mov	fp, r1
 802009e:	ec4b ab10 	vmov	d0, sl, fp
 80200a2:	b009      	add	sp, #36	@ 0x24
 80200a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200a8:	2e01      	cmp	r6, #1
 80200aa:	d0f8      	beq.n	802009e <__kernel_tan+0x4e>
 80200ac:	4642      	mov	r2, r8
 80200ae:	464b      	mov	r3, r9
 80200b0:	4650      	mov	r0, sl
 80200b2:	4659      	mov	r1, fp
 80200b4:	f7e0 f8f2 	bl	800029c <__adddf3>
 80200b8:	4602      	mov	r2, r0
 80200ba:	460b      	mov	r3, r1
 80200bc:	460f      	mov	r7, r1
 80200be:	2000      	movs	r0, #0
 80200c0:	49c3      	ldr	r1, [pc, #780]	@ (80203d0 <__kernel_tan+0x380>)
 80200c2:	f7e0 fbcb 	bl	800085c <__aeabi_ddiv>
 80200c6:	e9cd 0100 	strd	r0, r1, [sp]
 80200ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80200ce:	462e      	mov	r6, r5
 80200d0:	4652      	mov	r2, sl
 80200d2:	462c      	mov	r4, r5
 80200d4:	4630      	mov	r0, r6
 80200d6:	461d      	mov	r5, r3
 80200d8:	4639      	mov	r1, r7
 80200da:	465b      	mov	r3, fp
 80200dc:	f7e0 f8dc 	bl	8000298 <__aeabi_dsub>
 80200e0:	4602      	mov	r2, r0
 80200e2:	460b      	mov	r3, r1
 80200e4:	4640      	mov	r0, r8
 80200e6:	4649      	mov	r1, r9
 80200e8:	f7e0 f8d6 	bl	8000298 <__aeabi_dsub>
 80200ec:	4632      	mov	r2, r6
 80200ee:	462b      	mov	r3, r5
 80200f0:	f7e0 fa8a 	bl	8000608 <__aeabi_dmul>
 80200f4:	4632      	mov	r2, r6
 80200f6:	4682      	mov	sl, r0
 80200f8:	468b      	mov	fp, r1
 80200fa:	462b      	mov	r3, r5
 80200fc:	4630      	mov	r0, r6
 80200fe:	4639      	mov	r1, r7
 8020100:	f7e0 fa82 	bl	8000608 <__aeabi_dmul>
 8020104:	4bb1      	ldr	r3, [pc, #708]	@ (80203cc <__kernel_tan+0x37c>)
 8020106:	2200      	movs	r2, #0
 8020108:	f7e0 f8c8 	bl	800029c <__adddf3>
 802010c:	4602      	mov	r2, r0
 802010e:	460b      	mov	r3, r1
 8020110:	4650      	mov	r0, sl
 8020112:	4659      	mov	r1, fp
 8020114:	f7e0 f8c2 	bl	800029c <__adddf3>
 8020118:	e9dd 2300 	ldrd	r2, r3, [sp]
 802011c:	f7e0 fa74 	bl	8000608 <__aeabi_dmul>
 8020120:	4622      	mov	r2, r4
 8020122:	462b      	mov	r3, r5
 8020124:	f7e0 f8ba 	bl	800029c <__adddf3>
 8020128:	e7b7      	b.n	802009a <__kernel_tan+0x4a>
 802012a:	4baa      	ldr	r3, [pc, #680]	@ (80203d4 <__kernel_tan+0x384>)
 802012c:	429f      	cmp	r7, r3
 802012e:	d922      	bls.n	8020176 <__kernel_tan+0x126>
 8020130:	9b02      	ldr	r3, [sp, #8]
 8020132:	2b00      	cmp	r3, #0
 8020134:	da05      	bge.n	8020142 <__kernel_tan+0xf2>
 8020136:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802013a:	469b      	mov	fp, r3
 802013c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8020140:	4699      	mov	r9, r3
 8020142:	4652      	mov	r2, sl
 8020144:	465b      	mov	r3, fp
 8020146:	a182      	add	r1, pc, #520	@ (adr r1, 8020350 <__kernel_tan+0x300>)
 8020148:	e9d1 0100 	ldrd	r0, r1, [r1]
 802014c:	f7e0 f8a4 	bl	8000298 <__aeabi_dsub>
 8020150:	4642      	mov	r2, r8
 8020152:	464b      	mov	r3, r9
 8020154:	4604      	mov	r4, r0
 8020156:	460d      	mov	r5, r1
 8020158:	a17f      	add	r1, pc, #508	@ (adr r1, 8020358 <__kernel_tan+0x308>)
 802015a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802015e:	f7e0 f89b 	bl	8000298 <__aeabi_dsub>
 8020162:	4622      	mov	r2, r4
 8020164:	462b      	mov	r3, r5
 8020166:	f7e0 f899 	bl	800029c <__adddf3>
 802016a:	f04f 0800 	mov.w	r8, #0
 802016e:	4682      	mov	sl, r0
 8020170:	468b      	mov	fp, r1
 8020172:	f04f 0900 	mov.w	r9, #0
 8020176:	4652      	mov	r2, sl
 8020178:	465b      	mov	r3, fp
 802017a:	4650      	mov	r0, sl
 802017c:	4659      	mov	r1, fp
 802017e:	f7e0 fa43 	bl	8000608 <__aeabi_dmul>
 8020182:	4602      	mov	r2, r0
 8020184:	460b      	mov	r3, r1
 8020186:	e9cd 2300 	strd	r2, r3, [sp]
 802018a:	f7e0 fa3d 	bl	8000608 <__aeabi_dmul>
 802018e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020192:	4604      	mov	r4, r0
 8020194:	460d      	mov	r5, r1
 8020196:	4650      	mov	r0, sl
 8020198:	4659      	mov	r1, fp
 802019a:	f7e0 fa35 	bl	8000608 <__aeabi_dmul>
 802019e:	a370      	add	r3, pc, #448	@ (adr r3, 8020360 <__kernel_tan+0x310>)
 80201a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80201a8:	4620      	mov	r0, r4
 80201aa:	4629      	mov	r1, r5
 80201ac:	f7e0 fa2c 	bl	8000608 <__aeabi_dmul>
 80201b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8020368 <__kernel_tan+0x318>)
 80201b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201b6:	f7e0 f871 	bl	800029c <__adddf3>
 80201ba:	4622      	mov	r2, r4
 80201bc:	462b      	mov	r3, r5
 80201be:	f7e0 fa23 	bl	8000608 <__aeabi_dmul>
 80201c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8020370 <__kernel_tan+0x320>)
 80201c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201c8:	f7e0 f868 	bl	800029c <__adddf3>
 80201cc:	4622      	mov	r2, r4
 80201ce:	462b      	mov	r3, r5
 80201d0:	f7e0 fa1a 	bl	8000608 <__aeabi_dmul>
 80201d4:	a368      	add	r3, pc, #416	@ (adr r3, 8020378 <__kernel_tan+0x328>)
 80201d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201da:	f7e0 f85f 	bl	800029c <__adddf3>
 80201de:	4622      	mov	r2, r4
 80201e0:	462b      	mov	r3, r5
 80201e2:	f7e0 fa11 	bl	8000608 <__aeabi_dmul>
 80201e6:	a366      	add	r3, pc, #408	@ (adr r3, 8020380 <__kernel_tan+0x330>)
 80201e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201ec:	f7e0 f856 	bl	800029c <__adddf3>
 80201f0:	4622      	mov	r2, r4
 80201f2:	462b      	mov	r3, r5
 80201f4:	f7e0 fa08 	bl	8000608 <__aeabi_dmul>
 80201f8:	a363      	add	r3, pc, #396	@ (adr r3, 8020388 <__kernel_tan+0x338>)
 80201fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201fe:	f7e0 f84d 	bl	800029c <__adddf3>
 8020202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020206:	f7e0 f9ff 	bl	8000608 <__aeabi_dmul>
 802020a:	a361      	add	r3, pc, #388	@ (adr r3, 8020390 <__kernel_tan+0x340>)
 802020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020210:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020214:	4620      	mov	r0, r4
 8020216:	4629      	mov	r1, r5
 8020218:	f7e0 f9f6 	bl	8000608 <__aeabi_dmul>
 802021c:	a35e      	add	r3, pc, #376	@ (adr r3, 8020398 <__kernel_tan+0x348>)
 802021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020222:	f7e0 f83b 	bl	800029c <__adddf3>
 8020226:	4622      	mov	r2, r4
 8020228:	462b      	mov	r3, r5
 802022a:	f7e0 f9ed 	bl	8000608 <__aeabi_dmul>
 802022e:	a35c      	add	r3, pc, #368	@ (adr r3, 80203a0 <__kernel_tan+0x350>)
 8020230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020234:	f7e0 f832 	bl	800029c <__adddf3>
 8020238:	4622      	mov	r2, r4
 802023a:	462b      	mov	r3, r5
 802023c:	f7e0 f9e4 	bl	8000608 <__aeabi_dmul>
 8020240:	a359      	add	r3, pc, #356	@ (adr r3, 80203a8 <__kernel_tan+0x358>)
 8020242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020246:	f7e0 f829 	bl	800029c <__adddf3>
 802024a:	4622      	mov	r2, r4
 802024c:	462b      	mov	r3, r5
 802024e:	f7e0 f9db 	bl	8000608 <__aeabi_dmul>
 8020252:	a357      	add	r3, pc, #348	@ (adr r3, 80203b0 <__kernel_tan+0x360>)
 8020254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020258:	f7e0 f820 	bl	800029c <__adddf3>
 802025c:	4622      	mov	r2, r4
 802025e:	462b      	mov	r3, r5
 8020260:	f7e0 f9d2 	bl	8000608 <__aeabi_dmul>
 8020264:	a354      	add	r3, pc, #336	@ (adr r3, 80203b8 <__kernel_tan+0x368>)
 8020266:	e9d3 2300 	ldrd	r2, r3, [r3]
 802026a:	f7e0 f817 	bl	800029c <__adddf3>
 802026e:	4602      	mov	r2, r0
 8020270:	460b      	mov	r3, r1
 8020272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020276:	f7e0 f811 	bl	800029c <__adddf3>
 802027a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802027e:	f7e0 f9c3 	bl	8000608 <__aeabi_dmul>
 8020282:	4642      	mov	r2, r8
 8020284:	464b      	mov	r3, r9
 8020286:	f7e0 f809 	bl	800029c <__adddf3>
 802028a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802028e:	f7e0 f9bb 	bl	8000608 <__aeabi_dmul>
 8020292:	4642      	mov	r2, r8
 8020294:	464b      	mov	r3, r9
 8020296:	f7e0 f801 	bl	800029c <__adddf3>
 802029a:	a349      	add	r3, pc, #292	@ (adr r3, 80203c0 <__kernel_tan+0x370>)
 802029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202a0:	4604      	mov	r4, r0
 80202a2:	460d      	mov	r5, r1
 80202a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80202a8:	f7e0 f9ae 	bl	8000608 <__aeabi_dmul>
 80202ac:	4622      	mov	r2, r4
 80202ae:	462b      	mov	r3, r5
 80202b0:	f7df fff4 	bl	800029c <__adddf3>
 80202b4:	e9cd 0100 	strd	r0, r1, [sp]
 80202b8:	460b      	mov	r3, r1
 80202ba:	4602      	mov	r2, r0
 80202bc:	4659      	mov	r1, fp
 80202be:	4650      	mov	r0, sl
 80202c0:	f7df ffec 	bl	800029c <__adddf3>
 80202c4:	4b43      	ldr	r3, [pc, #268]	@ (80203d4 <__kernel_tan+0x384>)
 80202c6:	429f      	cmp	r7, r3
 80202c8:	4604      	mov	r4, r0
 80202ca:	460d      	mov	r5, r1
 80202cc:	f240 8084 	bls.w	80203d8 <__kernel_tan+0x388>
 80202d0:	4630      	mov	r0, r6
 80202d2:	f7e0 f92f 	bl	8000534 <__aeabi_i2d>
 80202d6:	4622      	mov	r2, r4
 80202d8:	4680      	mov	r8, r0
 80202da:	4689      	mov	r9, r1
 80202dc:	462b      	mov	r3, r5
 80202de:	4620      	mov	r0, r4
 80202e0:	4629      	mov	r1, r5
 80202e2:	f7e0 f991 	bl	8000608 <__aeabi_dmul>
 80202e6:	4642      	mov	r2, r8
 80202e8:	4606      	mov	r6, r0
 80202ea:	460f      	mov	r7, r1
 80202ec:	464b      	mov	r3, r9
 80202ee:	4620      	mov	r0, r4
 80202f0:	4629      	mov	r1, r5
 80202f2:	f7df ffd3 	bl	800029c <__adddf3>
 80202f6:	4602      	mov	r2, r0
 80202f8:	460b      	mov	r3, r1
 80202fa:	4630      	mov	r0, r6
 80202fc:	4639      	mov	r1, r7
 80202fe:	f7e0 faad 	bl	800085c <__aeabi_ddiv>
 8020302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020306:	f7df ffc7 	bl	8000298 <__aeabi_dsub>
 802030a:	4602      	mov	r2, r0
 802030c:	460b      	mov	r3, r1
 802030e:	4650      	mov	r0, sl
 8020310:	4659      	mov	r1, fp
 8020312:	f7df ffc1 	bl	8000298 <__aeabi_dsub>
 8020316:	4602      	mov	r2, r0
 8020318:	460b      	mov	r3, r1
 802031a:	f7df ffbf 	bl	800029c <__adddf3>
 802031e:	4602      	mov	r2, r0
 8020320:	460b      	mov	r3, r1
 8020322:	4640      	mov	r0, r8
 8020324:	4649      	mov	r1, r9
 8020326:	f7df ffb7 	bl	8000298 <__aeabi_dsub>
 802032a:	9b02      	ldr	r3, [sp, #8]
 802032c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8020330:	f00a 0a02 	and.w	sl, sl, #2
 8020334:	4604      	mov	r4, r0
 8020336:	f1ca 0001 	rsb	r0, sl, #1
 802033a:	460d      	mov	r5, r1
 802033c:	f7e0 f8fa 	bl	8000534 <__aeabi_i2d>
 8020340:	4602      	mov	r2, r0
 8020342:	460b      	mov	r3, r1
 8020344:	4620      	mov	r0, r4
 8020346:	4629      	mov	r1, r5
 8020348:	f7e0 f95e 	bl	8000608 <__aeabi_dmul>
 802034c:	e6a5      	b.n	802009a <__kernel_tan+0x4a>
 802034e:	bf00      	nop
 8020350:	54442d18 	.word	0x54442d18
 8020354:	3fe921fb 	.word	0x3fe921fb
 8020358:	33145c07 	.word	0x33145c07
 802035c:	3c81a626 	.word	0x3c81a626
 8020360:	74bf7ad4 	.word	0x74bf7ad4
 8020364:	3efb2a70 	.word	0x3efb2a70
 8020368:	32f0a7e9 	.word	0x32f0a7e9
 802036c:	3f12b80f 	.word	0x3f12b80f
 8020370:	1a8d1068 	.word	0x1a8d1068
 8020374:	3f3026f7 	.word	0x3f3026f7
 8020378:	fee08315 	.word	0xfee08315
 802037c:	3f57dbc8 	.word	0x3f57dbc8
 8020380:	e96e8493 	.word	0xe96e8493
 8020384:	3f8226e3 	.word	0x3f8226e3
 8020388:	1bb341fe 	.word	0x1bb341fe
 802038c:	3faba1ba 	.word	0x3faba1ba
 8020390:	db605373 	.word	0xdb605373
 8020394:	bef375cb 	.word	0xbef375cb
 8020398:	a03792a6 	.word	0xa03792a6
 802039c:	3f147e88 	.word	0x3f147e88
 80203a0:	f2f26501 	.word	0xf2f26501
 80203a4:	3f4344d8 	.word	0x3f4344d8
 80203a8:	c9560328 	.word	0xc9560328
 80203ac:	3f6d6d22 	.word	0x3f6d6d22
 80203b0:	8406d637 	.word	0x8406d637
 80203b4:	3f9664f4 	.word	0x3f9664f4
 80203b8:	1110fe7a 	.word	0x1110fe7a
 80203bc:	3fc11111 	.word	0x3fc11111
 80203c0:	55555563 	.word	0x55555563
 80203c4:	3fd55555 	.word	0x3fd55555
 80203c8:	3e2fffff 	.word	0x3e2fffff
 80203cc:	3ff00000 	.word	0x3ff00000
 80203d0:	bff00000 	.word	0xbff00000
 80203d4:	3fe59427 	.word	0x3fe59427
 80203d8:	2e01      	cmp	r6, #1
 80203da:	d033      	beq.n	8020444 <__kernel_tan+0x3f4>
 80203dc:	f04f 0800 	mov.w	r8, #0
 80203e0:	4689      	mov	r9, r1
 80203e2:	4602      	mov	r2, r0
 80203e4:	460b      	mov	r3, r1
 80203e6:	2000      	movs	r0, #0
 80203e8:	4918      	ldr	r1, [pc, #96]	@ (802044c <__kernel_tan+0x3fc>)
 80203ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80203ee:	f7e0 fa35 	bl	800085c <__aeabi_ddiv>
 80203f2:	4652      	mov	r2, sl
 80203f4:	460f      	mov	r7, r1
 80203f6:	465b      	mov	r3, fp
 80203f8:	4606      	mov	r6, r0
 80203fa:	460d      	mov	r5, r1
 80203fc:	4640      	mov	r0, r8
 80203fe:	4649      	mov	r1, r9
 8020400:	f7df ff4a 	bl	8000298 <__aeabi_dsub>
 8020404:	4602      	mov	r2, r0
 8020406:	460b      	mov	r3, r1
 8020408:	e9dd 0100 	ldrd	r0, r1, [sp]
 802040c:	f7df ff44 	bl	8000298 <__aeabi_dsub>
 8020410:	4642      	mov	r2, r8
 8020412:	463b      	mov	r3, r7
 8020414:	f7e0 f8f8 	bl	8000608 <__aeabi_dmul>
 8020418:	4642      	mov	r2, r8
 802041a:	4682      	mov	sl, r0
 802041c:	468b      	mov	fp, r1
 802041e:	463b      	mov	r3, r7
 8020420:	4640      	mov	r0, r8
 8020422:	4649      	mov	r1, r9
 8020424:	f7e0 f8f0 	bl	8000608 <__aeabi_dmul>
 8020428:	4b09      	ldr	r3, [pc, #36]	@ (8020450 <__kernel_tan+0x400>)
 802042a:	2200      	movs	r2, #0
 802042c:	f7df ff36 	bl	800029c <__adddf3>
 8020430:	4602      	mov	r2, r0
 8020432:	460b      	mov	r3, r1
 8020434:	4650      	mov	r0, sl
 8020436:	4659      	mov	r1, fp
 8020438:	f7df ff30 	bl	800029c <__adddf3>
 802043c:	4644      	mov	r4, r8
 802043e:	4632      	mov	r2, r6
 8020440:	463b      	mov	r3, r7
 8020442:	e66b      	b.n	802011c <__kernel_tan+0xcc>
 8020444:	4682      	mov	sl, r0
 8020446:	468b      	mov	fp, r1
 8020448:	e629      	b.n	802009e <__kernel_tan+0x4e>
 802044a:	bf00      	nop
 802044c:	bff00000 	.word	0xbff00000
 8020450:	3ff00000 	.word	0x3ff00000
 8020454:	00000000 	.word	0x00000000

08020458 <__ieee754_acos>:
 8020458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802045c:	ec55 4b10 	vmov	r4, r5, d0
 8020460:	49b7      	ldr	r1, [pc, #732]	@ (8020740 <__ieee754_acos+0x2e8>)
 8020462:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8020466:	428b      	cmp	r3, r1
 8020468:	d919      	bls.n	802049e <__ieee754_acos+0x46>
 802046a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 802046e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8020472:	4323      	orrs	r3, r4
 8020474:	d106      	bne.n	8020484 <__ieee754_acos+0x2c>
 8020476:	2d00      	cmp	r5, #0
 8020478:	f340 8210 	ble.w	802089c <__ieee754_acos+0x444>
 802047c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 80206d0 <__ieee754_acos+0x278>
 8020480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020484:	4622      	mov	r2, r4
 8020486:	462b      	mov	r3, r5
 8020488:	4620      	mov	r0, r4
 802048a:	4629      	mov	r1, r5
 802048c:	f7df ff04 	bl	8000298 <__aeabi_dsub>
 8020490:	4602      	mov	r2, r0
 8020492:	460b      	mov	r3, r1
 8020494:	f7e0 f9e2 	bl	800085c <__aeabi_ddiv>
 8020498:	ec41 0b10 	vmov	d0, r0, r1
 802049c:	e7f0      	b.n	8020480 <__ieee754_acos+0x28>
 802049e:	49a9      	ldr	r1, [pc, #676]	@ (8020744 <__ieee754_acos+0x2ec>)
 80204a0:	428b      	cmp	r3, r1
 80204a2:	f200 8085 	bhi.w	80205b0 <__ieee754_acos+0x158>
 80204a6:	4aa8      	ldr	r2, [pc, #672]	@ (8020748 <__ieee754_acos+0x2f0>)
 80204a8:	4293      	cmp	r3, r2
 80204aa:	f240 81fa 	bls.w	80208a2 <__ieee754_acos+0x44a>
 80204ae:	4622      	mov	r2, r4
 80204b0:	462b      	mov	r3, r5
 80204b2:	4620      	mov	r0, r4
 80204b4:	4629      	mov	r1, r5
 80204b6:	f7e0 f8a7 	bl	8000608 <__aeabi_dmul>
 80204ba:	a387      	add	r3, pc, #540	@ (adr r3, 80206d8 <__ieee754_acos+0x280>)
 80204bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204c0:	4606      	mov	r6, r0
 80204c2:	460f      	mov	r7, r1
 80204c4:	f7e0 f8a0 	bl	8000608 <__aeabi_dmul>
 80204c8:	a385      	add	r3, pc, #532	@ (adr r3, 80206e0 <__ieee754_acos+0x288>)
 80204ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204ce:	f7df fee5 	bl	800029c <__adddf3>
 80204d2:	4632      	mov	r2, r6
 80204d4:	463b      	mov	r3, r7
 80204d6:	f7e0 f897 	bl	8000608 <__aeabi_dmul>
 80204da:	a383      	add	r3, pc, #524	@ (adr r3, 80206e8 <__ieee754_acos+0x290>)
 80204dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204e0:	f7df feda 	bl	8000298 <__aeabi_dsub>
 80204e4:	4632      	mov	r2, r6
 80204e6:	463b      	mov	r3, r7
 80204e8:	f7e0 f88e 	bl	8000608 <__aeabi_dmul>
 80204ec:	a380      	add	r3, pc, #512	@ (adr r3, 80206f0 <__ieee754_acos+0x298>)
 80204ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204f2:	f7df fed3 	bl	800029c <__adddf3>
 80204f6:	4632      	mov	r2, r6
 80204f8:	463b      	mov	r3, r7
 80204fa:	f7e0 f885 	bl	8000608 <__aeabi_dmul>
 80204fe:	a37e      	add	r3, pc, #504	@ (adr r3, 80206f8 <__ieee754_acos+0x2a0>)
 8020500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020504:	f7df fec8 	bl	8000298 <__aeabi_dsub>
 8020508:	4632      	mov	r2, r6
 802050a:	463b      	mov	r3, r7
 802050c:	f7e0 f87c 	bl	8000608 <__aeabi_dmul>
 8020510:	a37b      	add	r3, pc, #492	@ (adr r3, 8020700 <__ieee754_acos+0x2a8>)
 8020512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020516:	f7df fec1 	bl	800029c <__adddf3>
 802051a:	4632      	mov	r2, r6
 802051c:	463b      	mov	r3, r7
 802051e:	f7e0 f873 	bl	8000608 <__aeabi_dmul>
 8020522:	a379      	add	r3, pc, #484	@ (adr r3, 8020708 <__ieee754_acos+0x2b0>)
 8020524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020528:	4680      	mov	r8, r0
 802052a:	4689      	mov	r9, r1
 802052c:	4630      	mov	r0, r6
 802052e:	4639      	mov	r1, r7
 8020530:	f7e0 f86a 	bl	8000608 <__aeabi_dmul>
 8020534:	a376      	add	r3, pc, #472	@ (adr r3, 8020710 <__ieee754_acos+0x2b8>)
 8020536:	e9d3 2300 	ldrd	r2, r3, [r3]
 802053a:	f7df fead 	bl	8000298 <__aeabi_dsub>
 802053e:	4632      	mov	r2, r6
 8020540:	463b      	mov	r3, r7
 8020542:	f7e0 f861 	bl	8000608 <__aeabi_dmul>
 8020546:	a374      	add	r3, pc, #464	@ (adr r3, 8020718 <__ieee754_acos+0x2c0>)
 8020548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802054c:	f7df fea6 	bl	800029c <__adddf3>
 8020550:	4632      	mov	r2, r6
 8020552:	463b      	mov	r3, r7
 8020554:	f7e0 f858 	bl	8000608 <__aeabi_dmul>
 8020558:	a371      	add	r3, pc, #452	@ (adr r3, 8020720 <__ieee754_acos+0x2c8>)
 802055a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802055e:	f7df fe9b 	bl	8000298 <__aeabi_dsub>
 8020562:	4632      	mov	r2, r6
 8020564:	463b      	mov	r3, r7
 8020566:	f7e0 f84f 	bl	8000608 <__aeabi_dmul>
 802056a:	4b78      	ldr	r3, [pc, #480]	@ (802074c <__ieee754_acos+0x2f4>)
 802056c:	2200      	movs	r2, #0
 802056e:	f7df fe95 	bl	800029c <__adddf3>
 8020572:	4602      	mov	r2, r0
 8020574:	460b      	mov	r3, r1
 8020576:	4640      	mov	r0, r8
 8020578:	4649      	mov	r1, r9
 802057a:	f7e0 f96f 	bl	800085c <__aeabi_ddiv>
 802057e:	4622      	mov	r2, r4
 8020580:	462b      	mov	r3, r5
 8020582:	f7e0 f841 	bl	8000608 <__aeabi_dmul>
 8020586:	4602      	mov	r2, r0
 8020588:	460b      	mov	r3, r1
 802058a:	a167      	add	r1, pc, #412	@ (adr r1, 8020728 <__ieee754_acos+0x2d0>)
 802058c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020590:	f7df fe82 	bl	8000298 <__aeabi_dsub>
 8020594:	4602      	mov	r2, r0
 8020596:	460b      	mov	r3, r1
 8020598:	4620      	mov	r0, r4
 802059a:	4629      	mov	r1, r5
 802059c:	f7df fe7c 	bl	8000298 <__aeabi_dsub>
 80205a0:	4602      	mov	r2, r0
 80205a2:	460b      	mov	r3, r1
 80205a4:	a162      	add	r1, pc, #392	@ (adr r1, 8020730 <__ieee754_acos+0x2d8>)
 80205a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80205aa:	f7df fe75 	bl	8000298 <__aeabi_dsub>
 80205ae:	e773      	b.n	8020498 <__ieee754_acos+0x40>
 80205b0:	2d00      	cmp	r5, #0
 80205b2:	f280 80cf 	bge.w	8020754 <__ieee754_acos+0x2fc>
 80205b6:	4b65      	ldr	r3, [pc, #404]	@ (802074c <__ieee754_acos+0x2f4>)
 80205b8:	2200      	movs	r2, #0
 80205ba:	4620      	mov	r0, r4
 80205bc:	4629      	mov	r1, r5
 80205be:	f7df fe6d 	bl	800029c <__adddf3>
 80205c2:	4b63      	ldr	r3, [pc, #396]	@ (8020750 <__ieee754_acos+0x2f8>)
 80205c4:	2200      	movs	r2, #0
 80205c6:	f7e0 f81f 	bl	8000608 <__aeabi_dmul>
 80205ca:	a343      	add	r3, pc, #268	@ (adr r3, 80206d8 <__ieee754_acos+0x280>)
 80205cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205d0:	4604      	mov	r4, r0
 80205d2:	460d      	mov	r5, r1
 80205d4:	f7e0 f818 	bl	8000608 <__aeabi_dmul>
 80205d8:	a341      	add	r3, pc, #260	@ (adr r3, 80206e0 <__ieee754_acos+0x288>)
 80205da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205de:	f7df fe5d 	bl	800029c <__adddf3>
 80205e2:	4622      	mov	r2, r4
 80205e4:	462b      	mov	r3, r5
 80205e6:	f7e0 f80f 	bl	8000608 <__aeabi_dmul>
 80205ea:	a33f      	add	r3, pc, #252	@ (adr r3, 80206e8 <__ieee754_acos+0x290>)
 80205ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205f0:	f7df fe52 	bl	8000298 <__aeabi_dsub>
 80205f4:	4622      	mov	r2, r4
 80205f6:	462b      	mov	r3, r5
 80205f8:	f7e0 f806 	bl	8000608 <__aeabi_dmul>
 80205fc:	a33c      	add	r3, pc, #240	@ (adr r3, 80206f0 <__ieee754_acos+0x298>)
 80205fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020602:	f7df fe4b 	bl	800029c <__adddf3>
 8020606:	4622      	mov	r2, r4
 8020608:	462b      	mov	r3, r5
 802060a:	f7df fffd 	bl	8000608 <__aeabi_dmul>
 802060e:	a33a      	add	r3, pc, #232	@ (adr r3, 80206f8 <__ieee754_acos+0x2a0>)
 8020610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020614:	f7df fe40 	bl	8000298 <__aeabi_dsub>
 8020618:	4622      	mov	r2, r4
 802061a:	462b      	mov	r3, r5
 802061c:	f7df fff4 	bl	8000608 <__aeabi_dmul>
 8020620:	a337      	add	r3, pc, #220	@ (adr r3, 8020700 <__ieee754_acos+0x2a8>)
 8020622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020626:	f7df fe39 	bl	800029c <__adddf3>
 802062a:	4622      	mov	r2, r4
 802062c:	462b      	mov	r3, r5
 802062e:	f7df ffeb 	bl	8000608 <__aeabi_dmul>
 8020632:	a335      	add	r3, pc, #212	@ (adr r3, 8020708 <__ieee754_acos+0x2b0>)
 8020634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020638:	4606      	mov	r6, r0
 802063a:	460f      	mov	r7, r1
 802063c:	4620      	mov	r0, r4
 802063e:	4629      	mov	r1, r5
 8020640:	f7df ffe2 	bl	8000608 <__aeabi_dmul>
 8020644:	a332      	add	r3, pc, #200	@ (adr r3, 8020710 <__ieee754_acos+0x2b8>)
 8020646:	e9d3 2300 	ldrd	r2, r3, [r3]
 802064a:	f7df fe25 	bl	8000298 <__aeabi_dsub>
 802064e:	4622      	mov	r2, r4
 8020650:	462b      	mov	r3, r5
 8020652:	f7df ffd9 	bl	8000608 <__aeabi_dmul>
 8020656:	a330      	add	r3, pc, #192	@ (adr r3, 8020718 <__ieee754_acos+0x2c0>)
 8020658:	e9d3 2300 	ldrd	r2, r3, [r3]
 802065c:	f7df fe1e 	bl	800029c <__adddf3>
 8020660:	4622      	mov	r2, r4
 8020662:	462b      	mov	r3, r5
 8020664:	f7df ffd0 	bl	8000608 <__aeabi_dmul>
 8020668:	a32d      	add	r3, pc, #180	@ (adr r3, 8020720 <__ieee754_acos+0x2c8>)
 802066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802066e:	f7df fe13 	bl	8000298 <__aeabi_dsub>
 8020672:	4622      	mov	r2, r4
 8020674:	462b      	mov	r3, r5
 8020676:	f7df ffc7 	bl	8000608 <__aeabi_dmul>
 802067a:	4b34      	ldr	r3, [pc, #208]	@ (802074c <__ieee754_acos+0x2f4>)
 802067c:	2200      	movs	r2, #0
 802067e:	f7df fe0d 	bl	800029c <__adddf3>
 8020682:	ec45 4b10 	vmov	d0, r4, r5
 8020686:	4680      	mov	r8, r0
 8020688:	4689      	mov	r9, r1
 802068a:	f7ff f98b 	bl	801f9a4 <__ieee754_sqrt>
 802068e:	ec55 4b10 	vmov	r4, r5, d0
 8020692:	4642      	mov	r2, r8
 8020694:	464b      	mov	r3, r9
 8020696:	4630      	mov	r0, r6
 8020698:	4639      	mov	r1, r7
 802069a:	f7e0 f8df 	bl	800085c <__aeabi_ddiv>
 802069e:	4622      	mov	r2, r4
 80206a0:	462b      	mov	r3, r5
 80206a2:	f7df ffb1 	bl	8000608 <__aeabi_dmul>
 80206a6:	a320      	add	r3, pc, #128	@ (adr r3, 8020728 <__ieee754_acos+0x2d0>)
 80206a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ac:	f7df fdf4 	bl	8000298 <__aeabi_dsub>
 80206b0:	4622      	mov	r2, r4
 80206b2:	462b      	mov	r3, r5
 80206b4:	f7df fdf2 	bl	800029c <__adddf3>
 80206b8:	4602      	mov	r2, r0
 80206ba:	460b      	mov	r3, r1
 80206bc:	f7df fdee 	bl	800029c <__adddf3>
 80206c0:	4602      	mov	r2, r0
 80206c2:	460b      	mov	r3, r1
 80206c4:	a11c      	add	r1, pc, #112	@ (adr r1, 8020738 <__ieee754_acos+0x2e0>)
 80206c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80206ca:	e76e      	b.n	80205aa <__ieee754_acos+0x152>
 80206cc:	f3af 8000 	nop.w
	...
 80206d8:	0dfdf709 	.word	0x0dfdf709
 80206dc:	3f023de1 	.word	0x3f023de1
 80206e0:	7501b288 	.word	0x7501b288
 80206e4:	3f49efe0 	.word	0x3f49efe0
 80206e8:	b5688f3b 	.word	0xb5688f3b
 80206ec:	3fa48228 	.word	0x3fa48228
 80206f0:	0e884455 	.word	0x0e884455
 80206f4:	3fc9c155 	.word	0x3fc9c155
 80206f8:	03eb6f7d 	.word	0x03eb6f7d
 80206fc:	3fd4d612 	.word	0x3fd4d612
 8020700:	55555555 	.word	0x55555555
 8020704:	3fc55555 	.word	0x3fc55555
 8020708:	b12e9282 	.word	0xb12e9282
 802070c:	3fb3b8c5 	.word	0x3fb3b8c5
 8020710:	1b8d0159 	.word	0x1b8d0159
 8020714:	3fe6066c 	.word	0x3fe6066c
 8020718:	9c598ac8 	.word	0x9c598ac8
 802071c:	40002ae5 	.word	0x40002ae5
 8020720:	1c8a2d4b 	.word	0x1c8a2d4b
 8020724:	40033a27 	.word	0x40033a27
 8020728:	33145c07 	.word	0x33145c07
 802072c:	3c91a626 	.word	0x3c91a626
 8020730:	54442d18 	.word	0x54442d18
 8020734:	3ff921fb 	.word	0x3ff921fb
 8020738:	54442d18 	.word	0x54442d18
 802073c:	400921fb 	.word	0x400921fb
 8020740:	3fefffff 	.word	0x3fefffff
 8020744:	3fdfffff 	.word	0x3fdfffff
 8020748:	3c600000 	.word	0x3c600000
 802074c:	3ff00000 	.word	0x3ff00000
 8020750:	3fe00000 	.word	0x3fe00000
 8020754:	4622      	mov	r2, r4
 8020756:	462b      	mov	r3, r5
 8020758:	496b      	ldr	r1, [pc, #428]	@ (8020908 <__ieee754_acos+0x4b0>)
 802075a:	2000      	movs	r0, #0
 802075c:	f7df fd9c 	bl	8000298 <__aeabi_dsub>
 8020760:	4b6a      	ldr	r3, [pc, #424]	@ (802090c <__ieee754_acos+0x4b4>)
 8020762:	2200      	movs	r2, #0
 8020764:	f7df ff50 	bl	8000608 <__aeabi_dmul>
 8020768:	4604      	mov	r4, r0
 802076a:	460d      	mov	r5, r1
 802076c:	ec45 4b10 	vmov	d0, r4, r5
 8020770:	f7ff f918 	bl	801f9a4 <__ieee754_sqrt>
 8020774:	a34c      	add	r3, pc, #304	@ (adr r3, 80208a8 <__ieee754_acos+0x450>)
 8020776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802077a:	4620      	mov	r0, r4
 802077c:	4629      	mov	r1, r5
 802077e:	ec59 8b10 	vmov	r8, r9, d0
 8020782:	f7df ff41 	bl	8000608 <__aeabi_dmul>
 8020786:	a34a      	add	r3, pc, #296	@ (adr r3, 80208b0 <__ieee754_acos+0x458>)
 8020788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802078c:	f7df fd86 	bl	800029c <__adddf3>
 8020790:	4622      	mov	r2, r4
 8020792:	462b      	mov	r3, r5
 8020794:	f7df ff38 	bl	8000608 <__aeabi_dmul>
 8020798:	a347      	add	r3, pc, #284	@ (adr r3, 80208b8 <__ieee754_acos+0x460>)
 802079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802079e:	f7df fd7b 	bl	8000298 <__aeabi_dsub>
 80207a2:	4622      	mov	r2, r4
 80207a4:	462b      	mov	r3, r5
 80207a6:	f7df ff2f 	bl	8000608 <__aeabi_dmul>
 80207aa:	a345      	add	r3, pc, #276	@ (adr r3, 80208c0 <__ieee754_acos+0x468>)
 80207ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207b0:	f7df fd74 	bl	800029c <__adddf3>
 80207b4:	4622      	mov	r2, r4
 80207b6:	462b      	mov	r3, r5
 80207b8:	f7df ff26 	bl	8000608 <__aeabi_dmul>
 80207bc:	a342      	add	r3, pc, #264	@ (adr r3, 80208c8 <__ieee754_acos+0x470>)
 80207be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207c2:	f7df fd69 	bl	8000298 <__aeabi_dsub>
 80207c6:	4622      	mov	r2, r4
 80207c8:	462b      	mov	r3, r5
 80207ca:	f7df ff1d 	bl	8000608 <__aeabi_dmul>
 80207ce:	a340      	add	r3, pc, #256	@ (adr r3, 80208d0 <__ieee754_acos+0x478>)
 80207d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207d4:	f7df fd62 	bl	800029c <__adddf3>
 80207d8:	4622      	mov	r2, r4
 80207da:	462b      	mov	r3, r5
 80207dc:	f7df ff14 	bl	8000608 <__aeabi_dmul>
 80207e0:	a33d      	add	r3, pc, #244	@ (adr r3, 80208d8 <__ieee754_acos+0x480>)
 80207e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207e6:	4682      	mov	sl, r0
 80207e8:	468b      	mov	fp, r1
 80207ea:	4620      	mov	r0, r4
 80207ec:	4629      	mov	r1, r5
 80207ee:	f7df ff0b 	bl	8000608 <__aeabi_dmul>
 80207f2:	a33b      	add	r3, pc, #236	@ (adr r3, 80208e0 <__ieee754_acos+0x488>)
 80207f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207f8:	f7df fd4e 	bl	8000298 <__aeabi_dsub>
 80207fc:	4622      	mov	r2, r4
 80207fe:	462b      	mov	r3, r5
 8020800:	f7df ff02 	bl	8000608 <__aeabi_dmul>
 8020804:	a338      	add	r3, pc, #224	@ (adr r3, 80208e8 <__ieee754_acos+0x490>)
 8020806:	e9d3 2300 	ldrd	r2, r3, [r3]
 802080a:	f7df fd47 	bl	800029c <__adddf3>
 802080e:	4622      	mov	r2, r4
 8020810:	462b      	mov	r3, r5
 8020812:	f7df fef9 	bl	8000608 <__aeabi_dmul>
 8020816:	a336      	add	r3, pc, #216	@ (adr r3, 80208f0 <__ieee754_acos+0x498>)
 8020818:	e9d3 2300 	ldrd	r2, r3, [r3]
 802081c:	f7df fd3c 	bl	8000298 <__aeabi_dsub>
 8020820:	4622      	mov	r2, r4
 8020822:	462b      	mov	r3, r5
 8020824:	f7df fef0 	bl	8000608 <__aeabi_dmul>
 8020828:	4b37      	ldr	r3, [pc, #220]	@ (8020908 <__ieee754_acos+0x4b0>)
 802082a:	2200      	movs	r2, #0
 802082c:	f7df fd36 	bl	800029c <__adddf3>
 8020830:	4602      	mov	r2, r0
 8020832:	460b      	mov	r3, r1
 8020834:	4650      	mov	r0, sl
 8020836:	4659      	mov	r1, fp
 8020838:	f7e0 f810 	bl	800085c <__aeabi_ddiv>
 802083c:	4642      	mov	r2, r8
 802083e:	464b      	mov	r3, r9
 8020840:	f7df fee2 	bl	8000608 <__aeabi_dmul>
 8020844:	2600      	movs	r6, #0
 8020846:	4682      	mov	sl, r0
 8020848:	468b      	mov	fp, r1
 802084a:	4632      	mov	r2, r6
 802084c:	464b      	mov	r3, r9
 802084e:	4630      	mov	r0, r6
 8020850:	4649      	mov	r1, r9
 8020852:	f7df fed9 	bl	8000608 <__aeabi_dmul>
 8020856:	4602      	mov	r2, r0
 8020858:	460b      	mov	r3, r1
 802085a:	4620      	mov	r0, r4
 802085c:	4629      	mov	r1, r5
 802085e:	f7df fd1b 	bl	8000298 <__aeabi_dsub>
 8020862:	4632      	mov	r2, r6
 8020864:	4604      	mov	r4, r0
 8020866:	460d      	mov	r5, r1
 8020868:	464b      	mov	r3, r9
 802086a:	4640      	mov	r0, r8
 802086c:	4649      	mov	r1, r9
 802086e:	f7df fd15 	bl	800029c <__adddf3>
 8020872:	4602      	mov	r2, r0
 8020874:	460b      	mov	r3, r1
 8020876:	4620      	mov	r0, r4
 8020878:	4629      	mov	r1, r5
 802087a:	f7df ffef 	bl	800085c <__aeabi_ddiv>
 802087e:	4602      	mov	r2, r0
 8020880:	460b      	mov	r3, r1
 8020882:	4650      	mov	r0, sl
 8020884:	4659      	mov	r1, fp
 8020886:	f7df fd09 	bl	800029c <__adddf3>
 802088a:	4632      	mov	r2, r6
 802088c:	464b      	mov	r3, r9
 802088e:	f7df fd05 	bl	800029c <__adddf3>
 8020892:	4602      	mov	r2, r0
 8020894:	460b      	mov	r3, r1
 8020896:	f7df fd01 	bl	800029c <__adddf3>
 802089a:	e5fd      	b.n	8020498 <__ieee754_acos+0x40>
 802089c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80208f8 <__ieee754_acos+0x4a0>
 80208a0:	e5ee      	b.n	8020480 <__ieee754_acos+0x28>
 80208a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8020900 <__ieee754_acos+0x4a8>
 80208a6:	e5eb      	b.n	8020480 <__ieee754_acos+0x28>
 80208a8:	0dfdf709 	.word	0x0dfdf709
 80208ac:	3f023de1 	.word	0x3f023de1
 80208b0:	7501b288 	.word	0x7501b288
 80208b4:	3f49efe0 	.word	0x3f49efe0
 80208b8:	b5688f3b 	.word	0xb5688f3b
 80208bc:	3fa48228 	.word	0x3fa48228
 80208c0:	0e884455 	.word	0x0e884455
 80208c4:	3fc9c155 	.word	0x3fc9c155
 80208c8:	03eb6f7d 	.word	0x03eb6f7d
 80208cc:	3fd4d612 	.word	0x3fd4d612
 80208d0:	55555555 	.word	0x55555555
 80208d4:	3fc55555 	.word	0x3fc55555
 80208d8:	b12e9282 	.word	0xb12e9282
 80208dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80208e0:	1b8d0159 	.word	0x1b8d0159
 80208e4:	3fe6066c 	.word	0x3fe6066c
 80208e8:	9c598ac8 	.word	0x9c598ac8
 80208ec:	40002ae5 	.word	0x40002ae5
 80208f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80208f4:	40033a27 	.word	0x40033a27
 80208f8:	54442d18 	.word	0x54442d18
 80208fc:	400921fb 	.word	0x400921fb
 8020900:	54442d18 	.word	0x54442d18
 8020904:	3ff921fb 	.word	0x3ff921fb
 8020908:	3ff00000 	.word	0x3ff00000
 802090c:	3fe00000 	.word	0x3fe00000

08020910 <__ieee754_asin>:
 8020910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020914:	ec55 4b10 	vmov	r4, r5, d0
 8020918:	4bc7      	ldr	r3, [pc, #796]	@ (8020c38 <__ieee754_asin+0x328>)
 802091a:	b087      	sub	sp, #28
 802091c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8020920:	429e      	cmp	r6, r3
 8020922:	9501      	str	r5, [sp, #4]
 8020924:	d92d      	bls.n	8020982 <__ieee754_asin+0x72>
 8020926:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 802092a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 802092e:	4326      	orrs	r6, r4
 8020930:	d116      	bne.n	8020960 <__ieee754_asin+0x50>
 8020932:	a3a7      	add	r3, pc, #668	@ (adr r3, 8020bd0 <__ieee754_asin+0x2c0>)
 8020934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020938:	4620      	mov	r0, r4
 802093a:	4629      	mov	r1, r5
 802093c:	f7df fe64 	bl	8000608 <__aeabi_dmul>
 8020940:	a3a5      	add	r3, pc, #660	@ (adr r3, 8020bd8 <__ieee754_asin+0x2c8>)
 8020942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020946:	4606      	mov	r6, r0
 8020948:	460f      	mov	r7, r1
 802094a:	4620      	mov	r0, r4
 802094c:	4629      	mov	r1, r5
 802094e:	f7df fe5b 	bl	8000608 <__aeabi_dmul>
 8020952:	4602      	mov	r2, r0
 8020954:	460b      	mov	r3, r1
 8020956:	4630      	mov	r0, r6
 8020958:	4639      	mov	r1, r7
 802095a:	f7df fc9f 	bl	800029c <__adddf3>
 802095e:	e009      	b.n	8020974 <__ieee754_asin+0x64>
 8020960:	4622      	mov	r2, r4
 8020962:	462b      	mov	r3, r5
 8020964:	4620      	mov	r0, r4
 8020966:	4629      	mov	r1, r5
 8020968:	f7df fc96 	bl	8000298 <__aeabi_dsub>
 802096c:	4602      	mov	r2, r0
 802096e:	460b      	mov	r3, r1
 8020970:	f7df ff74 	bl	800085c <__aeabi_ddiv>
 8020974:	4604      	mov	r4, r0
 8020976:	460d      	mov	r5, r1
 8020978:	ec45 4b10 	vmov	d0, r4, r5
 802097c:	b007      	add	sp, #28
 802097e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020982:	4bae      	ldr	r3, [pc, #696]	@ (8020c3c <__ieee754_asin+0x32c>)
 8020984:	429e      	cmp	r6, r3
 8020986:	d810      	bhi.n	80209aa <__ieee754_asin+0x9a>
 8020988:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 802098c:	f080 80ad 	bcs.w	8020aea <__ieee754_asin+0x1da>
 8020990:	a393      	add	r3, pc, #588	@ (adr r3, 8020be0 <__ieee754_asin+0x2d0>)
 8020992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020996:	4620      	mov	r0, r4
 8020998:	4629      	mov	r1, r5
 802099a:	f7df fc7f 	bl	800029c <__adddf3>
 802099e:	4ba8      	ldr	r3, [pc, #672]	@ (8020c40 <__ieee754_asin+0x330>)
 80209a0:	2200      	movs	r2, #0
 80209a2:	f7e0 f8c1 	bl	8000b28 <__aeabi_dcmpgt>
 80209a6:	2800      	cmp	r0, #0
 80209a8:	d1e6      	bne.n	8020978 <__ieee754_asin+0x68>
 80209aa:	ec45 4b10 	vmov	d0, r4, r5
 80209ae:	f7fe fe63 	bl	801f678 <fabs>
 80209b2:	49a3      	ldr	r1, [pc, #652]	@ (8020c40 <__ieee754_asin+0x330>)
 80209b4:	ec53 2b10 	vmov	r2, r3, d0
 80209b8:	2000      	movs	r0, #0
 80209ba:	f7df fc6d 	bl	8000298 <__aeabi_dsub>
 80209be:	4ba1      	ldr	r3, [pc, #644]	@ (8020c44 <__ieee754_asin+0x334>)
 80209c0:	2200      	movs	r2, #0
 80209c2:	f7df fe21 	bl	8000608 <__aeabi_dmul>
 80209c6:	a388      	add	r3, pc, #544	@ (adr r3, 8020be8 <__ieee754_asin+0x2d8>)
 80209c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209cc:	4604      	mov	r4, r0
 80209ce:	460d      	mov	r5, r1
 80209d0:	f7df fe1a 	bl	8000608 <__aeabi_dmul>
 80209d4:	a386      	add	r3, pc, #536	@ (adr r3, 8020bf0 <__ieee754_asin+0x2e0>)
 80209d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209da:	f7df fc5f 	bl	800029c <__adddf3>
 80209de:	4622      	mov	r2, r4
 80209e0:	462b      	mov	r3, r5
 80209e2:	f7df fe11 	bl	8000608 <__aeabi_dmul>
 80209e6:	a384      	add	r3, pc, #528	@ (adr r3, 8020bf8 <__ieee754_asin+0x2e8>)
 80209e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209ec:	f7df fc54 	bl	8000298 <__aeabi_dsub>
 80209f0:	4622      	mov	r2, r4
 80209f2:	462b      	mov	r3, r5
 80209f4:	f7df fe08 	bl	8000608 <__aeabi_dmul>
 80209f8:	a381      	add	r3, pc, #516	@ (adr r3, 8020c00 <__ieee754_asin+0x2f0>)
 80209fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209fe:	f7df fc4d 	bl	800029c <__adddf3>
 8020a02:	4622      	mov	r2, r4
 8020a04:	462b      	mov	r3, r5
 8020a06:	f7df fdff 	bl	8000608 <__aeabi_dmul>
 8020a0a:	a37f      	add	r3, pc, #508	@ (adr r3, 8020c08 <__ieee754_asin+0x2f8>)
 8020a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a10:	f7df fc42 	bl	8000298 <__aeabi_dsub>
 8020a14:	4622      	mov	r2, r4
 8020a16:	462b      	mov	r3, r5
 8020a18:	f7df fdf6 	bl	8000608 <__aeabi_dmul>
 8020a1c:	a37c      	add	r3, pc, #496	@ (adr r3, 8020c10 <__ieee754_asin+0x300>)
 8020a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a22:	f7df fc3b 	bl	800029c <__adddf3>
 8020a26:	4622      	mov	r2, r4
 8020a28:	462b      	mov	r3, r5
 8020a2a:	f7df fded 	bl	8000608 <__aeabi_dmul>
 8020a2e:	a37a      	add	r3, pc, #488	@ (adr r3, 8020c18 <__ieee754_asin+0x308>)
 8020a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020a38:	4620      	mov	r0, r4
 8020a3a:	4629      	mov	r1, r5
 8020a3c:	f7df fde4 	bl	8000608 <__aeabi_dmul>
 8020a40:	a377      	add	r3, pc, #476	@ (adr r3, 8020c20 <__ieee754_asin+0x310>)
 8020a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a46:	f7df fc27 	bl	8000298 <__aeabi_dsub>
 8020a4a:	4622      	mov	r2, r4
 8020a4c:	462b      	mov	r3, r5
 8020a4e:	f7df fddb 	bl	8000608 <__aeabi_dmul>
 8020a52:	a375      	add	r3, pc, #468	@ (adr r3, 8020c28 <__ieee754_asin+0x318>)
 8020a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a58:	f7df fc20 	bl	800029c <__adddf3>
 8020a5c:	4622      	mov	r2, r4
 8020a5e:	462b      	mov	r3, r5
 8020a60:	f7df fdd2 	bl	8000608 <__aeabi_dmul>
 8020a64:	a372      	add	r3, pc, #456	@ (adr r3, 8020c30 <__ieee754_asin+0x320>)
 8020a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a6a:	f7df fc15 	bl	8000298 <__aeabi_dsub>
 8020a6e:	4622      	mov	r2, r4
 8020a70:	462b      	mov	r3, r5
 8020a72:	f7df fdc9 	bl	8000608 <__aeabi_dmul>
 8020a76:	4b72      	ldr	r3, [pc, #456]	@ (8020c40 <__ieee754_asin+0x330>)
 8020a78:	2200      	movs	r2, #0
 8020a7a:	f7df fc0f 	bl	800029c <__adddf3>
 8020a7e:	ec45 4b10 	vmov	d0, r4, r5
 8020a82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020a86:	f7fe ff8d 	bl	801f9a4 <__ieee754_sqrt>
 8020a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8020c48 <__ieee754_asin+0x338>)
 8020a8c:	429e      	cmp	r6, r3
 8020a8e:	ec5b ab10 	vmov	sl, fp, d0
 8020a92:	f240 80db 	bls.w	8020c4c <__ieee754_asin+0x33c>
 8020a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020a9e:	f7df fedd 	bl	800085c <__aeabi_ddiv>
 8020aa2:	4652      	mov	r2, sl
 8020aa4:	465b      	mov	r3, fp
 8020aa6:	f7df fdaf 	bl	8000608 <__aeabi_dmul>
 8020aaa:	4652      	mov	r2, sl
 8020aac:	465b      	mov	r3, fp
 8020aae:	f7df fbf5 	bl	800029c <__adddf3>
 8020ab2:	4602      	mov	r2, r0
 8020ab4:	460b      	mov	r3, r1
 8020ab6:	f7df fbf1 	bl	800029c <__adddf3>
 8020aba:	a347      	add	r3, pc, #284	@ (adr r3, 8020bd8 <__ieee754_asin+0x2c8>)
 8020abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ac0:	f7df fbea 	bl	8000298 <__aeabi_dsub>
 8020ac4:	4602      	mov	r2, r0
 8020ac6:	460b      	mov	r3, r1
 8020ac8:	a141      	add	r1, pc, #260	@ (adr r1, 8020bd0 <__ieee754_asin+0x2c0>)
 8020aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ace:	f7df fbe3 	bl	8000298 <__aeabi_dsub>
 8020ad2:	9b01      	ldr	r3, [sp, #4]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	bfdc      	itt	le
 8020ad8:	4602      	movle	r2, r0
 8020ada:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8020ade:	4604      	mov	r4, r0
 8020ae0:	460d      	mov	r5, r1
 8020ae2:	bfdc      	itt	le
 8020ae4:	4614      	movle	r4, r2
 8020ae6:	461d      	movle	r5, r3
 8020ae8:	e746      	b.n	8020978 <__ieee754_asin+0x68>
 8020aea:	4622      	mov	r2, r4
 8020aec:	462b      	mov	r3, r5
 8020aee:	4620      	mov	r0, r4
 8020af0:	4629      	mov	r1, r5
 8020af2:	f7df fd89 	bl	8000608 <__aeabi_dmul>
 8020af6:	a33c      	add	r3, pc, #240	@ (adr r3, 8020be8 <__ieee754_asin+0x2d8>)
 8020af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020afc:	4606      	mov	r6, r0
 8020afe:	460f      	mov	r7, r1
 8020b00:	f7df fd82 	bl	8000608 <__aeabi_dmul>
 8020b04:	a33a      	add	r3, pc, #232	@ (adr r3, 8020bf0 <__ieee754_asin+0x2e0>)
 8020b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b0a:	f7df fbc7 	bl	800029c <__adddf3>
 8020b0e:	4632      	mov	r2, r6
 8020b10:	463b      	mov	r3, r7
 8020b12:	f7df fd79 	bl	8000608 <__aeabi_dmul>
 8020b16:	a338      	add	r3, pc, #224	@ (adr r3, 8020bf8 <__ieee754_asin+0x2e8>)
 8020b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b1c:	f7df fbbc 	bl	8000298 <__aeabi_dsub>
 8020b20:	4632      	mov	r2, r6
 8020b22:	463b      	mov	r3, r7
 8020b24:	f7df fd70 	bl	8000608 <__aeabi_dmul>
 8020b28:	a335      	add	r3, pc, #212	@ (adr r3, 8020c00 <__ieee754_asin+0x2f0>)
 8020b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b2e:	f7df fbb5 	bl	800029c <__adddf3>
 8020b32:	4632      	mov	r2, r6
 8020b34:	463b      	mov	r3, r7
 8020b36:	f7df fd67 	bl	8000608 <__aeabi_dmul>
 8020b3a:	a333      	add	r3, pc, #204	@ (adr r3, 8020c08 <__ieee754_asin+0x2f8>)
 8020b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b40:	f7df fbaa 	bl	8000298 <__aeabi_dsub>
 8020b44:	4632      	mov	r2, r6
 8020b46:	463b      	mov	r3, r7
 8020b48:	f7df fd5e 	bl	8000608 <__aeabi_dmul>
 8020b4c:	a330      	add	r3, pc, #192	@ (adr r3, 8020c10 <__ieee754_asin+0x300>)
 8020b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b52:	f7df fba3 	bl	800029c <__adddf3>
 8020b56:	4632      	mov	r2, r6
 8020b58:	463b      	mov	r3, r7
 8020b5a:	f7df fd55 	bl	8000608 <__aeabi_dmul>
 8020b5e:	a32e      	add	r3, pc, #184	@ (adr r3, 8020c18 <__ieee754_asin+0x308>)
 8020b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b64:	4680      	mov	r8, r0
 8020b66:	4689      	mov	r9, r1
 8020b68:	4630      	mov	r0, r6
 8020b6a:	4639      	mov	r1, r7
 8020b6c:	f7df fd4c 	bl	8000608 <__aeabi_dmul>
 8020b70:	a32b      	add	r3, pc, #172	@ (adr r3, 8020c20 <__ieee754_asin+0x310>)
 8020b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b76:	f7df fb8f 	bl	8000298 <__aeabi_dsub>
 8020b7a:	4632      	mov	r2, r6
 8020b7c:	463b      	mov	r3, r7
 8020b7e:	f7df fd43 	bl	8000608 <__aeabi_dmul>
 8020b82:	a329      	add	r3, pc, #164	@ (adr r3, 8020c28 <__ieee754_asin+0x318>)
 8020b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b88:	f7df fb88 	bl	800029c <__adddf3>
 8020b8c:	4632      	mov	r2, r6
 8020b8e:	463b      	mov	r3, r7
 8020b90:	f7df fd3a 	bl	8000608 <__aeabi_dmul>
 8020b94:	a326      	add	r3, pc, #152	@ (adr r3, 8020c30 <__ieee754_asin+0x320>)
 8020b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b9a:	f7df fb7d 	bl	8000298 <__aeabi_dsub>
 8020b9e:	4632      	mov	r2, r6
 8020ba0:	463b      	mov	r3, r7
 8020ba2:	f7df fd31 	bl	8000608 <__aeabi_dmul>
 8020ba6:	4b26      	ldr	r3, [pc, #152]	@ (8020c40 <__ieee754_asin+0x330>)
 8020ba8:	2200      	movs	r2, #0
 8020baa:	f7df fb77 	bl	800029c <__adddf3>
 8020bae:	4602      	mov	r2, r0
 8020bb0:	460b      	mov	r3, r1
 8020bb2:	4640      	mov	r0, r8
 8020bb4:	4649      	mov	r1, r9
 8020bb6:	f7df fe51 	bl	800085c <__aeabi_ddiv>
 8020bba:	4622      	mov	r2, r4
 8020bbc:	462b      	mov	r3, r5
 8020bbe:	f7df fd23 	bl	8000608 <__aeabi_dmul>
 8020bc2:	4602      	mov	r2, r0
 8020bc4:	460b      	mov	r3, r1
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	4629      	mov	r1, r5
 8020bca:	e6c6      	b.n	802095a <__ieee754_asin+0x4a>
 8020bcc:	f3af 8000 	nop.w
 8020bd0:	54442d18 	.word	0x54442d18
 8020bd4:	3ff921fb 	.word	0x3ff921fb
 8020bd8:	33145c07 	.word	0x33145c07
 8020bdc:	3c91a626 	.word	0x3c91a626
 8020be0:	8800759c 	.word	0x8800759c
 8020be4:	7e37e43c 	.word	0x7e37e43c
 8020be8:	0dfdf709 	.word	0x0dfdf709
 8020bec:	3f023de1 	.word	0x3f023de1
 8020bf0:	7501b288 	.word	0x7501b288
 8020bf4:	3f49efe0 	.word	0x3f49efe0
 8020bf8:	b5688f3b 	.word	0xb5688f3b
 8020bfc:	3fa48228 	.word	0x3fa48228
 8020c00:	0e884455 	.word	0x0e884455
 8020c04:	3fc9c155 	.word	0x3fc9c155
 8020c08:	03eb6f7d 	.word	0x03eb6f7d
 8020c0c:	3fd4d612 	.word	0x3fd4d612
 8020c10:	55555555 	.word	0x55555555
 8020c14:	3fc55555 	.word	0x3fc55555
 8020c18:	b12e9282 	.word	0xb12e9282
 8020c1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8020c20:	1b8d0159 	.word	0x1b8d0159
 8020c24:	3fe6066c 	.word	0x3fe6066c
 8020c28:	9c598ac8 	.word	0x9c598ac8
 8020c2c:	40002ae5 	.word	0x40002ae5
 8020c30:	1c8a2d4b 	.word	0x1c8a2d4b
 8020c34:	40033a27 	.word	0x40033a27
 8020c38:	3fefffff 	.word	0x3fefffff
 8020c3c:	3fdfffff 	.word	0x3fdfffff
 8020c40:	3ff00000 	.word	0x3ff00000
 8020c44:	3fe00000 	.word	0x3fe00000
 8020c48:	3fef3332 	.word	0x3fef3332
 8020c4c:	4652      	mov	r2, sl
 8020c4e:	465b      	mov	r3, fp
 8020c50:	4650      	mov	r0, sl
 8020c52:	4659      	mov	r1, fp
 8020c54:	f7df fb22 	bl	800029c <__adddf3>
 8020c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020c5c:	4606      	mov	r6, r0
 8020c5e:	460f      	mov	r7, r1
 8020c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c64:	f7df fdfa 	bl	800085c <__aeabi_ddiv>
 8020c68:	4602      	mov	r2, r0
 8020c6a:	460b      	mov	r3, r1
 8020c6c:	4630      	mov	r0, r6
 8020c6e:	4639      	mov	r1, r7
 8020c70:	f7df fcca 	bl	8000608 <__aeabi_dmul>
 8020c74:	f04f 0800 	mov.w	r8, #0
 8020c78:	4606      	mov	r6, r0
 8020c7a:	460f      	mov	r7, r1
 8020c7c:	4642      	mov	r2, r8
 8020c7e:	465b      	mov	r3, fp
 8020c80:	4640      	mov	r0, r8
 8020c82:	4659      	mov	r1, fp
 8020c84:	f7df fcc0 	bl	8000608 <__aeabi_dmul>
 8020c88:	4602      	mov	r2, r0
 8020c8a:	460b      	mov	r3, r1
 8020c8c:	4620      	mov	r0, r4
 8020c8e:	4629      	mov	r1, r5
 8020c90:	f7df fb02 	bl	8000298 <__aeabi_dsub>
 8020c94:	4642      	mov	r2, r8
 8020c96:	4604      	mov	r4, r0
 8020c98:	460d      	mov	r5, r1
 8020c9a:	465b      	mov	r3, fp
 8020c9c:	4650      	mov	r0, sl
 8020c9e:	4659      	mov	r1, fp
 8020ca0:	f7df fafc 	bl	800029c <__adddf3>
 8020ca4:	4602      	mov	r2, r0
 8020ca6:	460b      	mov	r3, r1
 8020ca8:	4620      	mov	r0, r4
 8020caa:	4629      	mov	r1, r5
 8020cac:	f7df fdd6 	bl	800085c <__aeabi_ddiv>
 8020cb0:	4602      	mov	r2, r0
 8020cb2:	460b      	mov	r3, r1
 8020cb4:	f7df faf2 	bl	800029c <__adddf3>
 8020cb8:	4602      	mov	r2, r0
 8020cba:	460b      	mov	r3, r1
 8020cbc:	a112      	add	r1, pc, #72	@ (adr r1, 8020d08 <__ieee754_asin+0x3f8>)
 8020cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020cc2:	f7df fae9 	bl	8000298 <__aeabi_dsub>
 8020cc6:	4602      	mov	r2, r0
 8020cc8:	460b      	mov	r3, r1
 8020cca:	4630      	mov	r0, r6
 8020ccc:	4639      	mov	r1, r7
 8020cce:	f7df fae3 	bl	8000298 <__aeabi_dsub>
 8020cd2:	4642      	mov	r2, r8
 8020cd4:	4604      	mov	r4, r0
 8020cd6:	460d      	mov	r5, r1
 8020cd8:	465b      	mov	r3, fp
 8020cda:	4640      	mov	r0, r8
 8020cdc:	4659      	mov	r1, fp
 8020cde:	f7df fadd 	bl	800029c <__adddf3>
 8020ce2:	4602      	mov	r2, r0
 8020ce4:	460b      	mov	r3, r1
 8020ce6:	a10a      	add	r1, pc, #40	@ (adr r1, 8020d10 <__ieee754_asin+0x400>)
 8020ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020cec:	f7df fad4 	bl	8000298 <__aeabi_dsub>
 8020cf0:	4602      	mov	r2, r0
 8020cf2:	460b      	mov	r3, r1
 8020cf4:	4620      	mov	r0, r4
 8020cf6:	4629      	mov	r1, r5
 8020cf8:	f7df face 	bl	8000298 <__aeabi_dsub>
 8020cfc:	4602      	mov	r2, r0
 8020cfe:	460b      	mov	r3, r1
 8020d00:	a103      	add	r1, pc, #12	@ (adr r1, 8020d10 <__ieee754_asin+0x400>)
 8020d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020d06:	e6e2      	b.n	8020ace <__ieee754_asin+0x1be>
 8020d08:	33145c07 	.word	0x33145c07
 8020d0c:	3c91a626 	.word	0x3c91a626
 8020d10:	54442d18 	.word	0x54442d18
 8020d14:	3fe921fb 	.word	0x3fe921fb

08020d18 <__ieee754_atan2>:
 8020d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d1c:	ec57 6b11 	vmov	r6, r7, d1
 8020d20:	4273      	negs	r3, r6
 8020d22:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8020ea0 <__ieee754_atan2+0x188>
 8020d26:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8020d2a:	4333      	orrs	r3, r6
 8020d2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8020d30:	4543      	cmp	r3, r8
 8020d32:	ec51 0b10 	vmov	r0, r1, d0
 8020d36:	4635      	mov	r5, r6
 8020d38:	d809      	bhi.n	8020d4e <__ieee754_atan2+0x36>
 8020d3a:	4244      	negs	r4, r0
 8020d3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8020d40:	4304      	orrs	r4, r0
 8020d42:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8020d46:	4544      	cmp	r4, r8
 8020d48:	468e      	mov	lr, r1
 8020d4a:	4681      	mov	r9, r0
 8020d4c:	d907      	bls.n	8020d5e <__ieee754_atan2+0x46>
 8020d4e:	4632      	mov	r2, r6
 8020d50:	463b      	mov	r3, r7
 8020d52:	f7df faa3 	bl	800029c <__adddf3>
 8020d56:	ec41 0b10 	vmov	d0, r0, r1
 8020d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d5e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8020d62:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8020d66:	4334      	orrs	r4, r6
 8020d68:	d103      	bne.n	8020d72 <__ieee754_atan2+0x5a>
 8020d6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d6e:	f000 bfdb 	b.w	8021d28 <atan>
 8020d72:	17bc      	asrs	r4, r7, #30
 8020d74:	f004 0402 	and.w	r4, r4, #2
 8020d78:	ea53 0909 	orrs.w	r9, r3, r9
 8020d7c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8020d80:	d107      	bne.n	8020d92 <__ieee754_atan2+0x7a>
 8020d82:	2c02      	cmp	r4, #2
 8020d84:	d05f      	beq.n	8020e46 <__ieee754_atan2+0x12e>
 8020d86:	2c03      	cmp	r4, #3
 8020d88:	d1e5      	bne.n	8020d56 <__ieee754_atan2+0x3e>
 8020d8a:	a141      	add	r1, pc, #260	@ (adr r1, 8020e90 <__ieee754_atan2+0x178>)
 8020d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020d90:	e7e1      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020d92:	4315      	orrs	r5, r2
 8020d94:	d106      	bne.n	8020da4 <__ieee754_atan2+0x8c>
 8020d96:	f1be 0f00 	cmp.w	lr, #0
 8020d9a:	da5f      	bge.n	8020e5c <__ieee754_atan2+0x144>
 8020d9c:	a13e      	add	r1, pc, #248	@ (adr r1, 8020e98 <__ieee754_atan2+0x180>)
 8020d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020da2:	e7d8      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020da4:	4542      	cmp	r2, r8
 8020da6:	d10f      	bne.n	8020dc8 <__ieee754_atan2+0xb0>
 8020da8:	4293      	cmp	r3, r2
 8020daa:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8020dae:	d107      	bne.n	8020dc0 <__ieee754_atan2+0xa8>
 8020db0:	2c02      	cmp	r4, #2
 8020db2:	d84c      	bhi.n	8020e4e <__ieee754_atan2+0x136>
 8020db4:	4b34      	ldr	r3, [pc, #208]	@ (8020e88 <__ieee754_atan2+0x170>)
 8020db6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020dbe:	e7ca      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020dc0:	2c02      	cmp	r4, #2
 8020dc2:	d848      	bhi.n	8020e56 <__ieee754_atan2+0x13e>
 8020dc4:	4b31      	ldr	r3, [pc, #196]	@ (8020e8c <__ieee754_atan2+0x174>)
 8020dc6:	e7f6      	b.n	8020db6 <__ieee754_atan2+0x9e>
 8020dc8:	4543      	cmp	r3, r8
 8020dca:	d0e4      	beq.n	8020d96 <__ieee754_atan2+0x7e>
 8020dcc:	1a9b      	subs	r3, r3, r2
 8020dce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8020dd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020dd6:	da1e      	bge.n	8020e16 <__ieee754_atan2+0xfe>
 8020dd8:	2f00      	cmp	r7, #0
 8020dda:	da01      	bge.n	8020de0 <__ieee754_atan2+0xc8>
 8020ddc:	323c      	adds	r2, #60	@ 0x3c
 8020dde:	db1e      	blt.n	8020e1e <__ieee754_atan2+0x106>
 8020de0:	4632      	mov	r2, r6
 8020de2:	463b      	mov	r3, r7
 8020de4:	f7df fd3a 	bl	800085c <__aeabi_ddiv>
 8020de8:	ec41 0b10 	vmov	d0, r0, r1
 8020dec:	f7fe fc44 	bl	801f678 <fabs>
 8020df0:	f000 ff9a 	bl	8021d28 <atan>
 8020df4:	ec51 0b10 	vmov	r0, r1, d0
 8020df8:	2c01      	cmp	r4, #1
 8020dfa:	d013      	beq.n	8020e24 <__ieee754_atan2+0x10c>
 8020dfc:	2c02      	cmp	r4, #2
 8020dfe:	d015      	beq.n	8020e2c <__ieee754_atan2+0x114>
 8020e00:	2c00      	cmp	r4, #0
 8020e02:	d0a8      	beq.n	8020d56 <__ieee754_atan2+0x3e>
 8020e04:	a318      	add	r3, pc, #96	@ (adr r3, 8020e68 <__ieee754_atan2+0x150>)
 8020e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e0a:	f7df fa45 	bl	8000298 <__aeabi_dsub>
 8020e0e:	a318      	add	r3, pc, #96	@ (adr r3, 8020e70 <__ieee754_atan2+0x158>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	e014      	b.n	8020e40 <__ieee754_atan2+0x128>
 8020e16:	a118      	add	r1, pc, #96	@ (adr r1, 8020e78 <__ieee754_atan2+0x160>)
 8020e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e1c:	e7ec      	b.n	8020df8 <__ieee754_atan2+0xe0>
 8020e1e:	2000      	movs	r0, #0
 8020e20:	2100      	movs	r1, #0
 8020e22:	e7e9      	b.n	8020df8 <__ieee754_atan2+0xe0>
 8020e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020e28:	4619      	mov	r1, r3
 8020e2a:	e794      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020e2c:	a30e      	add	r3, pc, #56	@ (adr r3, 8020e68 <__ieee754_atan2+0x150>)
 8020e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e32:	f7df fa31 	bl	8000298 <__aeabi_dsub>
 8020e36:	4602      	mov	r2, r0
 8020e38:	460b      	mov	r3, r1
 8020e3a:	a10d      	add	r1, pc, #52	@ (adr r1, 8020e70 <__ieee754_atan2+0x158>)
 8020e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e40:	f7df fa2a 	bl	8000298 <__aeabi_dsub>
 8020e44:	e787      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020e46:	a10a      	add	r1, pc, #40	@ (adr r1, 8020e70 <__ieee754_atan2+0x158>)
 8020e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e4c:	e783      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020e4e:	a10c      	add	r1, pc, #48	@ (adr r1, 8020e80 <__ieee754_atan2+0x168>)
 8020e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e54:	e77f      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020e56:	2000      	movs	r0, #0
 8020e58:	2100      	movs	r1, #0
 8020e5a:	e77c      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020e5c:	a106      	add	r1, pc, #24	@ (adr r1, 8020e78 <__ieee754_atan2+0x160>)
 8020e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e62:	e778      	b.n	8020d56 <__ieee754_atan2+0x3e>
 8020e64:	f3af 8000 	nop.w
 8020e68:	33145c07 	.word	0x33145c07
 8020e6c:	3ca1a626 	.word	0x3ca1a626
 8020e70:	54442d18 	.word	0x54442d18
 8020e74:	400921fb 	.word	0x400921fb
 8020e78:	54442d18 	.word	0x54442d18
 8020e7c:	3ff921fb 	.word	0x3ff921fb
 8020e80:	54442d18 	.word	0x54442d18
 8020e84:	3fe921fb 	.word	0x3fe921fb
 8020e88:	08023d08 	.word	0x08023d08
 8020e8c:	08023cf0 	.word	0x08023cf0
 8020e90:	54442d18 	.word	0x54442d18
 8020e94:	c00921fb 	.word	0xc00921fb
 8020e98:	54442d18 	.word	0x54442d18
 8020e9c:	bff921fb 	.word	0xbff921fb
 8020ea0:	7ff00000 	.word	0x7ff00000
 8020ea4:	00000000 	.word	0x00000000

08020ea8 <__ieee754_pow>:
 8020ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eac:	b091      	sub	sp, #68	@ 0x44
 8020eae:	ed8d 1b00 	vstr	d1, [sp]
 8020eb2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8020eb6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8020eba:	ea5a 0001 	orrs.w	r0, sl, r1
 8020ebe:	ec57 6b10 	vmov	r6, r7, d0
 8020ec2:	d113      	bne.n	8020eec <__ieee754_pow+0x44>
 8020ec4:	19b3      	adds	r3, r6, r6
 8020ec6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8020eca:	4152      	adcs	r2, r2
 8020ecc:	4298      	cmp	r0, r3
 8020ece:	4b98      	ldr	r3, [pc, #608]	@ (8021130 <__ieee754_pow+0x288>)
 8020ed0:	4193      	sbcs	r3, r2
 8020ed2:	f080 84ea 	bcs.w	80218aa <__ieee754_pow+0xa02>
 8020ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020eda:	4630      	mov	r0, r6
 8020edc:	4639      	mov	r1, r7
 8020ede:	f7df f9dd 	bl	800029c <__adddf3>
 8020ee2:	ec41 0b10 	vmov	d0, r0, r1
 8020ee6:	b011      	add	sp, #68	@ 0x44
 8020ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eec:	4a91      	ldr	r2, [pc, #580]	@ (8021134 <__ieee754_pow+0x28c>)
 8020eee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8020ef2:	4590      	cmp	r8, r2
 8020ef4:	463d      	mov	r5, r7
 8020ef6:	4633      	mov	r3, r6
 8020ef8:	d806      	bhi.n	8020f08 <__ieee754_pow+0x60>
 8020efa:	d101      	bne.n	8020f00 <__ieee754_pow+0x58>
 8020efc:	2e00      	cmp	r6, #0
 8020efe:	d1ea      	bne.n	8020ed6 <__ieee754_pow+0x2e>
 8020f00:	4592      	cmp	sl, r2
 8020f02:	d801      	bhi.n	8020f08 <__ieee754_pow+0x60>
 8020f04:	d10e      	bne.n	8020f24 <__ieee754_pow+0x7c>
 8020f06:	b169      	cbz	r1, 8020f24 <__ieee754_pow+0x7c>
 8020f08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8020f0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8020f10:	431d      	orrs	r5, r3
 8020f12:	d1e0      	bne.n	8020ed6 <__ieee754_pow+0x2e>
 8020f14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020f18:	18db      	adds	r3, r3, r3
 8020f1a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8020f1e:	4152      	adcs	r2, r2
 8020f20:	429d      	cmp	r5, r3
 8020f22:	e7d4      	b.n	8020ece <__ieee754_pow+0x26>
 8020f24:	2d00      	cmp	r5, #0
 8020f26:	46c3      	mov	fp, r8
 8020f28:	da3a      	bge.n	8020fa0 <__ieee754_pow+0xf8>
 8020f2a:	4a83      	ldr	r2, [pc, #524]	@ (8021138 <__ieee754_pow+0x290>)
 8020f2c:	4592      	cmp	sl, r2
 8020f2e:	d84d      	bhi.n	8020fcc <__ieee754_pow+0x124>
 8020f30:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8020f34:	4592      	cmp	sl, r2
 8020f36:	f240 84c7 	bls.w	80218c8 <__ieee754_pow+0xa20>
 8020f3a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8020f3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8020f42:	2a14      	cmp	r2, #20
 8020f44:	dd0f      	ble.n	8020f66 <__ieee754_pow+0xbe>
 8020f46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8020f4a:	fa21 f402 	lsr.w	r4, r1, r2
 8020f4e:	fa04 f202 	lsl.w	r2, r4, r2
 8020f52:	428a      	cmp	r2, r1
 8020f54:	f040 84b8 	bne.w	80218c8 <__ieee754_pow+0xa20>
 8020f58:	f004 0401 	and.w	r4, r4, #1
 8020f5c:	f1c4 0402 	rsb	r4, r4, #2
 8020f60:	2900      	cmp	r1, #0
 8020f62:	d158      	bne.n	8021016 <__ieee754_pow+0x16e>
 8020f64:	e00e      	b.n	8020f84 <__ieee754_pow+0xdc>
 8020f66:	2900      	cmp	r1, #0
 8020f68:	d154      	bne.n	8021014 <__ieee754_pow+0x16c>
 8020f6a:	f1c2 0214 	rsb	r2, r2, #20
 8020f6e:	fa4a f402 	asr.w	r4, sl, r2
 8020f72:	fa04 f202 	lsl.w	r2, r4, r2
 8020f76:	4552      	cmp	r2, sl
 8020f78:	f040 84a3 	bne.w	80218c2 <__ieee754_pow+0xa1a>
 8020f7c:	f004 0401 	and.w	r4, r4, #1
 8020f80:	f1c4 0402 	rsb	r4, r4, #2
 8020f84:	4a6d      	ldr	r2, [pc, #436]	@ (802113c <__ieee754_pow+0x294>)
 8020f86:	4592      	cmp	sl, r2
 8020f88:	d12e      	bne.n	8020fe8 <__ieee754_pow+0x140>
 8020f8a:	f1b9 0f00 	cmp.w	r9, #0
 8020f8e:	f280 8494 	bge.w	80218ba <__ieee754_pow+0xa12>
 8020f92:	496a      	ldr	r1, [pc, #424]	@ (802113c <__ieee754_pow+0x294>)
 8020f94:	4632      	mov	r2, r6
 8020f96:	463b      	mov	r3, r7
 8020f98:	2000      	movs	r0, #0
 8020f9a:	f7df fc5f 	bl	800085c <__aeabi_ddiv>
 8020f9e:	e7a0      	b.n	8020ee2 <__ieee754_pow+0x3a>
 8020fa0:	2400      	movs	r4, #0
 8020fa2:	bbc1      	cbnz	r1, 8021016 <__ieee754_pow+0x16e>
 8020fa4:	4a63      	ldr	r2, [pc, #396]	@ (8021134 <__ieee754_pow+0x28c>)
 8020fa6:	4592      	cmp	sl, r2
 8020fa8:	d1ec      	bne.n	8020f84 <__ieee754_pow+0xdc>
 8020faa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8020fae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8020fb2:	431a      	orrs	r2, r3
 8020fb4:	f000 8479 	beq.w	80218aa <__ieee754_pow+0xa02>
 8020fb8:	4b61      	ldr	r3, [pc, #388]	@ (8021140 <__ieee754_pow+0x298>)
 8020fba:	4598      	cmp	r8, r3
 8020fbc:	d908      	bls.n	8020fd0 <__ieee754_pow+0x128>
 8020fbe:	f1b9 0f00 	cmp.w	r9, #0
 8020fc2:	f2c0 8476 	blt.w	80218b2 <__ieee754_pow+0xa0a>
 8020fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020fca:	e78a      	b.n	8020ee2 <__ieee754_pow+0x3a>
 8020fcc:	2402      	movs	r4, #2
 8020fce:	e7e8      	b.n	8020fa2 <__ieee754_pow+0xfa>
 8020fd0:	f1b9 0f00 	cmp.w	r9, #0
 8020fd4:	f04f 0000 	mov.w	r0, #0
 8020fd8:	f04f 0100 	mov.w	r1, #0
 8020fdc:	da81      	bge.n	8020ee2 <__ieee754_pow+0x3a>
 8020fde:	e9dd 0300 	ldrd	r0, r3, [sp]
 8020fe2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8020fe6:	e77c      	b.n	8020ee2 <__ieee754_pow+0x3a>
 8020fe8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8020fec:	d106      	bne.n	8020ffc <__ieee754_pow+0x154>
 8020fee:	4632      	mov	r2, r6
 8020ff0:	463b      	mov	r3, r7
 8020ff2:	4630      	mov	r0, r6
 8020ff4:	4639      	mov	r1, r7
 8020ff6:	f7df fb07 	bl	8000608 <__aeabi_dmul>
 8020ffa:	e772      	b.n	8020ee2 <__ieee754_pow+0x3a>
 8020ffc:	4a51      	ldr	r2, [pc, #324]	@ (8021144 <__ieee754_pow+0x29c>)
 8020ffe:	4591      	cmp	r9, r2
 8021000:	d109      	bne.n	8021016 <__ieee754_pow+0x16e>
 8021002:	2d00      	cmp	r5, #0
 8021004:	db07      	blt.n	8021016 <__ieee754_pow+0x16e>
 8021006:	ec47 6b10 	vmov	d0, r6, r7
 802100a:	b011      	add	sp, #68	@ 0x44
 802100c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021010:	f7fe bcc8 	b.w	801f9a4 <__ieee754_sqrt>
 8021014:	2400      	movs	r4, #0
 8021016:	ec47 6b10 	vmov	d0, r6, r7
 802101a:	9302      	str	r3, [sp, #8]
 802101c:	f7fe fb2c 	bl	801f678 <fabs>
 8021020:	9b02      	ldr	r3, [sp, #8]
 8021022:	ec51 0b10 	vmov	r0, r1, d0
 8021026:	bb53      	cbnz	r3, 802107e <__ieee754_pow+0x1d6>
 8021028:	4b44      	ldr	r3, [pc, #272]	@ (802113c <__ieee754_pow+0x294>)
 802102a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 802102e:	429a      	cmp	r2, r3
 8021030:	d002      	beq.n	8021038 <__ieee754_pow+0x190>
 8021032:	f1b8 0f00 	cmp.w	r8, #0
 8021036:	d122      	bne.n	802107e <__ieee754_pow+0x1d6>
 8021038:	f1b9 0f00 	cmp.w	r9, #0
 802103c:	da05      	bge.n	802104a <__ieee754_pow+0x1a2>
 802103e:	4602      	mov	r2, r0
 8021040:	460b      	mov	r3, r1
 8021042:	2000      	movs	r0, #0
 8021044:	493d      	ldr	r1, [pc, #244]	@ (802113c <__ieee754_pow+0x294>)
 8021046:	f7df fc09 	bl	800085c <__aeabi_ddiv>
 802104a:	2d00      	cmp	r5, #0
 802104c:	f6bf af49 	bge.w	8020ee2 <__ieee754_pow+0x3a>
 8021050:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8021054:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8021058:	ea58 0804 	orrs.w	r8, r8, r4
 802105c:	d108      	bne.n	8021070 <__ieee754_pow+0x1c8>
 802105e:	4602      	mov	r2, r0
 8021060:	460b      	mov	r3, r1
 8021062:	4610      	mov	r0, r2
 8021064:	4619      	mov	r1, r3
 8021066:	f7df f917 	bl	8000298 <__aeabi_dsub>
 802106a:	4602      	mov	r2, r0
 802106c:	460b      	mov	r3, r1
 802106e:	e794      	b.n	8020f9a <__ieee754_pow+0xf2>
 8021070:	2c01      	cmp	r4, #1
 8021072:	f47f af36 	bne.w	8020ee2 <__ieee754_pow+0x3a>
 8021076:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802107a:	4619      	mov	r1, r3
 802107c:	e731      	b.n	8020ee2 <__ieee754_pow+0x3a>
 802107e:	0feb      	lsrs	r3, r5, #31
 8021080:	3b01      	subs	r3, #1
 8021082:	ea53 0204 	orrs.w	r2, r3, r4
 8021086:	d102      	bne.n	802108e <__ieee754_pow+0x1e6>
 8021088:	4632      	mov	r2, r6
 802108a:	463b      	mov	r3, r7
 802108c:	e7e9      	b.n	8021062 <__ieee754_pow+0x1ba>
 802108e:	3c01      	subs	r4, #1
 8021090:	431c      	orrs	r4, r3
 8021092:	d016      	beq.n	80210c2 <__ieee754_pow+0x21a>
 8021094:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8021120 <__ieee754_pow+0x278>
 8021098:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 802109c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80210a0:	f240 8112 	bls.w	80212c8 <__ieee754_pow+0x420>
 80210a4:	4b28      	ldr	r3, [pc, #160]	@ (8021148 <__ieee754_pow+0x2a0>)
 80210a6:	459a      	cmp	sl, r3
 80210a8:	4b25      	ldr	r3, [pc, #148]	@ (8021140 <__ieee754_pow+0x298>)
 80210aa:	d916      	bls.n	80210da <__ieee754_pow+0x232>
 80210ac:	4598      	cmp	r8, r3
 80210ae:	d80b      	bhi.n	80210c8 <__ieee754_pow+0x220>
 80210b0:	f1b9 0f00 	cmp.w	r9, #0
 80210b4:	da0b      	bge.n	80210ce <__ieee754_pow+0x226>
 80210b6:	2000      	movs	r0, #0
 80210b8:	b011      	add	sp, #68	@ 0x44
 80210ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210be:	f001 bd8b 	b.w	8022bd8 <__math_oflow>
 80210c2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8021128 <__ieee754_pow+0x280>
 80210c6:	e7e7      	b.n	8021098 <__ieee754_pow+0x1f0>
 80210c8:	f1b9 0f00 	cmp.w	r9, #0
 80210cc:	dcf3      	bgt.n	80210b6 <__ieee754_pow+0x20e>
 80210ce:	2000      	movs	r0, #0
 80210d0:	b011      	add	sp, #68	@ 0x44
 80210d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d6:	f001 bd77 	b.w	8022bc8 <__math_uflow>
 80210da:	4598      	cmp	r8, r3
 80210dc:	d20c      	bcs.n	80210f8 <__ieee754_pow+0x250>
 80210de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80210e2:	2200      	movs	r2, #0
 80210e4:	2300      	movs	r3, #0
 80210e6:	f7df fd01 	bl	8000aec <__aeabi_dcmplt>
 80210ea:	3800      	subs	r0, #0
 80210ec:	bf18      	it	ne
 80210ee:	2001      	movne	r0, #1
 80210f0:	f1b9 0f00 	cmp.w	r9, #0
 80210f4:	daec      	bge.n	80210d0 <__ieee754_pow+0x228>
 80210f6:	e7df      	b.n	80210b8 <__ieee754_pow+0x210>
 80210f8:	4b10      	ldr	r3, [pc, #64]	@ (802113c <__ieee754_pow+0x294>)
 80210fa:	4598      	cmp	r8, r3
 80210fc:	f04f 0200 	mov.w	r2, #0
 8021100:	d924      	bls.n	802114c <__ieee754_pow+0x2a4>
 8021102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021106:	2300      	movs	r3, #0
 8021108:	f7df fcf0 	bl	8000aec <__aeabi_dcmplt>
 802110c:	3800      	subs	r0, #0
 802110e:	bf18      	it	ne
 8021110:	2001      	movne	r0, #1
 8021112:	f1b9 0f00 	cmp.w	r9, #0
 8021116:	dccf      	bgt.n	80210b8 <__ieee754_pow+0x210>
 8021118:	e7da      	b.n	80210d0 <__ieee754_pow+0x228>
 802111a:	bf00      	nop
 802111c:	f3af 8000 	nop.w
 8021120:	00000000 	.word	0x00000000
 8021124:	3ff00000 	.word	0x3ff00000
 8021128:	00000000 	.word	0x00000000
 802112c:	bff00000 	.word	0xbff00000
 8021130:	fff00000 	.word	0xfff00000
 8021134:	7ff00000 	.word	0x7ff00000
 8021138:	433fffff 	.word	0x433fffff
 802113c:	3ff00000 	.word	0x3ff00000
 8021140:	3fefffff 	.word	0x3fefffff
 8021144:	3fe00000 	.word	0x3fe00000
 8021148:	43f00000 	.word	0x43f00000
 802114c:	4b5a      	ldr	r3, [pc, #360]	@ (80212b8 <__ieee754_pow+0x410>)
 802114e:	f7df f8a3 	bl	8000298 <__aeabi_dsub>
 8021152:	a351      	add	r3, pc, #324	@ (adr r3, 8021298 <__ieee754_pow+0x3f0>)
 8021154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021158:	4604      	mov	r4, r0
 802115a:	460d      	mov	r5, r1
 802115c:	f7df fa54 	bl	8000608 <__aeabi_dmul>
 8021160:	a34f      	add	r3, pc, #316	@ (adr r3, 80212a0 <__ieee754_pow+0x3f8>)
 8021162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021166:	4606      	mov	r6, r0
 8021168:	460f      	mov	r7, r1
 802116a:	4620      	mov	r0, r4
 802116c:	4629      	mov	r1, r5
 802116e:	f7df fa4b 	bl	8000608 <__aeabi_dmul>
 8021172:	4b52      	ldr	r3, [pc, #328]	@ (80212bc <__ieee754_pow+0x414>)
 8021174:	4682      	mov	sl, r0
 8021176:	468b      	mov	fp, r1
 8021178:	2200      	movs	r2, #0
 802117a:	4620      	mov	r0, r4
 802117c:	4629      	mov	r1, r5
 802117e:	f7df fa43 	bl	8000608 <__aeabi_dmul>
 8021182:	4602      	mov	r2, r0
 8021184:	460b      	mov	r3, r1
 8021186:	a148      	add	r1, pc, #288	@ (adr r1, 80212a8 <__ieee754_pow+0x400>)
 8021188:	e9d1 0100 	ldrd	r0, r1, [r1]
 802118c:	f7df f884 	bl	8000298 <__aeabi_dsub>
 8021190:	4622      	mov	r2, r4
 8021192:	462b      	mov	r3, r5
 8021194:	f7df fa38 	bl	8000608 <__aeabi_dmul>
 8021198:	4602      	mov	r2, r0
 802119a:	460b      	mov	r3, r1
 802119c:	2000      	movs	r0, #0
 802119e:	4948      	ldr	r1, [pc, #288]	@ (80212c0 <__ieee754_pow+0x418>)
 80211a0:	f7df f87a 	bl	8000298 <__aeabi_dsub>
 80211a4:	4622      	mov	r2, r4
 80211a6:	4680      	mov	r8, r0
 80211a8:	4689      	mov	r9, r1
 80211aa:	462b      	mov	r3, r5
 80211ac:	4620      	mov	r0, r4
 80211ae:	4629      	mov	r1, r5
 80211b0:	f7df fa2a 	bl	8000608 <__aeabi_dmul>
 80211b4:	4602      	mov	r2, r0
 80211b6:	460b      	mov	r3, r1
 80211b8:	4640      	mov	r0, r8
 80211ba:	4649      	mov	r1, r9
 80211bc:	f7df fa24 	bl	8000608 <__aeabi_dmul>
 80211c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80212b0 <__ieee754_pow+0x408>)
 80211c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211c6:	f7df fa1f 	bl	8000608 <__aeabi_dmul>
 80211ca:	4602      	mov	r2, r0
 80211cc:	460b      	mov	r3, r1
 80211ce:	4650      	mov	r0, sl
 80211d0:	4659      	mov	r1, fp
 80211d2:	f7df f861 	bl	8000298 <__aeabi_dsub>
 80211d6:	4602      	mov	r2, r0
 80211d8:	460b      	mov	r3, r1
 80211da:	4680      	mov	r8, r0
 80211dc:	4689      	mov	r9, r1
 80211de:	4630      	mov	r0, r6
 80211e0:	4639      	mov	r1, r7
 80211e2:	f7df f85b 	bl	800029c <__adddf3>
 80211e6:	2400      	movs	r4, #0
 80211e8:	4632      	mov	r2, r6
 80211ea:	463b      	mov	r3, r7
 80211ec:	4620      	mov	r0, r4
 80211ee:	460d      	mov	r5, r1
 80211f0:	f7df f852 	bl	8000298 <__aeabi_dsub>
 80211f4:	4602      	mov	r2, r0
 80211f6:	460b      	mov	r3, r1
 80211f8:	4640      	mov	r0, r8
 80211fa:	4649      	mov	r1, r9
 80211fc:	f7df f84c 	bl	8000298 <__aeabi_dsub>
 8021200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021204:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021208:	2300      	movs	r3, #0
 802120a:	9304      	str	r3, [sp, #16]
 802120c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021210:	4606      	mov	r6, r0
 8021212:	460f      	mov	r7, r1
 8021214:	4652      	mov	r2, sl
 8021216:	465b      	mov	r3, fp
 8021218:	e9dd 0100 	ldrd	r0, r1, [sp]
 802121c:	f7df f83c 	bl	8000298 <__aeabi_dsub>
 8021220:	4622      	mov	r2, r4
 8021222:	462b      	mov	r3, r5
 8021224:	f7df f9f0 	bl	8000608 <__aeabi_dmul>
 8021228:	e9dd 2300 	ldrd	r2, r3, [sp]
 802122c:	4680      	mov	r8, r0
 802122e:	4689      	mov	r9, r1
 8021230:	4630      	mov	r0, r6
 8021232:	4639      	mov	r1, r7
 8021234:	f7df f9e8 	bl	8000608 <__aeabi_dmul>
 8021238:	4602      	mov	r2, r0
 802123a:	460b      	mov	r3, r1
 802123c:	4640      	mov	r0, r8
 802123e:	4649      	mov	r1, r9
 8021240:	f7df f82c 	bl	800029c <__adddf3>
 8021244:	4652      	mov	r2, sl
 8021246:	465b      	mov	r3, fp
 8021248:	4606      	mov	r6, r0
 802124a:	460f      	mov	r7, r1
 802124c:	4620      	mov	r0, r4
 802124e:	4629      	mov	r1, r5
 8021250:	f7df f9da 	bl	8000608 <__aeabi_dmul>
 8021254:	460b      	mov	r3, r1
 8021256:	4602      	mov	r2, r0
 8021258:	4680      	mov	r8, r0
 802125a:	4689      	mov	r9, r1
 802125c:	4630      	mov	r0, r6
 802125e:	4639      	mov	r1, r7
 8021260:	f7df f81c 	bl	800029c <__adddf3>
 8021264:	4b17      	ldr	r3, [pc, #92]	@ (80212c4 <__ieee754_pow+0x41c>)
 8021266:	4299      	cmp	r1, r3
 8021268:	4604      	mov	r4, r0
 802126a:	460d      	mov	r5, r1
 802126c:	468a      	mov	sl, r1
 802126e:	468b      	mov	fp, r1
 8021270:	f340 82ef 	ble.w	8021852 <__ieee754_pow+0x9aa>
 8021274:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8021278:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 802127c:	4303      	orrs	r3, r0
 802127e:	f000 81e8 	beq.w	8021652 <__ieee754_pow+0x7aa>
 8021282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021286:	2200      	movs	r2, #0
 8021288:	2300      	movs	r3, #0
 802128a:	f7df fc2f 	bl	8000aec <__aeabi_dcmplt>
 802128e:	3800      	subs	r0, #0
 8021290:	bf18      	it	ne
 8021292:	2001      	movne	r0, #1
 8021294:	e710      	b.n	80210b8 <__ieee754_pow+0x210>
 8021296:	bf00      	nop
 8021298:	60000000 	.word	0x60000000
 802129c:	3ff71547 	.word	0x3ff71547
 80212a0:	f85ddf44 	.word	0xf85ddf44
 80212a4:	3e54ae0b 	.word	0x3e54ae0b
 80212a8:	55555555 	.word	0x55555555
 80212ac:	3fd55555 	.word	0x3fd55555
 80212b0:	652b82fe 	.word	0x652b82fe
 80212b4:	3ff71547 	.word	0x3ff71547
 80212b8:	3ff00000 	.word	0x3ff00000
 80212bc:	3fd00000 	.word	0x3fd00000
 80212c0:	3fe00000 	.word	0x3fe00000
 80212c4:	408fffff 	.word	0x408fffff
 80212c8:	4bd5      	ldr	r3, [pc, #852]	@ (8021620 <__ieee754_pow+0x778>)
 80212ca:	402b      	ands	r3, r5
 80212cc:	2200      	movs	r2, #0
 80212ce:	b92b      	cbnz	r3, 80212dc <__ieee754_pow+0x434>
 80212d0:	4bd4      	ldr	r3, [pc, #848]	@ (8021624 <__ieee754_pow+0x77c>)
 80212d2:	f7df f999 	bl	8000608 <__aeabi_dmul>
 80212d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80212da:	468b      	mov	fp, r1
 80212dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80212e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80212e4:	4413      	add	r3, r2
 80212e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80212e8:	4bcf      	ldr	r3, [pc, #828]	@ (8021628 <__ieee754_pow+0x780>)
 80212ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80212ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80212f2:	459b      	cmp	fp, r3
 80212f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80212f8:	dd08      	ble.n	802130c <__ieee754_pow+0x464>
 80212fa:	4bcc      	ldr	r3, [pc, #816]	@ (802162c <__ieee754_pow+0x784>)
 80212fc:	459b      	cmp	fp, r3
 80212fe:	f340 81a5 	ble.w	802164c <__ieee754_pow+0x7a4>
 8021302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021304:	3301      	adds	r3, #1
 8021306:	930a      	str	r3, [sp, #40]	@ 0x28
 8021308:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 802130c:	f04f 0a00 	mov.w	sl, #0
 8021310:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8021314:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021316:	4bc6      	ldr	r3, [pc, #792]	@ (8021630 <__ieee754_pow+0x788>)
 8021318:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802131c:	ed93 7b00 	vldr	d7, [r3]
 8021320:	4629      	mov	r1, r5
 8021322:	ec53 2b17 	vmov	r2, r3, d7
 8021326:	ed8d 7b06 	vstr	d7, [sp, #24]
 802132a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802132e:	f7de ffb3 	bl	8000298 <__aeabi_dsub>
 8021332:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021336:	4606      	mov	r6, r0
 8021338:	460f      	mov	r7, r1
 802133a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802133e:	f7de ffad 	bl	800029c <__adddf3>
 8021342:	4602      	mov	r2, r0
 8021344:	460b      	mov	r3, r1
 8021346:	2000      	movs	r0, #0
 8021348:	49ba      	ldr	r1, [pc, #744]	@ (8021634 <__ieee754_pow+0x78c>)
 802134a:	f7df fa87 	bl	800085c <__aeabi_ddiv>
 802134e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8021352:	4602      	mov	r2, r0
 8021354:	460b      	mov	r3, r1
 8021356:	4630      	mov	r0, r6
 8021358:	4639      	mov	r1, r7
 802135a:	f7df f955 	bl	8000608 <__aeabi_dmul>
 802135e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021362:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8021366:	106d      	asrs	r5, r5, #1
 8021368:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 802136c:	f04f 0b00 	mov.w	fp, #0
 8021370:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8021374:	4661      	mov	r1, ip
 8021376:	2200      	movs	r2, #0
 8021378:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802137c:	4658      	mov	r0, fp
 802137e:	46e1      	mov	r9, ip
 8021380:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8021384:	4614      	mov	r4, r2
 8021386:	461d      	mov	r5, r3
 8021388:	f7df f93e 	bl	8000608 <__aeabi_dmul>
 802138c:	4602      	mov	r2, r0
 802138e:	460b      	mov	r3, r1
 8021390:	4630      	mov	r0, r6
 8021392:	4639      	mov	r1, r7
 8021394:	f7de ff80 	bl	8000298 <__aeabi_dsub>
 8021398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802139c:	4606      	mov	r6, r0
 802139e:	460f      	mov	r7, r1
 80213a0:	4620      	mov	r0, r4
 80213a2:	4629      	mov	r1, r5
 80213a4:	f7de ff78 	bl	8000298 <__aeabi_dsub>
 80213a8:	4602      	mov	r2, r0
 80213aa:	460b      	mov	r3, r1
 80213ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80213b0:	f7de ff72 	bl	8000298 <__aeabi_dsub>
 80213b4:	465a      	mov	r2, fp
 80213b6:	464b      	mov	r3, r9
 80213b8:	f7df f926 	bl	8000608 <__aeabi_dmul>
 80213bc:	4602      	mov	r2, r0
 80213be:	460b      	mov	r3, r1
 80213c0:	4630      	mov	r0, r6
 80213c2:	4639      	mov	r1, r7
 80213c4:	f7de ff68 	bl	8000298 <__aeabi_dsub>
 80213c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80213cc:	f7df f91c 	bl	8000608 <__aeabi_dmul>
 80213d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80213d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80213d8:	4610      	mov	r0, r2
 80213da:	4619      	mov	r1, r3
 80213dc:	f7df f914 	bl	8000608 <__aeabi_dmul>
 80213e0:	a37d      	add	r3, pc, #500	@ (adr r3, 80215d8 <__ieee754_pow+0x730>)
 80213e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213e6:	4604      	mov	r4, r0
 80213e8:	460d      	mov	r5, r1
 80213ea:	f7df f90d 	bl	8000608 <__aeabi_dmul>
 80213ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80215e0 <__ieee754_pow+0x738>)
 80213f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213f4:	f7de ff52 	bl	800029c <__adddf3>
 80213f8:	4622      	mov	r2, r4
 80213fa:	462b      	mov	r3, r5
 80213fc:	f7df f904 	bl	8000608 <__aeabi_dmul>
 8021400:	a379      	add	r3, pc, #484	@ (adr r3, 80215e8 <__ieee754_pow+0x740>)
 8021402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021406:	f7de ff49 	bl	800029c <__adddf3>
 802140a:	4622      	mov	r2, r4
 802140c:	462b      	mov	r3, r5
 802140e:	f7df f8fb 	bl	8000608 <__aeabi_dmul>
 8021412:	a377      	add	r3, pc, #476	@ (adr r3, 80215f0 <__ieee754_pow+0x748>)
 8021414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021418:	f7de ff40 	bl	800029c <__adddf3>
 802141c:	4622      	mov	r2, r4
 802141e:	462b      	mov	r3, r5
 8021420:	f7df f8f2 	bl	8000608 <__aeabi_dmul>
 8021424:	a374      	add	r3, pc, #464	@ (adr r3, 80215f8 <__ieee754_pow+0x750>)
 8021426:	e9d3 2300 	ldrd	r2, r3, [r3]
 802142a:	f7de ff37 	bl	800029c <__adddf3>
 802142e:	4622      	mov	r2, r4
 8021430:	462b      	mov	r3, r5
 8021432:	f7df f8e9 	bl	8000608 <__aeabi_dmul>
 8021436:	a372      	add	r3, pc, #456	@ (adr r3, 8021600 <__ieee754_pow+0x758>)
 8021438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802143c:	f7de ff2e 	bl	800029c <__adddf3>
 8021440:	4622      	mov	r2, r4
 8021442:	4606      	mov	r6, r0
 8021444:	460f      	mov	r7, r1
 8021446:	462b      	mov	r3, r5
 8021448:	4620      	mov	r0, r4
 802144a:	4629      	mov	r1, r5
 802144c:	f7df f8dc 	bl	8000608 <__aeabi_dmul>
 8021450:	4602      	mov	r2, r0
 8021452:	460b      	mov	r3, r1
 8021454:	4630      	mov	r0, r6
 8021456:	4639      	mov	r1, r7
 8021458:	f7df f8d6 	bl	8000608 <__aeabi_dmul>
 802145c:	465a      	mov	r2, fp
 802145e:	4604      	mov	r4, r0
 8021460:	460d      	mov	r5, r1
 8021462:	464b      	mov	r3, r9
 8021464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021468:	f7de ff18 	bl	800029c <__adddf3>
 802146c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021470:	f7df f8ca 	bl	8000608 <__aeabi_dmul>
 8021474:	4622      	mov	r2, r4
 8021476:	462b      	mov	r3, r5
 8021478:	f7de ff10 	bl	800029c <__adddf3>
 802147c:	465a      	mov	r2, fp
 802147e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021482:	464b      	mov	r3, r9
 8021484:	4658      	mov	r0, fp
 8021486:	4649      	mov	r1, r9
 8021488:	f7df f8be 	bl	8000608 <__aeabi_dmul>
 802148c:	4b6a      	ldr	r3, [pc, #424]	@ (8021638 <__ieee754_pow+0x790>)
 802148e:	2200      	movs	r2, #0
 8021490:	4606      	mov	r6, r0
 8021492:	460f      	mov	r7, r1
 8021494:	f7de ff02 	bl	800029c <__adddf3>
 8021498:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802149c:	f7de fefe 	bl	800029c <__adddf3>
 80214a0:	46d8      	mov	r8, fp
 80214a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80214a6:	460d      	mov	r5, r1
 80214a8:	465a      	mov	r2, fp
 80214aa:	460b      	mov	r3, r1
 80214ac:	4640      	mov	r0, r8
 80214ae:	4649      	mov	r1, r9
 80214b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80214b4:	f7df f8a8 	bl	8000608 <__aeabi_dmul>
 80214b8:	465c      	mov	r4, fp
 80214ba:	4680      	mov	r8, r0
 80214bc:	4689      	mov	r9, r1
 80214be:	4b5e      	ldr	r3, [pc, #376]	@ (8021638 <__ieee754_pow+0x790>)
 80214c0:	2200      	movs	r2, #0
 80214c2:	4620      	mov	r0, r4
 80214c4:	4629      	mov	r1, r5
 80214c6:	f7de fee7 	bl	8000298 <__aeabi_dsub>
 80214ca:	4632      	mov	r2, r6
 80214cc:	463b      	mov	r3, r7
 80214ce:	f7de fee3 	bl	8000298 <__aeabi_dsub>
 80214d2:	4602      	mov	r2, r0
 80214d4:	460b      	mov	r3, r1
 80214d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80214da:	f7de fedd 	bl	8000298 <__aeabi_dsub>
 80214de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80214e2:	f7df f891 	bl	8000608 <__aeabi_dmul>
 80214e6:	4622      	mov	r2, r4
 80214e8:	4606      	mov	r6, r0
 80214ea:	460f      	mov	r7, r1
 80214ec:	462b      	mov	r3, r5
 80214ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80214f2:	f7df f889 	bl	8000608 <__aeabi_dmul>
 80214f6:	4602      	mov	r2, r0
 80214f8:	460b      	mov	r3, r1
 80214fa:	4630      	mov	r0, r6
 80214fc:	4639      	mov	r1, r7
 80214fe:	f7de fecd 	bl	800029c <__adddf3>
 8021502:	4606      	mov	r6, r0
 8021504:	460f      	mov	r7, r1
 8021506:	4602      	mov	r2, r0
 8021508:	460b      	mov	r3, r1
 802150a:	4640      	mov	r0, r8
 802150c:	4649      	mov	r1, r9
 802150e:	f7de fec5 	bl	800029c <__adddf3>
 8021512:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8021516:	a33c      	add	r3, pc, #240	@ (adr r3, 8021608 <__ieee754_pow+0x760>)
 8021518:	e9d3 2300 	ldrd	r2, r3, [r3]
 802151c:	4658      	mov	r0, fp
 802151e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8021522:	460d      	mov	r5, r1
 8021524:	f7df f870 	bl	8000608 <__aeabi_dmul>
 8021528:	465c      	mov	r4, fp
 802152a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802152e:	4642      	mov	r2, r8
 8021530:	464b      	mov	r3, r9
 8021532:	4620      	mov	r0, r4
 8021534:	4629      	mov	r1, r5
 8021536:	f7de feaf 	bl	8000298 <__aeabi_dsub>
 802153a:	4602      	mov	r2, r0
 802153c:	460b      	mov	r3, r1
 802153e:	4630      	mov	r0, r6
 8021540:	4639      	mov	r1, r7
 8021542:	f7de fea9 	bl	8000298 <__aeabi_dsub>
 8021546:	a332      	add	r3, pc, #200	@ (adr r3, 8021610 <__ieee754_pow+0x768>)
 8021548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802154c:	f7df f85c 	bl	8000608 <__aeabi_dmul>
 8021550:	a331      	add	r3, pc, #196	@ (adr r3, 8021618 <__ieee754_pow+0x770>)
 8021552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021556:	4606      	mov	r6, r0
 8021558:	460f      	mov	r7, r1
 802155a:	4620      	mov	r0, r4
 802155c:	4629      	mov	r1, r5
 802155e:	f7df f853 	bl	8000608 <__aeabi_dmul>
 8021562:	4602      	mov	r2, r0
 8021564:	460b      	mov	r3, r1
 8021566:	4630      	mov	r0, r6
 8021568:	4639      	mov	r1, r7
 802156a:	f7de fe97 	bl	800029c <__adddf3>
 802156e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021570:	4b32      	ldr	r3, [pc, #200]	@ (802163c <__ieee754_pow+0x794>)
 8021572:	4413      	add	r3, r2
 8021574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021578:	f7de fe90 	bl	800029c <__adddf3>
 802157c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021580:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021582:	f7de ffd7 	bl	8000534 <__aeabi_i2d>
 8021586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021588:	4b2d      	ldr	r3, [pc, #180]	@ (8021640 <__ieee754_pow+0x798>)
 802158a:	4413      	add	r3, r2
 802158c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021590:	4606      	mov	r6, r0
 8021592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021596:	460f      	mov	r7, r1
 8021598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802159c:	f7de fe7e 	bl	800029c <__adddf3>
 80215a0:	4642      	mov	r2, r8
 80215a2:	464b      	mov	r3, r9
 80215a4:	f7de fe7a 	bl	800029c <__adddf3>
 80215a8:	4632      	mov	r2, r6
 80215aa:	463b      	mov	r3, r7
 80215ac:	f7de fe76 	bl	800029c <__adddf3>
 80215b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80215b4:	4632      	mov	r2, r6
 80215b6:	463b      	mov	r3, r7
 80215b8:	4658      	mov	r0, fp
 80215ba:	460d      	mov	r5, r1
 80215bc:	f7de fe6c 	bl	8000298 <__aeabi_dsub>
 80215c0:	4642      	mov	r2, r8
 80215c2:	464b      	mov	r3, r9
 80215c4:	f7de fe68 	bl	8000298 <__aeabi_dsub>
 80215c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80215cc:	f7de fe64 	bl	8000298 <__aeabi_dsub>
 80215d0:	465c      	mov	r4, fp
 80215d2:	4602      	mov	r2, r0
 80215d4:	e036      	b.n	8021644 <__ieee754_pow+0x79c>
 80215d6:	bf00      	nop
 80215d8:	4a454eef 	.word	0x4a454eef
 80215dc:	3fca7e28 	.word	0x3fca7e28
 80215e0:	93c9db65 	.word	0x93c9db65
 80215e4:	3fcd864a 	.word	0x3fcd864a
 80215e8:	a91d4101 	.word	0xa91d4101
 80215ec:	3fd17460 	.word	0x3fd17460
 80215f0:	518f264d 	.word	0x518f264d
 80215f4:	3fd55555 	.word	0x3fd55555
 80215f8:	db6fabff 	.word	0xdb6fabff
 80215fc:	3fdb6db6 	.word	0x3fdb6db6
 8021600:	33333303 	.word	0x33333303
 8021604:	3fe33333 	.word	0x3fe33333
 8021608:	e0000000 	.word	0xe0000000
 802160c:	3feec709 	.word	0x3feec709
 8021610:	dc3a03fd 	.word	0xdc3a03fd
 8021614:	3feec709 	.word	0x3feec709
 8021618:	145b01f5 	.word	0x145b01f5
 802161c:	be3e2fe0 	.word	0xbe3e2fe0
 8021620:	7ff00000 	.word	0x7ff00000
 8021624:	43400000 	.word	0x43400000
 8021628:	0003988e 	.word	0x0003988e
 802162c:	000bb679 	.word	0x000bb679
 8021630:	08023d40 	.word	0x08023d40
 8021634:	3ff00000 	.word	0x3ff00000
 8021638:	40080000 	.word	0x40080000
 802163c:	08023d20 	.word	0x08023d20
 8021640:	08023d30 	.word	0x08023d30
 8021644:	460b      	mov	r3, r1
 8021646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802164a:	e5d7      	b.n	80211fc <__ieee754_pow+0x354>
 802164c:	f04f 0a01 	mov.w	sl, #1
 8021650:	e65e      	b.n	8021310 <__ieee754_pow+0x468>
 8021652:	a3b4      	add	r3, pc, #720	@ (adr r3, 8021924 <__ieee754_pow+0xa7c>)
 8021654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021658:	4630      	mov	r0, r6
 802165a:	4639      	mov	r1, r7
 802165c:	f7de fe1e 	bl	800029c <__adddf3>
 8021660:	4642      	mov	r2, r8
 8021662:	e9cd 0100 	strd	r0, r1, [sp]
 8021666:	464b      	mov	r3, r9
 8021668:	4620      	mov	r0, r4
 802166a:	4629      	mov	r1, r5
 802166c:	f7de fe14 	bl	8000298 <__aeabi_dsub>
 8021670:	4602      	mov	r2, r0
 8021672:	460b      	mov	r3, r1
 8021674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021678:	f7df fa56 	bl	8000b28 <__aeabi_dcmpgt>
 802167c:	2800      	cmp	r0, #0
 802167e:	f47f ae00 	bne.w	8021282 <__ieee754_pow+0x3da>
 8021682:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8021686:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802168a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 802168e:	fa43 fa0a 	asr.w	sl, r3, sl
 8021692:	44da      	add	sl, fp
 8021694:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8021698:	489d      	ldr	r0, [pc, #628]	@ (8021910 <__ieee754_pow+0xa68>)
 802169a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 802169e:	4108      	asrs	r0, r1
 80216a0:	ea00 030a 	and.w	r3, r0, sl
 80216a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80216a8:	f1c1 0114 	rsb	r1, r1, #20
 80216ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80216b0:	fa4a fa01 	asr.w	sl, sl, r1
 80216b4:	f1bb 0f00 	cmp.w	fp, #0
 80216b8:	4640      	mov	r0, r8
 80216ba:	4649      	mov	r1, r9
 80216bc:	f04f 0200 	mov.w	r2, #0
 80216c0:	bfb8      	it	lt
 80216c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80216c6:	f7de fde7 	bl	8000298 <__aeabi_dsub>
 80216ca:	4680      	mov	r8, r0
 80216cc:	4689      	mov	r9, r1
 80216ce:	4632      	mov	r2, r6
 80216d0:	463b      	mov	r3, r7
 80216d2:	4640      	mov	r0, r8
 80216d4:	4649      	mov	r1, r9
 80216d6:	f7de fde1 	bl	800029c <__adddf3>
 80216da:	2400      	movs	r4, #0
 80216dc:	a37c      	add	r3, pc, #496	@ (adr r3, 80218d0 <__ieee754_pow+0xa28>)
 80216de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216e2:	4620      	mov	r0, r4
 80216e4:	460d      	mov	r5, r1
 80216e6:	f7de ff8f 	bl	8000608 <__aeabi_dmul>
 80216ea:	4642      	mov	r2, r8
 80216ec:	e9cd 0100 	strd	r0, r1, [sp]
 80216f0:	464b      	mov	r3, r9
 80216f2:	4620      	mov	r0, r4
 80216f4:	4629      	mov	r1, r5
 80216f6:	f7de fdcf 	bl	8000298 <__aeabi_dsub>
 80216fa:	4602      	mov	r2, r0
 80216fc:	460b      	mov	r3, r1
 80216fe:	4630      	mov	r0, r6
 8021700:	4639      	mov	r1, r7
 8021702:	f7de fdc9 	bl	8000298 <__aeabi_dsub>
 8021706:	a374      	add	r3, pc, #464	@ (adr r3, 80218d8 <__ieee754_pow+0xa30>)
 8021708:	e9d3 2300 	ldrd	r2, r3, [r3]
 802170c:	f7de ff7c 	bl	8000608 <__aeabi_dmul>
 8021710:	a373      	add	r3, pc, #460	@ (adr r3, 80218e0 <__ieee754_pow+0xa38>)
 8021712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021716:	4680      	mov	r8, r0
 8021718:	4689      	mov	r9, r1
 802171a:	4620      	mov	r0, r4
 802171c:	4629      	mov	r1, r5
 802171e:	f7de ff73 	bl	8000608 <__aeabi_dmul>
 8021722:	4602      	mov	r2, r0
 8021724:	460b      	mov	r3, r1
 8021726:	4640      	mov	r0, r8
 8021728:	4649      	mov	r1, r9
 802172a:	f7de fdb7 	bl	800029c <__adddf3>
 802172e:	4604      	mov	r4, r0
 8021730:	460d      	mov	r5, r1
 8021732:	4602      	mov	r2, r0
 8021734:	460b      	mov	r3, r1
 8021736:	e9dd 0100 	ldrd	r0, r1, [sp]
 802173a:	f7de fdaf 	bl	800029c <__adddf3>
 802173e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021742:	4680      	mov	r8, r0
 8021744:	4689      	mov	r9, r1
 8021746:	f7de fda7 	bl	8000298 <__aeabi_dsub>
 802174a:	4602      	mov	r2, r0
 802174c:	460b      	mov	r3, r1
 802174e:	4620      	mov	r0, r4
 8021750:	4629      	mov	r1, r5
 8021752:	f7de fda1 	bl	8000298 <__aeabi_dsub>
 8021756:	4642      	mov	r2, r8
 8021758:	4606      	mov	r6, r0
 802175a:	460f      	mov	r7, r1
 802175c:	464b      	mov	r3, r9
 802175e:	4640      	mov	r0, r8
 8021760:	4649      	mov	r1, r9
 8021762:	f7de ff51 	bl	8000608 <__aeabi_dmul>
 8021766:	a360      	add	r3, pc, #384	@ (adr r3, 80218e8 <__ieee754_pow+0xa40>)
 8021768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802176c:	4604      	mov	r4, r0
 802176e:	460d      	mov	r5, r1
 8021770:	f7de ff4a 	bl	8000608 <__aeabi_dmul>
 8021774:	a35e      	add	r3, pc, #376	@ (adr r3, 80218f0 <__ieee754_pow+0xa48>)
 8021776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802177a:	f7de fd8d 	bl	8000298 <__aeabi_dsub>
 802177e:	4622      	mov	r2, r4
 8021780:	462b      	mov	r3, r5
 8021782:	f7de ff41 	bl	8000608 <__aeabi_dmul>
 8021786:	a35c      	add	r3, pc, #368	@ (adr r3, 80218f8 <__ieee754_pow+0xa50>)
 8021788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802178c:	f7de fd86 	bl	800029c <__adddf3>
 8021790:	4622      	mov	r2, r4
 8021792:	462b      	mov	r3, r5
 8021794:	f7de ff38 	bl	8000608 <__aeabi_dmul>
 8021798:	a359      	add	r3, pc, #356	@ (adr r3, 8021900 <__ieee754_pow+0xa58>)
 802179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802179e:	f7de fd7b 	bl	8000298 <__aeabi_dsub>
 80217a2:	4622      	mov	r2, r4
 80217a4:	462b      	mov	r3, r5
 80217a6:	f7de ff2f 	bl	8000608 <__aeabi_dmul>
 80217aa:	a357      	add	r3, pc, #348	@ (adr r3, 8021908 <__ieee754_pow+0xa60>)
 80217ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b0:	f7de fd74 	bl	800029c <__adddf3>
 80217b4:	4622      	mov	r2, r4
 80217b6:	462b      	mov	r3, r5
 80217b8:	f7de ff26 	bl	8000608 <__aeabi_dmul>
 80217bc:	4602      	mov	r2, r0
 80217be:	460b      	mov	r3, r1
 80217c0:	4640      	mov	r0, r8
 80217c2:	4649      	mov	r1, r9
 80217c4:	f7de fd68 	bl	8000298 <__aeabi_dsub>
 80217c8:	4604      	mov	r4, r0
 80217ca:	460d      	mov	r5, r1
 80217cc:	4602      	mov	r2, r0
 80217ce:	460b      	mov	r3, r1
 80217d0:	4640      	mov	r0, r8
 80217d2:	4649      	mov	r1, r9
 80217d4:	f7de ff18 	bl	8000608 <__aeabi_dmul>
 80217d8:	2200      	movs	r2, #0
 80217da:	e9cd 0100 	strd	r0, r1, [sp]
 80217de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80217e2:	4620      	mov	r0, r4
 80217e4:	4629      	mov	r1, r5
 80217e6:	f7de fd57 	bl	8000298 <__aeabi_dsub>
 80217ea:	4602      	mov	r2, r0
 80217ec:	460b      	mov	r3, r1
 80217ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80217f2:	f7df f833 	bl	800085c <__aeabi_ddiv>
 80217f6:	4632      	mov	r2, r6
 80217f8:	4604      	mov	r4, r0
 80217fa:	460d      	mov	r5, r1
 80217fc:	463b      	mov	r3, r7
 80217fe:	4640      	mov	r0, r8
 8021800:	4649      	mov	r1, r9
 8021802:	f7de ff01 	bl	8000608 <__aeabi_dmul>
 8021806:	4632      	mov	r2, r6
 8021808:	463b      	mov	r3, r7
 802180a:	f7de fd47 	bl	800029c <__adddf3>
 802180e:	4602      	mov	r2, r0
 8021810:	460b      	mov	r3, r1
 8021812:	4620      	mov	r0, r4
 8021814:	4629      	mov	r1, r5
 8021816:	f7de fd3f 	bl	8000298 <__aeabi_dsub>
 802181a:	4642      	mov	r2, r8
 802181c:	464b      	mov	r3, r9
 802181e:	f7de fd3b 	bl	8000298 <__aeabi_dsub>
 8021822:	460b      	mov	r3, r1
 8021824:	4602      	mov	r2, r0
 8021826:	493b      	ldr	r1, [pc, #236]	@ (8021914 <__ieee754_pow+0xa6c>)
 8021828:	2000      	movs	r0, #0
 802182a:	f7de fd35 	bl	8000298 <__aeabi_dsub>
 802182e:	ec41 0b10 	vmov	d0, r0, r1
 8021832:	ee10 3a90 	vmov	r3, s1
 8021836:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802183a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802183e:	da30      	bge.n	80218a2 <__ieee754_pow+0x9fa>
 8021840:	4650      	mov	r0, sl
 8021842:	f001 f915 	bl	8022a70 <scalbn>
 8021846:	ec51 0b10 	vmov	r0, r1, d0
 802184a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802184e:	f7ff bbd2 	b.w	8020ff6 <__ieee754_pow+0x14e>
 8021852:	4c31      	ldr	r4, [pc, #196]	@ (8021918 <__ieee754_pow+0xa70>)
 8021854:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8021858:	42a3      	cmp	r3, r4
 802185a:	d91a      	bls.n	8021892 <__ieee754_pow+0x9ea>
 802185c:	4b2f      	ldr	r3, [pc, #188]	@ (802191c <__ieee754_pow+0xa74>)
 802185e:	440b      	add	r3, r1
 8021860:	4303      	orrs	r3, r0
 8021862:	d009      	beq.n	8021878 <__ieee754_pow+0x9d0>
 8021864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021868:	2200      	movs	r2, #0
 802186a:	2300      	movs	r3, #0
 802186c:	f7df f93e 	bl	8000aec <__aeabi_dcmplt>
 8021870:	3800      	subs	r0, #0
 8021872:	bf18      	it	ne
 8021874:	2001      	movne	r0, #1
 8021876:	e42b      	b.n	80210d0 <__ieee754_pow+0x228>
 8021878:	4642      	mov	r2, r8
 802187a:	464b      	mov	r3, r9
 802187c:	f7de fd0c 	bl	8000298 <__aeabi_dsub>
 8021880:	4632      	mov	r2, r6
 8021882:	463b      	mov	r3, r7
 8021884:	f7df f946 	bl	8000b14 <__aeabi_dcmpge>
 8021888:	2800      	cmp	r0, #0
 802188a:	d1eb      	bne.n	8021864 <__ieee754_pow+0x9bc>
 802188c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 802192c <__ieee754_pow+0xa84>
 8021890:	e6f7      	b.n	8021682 <__ieee754_pow+0x7da>
 8021892:	469a      	mov	sl, r3
 8021894:	4b22      	ldr	r3, [pc, #136]	@ (8021920 <__ieee754_pow+0xa78>)
 8021896:	459a      	cmp	sl, r3
 8021898:	f63f aef3 	bhi.w	8021682 <__ieee754_pow+0x7da>
 802189c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80218a0:	e715      	b.n	80216ce <__ieee754_pow+0x826>
 80218a2:	ec51 0b10 	vmov	r0, r1, d0
 80218a6:	4619      	mov	r1, r3
 80218a8:	e7cf      	b.n	802184a <__ieee754_pow+0x9a2>
 80218aa:	491a      	ldr	r1, [pc, #104]	@ (8021914 <__ieee754_pow+0xa6c>)
 80218ac:	2000      	movs	r0, #0
 80218ae:	f7ff bb18 	b.w	8020ee2 <__ieee754_pow+0x3a>
 80218b2:	2000      	movs	r0, #0
 80218b4:	2100      	movs	r1, #0
 80218b6:	f7ff bb14 	b.w	8020ee2 <__ieee754_pow+0x3a>
 80218ba:	4630      	mov	r0, r6
 80218bc:	4639      	mov	r1, r7
 80218be:	f7ff bb10 	b.w	8020ee2 <__ieee754_pow+0x3a>
 80218c2:	460c      	mov	r4, r1
 80218c4:	f7ff bb5e 	b.w	8020f84 <__ieee754_pow+0xdc>
 80218c8:	2400      	movs	r4, #0
 80218ca:	f7ff bb49 	b.w	8020f60 <__ieee754_pow+0xb8>
 80218ce:	bf00      	nop
 80218d0:	00000000 	.word	0x00000000
 80218d4:	3fe62e43 	.word	0x3fe62e43
 80218d8:	fefa39ef 	.word	0xfefa39ef
 80218dc:	3fe62e42 	.word	0x3fe62e42
 80218e0:	0ca86c39 	.word	0x0ca86c39
 80218e4:	be205c61 	.word	0xbe205c61
 80218e8:	72bea4d0 	.word	0x72bea4d0
 80218ec:	3e663769 	.word	0x3e663769
 80218f0:	c5d26bf1 	.word	0xc5d26bf1
 80218f4:	3ebbbd41 	.word	0x3ebbbd41
 80218f8:	af25de2c 	.word	0xaf25de2c
 80218fc:	3f11566a 	.word	0x3f11566a
 8021900:	16bebd93 	.word	0x16bebd93
 8021904:	3f66c16c 	.word	0x3f66c16c
 8021908:	5555553e 	.word	0x5555553e
 802190c:	3fc55555 	.word	0x3fc55555
 8021910:	fff00000 	.word	0xfff00000
 8021914:	3ff00000 	.word	0x3ff00000
 8021918:	4090cbff 	.word	0x4090cbff
 802191c:	3f6f3400 	.word	0x3f6f3400
 8021920:	3fe00000 	.word	0x3fe00000
 8021924:	652b82fe 	.word	0x652b82fe
 8021928:	3c971547 	.word	0x3c971547
 802192c:	4090cc00 	.word	0x4090cc00

08021930 <__ieee754_rem_pio2>:
 8021930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021934:	ec57 6b10 	vmov	r6, r7, d0
 8021938:	4bc5      	ldr	r3, [pc, #788]	@ (8021c50 <__ieee754_rem_pio2+0x320>)
 802193a:	b08d      	sub	sp, #52	@ 0x34
 802193c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8021940:	4598      	cmp	r8, r3
 8021942:	4604      	mov	r4, r0
 8021944:	9704      	str	r7, [sp, #16]
 8021946:	d807      	bhi.n	8021958 <__ieee754_rem_pio2+0x28>
 8021948:	2200      	movs	r2, #0
 802194a:	2300      	movs	r3, #0
 802194c:	ed80 0b00 	vstr	d0, [r0]
 8021950:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8021954:	2500      	movs	r5, #0
 8021956:	e028      	b.n	80219aa <__ieee754_rem_pio2+0x7a>
 8021958:	4bbe      	ldr	r3, [pc, #760]	@ (8021c54 <__ieee754_rem_pio2+0x324>)
 802195a:	4598      	cmp	r8, r3
 802195c:	d878      	bhi.n	8021a50 <__ieee754_rem_pio2+0x120>
 802195e:	9b04      	ldr	r3, [sp, #16]
 8021960:	4dbd      	ldr	r5, [pc, #756]	@ (8021c58 <__ieee754_rem_pio2+0x328>)
 8021962:	2b00      	cmp	r3, #0
 8021964:	4630      	mov	r0, r6
 8021966:	a3ac      	add	r3, pc, #688	@ (adr r3, 8021c18 <__ieee754_rem_pio2+0x2e8>)
 8021968:	e9d3 2300 	ldrd	r2, r3, [r3]
 802196c:	4639      	mov	r1, r7
 802196e:	dd38      	ble.n	80219e2 <__ieee754_rem_pio2+0xb2>
 8021970:	f7de fc92 	bl	8000298 <__aeabi_dsub>
 8021974:	45a8      	cmp	r8, r5
 8021976:	4606      	mov	r6, r0
 8021978:	460f      	mov	r7, r1
 802197a:	d01a      	beq.n	80219b2 <__ieee754_rem_pio2+0x82>
 802197c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8021c20 <__ieee754_rem_pio2+0x2f0>)
 802197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021982:	f7de fc89 	bl	8000298 <__aeabi_dsub>
 8021986:	4602      	mov	r2, r0
 8021988:	460b      	mov	r3, r1
 802198a:	4680      	mov	r8, r0
 802198c:	4689      	mov	r9, r1
 802198e:	4630      	mov	r0, r6
 8021990:	4639      	mov	r1, r7
 8021992:	f7de fc81 	bl	8000298 <__aeabi_dsub>
 8021996:	a3a2      	add	r3, pc, #648	@ (adr r3, 8021c20 <__ieee754_rem_pio2+0x2f0>)
 8021998:	e9d3 2300 	ldrd	r2, r3, [r3]
 802199c:	f7de fc7c 	bl	8000298 <__aeabi_dsub>
 80219a0:	e9c4 8900 	strd	r8, r9, [r4]
 80219a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80219a8:	2501      	movs	r5, #1
 80219aa:	4628      	mov	r0, r5
 80219ac:	b00d      	add	sp, #52	@ 0x34
 80219ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8021c28 <__ieee754_rem_pio2+0x2f8>)
 80219b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219b8:	f7de fc6e 	bl	8000298 <__aeabi_dsub>
 80219bc:	a39c      	add	r3, pc, #624	@ (adr r3, 8021c30 <__ieee754_rem_pio2+0x300>)
 80219be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219c2:	4606      	mov	r6, r0
 80219c4:	460f      	mov	r7, r1
 80219c6:	f7de fc67 	bl	8000298 <__aeabi_dsub>
 80219ca:	4602      	mov	r2, r0
 80219cc:	460b      	mov	r3, r1
 80219ce:	4680      	mov	r8, r0
 80219d0:	4689      	mov	r9, r1
 80219d2:	4630      	mov	r0, r6
 80219d4:	4639      	mov	r1, r7
 80219d6:	f7de fc5f 	bl	8000298 <__aeabi_dsub>
 80219da:	a395      	add	r3, pc, #596	@ (adr r3, 8021c30 <__ieee754_rem_pio2+0x300>)
 80219dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219e0:	e7dc      	b.n	802199c <__ieee754_rem_pio2+0x6c>
 80219e2:	f7de fc5b 	bl	800029c <__adddf3>
 80219e6:	45a8      	cmp	r8, r5
 80219e8:	4606      	mov	r6, r0
 80219ea:	460f      	mov	r7, r1
 80219ec:	d018      	beq.n	8021a20 <__ieee754_rem_pio2+0xf0>
 80219ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8021c20 <__ieee754_rem_pio2+0x2f0>)
 80219f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219f4:	f7de fc52 	bl	800029c <__adddf3>
 80219f8:	4602      	mov	r2, r0
 80219fa:	460b      	mov	r3, r1
 80219fc:	4680      	mov	r8, r0
 80219fe:	4689      	mov	r9, r1
 8021a00:	4630      	mov	r0, r6
 8021a02:	4639      	mov	r1, r7
 8021a04:	f7de fc48 	bl	8000298 <__aeabi_dsub>
 8021a08:	a385      	add	r3, pc, #532	@ (adr r3, 8021c20 <__ieee754_rem_pio2+0x2f0>)
 8021a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a0e:	f7de fc45 	bl	800029c <__adddf3>
 8021a12:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8021a16:	e9c4 8900 	strd	r8, r9, [r4]
 8021a1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021a1e:	e7c4      	b.n	80219aa <__ieee754_rem_pio2+0x7a>
 8021a20:	a381      	add	r3, pc, #516	@ (adr r3, 8021c28 <__ieee754_rem_pio2+0x2f8>)
 8021a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a26:	f7de fc39 	bl	800029c <__adddf3>
 8021a2a:	a381      	add	r3, pc, #516	@ (adr r3, 8021c30 <__ieee754_rem_pio2+0x300>)
 8021a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a30:	4606      	mov	r6, r0
 8021a32:	460f      	mov	r7, r1
 8021a34:	f7de fc32 	bl	800029c <__adddf3>
 8021a38:	4602      	mov	r2, r0
 8021a3a:	460b      	mov	r3, r1
 8021a3c:	4680      	mov	r8, r0
 8021a3e:	4689      	mov	r9, r1
 8021a40:	4630      	mov	r0, r6
 8021a42:	4639      	mov	r1, r7
 8021a44:	f7de fc28 	bl	8000298 <__aeabi_dsub>
 8021a48:	a379      	add	r3, pc, #484	@ (adr r3, 8021c30 <__ieee754_rem_pio2+0x300>)
 8021a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a4e:	e7de      	b.n	8021a0e <__ieee754_rem_pio2+0xde>
 8021a50:	4b82      	ldr	r3, [pc, #520]	@ (8021c5c <__ieee754_rem_pio2+0x32c>)
 8021a52:	4598      	cmp	r8, r3
 8021a54:	f200 80d1 	bhi.w	8021bfa <__ieee754_rem_pio2+0x2ca>
 8021a58:	f7fd fe0e 	bl	801f678 <fabs>
 8021a5c:	ec57 6b10 	vmov	r6, r7, d0
 8021a60:	a375      	add	r3, pc, #468	@ (adr r3, 8021c38 <__ieee754_rem_pio2+0x308>)
 8021a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a66:	4630      	mov	r0, r6
 8021a68:	4639      	mov	r1, r7
 8021a6a:	f7de fdcd 	bl	8000608 <__aeabi_dmul>
 8021a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8021c60 <__ieee754_rem_pio2+0x330>)
 8021a70:	2200      	movs	r2, #0
 8021a72:	f7de fc13 	bl	800029c <__adddf3>
 8021a76:	f7df f877 	bl	8000b68 <__aeabi_d2iz>
 8021a7a:	4605      	mov	r5, r0
 8021a7c:	f7de fd5a 	bl	8000534 <__aeabi_i2d>
 8021a80:	4602      	mov	r2, r0
 8021a82:	460b      	mov	r3, r1
 8021a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8021a88:	a363      	add	r3, pc, #396	@ (adr r3, 8021c18 <__ieee754_rem_pio2+0x2e8>)
 8021a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a8e:	f7de fdbb 	bl	8000608 <__aeabi_dmul>
 8021a92:	4602      	mov	r2, r0
 8021a94:	460b      	mov	r3, r1
 8021a96:	4630      	mov	r0, r6
 8021a98:	4639      	mov	r1, r7
 8021a9a:	f7de fbfd 	bl	8000298 <__aeabi_dsub>
 8021a9e:	a360      	add	r3, pc, #384	@ (adr r3, 8021c20 <__ieee754_rem_pio2+0x2f0>)
 8021aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021aa4:	4682      	mov	sl, r0
 8021aa6:	468b      	mov	fp, r1
 8021aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021aac:	f7de fdac 	bl	8000608 <__aeabi_dmul>
 8021ab0:	2d1f      	cmp	r5, #31
 8021ab2:	4606      	mov	r6, r0
 8021ab4:	460f      	mov	r7, r1
 8021ab6:	dc0c      	bgt.n	8021ad2 <__ieee754_rem_pio2+0x1a2>
 8021ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8021c64 <__ieee754_rem_pio2+0x334>)
 8021aba:	1e6a      	subs	r2, r5, #1
 8021abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021ac0:	4543      	cmp	r3, r8
 8021ac2:	d006      	beq.n	8021ad2 <__ieee754_rem_pio2+0x1a2>
 8021ac4:	4632      	mov	r2, r6
 8021ac6:	463b      	mov	r3, r7
 8021ac8:	4650      	mov	r0, sl
 8021aca:	4659      	mov	r1, fp
 8021acc:	f7de fbe4 	bl	8000298 <__aeabi_dsub>
 8021ad0:	e00e      	b.n	8021af0 <__ieee754_rem_pio2+0x1c0>
 8021ad2:	463b      	mov	r3, r7
 8021ad4:	4632      	mov	r2, r6
 8021ad6:	4650      	mov	r0, sl
 8021ad8:	4659      	mov	r1, fp
 8021ada:	f7de fbdd 	bl	8000298 <__aeabi_dsub>
 8021ade:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021ae2:	9305      	str	r3, [sp, #20]
 8021ae4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021ae8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8021aec:	2b10      	cmp	r3, #16
 8021aee:	dc02      	bgt.n	8021af6 <__ieee754_rem_pio2+0x1c6>
 8021af0:	e9c4 0100 	strd	r0, r1, [r4]
 8021af4:	e039      	b.n	8021b6a <__ieee754_rem_pio2+0x23a>
 8021af6:	a34c      	add	r3, pc, #304	@ (adr r3, 8021c28 <__ieee754_rem_pio2+0x2f8>)
 8021af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021b00:	f7de fd82 	bl	8000608 <__aeabi_dmul>
 8021b04:	4606      	mov	r6, r0
 8021b06:	460f      	mov	r7, r1
 8021b08:	4602      	mov	r2, r0
 8021b0a:	460b      	mov	r3, r1
 8021b0c:	4650      	mov	r0, sl
 8021b0e:	4659      	mov	r1, fp
 8021b10:	f7de fbc2 	bl	8000298 <__aeabi_dsub>
 8021b14:	4602      	mov	r2, r0
 8021b16:	460b      	mov	r3, r1
 8021b18:	4680      	mov	r8, r0
 8021b1a:	4689      	mov	r9, r1
 8021b1c:	4650      	mov	r0, sl
 8021b1e:	4659      	mov	r1, fp
 8021b20:	f7de fbba 	bl	8000298 <__aeabi_dsub>
 8021b24:	4632      	mov	r2, r6
 8021b26:	463b      	mov	r3, r7
 8021b28:	f7de fbb6 	bl	8000298 <__aeabi_dsub>
 8021b2c:	a340      	add	r3, pc, #256	@ (adr r3, 8021c30 <__ieee754_rem_pio2+0x300>)
 8021b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b32:	4606      	mov	r6, r0
 8021b34:	460f      	mov	r7, r1
 8021b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021b3a:	f7de fd65 	bl	8000608 <__aeabi_dmul>
 8021b3e:	4632      	mov	r2, r6
 8021b40:	463b      	mov	r3, r7
 8021b42:	f7de fba9 	bl	8000298 <__aeabi_dsub>
 8021b46:	4602      	mov	r2, r0
 8021b48:	460b      	mov	r3, r1
 8021b4a:	4606      	mov	r6, r0
 8021b4c:	460f      	mov	r7, r1
 8021b4e:	4640      	mov	r0, r8
 8021b50:	4649      	mov	r1, r9
 8021b52:	f7de fba1 	bl	8000298 <__aeabi_dsub>
 8021b56:	9a05      	ldr	r2, [sp, #20]
 8021b58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021b5c:	1ad3      	subs	r3, r2, r3
 8021b5e:	2b31      	cmp	r3, #49	@ 0x31
 8021b60:	dc20      	bgt.n	8021ba4 <__ieee754_rem_pio2+0x274>
 8021b62:	e9c4 0100 	strd	r0, r1, [r4]
 8021b66:	46c2      	mov	sl, r8
 8021b68:	46cb      	mov	fp, r9
 8021b6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8021b6e:	4650      	mov	r0, sl
 8021b70:	4642      	mov	r2, r8
 8021b72:	464b      	mov	r3, r9
 8021b74:	4659      	mov	r1, fp
 8021b76:	f7de fb8f 	bl	8000298 <__aeabi_dsub>
 8021b7a:	463b      	mov	r3, r7
 8021b7c:	4632      	mov	r2, r6
 8021b7e:	f7de fb8b 	bl	8000298 <__aeabi_dsub>
 8021b82:	9b04      	ldr	r3, [sp, #16]
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021b8a:	f6bf af0e 	bge.w	80219aa <__ieee754_rem_pio2+0x7a>
 8021b8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8021b92:	6063      	str	r3, [r4, #4]
 8021b94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021b98:	f8c4 8000 	str.w	r8, [r4]
 8021b9c:	60a0      	str	r0, [r4, #8]
 8021b9e:	60e3      	str	r3, [r4, #12]
 8021ba0:	426d      	negs	r5, r5
 8021ba2:	e702      	b.n	80219aa <__ieee754_rem_pio2+0x7a>
 8021ba4:	a326      	add	r3, pc, #152	@ (adr r3, 8021c40 <__ieee754_rem_pio2+0x310>)
 8021ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021bae:	f7de fd2b 	bl	8000608 <__aeabi_dmul>
 8021bb2:	4606      	mov	r6, r0
 8021bb4:	460f      	mov	r7, r1
 8021bb6:	4602      	mov	r2, r0
 8021bb8:	460b      	mov	r3, r1
 8021bba:	4640      	mov	r0, r8
 8021bbc:	4649      	mov	r1, r9
 8021bbe:	f7de fb6b 	bl	8000298 <__aeabi_dsub>
 8021bc2:	4602      	mov	r2, r0
 8021bc4:	460b      	mov	r3, r1
 8021bc6:	4682      	mov	sl, r0
 8021bc8:	468b      	mov	fp, r1
 8021bca:	4640      	mov	r0, r8
 8021bcc:	4649      	mov	r1, r9
 8021bce:	f7de fb63 	bl	8000298 <__aeabi_dsub>
 8021bd2:	4632      	mov	r2, r6
 8021bd4:	463b      	mov	r3, r7
 8021bd6:	f7de fb5f 	bl	8000298 <__aeabi_dsub>
 8021bda:	a31b      	add	r3, pc, #108	@ (adr r3, 8021c48 <__ieee754_rem_pio2+0x318>)
 8021bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021be0:	4606      	mov	r6, r0
 8021be2:	460f      	mov	r7, r1
 8021be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021be8:	f7de fd0e 	bl	8000608 <__aeabi_dmul>
 8021bec:	4632      	mov	r2, r6
 8021bee:	463b      	mov	r3, r7
 8021bf0:	f7de fb52 	bl	8000298 <__aeabi_dsub>
 8021bf4:	4606      	mov	r6, r0
 8021bf6:	460f      	mov	r7, r1
 8021bf8:	e764      	b.n	8021ac4 <__ieee754_rem_pio2+0x194>
 8021bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8021c68 <__ieee754_rem_pio2+0x338>)
 8021bfc:	4598      	cmp	r8, r3
 8021bfe:	d935      	bls.n	8021c6c <__ieee754_rem_pio2+0x33c>
 8021c00:	4632      	mov	r2, r6
 8021c02:	463b      	mov	r3, r7
 8021c04:	4630      	mov	r0, r6
 8021c06:	4639      	mov	r1, r7
 8021c08:	f7de fb46 	bl	8000298 <__aeabi_dsub>
 8021c0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021c10:	e9c4 0100 	strd	r0, r1, [r4]
 8021c14:	e69e      	b.n	8021954 <__ieee754_rem_pio2+0x24>
 8021c16:	bf00      	nop
 8021c18:	54400000 	.word	0x54400000
 8021c1c:	3ff921fb 	.word	0x3ff921fb
 8021c20:	1a626331 	.word	0x1a626331
 8021c24:	3dd0b461 	.word	0x3dd0b461
 8021c28:	1a600000 	.word	0x1a600000
 8021c2c:	3dd0b461 	.word	0x3dd0b461
 8021c30:	2e037073 	.word	0x2e037073
 8021c34:	3ba3198a 	.word	0x3ba3198a
 8021c38:	6dc9c883 	.word	0x6dc9c883
 8021c3c:	3fe45f30 	.word	0x3fe45f30
 8021c40:	2e000000 	.word	0x2e000000
 8021c44:	3ba3198a 	.word	0x3ba3198a
 8021c48:	252049c1 	.word	0x252049c1
 8021c4c:	397b839a 	.word	0x397b839a
 8021c50:	3fe921fb 	.word	0x3fe921fb
 8021c54:	4002d97b 	.word	0x4002d97b
 8021c58:	3ff921fb 	.word	0x3ff921fb
 8021c5c:	413921fb 	.word	0x413921fb
 8021c60:	3fe00000 	.word	0x3fe00000
 8021c64:	08023d50 	.word	0x08023d50
 8021c68:	7fefffff 	.word	0x7fefffff
 8021c6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8021c70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8021c74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8021c78:	4630      	mov	r0, r6
 8021c7a:	460f      	mov	r7, r1
 8021c7c:	f7de ff74 	bl	8000b68 <__aeabi_d2iz>
 8021c80:	f7de fc58 	bl	8000534 <__aeabi_i2d>
 8021c84:	4602      	mov	r2, r0
 8021c86:	460b      	mov	r3, r1
 8021c88:	4630      	mov	r0, r6
 8021c8a:	4639      	mov	r1, r7
 8021c8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021c90:	f7de fb02 	bl	8000298 <__aeabi_dsub>
 8021c94:	4b22      	ldr	r3, [pc, #136]	@ (8021d20 <__ieee754_rem_pio2+0x3f0>)
 8021c96:	2200      	movs	r2, #0
 8021c98:	f7de fcb6 	bl	8000608 <__aeabi_dmul>
 8021c9c:	460f      	mov	r7, r1
 8021c9e:	4606      	mov	r6, r0
 8021ca0:	f7de ff62 	bl	8000b68 <__aeabi_d2iz>
 8021ca4:	f7de fc46 	bl	8000534 <__aeabi_i2d>
 8021ca8:	4602      	mov	r2, r0
 8021caa:	460b      	mov	r3, r1
 8021cac:	4630      	mov	r0, r6
 8021cae:	4639      	mov	r1, r7
 8021cb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8021cb4:	f7de faf0 	bl	8000298 <__aeabi_dsub>
 8021cb8:	4b19      	ldr	r3, [pc, #100]	@ (8021d20 <__ieee754_rem_pio2+0x3f0>)
 8021cba:	2200      	movs	r2, #0
 8021cbc:	f7de fca4 	bl	8000608 <__aeabi_dmul>
 8021cc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8021cc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8021cc8:	f04f 0803 	mov.w	r8, #3
 8021ccc:	2600      	movs	r6, #0
 8021cce:	2700      	movs	r7, #0
 8021cd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8021cd4:	4632      	mov	r2, r6
 8021cd6:	463b      	mov	r3, r7
 8021cd8:	46c2      	mov	sl, r8
 8021cda:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8021cde:	f7de fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 8021ce2:	2800      	cmp	r0, #0
 8021ce4:	d1f4      	bne.n	8021cd0 <__ieee754_rem_pio2+0x3a0>
 8021ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8021d24 <__ieee754_rem_pio2+0x3f4>)
 8021ce8:	9301      	str	r3, [sp, #4]
 8021cea:	2302      	movs	r3, #2
 8021cec:	9300      	str	r3, [sp, #0]
 8021cee:	462a      	mov	r2, r5
 8021cf0:	4653      	mov	r3, sl
 8021cf2:	4621      	mov	r1, r4
 8021cf4:	a806      	add	r0, sp, #24
 8021cf6:	f000 ff7b 	bl	8022bf0 <__kernel_rem_pio2>
 8021cfa:	9b04      	ldr	r3, [sp, #16]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	4605      	mov	r5, r0
 8021d00:	f6bf ae53 	bge.w	80219aa <__ieee754_rem_pio2+0x7a>
 8021d04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8021d08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8021d10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8021d14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021d18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8021d1c:	e740      	b.n	8021ba0 <__ieee754_rem_pio2+0x270>
 8021d1e:	bf00      	nop
 8021d20:	41700000 	.word	0x41700000
 8021d24:	08023dd0 	.word	0x08023dd0

08021d28 <atan>:
 8021d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d2c:	ec55 4b10 	vmov	r4, r5, d0
 8021d30:	4bbf      	ldr	r3, [pc, #764]	@ (8022030 <atan+0x308>)
 8021d32:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8021d36:	429e      	cmp	r6, r3
 8021d38:	46ab      	mov	fp, r5
 8021d3a:	d918      	bls.n	8021d6e <atan+0x46>
 8021d3c:	4bbd      	ldr	r3, [pc, #756]	@ (8022034 <atan+0x30c>)
 8021d3e:	429e      	cmp	r6, r3
 8021d40:	d801      	bhi.n	8021d46 <atan+0x1e>
 8021d42:	d109      	bne.n	8021d58 <atan+0x30>
 8021d44:	b144      	cbz	r4, 8021d58 <atan+0x30>
 8021d46:	4622      	mov	r2, r4
 8021d48:	462b      	mov	r3, r5
 8021d4a:	4620      	mov	r0, r4
 8021d4c:	4629      	mov	r1, r5
 8021d4e:	f7de faa5 	bl	800029c <__adddf3>
 8021d52:	4604      	mov	r4, r0
 8021d54:	460d      	mov	r5, r1
 8021d56:	e006      	b.n	8021d66 <atan+0x3e>
 8021d58:	f1bb 0f00 	cmp.w	fp, #0
 8021d5c:	f340 812b 	ble.w	8021fb6 <atan+0x28e>
 8021d60:	a597      	add	r5, pc, #604	@ (adr r5, 8021fc0 <atan+0x298>)
 8021d62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021d66:	ec45 4b10 	vmov	d0, r4, r5
 8021d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d6e:	4bb2      	ldr	r3, [pc, #712]	@ (8022038 <atan+0x310>)
 8021d70:	429e      	cmp	r6, r3
 8021d72:	d813      	bhi.n	8021d9c <atan+0x74>
 8021d74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8021d78:	429e      	cmp	r6, r3
 8021d7a:	d80c      	bhi.n	8021d96 <atan+0x6e>
 8021d7c:	a392      	add	r3, pc, #584	@ (adr r3, 8021fc8 <atan+0x2a0>)
 8021d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d82:	4620      	mov	r0, r4
 8021d84:	4629      	mov	r1, r5
 8021d86:	f7de fa89 	bl	800029c <__adddf3>
 8021d8a:	4bac      	ldr	r3, [pc, #688]	@ (802203c <atan+0x314>)
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	f7de fecb 	bl	8000b28 <__aeabi_dcmpgt>
 8021d92:	2800      	cmp	r0, #0
 8021d94:	d1e7      	bne.n	8021d66 <atan+0x3e>
 8021d96:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8021d9a:	e029      	b.n	8021df0 <atan+0xc8>
 8021d9c:	f7fd fc6c 	bl	801f678 <fabs>
 8021da0:	4ba7      	ldr	r3, [pc, #668]	@ (8022040 <atan+0x318>)
 8021da2:	429e      	cmp	r6, r3
 8021da4:	ec55 4b10 	vmov	r4, r5, d0
 8021da8:	f200 80bc 	bhi.w	8021f24 <atan+0x1fc>
 8021dac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8021db0:	429e      	cmp	r6, r3
 8021db2:	f200 809e 	bhi.w	8021ef2 <atan+0x1ca>
 8021db6:	4622      	mov	r2, r4
 8021db8:	462b      	mov	r3, r5
 8021dba:	4620      	mov	r0, r4
 8021dbc:	4629      	mov	r1, r5
 8021dbe:	f7de fa6d 	bl	800029c <__adddf3>
 8021dc2:	4b9e      	ldr	r3, [pc, #632]	@ (802203c <atan+0x314>)
 8021dc4:	2200      	movs	r2, #0
 8021dc6:	f7de fa67 	bl	8000298 <__aeabi_dsub>
 8021dca:	2200      	movs	r2, #0
 8021dcc:	4606      	mov	r6, r0
 8021dce:	460f      	mov	r7, r1
 8021dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021dd4:	4620      	mov	r0, r4
 8021dd6:	4629      	mov	r1, r5
 8021dd8:	f7de fa60 	bl	800029c <__adddf3>
 8021ddc:	4602      	mov	r2, r0
 8021dde:	460b      	mov	r3, r1
 8021de0:	4630      	mov	r0, r6
 8021de2:	4639      	mov	r1, r7
 8021de4:	f7de fd3a 	bl	800085c <__aeabi_ddiv>
 8021de8:	f04f 0a00 	mov.w	sl, #0
 8021dec:	4604      	mov	r4, r0
 8021dee:	460d      	mov	r5, r1
 8021df0:	4622      	mov	r2, r4
 8021df2:	462b      	mov	r3, r5
 8021df4:	4620      	mov	r0, r4
 8021df6:	4629      	mov	r1, r5
 8021df8:	f7de fc06 	bl	8000608 <__aeabi_dmul>
 8021dfc:	4602      	mov	r2, r0
 8021dfe:	460b      	mov	r3, r1
 8021e00:	4680      	mov	r8, r0
 8021e02:	4689      	mov	r9, r1
 8021e04:	f7de fc00 	bl	8000608 <__aeabi_dmul>
 8021e08:	a371      	add	r3, pc, #452	@ (adr r3, 8021fd0 <atan+0x2a8>)
 8021e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e0e:	4606      	mov	r6, r0
 8021e10:	460f      	mov	r7, r1
 8021e12:	f7de fbf9 	bl	8000608 <__aeabi_dmul>
 8021e16:	a370      	add	r3, pc, #448	@ (adr r3, 8021fd8 <atan+0x2b0>)
 8021e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e1c:	f7de fa3e 	bl	800029c <__adddf3>
 8021e20:	4632      	mov	r2, r6
 8021e22:	463b      	mov	r3, r7
 8021e24:	f7de fbf0 	bl	8000608 <__aeabi_dmul>
 8021e28:	a36d      	add	r3, pc, #436	@ (adr r3, 8021fe0 <atan+0x2b8>)
 8021e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e2e:	f7de fa35 	bl	800029c <__adddf3>
 8021e32:	4632      	mov	r2, r6
 8021e34:	463b      	mov	r3, r7
 8021e36:	f7de fbe7 	bl	8000608 <__aeabi_dmul>
 8021e3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8021fe8 <atan+0x2c0>)
 8021e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e40:	f7de fa2c 	bl	800029c <__adddf3>
 8021e44:	4632      	mov	r2, r6
 8021e46:	463b      	mov	r3, r7
 8021e48:	f7de fbde 	bl	8000608 <__aeabi_dmul>
 8021e4c:	a368      	add	r3, pc, #416	@ (adr r3, 8021ff0 <atan+0x2c8>)
 8021e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e52:	f7de fa23 	bl	800029c <__adddf3>
 8021e56:	4632      	mov	r2, r6
 8021e58:	463b      	mov	r3, r7
 8021e5a:	f7de fbd5 	bl	8000608 <__aeabi_dmul>
 8021e5e:	a366      	add	r3, pc, #408	@ (adr r3, 8021ff8 <atan+0x2d0>)
 8021e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e64:	f7de fa1a 	bl	800029c <__adddf3>
 8021e68:	4642      	mov	r2, r8
 8021e6a:	464b      	mov	r3, r9
 8021e6c:	f7de fbcc 	bl	8000608 <__aeabi_dmul>
 8021e70:	a363      	add	r3, pc, #396	@ (adr r3, 8022000 <atan+0x2d8>)
 8021e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e76:	4680      	mov	r8, r0
 8021e78:	4689      	mov	r9, r1
 8021e7a:	4630      	mov	r0, r6
 8021e7c:	4639      	mov	r1, r7
 8021e7e:	f7de fbc3 	bl	8000608 <__aeabi_dmul>
 8021e82:	a361      	add	r3, pc, #388	@ (adr r3, 8022008 <atan+0x2e0>)
 8021e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e88:	f7de fa06 	bl	8000298 <__aeabi_dsub>
 8021e8c:	4632      	mov	r2, r6
 8021e8e:	463b      	mov	r3, r7
 8021e90:	f7de fbba 	bl	8000608 <__aeabi_dmul>
 8021e94:	a35e      	add	r3, pc, #376	@ (adr r3, 8022010 <atan+0x2e8>)
 8021e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e9a:	f7de f9fd 	bl	8000298 <__aeabi_dsub>
 8021e9e:	4632      	mov	r2, r6
 8021ea0:	463b      	mov	r3, r7
 8021ea2:	f7de fbb1 	bl	8000608 <__aeabi_dmul>
 8021ea6:	a35c      	add	r3, pc, #368	@ (adr r3, 8022018 <atan+0x2f0>)
 8021ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021eac:	f7de f9f4 	bl	8000298 <__aeabi_dsub>
 8021eb0:	4632      	mov	r2, r6
 8021eb2:	463b      	mov	r3, r7
 8021eb4:	f7de fba8 	bl	8000608 <__aeabi_dmul>
 8021eb8:	a359      	add	r3, pc, #356	@ (adr r3, 8022020 <atan+0x2f8>)
 8021eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ebe:	f7de f9eb 	bl	8000298 <__aeabi_dsub>
 8021ec2:	4632      	mov	r2, r6
 8021ec4:	463b      	mov	r3, r7
 8021ec6:	f7de fb9f 	bl	8000608 <__aeabi_dmul>
 8021eca:	4602      	mov	r2, r0
 8021ecc:	460b      	mov	r3, r1
 8021ece:	4640      	mov	r0, r8
 8021ed0:	4649      	mov	r1, r9
 8021ed2:	f7de f9e3 	bl	800029c <__adddf3>
 8021ed6:	4622      	mov	r2, r4
 8021ed8:	462b      	mov	r3, r5
 8021eda:	f7de fb95 	bl	8000608 <__aeabi_dmul>
 8021ede:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8021ee2:	4602      	mov	r2, r0
 8021ee4:	460b      	mov	r3, r1
 8021ee6:	d148      	bne.n	8021f7a <atan+0x252>
 8021ee8:	4620      	mov	r0, r4
 8021eea:	4629      	mov	r1, r5
 8021eec:	f7de f9d4 	bl	8000298 <__aeabi_dsub>
 8021ef0:	e72f      	b.n	8021d52 <atan+0x2a>
 8021ef2:	4b52      	ldr	r3, [pc, #328]	@ (802203c <atan+0x314>)
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	4620      	mov	r0, r4
 8021ef8:	4629      	mov	r1, r5
 8021efa:	f7de f9cd 	bl	8000298 <__aeabi_dsub>
 8021efe:	4b4f      	ldr	r3, [pc, #316]	@ (802203c <atan+0x314>)
 8021f00:	4606      	mov	r6, r0
 8021f02:	460f      	mov	r7, r1
 8021f04:	2200      	movs	r2, #0
 8021f06:	4620      	mov	r0, r4
 8021f08:	4629      	mov	r1, r5
 8021f0a:	f7de f9c7 	bl	800029c <__adddf3>
 8021f0e:	4602      	mov	r2, r0
 8021f10:	460b      	mov	r3, r1
 8021f12:	4630      	mov	r0, r6
 8021f14:	4639      	mov	r1, r7
 8021f16:	f7de fca1 	bl	800085c <__aeabi_ddiv>
 8021f1a:	f04f 0a01 	mov.w	sl, #1
 8021f1e:	4604      	mov	r4, r0
 8021f20:	460d      	mov	r5, r1
 8021f22:	e765      	b.n	8021df0 <atan+0xc8>
 8021f24:	4b47      	ldr	r3, [pc, #284]	@ (8022044 <atan+0x31c>)
 8021f26:	429e      	cmp	r6, r3
 8021f28:	d21c      	bcs.n	8021f64 <atan+0x23c>
 8021f2a:	4b47      	ldr	r3, [pc, #284]	@ (8022048 <atan+0x320>)
 8021f2c:	2200      	movs	r2, #0
 8021f2e:	4620      	mov	r0, r4
 8021f30:	4629      	mov	r1, r5
 8021f32:	f7de f9b1 	bl	8000298 <__aeabi_dsub>
 8021f36:	4b44      	ldr	r3, [pc, #272]	@ (8022048 <atan+0x320>)
 8021f38:	4606      	mov	r6, r0
 8021f3a:	460f      	mov	r7, r1
 8021f3c:	2200      	movs	r2, #0
 8021f3e:	4620      	mov	r0, r4
 8021f40:	4629      	mov	r1, r5
 8021f42:	f7de fb61 	bl	8000608 <__aeabi_dmul>
 8021f46:	4b3d      	ldr	r3, [pc, #244]	@ (802203c <atan+0x314>)
 8021f48:	2200      	movs	r2, #0
 8021f4a:	f7de f9a7 	bl	800029c <__adddf3>
 8021f4e:	4602      	mov	r2, r0
 8021f50:	460b      	mov	r3, r1
 8021f52:	4630      	mov	r0, r6
 8021f54:	4639      	mov	r1, r7
 8021f56:	f7de fc81 	bl	800085c <__aeabi_ddiv>
 8021f5a:	f04f 0a02 	mov.w	sl, #2
 8021f5e:	4604      	mov	r4, r0
 8021f60:	460d      	mov	r5, r1
 8021f62:	e745      	b.n	8021df0 <atan+0xc8>
 8021f64:	4622      	mov	r2, r4
 8021f66:	462b      	mov	r3, r5
 8021f68:	4938      	ldr	r1, [pc, #224]	@ (802204c <atan+0x324>)
 8021f6a:	2000      	movs	r0, #0
 8021f6c:	f7de fc76 	bl	800085c <__aeabi_ddiv>
 8021f70:	f04f 0a03 	mov.w	sl, #3
 8021f74:	4604      	mov	r4, r0
 8021f76:	460d      	mov	r5, r1
 8021f78:	e73a      	b.n	8021df0 <atan+0xc8>
 8021f7a:	4b35      	ldr	r3, [pc, #212]	@ (8022050 <atan+0x328>)
 8021f7c:	4e35      	ldr	r6, [pc, #212]	@ (8022054 <atan+0x32c>)
 8021f7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f86:	f7de f987 	bl	8000298 <__aeabi_dsub>
 8021f8a:	4622      	mov	r2, r4
 8021f8c:	462b      	mov	r3, r5
 8021f8e:	f7de f983 	bl	8000298 <__aeabi_dsub>
 8021f92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8021f96:	4602      	mov	r2, r0
 8021f98:	460b      	mov	r3, r1
 8021f9a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8021f9e:	f7de f97b 	bl	8000298 <__aeabi_dsub>
 8021fa2:	f1bb 0f00 	cmp.w	fp, #0
 8021fa6:	4604      	mov	r4, r0
 8021fa8:	460d      	mov	r5, r1
 8021faa:	f6bf aedc 	bge.w	8021d66 <atan+0x3e>
 8021fae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021fb2:	461d      	mov	r5, r3
 8021fb4:	e6d7      	b.n	8021d66 <atan+0x3e>
 8021fb6:	a51c      	add	r5, pc, #112	@ (adr r5, 8022028 <atan+0x300>)
 8021fb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021fbc:	e6d3      	b.n	8021d66 <atan+0x3e>
 8021fbe:	bf00      	nop
 8021fc0:	54442d18 	.word	0x54442d18
 8021fc4:	3ff921fb 	.word	0x3ff921fb
 8021fc8:	8800759c 	.word	0x8800759c
 8021fcc:	7e37e43c 	.word	0x7e37e43c
 8021fd0:	e322da11 	.word	0xe322da11
 8021fd4:	3f90ad3a 	.word	0x3f90ad3a
 8021fd8:	24760deb 	.word	0x24760deb
 8021fdc:	3fa97b4b 	.word	0x3fa97b4b
 8021fe0:	a0d03d51 	.word	0xa0d03d51
 8021fe4:	3fb10d66 	.word	0x3fb10d66
 8021fe8:	c54c206e 	.word	0xc54c206e
 8021fec:	3fb745cd 	.word	0x3fb745cd
 8021ff0:	920083ff 	.word	0x920083ff
 8021ff4:	3fc24924 	.word	0x3fc24924
 8021ff8:	5555550d 	.word	0x5555550d
 8021ffc:	3fd55555 	.word	0x3fd55555
 8022000:	2c6a6c2f 	.word	0x2c6a6c2f
 8022004:	bfa2b444 	.word	0xbfa2b444
 8022008:	52defd9a 	.word	0x52defd9a
 802200c:	3fadde2d 	.word	0x3fadde2d
 8022010:	af749a6d 	.word	0xaf749a6d
 8022014:	3fb3b0f2 	.word	0x3fb3b0f2
 8022018:	fe231671 	.word	0xfe231671
 802201c:	3fbc71c6 	.word	0x3fbc71c6
 8022020:	9998ebc4 	.word	0x9998ebc4
 8022024:	3fc99999 	.word	0x3fc99999
 8022028:	54442d18 	.word	0x54442d18
 802202c:	bff921fb 	.word	0xbff921fb
 8022030:	440fffff 	.word	0x440fffff
 8022034:	7ff00000 	.word	0x7ff00000
 8022038:	3fdbffff 	.word	0x3fdbffff
 802203c:	3ff00000 	.word	0x3ff00000
 8022040:	3ff2ffff 	.word	0x3ff2ffff
 8022044:	40038000 	.word	0x40038000
 8022048:	3ff80000 	.word	0x3ff80000
 802204c:	bff00000 	.word	0xbff00000
 8022050:	08023ed8 	.word	0x08023ed8
 8022054:	08023ef8 	.word	0x08023ef8

08022058 <__kernel_cosf>:
 8022058:	ee10 3a10 	vmov	r3, s0
 802205c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022060:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8022064:	eef0 6a40 	vmov.f32	s13, s0
 8022068:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802206c:	d204      	bcs.n	8022078 <__kernel_cosf+0x20>
 802206e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8022072:	ee17 2a90 	vmov	r2, s15
 8022076:	b342      	cbz	r2, 80220ca <__kernel_cosf+0x72>
 8022078:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802207c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80220e8 <__kernel_cosf+0x90>
 8022080:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80220ec <__kernel_cosf+0x94>
 8022084:	4a1a      	ldr	r2, [pc, #104]	@ (80220f0 <__kernel_cosf+0x98>)
 8022086:	eea7 6a27 	vfma.f32	s12, s14, s15
 802208a:	4293      	cmp	r3, r2
 802208c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80220f4 <__kernel_cosf+0x9c>
 8022090:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022094:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80220f8 <__kernel_cosf+0xa0>
 8022098:	eea7 6a87 	vfma.f32	s12, s15, s14
 802209c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80220fc <__kernel_cosf+0xa4>
 80220a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80220a4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8022100 <__kernel_cosf+0xa8>
 80220a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80220ac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80220b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80220b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80220b8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80220bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80220c0:	d804      	bhi.n	80220cc <__kernel_cosf+0x74>
 80220c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80220c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80220ca:	4770      	bx	lr
 80220cc:	4a0d      	ldr	r2, [pc, #52]	@ (8022104 <__kernel_cosf+0xac>)
 80220ce:	4293      	cmp	r3, r2
 80220d0:	bf9a      	itte	ls
 80220d2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80220d6:	ee07 3a10 	vmovls	s14, r3
 80220da:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80220de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80220e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80220e6:	e7ec      	b.n	80220c2 <__kernel_cosf+0x6a>
 80220e8:	ad47d74e 	.word	0xad47d74e
 80220ec:	310f74f6 	.word	0x310f74f6
 80220f0:	3e999999 	.word	0x3e999999
 80220f4:	b493f27c 	.word	0xb493f27c
 80220f8:	37d00d01 	.word	0x37d00d01
 80220fc:	bab60b61 	.word	0xbab60b61
 8022100:	3d2aaaab 	.word	0x3d2aaaab
 8022104:	3f480000 	.word	0x3f480000

08022108 <__kernel_sinf>:
 8022108:	ee10 3a10 	vmov	r3, s0
 802210c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022110:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8022114:	d204      	bcs.n	8022120 <__kernel_sinf+0x18>
 8022116:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802211a:	ee17 3a90 	vmov	r3, s15
 802211e:	b35b      	cbz	r3, 8022178 <__kernel_sinf+0x70>
 8022120:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022124:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802217c <__kernel_sinf+0x74>
 8022128:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8022180 <__kernel_sinf+0x78>
 802212c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022130:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8022184 <__kernel_sinf+0x7c>
 8022134:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022138:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8022188 <__kernel_sinf+0x80>
 802213c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022140:	eddf 7a12 	vldr	s15, [pc, #72]	@ 802218c <__kernel_sinf+0x84>
 8022144:	ee60 6a07 	vmul.f32	s13, s0, s14
 8022148:	eee6 7a07 	vfma.f32	s15, s12, s14
 802214c:	b930      	cbnz	r0, 802215c <__kernel_sinf+0x54>
 802214e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8022190 <__kernel_sinf+0x88>
 8022152:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022156:	eea6 0a26 	vfma.f32	s0, s12, s13
 802215a:	4770      	bx	lr
 802215c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8022160:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8022164:	eee0 7a86 	vfma.f32	s15, s1, s12
 8022168:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802216c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8022194 <__kernel_sinf+0x8c>
 8022170:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8022174:	ee30 0a60 	vsub.f32	s0, s0, s1
 8022178:	4770      	bx	lr
 802217a:	bf00      	nop
 802217c:	2f2ec9d3 	.word	0x2f2ec9d3
 8022180:	b2d72f34 	.word	0xb2d72f34
 8022184:	3638ef1b 	.word	0x3638ef1b
 8022188:	b9500d01 	.word	0xb9500d01
 802218c:	3c088889 	.word	0x3c088889
 8022190:	be2aaaab 	.word	0xbe2aaaab
 8022194:	3e2aaaab 	.word	0x3e2aaaab

08022198 <__kernel_tanf>:
 8022198:	b508      	push	{r3, lr}
 802219a:	ee10 3a10 	vmov	r3, s0
 802219e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80221a2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80221a6:	eef0 7a40 	vmov.f32	s15, s0
 80221aa:	d217      	bcs.n	80221dc <__kernel_tanf+0x44>
 80221ac:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80221b0:	ee17 1a10 	vmov	r1, s14
 80221b4:	bb41      	cbnz	r1, 8022208 <__kernel_tanf+0x70>
 80221b6:	1c43      	adds	r3, r0, #1
 80221b8:	4313      	orrs	r3, r2
 80221ba:	d108      	bne.n	80221ce <__kernel_tanf+0x36>
 80221bc:	f7fd fb5e 	bl	801f87c <fabsf>
 80221c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80221c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80221c8:	eeb0 0a67 	vmov.f32	s0, s15
 80221cc:	bd08      	pop	{r3, pc}
 80221ce:	2801      	cmp	r0, #1
 80221d0:	d0fa      	beq.n	80221c8 <__kernel_tanf+0x30>
 80221d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80221d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80221da:	e7f5      	b.n	80221c8 <__kernel_tanf+0x30>
 80221dc:	494c      	ldr	r1, [pc, #304]	@ (8022310 <__kernel_tanf+0x178>)
 80221de:	428a      	cmp	r2, r1
 80221e0:	d312      	bcc.n	8022208 <__kernel_tanf+0x70>
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8022314 <__kernel_tanf+0x17c>
 80221e8:	bfb8      	it	lt
 80221ea:	eef1 7a40 	vneglt.f32	s15, s0
 80221ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80221f2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8022318 <__kernel_tanf+0x180>
 80221f6:	bfb8      	it	lt
 80221f8:	eef1 0a60 	vneglt.f32	s1, s1
 80221fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022200:	eddf 0a46 	vldr	s1, [pc, #280]	@ 802231c <__kernel_tanf+0x184>
 8022204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022208:	ee67 6aa7 	vmul.f32	s13, s15, s15
 802220c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8022320 <__kernel_tanf+0x188>
 8022210:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8022324 <__kernel_tanf+0x18c>
 8022214:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8022328 <__kernel_tanf+0x190>
 8022218:	493d      	ldr	r1, [pc, #244]	@ (8022310 <__kernel_tanf+0x178>)
 802221a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802221e:	428a      	cmp	r2, r1
 8022220:	eea7 6a25 	vfma.f32	s12, s14, s11
 8022224:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802232c <__kernel_tanf+0x194>
 8022228:	eee6 5a07 	vfma.f32	s11, s12, s14
 802222c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8022330 <__kernel_tanf+0x198>
 8022230:	eea5 6a87 	vfma.f32	s12, s11, s14
 8022234:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8022334 <__kernel_tanf+0x19c>
 8022238:	eee6 5a07 	vfma.f32	s11, s12, s14
 802223c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8022338 <__kernel_tanf+0x1a0>
 8022240:	eea5 6a87 	vfma.f32	s12, s11, s14
 8022244:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 802233c <__kernel_tanf+0x1a4>
 8022248:	eee7 5a05 	vfma.f32	s11, s14, s10
 802224c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8022340 <__kernel_tanf+0x1a8>
 8022250:	eea5 5a87 	vfma.f32	s10, s11, s14
 8022254:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8022344 <__kernel_tanf+0x1ac>
 8022258:	eee5 5a07 	vfma.f32	s11, s10, s14
 802225c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8022348 <__kernel_tanf+0x1b0>
 8022260:	eea5 5a87 	vfma.f32	s10, s11, s14
 8022264:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802234c <__kernel_tanf+0x1b4>
 8022268:	eee5 5a07 	vfma.f32	s11, s10, s14
 802226c:	eeb0 7a46 	vmov.f32	s14, s12
 8022270:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022274:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8022278:	eeb0 6a60 	vmov.f32	s12, s1
 802227c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8022280:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022350 <__kernel_tanf+0x1b8>
 8022284:	eee6 0a26 	vfma.f32	s1, s12, s13
 8022288:	eee5 0a07 	vfma.f32	s1, s10, s14
 802228c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8022290:	d31d      	bcc.n	80222ce <__kernel_tanf+0x136>
 8022292:	ee07 0a10 	vmov	s14, r0
 8022296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802229a:	ee26 5a06 	vmul.f32	s10, s12, s12
 802229e:	ee36 6a07 	vadd.f32	s12, s12, s14
 80222a2:	179b      	asrs	r3, r3, #30
 80222a4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80222a8:	f003 0302 	and.w	r3, r3, #2
 80222ac:	f1c3 0301 	rsb	r3, r3, #1
 80222b0:	ee06 3a90 	vmov	s13, r3
 80222b4:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80222b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80222bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80222c0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80222c4:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80222c8:	ee66 7a87 	vmul.f32	s15, s13, s14
 80222cc:	e77c      	b.n	80221c8 <__kernel_tanf+0x30>
 80222ce:	2801      	cmp	r0, #1
 80222d0:	d01b      	beq.n	802230a <__kernel_tanf+0x172>
 80222d2:	4b20      	ldr	r3, [pc, #128]	@ (8022354 <__kernel_tanf+0x1bc>)
 80222d4:	ee16 2a10 	vmov	r2, s12
 80222d8:	401a      	ands	r2, r3
 80222da:	ee05 2a90 	vmov	s11, r2
 80222de:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80222e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80222e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80222ea:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80222ee:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80222f2:	ee16 2a90 	vmov	r2, s13
 80222f6:	4013      	ands	r3, r2
 80222f8:	ee07 3a90 	vmov	s15, r3
 80222fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8022300:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8022304:	eee7 7a26 	vfma.f32	s15, s14, s13
 8022308:	e75e      	b.n	80221c8 <__kernel_tanf+0x30>
 802230a:	eef0 7a46 	vmov.f32	s15, s12
 802230e:	e75b      	b.n	80221c8 <__kernel_tanf+0x30>
 8022310:	3f2ca140 	.word	0x3f2ca140
 8022314:	3f490fda 	.word	0x3f490fda
 8022318:	33222168 	.word	0x33222168
 802231c:	00000000 	.word	0x00000000
 8022320:	b79bae5f 	.word	0xb79bae5f
 8022324:	38a3f445 	.word	0x38a3f445
 8022328:	37d95384 	.word	0x37d95384
 802232c:	3a1a26c8 	.word	0x3a1a26c8
 8022330:	3b6b6916 	.word	0x3b6b6916
 8022334:	3cb327a4 	.word	0x3cb327a4
 8022338:	3e088889 	.word	0x3e088889
 802233c:	3895c07a 	.word	0x3895c07a
 8022340:	398137b9 	.word	0x398137b9
 8022344:	3abede48 	.word	0x3abede48
 8022348:	3c11371f 	.word	0x3c11371f
 802234c:	3d5d0dd1 	.word	0x3d5d0dd1
 8022350:	3eaaaaab 	.word	0x3eaaaaab
 8022354:	fffff000 	.word	0xfffff000

08022358 <__ieee754_asinf>:
 8022358:	b538      	push	{r3, r4, r5, lr}
 802235a:	ee10 5a10 	vmov	r5, s0
 802235e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8022362:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8022366:	ed2d 8b04 	vpush	{d8-d9}
 802236a:	d10c      	bne.n	8022386 <__ieee754_asinf+0x2e>
 802236c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80224e4 <__ieee754_asinf+0x18c>
 8022370:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80224e8 <__ieee754_asinf+0x190>
 8022374:	ee60 7a27 	vmul.f32	s15, s0, s15
 8022378:	eee0 7a07 	vfma.f32	s15, s0, s14
 802237c:	eeb0 0a67 	vmov.f32	s0, s15
 8022380:	ecbd 8b04 	vpop	{d8-d9}
 8022384:	bd38      	pop	{r3, r4, r5, pc}
 8022386:	d904      	bls.n	8022392 <__ieee754_asinf+0x3a>
 8022388:	ee70 7a40 	vsub.f32	s15, s0, s0
 802238c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8022390:	e7f6      	b.n	8022380 <__ieee754_asinf+0x28>
 8022392:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8022396:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 802239a:	d20b      	bcs.n	80223b4 <__ieee754_asinf+0x5c>
 802239c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80223a0:	d252      	bcs.n	8022448 <__ieee754_asinf+0xf0>
 80223a2:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80224ec <__ieee754_asinf+0x194>
 80223a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80223aa:	eef4 7ae8 	vcmpe.f32	s15, s17
 80223ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223b2:	dce5      	bgt.n	8022380 <__ieee754_asinf+0x28>
 80223b4:	f7fd fa62 	bl	801f87c <fabsf>
 80223b8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80223bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80223c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80223c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80224f0 <__ieee754_asinf+0x198>
 80223c8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80224f4 <__ieee754_asinf+0x19c>
 80223cc:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80224f8 <__ieee754_asinf+0x1a0>
 80223d0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80223d4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80224fc <__ieee754_asinf+0x1a4>
 80223d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80223dc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8022500 <__ieee754_asinf+0x1a8>
 80223e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80223e4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8022504 <__ieee754_asinf+0x1ac>
 80223e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80223ec:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8022508 <__ieee754_asinf+0x1b0>
 80223f0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80223f4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 802250c <__ieee754_asinf+0x1b4>
 80223f8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80223fc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8022510 <__ieee754_asinf+0x1b8>
 8022400:	eea7 7a88 	vfma.f32	s14, s15, s16
 8022404:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8022514 <__ieee754_asinf+0x1bc>
 8022408:	eee7 7a08 	vfma.f32	s15, s14, s16
 802240c:	eeb0 0a48 	vmov.f32	s0, s16
 8022410:	eee7 8a88 	vfma.f32	s17, s15, s16
 8022414:	f000 fbe8 	bl	8022be8 <__ieee754_sqrtf>
 8022418:	4b3f      	ldr	r3, [pc, #252]	@ (8022518 <__ieee754_asinf+0x1c0>)
 802241a:	ee29 9a08 	vmul.f32	s18, s18, s16
 802241e:	429c      	cmp	r4, r3
 8022420:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8022424:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8022428:	d93d      	bls.n	80224a6 <__ieee754_asinf+0x14e>
 802242a:	eea0 0a06 	vfma.f32	s0, s0, s12
 802242e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802251c <__ieee754_asinf+0x1c4>
 8022432:	eee0 7a26 	vfma.f32	s15, s0, s13
 8022436:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80224e8 <__ieee754_asinf+0x190>
 802243a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802243e:	2d00      	cmp	r5, #0
 8022440:	bfd8      	it	le
 8022442:	eeb1 0a40 	vnegle.f32	s0, s0
 8022446:	e79b      	b.n	8022380 <__ieee754_asinf+0x28>
 8022448:	ee60 7a00 	vmul.f32	s15, s0, s0
 802244c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80224f4 <__ieee754_asinf+0x19c>
 8022450:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80224f0 <__ieee754_asinf+0x198>
 8022454:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8022508 <__ieee754_asinf+0x1b0>
 8022458:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802245c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80224fc <__ieee754_asinf+0x1a4>
 8022460:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022464:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8022500 <__ieee754_asinf+0x1a8>
 8022468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802246c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8022504 <__ieee754_asinf+0x1ac>
 8022470:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022474:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80224f8 <__ieee754_asinf+0x1a0>
 8022478:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802247c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 802250c <__ieee754_asinf+0x1b4>
 8022480:	eee7 6a86 	vfma.f32	s13, s15, s12
 8022484:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8022510 <__ieee754_asinf+0x1b8>
 8022488:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802248c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8022514 <__ieee754_asinf+0x1bc>
 8022490:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022498:	eee6 8aa7 	vfma.f32	s17, s13, s15
 802249c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80224a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80224a4:	e76c      	b.n	8022380 <__ieee754_asinf+0x28>
 80224a6:	ee10 3a10 	vmov	r3, s0
 80224aa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80224ae:	f023 030f 	bic.w	r3, r3, #15
 80224b2:	ee07 3a10 	vmov	s14, r3
 80224b6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80224ba:	ee70 5a00 	vadd.f32	s11, s0, s0
 80224be:	ee30 0a07 	vadd.f32	s0, s0, s14
 80224c2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80224e4 <__ieee754_asinf+0x18c>
 80224c6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80224ca:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8022520 <__ieee754_asinf+0x1c8>
 80224ce:	eee5 7a66 	vfms.f32	s15, s10, s13
 80224d2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80224d6:	eeb0 6a40 	vmov.f32	s12, s0
 80224da:	eea7 6a66 	vfms.f32	s12, s14, s13
 80224de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80224e2:	e7aa      	b.n	802243a <__ieee754_asinf+0xe2>
 80224e4:	b33bbd2e 	.word	0xb33bbd2e
 80224e8:	3fc90fdb 	.word	0x3fc90fdb
 80224ec:	7149f2ca 	.word	0x7149f2ca
 80224f0:	3a4f7f04 	.word	0x3a4f7f04
 80224f4:	3811ef08 	.word	0x3811ef08
 80224f8:	3e2aaaab 	.word	0x3e2aaaab
 80224fc:	bd241146 	.word	0xbd241146
 8022500:	3e4e0aa8 	.word	0x3e4e0aa8
 8022504:	bea6b090 	.word	0xbea6b090
 8022508:	3d9dc62e 	.word	0x3d9dc62e
 802250c:	bf303361 	.word	0xbf303361
 8022510:	4001572d 	.word	0x4001572d
 8022514:	c019d139 	.word	0xc019d139
 8022518:	3f799999 	.word	0x3f799999
 802251c:	333bbd2e 	.word	0x333bbd2e
 8022520:	3f490fdb 	.word	0x3f490fdb

08022524 <__ieee754_atan2f>:
 8022524:	ee10 2a90 	vmov	r2, s1
 8022528:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802252c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022530:	b510      	push	{r4, lr}
 8022532:	eef0 7a40 	vmov.f32	s15, s0
 8022536:	d806      	bhi.n	8022546 <__ieee754_atan2f+0x22>
 8022538:	ee10 0a10 	vmov	r0, s0
 802253c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8022540:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022544:	d904      	bls.n	8022550 <__ieee754_atan2f+0x2c>
 8022546:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802254a:	eeb0 0a67 	vmov.f32	s0, s15
 802254e:	bd10      	pop	{r4, pc}
 8022550:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022554:	d103      	bne.n	802255e <__ieee754_atan2f+0x3a>
 8022556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802255a:	f000 b9b3 	b.w	80228c4 <atanf>
 802255e:	1794      	asrs	r4, r2, #30
 8022560:	f004 0402 	and.w	r4, r4, #2
 8022564:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022568:	b943      	cbnz	r3, 802257c <__ieee754_atan2f+0x58>
 802256a:	2c02      	cmp	r4, #2
 802256c:	d05e      	beq.n	802262c <__ieee754_atan2f+0x108>
 802256e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8022640 <__ieee754_atan2f+0x11c>
 8022572:	2c03      	cmp	r4, #3
 8022574:	bf08      	it	eq
 8022576:	eef0 7a47 	vmoveq.f32	s15, s14
 802257a:	e7e6      	b.n	802254a <__ieee754_atan2f+0x26>
 802257c:	b941      	cbnz	r1, 8022590 <__ieee754_atan2f+0x6c>
 802257e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8022644 <__ieee754_atan2f+0x120>
 8022582:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8022648 <__ieee754_atan2f+0x124>
 8022586:	2800      	cmp	r0, #0
 8022588:	bfb8      	it	lt
 802258a:	eef0 7a47 	vmovlt.f32	s15, s14
 802258e:	e7dc      	b.n	802254a <__ieee754_atan2f+0x26>
 8022590:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022594:	d110      	bne.n	80225b8 <__ieee754_atan2f+0x94>
 8022596:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802259a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 802259e:	d107      	bne.n	80225b0 <__ieee754_atan2f+0x8c>
 80225a0:	2c02      	cmp	r4, #2
 80225a2:	d846      	bhi.n	8022632 <__ieee754_atan2f+0x10e>
 80225a4:	4b29      	ldr	r3, [pc, #164]	@ (802264c <__ieee754_atan2f+0x128>)
 80225a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80225aa:	edd3 7a00 	vldr	s15, [r3]
 80225ae:	e7cc      	b.n	802254a <__ieee754_atan2f+0x26>
 80225b0:	2c02      	cmp	r4, #2
 80225b2:	d841      	bhi.n	8022638 <__ieee754_atan2f+0x114>
 80225b4:	4b26      	ldr	r3, [pc, #152]	@ (8022650 <__ieee754_atan2f+0x12c>)
 80225b6:	e7f6      	b.n	80225a6 <__ieee754_atan2f+0x82>
 80225b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80225bc:	d0df      	beq.n	802257e <__ieee754_atan2f+0x5a>
 80225be:	1a5b      	subs	r3, r3, r1
 80225c0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80225c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80225c8:	da1a      	bge.n	8022600 <__ieee754_atan2f+0xdc>
 80225ca:	2a00      	cmp	r2, #0
 80225cc:	da01      	bge.n	80225d2 <__ieee754_atan2f+0xae>
 80225ce:	313c      	adds	r1, #60	@ 0x3c
 80225d0:	db19      	blt.n	8022606 <__ieee754_atan2f+0xe2>
 80225d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80225d6:	f7fd f951 	bl	801f87c <fabsf>
 80225da:	f000 f973 	bl	80228c4 <atanf>
 80225de:	eef0 7a40 	vmov.f32	s15, s0
 80225e2:	2c01      	cmp	r4, #1
 80225e4:	d012      	beq.n	802260c <__ieee754_atan2f+0xe8>
 80225e6:	2c02      	cmp	r4, #2
 80225e8:	d017      	beq.n	802261a <__ieee754_atan2f+0xf6>
 80225ea:	2c00      	cmp	r4, #0
 80225ec:	d0ad      	beq.n	802254a <__ieee754_atan2f+0x26>
 80225ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8022654 <__ieee754_atan2f+0x130>
 80225f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80225f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8022658 <__ieee754_atan2f+0x134>
 80225fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80225fe:	e7a4      	b.n	802254a <__ieee754_atan2f+0x26>
 8022600:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8022644 <__ieee754_atan2f+0x120>
 8022604:	e7ed      	b.n	80225e2 <__ieee754_atan2f+0xbe>
 8022606:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802265c <__ieee754_atan2f+0x138>
 802260a:	e7ea      	b.n	80225e2 <__ieee754_atan2f+0xbe>
 802260c:	ee17 3a90 	vmov	r3, s15
 8022610:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8022614:	ee07 3a90 	vmov	s15, r3
 8022618:	e797      	b.n	802254a <__ieee754_atan2f+0x26>
 802261a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8022654 <__ieee754_atan2f+0x130>
 802261e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022622:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8022658 <__ieee754_atan2f+0x134>
 8022626:	ee77 7a67 	vsub.f32	s15, s14, s15
 802262a:	e78e      	b.n	802254a <__ieee754_atan2f+0x26>
 802262c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8022658 <__ieee754_atan2f+0x134>
 8022630:	e78b      	b.n	802254a <__ieee754_atan2f+0x26>
 8022632:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8022660 <__ieee754_atan2f+0x13c>
 8022636:	e788      	b.n	802254a <__ieee754_atan2f+0x26>
 8022638:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802265c <__ieee754_atan2f+0x138>
 802263c:	e785      	b.n	802254a <__ieee754_atan2f+0x26>
 802263e:	bf00      	nop
 8022640:	c0490fdb 	.word	0xc0490fdb
 8022644:	3fc90fdb 	.word	0x3fc90fdb
 8022648:	bfc90fdb 	.word	0xbfc90fdb
 802264c:	08023f24 	.word	0x08023f24
 8022650:	08023f18 	.word	0x08023f18
 8022654:	33bbbd2e 	.word	0x33bbbd2e
 8022658:	40490fdb 	.word	0x40490fdb
 802265c:	00000000 	.word	0x00000000
 8022660:	3f490fdb 	.word	0x3f490fdb

08022664 <__ieee754_rem_pio2f>:
 8022664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022666:	ee10 6a10 	vmov	r6, s0
 802266a:	4b88      	ldr	r3, [pc, #544]	@ (802288c <__ieee754_rem_pio2f+0x228>)
 802266c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8022670:	429d      	cmp	r5, r3
 8022672:	b087      	sub	sp, #28
 8022674:	4604      	mov	r4, r0
 8022676:	d805      	bhi.n	8022684 <__ieee754_rem_pio2f+0x20>
 8022678:	2300      	movs	r3, #0
 802267a:	ed80 0a00 	vstr	s0, [r0]
 802267e:	6043      	str	r3, [r0, #4]
 8022680:	2000      	movs	r0, #0
 8022682:	e022      	b.n	80226ca <__ieee754_rem_pio2f+0x66>
 8022684:	4b82      	ldr	r3, [pc, #520]	@ (8022890 <__ieee754_rem_pio2f+0x22c>)
 8022686:	429d      	cmp	r5, r3
 8022688:	d83a      	bhi.n	8022700 <__ieee754_rem_pio2f+0x9c>
 802268a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802268e:	2e00      	cmp	r6, #0
 8022690:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8022894 <__ieee754_rem_pio2f+0x230>
 8022694:	4a80      	ldr	r2, [pc, #512]	@ (8022898 <__ieee754_rem_pio2f+0x234>)
 8022696:	f023 030f 	bic.w	r3, r3, #15
 802269a:	dd18      	ble.n	80226ce <__ieee754_rem_pio2f+0x6a>
 802269c:	4293      	cmp	r3, r2
 802269e:	ee70 7a47 	vsub.f32	s15, s0, s14
 80226a2:	bf09      	itett	eq
 80226a4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 802289c <__ieee754_rem_pio2f+0x238>
 80226a8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80228a0 <__ieee754_rem_pio2f+0x23c>
 80226ac:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80228a4 <__ieee754_rem_pio2f+0x240>
 80226b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80226b4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80226b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80226bc:	ed80 7a00 	vstr	s14, [r0]
 80226c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80226c4:	edc0 7a01 	vstr	s15, [r0, #4]
 80226c8:	2001      	movs	r0, #1
 80226ca:	b007      	add	sp, #28
 80226cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80226ce:	4293      	cmp	r3, r2
 80226d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80226d4:	bf09      	itett	eq
 80226d6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 802289c <__ieee754_rem_pio2f+0x238>
 80226da:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80228a0 <__ieee754_rem_pio2f+0x23c>
 80226de:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80228a4 <__ieee754_rem_pio2f+0x240>
 80226e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80226e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80226ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80226ee:	ed80 7a00 	vstr	s14, [r0]
 80226f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80226f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80226fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80226fe:	e7e4      	b.n	80226ca <__ieee754_rem_pio2f+0x66>
 8022700:	4b69      	ldr	r3, [pc, #420]	@ (80228a8 <__ieee754_rem_pio2f+0x244>)
 8022702:	429d      	cmp	r5, r3
 8022704:	d873      	bhi.n	80227ee <__ieee754_rem_pio2f+0x18a>
 8022706:	f7fd f8b9 	bl	801f87c <fabsf>
 802270a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80228ac <__ieee754_rem_pio2f+0x248>
 802270e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8022712:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802271e:	ee17 0a90 	vmov	r0, s15
 8022722:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8022894 <__ieee754_rem_pio2f+0x230>
 8022726:	eea7 0a67 	vfms.f32	s0, s14, s15
 802272a:	281f      	cmp	r0, #31
 802272c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80228a0 <__ieee754_rem_pio2f+0x23c>
 8022730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022734:	eeb1 6a47 	vneg.f32	s12, s14
 8022738:	ee70 6a67 	vsub.f32	s13, s0, s15
 802273c:	ee16 1a90 	vmov	r1, s13
 8022740:	dc09      	bgt.n	8022756 <__ieee754_rem_pio2f+0xf2>
 8022742:	4a5b      	ldr	r2, [pc, #364]	@ (80228b0 <__ieee754_rem_pio2f+0x24c>)
 8022744:	1e47      	subs	r7, r0, #1
 8022746:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802274a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802274e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8022752:	4293      	cmp	r3, r2
 8022754:	d107      	bne.n	8022766 <__ieee754_rem_pio2f+0x102>
 8022756:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802275a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802275e:	2a08      	cmp	r2, #8
 8022760:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8022764:	dc14      	bgt.n	8022790 <__ieee754_rem_pio2f+0x12c>
 8022766:	6021      	str	r1, [r4, #0]
 8022768:	ed94 7a00 	vldr	s14, [r4]
 802276c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022770:	2e00      	cmp	r6, #0
 8022772:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022776:	ed84 0a01 	vstr	s0, [r4, #4]
 802277a:	daa6      	bge.n	80226ca <__ieee754_rem_pio2f+0x66>
 802277c:	eeb1 7a47 	vneg.f32	s14, s14
 8022780:	eeb1 0a40 	vneg.f32	s0, s0
 8022784:	ed84 7a00 	vstr	s14, [r4]
 8022788:	ed84 0a01 	vstr	s0, [r4, #4]
 802278c:	4240      	negs	r0, r0
 802278e:	e79c      	b.n	80226ca <__ieee754_rem_pio2f+0x66>
 8022790:	eddf 5a42 	vldr	s11, [pc, #264]	@ 802289c <__ieee754_rem_pio2f+0x238>
 8022794:	eef0 6a40 	vmov.f32	s13, s0
 8022798:	eee6 6a25 	vfma.f32	s13, s12, s11
 802279c:	ee70 7a66 	vsub.f32	s15, s0, s13
 80227a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80227a4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80228a4 <__ieee754_rem_pio2f+0x240>
 80227a8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80227ac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80227b0:	ee15 2a90 	vmov	r2, s11
 80227b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80227b8:	1a5b      	subs	r3, r3, r1
 80227ba:	2b19      	cmp	r3, #25
 80227bc:	dc04      	bgt.n	80227c8 <__ieee754_rem_pio2f+0x164>
 80227be:	edc4 5a00 	vstr	s11, [r4]
 80227c2:	eeb0 0a66 	vmov.f32	s0, s13
 80227c6:	e7cf      	b.n	8022768 <__ieee754_rem_pio2f+0x104>
 80227c8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80228b4 <__ieee754_rem_pio2f+0x250>
 80227cc:	eeb0 0a66 	vmov.f32	s0, s13
 80227d0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80227d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80227d8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80228b8 <__ieee754_rem_pio2f+0x254>
 80227dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80227e0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80227e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80227e8:	ed84 7a00 	vstr	s14, [r4]
 80227ec:	e7bc      	b.n	8022768 <__ieee754_rem_pio2f+0x104>
 80227ee:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80227f2:	d306      	bcc.n	8022802 <__ieee754_rem_pio2f+0x19e>
 80227f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80227f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80227fc:	edc0 7a00 	vstr	s15, [r0]
 8022800:	e73e      	b.n	8022680 <__ieee754_rem_pio2f+0x1c>
 8022802:	15ea      	asrs	r2, r5, #23
 8022804:	3a86      	subs	r2, #134	@ 0x86
 8022806:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802280a:	ee07 3a90 	vmov	s15, r3
 802280e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022812:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80228bc <__ieee754_rem_pio2f+0x258>
 8022816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802281a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802281e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8022822:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022826:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802282a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802282e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022832:	ed8d 7a04 	vstr	s14, [sp, #16]
 8022836:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802283a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022842:	edcd 7a05 	vstr	s15, [sp, #20]
 8022846:	d11e      	bne.n	8022886 <__ieee754_rem_pio2f+0x222>
 8022848:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022850:	bf0c      	ite	eq
 8022852:	2301      	moveq	r3, #1
 8022854:	2302      	movne	r3, #2
 8022856:	491a      	ldr	r1, [pc, #104]	@ (80228c0 <__ieee754_rem_pio2f+0x25c>)
 8022858:	9101      	str	r1, [sp, #4]
 802285a:	2102      	movs	r1, #2
 802285c:	9100      	str	r1, [sp, #0]
 802285e:	a803      	add	r0, sp, #12
 8022860:	4621      	mov	r1, r4
 8022862:	f000 fd1d 	bl	80232a0 <__kernel_rem_pio2f>
 8022866:	2e00      	cmp	r6, #0
 8022868:	f6bf af2f 	bge.w	80226ca <__ieee754_rem_pio2f+0x66>
 802286c:	edd4 7a00 	vldr	s15, [r4]
 8022870:	eef1 7a67 	vneg.f32	s15, s15
 8022874:	edc4 7a00 	vstr	s15, [r4]
 8022878:	edd4 7a01 	vldr	s15, [r4, #4]
 802287c:	eef1 7a67 	vneg.f32	s15, s15
 8022880:	edc4 7a01 	vstr	s15, [r4, #4]
 8022884:	e782      	b.n	802278c <__ieee754_rem_pio2f+0x128>
 8022886:	2303      	movs	r3, #3
 8022888:	e7e5      	b.n	8022856 <__ieee754_rem_pio2f+0x1f2>
 802288a:	bf00      	nop
 802288c:	3f490fd8 	.word	0x3f490fd8
 8022890:	4016cbe3 	.word	0x4016cbe3
 8022894:	3fc90f80 	.word	0x3fc90f80
 8022898:	3fc90fd0 	.word	0x3fc90fd0
 802289c:	37354400 	.word	0x37354400
 80228a0:	37354443 	.word	0x37354443
 80228a4:	2e85a308 	.word	0x2e85a308
 80228a8:	43490f80 	.word	0x43490f80
 80228ac:	3f22f984 	.word	0x3f22f984
 80228b0:	08023f30 	.word	0x08023f30
 80228b4:	2e85a300 	.word	0x2e85a300
 80228b8:	248d3132 	.word	0x248d3132
 80228bc:	43800000 	.word	0x43800000
 80228c0:	08023fb0 	.word	0x08023fb0

080228c4 <atanf>:
 80228c4:	b538      	push	{r3, r4, r5, lr}
 80228c6:	ee10 5a10 	vmov	r5, s0
 80228ca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80228ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80228d2:	eef0 7a40 	vmov.f32	s15, s0
 80228d6:	d310      	bcc.n	80228fa <atanf+0x36>
 80228d8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80228dc:	d904      	bls.n	80228e8 <atanf+0x24>
 80228de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80228e2:	eeb0 0a67 	vmov.f32	s0, s15
 80228e6:	bd38      	pop	{r3, r4, r5, pc}
 80228e8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022a20 <atanf+0x15c>
 80228ec:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8022a24 <atanf+0x160>
 80228f0:	2d00      	cmp	r5, #0
 80228f2:	bfc8      	it	gt
 80228f4:	eef0 7a47 	vmovgt.f32	s15, s14
 80228f8:	e7f3      	b.n	80228e2 <atanf+0x1e>
 80228fa:	4b4b      	ldr	r3, [pc, #300]	@ (8022a28 <atanf+0x164>)
 80228fc:	429c      	cmp	r4, r3
 80228fe:	d810      	bhi.n	8022922 <atanf+0x5e>
 8022900:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8022904:	d20a      	bcs.n	802291c <atanf+0x58>
 8022906:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8022a2c <atanf+0x168>
 802290a:	ee30 7a07 	vadd.f32	s14, s0, s14
 802290e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022912:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8022916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802291a:	dce2      	bgt.n	80228e2 <atanf+0x1e>
 802291c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022920:	e013      	b.n	802294a <atanf+0x86>
 8022922:	f7fc ffab 	bl	801f87c <fabsf>
 8022926:	4b42      	ldr	r3, [pc, #264]	@ (8022a30 <atanf+0x16c>)
 8022928:	429c      	cmp	r4, r3
 802292a:	d84f      	bhi.n	80229cc <atanf+0x108>
 802292c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8022930:	429c      	cmp	r4, r3
 8022932:	d841      	bhi.n	80229b8 <atanf+0xf4>
 8022934:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8022938:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802293c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022940:	2300      	movs	r3, #0
 8022942:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022946:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802294a:	1c5a      	adds	r2, r3, #1
 802294c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022950:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8022a34 <atanf+0x170>
 8022954:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8022a38 <atanf+0x174>
 8022958:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8022a3c <atanf+0x178>
 802295c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022960:	eee6 5a87 	vfma.f32	s11, s13, s14
 8022964:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8022a40 <atanf+0x17c>
 8022968:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802296c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8022a44 <atanf+0x180>
 8022970:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022974:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8022a48 <atanf+0x184>
 8022978:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802297c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8022a4c <atanf+0x188>
 8022980:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022984:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8022a50 <atanf+0x18c>
 8022988:	eea6 5a87 	vfma.f32	s10, s13, s14
 802298c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8022a54 <atanf+0x190>
 8022990:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022994:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8022a58 <atanf+0x194>
 8022998:	eea7 5a26 	vfma.f32	s10, s14, s13
 802299c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8022a5c <atanf+0x198>
 80229a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80229a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80229a8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80229ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80229b0:	d121      	bne.n	80229f6 <atanf+0x132>
 80229b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229b6:	e794      	b.n	80228e2 <atanf+0x1e>
 80229b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80229bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80229c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80229c4:	2301      	movs	r3, #1
 80229c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80229ca:	e7be      	b.n	802294a <atanf+0x86>
 80229cc:	4b24      	ldr	r3, [pc, #144]	@ (8022a60 <atanf+0x19c>)
 80229ce:	429c      	cmp	r4, r3
 80229d0:	d80b      	bhi.n	80229ea <atanf+0x126>
 80229d2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80229d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80229da:	eea0 7a27 	vfma.f32	s14, s0, s15
 80229de:	2302      	movs	r3, #2
 80229e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80229e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80229e8:	e7af      	b.n	802294a <atanf+0x86>
 80229ea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80229ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80229f2:	2303      	movs	r3, #3
 80229f4:	e7a9      	b.n	802294a <atanf+0x86>
 80229f6:	4a1b      	ldr	r2, [pc, #108]	@ (8022a64 <atanf+0x1a0>)
 80229f8:	491b      	ldr	r1, [pc, #108]	@ (8022a68 <atanf+0x1a4>)
 80229fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80229fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022a02:	edd3 6a00 	vldr	s13, [r3]
 8022a06:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022a0a:	2d00      	cmp	r5, #0
 8022a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022a10:	edd2 7a00 	vldr	s15, [r2]
 8022a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a18:	bfb8      	it	lt
 8022a1a:	eef1 7a67 	vneglt.f32	s15, s15
 8022a1e:	e760      	b.n	80228e2 <atanf+0x1e>
 8022a20:	bfc90fdb 	.word	0xbfc90fdb
 8022a24:	3fc90fdb 	.word	0x3fc90fdb
 8022a28:	3edfffff 	.word	0x3edfffff
 8022a2c:	7149f2ca 	.word	0x7149f2ca
 8022a30:	3f97ffff 	.word	0x3f97ffff
 8022a34:	3c8569d7 	.word	0x3c8569d7
 8022a38:	3d4bda59 	.word	0x3d4bda59
 8022a3c:	bd6ef16b 	.word	0xbd6ef16b
 8022a40:	3d886b35 	.word	0x3d886b35
 8022a44:	3dba2e6e 	.word	0x3dba2e6e
 8022a48:	3e124925 	.word	0x3e124925
 8022a4c:	3eaaaaab 	.word	0x3eaaaaab
 8022a50:	bd15a221 	.word	0xbd15a221
 8022a54:	bd9d8795 	.word	0xbd9d8795
 8022a58:	bde38e38 	.word	0xbde38e38
 8022a5c:	be4ccccd 	.word	0xbe4ccccd
 8022a60:	401bffff 	.word	0x401bffff
 8022a64:	080242d8 	.word	0x080242d8
 8022a68:	080242c8 	.word	0x080242c8
 8022a6c:	00000000 	.word	0x00000000

08022a70 <scalbn>:
 8022a70:	b570      	push	{r4, r5, r6, lr}
 8022a72:	ec55 4b10 	vmov	r4, r5, d0
 8022a76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8022a7a:	4606      	mov	r6, r0
 8022a7c:	462b      	mov	r3, r5
 8022a7e:	b991      	cbnz	r1, 8022aa6 <scalbn+0x36>
 8022a80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8022a84:	4323      	orrs	r3, r4
 8022a86:	d03d      	beq.n	8022b04 <scalbn+0x94>
 8022a88:	4b35      	ldr	r3, [pc, #212]	@ (8022b60 <scalbn+0xf0>)
 8022a8a:	4620      	mov	r0, r4
 8022a8c:	4629      	mov	r1, r5
 8022a8e:	2200      	movs	r2, #0
 8022a90:	f7dd fdba 	bl	8000608 <__aeabi_dmul>
 8022a94:	4b33      	ldr	r3, [pc, #204]	@ (8022b64 <scalbn+0xf4>)
 8022a96:	429e      	cmp	r6, r3
 8022a98:	4604      	mov	r4, r0
 8022a9a:	460d      	mov	r5, r1
 8022a9c:	da0f      	bge.n	8022abe <scalbn+0x4e>
 8022a9e:	a328      	add	r3, pc, #160	@ (adr r3, 8022b40 <scalbn+0xd0>)
 8022aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022aa4:	e01e      	b.n	8022ae4 <scalbn+0x74>
 8022aa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8022aaa:	4291      	cmp	r1, r2
 8022aac:	d10b      	bne.n	8022ac6 <scalbn+0x56>
 8022aae:	4622      	mov	r2, r4
 8022ab0:	4620      	mov	r0, r4
 8022ab2:	4629      	mov	r1, r5
 8022ab4:	f7dd fbf2 	bl	800029c <__adddf3>
 8022ab8:	4604      	mov	r4, r0
 8022aba:	460d      	mov	r5, r1
 8022abc:	e022      	b.n	8022b04 <scalbn+0x94>
 8022abe:	460b      	mov	r3, r1
 8022ac0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8022ac4:	3936      	subs	r1, #54	@ 0x36
 8022ac6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8022aca:	4296      	cmp	r6, r2
 8022acc:	dd0d      	ble.n	8022aea <scalbn+0x7a>
 8022ace:	2d00      	cmp	r5, #0
 8022ad0:	a11d      	add	r1, pc, #116	@ (adr r1, 8022b48 <scalbn+0xd8>)
 8022ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ad6:	da02      	bge.n	8022ade <scalbn+0x6e>
 8022ad8:	a11d      	add	r1, pc, #116	@ (adr r1, 8022b50 <scalbn+0xe0>)
 8022ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ade:	a31a      	add	r3, pc, #104	@ (adr r3, 8022b48 <scalbn+0xd8>)
 8022ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ae4:	f7dd fd90 	bl	8000608 <__aeabi_dmul>
 8022ae8:	e7e6      	b.n	8022ab8 <scalbn+0x48>
 8022aea:	1872      	adds	r2, r6, r1
 8022aec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8022af0:	428a      	cmp	r2, r1
 8022af2:	dcec      	bgt.n	8022ace <scalbn+0x5e>
 8022af4:	2a00      	cmp	r2, #0
 8022af6:	dd08      	ble.n	8022b0a <scalbn+0x9a>
 8022af8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8022afc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8022b00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022b04:	ec45 4b10 	vmov	d0, r4, r5
 8022b08:	bd70      	pop	{r4, r5, r6, pc}
 8022b0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8022b0e:	da08      	bge.n	8022b22 <scalbn+0xb2>
 8022b10:	2d00      	cmp	r5, #0
 8022b12:	a10b      	add	r1, pc, #44	@ (adr r1, 8022b40 <scalbn+0xd0>)
 8022b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b18:	dac1      	bge.n	8022a9e <scalbn+0x2e>
 8022b1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8022b58 <scalbn+0xe8>)
 8022b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b20:	e7bd      	b.n	8022a9e <scalbn+0x2e>
 8022b22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8022b26:	3236      	adds	r2, #54	@ 0x36
 8022b28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8022b2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022b30:	4620      	mov	r0, r4
 8022b32:	4b0d      	ldr	r3, [pc, #52]	@ (8022b68 <scalbn+0xf8>)
 8022b34:	4629      	mov	r1, r5
 8022b36:	2200      	movs	r2, #0
 8022b38:	e7d4      	b.n	8022ae4 <scalbn+0x74>
 8022b3a:	bf00      	nop
 8022b3c:	f3af 8000 	nop.w
 8022b40:	c2f8f359 	.word	0xc2f8f359
 8022b44:	01a56e1f 	.word	0x01a56e1f
 8022b48:	8800759c 	.word	0x8800759c
 8022b4c:	7e37e43c 	.word	0x7e37e43c
 8022b50:	8800759c 	.word	0x8800759c
 8022b54:	fe37e43c 	.word	0xfe37e43c
 8022b58:	c2f8f359 	.word	0xc2f8f359
 8022b5c:	81a56e1f 	.word	0x81a56e1f
 8022b60:	43500000 	.word	0x43500000
 8022b64:	ffff3cb0 	.word	0xffff3cb0
 8022b68:	3c900000 	.word	0x3c900000

08022b6c <with_errno>:
 8022b6c:	b510      	push	{r4, lr}
 8022b6e:	ed2d 8b02 	vpush	{d8}
 8022b72:	eeb0 8a40 	vmov.f32	s16, s0
 8022b76:	eef0 8a60 	vmov.f32	s17, s1
 8022b7a:	4604      	mov	r4, r0
 8022b7c:	f7fa fd52 	bl	801d624 <__errno>
 8022b80:	eeb0 0a48 	vmov.f32	s0, s16
 8022b84:	eef0 0a68 	vmov.f32	s1, s17
 8022b88:	ecbd 8b02 	vpop	{d8}
 8022b8c:	6004      	str	r4, [r0, #0]
 8022b8e:	bd10      	pop	{r4, pc}

08022b90 <xflow>:
 8022b90:	4603      	mov	r3, r0
 8022b92:	b507      	push	{r0, r1, r2, lr}
 8022b94:	ec51 0b10 	vmov	r0, r1, d0
 8022b98:	b183      	cbz	r3, 8022bbc <xflow+0x2c>
 8022b9a:	4602      	mov	r2, r0
 8022b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8022ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ba8:	f7dd fd2e 	bl	8000608 <__aeabi_dmul>
 8022bac:	ec41 0b10 	vmov	d0, r0, r1
 8022bb0:	2022      	movs	r0, #34	@ 0x22
 8022bb2:	b003      	add	sp, #12
 8022bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8022bb8:	f7ff bfd8 	b.w	8022b6c <with_errno>
 8022bbc:	4602      	mov	r2, r0
 8022bbe:	460b      	mov	r3, r1
 8022bc0:	e7ee      	b.n	8022ba0 <xflow+0x10>
 8022bc2:	0000      	movs	r0, r0
 8022bc4:	0000      	movs	r0, r0
	...

08022bc8 <__math_uflow>:
 8022bc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022bd0 <__math_uflow+0x8>
 8022bcc:	f7ff bfe0 	b.w	8022b90 <xflow>
 8022bd0:	00000000 	.word	0x00000000
 8022bd4:	10000000 	.word	0x10000000

08022bd8 <__math_oflow>:
 8022bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022be0 <__math_oflow+0x8>
 8022bdc:	f7ff bfd8 	b.w	8022b90 <xflow>
 8022be0:	00000000 	.word	0x00000000
 8022be4:	70000000 	.word	0x70000000

08022be8 <__ieee754_sqrtf>:
 8022be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022bec:	4770      	bx	lr
	...

08022bf0 <__kernel_rem_pio2>:
 8022bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bf4:	ed2d 8b02 	vpush	{d8}
 8022bf8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8022bfc:	f112 0f14 	cmn.w	r2, #20
 8022c00:	9306      	str	r3, [sp, #24]
 8022c02:	9104      	str	r1, [sp, #16]
 8022c04:	4bbe      	ldr	r3, [pc, #760]	@ (8022f00 <__kernel_rem_pio2+0x310>)
 8022c06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8022c08:	9008      	str	r0, [sp, #32]
 8022c0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022c0e:	9300      	str	r3, [sp, #0]
 8022c10:	9b06      	ldr	r3, [sp, #24]
 8022c12:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8022c16:	bfa8      	it	ge
 8022c18:	1ed4      	subge	r4, r2, #3
 8022c1a:	9305      	str	r3, [sp, #20]
 8022c1c:	bfb2      	itee	lt
 8022c1e:	2400      	movlt	r4, #0
 8022c20:	2318      	movge	r3, #24
 8022c22:	fb94 f4f3 	sdivge	r4, r4, r3
 8022c26:	f06f 0317 	mvn.w	r3, #23
 8022c2a:	fb04 3303 	mla	r3, r4, r3, r3
 8022c2e:	eb03 0b02 	add.w	fp, r3, r2
 8022c32:	9b00      	ldr	r3, [sp, #0]
 8022c34:	9a05      	ldr	r2, [sp, #20]
 8022c36:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8022ef0 <__kernel_rem_pio2+0x300>
 8022c3a:	eb03 0802 	add.w	r8, r3, r2
 8022c3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8022c40:	1aa7      	subs	r7, r4, r2
 8022c42:	ae20      	add	r6, sp, #128	@ 0x80
 8022c44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022c48:	2500      	movs	r5, #0
 8022c4a:	4545      	cmp	r5, r8
 8022c4c:	dd13      	ble.n	8022c76 <__kernel_rem_pio2+0x86>
 8022c4e:	9b06      	ldr	r3, [sp, #24]
 8022c50:	aa20      	add	r2, sp, #128	@ 0x80
 8022c52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8022c56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8022c5a:	f04f 0800 	mov.w	r8, #0
 8022c5e:	9b00      	ldr	r3, [sp, #0]
 8022c60:	4598      	cmp	r8, r3
 8022c62:	dc31      	bgt.n	8022cc8 <__kernel_rem_pio2+0xd8>
 8022c64:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8022ef0 <__kernel_rem_pio2+0x300>
 8022c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022c6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022c70:	462f      	mov	r7, r5
 8022c72:	2600      	movs	r6, #0
 8022c74:	e01b      	b.n	8022cae <__kernel_rem_pio2+0xbe>
 8022c76:	42ef      	cmn	r7, r5
 8022c78:	d407      	bmi.n	8022c8a <__kernel_rem_pio2+0x9a>
 8022c7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8022c7e:	f7dd fc59 	bl	8000534 <__aeabi_i2d>
 8022c82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022c86:	3501      	adds	r5, #1
 8022c88:	e7df      	b.n	8022c4a <__kernel_rem_pio2+0x5a>
 8022c8a:	ec51 0b18 	vmov	r0, r1, d8
 8022c8e:	e7f8      	b.n	8022c82 <__kernel_rem_pio2+0x92>
 8022c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022c98:	f7dd fcb6 	bl	8000608 <__aeabi_dmul>
 8022c9c:	4602      	mov	r2, r0
 8022c9e:	460b      	mov	r3, r1
 8022ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ca4:	f7dd fafa 	bl	800029c <__adddf3>
 8022ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022cac:	3601      	adds	r6, #1
 8022cae:	9b05      	ldr	r3, [sp, #20]
 8022cb0:	429e      	cmp	r6, r3
 8022cb2:	f1a7 0708 	sub.w	r7, r7, #8
 8022cb6:	ddeb      	ble.n	8022c90 <__kernel_rem_pio2+0xa0>
 8022cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022cbc:	f108 0801 	add.w	r8, r8, #1
 8022cc0:	ecaa 7b02 	vstmia	sl!, {d7}
 8022cc4:	3508      	adds	r5, #8
 8022cc6:	e7ca      	b.n	8022c5e <__kernel_rem_pio2+0x6e>
 8022cc8:	9b00      	ldr	r3, [sp, #0]
 8022cca:	f8dd 8000 	ldr.w	r8, [sp]
 8022cce:	aa0c      	add	r2, sp, #48	@ 0x30
 8022cd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022cd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8022cd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8022cd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8022cde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8022ce2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022ce4:	ab98      	add	r3, sp, #608	@ 0x260
 8022ce6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8022cea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8022cee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022cf2:	ac0c      	add	r4, sp, #48	@ 0x30
 8022cf4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8022cf6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8022cfa:	46a1      	mov	r9, r4
 8022cfc:	46c2      	mov	sl, r8
 8022cfe:	f1ba 0f00 	cmp.w	sl, #0
 8022d02:	f1a5 0508 	sub.w	r5, r5, #8
 8022d06:	dc77      	bgt.n	8022df8 <__kernel_rem_pio2+0x208>
 8022d08:	4658      	mov	r0, fp
 8022d0a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022d0e:	f7ff feaf 	bl	8022a70 <scalbn>
 8022d12:	ec57 6b10 	vmov	r6, r7, d0
 8022d16:	2200      	movs	r2, #0
 8022d18:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8022d1c:	4630      	mov	r0, r6
 8022d1e:	4639      	mov	r1, r7
 8022d20:	f7dd fc72 	bl	8000608 <__aeabi_dmul>
 8022d24:	ec41 0b10 	vmov	d0, r0, r1
 8022d28:	f7fc ff92 	bl	801fc50 <floor>
 8022d2c:	4b75      	ldr	r3, [pc, #468]	@ (8022f04 <__kernel_rem_pio2+0x314>)
 8022d2e:	ec51 0b10 	vmov	r0, r1, d0
 8022d32:	2200      	movs	r2, #0
 8022d34:	f7dd fc68 	bl	8000608 <__aeabi_dmul>
 8022d38:	4602      	mov	r2, r0
 8022d3a:	460b      	mov	r3, r1
 8022d3c:	4630      	mov	r0, r6
 8022d3e:	4639      	mov	r1, r7
 8022d40:	f7dd faaa 	bl	8000298 <__aeabi_dsub>
 8022d44:	460f      	mov	r7, r1
 8022d46:	4606      	mov	r6, r0
 8022d48:	f7dd ff0e 	bl	8000b68 <__aeabi_d2iz>
 8022d4c:	9002      	str	r0, [sp, #8]
 8022d4e:	f7dd fbf1 	bl	8000534 <__aeabi_i2d>
 8022d52:	4602      	mov	r2, r0
 8022d54:	460b      	mov	r3, r1
 8022d56:	4630      	mov	r0, r6
 8022d58:	4639      	mov	r1, r7
 8022d5a:	f7dd fa9d 	bl	8000298 <__aeabi_dsub>
 8022d5e:	f1bb 0f00 	cmp.w	fp, #0
 8022d62:	4606      	mov	r6, r0
 8022d64:	460f      	mov	r7, r1
 8022d66:	dd6c      	ble.n	8022e42 <__kernel_rem_pio2+0x252>
 8022d68:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8022d6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8022d6e:	9d02      	ldr	r5, [sp, #8]
 8022d70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022d74:	f1cb 0018 	rsb	r0, fp, #24
 8022d78:	fa43 f200 	asr.w	r2, r3, r0
 8022d7c:	4415      	add	r5, r2
 8022d7e:	4082      	lsls	r2, r0
 8022d80:	1a9b      	subs	r3, r3, r2
 8022d82:	aa0c      	add	r2, sp, #48	@ 0x30
 8022d84:	9502      	str	r5, [sp, #8]
 8022d86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8022d8a:	f1cb 0217 	rsb	r2, fp, #23
 8022d8e:	fa43 f902 	asr.w	r9, r3, r2
 8022d92:	f1b9 0f00 	cmp.w	r9, #0
 8022d96:	dd64      	ble.n	8022e62 <__kernel_rem_pio2+0x272>
 8022d98:	9b02      	ldr	r3, [sp, #8]
 8022d9a:	2200      	movs	r2, #0
 8022d9c:	3301      	adds	r3, #1
 8022d9e:	9302      	str	r3, [sp, #8]
 8022da0:	4615      	mov	r5, r2
 8022da2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8022da6:	4590      	cmp	r8, r2
 8022da8:	f300 80b8 	bgt.w	8022f1c <__kernel_rem_pio2+0x32c>
 8022dac:	f1bb 0f00 	cmp.w	fp, #0
 8022db0:	dd07      	ble.n	8022dc2 <__kernel_rem_pio2+0x1d2>
 8022db2:	f1bb 0f01 	cmp.w	fp, #1
 8022db6:	f000 80bf 	beq.w	8022f38 <__kernel_rem_pio2+0x348>
 8022dba:	f1bb 0f02 	cmp.w	fp, #2
 8022dbe:	f000 80c6 	beq.w	8022f4e <__kernel_rem_pio2+0x35e>
 8022dc2:	f1b9 0f02 	cmp.w	r9, #2
 8022dc6:	d14c      	bne.n	8022e62 <__kernel_rem_pio2+0x272>
 8022dc8:	4632      	mov	r2, r6
 8022dca:	463b      	mov	r3, r7
 8022dcc:	494e      	ldr	r1, [pc, #312]	@ (8022f08 <__kernel_rem_pio2+0x318>)
 8022dce:	2000      	movs	r0, #0
 8022dd0:	f7dd fa62 	bl	8000298 <__aeabi_dsub>
 8022dd4:	4606      	mov	r6, r0
 8022dd6:	460f      	mov	r7, r1
 8022dd8:	2d00      	cmp	r5, #0
 8022dda:	d042      	beq.n	8022e62 <__kernel_rem_pio2+0x272>
 8022ddc:	4658      	mov	r0, fp
 8022dde:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8022ef8 <__kernel_rem_pio2+0x308>
 8022de2:	f7ff fe45 	bl	8022a70 <scalbn>
 8022de6:	4630      	mov	r0, r6
 8022de8:	4639      	mov	r1, r7
 8022dea:	ec53 2b10 	vmov	r2, r3, d0
 8022dee:	f7dd fa53 	bl	8000298 <__aeabi_dsub>
 8022df2:	4606      	mov	r6, r0
 8022df4:	460f      	mov	r7, r1
 8022df6:	e034      	b.n	8022e62 <__kernel_rem_pio2+0x272>
 8022df8:	4b44      	ldr	r3, [pc, #272]	@ (8022f0c <__kernel_rem_pio2+0x31c>)
 8022dfa:	2200      	movs	r2, #0
 8022dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022e00:	f7dd fc02 	bl	8000608 <__aeabi_dmul>
 8022e04:	f7dd feb0 	bl	8000b68 <__aeabi_d2iz>
 8022e08:	f7dd fb94 	bl	8000534 <__aeabi_i2d>
 8022e0c:	4b40      	ldr	r3, [pc, #256]	@ (8022f10 <__kernel_rem_pio2+0x320>)
 8022e0e:	2200      	movs	r2, #0
 8022e10:	4606      	mov	r6, r0
 8022e12:	460f      	mov	r7, r1
 8022e14:	f7dd fbf8 	bl	8000608 <__aeabi_dmul>
 8022e18:	4602      	mov	r2, r0
 8022e1a:	460b      	mov	r3, r1
 8022e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022e20:	f7dd fa3a 	bl	8000298 <__aeabi_dsub>
 8022e24:	f7dd fea0 	bl	8000b68 <__aeabi_d2iz>
 8022e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022e2c:	f849 0b04 	str.w	r0, [r9], #4
 8022e30:	4639      	mov	r1, r7
 8022e32:	4630      	mov	r0, r6
 8022e34:	f7dd fa32 	bl	800029c <__adddf3>
 8022e38:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8022e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e40:	e75d      	b.n	8022cfe <__kernel_rem_pio2+0x10e>
 8022e42:	d107      	bne.n	8022e54 <__kernel_rem_pio2+0x264>
 8022e44:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8022e48:	aa0c      	add	r2, sp, #48	@ 0x30
 8022e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022e4e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8022e52:	e79e      	b.n	8022d92 <__kernel_rem_pio2+0x1a2>
 8022e54:	4b2f      	ldr	r3, [pc, #188]	@ (8022f14 <__kernel_rem_pio2+0x324>)
 8022e56:	2200      	movs	r2, #0
 8022e58:	f7dd fe5c 	bl	8000b14 <__aeabi_dcmpge>
 8022e5c:	2800      	cmp	r0, #0
 8022e5e:	d143      	bne.n	8022ee8 <__kernel_rem_pio2+0x2f8>
 8022e60:	4681      	mov	r9, r0
 8022e62:	2200      	movs	r2, #0
 8022e64:	2300      	movs	r3, #0
 8022e66:	4630      	mov	r0, r6
 8022e68:	4639      	mov	r1, r7
 8022e6a:	f7dd fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 8022e6e:	2800      	cmp	r0, #0
 8022e70:	f000 80bf 	beq.w	8022ff2 <__kernel_rem_pio2+0x402>
 8022e74:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8022e78:	2200      	movs	r2, #0
 8022e7a:	9900      	ldr	r1, [sp, #0]
 8022e7c:	428b      	cmp	r3, r1
 8022e7e:	da6e      	bge.n	8022f5e <__kernel_rem_pio2+0x36e>
 8022e80:	2a00      	cmp	r2, #0
 8022e82:	f000 8089 	beq.w	8022f98 <__kernel_rem_pio2+0x3a8>
 8022e86:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8022e8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8022e8c:	f1ab 0b18 	sub.w	fp, fp, #24
 8022e90:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d0f6      	beq.n	8022e86 <__kernel_rem_pio2+0x296>
 8022e98:	4658      	mov	r0, fp
 8022e9a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8022ef8 <__kernel_rem_pio2+0x308>
 8022e9e:	f7ff fde7 	bl	8022a70 <scalbn>
 8022ea2:	f108 0301 	add.w	r3, r8, #1
 8022ea6:	00da      	lsls	r2, r3, #3
 8022ea8:	9205      	str	r2, [sp, #20]
 8022eaa:	ec55 4b10 	vmov	r4, r5, d0
 8022eae:	aa70      	add	r2, sp, #448	@ 0x1c0
 8022eb0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8022f0c <__kernel_rem_pio2+0x31c>
 8022eb4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8022eb8:	4646      	mov	r6, r8
 8022eba:	f04f 0a00 	mov.w	sl, #0
 8022ebe:	2e00      	cmp	r6, #0
 8022ec0:	f280 80cf 	bge.w	8023062 <__kernel_rem_pio2+0x472>
 8022ec4:	4644      	mov	r4, r8
 8022ec6:	2c00      	cmp	r4, #0
 8022ec8:	f2c0 80fd 	blt.w	80230c6 <__kernel_rem_pio2+0x4d6>
 8022ecc:	4b12      	ldr	r3, [pc, #72]	@ (8022f18 <__kernel_rem_pio2+0x328>)
 8022ece:	461f      	mov	r7, r3
 8022ed0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8022ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022ed6:	9306      	str	r3, [sp, #24]
 8022ed8:	f04f 0a00 	mov.w	sl, #0
 8022edc:	f04f 0b00 	mov.w	fp, #0
 8022ee0:	2600      	movs	r6, #0
 8022ee2:	eba8 0504 	sub.w	r5, r8, r4
 8022ee6:	e0e2      	b.n	80230ae <__kernel_rem_pio2+0x4be>
 8022ee8:	f04f 0902 	mov.w	r9, #2
 8022eec:	e754      	b.n	8022d98 <__kernel_rem_pio2+0x1a8>
 8022eee:	bf00      	nop
	...
 8022efc:	3ff00000 	.word	0x3ff00000
 8022f00:	08024328 	.word	0x08024328
 8022f04:	40200000 	.word	0x40200000
 8022f08:	3ff00000 	.word	0x3ff00000
 8022f0c:	3e700000 	.word	0x3e700000
 8022f10:	41700000 	.word	0x41700000
 8022f14:	3fe00000 	.word	0x3fe00000
 8022f18:	080242e8 	.word	0x080242e8
 8022f1c:	f854 3b04 	ldr.w	r3, [r4], #4
 8022f20:	b945      	cbnz	r5, 8022f34 <__kernel_rem_pio2+0x344>
 8022f22:	b123      	cbz	r3, 8022f2e <__kernel_rem_pio2+0x33e>
 8022f24:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8022f28:	f844 3c04 	str.w	r3, [r4, #-4]
 8022f2c:	2301      	movs	r3, #1
 8022f2e:	3201      	adds	r2, #1
 8022f30:	461d      	mov	r5, r3
 8022f32:	e738      	b.n	8022da6 <__kernel_rem_pio2+0x1b6>
 8022f34:	1acb      	subs	r3, r1, r3
 8022f36:	e7f7      	b.n	8022f28 <__kernel_rem_pio2+0x338>
 8022f38:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8022f3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8022f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022f42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022f46:	a90c      	add	r1, sp, #48	@ 0x30
 8022f48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8022f4c:	e739      	b.n	8022dc2 <__kernel_rem_pio2+0x1d2>
 8022f4e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8022f52:	ab0c      	add	r3, sp, #48	@ 0x30
 8022f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022f58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022f5c:	e7f3      	b.n	8022f46 <__kernel_rem_pio2+0x356>
 8022f5e:	a90c      	add	r1, sp, #48	@ 0x30
 8022f60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022f64:	3b01      	subs	r3, #1
 8022f66:	430a      	orrs	r2, r1
 8022f68:	e787      	b.n	8022e7a <__kernel_rem_pio2+0x28a>
 8022f6a:	3401      	adds	r4, #1
 8022f6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022f70:	2a00      	cmp	r2, #0
 8022f72:	d0fa      	beq.n	8022f6a <__kernel_rem_pio2+0x37a>
 8022f74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8022f7a:	eb0d 0503 	add.w	r5, sp, r3
 8022f7e:	9b06      	ldr	r3, [sp, #24]
 8022f80:	aa20      	add	r2, sp, #128	@ 0x80
 8022f82:	4443      	add	r3, r8
 8022f84:	f108 0701 	add.w	r7, r8, #1
 8022f88:	3d98      	subs	r5, #152	@ 0x98
 8022f8a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8022f8e:	4444      	add	r4, r8
 8022f90:	42bc      	cmp	r4, r7
 8022f92:	da04      	bge.n	8022f9e <__kernel_rem_pio2+0x3ae>
 8022f94:	46a0      	mov	r8, r4
 8022f96:	e6a2      	b.n	8022cde <__kernel_rem_pio2+0xee>
 8022f98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f9a:	2401      	movs	r4, #1
 8022f9c:	e7e6      	b.n	8022f6c <__kernel_rem_pio2+0x37c>
 8022f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022fa0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8022fa4:	f7dd fac6 	bl	8000534 <__aeabi_i2d>
 8022fa8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8023270 <__kernel_rem_pio2+0x680>
 8022fac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022fb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022fb8:	46b2      	mov	sl, r6
 8022fba:	f04f 0800 	mov.w	r8, #0
 8022fbe:	9b05      	ldr	r3, [sp, #20]
 8022fc0:	4598      	cmp	r8, r3
 8022fc2:	dd05      	ble.n	8022fd0 <__kernel_rem_pio2+0x3e0>
 8022fc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022fc8:	3701      	adds	r7, #1
 8022fca:	eca5 7b02 	vstmia	r5!, {d7}
 8022fce:	e7df      	b.n	8022f90 <__kernel_rem_pio2+0x3a0>
 8022fd0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8022fd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022fd8:	f7dd fb16 	bl	8000608 <__aeabi_dmul>
 8022fdc:	4602      	mov	r2, r0
 8022fde:	460b      	mov	r3, r1
 8022fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022fe4:	f7dd f95a 	bl	800029c <__adddf3>
 8022fe8:	f108 0801 	add.w	r8, r8, #1
 8022fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022ff0:	e7e5      	b.n	8022fbe <__kernel_rem_pio2+0x3ce>
 8022ff2:	f1cb 0000 	rsb	r0, fp, #0
 8022ff6:	ec47 6b10 	vmov	d0, r6, r7
 8022ffa:	f7ff fd39 	bl	8022a70 <scalbn>
 8022ffe:	ec55 4b10 	vmov	r4, r5, d0
 8023002:	4b9d      	ldr	r3, [pc, #628]	@ (8023278 <__kernel_rem_pio2+0x688>)
 8023004:	2200      	movs	r2, #0
 8023006:	4620      	mov	r0, r4
 8023008:	4629      	mov	r1, r5
 802300a:	f7dd fd83 	bl	8000b14 <__aeabi_dcmpge>
 802300e:	b300      	cbz	r0, 8023052 <__kernel_rem_pio2+0x462>
 8023010:	4b9a      	ldr	r3, [pc, #616]	@ (802327c <__kernel_rem_pio2+0x68c>)
 8023012:	2200      	movs	r2, #0
 8023014:	4620      	mov	r0, r4
 8023016:	4629      	mov	r1, r5
 8023018:	f7dd faf6 	bl	8000608 <__aeabi_dmul>
 802301c:	f7dd fda4 	bl	8000b68 <__aeabi_d2iz>
 8023020:	4606      	mov	r6, r0
 8023022:	f7dd fa87 	bl	8000534 <__aeabi_i2d>
 8023026:	4b94      	ldr	r3, [pc, #592]	@ (8023278 <__kernel_rem_pio2+0x688>)
 8023028:	2200      	movs	r2, #0
 802302a:	f7dd faed 	bl	8000608 <__aeabi_dmul>
 802302e:	460b      	mov	r3, r1
 8023030:	4602      	mov	r2, r0
 8023032:	4629      	mov	r1, r5
 8023034:	4620      	mov	r0, r4
 8023036:	f7dd f92f 	bl	8000298 <__aeabi_dsub>
 802303a:	f7dd fd95 	bl	8000b68 <__aeabi_d2iz>
 802303e:	ab0c      	add	r3, sp, #48	@ 0x30
 8023040:	f10b 0b18 	add.w	fp, fp, #24
 8023044:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8023048:	f108 0801 	add.w	r8, r8, #1
 802304c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8023050:	e722      	b.n	8022e98 <__kernel_rem_pio2+0x2a8>
 8023052:	4620      	mov	r0, r4
 8023054:	4629      	mov	r1, r5
 8023056:	f7dd fd87 	bl	8000b68 <__aeabi_d2iz>
 802305a:	ab0c      	add	r3, sp, #48	@ 0x30
 802305c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8023060:	e71a      	b.n	8022e98 <__kernel_rem_pio2+0x2a8>
 8023062:	ab0c      	add	r3, sp, #48	@ 0x30
 8023064:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8023068:	f7dd fa64 	bl	8000534 <__aeabi_i2d>
 802306c:	4622      	mov	r2, r4
 802306e:	462b      	mov	r3, r5
 8023070:	f7dd faca 	bl	8000608 <__aeabi_dmul>
 8023074:	4652      	mov	r2, sl
 8023076:	e967 0102 	strd	r0, r1, [r7, #-8]!
 802307a:	465b      	mov	r3, fp
 802307c:	4620      	mov	r0, r4
 802307e:	4629      	mov	r1, r5
 8023080:	f7dd fac2 	bl	8000608 <__aeabi_dmul>
 8023084:	3e01      	subs	r6, #1
 8023086:	4604      	mov	r4, r0
 8023088:	460d      	mov	r5, r1
 802308a:	e718      	b.n	8022ebe <__kernel_rem_pio2+0x2ce>
 802308c:	9906      	ldr	r1, [sp, #24]
 802308e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8023092:	9106      	str	r1, [sp, #24]
 8023094:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8023098:	f7dd fab6 	bl	8000608 <__aeabi_dmul>
 802309c:	4602      	mov	r2, r0
 802309e:	460b      	mov	r3, r1
 80230a0:	4650      	mov	r0, sl
 80230a2:	4659      	mov	r1, fp
 80230a4:	f7dd f8fa 	bl	800029c <__adddf3>
 80230a8:	3601      	adds	r6, #1
 80230aa:	4682      	mov	sl, r0
 80230ac:	468b      	mov	fp, r1
 80230ae:	9b00      	ldr	r3, [sp, #0]
 80230b0:	429e      	cmp	r6, r3
 80230b2:	dc01      	bgt.n	80230b8 <__kernel_rem_pio2+0x4c8>
 80230b4:	42b5      	cmp	r5, r6
 80230b6:	dae9      	bge.n	802308c <__kernel_rem_pio2+0x49c>
 80230b8:	ab48      	add	r3, sp, #288	@ 0x120
 80230ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80230be:	e9c5 ab00 	strd	sl, fp, [r5]
 80230c2:	3c01      	subs	r4, #1
 80230c4:	e6ff      	b.n	8022ec6 <__kernel_rem_pio2+0x2d6>
 80230c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80230c8:	2b02      	cmp	r3, #2
 80230ca:	dc0b      	bgt.n	80230e4 <__kernel_rem_pio2+0x4f4>
 80230cc:	2b00      	cmp	r3, #0
 80230ce:	dc39      	bgt.n	8023144 <__kernel_rem_pio2+0x554>
 80230d0:	d05d      	beq.n	802318e <__kernel_rem_pio2+0x59e>
 80230d2:	9b02      	ldr	r3, [sp, #8]
 80230d4:	f003 0007 	and.w	r0, r3, #7
 80230d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80230dc:	ecbd 8b02 	vpop	{d8}
 80230e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80230e6:	2b03      	cmp	r3, #3
 80230e8:	d1f3      	bne.n	80230d2 <__kernel_rem_pio2+0x4e2>
 80230ea:	9b05      	ldr	r3, [sp, #20]
 80230ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80230f0:	eb0d 0403 	add.w	r4, sp, r3
 80230f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80230f8:	4625      	mov	r5, r4
 80230fa:	46c2      	mov	sl, r8
 80230fc:	f1ba 0f00 	cmp.w	sl, #0
 8023100:	f1a5 0508 	sub.w	r5, r5, #8
 8023104:	dc6b      	bgt.n	80231de <__kernel_rem_pio2+0x5ee>
 8023106:	4645      	mov	r5, r8
 8023108:	2d01      	cmp	r5, #1
 802310a:	f1a4 0408 	sub.w	r4, r4, #8
 802310e:	f300 8087 	bgt.w	8023220 <__kernel_rem_pio2+0x630>
 8023112:	9c05      	ldr	r4, [sp, #20]
 8023114:	ab48      	add	r3, sp, #288	@ 0x120
 8023116:	441c      	add	r4, r3
 8023118:	2000      	movs	r0, #0
 802311a:	2100      	movs	r1, #0
 802311c:	f1b8 0f01 	cmp.w	r8, #1
 8023120:	f300 809c 	bgt.w	802325c <__kernel_rem_pio2+0x66c>
 8023124:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8023128:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 802312c:	f1b9 0f00 	cmp.w	r9, #0
 8023130:	f040 80a6 	bne.w	8023280 <__kernel_rem_pio2+0x690>
 8023134:	9b04      	ldr	r3, [sp, #16]
 8023136:	e9c3 7800 	strd	r7, r8, [r3]
 802313a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 802313e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023142:	e7c6      	b.n	80230d2 <__kernel_rem_pio2+0x4e2>
 8023144:	9d05      	ldr	r5, [sp, #20]
 8023146:	ab48      	add	r3, sp, #288	@ 0x120
 8023148:	441d      	add	r5, r3
 802314a:	4644      	mov	r4, r8
 802314c:	2000      	movs	r0, #0
 802314e:	2100      	movs	r1, #0
 8023150:	2c00      	cmp	r4, #0
 8023152:	da35      	bge.n	80231c0 <__kernel_rem_pio2+0x5d0>
 8023154:	f1b9 0f00 	cmp.w	r9, #0
 8023158:	d038      	beq.n	80231cc <__kernel_rem_pio2+0x5dc>
 802315a:	4602      	mov	r2, r0
 802315c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023160:	9c04      	ldr	r4, [sp, #16]
 8023162:	e9c4 2300 	strd	r2, r3, [r4]
 8023166:	4602      	mov	r2, r0
 8023168:	460b      	mov	r3, r1
 802316a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 802316e:	f7dd f893 	bl	8000298 <__aeabi_dsub>
 8023172:	ad4a      	add	r5, sp, #296	@ 0x128
 8023174:	2401      	movs	r4, #1
 8023176:	45a0      	cmp	r8, r4
 8023178:	da2b      	bge.n	80231d2 <__kernel_rem_pio2+0x5e2>
 802317a:	f1b9 0f00 	cmp.w	r9, #0
 802317e:	d002      	beq.n	8023186 <__kernel_rem_pio2+0x596>
 8023180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023184:	4619      	mov	r1, r3
 8023186:	9b04      	ldr	r3, [sp, #16]
 8023188:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802318c:	e7a1      	b.n	80230d2 <__kernel_rem_pio2+0x4e2>
 802318e:	9c05      	ldr	r4, [sp, #20]
 8023190:	ab48      	add	r3, sp, #288	@ 0x120
 8023192:	441c      	add	r4, r3
 8023194:	2000      	movs	r0, #0
 8023196:	2100      	movs	r1, #0
 8023198:	f1b8 0f00 	cmp.w	r8, #0
 802319c:	da09      	bge.n	80231b2 <__kernel_rem_pio2+0x5c2>
 802319e:	f1b9 0f00 	cmp.w	r9, #0
 80231a2:	d002      	beq.n	80231aa <__kernel_rem_pio2+0x5ba>
 80231a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80231a8:	4619      	mov	r1, r3
 80231aa:	9b04      	ldr	r3, [sp, #16]
 80231ac:	e9c3 0100 	strd	r0, r1, [r3]
 80231b0:	e78f      	b.n	80230d2 <__kernel_rem_pio2+0x4e2>
 80231b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80231b6:	f7dd f871 	bl	800029c <__adddf3>
 80231ba:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80231be:	e7eb      	b.n	8023198 <__kernel_rem_pio2+0x5a8>
 80231c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80231c4:	f7dd f86a 	bl	800029c <__adddf3>
 80231c8:	3c01      	subs	r4, #1
 80231ca:	e7c1      	b.n	8023150 <__kernel_rem_pio2+0x560>
 80231cc:	4602      	mov	r2, r0
 80231ce:	460b      	mov	r3, r1
 80231d0:	e7c6      	b.n	8023160 <__kernel_rem_pio2+0x570>
 80231d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80231d6:	f7dd f861 	bl	800029c <__adddf3>
 80231da:	3401      	adds	r4, #1
 80231dc:	e7cb      	b.n	8023176 <__kernel_rem_pio2+0x586>
 80231de:	ed95 7b00 	vldr	d7, [r5]
 80231e2:	ed8d 7b00 	vstr	d7, [sp]
 80231e6:	ed95 7b02 	vldr	d7, [r5, #8]
 80231ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231ee:	ec53 2b17 	vmov	r2, r3, d7
 80231f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80231f6:	f7dd f851 	bl	800029c <__adddf3>
 80231fa:	4602      	mov	r2, r0
 80231fc:	460b      	mov	r3, r1
 80231fe:	4606      	mov	r6, r0
 8023200:	460f      	mov	r7, r1
 8023202:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023206:	f7dd f847 	bl	8000298 <__aeabi_dsub>
 802320a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802320e:	f7dd f845 	bl	800029c <__adddf3>
 8023212:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8023216:	e9c5 0102 	strd	r0, r1, [r5, #8]
 802321a:	e9c5 6700 	strd	r6, r7, [r5]
 802321e:	e76d      	b.n	80230fc <__kernel_rem_pio2+0x50c>
 8023220:	ed94 7b00 	vldr	d7, [r4]
 8023224:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8023228:	ec51 0b17 	vmov	r0, r1, d7
 802322c:	4652      	mov	r2, sl
 802322e:	465b      	mov	r3, fp
 8023230:	ed8d 7b00 	vstr	d7, [sp]
 8023234:	f7dd f832 	bl	800029c <__adddf3>
 8023238:	4602      	mov	r2, r0
 802323a:	460b      	mov	r3, r1
 802323c:	4606      	mov	r6, r0
 802323e:	460f      	mov	r7, r1
 8023240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023244:	f7dd f828 	bl	8000298 <__aeabi_dsub>
 8023248:	4652      	mov	r2, sl
 802324a:	465b      	mov	r3, fp
 802324c:	f7dd f826 	bl	800029c <__adddf3>
 8023250:	3d01      	subs	r5, #1
 8023252:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023256:	e9c4 6700 	strd	r6, r7, [r4]
 802325a:	e755      	b.n	8023108 <__kernel_rem_pio2+0x518>
 802325c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023260:	f7dd f81c 	bl	800029c <__adddf3>
 8023264:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8023268:	e758      	b.n	802311c <__kernel_rem_pio2+0x52c>
 802326a:	bf00      	nop
 802326c:	f3af 8000 	nop.w
	...
 8023278:	41700000 	.word	0x41700000
 802327c:	3e700000 	.word	0x3e700000
 8023280:	9b04      	ldr	r3, [sp, #16]
 8023282:	9a04      	ldr	r2, [sp, #16]
 8023284:	601f      	str	r7, [r3, #0]
 8023286:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 802328a:	605c      	str	r4, [r3, #4]
 802328c:	609d      	str	r5, [r3, #8]
 802328e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8023292:	60d3      	str	r3, [r2, #12]
 8023294:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023298:	6110      	str	r0, [r2, #16]
 802329a:	6153      	str	r3, [r2, #20]
 802329c:	e719      	b.n	80230d2 <__kernel_rem_pio2+0x4e2>
 802329e:	bf00      	nop

080232a0 <__kernel_rem_pio2f>:
 80232a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232a4:	ed2d 8b04 	vpush	{d8-d9}
 80232a8:	b0d9      	sub	sp, #356	@ 0x164
 80232aa:	4690      	mov	r8, r2
 80232ac:	9001      	str	r0, [sp, #4]
 80232ae:	4ab9      	ldr	r2, [pc, #740]	@ (8023594 <__kernel_rem_pio2f+0x2f4>)
 80232b0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80232b2:	f118 0f04 	cmn.w	r8, #4
 80232b6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80232ba:	460f      	mov	r7, r1
 80232bc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80232c0:	db27      	blt.n	8023312 <__kernel_rem_pio2f+0x72>
 80232c2:	f1b8 0203 	subs.w	r2, r8, #3
 80232c6:	bf48      	it	mi
 80232c8:	f108 0204 	addmi.w	r2, r8, #4
 80232cc:	10d2      	asrs	r2, r2, #3
 80232ce:	1c55      	adds	r5, r2, #1
 80232d0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80232d2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 80232d6:	00e8      	lsls	r0, r5, #3
 80232d8:	eba2 060b 	sub.w	r6, r2, fp
 80232dc:	9002      	str	r0, [sp, #8]
 80232de:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80232e2:	eb0a 0c0b 	add.w	ip, sl, fp
 80232e6:	ac1c      	add	r4, sp, #112	@ 0x70
 80232e8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80232ec:	2000      	movs	r0, #0
 80232ee:	4560      	cmp	r0, ip
 80232f0:	dd11      	ble.n	8023316 <__kernel_rem_pio2f+0x76>
 80232f2:	a91c      	add	r1, sp, #112	@ 0x70
 80232f4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80232f8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80232fc:	f04f 0c00 	mov.w	ip, #0
 8023300:	45d4      	cmp	ip, sl
 8023302:	dc27      	bgt.n	8023354 <__kernel_rem_pio2f+0xb4>
 8023304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8023308:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 802330c:	4606      	mov	r6, r0
 802330e:	2400      	movs	r4, #0
 8023310:	e016      	b.n	8023340 <__kernel_rem_pio2f+0xa0>
 8023312:	2200      	movs	r2, #0
 8023314:	e7db      	b.n	80232ce <__kernel_rem_pio2f+0x2e>
 8023316:	42c6      	cmn	r6, r0
 8023318:	bf5d      	ittte	pl
 802331a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802331e:	ee07 1a90 	vmovpl	s15, r1
 8023322:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8023326:	eef0 7a47 	vmovmi.f32	s15, s14
 802332a:	ece4 7a01 	vstmia	r4!, {s15}
 802332e:	3001      	adds	r0, #1
 8023330:	e7dd      	b.n	80232ee <__kernel_rem_pio2f+0x4e>
 8023332:	ecfe 6a01 	vldmia	lr!, {s13}
 8023336:	ed96 7a00 	vldr	s14, [r6]
 802333a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802333e:	3401      	adds	r4, #1
 8023340:	455c      	cmp	r4, fp
 8023342:	f1a6 0604 	sub.w	r6, r6, #4
 8023346:	ddf4      	ble.n	8023332 <__kernel_rem_pio2f+0x92>
 8023348:	ece9 7a01 	vstmia	r9!, {s15}
 802334c:	f10c 0c01 	add.w	ip, ip, #1
 8023350:	3004      	adds	r0, #4
 8023352:	e7d5      	b.n	8023300 <__kernel_rem_pio2f+0x60>
 8023354:	a908      	add	r1, sp, #32
 8023356:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802335a:	9104      	str	r1, [sp, #16]
 802335c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802335e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80235a0 <__kernel_rem_pio2f+0x300>
 8023362:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 802359c <__kernel_rem_pio2f+0x2fc>
 8023366:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802336a:	9203      	str	r2, [sp, #12]
 802336c:	4654      	mov	r4, sl
 802336e:	00a2      	lsls	r2, r4, #2
 8023370:	9205      	str	r2, [sp, #20]
 8023372:	aa58      	add	r2, sp, #352	@ 0x160
 8023374:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8023378:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802337c:	a944      	add	r1, sp, #272	@ 0x110
 802337e:	aa08      	add	r2, sp, #32
 8023380:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8023384:	4694      	mov	ip, r2
 8023386:	4626      	mov	r6, r4
 8023388:	2e00      	cmp	r6, #0
 802338a:	f1a0 0004 	sub.w	r0, r0, #4
 802338e:	dc4c      	bgt.n	802342a <__kernel_rem_pio2f+0x18a>
 8023390:	4628      	mov	r0, r5
 8023392:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023396:	f000 f9f5 	bl	8023784 <scalbnf>
 802339a:	eeb0 8a40 	vmov.f32	s16, s0
 802339e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80233a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80233a6:	f000 fa53 	bl	8023850 <floorf>
 80233aa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80233ae:	eea0 8a67 	vfms.f32	s16, s0, s15
 80233b2:	2d00      	cmp	r5, #0
 80233b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80233b8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80233bc:	ee17 9a90 	vmov	r9, s15
 80233c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80233c4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80233c8:	dd41      	ble.n	802344e <__kernel_rem_pio2f+0x1ae>
 80233ca:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80233ce:	a908      	add	r1, sp, #32
 80233d0:	f1c5 0e08 	rsb	lr, r5, #8
 80233d4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80233d8:	fa46 f00e 	asr.w	r0, r6, lr
 80233dc:	4481      	add	r9, r0
 80233de:	fa00 f00e 	lsl.w	r0, r0, lr
 80233e2:	1a36      	subs	r6, r6, r0
 80233e4:	f1c5 0007 	rsb	r0, r5, #7
 80233e8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80233ec:	4106      	asrs	r6, r0
 80233ee:	2e00      	cmp	r6, #0
 80233f0:	dd3c      	ble.n	802346c <__kernel_rem_pio2f+0x1cc>
 80233f2:	f04f 0e00 	mov.w	lr, #0
 80233f6:	f109 0901 	add.w	r9, r9, #1
 80233fa:	4670      	mov	r0, lr
 80233fc:	4574      	cmp	r4, lr
 80233fe:	dc68      	bgt.n	80234d2 <__kernel_rem_pio2f+0x232>
 8023400:	2d00      	cmp	r5, #0
 8023402:	dd03      	ble.n	802340c <__kernel_rem_pio2f+0x16c>
 8023404:	2d01      	cmp	r5, #1
 8023406:	d074      	beq.n	80234f2 <__kernel_rem_pio2f+0x252>
 8023408:	2d02      	cmp	r5, #2
 802340a:	d07d      	beq.n	8023508 <__kernel_rem_pio2f+0x268>
 802340c:	2e02      	cmp	r6, #2
 802340e:	d12d      	bne.n	802346c <__kernel_rem_pio2f+0x1cc>
 8023410:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023414:	ee30 8a48 	vsub.f32	s16, s0, s16
 8023418:	b340      	cbz	r0, 802346c <__kernel_rem_pio2f+0x1cc>
 802341a:	4628      	mov	r0, r5
 802341c:	9306      	str	r3, [sp, #24]
 802341e:	f000 f9b1 	bl	8023784 <scalbnf>
 8023422:	9b06      	ldr	r3, [sp, #24]
 8023424:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023428:	e020      	b.n	802346c <__kernel_rem_pio2f+0x1cc>
 802342a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802342e:	3e01      	subs	r6, #1
 8023430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023438:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802343c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023440:	ecac 0a01 	vstmia	ip!, {s0}
 8023444:	ed90 0a00 	vldr	s0, [r0]
 8023448:	ee37 0a80 	vadd.f32	s0, s15, s0
 802344c:	e79c      	b.n	8023388 <__kernel_rem_pio2f+0xe8>
 802344e:	d105      	bne.n	802345c <__kernel_rem_pio2f+0x1bc>
 8023450:	1e60      	subs	r0, r4, #1
 8023452:	a908      	add	r1, sp, #32
 8023454:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8023458:	11f6      	asrs	r6, r6, #7
 802345a:	e7c8      	b.n	80233ee <__kernel_rem_pio2f+0x14e>
 802345c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8023460:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8023464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023468:	da31      	bge.n	80234ce <__kernel_rem_pio2f+0x22e>
 802346a:	2600      	movs	r6, #0
 802346c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023474:	f040 8098 	bne.w	80235a8 <__kernel_rem_pio2f+0x308>
 8023478:	1e60      	subs	r0, r4, #1
 802347a:	2200      	movs	r2, #0
 802347c:	4550      	cmp	r0, sl
 802347e:	da4b      	bge.n	8023518 <__kernel_rem_pio2f+0x278>
 8023480:	2a00      	cmp	r2, #0
 8023482:	d065      	beq.n	8023550 <__kernel_rem_pio2f+0x2b0>
 8023484:	3c01      	subs	r4, #1
 8023486:	ab08      	add	r3, sp, #32
 8023488:	3d08      	subs	r5, #8
 802348a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802348e:	2b00      	cmp	r3, #0
 8023490:	d0f8      	beq.n	8023484 <__kernel_rem_pio2f+0x1e4>
 8023492:	4628      	mov	r0, r5
 8023494:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023498:	f000 f974 	bl	8023784 <scalbnf>
 802349c:	1c63      	adds	r3, r4, #1
 802349e:	aa44      	add	r2, sp, #272	@ 0x110
 80234a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80235a0 <__kernel_rem_pio2f+0x300>
 80234a4:	0099      	lsls	r1, r3, #2
 80234a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80234aa:	4623      	mov	r3, r4
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	f280 80a9 	bge.w	8023604 <__kernel_rem_pio2f+0x364>
 80234b2:	4623      	mov	r3, r4
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	f2c0 80c7 	blt.w	8023648 <__kernel_rem_pio2f+0x3a8>
 80234ba:	aa44      	add	r2, sp, #272	@ 0x110
 80234bc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80234c0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8023598 <__kernel_rem_pio2f+0x2f8>
 80234c4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 80234c8:	2000      	movs	r0, #0
 80234ca:	1ae2      	subs	r2, r4, r3
 80234cc:	e0b1      	b.n	8023632 <__kernel_rem_pio2f+0x392>
 80234ce:	2602      	movs	r6, #2
 80234d0:	e78f      	b.n	80233f2 <__kernel_rem_pio2f+0x152>
 80234d2:	f852 1b04 	ldr.w	r1, [r2], #4
 80234d6:	b948      	cbnz	r0, 80234ec <__kernel_rem_pio2f+0x24c>
 80234d8:	b121      	cbz	r1, 80234e4 <__kernel_rem_pio2f+0x244>
 80234da:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80234de:	f842 1c04 	str.w	r1, [r2, #-4]
 80234e2:	2101      	movs	r1, #1
 80234e4:	f10e 0e01 	add.w	lr, lr, #1
 80234e8:	4608      	mov	r0, r1
 80234ea:	e787      	b.n	80233fc <__kernel_rem_pio2f+0x15c>
 80234ec:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80234f0:	e7f5      	b.n	80234de <__kernel_rem_pio2f+0x23e>
 80234f2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80234f6:	aa08      	add	r2, sp, #32
 80234f8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80234fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8023500:	a908      	add	r1, sp, #32
 8023502:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8023506:	e781      	b.n	802340c <__kernel_rem_pio2f+0x16c>
 8023508:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 802350c:	aa08      	add	r2, sp, #32
 802350e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023512:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8023516:	e7f3      	b.n	8023500 <__kernel_rem_pio2f+0x260>
 8023518:	a908      	add	r1, sp, #32
 802351a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802351e:	3801      	subs	r0, #1
 8023520:	430a      	orrs	r2, r1
 8023522:	e7ab      	b.n	802347c <__kernel_rem_pio2f+0x1dc>
 8023524:	3201      	adds	r2, #1
 8023526:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802352a:	2e00      	cmp	r6, #0
 802352c:	d0fa      	beq.n	8023524 <__kernel_rem_pio2f+0x284>
 802352e:	9905      	ldr	r1, [sp, #20]
 8023530:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8023534:	eb0d 0001 	add.w	r0, sp, r1
 8023538:	18e6      	adds	r6, r4, r3
 802353a:	a91c      	add	r1, sp, #112	@ 0x70
 802353c:	f104 0c01 	add.w	ip, r4, #1
 8023540:	384c      	subs	r0, #76	@ 0x4c
 8023542:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8023546:	4422      	add	r2, r4
 8023548:	4562      	cmp	r2, ip
 802354a:	da04      	bge.n	8023556 <__kernel_rem_pio2f+0x2b6>
 802354c:	4614      	mov	r4, r2
 802354e:	e70e      	b.n	802336e <__kernel_rem_pio2f+0xce>
 8023550:	9804      	ldr	r0, [sp, #16]
 8023552:	2201      	movs	r2, #1
 8023554:	e7e7      	b.n	8023526 <__kernel_rem_pio2f+0x286>
 8023556:	9903      	ldr	r1, [sp, #12]
 8023558:	f8dd e004 	ldr.w	lr, [sp, #4]
 802355c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023560:	9105      	str	r1, [sp, #20]
 8023562:	ee07 1a90 	vmov	s15, r1
 8023566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802356a:	2400      	movs	r4, #0
 802356c:	ece6 7a01 	vstmia	r6!, {s15}
 8023570:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 8023574:	46b1      	mov	r9, r6
 8023576:	455c      	cmp	r4, fp
 8023578:	dd04      	ble.n	8023584 <__kernel_rem_pio2f+0x2e4>
 802357a:	ece0 7a01 	vstmia	r0!, {s15}
 802357e:	f10c 0c01 	add.w	ip, ip, #1
 8023582:	e7e1      	b.n	8023548 <__kernel_rem_pio2f+0x2a8>
 8023584:	ecfe 6a01 	vldmia	lr!, {s13}
 8023588:	ed39 7a01 	vldmdb	r9!, {s14}
 802358c:	3401      	adds	r4, #1
 802358e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023592:	e7f0      	b.n	8023576 <__kernel_rem_pio2f+0x2d6>
 8023594:	08024364 	.word	0x08024364
 8023598:	08024338 	.word	0x08024338
 802359c:	43800000 	.word	0x43800000
 80235a0:	3b800000 	.word	0x3b800000
 80235a4:	00000000 	.word	0x00000000
 80235a8:	9b02      	ldr	r3, [sp, #8]
 80235aa:	eeb0 0a48 	vmov.f32	s0, s16
 80235ae:	eba3 0008 	sub.w	r0, r3, r8
 80235b2:	f000 f8e7 	bl	8023784 <scalbnf>
 80235b6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802359c <__kernel_rem_pio2f+0x2fc>
 80235ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80235be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235c2:	db19      	blt.n	80235f8 <__kernel_rem_pio2f+0x358>
 80235c4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80235a0 <__kernel_rem_pio2f+0x300>
 80235c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80235cc:	aa08      	add	r2, sp, #32
 80235ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80235d2:	3508      	adds	r5, #8
 80235d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80235d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80235dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80235e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80235e4:	ee10 3a10 	vmov	r3, s0
 80235e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80235ec:	ee17 3a90 	vmov	r3, s15
 80235f0:	3401      	adds	r4, #1
 80235f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80235f6:	e74c      	b.n	8023492 <__kernel_rem_pio2f+0x1f2>
 80235f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80235fc:	aa08      	add	r2, sp, #32
 80235fe:	ee10 3a10 	vmov	r3, s0
 8023602:	e7f6      	b.n	80235f2 <__kernel_rem_pio2f+0x352>
 8023604:	a808      	add	r0, sp, #32
 8023606:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802360a:	9001      	str	r0, [sp, #4]
 802360c:	ee07 0a90 	vmov	s15, r0
 8023610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023614:	3b01      	subs	r3, #1
 8023616:	ee67 7a80 	vmul.f32	s15, s15, s0
 802361a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802361e:	ed62 7a01 	vstmdb	r2!, {s15}
 8023622:	e743      	b.n	80234ac <__kernel_rem_pio2f+0x20c>
 8023624:	ecfc 6a01 	vldmia	ip!, {s13}
 8023628:	ecb5 7a01 	vldmia	r5!, {s14}
 802362c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023630:	3001      	adds	r0, #1
 8023632:	4550      	cmp	r0, sl
 8023634:	dc01      	bgt.n	802363a <__kernel_rem_pio2f+0x39a>
 8023636:	4282      	cmp	r2, r0
 8023638:	daf4      	bge.n	8023624 <__kernel_rem_pio2f+0x384>
 802363a:	a858      	add	r0, sp, #352	@ 0x160
 802363c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8023640:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8023644:	3b01      	subs	r3, #1
 8023646:	e735      	b.n	80234b4 <__kernel_rem_pio2f+0x214>
 8023648:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802364a:	2b02      	cmp	r3, #2
 802364c:	dc09      	bgt.n	8023662 <__kernel_rem_pio2f+0x3c2>
 802364e:	2b00      	cmp	r3, #0
 8023650:	dc2b      	bgt.n	80236aa <__kernel_rem_pio2f+0x40a>
 8023652:	d044      	beq.n	80236de <__kernel_rem_pio2f+0x43e>
 8023654:	f009 0007 	and.w	r0, r9, #7
 8023658:	b059      	add	sp, #356	@ 0x164
 802365a:	ecbd 8b04 	vpop	{d8-d9}
 802365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023662:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8023664:	2b03      	cmp	r3, #3
 8023666:	d1f5      	bne.n	8023654 <__kernel_rem_pio2f+0x3b4>
 8023668:	aa30      	add	r2, sp, #192	@ 0xc0
 802366a:	1f0b      	subs	r3, r1, #4
 802366c:	4413      	add	r3, r2
 802366e:	461a      	mov	r2, r3
 8023670:	4620      	mov	r0, r4
 8023672:	2800      	cmp	r0, #0
 8023674:	f1a2 0204 	sub.w	r2, r2, #4
 8023678:	dc52      	bgt.n	8023720 <__kernel_rem_pio2f+0x480>
 802367a:	4622      	mov	r2, r4
 802367c:	2a01      	cmp	r2, #1
 802367e:	f1a3 0304 	sub.w	r3, r3, #4
 8023682:	dc5d      	bgt.n	8023740 <__kernel_rem_pio2f+0x4a0>
 8023684:	ab30      	add	r3, sp, #192	@ 0xc0
 8023686:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 802368a:	440b      	add	r3, r1
 802368c:	2c01      	cmp	r4, #1
 802368e:	dc67      	bgt.n	8023760 <__kernel_rem_pio2f+0x4c0>
 8023690:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8023694:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8023698:	2e00      	cmp	r6, #0
 802369a:	d167      	bne.n	802376c <__kernel_rem_pio2f+0x4cc>
 802369c:	edc7 6a00 	vstr	s13, [r7]
 80236a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80236a4:	edc7 7a02 	vstr	s15, [r7, #8]
 80236a8:	e7d4      	b.n	8023654 <__kernel_rem_pio2f+0x3b4>
 80236aa:	ab30      	add	r3, sp, #192	@ 0xc0
 80236ac:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 80236b0:	440b      	add	r3, r1
 80236b2:	4622      	mov	r2, r4
 80236b4:	2a00      	cmp	r2, #0
 80236b6:	da24      	bge.n	8023702 <__kernel_rem_pio2f+0x462>
 80236b8:	b34e      	cbz	r6, 802370e <__kernel_rem_pio2f+0x46e>
 80236ba:	eef1 7a47 	vneg.f32	s15, s14
 80236be:	edc7 7a00 	vstr	s15, [r7]
 80236c2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80236c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80236ca:	aa31      	add	r2, sp, #196	@ 0xc4
 80236cc:	2301      	movs	r3, #1
 80236ce:	429c      	cmp	r4, r3
 80236d0:	da20      	bge.n	8023714 <__kernel_rem_pio2f+0x474>
 80236d2:	b10e      	cbz	r6, 80236d8 <__kernel_rem_pio2f+0x438>
 80236d4:	eef1 7a67 	vneg.f32	s15, s15
 80236d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80236dc:	e7ba      	b.n	8023654 <__kernel_rem_pio2f+0x3b4>
 80236de:	ab30      	add	r3, sp, #192	@ 0xc0
 80236e0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80235a4 <__kernel_rem_pio2f+0x304>
 80236e4:	440b      	add	r3, r1
 80236e6:	2c00      	cmp	r4, #0
 80236e8:	da05      	bge.n	80236f6 <__kernel_rem_pio2f+0x456>
 80236ea:	b10e      	cbz	r6, 80236f0 <__kernel_rem_pio2f+0x450>
 80236ec:	eef1 7a67 	vneg.f32	s15, s15
 80236f0:	edc7 7a00 	vstr	s15, [r7]
 80236f4:	e7ae      	b.n	8023654 <__kernel_rem_pio2f+0x3b4>
 80236f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80236fa:	3c01      	subs	r4, #1
 80236fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023700:	e7f1      	b.n	80236e6 <__kernel_rem_pio2f+0x446>
 8023702:	ed73 7a01 	vldmdb	r3!, {s15}
 8023706:	3a01      	subs	r2, #1
 8023708:	ee37 7a27 	vadd.f32	s14, s14, s15
 802370c:	e7d2      	b.n	80236b4 <__kernel_rem_pio2f+0x414>
 802370e:	eef0 7a47 	vmov.f32	s15, s14
 8023712:	e7d4      	b.n	80236be <__kernel_rem_pio2f+0x41e>
 8023714:	ecb2 7a01 	vldmia	r2!, {s14}
 8023718:	3301      	adds	r3, #1
 802371a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802371e:	e7d6      	b.n	80236ce <__kernel_rem_pio2f+0x42e>
 8023720:	edd2 7a00 	vldr	s15, [r2]
 8023724:	edd2 6a01 	vldr	s13, [r2, #4]
 8023728:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802372c:	3801      	subs	r0, #1
 802372e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023732:	ed82 7a00 	vstr	s14, [r2]
 8023736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802373a:	edc2 7a01 	vstr	s15, [r2, #4]
 802373e:	e798      	b.n	8023672 <__kernel_rem_pio2f+0x3d2>
 8023740:	edd3 7a00 	vldr	s15, [r3]
 8023744:	edd3 6a01 	vldr	s13, [r3, #4]
 8023748:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802374c:	3a01      	subs	r2, #1
 802374e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023752:	ed83 7a00 	vstr	s14, [r3]
 8023756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802375a:	edc3 7a01 	vstr	s15, [r3, #4]
 802375e:	e78d      	b.n	802367c <__kernel_rem_pio2f+0x3dc>
 8023760:	ed33 7a01 	vldmdb	r3!, {s14}
 8023764:	3c01      	subs	r4, #1
 8023766:	ee77 7a87 	vadd.f32	s15, s15, s14
 802376a:	e78f      	b.n	802368c <__kernel_rem_pio2f+0x3ec>
 802376c:	eef1 6a66 	vneg.f32	s13, s13
 8023770:	eeb1 7a47 	vneg.f32	s14, s14
 8023774:	edc7 6a00 	vstr	s13, [r7]
 8023778:	ed87 7a01 	vstr	s14, [r7, #4]
 802377c:	eef1 7a67 	vneg.f32	s15, s15
 8023780:	e790      	b.n	80236a4 <__kernel_rem_pio2f+0x404>
 8023782:	bf00      	nop

08023784 <scalbnf>:
 8023784:	ee10 3a10 	vmov	r3, s0
 8023788:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802378c:	d02b      	beq.n	80237e6 <scalbnf+0x62>
 802378e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8023792:	d302      	bcc.n	802379a <scalbnf+0x16>
 8023794:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023798:	4770      	bx	lr
 802379a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802379e:	d123      	bne.n	80237e8 <scalbnf+0x64>
 80237a0:	4b24      	ldr	r3, [pc, #144]	@ (8023834 <scalbnf+0xb0>)
 80237a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8023838 <scalbnf+0xb4>
 80237a6:	4298      	cmp	r0, r3
 80237a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80237ac:	db17      	blt.n	80237de <scalbnf+0x5a>
 80237ae:	ee10 3a10 	vmov	r3, s0
 80237b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80237b6:	3a19      	subs	r2, #25
 80237b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80237bc:	4288      	cmp	r0, r1
 80237be:	dd15      	ble.n	80237ec <scalbnf+0x68>
 80237c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 802383c <scalbnf+0xb8>
 80237c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8023840 <scalbnf+0xbc>
 80237c8:	ee10 3a10 	vmov	r3, s0
 80237cc:	eeb0 7a67 	vmov.f32	s14, s15
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	bfb8      	it	lt
 80237d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80237d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80237dc:	4770      	bx	lr
 80237de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8023844 <scalbnf+0xc0>
 80237e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80237e6:	4770      	bx	lr
 80237e8:	0dd2      	lsrs	r2, r2, #23
 80237ea:	e7e5      	b.n	80237b8 <scalbnf+0x34>
 80237ec:	4410      	add	r0, r2
 80237ee:	28fe      	cmp	r0, #254	@ 0xfe
 80237f0:	dce6      	bgt.n	80237c0 <scalbnf+0x3c>
 80237f2:	2800      	cmp	r0, #0
 80237f4:	dd06      	ble.n	8023804 <scalbnf+0x80>
 80237f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80237fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80237fe:	ee00 3a10 	vmov	s0, r3
 8023802:	4770      	bx	lr
 8023804:	f110 0f16 	cmn.w	r0, #22
 8023808:	da09      	bge.n	802381e <scalbnf+0x9a>
 802380a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8023844 <scalbnf+0xc0>
 802380e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8023848 <scalbnf+0xc4>
 8023812:	ee10 3a10 	vmov	r3, s0
 8023816:	eeb0 7a67 	vmov.f32	s14, s15
 802381a:	2b00      	cmp	r3, #0
 802381c:	e7d9      	b.n	80237d2 <scalbnf+0x4e>
 802381e:	3019      	adds	r0, #25
 8023820:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8023824:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8023828:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 802384c <scalbnf+0xc8>
 802382c:	ee07 3a90 	vmov	s15, r3
 8023830:	e7d7      	b.n	80237e2 <scalbnf+0x5e>
 8023832:	bf00      	nop
 8023834:	ffff3cb0 	.word	0xffff3cb0
 8023838:	4c000000 	.word	0x4c000000
 802383c:	7149f2ca 	.word	0x7149f2ca
 8023840:	f149f2ca 	.word	0xf149f2ca
 8023844:	0da24260 	.word	0x0da24260
 8023848:	8da24260 	.word	0x8da24260
 802384c:	33000000 	.word	0x33000000

08023850 <floorf>:
 8023850:	ee10 3a10 	vmov	r3, s0
 8023854:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023858:	3a7f      	subs	r2, #127	@ 0x7f
 802385a:	2a16      	cmp	r2, #22
 802385c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023860:	dc2b      	bgt.n	80238ba <floorf+0x6a>
 8023862:	2a00      	cmp	r2, #0
 8023864:	da12      	bge.n	802388c <floorf+0x3c>
 8023866:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80238cc <floorf+0x7c>
 802386a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802386e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8023872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023876:	dd06      	ble.n	8023886 <floorf+0x36>
 8023878:	2b00      	cmp	r3, #0
 802387a:	da24      	bge.n	80238c6 <floorf+0x76>
 802387c:	2900      	cmp	r1, #0
 802387e:	4b14      	ldr	r3, [pc, #80]	@ (80238d0 <floorf+0x80>)
 8023880:	bf08      	it	eq
 8023882:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8023886:	ee00 3a10 	vmov	s0, r3
 802388a:	4770      	bx	lr
 802388c:	4911      	ldr	r1, [pc, #68]	@ (80238d4 <floorf+0x84>)
 802388e:	4111      	asrs	r1, r2
 8023890:	420b      	tst	r3, r1
 8023892:	d0fa      	beq.n	802388a <floorf+0x3a>
 8023894:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80238cc <floorf+0x7c>
 8023898:	ee30 0a27 	vadd.f32	s0, s0, s15
 802389c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80238a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238a4:	ddef      	ble.n	8023886 <floorf+0x36>
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	bfbe      	ittt	lt
 80238aa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80238ae:	fa40 f202 	asrlt.w	r2, r0, r2
 80238b2:	189b      	addlt	r3, r3, r2
 80238b4:	ea23 0301 	bic.w	r3, r3, r1
 80238b8:	e7e5      	b.n	8023886 <floorf+0x36>
 80238ba:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80238be:	d3e4      	bcc.n	802388a <floorf+0x3a>
 80238c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80238c4:	4770      	bx	lr
 80238c6:	2300      	movs	r3, #0
 80238c8:	e7dd      	b.n	8023886 <floorf+0x36>
 80238ca:	bf00      	nop
 80238cc:	7149f2ca 	.word	0x7149f2ca
 80238d0:	bf800000 	.word	0xbf800000
 80238d4:	007fffff 	.word	0x007fffff

080238d8 <_init>:
 80238d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238da:	bf00      	nop
 80238dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80238de:	bc08      	pop	{r3}
 80238e0:	469e      	mov	lr, r3
 80238e2:	4770      	bx	lr

080238e4 <_fini>:
 80238e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238e6:	bf00      	nop
 80238e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80238ea:	bc08      	pop	{r3}
 80238ec:	469e      	mov	lr, r3
 80238ee:	4770      	bx	lr
